// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Ionic.Zip.ZipEntry
#include "Pathfinding/Ionic/Zip/ZipEntry.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipEntry/CopyHelper
#include "Pathfinding/Ionic/Zip/ZipEntry_CopyHelper.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipCrypto
#include "Pathfinding/Ionic/Zip/ZipCrypto.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipContainer
#include "Pathfinding/Ionic/Zip/ZipContainer.hpp"
// Including type: Pathfinding.Ionic.Zip.WriteDelegate
#include "Pathfinding/Ionic/Zip/WriteDelegate.hpp"
// Including type: Pathfinding.Ionic.Zip.OpenDelegate
#include "Pathfinding/Ionic/Zip/OpenDelegate.hpp"
// Including type: Pathfinding.Ionic.Zip.CloseDelegate
#include "Pathfinding/Ionic/Zip/CloseDelegate.hpp"
// Including type: Pathfinding.Ionic.Zip.SetCompressionCallback
#include "Pathfinding/Ionic/Zip/SetCompressionCallback.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipFile
#include "Pathfinding/Ionic/Zip/ZipFile.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Pathfinding.Ionic.Crc.CrcCalculatorStream
#include "Pathfinding/Ionic/Crc/CrcCalculatorStream.hpp"
// Including type: Pathfinding.Ionic.Zip.CountingStream
#include "Pathfinding/Ionic/Zip/CountingStream.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Pathfinding.Ionic.Zip.CompressionMethod
#include "Pathfinding/Ionic/Zip/CompressionMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.Encoding ibm437
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipEntry::_get_ibm437() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_get_ibm437");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::Encoding*>("Pathfinding.Ionic.Zip", "ZipEntry", "ibm437"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.Encoding ibm437
void Pathfinding::Ionic::Zip::ZipEntry::_set_ibm437(::System::Text::Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_set_ibm437");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntry", "ibm437", value));
}
// Autogenerated static field getter
// Get static field: static private System.DateTime _unixEpoch
::System::DateTime Pathfinding::Ionic::Zip::ZipEntry::_get__unixEpoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_get__unixEpoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::DateTime>("Pathfinding.Ionic.Zip", "ZipEntry", "_unixEpoch"));
}
// Autogenerated static field setter
// Set static field: static private System.DateTime _unixEpoch
void Pathfinding::Ionic::Zip::ZipEntry::_set__unixEpoch(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_set__unixEpoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntry", "_unixEpoch", value));
}
// Autogenerated static field getter
// Get static field: static private System.DateTime _win32Epoch
::System::DateTime Pathfinding::Ionic::Zip::ZipEntry::_get__win32Epoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_get__win32Epoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::DateTime>("Pathfinding.Ionic.Zip", "ZipEntry", "_win32Epoch"));
}
// Autogenerated static field setter
// Set static field: static private System.DateTime _win32Epoch
void Pathfinding::Ionic::Zip::ZipEntry::_set__win32Epoch(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_set__win32Epoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntry", "_win32Epoch", value));
}
// Autogenerated static field getter
// Get static field: static private System.DateTime _zeroHour
::System::DateTime Pathfinding::Ionic::Zip::ZipEntry::_get__zeroHour() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_get__zeroHour");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::DateTime>("Pathfinding.Ionic.Zip", "ZipEntry", "_zeroHour"));
}
// Autogenerated static field setter
// Set static field: static private System.DateTime _zeroHour
void Pathfinding::Ionic::Zip::ZipEntry::_set__zeroHour(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_set__zeroHour");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntry", "_zeroHour", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int16 _VersionMadeBy
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__VersionMadeBy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__VersionMadeBy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_VersionMadeBy"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int16 _InternalFileAttrs
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__InternalFileAttrs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__InternalFileAttrs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_InternalFileAttrs"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _ExternalFileAttrs
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipEntry::dyn__ExternalFileAttrs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__ExternalFileAttrs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ExternalFileAttrs"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int16 _filenameLength
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__filenameLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__filenameLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_filenameLength"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int16 _extraFieldLength
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__extraFieldLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__extraFieldLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extraFieldLength"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int16 _commentLength
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__commentLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__commentLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_commentLength"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _inputDecryptorStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipEntry::dyn__inputDecryptorStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__inputDecryptorStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inputDecryptorStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _outputLock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Pathfinding::Ionic::Zip::ZipEntry::dyn__outputLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__outputLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outputLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipCrypto _zipCrypto_forExtract
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipCrypto*& Pathfinding::Ionic::Zip::ZipEntry::dyn__zipCrypto_forExtract() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__zipCrypto_forExtract");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zipCrypto_forExtract"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipCrypto**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipCrypto _zipCrypto_forWrite
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipCrypto*& Pathfinding::Ionic::Zip::ZipEntry::dyn__zipCrypto_forWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__zipCrypto_forWrite");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zipCrypto_forWrite"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipCrypto**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.DateTime _LastModified
[[deprecated("Use field access instead!")]] ::System::DateTime& Pathfinding::Ionic::Zip::ZipEntry::dyn__LastModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__LastModified");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_LastModified"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime _Mtime
[[deprecated("Use field access instead!")]] ::System::DateTime& Pathfinding::Ionic::Zip::ZipEntry::dyn__Mtime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Mtime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Mtime"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime _Atime
[[deprecated("Use field access instead!")]] ::System::DateTime& Pathfinding::Ionic::Zip::ZipEntry::dyn__Atime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Atime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Atime"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime _Ctime
[[deprecated("Use field access instead!")]] ::System::DateTime& Pathfinding::Ionic::Zip::ZipEntry::dyn__Ctime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Ctime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Ctime"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ntfsTimesAreSet
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__ntfsTimesAreSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__ntfsTimesAreSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ntfsTimesAreSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _emitNtfsTimes
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__emitNtfsTimes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__emitNtfsTimes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitNtfsTimes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _emitUnixTimes
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__emitUnixTimes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__emitUnixTimes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitUnixTimes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _TrimVolumeFromFullyQualifiedPaths
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__TrimVolumeFromFullyQualifiedPaths() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__TrimVolumeFromFullyQualifiedPaths");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TrimVolumeFromFullyQualifiedPaths"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.String _LocalFileName
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipEntry::dyn__LocalFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__LocalFileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_LocalFileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _FileNameInArchive
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipEntry::dyn__FileNameInArchive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__FileNameInArchive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_FileNameInArchive"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16 _VersionNeeded
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__VersionNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__VersionNeeded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_VersionNeeded"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16 _BitField
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__BitField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__BitField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_BitField"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16 _CompressionMethod
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressionMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_CompressionMethod"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int16 _CompressionMethod_FromZipFile
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressionMethod_FromZipFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressionMethod_FromZipFile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_CompressionMethod_FromZipFile"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.CompressionLevel _CompressionLevel
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressionLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressionLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_CompressionLevel"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionLevel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.String _Comment
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipEntry::dyn__Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Comment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Comment"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _IsDirectory
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__IsDirectory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__IsDirectory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_IsDirectory"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] _CommentBytes
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zip::ZipEntry::dyn__CommentBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__CommentBytes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_CommentBytes"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int64 _CompressedSize
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressedSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_CompressedSize"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int64 _CompressedFileDataSize
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressedFileDataSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__CompressedFileDataSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_CompressedFileDataSize"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int64 _UncompressedSize
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__UncompressedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__UncompressedSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_UncompressedSize"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _TimeBlob
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipEntry::dyn__TimeBlob() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__TimeBlob");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TimeBlob"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _crcCalculated
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__crcCalculated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__crcCalculated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_crcCalculated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _Crc32
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipEntry::dyn__Crc32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Crc32");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Crc32"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte[] _Extra
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zip::ZipEntry::dyn__Extra() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Extra");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Extra"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _metadataChanged
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__metadataChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__metadataChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_metadataChanged"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _restreamRequiredOnSave
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__restreamRequiredOnSave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__restreamRequiredOnSave");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_restreamRequiredOnSave"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _sourceIsEncrypted
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__sourceIsEncrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__sourceIsEncrypted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sourceIsEncrypted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _skippedDuringSave
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__skippedDuringSave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__skippedDuringSave");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skippedDuringSave"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _diskNumber
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zip::ZipEntry::dyn__diskNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__diskNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_diskNumber"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.Encoding _actualEncoding
[[deprecated("Use field access instead!")]] ::System::Text::Encoding*& Pathfinding::Ionic::Zip::ZipEntry::dyn__actualEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__actualEncoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_actualEncoding"))->offset;
  return *reinterpret_cast<::System::Text::Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.ZipContainer _container
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipContainer*& Pathfinding::Ionic::Zip::ZipEntry::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 __FileDataPosition
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipEntry::dyn___FileDataPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn___FileDataPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "__FileDataPosition"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] _EntryHeader
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zip::ZipEntry::dyn__EntryHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__EntryHeader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_EntryHeader"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int64 _RelativeOffsetOfLocalHeader
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__RelativeOffsetOfLocalHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__RelativeOffsetOfLocalHeader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_RelativeOffsetOfLocalHeader"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _future_ROLH
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__future_ROLH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__future_ROLH");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_future_ROLH"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _TotalEntrySize
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipEntry::dyn__TotalEntrySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__TotalEntrySize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TotalEntrySize"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _LengthOfHeader
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipEntry::dyn__LengthOfHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__LengthOfHeader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_LengthOfHeader"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _LengthOfTrailer
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipEntry::dyn__LengthOfTrailer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__LengthOfTrailer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_LengthOfTrailer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean _InputUsesZip64
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__InputUsesZip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__InputUsesZip64");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_InputUsesZip64"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _UnsupportedAlgorithmId
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zip::ZipEntry::dyn__UnsupportedAlgorithmId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__UnsupportedAlgorithmId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_UnsupportedAlgorithmId"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.String _Password
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipEntry::dyn__Password() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Password");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Password"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.ZipEntrySource _Source
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntrySource& Pathfinding::Ionic::Zip::ZipEntry::dyn__Source() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Source");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Source"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipEntrySource*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::EncryptionAlgorithm& Pathfinding::Ionic::Zip::ZipEntry::dyn__Encryption() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Encryption");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Encryption"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::EncryptionAlgorithm*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption_FromZipFile
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::EncryptionAlgorithm& Pathfinding::Ionic::Zip::ZipEntry::dyn__Encryption_FromZipFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__Encryption_FromZipFile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Encryption_FromZipFile"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::EncryptionAlgorithm*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte[] _WeakEncryptionHeader
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zip::ZipEntry::dyn__WeakEncryptionHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__WeakEncryptionHeader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_WeakEncryptionHeader"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.IO.Stream _archiveStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipEntry::dyn__archiveStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__archiveStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_archiveStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _sourceStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipEntry::dyn__sourceStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__sourceStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sourceStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Int64> _sourceStreamOriginalPosition
[[deprecated("Use field access instead!")]] ::System::Nullable_1<int64_t>& Pathfinding::Ionic::Zip::ZipEntry::dyn__sourceStreamOriginalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__sourceStreamOriginalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sourceStreamOriginalPosition"))->offset;
  return *reinterpret_cast<::System::Nullable_1<int64_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ioOperationCanceled
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__ioOperationCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__ioOperationCanceled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ioOperationCanceled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _presumeZip64
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__presumeZip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__presumeZip64");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_presumeZip64"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Boolean> _entryRequiresZip64
[[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& Pathfinding::Ionic::Zip::ZipEntry::dyn__entryRequiresZip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__entryRequiresZip64");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entryRequiresZip64"))->offset;
  return *reinterpret_cast<::System::Nullable_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Boolean> _OutputUsesZip64
[[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& Pathfinding::Ionic::Zip::ZipEntry::dyn__OutputUsesZip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__OutputUsesZip64");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OutputUsesZip64"))->offset;
  return *reinterpret_cast<::System::Nullable_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _IsText
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipEntry::dyn__IsText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__IsText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_IsText"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipEntryTimestamp _timestamp
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntryTimestamp& Pathfinding::Ionic::Zip::ZipEntry::dyn__timestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__timestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timestamp"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipEntryTimestamp*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.WriteDelegate _WriteDelegate
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::WriteDelegate*& Pathfinding::Ionic::Zip::ZipEntry::dyn__WriteDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__WriteDelegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_WriteDelegate"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::WriteDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.OpenDelegate _OpenDelegate
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::OpenDelegate*& Pathfinding::Ionic::Zip::ZipEntry::dyn__OpenDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__OpenDelegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OpenDelegate"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::OpenDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.CloseDelegate _CloseDelegate
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::CloseDelegate*& Pathfinding::Ionic::Zip::ZipEntry::dyn__CloseDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn__CloseDelegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_CloseDelegate"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::CloseDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ExtractExistingFileAction <ExtractExistingFile>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ExtractExistingFileAction& Pathfinding::Ionic::Zip::ZipEntry::dyn_$ExtractExistingFile$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn_$ExtractExistingFile$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ExtractExistingFile>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ExtractExistingFileAction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipErrorAction <ZipErrorAction>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipErrorAction& Pathfinding::Ionic::Zip::ZipEntry::dyn_$ZipErrorAction$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn_$ZipErrorAction$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ZipErrorAction>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipErrorAction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.SetCompressionCallback <SetCompression>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::SetCompressionCallback*& Pathfinding::Ionic::Zip::ZipEntry::dyn_$SetCompression$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn_$SetCompression$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SetCompression>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::SetCompressionCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.Encoding <AlternateEncoding>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Text::Encoding*& Pathfinding::Ionic::Zip::ZipEntry::dyn_$AlternateEncoding$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn_$AlternateEncoding$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AlternateEncoding>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Text::Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipOption <AlternateEncodingUsage>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipOption& Pathfinding::Ionic::Zip::ZipEntry::dyn_$AlternateEncodingUsage$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::dyn_$AlternateEncodingUsage$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AlternateEncodingUsage>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipOption*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry..cctor
void Pathfinding::Ionic::Zip::ZipEntry::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_AttributesIndicateDirectory
bool Pathfinding::Ionic::Zip::ZipEntry::get_AttributesIndicateDirectory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_AttributesIndicateDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AttributesIndicateDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ResetDirEntry
void Pathfinding::Ionic::Zip::ZipEntry::ResetDirEntry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ResetDirEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetDirEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ReadDirEntry
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipEntry::ReadDirEntry(::Pathfinding::Ionic::Zip::ZipFile* zf, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* previouslySeen) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ReadDirEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "ReadDirEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zf), ::il2cpp_utils::ExtractType(previouslySeen)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zf, previouslySeen);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.IsNotValidZipDirEntrySig
bool Pathfinding::Ionic::Zip::ZipEntry::IsNotValidZipDirEntrySig(int signature) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::IsNotValidZipDirEntrySig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "IsNotValidZipDirEntrySig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signature)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, signature);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.Extract
void Pathfinding::Ionic::Zip::ZipEntry::Extract(::System::IO::Stream* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::Extract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Extract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.InternalOpenReader
::Pathfinding::Ionic::Crc::CrcCalculatorStream* Pathfinding::Ionic::Zip::ZipEntry::InternalOpenReader(::StringW password) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::InternalOpenReader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalOpenReader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Crc::CrcCalculatorStream*, false>(this, ___internal__method, password);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.OnExtractProgress
void Pathfinding::Ionic::Zip::ZipEntry::OnExtractProgress(int64_t bytesWritten, int64_t totalBytesToWrite) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::OnExtractProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnExtractProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesWritten), ::il2cpp_utils::ExtractType(totalBytesToWrite)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytesWritten, totalBytesToWrite);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.OnBeforeExtract
void Pathfinding::Ionic::Zip::ZipEntry::OnBeforeExtract(::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::OnBeforeExtract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeforeExtract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.OnAfterExtract
void Pathfinding::Ionic::Zip::ZipEntry::OnAfterExtract(::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::OnAfterExtract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAfterExtract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.OnExtractExisting
void Pathfinding::Ionic::Zip::ZipEntry::OnExtractExisting(::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::OnExtractExisting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnExtractExisting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ReallyDelete
void Pathfinding::Ionic::Zip::ZipEntry::ReallyDelete(::StringW fileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ReallyDelete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "ReallyDelete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fileName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fileName);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.WriteStatus
void Pathfinding::Ionic::Zip::ZipEntry::WriteStatus(::StringW format, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::WriteStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, format, args);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.InternalExtract
void Pathfinding::Ionic::Zip::ZipEntry::InternalExtract(::StringW baseDir, ::System::IO::Stream* outstream, ::StringW password) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::InternalExtract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalExtract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseDir), ::il2cpp_utils::ExtractType(outstream), ::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, baseDir, outstream, password);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.VerifyCrcAfterExtract
void Pathfinding::Ionic::Zip::ZipEntry::VerifyCrcAfterExtract(int actualCrc32) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::VerifyCrcAfterExtract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerifyCrcAfterExtract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actualCrc32)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, actualCrc32);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.CheckExtractExistingFile
int Pathfinding::Ionic::Zip::ZipEntry::CheckExtractExistingFile(::StringW baseDir, ::StringW targetFileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CheckExtractExistingFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckExtractExistingFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseDir), ::il2cpp_utils::ExtractType(targetFileName)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, baseDir, targetFileName);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry._CheckRead
void Pathfinding::Ionic::Zip::ZipEntry::_CheckRead(int nbytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_CheckRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_CheckRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nbytes)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nbytes);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ExtractOne
int Pathfinding::Ionic::Zip::ZipEntry::ExtractOne(::System::IO::Stream* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ExtractOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExtractOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, output);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.GetExtractDecompressor
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipEntry::GetExtractDecompressor(::System::IO::Stream* input2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::GetExtractDecompressor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExtractDecompressor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input2)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method, input2);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.GetExtractDecryptor
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipEntry::GetExtractDecryptor(::System::IO::Stream* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::GetExtractDecryptor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExtractDecryptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method, input);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry._SetTimes
void Pathfinding::Ionic::Zip::ZipEntry::_SetTimes(::StringW fileOrDirectory, bool isFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_SetTimes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_SetTimes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fileOrDirectory), ::il2cpp_utils::ExtractType(isFile)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fileOrDirectory, isFile);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_UnsupportedAlgorithm
::StringW Pathfinding::Ionic::Zip::ZipEntry::get_UnsupportedAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_UnsupportedAlgorithm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UnsupportedAlgorithm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_UnsupportedCompressionMethod
::StringW Pathfinding::Ionic::Zip::ZipEntry::get_UnsupportedCompressionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_UnsupportedCompressionMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UnsupportedCompressionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ValidateEncryption
void Pathfinding::Ionic::Zip::ZipEntry::ValidateEncryption() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ValidateEncryption");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateEncryption", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ValidateCompression
void Pathfinding::Ionic::Zip::ZipEntry::ValidateCompression() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ValidateCompression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCompression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.SetupCryptoForExtract
void Pathfinding::Ionic::Zip::ZipEntry::SetupCryptoForExtract(::StringW password) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::SetupCryptoForExtract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupCryptoForExtract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ValidateOutput
bool Pathfinding::Ionic::Zip::ZipEntry::ValidateOutput(::StringW basedir, ::System::IO::Stream* outstream, ByRef<::StringW> outFileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ValidateOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(basedir), ::il2cpp_utils::ExtractType(outstream), ::il2cpp_utils::ExtractIndependentType<::StringW&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, basedir, outstream, byref(outFileName));
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ReadHeader
bool Pathfinding::Ionic::Zip::ZipEntry::ReadHeader(::Pathfinding::Ionic::Zip::ZipEntry* ze, ::System::Text::Encoding* defaultEncoding) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ReadHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "ReadHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ze), ::il2cpp_utils::ExtractType(defaultEncoding)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ze, defaultEncoding);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ReadWeakEncryptionHeader
int Pathfinding::Ionic::Zip::ZipEntry::ReadWeakEncryptionHeader(::System::IO::Stream* s, ::ArrayW<uint8_t> buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ReadWeakEncryptionHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "ReadWeakEncryptionHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(buffer)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, buffer);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.IsNotValidSig
bool Pathfinding::Ionic::Zip::ZipEntry::IsNotValidSig(int signature) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::IsNotValidSig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "IsNotValidSig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signature)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, signature);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ReadEntry
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipEntry::ReadEntry(::Pathfinding::Ionic::Zip::ZipContainer* zc, bool first) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ReadEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "ReadEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zc), ::il2cpp_utils::ExtractType(first)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zc, first);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.HandlePK00Prefix
void Pathfinding::Ionic::Zip::ZipEntry::HandlePK00Prefix(::System::IO::Stream* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::HandlePK00Prefix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "HandlePK00Prefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.HandleUnexpectedDataDescriptor
void Pathfinding::Ionic::Zip::ZipEntry::HandleUnexpectedDataDescriptor(::Pathfinding::Ionic::Zip::ZipEntry* entry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::HandleUnexpectedDataDescriptor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "HandleUnexpectedDataDescriptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, entry);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ProcessExtraField
int Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraField(::System::IO::Stream* s, int16_t extraFieldLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessExtraField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(extraFieldLength)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, extraFieldLength);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ProcessExtraFieldPkwareStrongEncryption
int Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldPkwareStrongEncryption(::ArrayW<uint8_t> Buffer, int j) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldPkwareStrongEncryption");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessExtraFieldPkwareStrongEncryption", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Buffer), ::il2cpp_utils::ExtractType(j)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, Buffer, j);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ProcessExtraFieldZip64
int Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldZip64(::ArrayW<uint8_t> buffer, int j, int16_t dataSize, int64_t posn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldZip64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessExtraFieldZip64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(dataSize), ::il2cpp_utils::ExtractType(posn)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, j, dataSize, posn);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ProcessExtraFieldInfoZipTimes
int Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldInfoZipTimes(::ArrayW<uint8_t> buffer, int j, int16_t dataSize, int64_t posn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldInfoZipTimes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessExtraFieldInfoZipTimes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(dataSize), ::il2cpp_utils::ExtractType(posn)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, j, dataSize, posn);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ProcessExtraFieldUnixTimes
int Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldUnixTimes(::ArrayW<uint8_t> buffer, int j, int16_t dataSize, int64_t posn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldUnixTimes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessExtraFieldUnixTimes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(dataSize), ::il2cpp_utils::ExtractType(posn)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, j, dataSize, posn);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ProcessExtraFieldWindowsTimes
int Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldWindowsTimes(::ArrayW<uint8_t> buffer, int j, int16_t dataSize, int64_t posn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldWindowsTimes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessExtraFieldWindowsTimes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(dataSize), ::il2cpp_utils::ExtractType(posn)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, j, dataSize, posn);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.WriteCentralDirectoryEntry
void Pathfinding::Ionic::Zip::ZipEntry::WriteCentralDirectoryEntry(::System::IO::Stream* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::WriteCentralDirectoryEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCentralDirectoryEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ConstructExtraField
::ArrayW<uint8_t> Pathfinding::Ionic::Zip::ZipEntry::ConstructExtraField(bool forCentralDirectory) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ConstructExtraField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstructExtraField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forCentralDirectory)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method, forCentralDirectory);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.NormalizeFileName
::StringW Pathfinding::Ionic::Zip::ZipEntry::NormalizeFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::NormalizeFileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NormalizeFileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.GetEncodedFileNameBytes
::ArrayW<uint8_t> Pathfinding::Ionic::Zip::ZipEntry::GetEncodedFileNameBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::GetEncodedFileNameBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEncodedFileNameBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.WantReadAgain
bool Pathfinding::Ionic::Zip::ZipEntry::WantReadAgain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::WantReadAgain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WantReadAgain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.MaybeUnsetCompressionMethodForWriting
void Pathfinding::Ionic::Zip::ZipEntry::MaybeUnsetCompressionMethodForWriting(int cycle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::MaybeUnsetCompressionMethodForWriting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaybeUnsetCompressionMethodForWriting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cycle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cycle);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.WriteHeader
void Pathfinding::Ionic::Zip::ZipEntry::WriteHeader(::System::IO::Stream* s, int cycle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::WriteHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(cycle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s, cycle);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.FigureCrc32
int Pathfinding::Ionic::Zip::ZipEntry::FigureCrc32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::FigureCrc32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FigureCrc32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.PrepSourceStream
void Pathfinding::Ionic::Zip::ZipEntry::PrepSourceStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::PrepSourceStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepSourceStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.CopyMetaData
void Pathfinding::Ionic::Zip::ZipEntry::CopyMetaData(::Pathfinding::Ionic::Zip::ZipEntry* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyMetaData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyMetaData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.OnWriteBlock
void Pathfinding::Ionic::Zip::ZipEntry::OnWriteBlock(int64_t bytesXferred, int64_t totalBytesToXfer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::OnWriteBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWriteBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesXferred), ::il2cpp_utils::ExtractType(totalBytesToXfer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytesXferred, totalBytesToXfer);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry._WriteEntryData
void Pathfinding::Ionic::Zip::ZipEntry::_WriteEntryData(::System::IO::Stream* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::_WriteEntryData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_WriteEntryData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.SetInputAndFigureFileLength
int64_t Pathfinding::Ionic::Zip::ZipEntry::SetInputAndFigureFileLength(ByRef<::System::IO::Stream*> input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::SetInputAndFigureFileLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInputAndFigureFileLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, byref(input));
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.FinishOutputStream
void Pathfinding::Ionic::Zip::ZipEntry::FinishOutputStream(::System::IO::Stream* s, ::Pathfinding::Ionic::Zip::CountingStream* entryCounter, ::System::IO::Stream* encryptor, ::System::IO::Stream* compressor, ::Pathfinding::Ionic::Crc::CrcCalculatorStream* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::FinishOutputStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishOutputStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(entryCounter), ::il2cpp_utils::ExtractType(encryptor), ::il2cpp_utils::ExtractType(compressor), ::il2cpp_utils::ExtractType(output)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s, entryCounter, encryptor, compressor, output);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.PostProcessOutput
void Pathfinding::Ionic::Zip::ZipEntry::PostProcessOutput(::System::IO::Stream* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::PostProcessOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostProcessOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.SetZip64Flags
void Pathfinding::Ionic::Zip::ZipEntry::SetZip64Flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::SetZip64Flags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetZip64Flags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.PrepOutputStream
void Pathfinding::Ionic::Zip::ZipEntry::PrepOutputStream(::System::IO::Stream* s, int64_t streamLength, ByRef<::Pathfinding::Ionic::Zip::CountingStream*> outputCounter, ByRef<::System::IO::Stream*> encryptor, ByRef<::System::IO::Stream*> compressor, ByRef<::Pathfinding::Ionic::Crc::CrcCalculatorStream*> output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::PrepOutputStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepOutputStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(streamLength), ::il2cpp_utils::ExtractIndependentType<::Pathfinding::Ionic::Zip::CountingStream*&>(), ::il2cpp_utils::ExtractIndependentType<::System::IO::Stream*&>(), ::il2cpp_utils::ExtractIndependentType<::System::IO::Stream*&>(), ::il2cpp_utils::ExtractIndependentType<::Pathfinding::Ionic::Crc::CrcCalculatorStream*&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s, streamLength, byref(outputCounter), byref(encryptor), byref(compressor), byref(output));
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.MaybeApplyCompression
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipEntry::MaybeApplyCompression(::System::IO::Stream* s, int64_t streamLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::MaybeApplyCompression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaybeApplyCompression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(streamLength)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method, s, streamLength);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.MaybeApplyEncryption
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipEntry::MaybeApplyEncryption(::System::IO::Stream* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::MaybeApplyEncryption");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaybeApplyEncryption", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.OnZipErrorWhileSaving
void Pathfinding::Ionic::Zip::ZipEntry::OnZipErrorWhileSaving(::System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::OnZipErrorWhileSaving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnZipErrorWhileSaving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.Write
void Pathfinding::Ionic::Zip::ZipEntry::Write(::System::IO::Stream* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.StoreRelativeOffset
void Pathfinding::Ionic::Zip::ZipEntry::StoreRelativeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::StoreRelativeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreRelativeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.NotifySaveComplete
void Pathfinding::Ionic::Zip::ZipEntry::NotifySaveComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::NotifySaveComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifySaveComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.WriteSecurityMetadata
void Pathfinding::Ionic::Zip::ZipEntry::WriteSecurityMetadata(::System::IO::Stream* outstream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::WriteSecurityMetadata");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSecurityMetadata", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outstream)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outstream);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.CopyThroughOneEntry
void Pathfinding::Ionic::Zip::ZipEntry::CopyThroughOneEntry(::System::IO::Stream* outStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyThroughOneEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyThroughOneEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outStream)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outStream);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.CopyThroughWithRecompute
void Pathfinding::Ionic::Zip::ZipEntry::CopyThroughWithRecompute(::System::IO::Stream* outstream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyThroughWithRecompute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyThroughWithRecompute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outstream)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outstream);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.CopyThroughWithNoChange
void Pathfinding::Ionic::Zip::ZipEntry::CopyThroughWithNoChange(::System::IO::Stream* outstream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyThroughWithNoChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyThroughWithNoChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outstream)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outstream);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_LastModified
::System::DateTime Pathfinding::Ionic::Zip::ZipEntry::get_LastModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_LastModified");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LastModified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_LastModified
void Pathfinding::Ionic::Zip::ZipEntry::set_LastModified(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_LastModified");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LastModified", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_BufferSize
int Pathfinding::Ionic::Zip::ZipEntry::get_BufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_BufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_ModifiedTime
void Pathfinding::Ionic::Zip::ZipEntry::set_ModifiedTime(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_ModifiedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ModifiedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_AccessedTime
void Pathfinding::Ionic::Zip::ZipEntry::set_AccessedTime(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_AccessedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AccessedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_CreationTime
void Pathfinding::Ionic::Zip::ZipEntry::set_CreationTime(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_CreationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CreationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.SetEntryTimes
void Pathfinding::Ionic::Zip::ZipEntry::SetEntryTimes(::System::DateTime created, ::System::DateTime accessed, ::System::DateTime modified) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::SetEntryTimes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEntryTimes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(created), ::il2cpp_utils::ExtractType(accessed), ::il2cpp_utils::ExtractType(modified)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, created, accessed, modified);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_EmitTimesInWindowsFormatWhenSaving
void Pathfinding::Ionic::Zip::ZipEntry::set_EmitTimesInWindowsFormatWhenSaving(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_EmitTimesInWindowsFormatWhenSaving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EmitTimesInWindowsFormatWhenSaving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_EmitTimesInUnixFormatWhenSaving
void Pathfinding::Ionic::Zip::ZipEntry::set_EmitTimesInUnixFormatWhenSaving(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_EmitTimesInUnixFormatWhenSaving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EmitTimesInUnixFormatWhenSaving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_LocalFileName
::StringW Pathfinding::Ionic::Zip::ZipEntry::get_LocalFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_LocalFileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalFileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_FileName
::StringW Pathfinding::Ionic::Zip::ZipEntry::get_FileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_FileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_VersionNeeded
int16_t Pathfinding::Ionic::Zip::ZipEntry::get_VersionNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_VersionNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_VersionNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_Comment
::StringW Pathfinding::Ionic::Zip::ZipEntry::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_OutputUsedZip64
::System::Nullable_1<bool> Pathfinding::Ionic::Zip::ZipEntry::get_OutputUsedZip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_OutputUsedZip64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OutputUsedZip64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<bool>, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_CompressionMethod
::Pathfinding::Ionic::Zip::CompressionMethod Pathfinding::Ionic::Zip::ZipEntry::get_CompressionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_CompressionMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompressionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::CompressionMethod, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_CompressionMethod
void Pathfinding::Ionic::Zip::ZipEntry::set_CompressionMethod(::Pathfinding::Ionic::Zip::CompressionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_CompressionMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CompressionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_CompressionLevel
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zip::ZipEntry::get_CompressionLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_CompressionLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompressionLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::CompressionLevel, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_CompressionLevel
void Pathfinding::Ionic::Zip::ZipEntry::set_CompressionLevel(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_CompressionLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CompressionLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_CompressedSize
int64_t Pathfinding::Ionic::Zip::ZipEntry::get_CompressedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_CompressedSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompressedSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_UncompressedSize
int64_t Pathfinding::Ionic::Zip::ZipEntry::get_UncompressedSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_UncompressedSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UncompressedSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_IsDirectory
bool Pathfinding::Ionic::Zip::ZipEntry::get_IsDirectory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_IsDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_Encryption
::Pathfinding::Ionic::Zip::EncryptionAlgorithm Pathfinding::Ionic::Zip::ZipEntry::get_Encryption() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_Encryption");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encryption", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::EncryptionAlgorithm, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_Encryption
void Pathfinding::Ionic::Zip::ZipEntry::set_Encryption(::Pathfinding::Ionic::Zip::EncryptionAlgorithm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_Encryption");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Encryption", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_Password
void Pathfinding::Ionic::Zip::ZipEntry::set_Password(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_Password");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Password", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_ExtractExistingFile
::Pathfinding::Ionic::Zip::ExtractExistingFileAction Pathfinding::Ionic::Zip::ZipEntry::get_ExtractExistingFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_ExtractExistingFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExtractExistingFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ExtractExistingFileAction, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_ExtractExistingFile
void Pathfinding::Ionic::Zip::ZipEntry::set_ExtractExistingFile(::Pathfinding::Ionic::Zip::ExtractExistingFileAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_ExtractExistingFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ExtractExistingFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_ZipErrorAction
::Pathfinding::Ionic::Zip::ZipErrorAction Pathfinding::Ionic::Zip::ZipEntry::get_ZipErrorAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_ZipErrorAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ZipErrorAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipErrorAction, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_ZipErrorAction
void Pathfinding::Ionic::Zip::ZipEntry::set_ZipErrorAction(::Pathfinding::Ionic::Zip::ZipErrorAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_ZipErrorAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ZipErrorAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_IncludedInMostRecentSave
bool Pathfinding::Ionic::Zip::ZipEntry::get_IncludedInMostRecentSave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_IncludedInMostRecentSave");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IncludedInMostRecentSave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_SetCompression
::Pathfinding::Ionic::Zip::SetCompressionCallback* Pathfinding::Ionic::Zip::ZipEntry::get_SetCompression() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_SetCompression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SetCompression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::SetCompressionCallback*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_SetCompression
void Pathfinding::Ionic::Zip::ZipEntry::set_SetCompression(::Pathfinding::Ionic::Zip::SetCompressionCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_SetCompression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SetCompression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_AlternateEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipEntry::get_AlternateEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_AlternateEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AlternateEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_AlternateEncoding
void Pathfinding::Ionic::Zip::ZipEntry::set_AlternateEncoding(::System::Text::Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_AlternateEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AlternateEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_AlternateEncodingUsage
::Pathfinding::Ionic::Zip::ZipOption Pathfinding::Ionic::Zip::ZipEntry::get_AlternateEncodingUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_AlternateEncodingUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AlternateEncodingUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipOption, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_AlternateEncodingUsage
void Pathfinding::Ionic::Zip::ZipEntry::set_AlternateEncodingUsage(::Pathfinding::Ionic::Zip::ZipOption value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_AlternateEncodingUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AlternateEncodingUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.CreateForStream
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipEntry::CreateForStream(::StringW entryName, ::System::IO::Stream* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CreateForStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "CreateForStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entryName), ::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, entryName, s);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.Create
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipEntry::Create(::StringW nameInArchive, ::Pathfinding::Ionic::Zip::ZipEntrySource source, ::Il2CppObject* arg1, ::Il2CppObject* arg2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameInArchive), ::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, nameInArchive, source, arg1, arg2);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.MarkAsDirectory
void Pathfinding::Ionic::Zip::ZipEntry::MarkAsDirectory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::MarkAsDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAsDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.set_IsText
void Pathfinding::Ionic::Zip::ZipEntry::set_IsText(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::set_IsText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_ArchiveStream
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipEntry::get_ArchiveStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_ArchiveStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ArchiveStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.SetFdpLoh
void Pathfinding::Ionic::Zip::ZipEntry::SetFdpLoh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::SetFdpLoh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFdpLoh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.GetLengthOfCryptoHeaderBytes
int Pathfinding::Ionic::Zip::ZipEntry::GetLengthOfCryptoHeaderBytes(::Pathfinding::Ionic::Zip::EncryptionAlgorithm a) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::GetLengthOfCryptoHeaderBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry", "GetLengthOfCryptoHeaderBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_FileDataPosition
int64_t Pathfinding::Ionic::Zip::ZipEntry::get_FileDataPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_FileDataPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FileDataPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.get_LengthOfHeader
int Pathfinding::Ionic::Zip::ZipEntry::get_LengthOfHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::get_LengthOfHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LengthOfHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry.ToString
::StringW Pathfinding::Ionic::Zip::ZipEntry::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipEntry/CopyHelper
#include "Pathfinding/Ionic/Zip/ZipEntry_CopyHelper.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.RegularExpressions.Regex re
::System::Text::RegularExpressions::Regex* Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_get_re() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_get_re");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::RegularExpressions::Regex*>("Pathfinding.Ionic.Zip", "ZipEntry/CopyHelper", "re"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.RegularExpressions.Regex re
void Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_set_re(::System::Text::RegularExpressions::Regex* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_set_re");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntry/CopyHelper", "re", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 callCount
int Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_get_callCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_get_callCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zip", "ZipEntry/CopyHelper", "callCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 callCount
void Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_set_callCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_set_callCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntry/CopyHelper", "callCount", value));
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry/CopyHelper..cctor
void Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry/CopyHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipEntry/CopyHelper.AppendCopyToFileName
::StringW Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::AppendCopyToFileName(::StringW f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::CopyHelper::AppendCopyToFileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipEntry/CopyHelper", "AppendCopyToFileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, f);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipEntryTimestamp
#include "Pathfinding/Ionic/Zip/ZipEntryTimestamp.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp None
::Pathfinding::Ionic::Zip::ZipEntryTimestamp Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntryTimestamp>("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "None"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp None
void Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_None(::Pathfinding::Ionic::Zip::ZipEntryTimestamp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp DOS
::Pathfinding::Ionic::Zip::ZipEntryTimestamp Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_DOS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_DOS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntryTimestamp>("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "DOS"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp DOS
void Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_DOS(::Pathfinding::Ionic::Zip::ZipEntryTimestamp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_DOS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "DOS", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp Windows
::Pathfinding::Ionic::Zip::ZipEntryTimestamp Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_Windows() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_Windows");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntryTimestamp>("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "Windows"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp Windows
void Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_Windows(::Pathfinding::Ionic::Zip::ZipEntryTimestamp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_Windows");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "Windows", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp Unix
::Pathfinding::Ionic::Zip::ZipEntryTimestamp Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_Unix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_Unix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntryTimestamp>("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "Unix"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp Unix
void Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_Unix(::Pathfinding::Ionic::Zip::ZipEntryTimestamp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_Unix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "Unix", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp InfoZip1
::Pathfinding::Ionic::Zip::ZipEntryTimestamp Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_InfoZip1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_get_InfoZip1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntryTimestamp>("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "InfoZip1"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntryTimestamp InfoZip1
void Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_InfoZip1(::Pathfinding::Ionic::Zip::ZipEntryTimestamp value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::_set_InfoZip1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntryTimestamp", "InfoZip1", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipEntryTimestamp::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntryTimestamp::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.CompressionMethod
#include "Pathfinding/Ionic/Zip/CompressionMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.CompressionMethod None
::Pathfinding::Ionic::Zip::CompressionMethod Pathfinding::Ionic::Zip::CompressionMethod::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::CompressionMethod::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::CompressionMethod>("Pathfinding.Ionic.Zip", "CompressionMethod", "None"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.CompressionMethod None
void Pathfinding::Ionic::Zip::CompressionMethod::_set_None(::Pathfinding::Ionic::Zip::CompressionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::CompressionMethod::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "CompressionMethod", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.CompressionMethod Deflate
::Pathfinding::Ionic::Zip::CompressionMethod Pathfinding::Ionic::Zip::CompressionMethod::_get_Deflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::CompressionMethod::_get_Deflate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::CompressionMethod>("Pathfinding.Ionic.Zip", "CompressionMethod", "Deflate"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.CompressionMethod Deflate
void Pathfinding::Ionic::Zip::CompressionMethod::_set_Deflate(::Pathfinding::Ionic::Zip::CompressionMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::CompressionMethod::_set_Deflate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "CompressionMethod", "Deflate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::CompressionMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::CompressionMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipEntrySource
#include "Pathfinding/Ionic/Zip/ZipEntrySource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntrySource None
::Pathfinding::Ionic::Zip::ZipEntrySource Pathfinding::Ionic::Zip::ZipEntrySource::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntrySource>("Pathfinding.Ionic.Zip", "ZipEntrySource", "None"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntrySource None
void Pathfinding::Ionic::Zip::ZipEntrySource::_set_None(::Pathfinding::Ionic::Zip::ZipEntrySource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntrySource", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntrySource FileSystem
::Pathfinding::Ionic::Zip::ZipEntrySource Pathfinding::Ionic::Zip::ZipEntrySource::_get_FileSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_get_FileSystem");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntrySource>("Pathfinding.Ionic.Zip", "ZipEntrySource", "FileSystem"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntrySource FileSystem
void Pathfinding::Ionic::Zip::ZipEntrySource::_set_FileSystem(::Pathfinding::Ionic::Zip::ZipEntrySource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_set_FileSystem");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntrySource", "FileSystem", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntrySource Stream
::Pathfinding::Ionic::Zip::ZipEntrySource Pathfinding::Ionic::Zip::ZipEntrySource::_get_Stream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_get_Stream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntrySource>("Pathfinding.Ionic.Zip", "ZipEntrySource", "Stream"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntrySource Stream
void Pathfinding::Ionic::Zip::ZipEntrySource::_set_Stream(::Pathfinding::Ionic::Zip::ZipEntrySource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_set_Stream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntrySource", "Stream", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntrySource ZipFile
::Pathfinding::Ionic::Zip::ZipEntrySource Pathfinding::Ionic::Zip::ZipEntrySource::_get_ZipFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_get_ZipFile");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntrySource>("Pathfinding.Ionic.Zip", "ZipEntrySource", "ZipFile"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntrySource ZipFile
void Pathfinding::Ionic::Zip::ZipEntrySource::_set_ZipFile(::Pathfinding::Ionic::Zip::ZipEntrySource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_set_ZipFile");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntrySource", "ZipFile", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntrySource WriteDelegate
::Pathfinding::Ionic::Zip::ZipEntrySource Pathfinding::Ionic::Zip::ZipEntrySource::_get_WriteDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_get_WriteDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntrySource>("Pathfinding.Ionic.Zip", "ZipEntrySource", "WriteDelegate"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntrySource WriteDelegate
void Pathfinding::Ionic::Zip::ZipEntrySource::_set_WriteDelegate(::Pathfinding::Ionic::Zip::ZipEntrySource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_set_WriteDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntrySource", "WriteDelegate", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntrySource JitStream
::Pathfinding::Ionic::Zip::ZipEntrySource Pathfinding::Ionic::Zip::ZipEntrySource::_get_JitStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_get_JitStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntrySource>("Pathfinding.Ionic.Zip", "ZipEntrySource", "JitStream"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntrySource JitStream
void Pathfinding::Ionic::Zip::ZipEntrySource::_set_JitStream(::Pathfinding::Ionic::Zip::ZipEntrySource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_set_JitStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntrySource", "JitStream", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipEntrySource ZipOutputStream
::Pathfinding::Ionic::Zip::ZipEntrySource Pathfinding::Ionic::Zip::ZipEntrySource::_get_ZipOutputStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_get_ZipOutputStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipEntrySource>("Pathfinding.Ionic.Zip", "ZipEntrySource", "ZipOutputStream"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipEntrySource ZipOutputStream
void Pathfinding::Ionic::Zip::ZipEntrySource::_set_ZipOutputStream(::Pathfinding::Ionic::Zip::ZipEntrySource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::_set_ZipOutputStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipEntrySource", "ZipOutputStream", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipEntrySource::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntrySource::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipErrorAction
#include "Pathfinding/Ionic/Zip/ZipErrorAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipErrorAction Throw
::Pathfinding::Ionic::Zip::ZipErrorAction Pathfinding::Ionic::Zip::ZipErrorAction::_get_Throw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::_get_Throw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipErrorAction>("Pathfinding.Ionic.Zip", "ZipErrorAction", "Throw"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipErrorAction Throw
void Pathfinding::Ionic::Zip::ZipErrorAction::_set_Throw(::Pathfinding::Ionic::Zip::ZipErrorAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::_set_Throw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipErrorAction", "Throw", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipErrorAction Skip
::Pathfinding::Ionic::Zip::ZipErrorAction Pathfinding::Ionic::Zip::ZipErrorAction::_get_Skip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::_get_Skip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipErrorAction>("Pathfinding.Ionic.Zip", "ZipErrorAction", "Skip"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipErrorAction Skip
void Pathfinding::Ionic::Zip::ZipErrorAction::_set_Skip(::Pathfinding::Ionic::Zip::ZipErrorAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::_set_Skip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipErrorAction", "Skip", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipErrorAction Retry
::Pathfinding::Ionic::Zip::ZipErrorAction Pathfinding::Ionic::Zip::ZipErrorAction::_get_Retry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::_get_Retry");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipErrorAction>("Pathfinding.Ionic.Zip", "ZipErrorAction", "Retry"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipErrorAction Retry
void Pathfinding::Ionic::Zip::ZipErrorAction::_set_Retry(::Pathfinding::Ionic::Zip::ZipErrorAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::_set_Retry");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipErrorAction", "Retry", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipErrorAction InvokeErrorEvent
::Pathfinding::Ionic::Zip::ZipErrorAction Pathfinding::Ionic::Zip::ZipErrorAction::_get_InvokeErrorEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::_get_InvokeErrorEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipErrorAction>("Pathfinding.Ionic.Zip", "ZipErrorAction", "InvokeErrorEvent"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipErrorAction InvokeErrorEvent
void Pathfinding::Ionic::Zip::ZipErrorAction::_set_InvokeErrorEvent(::Pathfinding::Ionic::Zip::ZipErrorAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::_set_InvokeErrorEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipErrorAction", "InvokeErrorEvent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipErrorAction::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipErrorAction::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Ionic.Zip.ZipFile
#include "Pathfinding/Ionic/Zip/ZipFile.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipFile/<GetEnumerator>c__Iterator0
#include "Pathfinding/Ionic/Zip/ZipFile_-GetEnumerator-c__Iterator0.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipEntry
#include "Pathfinding/Ionic/Zip/ZipEntry.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream
#include "Pathfinding/Ionic/Zlib/ParallelDeflateOutputStream.hpp"
// Including type: System.EventHandler`1
#include "System/EventHandler_1.hpp"
// Including type: Pathfinding.Ionic.Zip.SaveProgressEventArgs
#include "Pathfinding/Ionic/Zip/SaveProgressEventArgs.hpp"
// Including type: Pathfinding.Ionic.Zip.ReadProgressEventArgs
#include "Pathfinding/Ionic/Zip/ReadProgressEventArgs.hpp"
// Including type: Pathfinding.Ionic.Zip.ExtractProgressEventArgs
#include "Pathfinding/Ionic/Zip/ExtractProgressEventArgs.hpp"
// Including type: Pathfinding.Ionic.Zip.AddProgressEventArgs
#include "Pathfinding/Ionic/Zip/AddProgressEventArgs.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipErrorEventArgs
#include "Pathfinding/Ionic/Zip/ZipErrorEventArgs.hpp"
// Including type: Pathfinding.Ionic.Zip.SetCompressionCallback
#include "Pathfinding/Ionic/Zip/SetCompressionCallback.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipProgressEventType
#include "Pathfinding/Ionic/Zip/ZipProgressEventType.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.Encoding _defaultEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipFile::_get__defaultEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::_get__defaultEncoding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::Encoding*>("Pathfinding.Ionic.Zip", "ZipFile", "_defaultEncoding"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.Encoding _defaultEncoding
void Pathfinding::Ionic::Zip::ZipFile::_set__defaultEncoding(::System::Text::Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::_set__defaultEncoding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipFile", "_defaultEncoding", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 BufferSizeDefault
int Pathfinding::Ionic::Zip::ZipFile::_get_BufferSizeDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::_get_BufferSizeDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zip", "ZipFile", "BufferSizeDefault"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 BufferSizeDefault
void Pathfinding::Ionic::Zip::ZipFile::_set_BufferSizeDefault(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::_set_BufferSizeDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipFile", "BufferSizeDefault", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _lengthOfReadStream
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipFile::dyn__lengthOfReadStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__lengthOfReadStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lengthOfReadStream"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.TextWriter _StatusMessageTextWriter
[[deprecated("Use field access instead!")]] ::System::IO::TextWriter*& Pathfinding::Ionic::Zip::ZipFile::dyn__StatusMessageTextWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__StatusMessageTextWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_StatusMessageTextWriter"))->offset;
  return *reinterpret_cast<::System::IO::TextWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _CaseSensitiveRetrieval
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__CaseSensitiveRetrieval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__CaseSensitiveRetrieval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_CaseSensitiveRetrieval"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _readstream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipFile::dyn__readstream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__readstream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_readstream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _writestream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipFile::dyn__writestream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__writestream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_writestream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt16 _versionMadeBy
[[deprecated("Use field access instead!")]] uint16_t& Pathfinding::Ionic::Zip::ZipFile::dyn__versionMadeBy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__versionMadeBy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_versionMadeBy"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt16 _versionNeededToExtract
[[deprecated("Use field access instead!")]] uint16_t& Pathfinding::Ionic::Zip::ZipFile::dyn__versionNeededToExtract() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__versionNeededToExtract");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_versionNeededToExtract"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _diskNumberWithCd
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zip::ZipFile::dyn__diskNumberWithCd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__diskNumberWithCd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_diskNumberWithCd"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _maxOutputSegmentSize
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipFile::dyn__maxOutputSegmentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__maxOutputSegmentSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxOutputSegmentSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _numberOfSegmentsForMostRecentSave
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zip::ZipFile::dyn__numberOfSegmentsForMostRecentSave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__numberOfSegmentsForMostRecentSave");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_numberOfSegmentsForMostRecentSave"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipErrorAction _zipErrorAction
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipErrorAction& Pathfinding::Ionic::Zip::ZipFile::dyn__zipErrorAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__zipErrorAction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zipErrorAction"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipErrorAction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,Pathfinding.Ionic.Zip.ZipEntry> _entries
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>*& Pathfinding::Ionic::Zip::ZipFile::dyn__entries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__entries");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entries"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Pathfinding.Ionic.Zip.ZipEntry> _zipEntriesAsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Ionic::Zip::ZipEntry*>*& Pathfinding::Ionic::Zip::ZipFile::dyn__zipEntriesAsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__zipEntriesAsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zipEntriesAsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Ionic::Zip::ZipEntry*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _name
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipFile::dyn__name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _readName
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipFile::dyn__readName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__readName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_readName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _Comment
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipFile::dyn__Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__Comment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Comment"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.String _Password
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipFile::dyn__Password() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__Password");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Password"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _emitNtfsTimes
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__emitNtfsTimes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__emitNtfsTimes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitNtfsTimes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _emitUnixTimes
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__emitUnixTimes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__emitUnixTimes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitUnixTimes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.CompressionStrategy _Strategy
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& Pathfinding::Ionic::Zip::ZipFile::dyn__Strategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__Strategy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Strategy"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.CompressionMethod _compressionMethod
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::CompressionMethod& Pathfinding::Ionic::Zip::ZipFile::dyn__compressionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__compressionMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_compressionMethod"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::CompressionMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _fileAlreadyExists
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__fileAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__fileAlreadyExists");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fileAlreadyExists"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _temporaryFileName
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipFile::dyn__temporaryFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__temporaryFileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_temporaryFileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _contentsChanged
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__contentsChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__contentsChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_contentsChanged"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasBeenSaved
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__hasBeenSaved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__hasBeenSaved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasBeenSaved"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _TempFileFolder
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipFile::dyn__TempFileFolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__TempFileFolder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TempFileFolder"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ReadStreamIsOurs
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__ReadStreamIsOurs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__ReadStreamIsOurs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ReadStreamIsOurs"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object LOCK
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Pathfinding::Ionic::Zip::ZipFile::dyn_LOCK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_LOCK");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LOCK"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _saveOperationCanceled
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__saveOperationCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__saveOperationCanceled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_saveOperationCanceled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _extractOperationCanceled
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__extractOperationCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__extractOperationCanceled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extractOperationCanceled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _addOperationCanceled
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__addOperationCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__addOperationCanceled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_addOperationCanceled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::EncryptionAlgorithm& Pathfinding::Ionic::Zip::ZipFile::dyn__Encryption() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__Encryption");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Encryption"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::EncryptionAlgorithm*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _JustSaved
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__JustSaved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__JustSaved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_JustSaved"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _locEndOfCDS
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipFile::dyn__locEndOfCDS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__locEndOfCDS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_locEndOfCDS"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _OffsetOfCentralDirectory
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zip::ZipFile::dyn__OffsetOfCentralDirectory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__OffsetOfCentralDirectory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OffsetOfCentralDirectory"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _OffsetOfCentralDirectory64
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipFile::dyn__OffsetOfCentralDirectory64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__OffsetOfCentralDirectory64");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OffsetOfCentralDirectory64"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Boolean> _OutputUsesZip64
[[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& Pathfinding::Ionic::Zip::ZipFile::dyn__OutputUsesZip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__OutputUsesZip64");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_OutputUsesZip64"))->offset;
  return *reinterpret_cast<::System::Nullable_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean _inExtractAll
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__inExtractAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__inExtractAll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inExtractAll"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.Encoding _alternateEncoding
[[deprecated("Use field access instead!")]] ::System::Text::Encoding*& Pathfinding::Ionic::Zip::ZipFile::dyn__alternateEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__alternateEncoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alternateEncoding"))->offset;
  return *reinterpret_cast<::System::Text::Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipOption _alternateEncodingUsage
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipOption& Pathfinding::Ionic::Zip::ZipFile::dyn__alternateEncodingUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__alternateEncodingUsage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alternateEncodingUsage"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipOption*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _BufferSize
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipFile::dyn__BufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__BufferSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_BufferSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream ParallelDeflater
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*& Pathfinding::Ionic::Zip::ZipFile::dyn_ParallelDeflater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_ParallelDeflater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParallelDeflater"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _ParallelDeflateThreshold
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipFile::dyn__ParallelDeflateThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__ParallelDeflateThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ParallelDeflateThreshold"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _maxBufferPairs
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipFile::dyn__maxBufferPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__maxBufferPairs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxBufferPairs"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.Zip64Option _zip64
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::Zip64Option& Pathfinding::Ionic::Zip::ZipFile::dyn__zip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__zip64");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zip64"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::Zip64Option*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _SavingSfx
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn__SavingSfx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn__SavingSfx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_SavingSfx"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.EventHandler`1<Pathfinding.Ionic.Zip.SaveProgressEventArgs> SaveProgress
[[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::SaveProgressEventArgs*>*& Pathfinding::Ionic::Zip::ZipFile::dyn_SaveProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_SaveProgress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SaveProgress"))->offset;
  return *reinterpret_cast<::System::EventHandler_1<::Pathfinding::Ionic::Zip::SaveProgressEventArgs*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.EventHandler`1<Pathfinding.Ionic.Zip.ReadProgressEventArgs> ReadProgress
[[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>*& Pathfinding::Ionic::Zip::ZipFile::dyn_ReadProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_ReadProgress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReadProgress"))->offset;
  return *reinterpret_cast<::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.EventHandler`1<Pathfinding.Ionic.Zip.ExtractProgressEventArgs> ExtractProgress
[[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ExtractProgressEventArgs*>*& Pathfinding::Ionic::Zip::ZipFile::dyn_ExtractProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_ExtractProgress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ExtractProgress"))->offset;
  return *reinterpret_cast<::System::EventHandler_1<::Pathfinding::Ionic::Zip::ExtractProgressEventArgs*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.EventHandler`1<Pathfinding.Ionic.Zip.AddProgressEventArgs> AddProgress
[[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::AddProgressEventArgs*>*& Pathfinding::Ionic::Zip::ZipFile::dyn_AddProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_AddProgress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AddProgress"))->offset;
  return *reinterpret_cast<::System::EventHandler_1<::Pathfinding::Ionic::Zip::AddProgressEventArgs*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.EventHandler`1<Pathfinding.Ionic.Zip.ZipErrorEventArgs> ZipError
[[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ZipErrorEventArgs*>*& Pathfinding::Ionic::Zip::ZipFile::dyn_ZipError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_ZipError");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ZipError"))->offset;
  return *reinterpret_cast<::System::EventHandler_1<::Pathfinding::Ionic::Zip::ZipErrorEventArgs*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <FullScan>k__BackingField
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn_$FullScan$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_$FullScan$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FullScan>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <SortEntriesBeforeSaving>k__BackingField
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn_$SortEntriesBeforeSaving$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_$SortEntriesBeforeSaving$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SortEntriesBeforeSaving>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <AddDirectoryWillTraverseReparsePoints>k__BackingField
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn_$AddDirectoryWillTraverseReparsePoints$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_$AddDirectoryWillTraverseReparsePoints$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AddDirectoryWillTraverseReparsePoints>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <CodecBufferSize>k__BackingField
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipFile::dyn_$CodecBufferSize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_$CodecBufferSize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CodecBufferSize>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <FlattenFoldersOnExtract>k__BackingField
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipFile::dyn_$FlattenFoldersOnExtract$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_$FlattenFoldersOnExtract$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FlattenFoldersOnExtract>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.CompressionLevel <CompressionLevel>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& Pathfinding::Ionic::Zip::ZipFile::dyn_$CompressionLevel$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_$CompressionLevel$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CompressionLevel>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionLevel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ExtractExistingFileAction <ExtractExistingFile>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ExtractExistingFileAction& Pathfinding::Ionic::Zip::ZipFile::dyn_$ExtractExistingFile$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_$ExtractExistingFile$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ExtractExistingFile>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ExtractExistingFileAction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.SetCompressionCallback <SetCompression>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::SetCompressionCallback*& Pathfinding::Ionic::Zip::ZipFile::dyn_$SetCompression$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::dyn_$SetCompression$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SetCompression>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::SetCompressionCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile..cctor
void Pathfinding::Ionic::Zip::ZipFile::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.add_ReadProgress
void Pathfinding::Ionic::Zip::ZipFile::add_ReadProgress(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::add_ReadProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_ReadProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.remove_ReadProgress
void Pathfinding::Ionic::Zip::ZipFile::remove_ReadProgress(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::remove_ReadProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_ReadProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* Pathfinding::Ionic::Zip::ZipFile::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.AddEntry
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipFile::AddEntry(::StringW entryName, ::System::IO::Stream* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::AddEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entryName), ::il2cpp_utils::ExtractType(stream)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(this, ___internal__method, entryName, stream);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile._InternalAddEntry
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipFile::_InternalAddEntry(::Pathfinding::Ionic::Zip::ZipEntry* ze) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::_InternalAddEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InternalAddEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ze)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(this, ___internal__method, ze);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.AddEntry
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipFile::AddEntry(::StringW entryName, ::ArrayW<uint8_t> byteContent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::AddEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entryName), ::il2cpp_utils::ExtractType(byteContent)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(this, ___internal__method, entryName, byteContent);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.InternalAddEntry
void Pathfinding::Ionic::Zip::ZipFile::InternalAddEntry(::StringW name, ::Pathfinding::Ionic::Zip::ZipEntry* entry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::InternalAddEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalAddEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(entry)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, name, entry);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_ArchiveNameForEvent
::StringW Pathfinding::Ionic::Zip::ZipFile::get_ArchiveNameForEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_ArchiveNameForEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ArchiveNameForEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnSaveBlock
bool Pathfinding::Ionic::Zip::ZipFile::OnSaveBlock(::Pathfinding::Ionic::Zip::ZipEntry* entry, int64_t bytesXferred, int64_t totalBytesToXfer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnSaveBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSaveBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(bytesXferred), ::il2cpp_utils::ExtractType(totalBytesToXfer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry, bytesXferred, totalBytesToXfer);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnSaveEntry
void Pathfinding::Ionic::Zip::ZipFile::OnSaveEntry(int current, ::Pathfinding::Ionic::Zip::ZipEntry* entry, bool before) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnSaveEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSaveEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(before)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, current, entry, before);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnSaveEvent
void Pathfinding::Ionic::Zip::ZipFile::OnSaveEvent(::Pathfinding::Ionic::Zip::ZipProgressEventType eventFlavor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnSaveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSaveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventFlavor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventFlavor);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnSaveStarted
void Pathfinding::Ionic::Zip::ZipFile::OnSaveStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnSaveStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSaveStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnSaveCompleted
void Pathfinding::Ionic::Zip::ZipFile::OnSaveCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnSaveCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSaveCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnReadStarted
void Pathfinding::Ionic::Zip::ZipFile::OnReadStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnReadStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReadStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnReadCompleted
void Pathfinding::Ionic::Zip::ZipFile::OnReadCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnReadCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReadCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnReadBytes
void Pathfinding::Ionic::Zip::ZipFile::OnReadBytes(::Pathfinding::Ionic::Zip::ZipEntry* entry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnReadBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReadBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entry);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnReadEntry
void Pathfinding::Ionic::Zip::ZipFile::OnReadEntry(bool before, ::Pathfinding::Ionic::Zip::ZipEntry* entry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnReadEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReadEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(before), ::il2cpp_utils::ExtractType(entry)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, before, entry);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_LengthOfReadStream
int64_t Pathfinding::Ionic::Zip::ZipFile::get_LengthOfReadStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_LengthOfReadStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LengthOfReadStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnExtractBlock
bool Pathfinding::Ionic::Zip::ZipFile::OnExtractBlock(::Pathfinding::Ionic::Zip::ZipEntry* entry, int64_t bytesWritten, int64_t totalBytesToWrite) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnExtractBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnExtractBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(bytesWritten), ::il2cpp_utils::ExtractType(totalBytesToWrite)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry, bytesWritten, totalBytesToWrite);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnSingleEntryExtract
bool Pathfinding::Ionic::Zip::ZipFile::OnSingleEntryExtract(::Pathfinding::Ionic::Zip::ZipEntry* entry, ::StringW path, bool before) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnSingleEntryExtract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSingleEntryExtract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(before)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry, path, before);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnExtractExisting
bool Pathfinding::Ionic::Zip::ZipFile::OnExtractExisting(::Pathfinding::Ionic::Zip::ZipEntry* entry, ::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnExtractExisting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnExtractExisting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry, path);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.AfterAddEntry
void Pathfinding::Ionic::Zip::ZipFile::AfterAddEntry(::Pathfinding::Ionic::Zip::ZipEntry* entry) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::AfterAddEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterAddEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, entry);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.OnZipErrorSaving
bool Pathfinding::Ionic::Zip::ZipFile::OnZipErrorSaving(::Pathfinding::Ionic::Zip::ZipEntry* entry, ::System::Exception* exc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::OnZipErrorSaving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnZipErrorSaving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entry), ::il2cpp_utils::ExtractType(exc)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, entry, exc);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.Read
::Pathfinding::Ionic::Zip::ZipFile* Pathfinding::Ionic::Zip::ZipFile::Read(::System::IO::Stream* zipStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zipStream)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipFile*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zipStream);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.Read
::Pathfinding::Ionic::Zip::ZipFile* Pathfinding::Ionic::Zip::ZipFile::Read(::System::IO::Stream* zipStream, ::System::IO::TextWriter* statusMessageWriter, ::System::Text::Encoding* encoding, ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>* readProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zipStream), ::il2cpp_utils::ExtractType(statusMessageWriter), ::il2cpp_utils::ExtractType(encoding), ::il2cpp_utils::ExtractType(readProgress)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipFile*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zipStream, statusMessageWriter, encoding, readProgress);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.ReadIntoInstance
void Pathfinding::Ionic::Zip::ZipFile::ReadIntoInstance(::Pathfinding::Ionic::Zip::ZipFile* zf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::ReadIntoInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "ReadIntoInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zf)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zf);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.Zip64SeekToCentralDirectory
void Pathfinding::Ionic::Zip::ZipFile::Zip64SeekToCentralDirectory(::Pathfinding::Ionic::Zip::ZipFile* zf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::Zip64SeekToCentralDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "Zip64SeekToCentralDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zf)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zf);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.ReadFirstFourBytes
uint Pathfinding::Ionic::Zip::ZipFile::ReadFirstFourBytes(::System::IO::Stream* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::ReadFirstFourBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "ReadFirstFourBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.ReadCentralDirectory
void Pathfinding::Ionic::Zip::ZipFile::ReadCentralDirectory(::Pathfinding::Ionic::Zip::ZipFile* zf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::ReadCentralDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "ReadCentralDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zf)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zf);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.ReadIntoInstance_Orig
void Pathfinding::Ionic::Zip::ZipFile::ReadIntoInstance_Orig(::Pathfinding::Ionic::Zip::ZipFile* zf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::ReadIntoInstance_Orig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "ReadIntoInstance_Orig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zf)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zf);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.ReadCentralDirectoryFooter
void Pathfinding::Ionic::Zip::ZipFile::ReadCentralDirectoryFooter(::Pathfinding::Ionic::Zip::ZipFile* zf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::ReadCentralDirectoryFooter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "ReadCentralDirectoryFooter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zf)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zf);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.ReadZipFileComment
void Pathfinding::Ionic::Zip::ZipFile::ReadZipFileComment(::Pathfinding::Ionic::Zip::ZipFile* zf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::ReadZipFileComment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "ReadZipFileComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zf)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zf);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.DeleteFileWithRetry
void Pathfinding::Ionic::Zip::ZipFile::DeleteFileWithRetry(::StringW filename) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::DeleteFileWithRetry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteFileWithRetry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filename)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, filename);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.Save
void Pathfinding::Ionic::Zip::ZipFile::Save() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.NotifyEntriesSaveComplete
void Pathfinding::Ionic::Zip::ZipFile::NotifyEntriesSaveComplete(::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::NotifyEntriesSaveComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "NotifyEntriesSaveComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.RemoveTempFile
void Pathfinding::Ionic::Zip::ZipFile::RemoveTempFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::RemoveTempFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveTempFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.CleanupAfterSaveOperation
void Pathfinding::Ionic::Zip::ZipFile::CleanupAfterSaveOperation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::CleanupAfterSaveOperation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanupAfterSaveOperation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.Save
void Pathfinding::Ionic::Zip::ZipFile::Save(::System::IO::Stream* outputStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outputStream)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outputStream);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_FullScan
bool Pathfinding::Ionic::Zip::ZipFile::get_FullScan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_FullScan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FullScan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_SortEntriesBeforeSaving
bool Pathfinding::Ionic::Zip::ZipFile::get_SortEntriesBeforeSaving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_SortEntriesBeforeSaving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SortEntriesBeforeSaving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.set_AddDirectoryWillTraverseReparsePoints
void Pathfinding::Ionic::Zip::ZipFile::set_AddDirectoryWillTraverseReparsePoints(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::set_AddDirectoryWillTraverseReparsePoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AddDirectoryWillTraverseReparsePoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_BufferSize
int Pathfinding::Ionic::Zip::ZipFile::get_BufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_BufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_CodecBufferSize
int Pathfinding::Ionic::Zip::ZipFile::get_CodecBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_CodecBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CodecBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_FlattenFoldersOnExtract
bool Pathfinding::Ionic::Zip::ZipFile::get_FlattenFoldersOnExtract() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_FlattenFoldersOnExtract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FlattenFoldersOnExtract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_Strategy
::Pathfinding::Ionic::Zlib::CompressionStrategy Pathfinding::Ionic::Zip::ZipFile::get_Strategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_Strategy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Strategy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::CompressionStrategy, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_Name
::StringW Pathfinding::Ionic::Zip::ZipFile::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_CompressionLevel
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zip::ZipFile::get_CompressionLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_CompressionLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompressionLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::CompressionLevel, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.set_CompressionLevel
void Pathfinding::Ionic::Zip::ZipFile::set_CompressionLevel(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::set_CompressionLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CompressionLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_CompressionMethod
::Pathfinding::Ionic::Zip::CompressionMethod Pathfinding::Ionic::Zip::ZipFile::get_CompressionMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_CompressionMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompressionMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::CompressionMethod, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_Comment
::StringW Pathfinding::Ionic::Zip::ZipFile::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.set_Comment
void Pathfinding::Ionic::Zip::ZipFile::set_Comment(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_Verbose
bool Pathfinding::Ionic::Zip::ZipFile::get_Verbose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_Verbose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Verbose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_CaseSensitiveRetrieval
bool Pathfinding::Ionic::Zip::ZipFile::get_CaseSensitiveRetrieval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_CaseSensitiveRetrieval");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CaseSensitiveRetrieval", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_UseZip64WhenSaving
::Pathfinding::Ionic::Zip::Zip64Option Pathfinding::Ionic::Zip::ZipFile::get_UseZip64WhenSaving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_UseZip64WhenSaving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseZip64WhenSaving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::Zip64Option, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.set_UseZip64WhenSaving
void Pathfinding::Ionic::Zip::ZipFile::set_UseZip64WhenSaving(::Pathfinding::Ionic::Zip::Zip64Option value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::set_UseZip64WhenSaving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseZip64WhenSaving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_AlternateEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipFile::get_AlternateEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_AlternateEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AlternateEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.set_AlternateEncoding
void Pathfinding::Ionic::Zip::ZipFile::set_AlternateEncoding(::System::Text::Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::set_AlternateEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AlternateEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_AlternateEncodingUsage
::Pathfinding::Ionic::Zip::ZipOption Pathfinding::Ionic::Zip::ZipFile::get_AlternateEncodingUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_AlternateEncodingUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AlternateEncodingUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipOption, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.set_AlternateEncodingUsage
void Pathfinding::Ionic::Zip::ZipFile::set_AlternateEncodingUsage(::Pathfinding::Ionic::Zip::ZipOption value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::set_AlternateEncodingUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AlternateEncodingUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_DefaultEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipFile::get_DefaultEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_DefaultEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipFile", "get_DefaultEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_StatusMessageTextWriter
::System::IO::TextWriter* Pathfinding::Ionic::Zip::ZipFile::get_StatusMessageTextWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_StatusMessageTextWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StatusMessageTextWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::TextWriter*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_TempFileFolder
::StringW Pathfinding::Ionic::Zip::ZipFile::get_TempFileFolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_TempFileFolder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TempFileFolder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_ExtractExistingFile
::Pathfinding::Ionic::Zip::ExtractExistingFileAction Pathfinding::Ionic::Zip::ZipFile::get_ExtractExistingFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_ExtractExistingFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExtractExistingFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ExtractExistingFileAction, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_ZipErrorAction
::Pathfinding::Ionic::Zip::ZipErrorAction Pathfinding::Ionic::Zip::ZipFile::get_ZipErrorAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_ZipErrorAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ZipErrorAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipErrorAction, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_Encryption
::Pathfinding::Ionic::Zip::EncryptionAlgorithm Pathfinding::Ionic::Zip::ZipFile::get_Encryption() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_Encryption");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encryption", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::EncryptionAlgorithm, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_SetCompression
::Pathfinding::Ionic::Zip::SetCompressionCallback* Pathfinding::Ionic::Zip::ZipFile::get_SetCompression() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_SetCompression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SetCompression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::SetCompressionCallback*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_MaxOutputSegmentSize
int Pathfinding::Ionic::Zip::ZipFile::get_MaxOutputSegmentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_MaxOutputSegmentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxOutputSegmentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.set_ParallelDeflateThreshold
void Pathfinding::Ionic::Zip::ZipFile::set_ParallelDeflateThreshold(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::set_ParallelDeflateThreshold");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParallelDeflateThreshold", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_ParallelDeflateThreshold
int64_t Pathfinding::Ionic::Zip::ZipFile::get_ParallelDeflateThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_ParallelDeflateThreshold");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParallelDeflateThreshold", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_ParallelDeflateMaxBufferPairs
int Pathfinding::Ionic::Zip::ZipFile::get_ParallelDeflateMaxBufferPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_ParallelDeflateMaxBufferPairs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParallelDeflateMaxBufferPairs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.NotifyEntryChanged
void Pathfinding::Ionic::Zip::ZipFile::NotifyEntryChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::NotifyEntryChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyEntryChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.StreamForDiskNumber
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipFile::StreamForDiskNumber(uint diskNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::StreamForDiskNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StreamForDiskNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(diskNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method, diskNumber);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.Reset
void Pathfinding::Ionic::Zip::ZipFile::Reset(bool whileSaving) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(whileSaving)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, whileSaving);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile._initEntriesDictionary
void Pathfinding::Ionic::Zip::ZipFile::_initEntriesDictionary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::_initEntriesDictionary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_initEntriesDictionary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile._InitInstance
void Pathfinding::Ionic::Zip::ZipFile::_InitInstance(::StringW zipFileName, ::System::IO::TextWriter* statusMessageWriter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::_InitInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InitInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zipFileName), ::il2cpp_utils::ExtractType(statusMessageWriter)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, zipFileName, statusMessageWriter);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_Item
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipFile::get_Item(::StringW fileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fileName)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(this, ___internal__method, fileName);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_Entries
::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* Pathfinding::Ionic::Zip::ZipFile::get_Entries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_Entries");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Entries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_EntriesSorted
::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* Pathfinding::Ionic::Zip::ZipFile::get_EntriesSorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_EntriesSorted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EntriesSorted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.Dispose
void Pathfinding::Ionic::Zip::ZipFile::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.Dispose
void Pathfinding::Ionic::Zip::ZipFile::Dispose(bool disposeManagedResources) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposeManagedResources);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_ReadStream
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipFile::get_ReadStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_ReadStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReadStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.get_WriteStream
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipFile::get_WriteStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::get_WriteStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WriteStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::Pathfinding::Ionic::Zip::ZipEntry*>* Pathfinding::Ionic::Zip::ZipFile::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::Pathfinding::Ionic::Zip::ZipEntry*>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile.ToString
::StringW Pathfinding::Ionic::Zip::ZipFile::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Ionic.Zip.ZipFile/<GetEnumerator>c__Iterator0
#include "Pathfinding/Ionic/Zip/ZipFile_-GetEnumerator-c__Iterator0.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipEntry
#include "Pathfinding/Ionic/Zip/ZipEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator<System.String,Pathfinding.Ionic.Zip.ZipEntry> <<$$>>__0
[[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>::ValueCollection::Enumerator& Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$$$$$$__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$$$$$$__0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<<$$>>__0"))->offset;
  return *reinterpret_cast<typename ::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>::ValueCollection::Enumerator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.ZipEntry <e>__1
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntry*& Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$e$__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$e$__1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<e>__1"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipEntry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 $PC
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$PC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$PC");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "$PC"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.ZipEntry $current
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntry*& Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "$current"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipEntry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.ZipFile <>f__this
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipFile*& Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$$f__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::dyn_$$f__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>f__this"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipFile**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile/<GetEnumerator>c__Iterator0.System.Collections.Generic.IEnumerator<Pathfinding.Ionic.Zip.ZipEntry>.get_Current
::Pathfinding::Ionic::Zip::ZipEntry* Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::System_Collections_Generic_IEnumerator$Pathfinding_Ionic_Zip_ZipEntry$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::System.Collections.Generic.IEnumerator<Pathfinding.Ionic.Zip.ZipEntry>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipEntry*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile/<GetEnumerator>c__Iterator0.System.Collections.IEnumerator.get_Current
::Il2CppObject* Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile/<GetEnumerator>c__Iterator0.MoveNext
bool Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile/<GetEnumerator>c__Iterator0.Dispose
void Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipFile/<GetEnumerator>c__Iterator0.Reset
void Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipOutput
#include "Pathfinding/Ionic/Zip/ZipOutput.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipEntry
#include "Pathfinding/Ionic/Zip/ZipEntry.hpp"
// Including type: Pathfinding.Ionic.Zip.Zip64Option
#include "Pathfinding/Ionic/Zip/Zip64Option.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipContainer
#include "Pathfinding/Ionic/Zip/ZipContainer.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutput.WriteCentralDirectoryStructure
bool Pathfinding::Ionic::Zip::ZipOutput::WriteCentralDirectoryStructure(::System::IO::Stream* s, ::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* entries, uint numSegments, ::Pathfinding::Ionic::Zip::Zip64Option zip64, ::StringW comment, ::Pathfinding::Ionic::Zip::ZipContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutput::WriteCentralDirectoryStructure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipOutput", "WriteCentralDirectoryStructure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(entries), ::il2cpp_utils::ExtractType(numSegments), ::il2cpp_utils::ExtractType(zip64), ::il2cpp_utils::ExtractType(comment), ::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, entries, numSegments, zip64, comment, container);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutput.GetEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipOutput::GetEncoding(::Pathfinding::Ionic::Zip::ZipContainer* container, ::StringW t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutput::GetEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipOutput", "GetEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, container, t);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutput.GenCentralDirectoryFooter
::ArrayW<uint8_t> Pathfinding::Ionic::Zip::ZipOutput::GenCentralDirectoryFooter(int64_t StartOfCentralDirectory, int64_t EndOfCentralDirectory, ::Pathfinding::Ionic::Zip::Zip64Option zip64, int entryCount, ::StringW comment, ::Pathfinding::Ionic::Zip::ZipContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutput::GenCentralDirectoryFooter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipOutput", "GenCentralDirectoryFooter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(StartOfCentralDirectory), ::il2cpp_utils::ExtractType(EndOfCentralDirectory), ::il2cpp_utils::ExtractType(zip64), ::il2cpp_utils::ExtractType(entryCount), ::il2cpp_utils::ExtractType(comment), ::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, StartOfCentralDirectory, EndOfCentralDirectory, zip64, entryCount, comment, container);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutput.GenZip64EndOfCentralDirectory
::ArrayW<uint8_t> Pathfinding::Ionic::Zip::ZipOutput::GenZip64EndOfCentralDirectory(int64_t StartOfCentralDirectory, int64_t EndOfCentralDirectory, int entryCount, uint numSegments) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutput::GenZip64EndOfCentralDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipOutput", "GenZip64EndOfCentralDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(StartOfCentralDirectory), ::il2cpp_utils::ExtractType(EndOfCentralDirectory), ::il2cpp_utils::ExtractType(entryCount), ::il2cpp_utils::ExtractType(numSegments)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, StartOfCentralDirectory, EndOfCentralDirectory, entryCount, numSegments);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutput.CountEntries
int Pathfinding::Ionic::Zip::ZipOutput::CountEntries(::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* _entries) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutput::CountEntries");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipOutput", "CountEntries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_entries)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, _entries);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.Zip64Option
#include "Pathfinding/Ionic/Zip/Zip64Option.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.Zip64Option Default
::Pathfinding::Ionic::Zip::Zip64Option Pathfinding::Ionic::Zip::Zip64Option::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::Zip64Option>("Pathfinding.Ionic.Zip", "Zip64Option", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.Zip64Option Default
void Pathfinding::Ionic::Zip::Zip64Option::_set_Default(::Pathfinding::Ionic::Zip::Zip64Option value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "Zip64Option", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.Zip64Option Never
::Pathfinding::Ionic::Zip::Zip64Option Pathfinding::Ionic::Zip::Zip64Option::_get_Never() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::_get_Never");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::Zip64Option>("Pathfinding.Ionic.Zip", "Zip64Option", "Never"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.Zip64Option Never
void Pathfinding::Ionic::Zip::Zip64Option::_set_Never(::Pathfinding::Ionic::Zip::Zip64Option value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::_set_Never");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "Zip64Option", "Never", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.Zip64Option AsNecessary
::Pathfinding::Ionic::Zip::Zip64Option Pathfinding::Ionic::Zip::Zip64Option::_get_AsNecessary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::_get_AsNecessary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::Zip64Option>("Pathfinding.Ionic.Zip", "Zip64Option", "AsNecessary"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.Zip64Option AsNecessary
void Pathfinding::Ionic::Zip::Zip64Option::_set_AsNecessary(::Pathfinding::Ionic::Zip::Zip64Option value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::_set_AsNecessary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "Zip64Option", "AsNecessary", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.Zip64Option Always
::Pathfinding::Ionic::Zip::Zip64Option Pathfinding::Ionic::Zip::Zip64Option::_get_Always() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::_get_Always");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::Zip64Option>("Pathfinding.Ionic.Zip", "Zip64Option", "Always"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.Zip64Option Always
void Pathfinding::Ionic::Zip::Zip64Option::_set_Always(::Pathfinding::Ionic::Zip::Zip64Option value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::_set_Always");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "Zip64Option", "Always", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::Zip64Option::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::Zip64Option::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipOption
#include "Pathfinding/Ionic/Zip/ZipOption.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipOption Default
::Pathfinding::Ionic::Zip::ZipOption Pathfinding::Ionic::Zip::ZipOption::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipOption>("Pathfinding.Ionic.Zip", "ZipOption", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipOption Default
void Pathfinding::Ionic::Zip::ZipOption::_set_Default(::Pathfinding::Ionic::Zip::ZipOption value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipOption", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipOption Never
::Pathfinding::Ionic::Zip::ZipOption Pathfinding::Ionic::Zip::ZipOption::_get_Never() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::_get_Never");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipOption>("Pathfinding.Ionic.Zip", "ZipOption", "Never"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipOption Never
void Pathfinding::Ionic::Zip::ZipOption::_set_Never(::Pathfinding::Ionic::Zip::ZipOption value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::_set_Never");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipOption", "Never", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipOption AsNecessary
::Pathfinding::Ionic::Zip::ZipOption Pathfinding::Ionic::Zip::ZipOption::_get_AsNecessary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::_get_AsNecessary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipOption>("Pathfinding.Ionic.Zip", "ZipOption", "AsNecessary"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipOption AsNecessary
void Pathfinding::Ionic::Zip::ZipOption::_set_AsNecessary(::Pathfinding::Ionic::Zip::ZipOption value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::_set_AsNecessary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipOption", "AsNecessary", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipOption Always
::Pathfinding::Ionic::Zip::ZipOption Pathfinding::Ionic::Zip::ZipOption::_get_Always() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::_get_Always");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipOption>("Pathfinding.Ionic.Zip", "ZipOption", "Always"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipOption Always
void Pathfinding::Ionic::Zip::ZipOption::_set_Always(::Pathfinding::Ionic::Zip::ZipOption value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::_set_Always");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipOption", "Always", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipOption::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOption::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipInputStream
#include "Pathfinding/Ionic/Zip/ZipInputStream.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipEntry
#include "Pathfinding/Ionic/Zip/ZipEntry.hpp"
// Including type: Pathfinding.Ionic.Crc.CrcCalculatorStream
#include "Pathfinding/Ionic/Crc/CrcCalculatorStream.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _inputStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipInputStream::dyn__inputStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__inputStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inputStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipEntry _currentEntry
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntry*& Pathfinding::Ionic::Zip::ZipInputStream::dyn__currentEntry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__currentEntry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentEntry"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipEntry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _needSetup
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipInputStream::dyn__needSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__needSetup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_needSetup"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Crc.CrcCalculatorStream _crcStream
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Crc::CrcCalculatorStream*& Pathfinding::Ionic::Zip::ZipInputStream::dyn__crcStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__crcStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_crcStream"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Crc::CrcCalculatorStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _LeftToRead
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipInputStream::dyn__LeftToRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__LeftToRead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_LeftToRead"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.String _Password
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipInputStream::dyn__Password() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__Password");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Password"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _endOfEntry
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipInputStream::dyn__endOfEntry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__endOfEntry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_endOfEntry"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _closed
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipInputStream::dyn__closed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__closed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_closed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _findRequired
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipInputStream::dyn__findRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__findRequired");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_findRequired"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _exceptionPending
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipInputStream::dyn__exceptionPending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn__exceptionPending");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_exceptionPending"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <CodecBufferSize>k__BackingField
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipInputStream::dyn_$CodecBufferSize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::dyn_$CodecBufferSize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CodecBufferSize>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.get_CodecBufferSize
int Pathfinding::Ionic::Zip::ZipInputStream::get_CodecBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::get_CodecBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CodecBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.SetupStream
void Pathfinding::Ionic::Zip::ZipInputStream::SetupStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::SetupStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.get_ReadStream
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipInputStream::get_ReadStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::get_ReadStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReadStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.Read
int Pathfinding::Ionic::Zip::ZipInputStream::Read(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 33));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.get_CanRead
bool Pathfinding::Ionic::Zip::ZipInputStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.get_CanSeek
bool Pathfinding::Ionic::Zip::ZipInputStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.get_CanWrite
bool Pathfinding::Ionic::Zip::ZipInputStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.get_Length
int64_t Pathfinding::Ionic::Zip::ZipInputStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::get_Length");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.get_Position
int64_t Pathfinding::Ionic::Zip::ZipInputStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::get_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.set_Position
void Pathfinding::Ionic::Zip::ZipInputStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::set_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.Flush
void Pathfinding::Ionic::Zip::ZipInputStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::Flush");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.Write
void Pathfinding::Ionic::Zip::ZipInputStream::Write(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::Write");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.Seek
int64_t Pathfinding::Ionic::Zip::ZipInputStream::Seek(int64_t offset, ::System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::Seek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipInputStream.SetLength
void Pathfinding::Ionic::Zip::ZipInputStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipInputStream::SetLength");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipOutputStream
#include "Pathfinding/Ionic/Zip/ZipOutputStream.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipEntry
#include "Pathfinding/Ionic/Zip/ZipEntry.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: Pathfinding.Ionic.Zip.CountingStream
#include "Pathfinding/Ionic/Zip/CountingStream.hpp"
// Including type: Pathfinding.Ionic.Crc.CrcCalculatorStream
#include "Pathfinding/Ionic/Crc/CrcCalculatorStream.hpp"
// Including type: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream
#include "Pathfinding/Ionic/Zlib/ParallelDeflateOutputStream.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.String _password
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__password() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__password");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_password"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _outputStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__outputStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__outputStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outputStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipEntry _currentEntry
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntry*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__currentEntry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__currentEntry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentEntry"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipEntry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zip.Zip64Option _zip64
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::Zip64Option& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__zip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__zip64");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zip64"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::Zip64Option*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,Pathfinding.Ionic.Zip.ZipEntry> _entriesWritten
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__entriesWritten() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__entriesWritten");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entriesWritten"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _entryCount
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__entryCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__entryCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entryCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipOption _alternateEncodingUsage
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipOption& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__alternateEncodingUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__alternateEncodingUsage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alternateEncodingUsage"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipOption*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.Encoding _alternateEncoding
[[deprecated("Use field access instead!")]] ::System::Text::Encoding*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__alternateEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__alternateEncoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alternateEncoding"))->offset;
  return *reinterpret_cast<::System::Text::Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _exceptionPending
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__exceptionPending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__exceptionPending");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_exceptionPending"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.CountingStream _outputCounter
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::CountingStream*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__outputCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__outputCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outputCounter"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::CountingStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _encryptor
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__encryptor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__encryptor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_encryptor"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _deflater
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__deflater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__deflater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deflater"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Crc.CrcCalculatorStream _entryOutputStream
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Crc::CrcCalculatorStream*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__entryOutputStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__entryOutputStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entryOutputStream"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Crc::CrcCalculatorStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _needToWriteEntryHeader
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__needToWriteEntryHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__needToWriteEntryHeader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_needToWriteEntryHeader"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream ParallelDeflater
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*& Pathfinding::Ionic::Zip::ZipOutputStream::dyn_ParallelDeflater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn_ParallelDeflater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ParallelDeflater"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _ParallelDeflateThreshold
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__ParallelDeflateThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__ParallelDeflateThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ParallelDeflateThreshold"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _maxBufferPairs
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipOutputStream::dyn__maxBufferPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn__maxBufferPairs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxBufferPairs"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <CodecBufferSize>k__BackingField
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipOutputStream::dyn_$CodecBufferSize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn_$CodecBufferSize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CodecBufferSize>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.CompressionStrategy <Strategy>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& Pathfinding::Ionic::Zip::ZipOutputStream::dyn_$Strategy$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::dyn_$Strategy$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Strategy>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_CodecBufferSize
int Pathfinding::Ionic::Zip::ZipOutputStream::get_CodecBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_CodecBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CodecBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_Strategy
::Pathfinding::Ionic::Zlib::CompressionStrategy Pathfinding::Ionic::Zip::ZipOutputStream::get_Strategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_Strategy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Strategy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::CompressionStrategy, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_EnableZip64
::Pathfinding::Ionic::Zip::Zip64Option Pathfinding::Ionic::Zip::ZipOutputStream::get_EnableZip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_EnableZip64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EnableZip64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::Zip64Option, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_AlternateEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipOutputStream::get_AlternateEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_AlternateEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AlternateEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_AlternateEncodingUsage
::Pathfinding::Ionic::Zip::ZipOption Pathfinding::Ionic::Zip::ZipOutputStream::get_AlternateEncodingUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_AlternateEncodingUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AlternateEncodingUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipOption, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_DefaultEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipOutputStream::get_DefaultEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_DefaultEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipOutputStream", "get_DefaultEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_ParallelDeflateThreshold
int64_t Pathfinding::Ionic::Zip::ZipOutputStream::get_ParallelDeflateThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_ParallelDeflateThreshold");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParallelDeflateThreshold", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_ParallelDeflateMaxBufferPairs
int Pathfinding::Ionic::Zip::ZipOutputStream::get_ParallelDeflateMaxBufferPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_ParallelDeflateMaxBufferPairs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParallelDeflateMaxBufferPairs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_OutputStream
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipOutputStream::get_OutputStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_OutputStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OutputStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream._InitiateCurrentEntry
void Pathfinding::Ionic::Zip::ZipOutputStream::_InitiateCurrentEntry(bool finishing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::_InitiateCurrentEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InitiateCurrentEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, finishing);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.Write
void Pathfinding::Ionic::Zip::ZipOutputStream::Write(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::Write");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_CanRead
bool Pathfinding::Ionic::Zip::ZipOutputStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_CanSeek
bool Pathfinding::Ionic::Zip::ZipOutputStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_CanWrite
bool Pathfinding::Ionic::Zip::ZipOutputStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_Length
int64_t Pathfinding::Ionic::Zip::ZipOutputStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_Length");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.get_Position
int64_t Pathfinding::Ionic::Zip::ZipOutputStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::get_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.set_Position
void Pathfinding::Ionic::Zip::ZipOutputStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::set_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.Flush
void Pathfinding::Ionic::Zip::ZipOutputStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::Flush");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.Read
int Pathfinding::Ionic::Zip::ZipOutputStream::Read(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 33));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.Seek
int64_t Pathfinding::Ionic::Zip::ZipOutputStream::Seek(int64_t offset, ::System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::Seek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipOutputStream.SetLength
void Pathfinding::Ionic::Zip::ZipOutputStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipOutputStream::SetLength");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Ionic.Zip.ZipContainer
#include "Pathfinding/Ionic/Zip/ZipContainer.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipFile
#include "Pathfinding/Ionic/Zip/ZipFile.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipOutputStream
#include "Pathfinding/Ionic/Zip/ZipOutputStream.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipInputStream
#include "Pathfinding/Ionic/Zip/ZipInputStream.hpp"
// Including type: Pathfinding.Ionic.Zip.Zip64Option
#include "Pathfinding/Ionic/Zip/Zip64Option.hpp"
// Including type: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream
#include "Pathfinding/Ionic/Zlib/ParallelDeflateOutputStream.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionStrategy
#include "Pathfinding/Ionic/Zlib/CompressionStrategy.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipOption
#include "Pathfinding/Ionic/Zip/ZipOption.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipFile _zf
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipFile*& Pathfinding::Ionic::Zip::ZipContainer::dyn__zf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::dyn__zf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zf"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipFile**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipOutputStream _zos
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipOutputStream*& Pathfinding::Ionic::Zip::ZipContainer::dyn__zos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::dyn__zos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zos"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipOutputStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipInputStream _zis
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipInputStream*& Pathfinding::Ionic::Zip::ZipContainer::dyn__zis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::dyn__zis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zis"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipInputStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_ZipFile
::Pathfinding::Ionic::Zip::ZipFile* Pathfinding::Ionic::Zip::ZipContainer::get_ZipFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_ZipFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ZipFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipFile*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_ZipOutputStream
::Pathfinding::Ionic::Zip::ZipOutputStream* Pathfinding::Ionic::Zip::ZipContainer::get_ZipOutputStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_ZipOutputStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ZipOutputStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipOutputStream*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_Password
::StringW Pathfinding::Ionic::Zip::ZipContainer::get_Password() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_Password");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Password", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_Zip64
::Pathfinding::Ionic::Zip::Zip64Option Pathfinding::Ionic::Zip::ZipContainer::get_Zip64() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_Zip64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Zip64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::Zip64Option, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_BufferSize
int Pathfinding::Ionic::Zip::ZipContainer::get_BufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_BufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_ParallelDeflater
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream* Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflater");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParallelDeflater", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.set_ParallelDeflater
void Pathfinding::Ionic::Zip::ZipContainer::set_ParallelDeflater(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::set_ParallelDeflater");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParallelDeflater", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_ParallelDeflateThreshold
int64_t Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflateThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflateThreshold");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParallelDeflateThreshold", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_ParallelDeflateMaxBufferPairs
int Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflateMaxBufferPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflateMaxBufferPairs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParallelDeflateMaxBufferPairs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_CodecBufferSize
int Pathfinding::Ionic::Zip::ZipContainer::get_CodecBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_CodecBufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CodecBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_Strategy
::Pathfinding::Ionic::Zlib::CompressionStrategy Pathfinding::Ionic::Zip::ZipContainer::get_Strategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_Strategy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Strategy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::CompressionStrategy, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_UseZip64WhenSaving
::Pathfinding::Ionic::Zip::Zip64Option Pathfinding::Ionic::Zip::ZipContainer::get_UseZip64WhenSaving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_UseZip64WhenSaving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseZip64WhenSaving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::Zip64Option, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_AlternateEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipContainer::get_AlternateEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_AlternateEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AlternateEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_DefaultEncoding
::System::Text::Encoding* Pathfinding::Ionic::Zip::ZipContainer::get_DefaultEncoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_DefaultEncoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultEncoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_AlternateEncodingUsage
::Pathfinding::Ionic::Zip::ZipOption Pathfinding::Ionic::Zip::ZipContainer::get_AlternateEncodingUsage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_AlternateEncodingUsage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AlternateEncodingUsage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipOption, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipContainer.get_ReadStream
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipContainer::get_ReadStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::get_ReadStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReadStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Ionic.Zip.ZipSegmentedStream
#include "Pathfinding/Ionic/Zip/ZipSegmentedStream.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode rwMode
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn_rwMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn_rwMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rwMode"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _exceptionPending
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__exceptionPending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__exceptionPending");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_exceptionPending"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _baseName
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__baseName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__baseName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _baseDir
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__baseDir() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__baseDir");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseDir"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _currentName
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__currentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__currentName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _currentTempName
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__currentTempName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__currentTempName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTempName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _currentDiskNumber
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__currentDiskNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__currentDiskNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentDiskNumber"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _maxDiskNumber
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__maxDiskNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__maxDiskNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxDiskNumber"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _maxSegmentSize
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__maxSegmentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__maxSegmentSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxSegmentSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _innerStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__innerStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn__innerStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_innerStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ContiguousWrite>k__BackingField
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn_$ContiguousWrite$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::dyn_$ContiguousWrite$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ContiguousWrite>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.ForReading
::Pathfinding::Ionic::Zip::ZipSegmentedStream* Pathfinding::Ionic::Zip::ZipSegmentedStream::ForReading(::StringW name, uint initialDiskNumber, uint maxDiskNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::ForReading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipSegmentedStream", "ForReading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(initialDiskNumber), ::il2cpp_utils::ExtractType(maxDiskNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipSegmentedStream*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name, initialDiskNumber, maxDiskNumber);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.ForWriting
::Pathfinding::Ionic::Zip::ZipSegmentedStream* Pathfinding::Ionic::Zip::ZipSegmentedStream::ForWriting(::StringW name, int maxSegmentSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::ForWriting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipSegmentedStream", "ForWriting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(maxSegmentSize)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zip::ZipSegmentedStream*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name, maxSegmentSize);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.ForUpdate
::System::IO::Stream* Pathfinding::Ionic::Zip::ZipSegmentedStream::ForUpdate(::StringW name, uint diskNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::ForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zip", "ZipSegmentedStream", "ForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(diskNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IO::Stream*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, name, diskNumber);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_ContiguousWrite
bool Pathfinding::Ionic::Zip::ZipSegmentedStream::get_ContiguousWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_ContiguousWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContiguousWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.set_ContiguousWrite
void Pathfinding::Ionic::Zip::ZipSegmentedStream::set_ContiguousWrite(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::set_ContiguousWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ContiguousWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_CurrentSegment
uint Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentSegment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.set_CurrentSegment
void Pathfinding::Ionic::Zip::ZipSegmentedStream::set_CurrentSegment(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::set_CurrentSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_CurrentName
::StringW Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_CurrentTempName
::StringW Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentTempName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentTempName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentTempName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream._NameForSegment
::StringW Pathfinding::Ionic::Zip::ZipSegmentedStream::_NameForSegment(uint diskNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::_NameForSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_NameForSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(diskNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, diskNumber);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.ComputeSegment
uint Pathfinding::Ionic::Zip::ZipSegmentedStream::ComputeSegment(int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::ComputeSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, length);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream._SetReadStream
void Pathfinding::Ionic::Zip::ZipSegmentedStream::_SetReadStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::_SetReadStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_SetReadStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream._SetWriteStream
void Pathfinding::Ionic::Zip::ZipSegmentedStream::_SetWriteStream(uint increment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::_SetWriteStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_SetWriteStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(increment)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, increment);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.TruncateBackward
int64_t Pathfinding::Ionic::Zip::ZipSegmentedStream::TruncateBackward(uint diskNumber, int64_t offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::TruncateBackward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TruncateBackward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(diskNumber), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, diskNumber, offset);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.ToString
::StringW Pathfinding::Ionic::Zip::ZipSegmentedStream::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.Read
int Pathfinding::Ionic::Zip::ZipSegmentedStream::Read(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 33));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.Write
void Pathfinding::Ionic::Zip::ZipSegmentedStream::Write(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::Write");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_CanRead
bool Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_CanSeek
bool Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_CanWrite
bool Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.Flush
void Pathfinding::Ionic::Zip::ZipSegmentedStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::Flush");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_Length
int64_t Pathfinding::Ionic::Zip::ZipSegmentedStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_Length");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.get_Position
int64_t Pathfinding::Ionic::Zip::ZipSegmentedStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::get_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.set_Position
void Pathfinding::Ionic::Zip::ZipSegmentedStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::set_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.Seek
int64_t Pathfinding::Ionic::Zip::ZipSegmentedStream::Seek(int64_t offset, ::System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::Seek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.SetLength
void Pathfinding::Ionic::Zip::ZipSegmentedStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::SetLength");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zip.ZipSegmentedStream.Dispose
void Pathfinding::Ionic::Zip::ZipSegmentedStream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode
#include "Pathfinding/Ionic/Zip/ZipSegmentedStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode None
::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode>("Pathfinding.Ionic.Zip", "ZipSegmentedStream/RwMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode None
void Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_set_None(::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipSegmentedStream/RwMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode ReadOnly
::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_get_ReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_get_ReadOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode>("Pathfinding.Ionic.Zip", "ZipSegmentedStream/RwMode", "ReadOnly"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode ReadOnly
void Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_set_ReadOnly(::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_set_ReadOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipSegmentedStream/RwMode", "ReadOnly", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode Write
::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_get_Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_get_Write");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode>("Pathfinding.Ionic.Zip", "ZipSegmentedStream/RwMode", "Write"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode Write
void Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_set_Write(::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::_set_Write");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zip", "ZipSegmentedStream/RwMode", "Write", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.BlockState
#include "Pathfinding/Ionic/Zlib/BlockState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.BlockState NeedMore
::Pathfinding::Ionic::Zlib::BlockState Pathfinding::Ionic::Zlib::BlockState::_get_NeedMore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::_get_NeedMore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::BlockState>("Pathfinding.Ionic.Zlib", "BlockState", "NeedMore"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.BlockState NeedMore
void Pathfinding::Ionic::Zlib::BlockState::_set_NeedMore(::Pathfinding::Ionic::Zlib::BlockState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::_set_NeedMore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "BlockState", "NeedMore", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.BlockState BlockDone
::Pathfinding::Ionic::Zlib::BlockState Pathfinding::Ionic::Zlib::BlockState::_get_BlockDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::_get_BlockDone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::BlockState>("Pathfinding.Ionic.Zlib", "BlockState", "BlockDone"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.BlockState BlockDone
void Pathfinding::Ionic::Zlib::BlockState::_set_BlockDone(::Pathfinding::Ionic::Zlib::BlockState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::_set_BlockDone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "BlockState", "BlockDone", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.BlockState FinishStarted
::Pathfinding::Ionic::Zlib::BlockState Pathfinding::Ionic::Zlib::BlockState::_get_FinishStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::_get_FinishStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::BlockState>("Pathfinding.Ionic.Zlib", "BlockState", "FinishStarted"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.BlockState FinishStarted
void Pathfinding::Ionic::Zlib::BlockState::_set_FinishStarted(::Pathfinding::Ionic::Zlib::BlockState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::_set_FinishStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "BlockState", "FinishStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.BlockState FinishDone
::Pathfinding::Ionic::Zlib::BlockState Pathfinding::Ionic::Zlib::BlockState::_get_FinishDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::_get_FinishDone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::BlockState>("Pathfinding.Ionic.Zlib", "BlockState", "FinishDone"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.BlockState FinishDone
void Pathfinding::Ionic::Zlib::BlockState::_set_FinishDone(::Pathfinding::Ionic::Zlib::BlockState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::_set_FinishDone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "BlockState", "FinishDone", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::BlockState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::BlockState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.DeflateFlavor
#include "Pathfinding/Ionic/Zlib/DeflateFlavor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.DeflateFlavor Store
::Pathfinding::Ionic::Zlib::DeflateFlavor Pathfinding::Ionic::Zlib::DeflateFlavor::_get_Store() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateFlavor::_get_Store");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::DeflateFlavor>("Pathfinding.Ionic.Zlib", "DeflateFlavor", "Store"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.DeflateFlavor Store
void Pathfinding::Ionic::Zlib::DeflateFlavor::_set_Store(::Pathfinding::Ionic::Zlib::DeflateFlavor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateFlavor::_set_Store");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateFlavor", "Store", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.DeflateFlavor Fast
::Pathfinding::Ionic::Zlib::DeflateFlavor Pathfinding::Ionic::Zlib::DeflateFlavor::_get_Fast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateFlavor::_get_Fast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::DeflateFlavor>("Pathfinding.Ionic.Zlib", "DeflateFlavor", "Fast"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.DeflateFlavor Fast
void Pathfinding::Ionic::Zlib::DeflateFlavor::_set_Fast(::Pathfinding::Ionic::Zlib::DeflateFlavor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateFlavor::_set_Fast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateFlavor", "Fast", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.DeflateFlavor Slow
::Pathfinding::Ionic::Zlib::DeflateFlavor Pathfinding::Ionic::Zlib::DeflateFlavor::_get_Slow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateFlavor::_get_Slow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::DeflateFlavor>("Pathfinding.Ionic.Zlib", "DeflateFlavor", "Slow"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.DeflateFlavor Slow
void Pathfinding::Ionic::Zlib::DeflateFlavor::_set_Slow(::Pathfinding::Ionic::Zlib::DeflateFlavor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateFlavor::_set_Slow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateFlavor", "Slow", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateFlavor::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateFlavor::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.DeflateManager
#include "Pathfinding/Ionic/Zlib/DeflateManager.hpp"
// Including type: Pathfinding.Ionic.Zlib.DeflateManager/CompressFunc
#include "Pathfinding/Ionic/Zlib/DeflateManager_CompressFunc.hpp"
// Including type: Pathfinding.Ionic.Zlib.DeflateManager/Config
#include "Pathfinding/Ionic/Zlib/DeflateManager_Config.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibCodec
#include "Pathfinding/Ionic/Zlib/ZlibCodec.hpp"
// Including type: Pathfinding.Ionic.Zlib.Tree
#include "Pathfinding/Ionic/Zlib/Tree.hpp"
// Including type: Pathfinding.Ionic.Zlib.BlockState
#include "Pathfinding/Ionic/Zlib/BlockState.hpp"
// Including type: Pathfinding.Ionic.Zlib.FlushType
#include "Pathfinding/Ionic/Zlib/FlushType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 MEM_LEVEL_MAX
int Pathfinding::Ionic::Zlib::DeflateManager::_get_MEM_LEVEL_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_MEM_LEVEL_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "MEM_LEVEL_MAX"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 MEM_LEVEL_MAX
void Pathfinding::Ionic::Zlib::DeflateManager::_set_MEM_LEVEL_MAX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_MEM_LEVEL_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "MEM_LEVEL_MAX", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 MEM_LEVEL_DEFAULT
int Pathfinding::Ionic::Zlib::DeflateManager::_get_MEM_LEVEL_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_MEM_LEVEL_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "MEM_LEVEL_DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 MEM_LEVEL_DEFAULT
void Pathfinding::Ionic::Zlib::DeflateManager::_set_MEM_LEVEL_DEFAULT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_MEM_LEVEL_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "MEM_LEVEL_DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String[] _ErrorMessage
::ArrayW<::StringW> Pathfinding::Ionic::Zlib::DeflateManager::_get__ErrorMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get__ErrorMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("Pathfinding.Ionic.Zlib", "DeflateManager", "_ErrorMessage"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String[] _ErrorMessage
void Pathfinding::Ionic::Zlib::DeflateManager::_set__ErrorMessage(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set__ErrorMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "_ErrorMessage", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 PRESET_DICT
int Pathfinding::Ionic::Zlib::DeflateManager::_get_PRESET_DICT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_PRESET_DICT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "PRESET_DICT"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 PRESET_DICT
void Pathfinding::Ionic::Zlib::DeflateManager::_set_PRESET_DICT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_PRESET_DICT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "PRESET_DICT", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 INIT_STATE
int Pathfinding::Ionic::Zlib::DeflateManager::_get_INIT_STATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_INIT_STATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "INIT_STATE"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 INIT_STATE
void Pathfinding::Ionic::Zlib::DeflateManager::_set_INIT_STATE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_INIT_STATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "INIT_STATE", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 BUSY_STATE
int Pathfinding::Ionic::Zlib::DeflateManager::_get_BUSY_STATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_BUSY_STATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "BUSY_STATE"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 BUSY_STATE
void Pathfinding::Ionic::Zlib::DeflateManager::_set_BUSY_STATE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_BUSY_STATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "BUSY_STATE", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 FINISH_STATE
int Pathfinding::Ionic::Zlib::DeflateManager::_get_FINISH_STATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_FINISH_STATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "FINISH_STATE"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 FINISH_STATE
void Pathfinding::Ionic::Zlib::DeflateManager::_set_FINISH_STATE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_FINISH_STATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "FINISH_STATE", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 Z_DEFLATED
int Pathfinding::Ionic::Zlib::DeflateManager::_get_Z_DEFLATED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_Z_DEFLATED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "Z_DEFLATED"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 Z_DEFLATED
void Pathfinding::Ionic::Zlib::DeflateManager::_set_Z_DEFLATED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_Z_DEFLATED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "Z_DEFLATED", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 STORED_BLOCK
int Pathfinding::Ionic::Zlib::DeflateManager::_get_STORED_BLOCK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_STORED_BLOCK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "STORED_BLOCK"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 STORED_BLOCK
void Pathfinding::Ionic::Zlib::DeflateManager::_set_STORED_BLOCK(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_STORED_BLOCK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "STORED_BLOCK", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 STATIC_TREES
int Pathfinding::Ionic::Zlib::DeflateManager::_get_STATIC_TREES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_STATIC_TREES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "STATIC_TREES"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 STATIC_TREES
void Pathfinding::Ionic::Zlib::DeflateManager::_set_STATIC_TREES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_STATIC_TREES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "STATIC_TREES", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 DYN_TREES
int Pathfinding::Ionic::Zlib::DeflateManager::_get_DYN_TREES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_DYN_TREES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "DYN_TREES"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 DYN_TREES
void Pathfinding::Ionic::Zlib::DeflateManager::_set_DYN_TREES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_DYN_TREES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "DYN_TREES", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 Z_BINARY
int Pathfinding::Ionic::Zlib::DeflateManager::_get_Z_BINARY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_Z_BINARY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "Z_BINARY"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 Z_BINARY
void Pathfinding::Ionic::Zlib::DeflateManager::_set_Z_BINARY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_Z_BINARY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "Z_BINARY", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 Z_ASCII
int Pathfinding::Ionic::Zlib::DeflateManager::_get_Z_ASCII() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_Z_ASCII");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "Z_ASCII"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 Z_ASCII
void Pathfinding::Ionic::Zlib::DeflateManager::_set_Z_ASCII(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_Z_ASCII");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "Z_ASCII", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 Z_UNKNOWN
int Pathfinding::Ionic::Zlib::DeflateManager::_get_Z_UNKNOWN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_Z_UNKNOWN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "Z_UNKNOWN"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 Z_UNKNOWN
void Pathfinding::Ionic::Zlib::DeflateManager::_set_Z_UNKNOWN(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_Z_UNKNOWN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "Z_UNKNOWN", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 Buf_size
int Pathfinding::Ionic::Zlib::DeflateManager::_get_Buf_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_Buf_size");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "Buf_size"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 Buf_size
void Pathfinding::Ionic::Zlib::DeflateManager::_set_Buf_size(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_Buf_size");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "Buf_size", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 MIN_MATCH
int Pathfinding::Ionic::Zlib::DeflateManager::_get_MIN_MATCH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_MIN_MATCH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "MIN_MATCH"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 MIN_MATCH
void Pathfinding::Ionic::Zlib::DeflateManager::_set_MIN_MATCH(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_MIN_MATCH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "MIN_MATCH", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 MAX_MATCH
int Pathfinding::Ionic::Zlib::DeflateManager::_get_MAX_MATCH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_MAX_MATCH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "MAX_MATCH"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 MAX_MATCH
void Pathfinding::Ionic::Zlib::DeflateManager::_set_MAX_MATCH(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_MAX_MATCH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "MAX_MATCH", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 MIN_LOOKAHEAD
int Pathfinding::Ionic::Zlib::DeflateManager::_get_MIN_LOOKAHEAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_MIN_LOOKAHEAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "MIN_LOOKAHEAD"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 MIN_LOOKAHEAD
void Pathfinding::Ionic::Zlib::DeflateManager::_set_MIN_LOOKAHEAD(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_MIN_LOOKAHEAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "MIN_LOOKAHEAD", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 HEAP_SIZE
int Pathfinding::Ionic::Zlib::DeflateManager::_get_HEAP_SIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_HEAP_SIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "HEAP_SIZE"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 HEAP_SIZE
void Pathfinding::Ionic::Zlib::DeflateManager::_set_HEAP_SIZE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_HEAP_SIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "HEAP_SIZE", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 END_BLOCK
int Pathfinding::Ionic::Zlib::DeflateManager::_get_END_BLOCK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_get_END_BLOCK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "DeflateManager", "END_BLOCK"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 END_BLOCK
void Pathfinding::Ionic::Zlib::DeflateManager::_set_END_BLOCK(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_set_END_BLOCK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager", "END_BLOCK", value));
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.DeflateManager/CompressFunc DeflateFunction
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc*& Pathfinding::Ionic::Zlib::DeflateManager::dyn_DeflateFunction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_DeflateFunction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DeflateFunction"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.ZlibCodec _codec
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibCodec*& Pathfinding::Ionic::Zlib::DeflateManager::dyn__codec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn__codec");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_codec"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibCodec**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 status
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_status");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "status"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte[] pending
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_pending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_pending");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pending"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 nextPending
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_nextPending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_nextPending");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextPending"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 pendingCount
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_pendingCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_pendingCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pendingCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.SByte data_type
[[deprecated("Use field access instead!")]] int8_t& Pathfinding::Ionic::Zlib::DeflateManager::dyn_data_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_data_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data_type"))->offset;
  return *reinterpret_cast<int8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 last_flush
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_last_flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_last_flush");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "last_flush"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 w_size
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_w_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_w_size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "w_size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 w_bits
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_w_bits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_w_bits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "w_bits"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 w_mask
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_w_mask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_w_mask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "w_mask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte[] window
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_window() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_window");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "window"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 window_size
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_window_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_window_size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "window_size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16[] prev
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_prev() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_prev");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prev"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16[] head
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 ins_h
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_ins_h() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_ins_h");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ins_h"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 hash_size
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_hash_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_hash_size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hash_size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 hash_bits
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_hash_bits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_hash_bits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hash_bits"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 hash_mask
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_hash_mask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_hash_mask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hash_mask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 hash_shift
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_hash_shift() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_hash_shift");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hash_shift"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 block_start
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_block_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_block_start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "block_start"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.DeflateManager/Config config
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::DeflateManager::Config*& Pathfinding::Ionic::Zlib::DeflateManager::dyn_config() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_config");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "config"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::DeflateManager::Config**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 match_length
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_match_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_match_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "match_length"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 prev_match
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_prev_match() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_prev_match");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prev_match"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 match_available
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_match_available() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_match_available");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "match_available"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 strstart
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_strstart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_strstart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strstart"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 match_start
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_match_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_match_start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "match_start"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 lookahead
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_lookahead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_lookahead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookahead"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 prev_length
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_prev_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_prev_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prev_length"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.CompressionLevel compressionLevel
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& Pathfinding::Ionic::Zlib::DeflateManager::dyn_compressionLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_compressionLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compressionLevel"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionLevel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.CompressionStrategy compressionStrategy
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& Pathfinding::Ionic::Zlib::DeflateManager::dyn_compressionStrategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_compressionStrategy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compressionStrategy"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16[] dyn_ltree
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_dyn_ltree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_dyn_ltree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dyn_ltree"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16[] dyn_dtree
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_dyn_dtree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_dyn_dtree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dyn_dtree"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16[] bl_tree
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_bl_tree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_bl_tree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bl_tree"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.Tree treeLiterals
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::Tree*& Pathfinding::Ionic::Zlib::DeflateManager::dyn_treeLiterals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_treeLiterals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "treeLiterals"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::Tree**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.Tree treeDistances
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::Tree*& Pathfinding::Ionic::Zlib::DeflateManager::dyn_treeDistances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_treeDistances");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "treeDistances"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::Tree**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.Tree treeBitLengths
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::Tree*& Pathfinding::Ionic::Zlib::DeflateManager::dyn_treeBitLengths() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_treeBitLengths");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "treeBitLengths"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::Tree**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16[] bl_count
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_bl_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_bl_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bl_count"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] heap
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_heap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_heap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heap"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 heap_len
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_heap_len() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_heap_len");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heap_len"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 heap_max
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_heap_max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_heap_max");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heap_max"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.SByte[] depth
[[deprecated("Use field access instead!")]] ::ArrayW<int8_t>& Pathfinding::Ionic::Zlib::DeflateManager::dyn_depth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_depth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "depth"))->offset;
  return *reinterpret_cast<::ArrayW<int8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _lengthOffset
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn__lengthOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn__lengthOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lengthOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 lit_bufsize
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_lit_bufsize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_lit_bufsize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lit_bufsize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 last_lit
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_last_lit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_last_lit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "last_lit"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _distanceOffset
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn__distanceOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn__distanceOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_distanceOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 opt_len
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_opt_len() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_opt_len");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "opt_len"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 static_len
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_static_len() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_static_len");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "static_len"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 matches
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_matches() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_matches");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "matches"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 last_eob_len
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_last_eob_len() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_last_eob_len");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "last_eob_len"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int16 bi_buf
[[deprecated("Use field access instead!")]] int16_t& Pathfinding::Ionic::Zlib::DeflateManager::dyn_bi_buf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_bi_buf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bi_buf"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 bi_valid
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::dyn_bi_valid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_bi_valid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bi_valid"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean Rfc1950BytesEmitted
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::DeflateManager::dyn_Rfc1950BytesEmitted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn_Rfc1950BytesEmitted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Rfc1950BytesEmitted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _WantRfc1950HeaderBytes
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::DeflateManager::dyn__WantRfc1950HeaderBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::dyn__WantRfc1950HeaderBytes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_WantRfc1950HeaderBytes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager..cctor
void Pathfinding::Ionic::Zlib::DeflateManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "DeflateManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._InitializeLazyMatch
void Pathfinding::Ionic::Zlib::DeflateManager::_InitializeLazyMatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_InitializeLazyMatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InitializeLazyMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._InitializeTreeData
void Pathfinding::Ionic::Zlib::DeflateManager::_InitializeTreeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_InitializeTreeData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InitializeTreeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._InitializeBlocks
void Pathfinding::Ionic::Zlib::DeflateManager::_InitializeBlocks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_InitializeBlocks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InitializeBlocks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.pqdownheap
void Pathfinding::Ionic::Zlib::DeflateManager::pqdownheap(::ArrayW<int16_t> tree, int k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::pqdownheap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "pqdownheap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(k)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tree, k);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._IsSmaller
bool Pathfinding::Ionic::Zlib::DeflateManager::_IsSmaller(::ArrayW<int16_t> tree, int n, int m, ::ArrayW<int8_t> depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_IsSmaller");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "DeflateManager", "_IsSmaller", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(n), ::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(depth)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tree, n, m, depth);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.scan_tree
void Pathfinding::Ionic::Zlib::DeflateManager::scan_tree(::ArrayW<int16_t> tree, int max_code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::scan_tree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "scan_tree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(max_code)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tree, max_code);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.build_bl_tree
int Pathfinding::Ionic::Zlib::DeflateManager::build_bl_tree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::build_bl_tree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "build_bl_tree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.send_all_trees
void Pathfinding::Ionic::Zlib::DeflateManager::send_all_trees(int lcodes, int dcodes, int blcodes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::send_all_trees");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "send_all_trees", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lcodes), ::il2cpp_utils::ExtractType(dcodes), ::il2cpp_utils::ExtractType(blcodes)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lcodes, dcodes, blcodes);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.send_tree
void Pathfinding::Ionic::Zlib::DeflateManager::send_tree(::ArrayW<int16_t> tree, int max_code) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::send_tree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "send_tree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(max_code)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tree, max_code);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.put_bytes
void Pathfinding::Ionic::Zlib::DeflateManager::put_bytes(::ArrayW<uint8_t> p, int start, int len) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::put_bytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "put_bytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(len)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p, start, len);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.send_code
void Pathfinding::Ionic::Zlib::DeflateManager::send_code(int c, ::ArrayW<int16_t> tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::send_code");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "send_code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(tree)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c, tree);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.send_bits
void Pathfinding::Ionic::Zlib::DeflateManager::send_bits(int value, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::send_bits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "send_bits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, length);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._tr_align
void Pathfinding::Ionic::Zlib::DeflateManager::_tr_align() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_tr_align");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_tr_align", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._tr_tally
bool Pathfinding::Ionic::Zlib::DeflateManager::_tr_tally(int dist, int lc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_tr_tally");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_tr_tally", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dist), ::il2cpp_utils::ExtractType(lc)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dist, lc);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.send_compressed_block
void Pathfinding::Ionic::Zlib::DeflateManager::send_compressed_block(::ArrayW<int16_t> ltree, ::ArrayW<int16_t> dtree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::send_compressed_block");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "send_compressed_block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ltree), ::il2cpp_utils::ExtractType(dtree)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ltree, dtree);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.set_data_type
void Pathfinding::Ionic::Zlib::DeflateManager::set_data_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::set_data_type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_data_type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.bi_flush
void Pathfinding::Ionic::Zlib::DeflateManager::bi_flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::bi_flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "bi_flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.bi_windup
void Pathfinding::Ionic::Zlib::DeflateManager::bi_windup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::bi_windup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "bi_windup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.copy_block
void Pathfinding::Ionic::Zlib::DeflateManager::copy_block(int buf, int len, bool header) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::copy_block");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "copy_block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf), ::il2cpp_utils::ExtractType(len), ::il2cpp_utils::ExtractType(header)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buf, len, header);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.flush_block_only
void Pathfinding::Ionic::Zlib::DeflateManager::flush_block_only(bool eof) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::flush_block_only");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "flush_block_only", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eof)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eof);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.DeflateNone
::Pathfinding::Ionic::Zlib::BlockState Pathfinding::Ionic::Zlib::DeflateManager::DeflateNone(::Pathfinding::Ionic::Zlib::FlushType flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::DeflateNone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeflateNone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flush)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::BlockState, false>(this, ___internal__method, flush);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._tr_stored_block
void Pathfinding::Ionic::Zlib::DeflateManager::_tr_stored_block(int buf, int stored_len, bool eof) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_tr_stored_block");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_tr_stored_block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf), ::il2cpp_utils::ExtractType(stored_len), ::il2cpp_utils::ExtractType(eof)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buf, stored_len, eof);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._tr_flush_block
void Pathfinding::Ionic::Zlib::DeflateManager::_tr_flush_block(int buf, int stored_len, bool eof) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_tr_flush_block");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_tr_flush_block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf), ::il2cpp_utils::ExtractType(stored_len), ::il2cpp_utils::ExtractType(eof)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buf, stored_len, eof);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager._fillWindow
void Pathfinding::Ionic::Zlib::DeflateManager::_fillWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::_fillWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_fillWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.DeflateFast
::Pathfinding::Ionic::Zlib::BlockState Pathfinding::Ionic::Zlib::DeflateManager::DeflateFast(::Pathfinding::Ionic::Zlib::FlushType flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::DeflateFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeflateFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flush)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::BlockState, false>(this, ___internal__method, flush);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.DeflateSlow
::Pathfinding::Ionic::Zlib::BlockState Pathfinding::Ionic::Zlib::DeflateManager::DeflateSlow(::Pathfinding::Ionic::Zlib::FlushType flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::DeflateSlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeflateSlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flush)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::BlockState, false>(this, ___internal__method, flush);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.longest_match
int Pathfinding::Ionic::Zlib::DeflateManager::longest_match(int cur_match) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::longest_match");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "longest_match", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cur_match)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, cur_match);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.get_WantRfc1950HeaderBytes
bool Pathfinding::Ionic::Zlib::DeflateManager::get_WantRfc1950HeaderBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::get_WantRfc1950HeaderBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WantRfc1950HeaderBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.set_WantRfc1950HeaderBytes
void Pathfinding::Ionic::Zlib::DeflateManager::set_WantRfc1950HeaderBytes(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::set_WantRfc1950HeaderBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_WantRfc1950HeaderBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.Initialize
int Pathfinding::Ionic::Zlib::DeflateManager::Initialize(::Pathfinding::Ionic::Zlib::ZlibCodec* codec, ::Pathfinding::Ionic::Zlib::CompressionLevel level, int bits, ::Pathfinding::Ionic::Zlib::CompressionStrategy compressionStrategy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(codec), ::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(compressionStrategy)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, codec, level, bits, compressionStrategy);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.Initialize
int Pathfinding::Ionic::Zlib::DeflateManager::Initialize(::Pathfinding::Ionic::Zlib::ZlibCodec* codec, ::Pathfinding::Ionic::Zlib::CompressionLevel level, int windowBits, int memLevel, ::Pathfinding::Ionic::Zlib::CompressionStrategy strategy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(codec), ::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(windowBits), ::il2cpp_utils::ExtractType(memLevel), ::il2cpp_utils::ExtractType(strategy)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, codec, level, windowBits, memLevel, strategy);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.Reset
void Pathfinding::Ionic::Zlib::DeflateManager::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.SetDeflater
void Pathfinding::Ionic::Zlib::DeflateManager::SetDeflater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::SetDeflater");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDeflater", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager.Deflate
int Pathfinding::Ionic::Zlib::DeflateManager::Deflate(::Pathfinding::Ionic::Zlib::FlushType flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Deflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flush)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, flush);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Ionic.Zlib.DeflateManager/CompressFunc
#include "Pathfinding/Ionic/Zlib/DeflateManager_CompressFunc.hpp"
// Including type: Pathfinding.Ionic.Zlib.BlockState
#include "Pathfinding/Ionic/Zlib/BlockState.hpp"
// Including type: Pathfinding.Ionic.Zlib.FlushType
#include "Pathfinding/Ionic/Zlib/FlushType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager/CompressFunc.Invoke
::Pathfinding::Ionic::Zlib::BlockState Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc::Invoke(::Pathfinding::Ionic::Zlib::FlushType flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::BlockState, false>(this, ___internal__method, flush);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.DeflateManager/Config
#include "Pathfinding/Ionic/Zlib/DeflateManager_Config.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionLevel
#include "Pathfinding/Ionic/Zlib/CompressionLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly Pathfinding.Ionic.Zlib.DeflateManager/Config[] Table
::ArrayW<::Pathfinding::Ionic::Zlib::DeflateManager::Config*> Pathfinding::Ionic::Zlib::DeflateManager::Config::_get_Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::_get_Table");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::Pathfinding::Ionic::Zlib::DeflateManager::Config*>>("Pathfinding.Ionic.Zlib", "DeflateManager/Config", "Table"));
}
// Autogenerated static field setter
// Set static field: static private readonly Pathfinding.Ionic.Zlib.DeflateManager/Config[] Table
void Pathfinding::Ionic::Zlib::DeflateManager::Config::_set_Table(::ArrayW<::Pathfinding::Ionic::Zlib::DeflateManager::Config*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::_set_Table");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "DeflateManager/Config", "Table", value));
}
// Autogenerated instance field getter
// Get instance field: System.Int32 GoodLength
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_GoodLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_GoodLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GoodLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 MaxLazy
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_MaxLazy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_MaxLazy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MaxLazy"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 NiceLength
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_NiceLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_NiceLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NiceLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 MaxChainLength
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_MaxChainLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_MaxChainLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MaxChainLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.DeflateFlavor Flavor
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::DeflateFlavor& Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_Flavor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::dyn_Flavor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Flavor"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::DeflateFlavor*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager/Config..cctor
void Pathfinding::Ionic::Zlib::DeflateManager::Config::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "DeflateManager/Config", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateManager/Config.Lookup
::Pathfinding::Ionic::Zlib::DeflateManager::Config* Pathfinding::Ionic::Zlib::DeflateManager::Config::Lookup(::Pathfinding::Ionic::Zlib::CompressionLevel level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::Config::Lookup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "DeflateManager/Config", "Lookup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::DeflateManager::Config*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, level);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.DeflateStream
#include "Pathfinding/Ionic/Zlib/DeflateStream.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibBaseStream
#include "Pathfinding/Ionic/Zlib/ZlibBaseStream.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionStrategy
#include "Pathfinding/Ionic/Zlib/CompressionStrategy.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.ZlibBaseStream _baseStream
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibBaseStream*& Pathfinding::Ionic::Zlib::DeflateStream::dyn__baseStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::dyn__baseStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseStream"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibBaseStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.IO.Stream _innerStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zlib::DeflateStream::dyn__innerStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::dyn__innerStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_innerStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::DeflateStream::dyn__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::dyn__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.set_BufferSize
void Pathfinding::Ionic::Zlib::DeflateStream::set_BufferSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::set_BufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.set_Strategy
void Pathfinding::Ionic::Zlib::DeflateStream::set_Strategy(::Pathfinding::Ionic::Zlib::CompressionStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::set_Strategy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Strategy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.Dispose
void Pathfinding::Ionic::Zlib::DeflateStream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.get_CanRead
bool Pathfinding::Ionic::Zlib::DeflateStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.get_CanSeek
bool Pathfinding::Ionic::Zlib::DeflateStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.get_CanWrite
bool Pathfinding::Ionic::Zlib::DeflateStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.Flush
void Pathfinding::Ionic::Zlib::DeflateStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::Flush");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.get_Length
int64_t Pathfinding::Ionic::Zlib::DeflateStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::get_Length");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.get_Position
int64_t Pathfinding::Ionic::Zlib::DeflateStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::get_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.set_Position
void Pathfinding::Ionic::Zlib::DeflateStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::set_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.Read
int Pathfinding::Ionic::Zlib::DeflateStream::Read(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 33));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.Seek
int64_t Pathfinding::Ionic::Zlib::DeflateStream::Seek(int64_t offset, ::System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::Seek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.SetLength
void Pathfinding::Ionic::Zlib::DeflateStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::SetLength");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.DeflateStream.Write
void Pathfinding::Ionic::Zlib::DeflateStream::Write(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateStream::Write");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.GZipStream
#include "Pathfinding/Ionic/Zlib/GZipStream.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibBaseStream
#include "Pathfinding/Ionic/Zlib/ZlibBaseStream.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.DateTime _unixEpoch
::System::DateTime Pathfinding::Ionic::Zlib::GZipStream::_get__unixEpoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::_get__unixEpoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::DateTime>("Pathfinding.Ionic.Zlib", "GZipStream", "_unixEpoch"));
}
// Autogenerated static field setter
// Set static field: static readonly System.DateTime _unixEpoch
void Pathfinding::Ionic::Zlib::GZipStream::_set__unixEpoch(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::_set__unixEpoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "GZipStream", "_unixEpoch", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Text.Encoding iso8859dash1
::System::Text::Encoding* Pathfinding::Ionic::Zlib::GZipStream::_get_iso8859dash1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::_get_iso8859dash1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::Encoding*>("Pathfinding.Ionic.Zlib", "GZipStream", "iso8859dash1"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.Encoding iso8859dash1
void Pathfinding::Ionic::Zlib::GZipStream::_set_iso8859dash1(::System::Text::Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::_set_iso8859dash1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "GZipStream", "iso8859dash1", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Nullable`1<System.DateTime> LastModified
[[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::DateTime>& Pathfinding::Ionic::Zlib::GZipStream::dyn_LastModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::dyn_LastModified");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LastModified"))->offset;
  return *reinterpret_cast<::System::Nullable_1<::System::DateTime>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _headerByteCount
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::GZipStream::dyn__headerByteCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::dyn__headerByteCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headerByteCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.ZlibBaseStream _baseStream
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibBaseStream*& Pathfinding::Ionic::Zlib::GZipStream::dyn__baseStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::dyn__baseStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_baseStream"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibBaseStream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::GZipStream::dyn__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::dyn__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _firstReadDone
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::GZipStream::dyn__firstReadDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::dyn__firstReadDone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstReadDone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _FileName
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zlib::GZipStream::dyn__FileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::dyn__FileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_FileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _Comment
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zlib::GZipStream::dyn__Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::dyn__Comment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Comment"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream..cctor
void Pathfinding::Ionic::Zlib::GZipStream::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "GZipStream", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.get_Comment
::StringW Pathfinding::Ionic::Zlib::GZipStream::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.set_Comment
void Pathfinding::Ionic::Zlib::GZipStream::set_Comment(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.get_FileName
::StringW Pathfinding::Ionic::Zlib::GZipStream::get_FileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::get_FileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.set_FileName
void Pathfinding::Ionic::Zlib::GZipStream::set_FileName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::set_FileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.EmitHeader
int Pathfinding::Ionic::Zlib::GZipStream::EmitHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::EmitHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EmitHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.get_CanRead
bool Pathfinding::Ionic::Zlib::GZipStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.get_CanSeek
bool Pathfinding::Ionic::Zlib::GZipStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.get_CanWrite
bool Pathfinding::Ionic::Zlib::GZipStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.Flush
void Pathfinding::Ionic::Zlib::GZipStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::Flush");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.get_Length
int64_t Pathfinding::Ionic::Zlib::GZipStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::get_Length");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.get_Position
int64_t Pathfinding::Ionic::Zlib::GZipStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::get_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.set_Position
void Pathfinding::Ionic::Zlib::GZipStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::set_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.Read
int Pathfinding::Ionic::Zlib::GZipStream::Read(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 33));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.Seek
int64_t Pathfinding::Ionic::Zlib::GZipStream::Seek(int64_t offset, ::System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::Seek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.SetLength
void Pathfinding::Ionic::Zlib::GZipStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::SetLength");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.GZipStream.Write
void Pathfinding::Ionic::Zlib::GZipStream::Write(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::GZipStream::Write");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.InfTree
#include "Pathfinding/Ionic/Zlib/InfTree.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibCodec
#include "Pathfinding/Ionic/Zlib/ZlibCodec.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] fixed_tl
::ArrayW<int> Pathfinding::Ionic::Zlib::InfTree::_get_fixed_tl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_get_fixed_tl");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "InfTree", "fixed_tl"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] fixed_tl
void Pathfinding::Ionic::Zlib::InfTree::_set_fixed_tl(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_set_fixed_tl");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InfTree", "fixed_tl", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] fixed_td
::ArrayW<int> Pathfinding::Ionic::Zlib::InfTree::_get_fixed_td() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_get_fixed_td");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "InfTree", "fixed_td"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] fixed_td
void Pathfinding::Ionic::Zlib::InfTree::_set_fixed_td(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_set_fixed_td");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InfTree", "fixed_td", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] cplens
::ArrayW<int> Pathfinding::Ionic::Zlib::InfTree::_get_cplens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_get_cplens");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "InfTree", "cplens"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] cplens
void Pathfinding::Ionic::Zlib::InfTree::_set_cplens(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_set_cplens");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InfTree", "cplens", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] cplext
::ArrayW<int> Pathfinding::Ionic::Zlib::InfTree::_get_cplext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_get_cplext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "InfTree", "cplext"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] cplext
void Pathfinding::Ionic::Zlib::InfTree::_set_cplext(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_set_cplext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InfTree", "cplext", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] cpdist
::ArrayW<int> Pathfinding::Ionic::Zlib::InfTree::_get_cpdist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_get_cpdist");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "InfTree", "cpdist"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] cpdist
void Pathfinding::Ionic::Zlib::InfTree::_set_cpdist(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_set_cpdist");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InfTree", "cpdist", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] cpdext
::ArrayW<int> Pathfinding::Ionic::Zlib::InfTree::_get_cpdext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_get_cpdext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "InfTree", "cpdext"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] cpdext
void Pathfinding::Ionic::Zlib::InfTree::_set_cpdext(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::_set_cpdext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InfTree", "cpdext", value));
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] hn
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InfTree::dyn_hn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::dyn_hn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hn"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] v
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InfTree::dyn_v() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::dyn_v");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "v"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] c
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InfTree::dyn_c() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::dyn_c");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "c"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] r
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InfTree::dyn_r() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::dyn_r");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "r"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] u
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InfTree::dyn_u() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::dyn_u");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "u"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] x
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InfTree::dyn_x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::dyn_x");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "x"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InfTree..cctor
void Pathfinding::Ionic::Zlib::InfTree::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "InfTree", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InfTree.huft_build
int Pathfinding::Ionic::Zlib::InfTree::huft_build(::ArrayW<int> b, int bindex, int n, int s, ::ArrayW<int> d, ::ArrayW<int> e, ::ArrayW<int> t, ::ArrayW<int> m, ::ArrayW<int> hp, ::ArrayW<int> hn, ::ArrayW<int> v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::huft_build");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "huft_build", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(bindex), ::il2cpp_utils::ExtractType(n), ::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(hp), ::il2cpp_utils::ExtractType(hn), ::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, b, bindex, n, s, d, e, t, m, hp, hn, v);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InfTree.inflate_trees_bits
int Pathfinding::Ionic::Zlib::InfTree::inflate_trees_bits(::ArrayW<int> c, ::ArrayW<int> bb, ::ArrayW<int> tb, ::ArrayW<int> hp, ::Pathfinding::Ionic::Zlib::ZlibCodec* z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::inflate_trees_bits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "inflate_trees_bits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(bb), ::il2cpp_utils::ExtractType(tb), ::il2cpp_utils::ExtractType(hp), ::il2cpp_utils::ExtractType(z)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, c, bb, tb, hp, z);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InfTree.inflate_trees_dynamic
int Pathfinding::Ionic::Zlib::InfTree::inflate_trees_dynamic(int nl, int nd, ::ArrayW<int> c, ::ArrayW<int> bl, ::ArrayW<int> bd, ::ArrayW<int> tl, ::ArrayW<int> td, ::ArrayW<int> hp, ::Pathfinding::Ionic::Zlib::ZlibCodec* z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::inflate_trees_dynamic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "inflate_trees_dynamic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nl), ::il2cpp_utils::ExtractType(nd), ::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(bl), ::il2cpp_utils::ExtractType(bd), ::il2cpp_utils::ExtractType(tl), ::il2cpp_utils::ExtractType(td), ::il2cpp_utils::ExtractType(hp), ::il2cpp_utils::ExtractType(z)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nl, nd, c, bl, bd, tl, td, hp, z);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InfTree.inflate_trees_fixed
int Pathfinding::Ionic::Zlib::InfTree::inflate_trees_fixed(::ArrayW<int> bl, ::ArrayW<int> bd, ::ArrayW<::ArrayW<int>> tl, ::ArrayW<::ArrayW<int>> td, ::Pathfinding::Ionic::Zlib::ZlibCodec* z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::inflate_trees_fixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "InfTree", "inflate_trees_fixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bl), ::il2cpp_utils::ExtractType(bd), ::il2cpp_utils::ExtractType(tl), ::il2cpp_utils::ExtractType(td), ::il2cpp_utils::ExtractType(z)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bl, bd, tl, td, z);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InfTree.initWorkArea
void Pathfinding::Ionic::Zlib::InfTree::initWorkArea(int vsize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InfTree::initWorkArea");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "initWorkArea", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vsize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vsize);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Ionic.Zlib.InflateBlocks
#include "Pathfinding/Ionic/Zlib/InflateBlocks.hpp"
// Including type: Pathfinding.Ionic.Zlib.InflateCodes
#include "Pathfinding/Ionic/Zlib/InflateCodes.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibCodec
#include "Pathfinding/Ionic/Zlib/ZlibCodec.hpp"
// Including type: Pathfinding.Ionic.Zlib.InfTree
#include "Pathfinding/Ionic/Zlib/InfTree.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] border
::ArrayW<int> Pathfinding::Ionic::Zlib::InflateBlocks::_get_border() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::_get_border");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "InflateBlocks", "border"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] border
void Pathfinding::Ionic::Zlib::InflateBlocks::_set_border(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::_set_border");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks", "border", value));
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode mode
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 left
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_left");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "left"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 table
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "table"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 index
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] blens
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_blens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_blens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blens"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] bb
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_bb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_bb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bb"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] tb
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_tb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_tb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tb"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.InflateCodes codes
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::InflateCodes*& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_codes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_codes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "codes"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::InflateCodes**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 last
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_last() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_last");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "last"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.ZlibCodec _codec
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibCodec*& Pathfinding::Ionic::Zlib::InflateBlocks::dyn__codec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn__codec");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_codec"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibCodec**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 bitk
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_bitk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_bitk");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bitk"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 bitb
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_bitb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_bitb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bitb"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] hufts
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_hufts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_hufts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hufts"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte[] window
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_window() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_window");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "window"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 end
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_end() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_end");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "end"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 readAt
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_readAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_readAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readAt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 writeAt
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_writeAt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_writeAt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "writeAt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object checkfn
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_checkfn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_checkfn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "checkfn"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.UInt32 check
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_check() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_check");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "check"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.InfTree inftree
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::InfTree*& Pathfinding::Ionic::Zlib::InflateBlocks::dyn_inftree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::dyn_inftree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inftree"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::InfTree**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateBlocks..cctor
void Pathfinding::Ionic::Zlib::InflateBlocks::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "InflateBlocks", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateBlocks.Reset
uint Pathfinding::Ionic::Zlib::InflateBlocks::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateBlocks.Process
int Pathfinding::Ionic::Zlib::InflateBlocks::Process(int r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, r);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateBlocks.Free
void Pathfinding::Ionic::Zlib::InflateBlocks::Free() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::Free");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Free", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateBlocks.Flush
int Pathfinding::Ionic::Zlib::InflateBlocks::Flush(int r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, r);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode
#include "Pathfinding/Ionic/Zlib/InflateBlocks.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode TYPE
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_TYPE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_TYPE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "TYPE"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode TYPE
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_TYPE(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_TYPE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "TYPE", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode LENS
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_LENS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_LENS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "LENS"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode LENS
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_LENS(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_LENS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "LENS", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode STORED
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_STORED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_STORED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "STORED"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode STORED
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_STORED(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_STORED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "STORED", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode TABLE
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_TABLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_TABLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "TABLE"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode TABLE
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_TABLE(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_TABLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "TABLE", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode BTREE
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_BTREE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_BTREE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "BTREE"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode BTREE
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_BTREE(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_BTREE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "BTREE", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode DTREE
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_DTREE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_DTREE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "DTREE"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode DTREE
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_DTREE(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_DTREE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "DTREE", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode CODES
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_CODES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_CODES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "CODES"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode CODES
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_CODES(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_CODES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "CODES", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode DRY
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_DRY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_DRY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "DRY"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode DRY
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_DRY(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_DRY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "DRY", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode DONE
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_DONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_DONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "DONE"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode DONE
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_DONE(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_DONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "DONE", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode BAD
::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_BAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_get_BAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode>("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "BAD"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateBlocks/InflateBlockMode BAD
void Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_BAD(::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::_set_BAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateBlocks/InflateBlockMode", "BAD", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateBlocks::InflateBlockMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.InternalInflateConstants
#include "Pathfinding/Ionic/Zlib/InternalInflateConstants.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] InflateMask
::ArrayW<int> Pathfinding::Ionic::Zlib::InternalInflateConstants::_get_InflateMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalInflateConstants::_get_InflateMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "InternalInflateConstants", "InflateMask"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] InflateMask
void Pathfinding::Ionic::Zlib::InternalInflateConstants::_set_InflateMask(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalInflateConstants::_set_InflateMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalInflateConstants", "InflateMask", value));
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InternalInflateConstants..cctor
void Pathfinding::Ionic::Zlib::InternalInflateConstants::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalInflateConstants::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "InternalInflateConstants", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.InflateCodes
#include "Pathfinding/Ionic/Zlib/InflateCodes.hpp"
// Including type: Pathfinding.Ionic.Zlib.InflateBlocks
#include "Pathfinding/Ionic/Zlib/InflateBlocks.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibCodec
#include "Pathfinding/Ionic/Zlib/ZlibCodec.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 mode
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 len
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_len() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_len");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "len"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] tree
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InflateCodes::dyn_tree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_tree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tree"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 tree_index
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_tree_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_tree_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tree_index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 need
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_need() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_need");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "need"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 lit
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_lit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_lit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lit"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 bitsToGet
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_bitsToGet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_bitsToGet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bitsToGet"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 dist
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_dist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_dist");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dist"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte lbits
[[deprecated("Use field access instead!")]] uint8_t& Pathfinding::Ionic::Zlib::InflateCodes::dyn_lbits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_lbits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lbits"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte dbits
[[deprecated("Use field access instead!")]] uint8_t& Pathfinding::Ionic::Zlib::InflateCodes::dyn_dbits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_dbits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbits"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] ltree
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InflateCodes::dyn_ltree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_ltree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ltree"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 ltree_index
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_ltree_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_ltree_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ltree_index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] dtree
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::InflateCodes::dyn_dtree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_dtree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dtree"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 dtree_index
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateCodes::dyn_dtree_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::dyn_dtree_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dtree_index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateCodes.Init
void Pathfinding::Ionic::Zlib::InflateCodes::Init(int bl, int bd, ::ArrayW<int> tl, int tl_index, ::ArrayW<int> td, int td_index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bl), ::il2cpp_utils::ExtractType(bd), ::il2cpp_utils::ExtractType(tl), ::il2cpp_utils::ExtractType(tl_index), ::il2cpp_utils::ExtractType(td), ::il2cpp_utils::ExtractType(td_index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bl, bd, tl, tl_index, td, td_index);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateCodes.Process
int Pathfinding::Ionic::Zlib::InflateCodes::Process(::Pathfinding::Ionic::Zlib::InflateBlocks* blocks, int r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(blocks), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, blocks, r);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateCodes.InflateFast
int Pathfinding::Ionic::Zlib::InflateCodes::InflateFast(int bl, int bd, ::ArrayW<int> tl, int tl_index, ::ArrayW<int> td, int td_index, ::Pathfinding::Ionic::Zlib::InflateBlocks* s, ::Pathfinding::Ionic::Zlib::ZlibCodec* z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateCodes::InflateFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InflateFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bl), ::il2cpp_utils::ExtractType(bd), ::il2cpp_utils::ExtractType(tl), ::il2cpp_utils::ExtractType(tl_index), ::il2cpp_utils::ExtractType(td), ::il2cpp_utils::ExtractType(td_index), ::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(z)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bl, bd, tl, tl_index, td, td_index, s, z);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.InflateManager
#include "Pathfinding/Ionic/Zlib/InflateManager.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibCodec
#include "Pathfinding/Ionic/Zlib/ZlibCodec.hpp"
// Including type: Pathfinding.Ionic.Zlib.InflateBlocks
#include "Pathfinding/Ionic/Zlib/InflateBlocks.hpp"
// Including type: Pathfinding.Ionic.Zlib.FlushType
#include "Pathfinding/Ionic/Zlib/FlushType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] mark
::ArrayW<uint8_t> Pathfinding::Ionic::Zlib::InflateManager::_get_mark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::_get_mark");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint8_t>>("Pathfinding.Ionic.Zlib", "InflateManager", "mark"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] mark
void Pathfinding::Ionic::Zlib::InflateManager::_set_mark(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::_set_mark");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager", "mark", value));
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode mode
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode& Pathfinding::Ionic::Zlib::InflateManager::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.ZlibCodec _codec
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibCodec*& Pathfinding::Ionic::Zlib::InflateManager::dyn__codec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn__codec");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_codec"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibCodec**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 method
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateManager::dyn_method() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn_method");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "method"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.UInt32 computedCheck
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zlib::InflateManager::dyn_computedCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn_computedCheck");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "computedCheck"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.UInt32 expectedCheck
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zlib::InflateManager::dyn_expectedCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn_expectedCheck");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "expectedCheck"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 marker
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateManager::dyn_marker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn_marker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "marker"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _handleRfc1950HeaderBytes
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::InflateManager::dyn__handleRfc1950HeaderBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn__handleRfc1950HeaderBytes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handleRfc1950HeaderBytes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 wbits
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateManager::dyn_wbits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn_wbits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wbits"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.InflateBlocks blocks
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::InflateBlocks*& Pathfinding::Ionic::Zlib::InflateManager::dyn_blocks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::dyn_blocks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blocks"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::InflateBlocks**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateManager..cctor
void Pathfinding::Ionic::Zlib::InflateManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "InflateManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateManager.get_HandleRfc1950HeaderBytes
bool Pathfinding::Ionic::Zlib::InflateManager::get_HandleRfc1950HeaderBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::get_HandleRfc1950HeaderBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HandleRfc1950HeaderBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateManager.Reset
int Pathfinding::Ionic::Zlib::InflateManager::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateManager.End
int Pathfinding::Ionic::Zlib::InflateManager::End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::End");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "End", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateManager.Initialize
int Pathfinding::Ionic::Zlib::InflateManager::Initialize(::Pathfinding::Ionic::Zlib::ZlibCodec* codec, int w) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(codec), ::il2cpp_utils::ExtractType(w)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, codec, w);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InflateManager.Inflate
int Pathfinding::Ionic::Zlib::InflateManager::Inflate(::Pathfinding::Ionic::Zlib::FlushType flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::Inflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Inflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flush)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, flush);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode
#include "Pathfinding/Ionic/Zlib/InflateManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode METHOD
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_METHOD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_METHOD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "METHOD"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode METHOD
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_METHOD(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_METHOD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "METHOD", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode FLAG
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_FLAG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_FLAG");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "FLAG"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode FLAG
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_FLAG(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_FLAG");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "FLAG", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT4
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT4"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT4
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT4(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT4", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT3
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT3"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT3
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT3(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT3", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT2
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT2"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT2
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT2(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT2", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT1
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT1"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT1
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT1(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT1", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT0
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DICT0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT0"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DICT0
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT0(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DICT0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DICT0", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode BLOCKS
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_BLOCKS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_BLOCKS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "BLOCKS"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode BLOCKS
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_BLOCKS(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_BLOCKS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "BLOCKS", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode CHECK4
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_CHECK4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_CHECK4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "CHECK4"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode CHECK4
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_CHECK4(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_CHECK4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "CHECK4", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode CHECK3
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_CHECK3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_CHECK3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "CHECK3"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode CHECK3
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_CHECK3(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_CHECK3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "CHECK3", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode CHECK2
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_CHECK2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_CHECK2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "CHECK2"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode CHECK2
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_CHECK2(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_CHECK2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "CHECK2", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode CHECK1
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_CHECK1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_CHECK1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "CHECK1"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode CHECK1
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_CHECK1(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_CHECK1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "CHECK1", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DONE
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_DONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DONE"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode DONE
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DONE(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_DONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "DONE", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode BAD
::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_BAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_get_BAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode>("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "BAD"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.InflateManager/InflateManagerMode BAD
void Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_BAD(::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::_set_BAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InflateManager/InflateManagerMode", "BAD", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InflateManager::InflateManagerMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.WorkItem
#include "Pathfinding/Ionic/Zlib/WorkItem.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibCodec
#include "Pathfinding/Ionic/Zlib/ZlibCodec.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte[] buffer
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::WorkItem::dyn_buffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::WorkItem::dyn_buffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buffer"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] compressed
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::WorkItem::dyn_compressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::WorkItem::dyn_compressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compressed"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 crc
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::WorkItem::dyn_crc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::WorkItem::dyn_crc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "crc"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 index
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::WorkItem::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::WorkItem::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 ordinal
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::WorkItem::dyn_ordinal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::WorkItem::dyn_ordinal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ordinal"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 inputBytesAvailable
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::WorkItem::dyn_inputBytesAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::WorkItem::dyn_inputBytesAvailable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputBytesAvailable"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 compressedBytesAvailable
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::WorkItem::dyn_compressedBytesAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::WorkItem::dyn_compressedBytesAvailable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compressedBytesAvailable"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Ionic.Zlib.ZlibCodec compressor
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibCodec*& Pathfinding::Ionic::Zlib::WorkItem::dyn_compressor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::WorkItem::dyn_compressor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "compressor"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibCodec**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream
#include "Pathfinding/Ionic/Zlib/ParallelDeflateOutputStream.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Pathfinding.Ionic.Zlib.WorkItem
#include "Pathfinding/Ionic/Zlib/WorkItem.hpp"
// Including type: System.Threading.AutoResetEvent
#include "System/Threading/AutoResetEvent.hpp"
// Including type: Pathfinding.Ionic.Crc.CRC32
#include "Pathfinding/Ionic/Crc/CRC32.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 IO_BUFFER_SIZE_DEFAULT
int Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_get_IO_BUFFER_SIZE_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_get_IO_BUFFER_SIZE_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream", "IO_BUFFER_SIZE_DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 IO_BUFFER_SIZE_DEFAULT
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_set_IO_BUFFER_SIZE_DEFAULT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_set_IO_BUFFER_SIZE_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream", "IO_BUFFER_SIZE_DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 BufferPairsPerCore
int Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_get_BufferPairsPerCore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_get_BufferPairsPerCore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream", "BufferPairsPerCore"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 BufferPairsPerCore
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_set_BufferPairsPerCore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_set_BufferPairsPerCore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream", "BufferPairsPerCore", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Pathfinding.Ionic.Zlib.WorkItem> _pool
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Ionic::Zlib::WorkItem*>*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__pool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pool"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Ionic::Zlib::WorkItem*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _leaveOpen
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__leaveOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__leaveOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leaveOpen"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean emitting
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn_emitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn_emitting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emitting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IO.Stream _outStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__outStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__outStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _maxBufferPairs
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__maxBufferPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__maxBufferPairs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxBufferPairs"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _bufferSize
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__bufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__bufferSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bufferSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.AutoResetEvent _newlyCompressedBlob
[[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__newlyCompressedBlob() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__newlyCompressedBlob");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_newlyCompressedBlob"))->offset;
  return *reinterpret_cast<::System::Threading::AutoResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _outputLock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__outputLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__outputLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outputLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isClosed
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__isClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__isClosed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isClosed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _firstWriteDone
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__firstWriteDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__firstWriteDone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_firstWriteDone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _currentlyFilling
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__currentlyFilling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__currentlyFilling");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentlyFilling"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastFilled
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__lastFilled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__lastFilled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFilled"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastWritten
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__lastWritten() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__lastWritten");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWritten"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _latestCompressed
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__latestCompressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__latestCompressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_latestCompressed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _Crc32
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__Crc32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__Crc32");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Crc32"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Crc.CRC32 _runningCrc
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Crc::CRC32*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__runningCrc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__runningCrc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_runningCrc"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Crc::CRC32**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _latestLock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__latestLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__latestLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_latestLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Queue`1<System.Int32> _toWrite
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<int>*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__toWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__toWrite");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_toWrite"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Queue`1<System.Int32> _toFill
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<int>*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__toFill() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__toFill");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_toFill"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _totalBytesProcessed
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__totalBytesProcessed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__totalBytesProcessed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_totalBytesProcessed"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.CompressionLevel _compressLevel
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__compressLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__compressLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_compressLevel"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionLevel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Exception _pendingException
[[deprecated("Use field access instead!")]] ::System::Exception*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__pendingException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__pendingException");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pendingException"))->offset;
  return *reinterpret_cast<::System::Exception**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _handlingException
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__handlingException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__handlingException");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handlingException"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _eLock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__eLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__eLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits _DesiredTrace
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__DesiredTrace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn__DesiredTrace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_DesiredTrace"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Zlib.CompressionStrategy <Strategy>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn_$Strategy$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::dyn_$Strategy$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Strategy>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream..cctor
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.get_Strategy
::Pathfinding::Ionic::Zlib::CompressionStrategy Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_Strategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_Strategy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Strategy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::CompressionStrategy, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.set_Strategy
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::set_Strategy(::Pathfinding::Ionic::Zlib::CompressionStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::set_Strategy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Strategy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.set_MaxBufferPairs
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::set_MaxBufferPairs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::set_MaxBufferPairs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MaxBufferPairs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.set_BufferSize
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::set_BufferSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::set_BufferSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream._InitializePoolOfWorkItems
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_InitializePoolOfWorkItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_InitializePoolOfWorkItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InitializePoolOfWorkItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream._FlushFinish
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_FlushFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_FlushFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_FlushFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream._Flush
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_Flush(bool lastInput) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lastInput)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lastInput);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.Dispose
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.Reset
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Reset(::System::IO::Stream* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.EmitPendingBuffers
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::EmitPendingBuffers(bool doAll, bool mustWait) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::EmitPendingBuffers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EmitPendingBuffers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(doAll), ::il2cpp_utils::ExtractType(mustWait)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, doAll, mustWait);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream._DeflateOne
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_DeflateOne(::Il2CppObject* wi) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::_DeflateOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_DeflateOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(wi)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, wi);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.DeflateOneSegment
bool Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::DeflateOneSegment(::Pathfinding::Ionic::Zlib::WorkItem* workitem) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::DeflateOneSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeflateOneSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workitem)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, workitem);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.Write
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Write(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Write");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.Flush
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Flush");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.Close
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Close");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.Dispose
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.get_CanSeek
bool Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.get_CanRead
bool Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.get_CanWrite
bool Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.get_Length
int64_t Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_Length");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.get_Position
int64_t Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::get_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.set_Position
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::set_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.Read
int Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Read(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 33));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.Seek
int64_t Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Seek(int64_t offset, ::System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::Seek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream.SetLength
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::SetLength");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits
#include "Pathfinding/Ionic/Zlib/ParallelDeflateOutputStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits None
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "None"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits None
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_None(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits NotUsed1
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_NotUsed1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_NotUsed1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "NotUsed1"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits NotUsed1
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_NotUsed1(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_NotUsed1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "NotUsed1", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitLock
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitLock"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitLock
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitLock(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitLock", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitEnter
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitEnter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitEnter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitEnter"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitEnter
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitEnter(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitEnter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitEnter", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitBegin
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitBegin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitBegin"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitBegin
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitBegin(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitBegin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitBegin", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitDone
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitDone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitDone"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitDone
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitDone(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitDone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitDone", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitSkip
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitSkip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitSkip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitSkip"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitSkip
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitSkip(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitSkip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitSkip", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitAll
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_EmitAll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitAll"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits EmitAll
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitAll(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_EmitAll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "EmitAll", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Flush
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Flush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Flush"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Flush
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Flush(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Flush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Flush", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Lifecycle
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Lifecycle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Lifecycle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Lifecycle"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Lifecycle
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Lifecycle(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Lifecycle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Lifecycle", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Session
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Session() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Session");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Session"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Session
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Session(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Session");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Session", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Synch
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Synch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Synch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Synch"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Synch
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Synch(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Synch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Synch", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Instance
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Instance"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Instance
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Instance(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Instance", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Compress
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Compress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Compress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Compress"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Compress
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Compress(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Compress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Compress", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Write
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_Write");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Write"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits Write
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Write(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_Write");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "Write", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits WriteEnter
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_WriteEnter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_WriteEnter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "WriteEnter"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits WriteEnter
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_WriteEnter(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_WriteEnter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "WriteEnter", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits WriteTake
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_WriteTake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_WriteTake");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "WriteTake"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits WriteTake
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_WriteTake(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_WriteTake");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "WriteTake", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits All
::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits>("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "All"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream/TraceBits All
void Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_All(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream/TraceBits", "All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 value__
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream::TraceBits::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.Tree
#include "Pathfinding/Ionic/Zlib/Tree.hpp"
// Including type: Pathfinding.Ionic.Zlib.StaticTree
#include "Pathfinding/Ionic/Zlib/StaticTree.hpp"
// Including type: Pathfinding.Ionic.Zlib.DeflateManager
#include "Pathfinding/Ionic/Zlib/DeflateManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 HEAP_SIZE
int Pathfinding::Ionic::Zlib::Tree::_get_HEAP_SIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get_HEAP_SIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "Tree", "HEAP_SIZE"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 HEAP_SIZE
void Pathfinding::Ionic::Zlib::Tree::_set_HEAP_SIZE(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set_HEAP_SIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "HEAP_SIZE", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] ExtraLengthBits
::ArrayW<int> Pathfinding::Ionic::Zlib::Tree::_get_ExtraLengthBits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get_ExtraLengthBits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "Tree", "ExtraLengthBits"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] ExtraLengthBits
void Pathfinding::Ionic::Zlib::Tree::_set_ExtraLengthBits(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set_ExtraLengthBits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "ExtraLengthBits", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] ExtraDistanceBits
::ArrayW<int> Pathfinding::Ionic::Zlib::Tree::_get_ExtraDistanceBits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get_ExtraDistanceBits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "Tree", "ExtraDistanceBits"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] ExtraDistanceBits
void Pathfinding::Ionic::Zlib::Tree::_set_ExtraDistanceBits(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set_ExtraDistanceBits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "ExtraDistanceBits", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] extra_blbits
::ArrayW<int> Pathfinding::Ionic::Zlib::Tree::_get_extra_blbits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get_extra_blbits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "Tree", "extra_blbits"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] extra_blbits
void Pathfinding::Ionic::Zlib::Tree::_set_extra_blbits(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set_extra_blbits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "extra_blbits", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.SByte[] bl_order
::ArrayW<int8_t> Pathfinding::Ionic::Zlib::Tree::_get_bl_order() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get_bl_order");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int8_t>>("Pathfinding.Ionic.Zlib", "Tree", "bl_order"));
}
// Autogenerated static field setter
// Set static field: static readonly System.SByte[] bl_order
void Pathfinding::Ionic::Zlib::Tree::_set_bl_order(::ArrayW<int8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set_bl_order");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "bl_order", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.SByte[] _dist_code
::ArrayW<int8_t> Pathfinding::Ionic::Zlib::Tree::_get__dist_code() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get__dist_code");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int8_t>>("Pathfinding.Ionic.Zlib", "Tree", "_dist_code"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.SByte[] _dist_code
void Pathfinding::Ionic::Zlib::Tree::_set__dist_code(::ArrayW<int8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set__dist_code");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "_dist_code", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.SByte[] LengthCode
::ArrayW<int8_t> Pathfinding::Ionic::Zlib::Tree::_get_LengthCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get_LengthCode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int8_t>>("Pathfinding.Ionic.Zlib", "Tree", "LengthCode"));
}
// Autogenerated static field setter
// Set static field: static readonly System.SByte[] LengthCode
void Pathfinding::Ionic::Zlib::Tree::_set_LengthCode(::ArrayW<int8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set_LengthCode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "LengthCode", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] LengthBase
::ArrayW<int> Pathfinding::Ionic::Zlib::Tree::_get_LengthBase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get_LengthBase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "Tree", "LengthBase"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] LengthBase
void Pathfinding::Ionic::Zlib::Tree::_set_LengthBase(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set_LengthBase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "LengthBase", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] DistanceBase
::ArrayW<int> Pathfinding::Ionic::Zlib::Tree::_get_DistanceBase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_get_DistanceBase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("Pathfinding.Ionic.Zlib", "Tree", "DistanceBase"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] DistanceBase
void Pathfinding::Ionic::Zlib::Tree::_set_DistanceBase(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::_set_DistanceBase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Tree", "DistanceBase", value));
}
// Autogenerated instance field getter
// Get instance field: System.Int16[] dyn_tree
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& Pathfinding::Ionic::Zlib::Tree::dyn_dyn_tree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::dyn_dyn_tree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dyn_tree"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 max_code
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::Tree::dyn_max_code() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::dyn_max_code");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "max_code"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.StaticTree staticTree
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::StaticTree*& Pathfinding::Ionic::Zlib::Tree::dyn_staticTree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::dyn_staticTree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "staticTree"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::StaticTree**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.Tree..cctor
void Pathfinding::Ionic::Zlib::Tree::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "Tree", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.Tree.DistanceCode
int Pathfinding::Ionic::Zlib::Tree::DistanceCode(int dist) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::DistanceCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "Tree", "DistanceCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dist)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dist);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.Tree.gen_bitlen
void Pathfinding::Ionic::Zlib::Tree::gen_bitlen(::Pathfinding::Ionic::Zlib::DeflateManager* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::gen_bitlen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "gen_bitlen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.Tree.build_tree
void Pathfinding::Ionic::Zlib::Tree::build_tree(::Pathfinding::Ionic::Zlib::DeflateManager* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::build_tree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "build_tree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.Tree.gen_codes
void Pathfinding::Ionic::Zlib::Tree::gen_codes(::ArrayW<int16_t> tree, int max_code, ::ArrayW<int16_t> bl_count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::gen_codes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "Tree", "gen_codes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(max_code), ::il2cpp_utils::ExtractType(bl_count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tree, max_code, bl_count);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.Tree.bi_reverse
int Pathfinding::Ionic::Zlib::Tree::bi_reverse(int code, int len) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Tree::bi_reverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "Tree", "bi_reverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code), ::il2cpp_utils::ExtractType(len)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, code, len);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.FlushType
#include "Pathfinding/Ionic/Zlib/FlushType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.FlushType None
::Pathfinding::Ionic::Zlib::FlushType Pathfinding::Ionic::Zlib::FlushType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::FlushType>("Pathfinding.Ionic.Zlib", "FlushType", "None"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.FlushType None
void Pathfinding::Ionic::Zlib::FlushType::_set_None(::Pathfinding::Ionic::Zlib::FlushType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "FlushType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.FlushType Partial
::Pathfinding::Ionic::Zlib::FlushType Pathfinding::Ionic::Zlib::FlushType::_get_Partial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_get_Partial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::FlushType>("Pathfinding.Ionic.Zlib", "FlushType", "Partial"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.FlushType Partial
void Pathfinding::Ionic::Zlib::FlushType::_set_Partial(::Pathfinding::Ionic::Zlib::FlushType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_set_Partial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "FlushType", "Partial", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.FlushType Sync
::Pathfinding::Ionic::Zlib::FlushType Pathfinding::Ionic::Zlib::FlushType::_get_Sync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_get_Sync");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::FlushType>("Pathfinding.Ionic.Zlib", "FlushType", "Sync"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.FlushType Sync
void Pathfinding::Ionic::Zlib::FlushType::_set_Sync(::Pathfinding::Ionic::Zlib::FlushType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_set_Sync");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "FlushType", "Sync", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.FlushType Full
::Pathfinding::Ionic::Zlib::FlushType Pathfinding::Ionic::Zlib::FlushType::_get_Full() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_get_Full");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::FlushType>("Pathfinding.Ionic.Zlib", "FlushType", "Full"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.FlushType Full
void Pathfinding::Ionic::Zlib::FlushType::_set_Full(::Pathfinding::Ionic::Zlib::FlushType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_set_Full");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "FlushType", "Full", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.FlushType Finish
::Pathfinding::Ionic::Zlib::FlushType Pathfinding::Ionic::Zlib::FlushType::_get_Finish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_get_Finish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::FlushType>("Pathfinding.Ionic.Zlib", "FlushType", "Finish"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.FlushType Finish
void Pathfinding::Ionic::Zlib::FlushType::_set_Finish(::Pathfinding::Ionic::Zlib::FlushType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::_set_Finish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "FlushType", "Finish", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::FlushType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::FlushType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.CompressionLevel
#include "Pathfinding/Ionic/Zlib/CompressionLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel None
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "None"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel None
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_None(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level0
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level0"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level0
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level0(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level0", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel BestSpeed
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_BestSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_BestSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "BestSpeed"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel BestSpeed
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_BestSpeed(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_BestSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "BestSpeed", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level1
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level1"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level1
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level1(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level1", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level2
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level2"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level2
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level2(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level2", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level3
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level3"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level3
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level3(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level3", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level4
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level4"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level4
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level4(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level4", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level5
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level5"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level5
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level5(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level5", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Default
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Default
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Default(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level6
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level6"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level6
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level6(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level6", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level7
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level7"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level7
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level7(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level7", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level8
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level8"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level8
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level8(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level8", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel BestCompression
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_BestCompression() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_BestCompression");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "BestCompression"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel BestCompression
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_BestCompression(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_BestCompression");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "BestCompression", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level9
::Pathfinding::Ionic::Zlib::CompressionLevel Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_get_Level9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionLevel>("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level9"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionLevel Level9
void Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level9(::Pathfinding::Ionic::Zlib::CompressionLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::_set_Level9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionLevel", "Level9", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::CompressionLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.CompressionStrategy
#include "Pathfinding/Ionic/Zlib/CompressionStrategy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionStrategy Default
::Pathfinding::Ionic::Zlib::CompressionStrategy Pathfinding::Ionic::Zlib::CompressionStrategy::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionStrategy::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionStrategy>("Pathfinding.Ionic.Zlib", "CompressionStrategy", "Default"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionStrategy Default
void Pathfinding::Ionic::Zlib::CompressionStrategy::_set_Default(::Pathfinding::Ionic::Zlib::CompressionStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionStrategy::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionStrategy", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionStrategy Filtered
::Pathfinding::Ionic::Zlib::CompressionStrategy Pathfinding::Ionic::Zlib::CompressionStrategy::_get_Filtered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionStrategy::_get_Filtered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionStrategy>("Pathfinding.Ionic.Zlib", "CompressionStrategy", "Filtered"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionStrategy Filtered
void Pathfinding::Ionic::Zlib::CompressionStrategy::_set_Filtered(::Pathfinding::Ionic::Zlib::CompressionStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionStrategy::_set_Filtered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionStrategy", "Filtered", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionStrategy HuffmanOnly
::Pathfinding::Ionic::Zlib::CompressionStrategy Pathfinding::Ionic::Zlib::CompressionStrategy::_get_HuffmanOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionStrategy::_get_HuffmanOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionStrategy>("Pathfinding.Ionic.Zlib", "CompressionStrategy", "HuffmanOnly"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionStrategy HuffmanOnly
void Pathfinding::Ionic::Zlib::CompressionStrategy::_set_HuffmanOnly(::Pathfinding::Ionic::Zlib::CompressionStrategy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionStrategy::_set_HuffmanOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionStrategy", "HuffmanOnly", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::CompressionStrategy::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionStrategy::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.CompressionMode
#include "Pathfinding/Ionic/Zlib/CompressionMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionMode Compress
::Pathfinding::Ionic::Zlib::CompressionMode Pathfinding::Ionic::Zlib::CompressionMode::_get_Compress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionMode::_get_Compress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionMode>("Pathfinding.Ionic.Zlib", "CompressionMode", "Compress"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionMode Compress
void Pathfinding::Ionic::Zlib::CompressionMode::_set_Compress(::Pathfinding::Ionic::Zlib::CompressionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionMode::_set_Compress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionMode", "Compress", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.CompressionMode Decompress
::Pathfinding::Ionic::Zlib::CompressionMode Pathfinding::Ionic::Zlib::CompressionMode::_get_Decompress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionMode::_get_Decompress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::CompressionMode>("Pathfinding.Ionic.Zlib", "CompressionMode", "Decompress"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.CompressionMode Decompress
void Pathfinding::Ionic::Zlib::CompressionMode::_set_Decompress(::Pathfinding::Ionic::Zlib::CompressionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionMode::_set_Decompress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "CompressionMode", "Decompress", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::CompressionMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::CompressionMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.ZlibException
#include "Pathfinding/Ionic/Zlib/ZlibException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.SharedUtils
#include "Pathfinding/Ionic/Zlib/SharedUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Pathfinding.Ionic.Zlib.SharedUtils.URShift
int Pathfinding::Ionic::Zlib::SharedUtils::URShift(int number, int bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::SharedUtils::URShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "SharedUtils", "URShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, number, bits);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.InternalConstants
#include "Pathfinding/Ionic/Zlib/InternalConstants.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Int32 MAX_BITS
int Pathfinding::Ionic::Zlib::InternalConstants::_get_MAX_BITS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_MAX_BITS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "MAX_BITS"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 MAX_BITS
void Pathfinding::Ionic::Zlib::InternalConstants::_set_MAX_BITS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_MAX_BITS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "MAX_BITS", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 BL_CODES
int Pathfinding::Ionic::Zlib::InternalConstants::_get_BL_CODES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_BL_CODES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "BL_CODES"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 BL_CODES
void Pathfinding::Ionic::Zlib::InternalConstants::_set_BL_CODES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_BL_CODES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "BL_CODES", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 D_CODES
int Pathfinding::Ionic::Zlib::InternalConstants::_get_D_CODES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_D_CODES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "D_CODES"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 D_CODES
void Pathfinding::Ionic::Zlib::InternalConstants::_set_D_CODES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_D_CODES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "D_CODES", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 LITERALS
int Pathfinding::Ionic::Zlib::InternalConstants::_get_LITERALS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_LITERALS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "LITERALS"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 LITERALS
void Pathfinding::Ionic::Zlib::InternalConstants::_set_LITERALS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_LITERALS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "LITERALS", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 LENGTH_CODES
int Pathfinding::Ionic::Zlib::InternalConstants::_get_LENGTH_CODES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_LENGTH_CODES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "LENGTH_CODES"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 LENGTH_CODES
void Pathfinding::Ionic::Zlib::InternalConstants::_set_LENGTH_CODES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_LENGTH_CODES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "LENGTH_CODES", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 L_CODES
int Pathfinding::Ionic::Zlib::InternalConstants::_get_L_CODES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_L_CODES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "L_CODES"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 L_CODES
void Pathfinding::Ionic::Zlib::InternalConstants::_set_L_CODES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_L_CODES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "L_CODES", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 MAX_BL_BITS
int Pathfinding::Ionic::Zlib::InternalConstants::_get_MAX_BL_BITS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_MAX_BL_BITS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "MAX_BL_BITS"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 MAX_BL_BITS
void Pathfinding::Ionic::Zlib::InternalConstants::_set_MAX_BL_BITS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_MAX_BL_BITS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "MAX_BL_BITS", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 REP_3_6
int Pathfinding::Ionic::Zlib::InternalConstants::_get_REP_3_6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_REP_3_6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "REP_3_6"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 REP_3_6
void Pathfinding::Ionic::Zlib::InternalConstants::_set_REP_3_6(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_REP_3_6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "REP_3_6", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 REPZ_3_10
int Pathfinding::Ionic::Zlib::InternalConstants::_get_REPZ_3_10() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_REPZ_3_10");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "REPZ_3_10"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 REPZ_3_10
void Pathfinding::Ionic::Zlib::InternalConstants::_set_REPZ_3_10(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_REPZ_3_10");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "REPZ_3_10", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 REPZ_11_138
int Pathfinding::Ionic::Zlib::InternalConstants::_get_REPZ_11_138() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_get_REPZ_11_138");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "InternalConstants", "REPZ_11_138"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 REPZ_11_138
void Pathfinding::Ionic::Zlib::InternalConstants::_set_REPZ_11_138(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::_set_REPZ_11_138");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "InternalConstants", "REPZ_11_138", value));
}
// Autogenerated method: Pathfinding.Ionic.Zlib.InternalConstants..cctor
void Pathfinding::Ionic::Zlib::InternalConstants::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::InternalConstants::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "InternalConstants", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.StaticTree
#include "Pathfinding/Ionic/Zlib/StaticTree.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Int16[] lengthAndLiteralsTreeCodes
::ArrayW<int16_t> Pathfinding::Ionic::Zlib::StaticTree::_get_lengthAndLiteralsTreeCodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_get_lengthAndLiteralsTreeCodes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int16_t>>("Pathfinding.Ionic.Zlib", "StaticTree", "lengthAndLiteralsTreeCodes"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int16[] lengthAndLiteralsTreeCodes
void Pathfinding::Ionic::Zlib::StaticTree::_set_lengthAndLiteralsTreeCodes(::ArrayW<int16_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_set_lengthAndLiteralsTreeCodes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "StaticTree", "lengthAndLiteralsTreeCodes", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int16[] distTreeCodes
::ArrayW<int16_t> Pathfinding::Ionic::Zlib::StaticTree::_get_distTreeCodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_get_distTreeCodes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int16_t>>("Pathfinding.Ionic.Zlib", "StaticTree", "distTreeCodes"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int16[] distTreeCodes
void Pathfinding::Ionic::Zlib::StaticTree::_set_distTreeCodes(::ArrayW<int16_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_set_distTreeCodes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "StaticTree", "distTreeCodes", value));
}
// Autogenerated static field getter
// Get static field: static readonly Pathfinding.Ionic.Zlib.StaticTree Literals
::Pathfinding::Ionic::Zlib::StaticTree* Pathfinding::Ionic::Zlib::StaticTree::_get_Literals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_get_Literals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::StaticTree*>("Pathfinding.Ionic.Zlib", "StaticTree", "Literals"));
}
// Autogenerated static field setter
// Set static field: static readonly Pathfinding.Ionic.Zlib.StaticTree Literals
void Pathfinding::Ionic::Zlib::StaticTree::_set_Literals(::Pathfinding::Ionic::Zlib::StaticTree* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_set_Literals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "StaticTree", "Literals", value));
}
// Autogenerated static field getter
// Get static field: static readonly Pathfinding.Ionic.Zlib.StaticTree Distances
::Pathfinding::Ionic::Zlib::StaticTree* Pathfinding::Ionic::Zlib::StaticTree::_get_Distances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_get_Distances");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::StaticTree*>("Pathfinding.Ionic.Zlib", "StaticTree", "Distances"));
}
// Autogenerated static field setter
// Set static field: static readonly Pathfinding.Ionic.Zlib.StaticTree Distances
void Pathfinding::Ionic::Zlib::StaticTree::_set_Distances(::Pathfinding::Ionic::Zlib::StaticTree* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_set_Distances");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "StaticTree", "Distances", value));
}
// Autogenerated static field getter
// Get static field: static readonly Pathfinding.Ionic.Zlib.StaticTree BitLengths
::Pathfinding::Ionic::Zlib::StaticTree* Pathfinding::Ionic::Zlib::StaticTree::_get_BitLengths() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_get_BitLengths");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::StaticTree*>("Pathfinding.Ionic.Zlib", "StaticTree", "BitLengths"));
}
// Autogenerated static field setter
// Set static field: static readonly Pathfinding.Ionic.Zlib.StaticTree BitLengths
void Pathfinding::Ionic::Zlib::StaticTree::_set_BitLengths(::Pathfinding::Ionic::Zlib::StaticTree* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::_set_BitLengths");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "StaticTree", "BitLengths", value));
}
// Autogenerated instance field getter
// Get instance field: System.Int16[] treeCodes
[[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& Pathfinding::Ionic::Zlib::StaticTree::dyn_treeCodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::dyn_treeCodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "treeCodes"))->offset;
  return *reinterpret_cast<::ArrayW<int16_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32[] extraBits
[[deprecated("Use field access instead!")]] ::ArrayW<int>& Pathfinding::Ionic::Zlib::StaticTree::dyn_extraBits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::dyn_extraBits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extraBits"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 extraBase
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::StaticTree::dyn_extraBase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::dyn_extraBase");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extraBase"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 elems
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::StaticTree::dyn_elems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::dyn_elems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elems"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 maxLength
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::StaticTree::dyn_maxLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::dyn_maxLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.StaticTree..cctor
void Pathfinding::Ionic::Zlib::StaticTree::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::StaticTree::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "StaticTree", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.Adler
#include "Pathfinding/Ionic/Zlib/Adler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.UInt32 BASE
uint Pathfinding::Ionic::Zlib::Adler::_get_BASE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Adler::_get_BASE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Pathfinding.Ionic.Zlib", "Adler", "BASE"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt32 BASE
void Pathfinding::Ionic::Zlib::Adler::_set_BASE(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Adler::_set_BASE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Adler", "BASE", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 NMAX
int Pathfinding::Ionic::Zlib::Adler::_get_NMAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Adler::_get_NMAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Pathfinding.Ionic.Zlib", "Adler", "NMAX"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 NMAX
void Pathfinding::Ionic::Zlib::Adler::_set_NMAX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Adler::_set_NMAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "Adler", "NMAX", value));
}
// Autogenerated method: Pathfinding.Ionic.Zlib.Adler..cctor
void Pathfinding::Ionic::Zlib::Adler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Adler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "Adler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.Adler.Adler32
uint Pathfinding::Ionic::Zlib::Adler::Adler32(uint adler, ::ArrayW<uint8_t> buf, int index, int len) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::Adler::Adler32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Zlib", "Adler", "Adler32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(adler), ::il2cpp_utils::ExtractType(buf), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(len)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, adler, buf, index, len);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.ZlibStreamFlavor
#include "Pathfinding/Ionic/Zlib/ZlibStreamFlavor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ZlibStreamFlavor ZLIB
::Pathfinding::Ionic::Zlib::ZlibStreamFlavor Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_get_ZLIB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_get_ZLIB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ZlibStreamFlavor>("Pathfinding.Ionic.Zlib", "ZlibStreamFlavor", "ZLIB"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ZlibStreamFlavor ZLIB
void Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_set_ZLIB(::Pathfinding::Ionic::Zlib::ZlibStreamFlavor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_set_ZLIB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ZlibStreamFlavor", "ZLIB", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ZlibStreamFlavor DEFLATE
::Pathfinding::Ionic::Zlib::ZlibStreamFlavor Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_get_DEFLATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_get_DEFLATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ZlibStreamFlavor>("Pathfinding.Ionic.Zlib", "ZlibStreamFlavor", "DEFLATE"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ZlibStreamFlavor DEFLATE
void Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_set_DEFLATE(::Pathfinding::Ionic::Zlib::ZlibStreamFlavor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_set_DEFLATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ZlibStreamFlavor", "DEFLATE", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ZlibStreamFlavor GZIP
::Pathfinding::Ionic::Zlib::ZlibStreamFlavor Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_get_GZIP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_get_GZIP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ZlibStreamFlavor>("Pathfinding.Ionic.Zlib", "ZlibStreamFlavor", "GZIP"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ZlibStreamFlavor GZIP
void Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_set_GZIP(::Pathfinding::Ionic::Zlib::ZlibStreamFlavor value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibStreamFlavor::_set_GZIP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ZlibStreamFlavor", "GZIP", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibStreamFlavor::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibStreamFlavor::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.ZlibBaseStream
#include "Pathfinding/Ionic/Zlib/ZlibBaseStream.hpp"
// Including type: Pathfinding.Ionic.Crc.CRC32
#include "Pathfinding/Ionic/Crc/CRC32.hpp"
// Including type: Pathfinding.Ionic.Zlib.ZlibCodec
#include "Pathfinding/Ionic/Zlib/ZlibCodec.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected internal Pathfinding.Ionic.Zlib.ZlibCodec _z
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibCodec*& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__z");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_z"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibCodec**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal Pathfinding.Ionic.Zlib.ZlibBaseStream/StreamMode _streamMode
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__streamMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__streamMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_streamMode"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal Pathfinding.Ionic.Zlib.FlushType _flushMode
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::FlushType& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__flushMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__flushMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flushMode"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::FlushType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal Pathfinding.Ionic.Zlib.ZlibStreamFlavor _flavor
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibStreamFlavor& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__flavor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__flavor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flavor"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::ZlibStreamFlavor*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal Pathfinding.Ionic.Zlib.CompressionMode _compressionMode
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionMode& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__compressionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__compressionMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_compressionMode"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal Pathfinding.Ionic.Zlib.CompressionLevel _level
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__level");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_level"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionLevel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.Boolean _leaveOpen
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__leaveOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__leaveOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leaveOpen"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.Byte[] _workingBuffer
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__workingBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__workingBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_workingBuffer"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.Int32 _bufferSize
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__bufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__bufferSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bufferSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.Byte[] _buf1
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__buf1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__buf1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buf1"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.IO.Stream _stream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__stream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__stream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal Pathfinding.Ionic.Zlib.CompressionStrategy Strategy
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn_Strategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn_Strategy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Strategy"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Crc.CRC32 crc
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Crc::CRC32*& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn_crc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn_crc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "crc"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Crc::CRC32**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.String _GzipFileName
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__GzipFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__GzipFileName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_GzipFileName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.String _GzipComment
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__GzipComment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__GzipComment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_GzipComment"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.DateTime _GzipMtime
[[deprecated("Use field access instead!")]] ::System::DateTime& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__GzipMtime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__GzipMtime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_GzipMtime"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.Int32 _gzipHeaderByteCount
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__gzipHeaderByteCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn__gzipHeaderByteCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gzipHeaderByteCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean nomoreinput
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn_nomoreinput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::dyn_nomoreinput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nomoreinput"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.get__wantCompress
bool Pathfinding::Ionic::Zlib::ZlibBaseStream::get__wantCompress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::get__wantCompress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get__wantCompress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.get_z
::Pathfinding::Ionic::Zlib::ZlibCodec* Pathfinding::Ionic::Zlib::ZlibBaseStream::get_z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::get_z");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_z", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Ionic::Zlib::ZlibCodec*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.get_workingBuffer
::ArrayW<uint8_t> Pathfinding::Ionic::Zlib::ZlibBaseStream::get_workingBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::get_workingBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_workingBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.finish
void Pathfinding::Ionic::Zlib::ZlibBaseStream::finish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::finish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.end
void Pathfinding::Ionic::Zlib::ZlibBaseStream::end() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::end");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "end", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.ReadZeroTerminatedString
::StringW Pathfinding::Ionic::Zlib::ZlibBaseStream::ReadZeroTerminatedString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::ReadZeroTerminatedString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadZeroTerminatedString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream._ReadAndValidateGzipHeader
int Pathfinding::Ionic::Zlib::ZlibBaseStream::_ReadAndValidateGzipHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::_ReadAndValidateGzipHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_ReadAndValidateGzipHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.Write
void Pathfinding::Ionic::Zlib::ZlibBaseStream::Write(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::Write");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.Close
void Pathfinding::Ionic::Zlib::ZlibBaseStream::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::Close");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.Flush
void Pathfinding::Ionic::Zlib::ZlibBaseStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::Flush");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.Seek
int64_t Pathfinding::Ionic::Zlib::ZlibBaseStream::Seek(int64_t offset, ::System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::Seek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.SetLength
void Pathfinding::Ionic::Zlib::ZlibBaseStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::SetLength");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.Read
int Pathfinding::Ionic::Zlib::ZlibBaseStream::Read(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 33));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.get_CanRead
bool Pathfinding::Ionic::Zlib::ZlibBaseStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.get_CanSeek
bool Pathfinding::Ionic::Zlib::ZlibBaseStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.get_CanWrite
bool Pathfinding::Ionic::Zlib::ZlibBaseStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.get_Length
int64_t Pathfinding::Ionic::Zlib::ZlibBaseStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::get_Length");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.get_Position
int64_t Pathfinding::Ionic::Zlib::ZlibBaseStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::get_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibBaseStream.set_Position
void Pathfinding::Ionic::Zlib::ZlibBaseStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::set_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.ZlibBaseStream/StreamMode
#include "Pathfinding/Ionic/Zlib/ZlibBaseStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ZlibBaseStream/StreamMode Writer
::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_get_Writer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_get_Writer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode>("Pathfinding.Ionic.Zlib", "ZlibBaseStream/StreamMode", "Writer"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ZlibBaseStream/StreamMode Writer
void Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_set_Writer(::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_set_Writer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ZlibBaseStream/StreamMode", "Writer", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ZlibBaseStream/StreamMode Reader
::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_get_Reader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_get_Reader");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode>("Pathfinding.Ionic.Zlib", "ZlibBaseStream/StreamMode", "Reader"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ZlibBaseStream/StreamMode Reader
void Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_set_Reader(::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_set_Reader");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ZlibBaseStream/StreamMode", "Reader", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Ionic.Zlib.ZlibBaseStream/StreamMode Undefined
::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode>("Pathfinding.Ionic.Zlib", "ZlibBaseStream/StreamMode", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Ionic.Zlib.ZlibBaseStream/StreamMode Undefined
void Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_set_Undefined(::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Zlib", "ZlibBaseStream/StreamMode", "Undefined", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibBaseStream::StreamMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Zlib.ZlibCodec
#include "Pathfinding/Ionic/Zlib/ZlibCodec.hpp"
// Including type: Pathfinding.Ionic.Zlib.DeflateManager
#include "Pathfinding/Ionic/Zlib/DeflateManager.hpp"
// Including type: Pathfinding.Ionic.Zlib.InflateManager
#include "Pathfinding/Ionic/Zlib/InflateManager.hpp"
// Including type: Pathfinding.Ionic.Zlib.FlushType
#include "Pathfinding/Ionic/Zlib/FlushType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte[] InputBuffer
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_InputBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_InputBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InputBuffer"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 NextIn
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_NextIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_NextIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextIn"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 AvailableBytesIn
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_AvailableBytesIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_AvailableBytesIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AvailableBytesIn"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 TotalBytesIn
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_TotalBytesIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_TotalBytesIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TotalBytesIn"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] OutputBuffer
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_OutputBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_OutputBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OutputBuffer"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 NextOut
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_NextOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_NextOut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextOut"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 AvailableBytesOut
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_AvailableBytesOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_AvailableBytesOut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AvailableBytesOut"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 TotalBytesOut
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_TotalBytesOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_TotalBytesOut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TotalBytesOut"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Message
[[deprecated("Use field access instead!")]] ::StringW& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_Message");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Message"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.DeflateManager dstate
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::DeflateManager*& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_dstate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_dstate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dstate"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::DeflateManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Ionic.Zlib.InflateManager istate
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::InflateManager*& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_istate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_istate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "istate"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::InflateManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.UInt32 _Adler32
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Zlib::ZlibCodec::dyn__Adler32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn__Adler32");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Adler32"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Ionic.Zlib.CompressionLevel CompressLevel
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_CompressLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_CompressLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CompressLevel"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionLevel*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 WindowBits
[[deprecated("Use field access instead!")]] int& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_WindowBits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_WindowBits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WindowBits"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Ionic.Zlib.CompressionStrategy Strategy
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& Pathfinding::Ionic::Zlib::ZlibCodec::dyn_Strategy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::dyn_Strategy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Strategy"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.InitializeInflate
int Pathfinding::Ionic::Zlib::ZlibCodec::InitializeInflate(bool expectRfc1950Header) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::InitializeInflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeInflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expectRfc1950Header)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, expectRfc1950Header);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.InitializeInflate
int Pathfinding::Ionic::Zlib::ZlibCodec::InitializeInflate(int windowBits, bool expectRfc1950Header) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::InitializeInflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeInflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(windowBits), ::il2cpp_utils::ExtractType(expectRfc1950Header)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, windowBits, expectRfc1950Header);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.Inflate
int Pathfinding::Ionic::Zlib::ZlibCodec::Inflate(::Pathfinding::Ionic::Zlib::FlushType flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::Inflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Inflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flush)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, flush);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.EndInflate
int Pathfinding::Ionic::Zlib::ZlibCodec::EndInflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::EndInflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.InitializeDeflate
int Pathfinding::Ionic::Zlib::ZlibCodec::InitializeDeflate(::Pathfinding::Ionic::Zlib::CompressionLevel level, bool wantRfc1950Header) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::InitializeDeflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeDeflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(wantRfc1950Header)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, level, wantRfc1950Header);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec._InternalInitializeDeflate
int Pathfinding::Ionic::Zlib::ZlibCodec::_InternalInitializeDeflate(bool wantRfc1950Header) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::_InternalInitializeDeflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InternalInitializeDeflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(wantRfc1950Header)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, wantRfc1950Header);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.Deflate
int Pathfinding::Ionic::Zlib::ZlibCodec::Deflate(::Pathfinding::Ionic::Zlib::FlushType flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::Deflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flush)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, flush);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.EndDeflate
int Pathfinding::Ionic::Zlib::ZlibCodec::EndDeflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::EndDeflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndDeflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.ResetDeflate
void Pathfinding::Ionic::Zlib::ZlibCodec::ResetDeflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::ResetDeflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetDeflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.flush_pending
void Pathfinding::Ionic::Zlib::ZlibCodec::flush_pending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::flush_pending");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "flush_pending", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Zlib.ZlibCodec.read_buf
int Pathfinding::Ionic::Zlib::ZlibCodec::read_buf(::ArrayW<uint8_t> buf, int start, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::ZlibCodec::read_buf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "read_buf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buf, start, size);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Crc.CRC32
#include "Pathfinding/Ionic/Crc/CRC32.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.UInt32 dwPolynomial
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Crc::CRC32::dyn_dwPolynomial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::dyn_dwPolynomial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dwPolynomial"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _TotalBytesRead
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Crc::CRC32::dyn__TotalBytesRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::dyn__TotalBytesRead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_TotalBytesRead"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean reverseBits
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Crc::CRC32::dyn_reverseBits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::dyn_reverseBits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reverseBits"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32[] crc32Table
[[deprecated("Use field access instead!")]] ::ArrayW<uint>& Pathfinding::Ionic::Crc::CRC32::dyn_crc32Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::dyn_crc32Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "crc32Table"))->offset;
  return *reinterpret_cast<::ArrayW<uint>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _register
[[deprecated("Use field access instead!")]] uint& Pathfinding::Ionic::Crc::CRC32::dyn__register() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::dyn__register");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_register"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.get_TotalBytesRead
int64_t Pathfinding::Ionic::Crc::CRC32::get_TotalBytesRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::get_TotalBytesRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TotalBytesRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.get_Crc32Result
int Pathfinding::Ionic::Crc::CRC32::get_Crc32Result() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::get_Crc32Result");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Crc32Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.GetCrc32
int Pathfinding::Ionic::Crc::CRC32::GetCrc32(::System::IO::Stream* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::GetCrc32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCrc32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, input);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.GetCrc32AndCopy
int Pathfinding::Ionic::Crc::CRC32::GetCrc32AndCopy(::System::IO::Stream* input, ::System::IO::Stream* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::GetCrc32AndCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCrc32AndCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(output)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, input, output);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.ComputeCrc32
int Pathfinding::Ionic::Crc::CRC32::ComputeCrc32(int W, uint8_t B) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::ComputeCrc32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeCrc32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(W), ::il2cpp_utils::ExtractType(B)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, W, B);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32._InternalComputeCrc32
int Pathfinding::Ionic::Crc::CRC32::_InternalComputeCrc32(uint W, uint8_t B) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::_InternalComputeCrc32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_InternalComputeCrc32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(W), ::il2cpp_utils::ExtractType(B)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, W, B);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.SlurpBlock
void Pathfinding::Ionic::Crc::CRC32::SlurpBlock(::ArrayW<uint8_t> block, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::SlurpBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SlurpBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(block), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, block, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.ReverseBits
uint Pathfinding::Ionic::Crc::CRC32::ReverseBits(uint data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::ReverseBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Crc", "CRC32", "ReverseBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.ReverseBits
uint8_t Pathfinding::Ionic::Crc::CRC32::ReverseBits(uint8_t data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::ReverseBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Crc", "CRC32", "ReverseBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.GenerateLookupTable
void Pathfinding::Ionic::Crc::CRC32::GenerateLookupTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::GenerateLookupTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateLookupTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.gf2_matrix_times
uint Pathfinding::Ionic::Crc::CRC32::gf2_matrix_times(::ArrayW<uint> matrix, uint vec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::gf2_matrix_times");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "gf2_matrix_times", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(matrix), ::il2cpp_utils::ExtractType(vec)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, matrix, vec);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.gf2_matrix_square
void Pathfinding::Ionic::Crc::CRC32::gf2_matrix_square(::ArrayW<uint> square, ::ArrayW<uint> mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::gf2_matrix_square");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "gf2_matrix_square", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(square), ::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, square, mat);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CRC32.Combine
void Pathfinding::Ionic::Crc::CRC32::Combine(int crc, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CRC32::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(crc), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, crc, length);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Ionic.Crc.CrcCalculatorStream
#include "Pathfinding/Ionic/Crc/CrcCalculatorStream.hpp"
// Including type: Pathfinding.Ionic.Crc.CRC32
#include "Pathfinding/Ionic/Crc/CRC32.hpp"
// Including type: System.IO.SeekOrigin
#include "System/IO/SeekOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int64 UnsetLengthLimit
int64_t Pathfinding::Ionic::Crc::CrcCalculatorStream::_get_UnsetLengthLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::_get_UnsetLengthLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("Pathfinding.Ionic.Crc", "CrcCalculatorStream", "UnsetLengthLimit"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int64 UnsetLengthLimit
void Pathfinding::Ionic::Crc::CrcCalculatorStream::_set_UnsetLengthLimit(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::_set_UnsetLengthLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Ionic.Crc", "CrcCalculatorStream", "UnsetLengthLimit", value));
}
// Autogenerated instance field getter
// Get instance field: System.IO.Stream _innerStream
[[deprecated("Use field access instead!")]] ::System::IO::Stream*& Pathfinding::Ionic::Crc::CrcCalculatorStream::dyn__innerStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::dyn__innerStream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_innerStream"))->offset;
  return *reinterpret_cast<::System::IO::Stream**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Ionic.Crc.CRC32 _Crc32
[[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Crc::CRC32*& Pathfinding::Ionic::Crc::CrcCalculatorStream::dyn__Crc32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::dyn__Crc32");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Crc32"))->offset;
  return *reinterpret_cast<::Pathfinding::Ionic::Crc::CRC32**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _lengthLimit
[[deprecated("Use field access instead!")]] int64_t& Pathfinding::Ionic::Crc::CrcCalculatorStream::dyn__lengthLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::dyn__lengthLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lengthLimit"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _leaveOpen
[[deprecated("Use field access instead!")]] bool& Pathfinding::Ionic::Crc::CrcCalculatorStream::dyn__leaveOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::dyn__leaveOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leaveOpen"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream..cctor
void Pathfinding::Ionic::Crc::CrcCalculatorStream::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Ionic.Crc", "CrcCalculatorStream", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.System.IDisposable.Dispose
void Pathfinding::Ionic::Crc::CrcCalculatorStream::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Ionic::Crc::CrcCalculatorStream*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.get_TotalBytesSlurped
int64_t Pathfinding::Ionic::Crc::CrcCalculatorStream::get_TotalBytesSlurped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::get_TotalBytesSlurped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TotalBytesSlurped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.get_Crc
int Pathfinding::Ionic::Crc::CrcCalculatorStream::get_Crc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::get_Crc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Crc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.Read
int Pathfinding::Ionic::Crc::CrcCalculatorStream::Read(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::Read");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 33));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.Write
void Pathfinding::Ionic::Crc::CrcCalculatorStream::Write(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::Write");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 36));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.get_CanRead
bool Pathfinding::Ionic::Crc::CrcCalculatorStream::get_CanRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::get_CanRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.get_CanSeek
bool Pathfinding::Ionic::Crc::CrcCalculatorStream::get_CanSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::get_CanSeek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.get_CanWrite
bool Pathfinding::Ionic::Crc::CrcCalculatorStream::get_CanWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::get_CanWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.Flush
void Pathfinding::Ionic::Crc::CrcCalculatorStream::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::Flush");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.get_Length
int64_t Pathfinding::Ionic::Crc::CrcCalculatorStream::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::get_Length");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.get_Position
int64_t Pathfinding::Ionic::Crc::CrcCalculatorStream::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::get_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.set_Position
void Pathfinding::Ionic::Crc::CrcCalculatorStream::set_Position(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::set_Position");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.Seek
int64_t Pathfinding::Ionic::Crc::CrcCalculatorStream::Seek(int64_t offset, ::System::IO::SeekOrigin origin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::Seek");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method, offset, origin);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.SetLength
void Pathfinding::Ionic::Crc::CrcCalculatorStream::SetLength(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::SetLength");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Ionic.Crc.CrcCalculatorStream.Close
void Pathfinding::Ionic::Crc::CrcCalculatorStream::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Crc::CrcCalculatorStream::Close");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::IO::Stream*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.P2T
#include "Pathfinding/Poly2Tri/P2T.hpp"
// Including type: Pathfinding.Poly2Tri.Polygon
#include "Pathfinding/Poly2Tri/Polygon.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationContext
#include "Pathfinding/Poly2Tri/TriangulationContext.hpp"
// Including type: Pathfinding.Poly2Tri.Triangulatable
#include "Pathfinding/Poly2Tri/Triangulatable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Pathfinding.Poly2Tri.TriangulationAlgorithm _defaultAlgorithm
::Pathfinding::Poly2Tri::TriangulationAlgorithm Pathfinding::Poly2Tri::P2T::_get__defaultAlgorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::P2T::_get__defaultAlgorithm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Poly2Tri::TriangulationAlgorithm>("Pathfinding.Poly2Tri", "P2T", "_defaultAlgorithm"));
}
// Autogenerated static field setter
// Set static field: static private Pathfinding.Poly2Tri.TriangulationAlgorithm _defaultAlgorithm
void Pathfinding::Poly2Tri::P2T::_set__defaultAlgorithm(::Pathfinding::Poly2Tri::TriangulationAlgorithm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::P2T::_set__defaultAlgorithm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "P2T", "_defaultAlgorithm", value));
}
// Autogenerated method: Pathfinding.Poly2Tri.P2T.Triangulate
void Pathfinding::Poly2Tri::P2T::Triangulate(::Pathfinding::Poly2Tri::Polygon* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::P2T::Triangulate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "P2T", "Triangulate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.P2T.CreateContext
::Pathfinding::Poly2Tri::TriangulationContext* Pathfinding::Poly2Tri::P2T::CreateContext(::Pathfinding::Poly2Tri::TriangulationAlgorithm algorithm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::P2T::CreateContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "P2T", "CreateContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(algorithm)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, algorithm);
}
// Autogenerated method: Pathfinding.Poly2Tri.P2T.Triangulate
void Pathfinding::Poly2Tri::P2T::Triangulate(::Pathfinding::Poly2Tri::TriangulationAlgorithm algorithm, ::Pathfinding::Poly2Tri::Triangulatable* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::P2T::Triangulate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "P2T", "Triangulate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(algorithm), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, algorithm, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.P2T.Triangulate
void Pathfinding::Poly2Tri::P2T::Triangulate(::Pathfinding::Poly2Tri::TriangulationContext* tcx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::P2T::Triangulate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "P2T", "Triangulate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.Polygon
#include "Pathfinding/Poly2Tri/Polygon.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
// Including type: Pathfinding.Poly2Tri.DelaunayTriangle
#include "Pathfinding/Poly2Tri/DelaunayTriangle.hpp"
// Including type: Pathfinding.Poly2Tri.PolygonPoint
#include "Pathfinding/Poly2Tri/PolygonPoint.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationMode
#include "Pathfinding/Poly2Tri/TriangulationMode.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationContext
#include "Pathfinding/Poly2Tri/TriangulationContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.List`1<Pathfinding.Poly2Tri.TriangulationPoint> _points
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::TriangulationPoint*>*& Pathfinding::Poly2Tri::Polygon::dyn__points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::dyn__points");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_points"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::TriangulationPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.List`1<Pathfinding.Poly2Tri.TriangulationPoint> _steinerPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::TriangulationPoint*>*& Pathfinding::Poly2Tri::Polygon::dyn__steinerPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::dyn__steinerPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_steinerPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::TriangulationPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.List`1<Pathfinding.Poly2Tri.Polygon> _holes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::Polygon*>*& Pathfinding::Poly2Tri::Polygon::dyn__holes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::dyn__holes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_holes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::Polygon*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Collections.Generic.List`1<Pathfinding.Poly2Tri.DelaunayTriangle> _triangles
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>*& Pathfinding::Poly2Tri::Polygon::dyn__triangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::dyn__triangles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_triangles"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected Pathfinding.Poly2Tri.PolygonPoint _last
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::PolygonPoint*& Pathfinding::Poly2Tri::Polygon::dyn__last() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::dyn__last");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_last"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::PolygonPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.get_TriangulationMode
::Pathfinding::Poly2Tri::TriangulationMode Pathfinding::Poly2Tri::Polygon::get_TriangulationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::get_TriangulationMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Polygon*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationMode, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.AddHole
void Pathfinding::Poly2Tri::Polygon::AddHole(::Pathfinding::Poly2Tri::Polygon* poly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::AddHole");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddHole", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poly)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, poly);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.AddPoints
void Pathfinding::Poly2Tri::Polygon::AddPoints(::System::Collections::Generic::IEnumerable_1<::Pathfinding::Poly2Tri::PolygonPoint*>* list) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::AddPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, list);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.get_Points
::System::Collections::Generic::IList_1<::Pathfinding::Poly2Tri::TriangulationPoint*>* Pathfinding::Poly2Tri::Polygon::get_Points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::get_Points");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Polygon*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<::Pathfinding::Poly2Tri::TriangulationPoint*>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.get_Triangles
::System::Collections::Generic::IList_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>* Pathfinding::Poly2Tri::Polygon::get_Triangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::get_Triangles");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Polygon*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.get_Holes
::System::Collections::Generic::IList_1<::Pathfinding::Poly2Tri::Polygon*>* Pathfinding::Poly2Tri::Polygon::get_Holes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::get_Holes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Holes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<::Pathfinding::Poly2Tri::Polygon*>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.AddTriangle
void Pathfinding::Poly2Tri::Polygon::AddTriangle(::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::AddTriangle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Polygon*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.AddTriangles
void Pathfinding::Poly2Tri::Polygon::AddTriangles(::System::Collections::Generic::IEnumerable_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>* list) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::AddTriangles");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Polygon*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, list);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.ClearTriangles
void Pathfinding::Poly2Tri::Polygon::ClearTriangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::ClearTriangles");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Polygon*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.Polygon.Prepare
void Pathfinding::Poly2Tri::Polygon::Prepare(::Pathfinding::Poly2Tri::TriangulationContext* tcx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Polygon::Prepare");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Polygon*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tcx);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.PolygonPoint
#include "Pathfinding/Poly2Tri/PolygonPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.PolygonPoint <Next>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::PolygonPoint*& Pathfinding::Poly2Tri::PolygonPoint::dyn_$Next$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PolygonPoint::dyn_$Next$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Next>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::PolygonPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.PolygonPoint <Previous>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::PolygonPoint*& Pathfinding::Poly2Tri::PolygonPoint::dyn_$Previous$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PolygonPoint::dyn_$Previous$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Previous>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::PolygonPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.PolygonPoint.get_Next
::Pathfinding::Poly2Tri::PolygonPoint* Pathfinding::Poly2Tri::PolygonPoint::get_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PolygonPoint::get_Next");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::PolygonPoint*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.PolygonPoint.set_Next
void Pathfinding::Poly2Tri::PolygonPoint::set_Next(::Pathfinding::Poly2Tri::PolygonPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PolygonPoint::set_Next");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.PolygonPoint.set_Previous
void Pathfinding::Poly2Tri::PolygonPoint::set_Previous(::Pathfinding::Poly2Tri::PolygonPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PolygonPoint::set_Previous");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Previous", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Poly2Tri.DelaunayTriangle
#include "Pathfinding/Poly2Tri/DelaunayTriangle.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.FixedArray3`1<Pathfinding.Poly2Tri.TriangulationPoint> Points
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::FixedArray3_1<::Pathfinding::Poly2Tri::TriangulationPoint*>& Pathfinding::Poly2Tri::DelaunayTriangle::dyn_Points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::dyn_Points");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Points"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::FixedArray3_1<::Pathfinding::Poly2Tri::TriangulationPoint*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.FixedArray3`1<Pathfinding.Poly2Tri.DelaunayTriangle> Neighbors
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::FixedArray3_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>& Pathfinding::Poly2Tri::DelaunayTriangle::dyn_Neighbors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::dyn_Neighbors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Neighbors"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::FixedArray3_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.FixedBitArray3 EdgeIsConstrained
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::FixedBitArray3& Pathfinding::Poly2Tri::DelaunayTriangle::dyn_EdgeIsConstrained() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::dyn_EdgeIsConstrained");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EdgeIsConstrained"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::FixedBitArray3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.FixedBitArray3 EdgeIsDelaunay
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::FixedBitArray3& Pathfinding::Poly2Tri::DelaunayTriangle::dyn_EdgeIsDelaunay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::dyn_EdgeIsDelaunay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EdgeIsDelaunay"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::FixedBitArray3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsInterior>k__BackingField
[[deprecated("Use field access instead!")]] bool& Pathfinding::Poly2Tri::DelaunayTriangle::dyn_$IsInterior$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::dyn_$IsInterior$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsInterior>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.get_IsInterior
bool Pathfinding::Poly2Tri::DelaunayTriangle::get_IsInterior() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::get_IsInterior");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInterior", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.set_IsInterior
void Pathfinding::Poly2Tri::DelaunayTriangle::set_IsInterior(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::set_IsInterior");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsInterior", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.IndexOf
int Pathfinding::Poly2Tri::DelaunayTriangle::IndexOf(::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::IndexOf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.IndexCCWFrom
int Pathfinding::Poly2Tri::DelaunayTriangle::IndexCCWFrom(::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::IndexCCWFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IndexCCWFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.Contains
bool Pathfinding::Poly2Tri::DelaunayTriangle::Contains(::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.MarkNeighbor
void Pathfinding::Poly2Tri::DelaunayTriangle::MarkNeighbor(::Pathfinding::Poly2Tri::TriangulationPoint* p1, ::Pathfinding::Poly2Tri::TriangulationPoint* p2, ::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::MarkNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p1, p2, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.MarkNeighbor
void Pathfinding::Poly2Tri::DelaunayTriangle::MarkNeighbor(::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::MarkNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.OppositePoint
::Pathfinding::Poly2Tri::TriangulationPoint* Pathfinding::Poly2Tri::DelaunayTriangle::OppositePoint(::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::OppositePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OppositePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationPoint*, false>(this, ___internal__method, t, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.NeighborCWFrom
::Pathfinding::Poly2Tri::DelaunayTriangle* Pathfinding::Poly2Tri::DelaunayTriangle::NeighborCWFrom(::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::NeighborCWFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NeighborCWFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::DelaunayTriangle*, false>(this, ___internal__method, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.NeighborCCWFrom
::Pathfinding::Poly2Tri::DelaunayTriangle* Pathfinding::Poly2Tri::DelaunayTriangle::NeighborCCWFrom(::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::NeighborCCWFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NeighborCCWFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::DelaunayTriangle*, false>(this, ___internal__method, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.NeighborAcrossFrom
::Pathfinding::Poly2Tri::DelaunayTriangle* Pathfinding::Poly2Tri::DelaunayTriangle::NeighborAcrossFrom(::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::NeighborAcrossFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NeighborAcrossFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::DelaunayTriangle*, false>(this, ___internal__method, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.PointCCWFrom
::Pathfinding::Poly2Tri::TriangulationPoint* Pathfinding::Poly2Tri::DelaunayTriangle::PointCCWFrom(::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::PointCCWFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PointCCWFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationPoint*, false>(this, ___internal__method, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.PointCWFrom
::Pathfinding::Poly2Tri::TriangulationPoint* Pathfinding::Poly2Tri::DelaunayTriangle::PointCWFrom(::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::PointCWFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PointCWFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationPoint*, false>(this, ___internal__method, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.RotateCW
void Pathfinding::Poly2Tri::DelaunayTriangle::RotateCW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::RotateCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.Legalize
void Pathfinding::Poly2Tri::DelaunayTriangle::Legalize(::Pathfinding::Poly2Tri::TriangulationPoint* oPoint, ::Pathfinding::Poly2Tri::TriangulationPoint* nPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::Legalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Legalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oPoint), ::il2cpp_utils::ExtractType(nPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, oPoint, nPoint);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.MarkConstrainedEdge
void Pathfinding::Poly2Tri::DelaunayTriangle::MarkConstrainedEdge(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::MarkConstrainedEdge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkConstrainedEdge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.MarkConstrainedEdge
void Pathfinding::Poly2Tri::DelaunayTriangle::MarkConstrainedEdge(::Pathfinding::Poly2Tri::TriangulationPoint* p, ::Pathfinding::Poly2Tri::TriangulationPoint* q) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::MarkConstrainedEdge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkConstrainedEdge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(q)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p, q);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.EdgeIndex
int Pathfinding::Poly2Tri::DelaunayTriangle::EdgeIndex(::Pathfinding::Poly2Tri::TriangulationPoint* p1, ::Pathfinding::Poly2Tri::TriangulationPoint* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::EdgeIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EdgeIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.GetConstrainedEdgeCCW
bool Pathfinding::Poly2Tri::DelaunayTriangle::GetConstrainedEdgeCCW(::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::GetConstrainedEdgeCCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstrainedEdgeCCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.GetConstrainedEdgeCW
bool Pathfinding::Poly2Tri::DelaunayTriangle::GetConstrainedEdgeCW(::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::GetConstrainedEdgeCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstrainedEdgeCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.SetConstrainedEdgeCCW
void Pathfinding::Poly2Tri::DelaunayTriangle::SetConstrainedEdgeCCW(::Pathfinding::Poly2Tri::TriangulationPoint* p, bool ce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::SetConstrainedEdgeCCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetConstrainedEdgeCCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(ce)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p, ce);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.SetConstrainedEdgeCW
void Pathfinding::Poly2Tri::DelaunayTriangle::SetConstrainedEdgeCW(::Pathfinding::Poly2Tri::TriangulationPoint* p, bool ce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::SetConstrainedEdgeCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetConstrainedEdgeCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(ce)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p, ce);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.GetDelaunayEdgeCCW
bool Pathfinding::Poly2Tri::DelaunayTriangle::GetDelaunayEdgeCCW(::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::GetDelaunayEdgeCCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDelaunayEdgeCCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.GetDelaunayEdgeCW
bool Pathfinding::Poly2Tri::DelaunayTriangle::GetDelaunayEdgeCW(::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::GetDelaunayEdgeCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDelaunayEdgeCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.SetDelaunayEdgeCCW
void Pathfinding::Poly2Tri::DelaunayTriangle::SetDelaunayEdgeCCW(::Pathfinding::Poly2Tri::TriangulationPoint* p, bool ce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::SetDelaunayEdgeCCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDelaunayEdgeCCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(ce)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p, ce);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.SetDelaunayEdgeCW
void Pathfinding::Poly2Tri::DelaunayTriangle::SetDelaunayEdgeCW(::Pathfinding::Poly2Tri::TriangulationPoint* p, bool ce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::SetDelaunayEdgeCW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDelaunayEdgeCW", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(ce)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p, ce);
}
// Autogenerated method: Pathfinding.Poly2Tri.DelaunayTriangle.ToString
::StringW Pathfinding::Poly2Tri::DelaunayTriangle::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DelaunayTriangle::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Poly2Tri.AdvancingFront
#include "Pathfinding/Poly2Tri/AdvancingFront.hpp"
// Including type: Pathfinding.Poly2Tri.AdvancingFrontNode
#include "Pathfinding/Poly2Tri/AdvancingFrontNode.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.AdvancingFrontNode Head
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::AdvancingFront::dyn_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::dyn_Head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Head"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.AdvancingFrontNode Tail
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::AdvancingFront::dyn_Tail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::dyn_Tail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Tail"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected Pathfinding.Poly2Tri.AdvancingFrontNode Search
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::AdvancingFront::dyn_Search() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::dyn_Search");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Search"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFront.AddNode
void Pathfinding::Poly2Tri::AdvancingFront::AddNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::AddNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFront.RemoveNode
void Pathfinding::Poly2Tri::AdvancingFront::RemoveNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::RemoveNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFront.FindSearchNode
::Pathfinding::Poly2Tri::AdvancingFrontNode* Pathfinding::Poly2Tri::AdvancingFront::FindSearchNode(double x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::FindSearchNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindSearchNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::AdvancingFrontNode*, false>(this, ___internal__method, x);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFront.LocateNode
::Pathfinding::Poly2Tri::AdvancingFrontNode* Pathfinding::Poly2Tri::AdvancingFront::LocateNode(::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::LocateNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocateNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::AdvancingFrontNode*, false>(this, ___internal__method, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFront.LocateNode
::Pathfinding::Poly2Tri::AdvancingFrontNode* Pathfinding::Poly2Tri::AdvancingFront::LocateNode(double x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::LocateNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocateNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::AdvancingFrontNode*, false>(this, ___internal__method, x);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFront.LocatePoint
::Pathfinding::Poly2Tri::AdvancingFrontNode* Pathfinding::Poly2Tri::AdvancingFront::LocatePoint(::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::LocatePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocatePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::AdvancingFrontNode*, false>(this, ___internal__method, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFront.ToString
::StringW Pathfinding::Poly2Tri::AdvancingFront::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFront::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.AdvancingFrontNode
#include "Pathfinding/Poly2Tri/AdvancingFrontNode.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
// Including type: Pathfinding.Poly2Tri.DelaunayTriangle
#include "Pathfinding/Poly2Tri/DelaunayTriangle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.AdvancingFrontNode Next
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.AdvancingFrontNode Prev
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Prev() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Prev");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Prev"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double Value
[[deprecated("Use field access instead!")]] double& Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Value"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.TriangulationPoint Point
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Point() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Point");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Point"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.DelaunayTriangle Triangle
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DelaunayTriangle*& Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Triangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFrontNode::dyn_Triangle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Triangle"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::DelaunayTriangle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFrontNode.get_HasNext
bool Pathfinding::Poly2Tri::AdvancingFrontNode::get_HasNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFrontNode::get_HasNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.AdvancingFrontNode.get_HasPrev
bool Pathfinding::Poly2Tri::AdvancingFrontNode::get_HasPrev() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::AdvancingFrontNode::get_HasPrev");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasPrev", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.DTSweep
#include "Pathfinding/Poly2Tri/DTSweep.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepContext
#include "Pathfinding/Poly2Tri/DTSweepContext.hpp"
// Including type: Pathfinding.Poly2Tri.AdvancingFrontNode
#include "Pathfinding/Poly2Tri/AdvancingFrontNode.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepConstraint
#include "Pathfinding/Poly2Tri/DTSweepConstraint.hpp"
// Including type: Pathfinding.Poly2Tri.DelaunayTriangle
#include "Pathfinding/Poly2Tri/DelaunayTriangle.hpp"
// Including type: Pathfinding.Poly2Tri.Orientation
#include "Pathfinding/Poly2Tri/Orientation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.Triangulate
void Pathfinding::Poly2Tri::DTSweep::Triangulate(::Pathfinding::Poly2Tri::DTSweepContext* tcx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::Triangulate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "Triangulate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.Sweep
void Pathfinding::Poly2Tri::DTSweep::Sweep(::Pathfinding::Poly2Tri::DTSweepContext* tcx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::Sweep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "Sweep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FinalizationConvexHull
void Pathfinding::Poly2Tri::DTSweep::FinalizationConvexHull(::Pathfinding::Poly2Tri::DTSweepContext* tcx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FinalizationConvexHull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FinalizationConvexHull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.TurnAdvancingFrontConvex
void Pathfinding::Poly2Tri::DTSweep::TurnAdvancingFrontConvex(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* b, ::Pathfinding::Poly2Tri::AdvancingFrontNode* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::TurnAdvancingFrontConvex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "TurnAdvancingFrontConvex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, b, c);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FinalizationPolygon
void Pathfinding::Poly2Tri::DTSweep::FinalizationPolygon(::Pathfinding::Poly2Tri::DTSweepContext* tcx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FinalizationPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FinalizationPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.PointEvent
::Pathfinding::Poly2Tri::AdvancingFrontNode* Pathfinding::Poly2Tri::DTSweep::PointEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::PointEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "PointEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::AdvancingFrontNode*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.NewFrontTriangle
::Pathfinding::Poly2Tri::AdvancingFrontNode* Pathfinding::Poly2Tri::DTSweep::NewFrontTriangle(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* point, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::NewFrontTriangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "NewFrontTriangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::AdvancingFrontNode*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, point, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.EdgeEvent
void Pathfinding::Poly2Tri::DTSweep::EdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::EdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "EdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillRightConcaveEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillRightConcaveEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillRightConcaveEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillRightConcaveEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillRightConvexEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillRightConvexEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillRightConvexEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillRightConvexEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillRightBelowEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillRightBelowEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillRightBelowEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillRightBelowEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillRightAboveEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillRightAboveEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillRightAboveEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillRightAboveEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillLeftConvexEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillLeftConvexEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillLeftConvexEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillLeftConvexEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillLeftConcaveEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillLeftConcaveEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillLeftConcaveEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillLeftConcaveEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillLeftBelowEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillLeftBelowEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillLeftBelowEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillLeftBelowEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillLeftAboveEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FillLeftAboveEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillLeftAboveEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillLeftAboveEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, edge, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.IsEdgeSideOfTriangle
bool Pathfinding::Poly2Tri::DTSweep::IsEdgeSideOfTriangle(::Pathfinding::Poly2Tri::DelaunayTriangle* triangle, ::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::IsEdgeSideOfTriangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "IsEdgeSideOfTriangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(triangle), ::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(eq)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, triangle, ep, eq);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.EdgeEvent
void Pathfinding::Poly2Tri::DTSweep::EdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq, ::Pathfinding::Poly2Tri::DelaunayTriangle* triangle, ::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::EdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "EdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(eq), ::il2cpp_utils::ExtractType(triangle), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, ep, eq, triangle, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FlipEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FlipEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq, ::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FlipEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FlipEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(eq), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, ep, eq, t, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.NextFlipPoint
::Pathfinding::Poly2Tri::TriangulationPoint* Pathfinding::Poly2Tri::DTSweep::NextFlipPoint(::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq, ::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ::Pathfinding::Poly2Tri::TriangulationPoint* op) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::NextFlipPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "NextFlipPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(eq), ::il2cpp_utils::ExtractType(ot), ::il2cpp_utils::ExtractType(op)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationPoint*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ep, eq, ot, op);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.NextFlipTriangle
::Pathfinding::Poly2Tri::DelaunayTriangle* Pathfinding::Poly2Tri::DTSweep::NextFlipTriangle(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::Orientation o, ::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ::Pathfinding::Poly2Tri::TriangulationPoint* p, ::Pathfinding::Poly2Tri::TriangulationPoint* op) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::NextFlipTriangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "NextFlipTriangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(o), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(ot), ::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(op)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::DelaunayTriangle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, o, t, ot, p, op);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FlipScanEdgeEvent
void Pathfinding::Poly2Tri::DTSweep::FlipScanEdgeEvent(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::TriangulationPoint* ep, ::Pathfinding::Poly2Tri::TriangulationPoint* eq, ::Pathfinding::Poly2Tri::DelaunayTriangle* flipTriangle, ::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::TriangulationPoint* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FlipScanEdgeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FlipScanEdgeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(eq), ::il2cpp_utils::ExtractType(flipTriangle), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, ep, eq, flipTriangle, t, p);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillAdvancingFront
void Pathfinding::Poly2Tri::DTSweep::FillAdvancingFront(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* n) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillAdvancingFront");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillAdvancingFront", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(n)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, n);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillBasin
void Pathfinding::Poly2Tri::DTSweep::FillBasin(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillBasin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillBasin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.FillBasinReq
void Pathfinding::Poly2Tri::DTSweep::FillBasinReq(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::FillBasinReq");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "FillBasinReq", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.IsShallow
bool Pathfinding::Poly2Tri::DTSweep::IsShallow(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::IsShallow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "IsShallow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.HoleAngle
double Pathfinding::Poly2Tri::DTSweep::HoleAngle(::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::HoleAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "HoleAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.BasinAngle
double Pathfinding::Poly2Tri::DTSweep::BasinAngle(::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::BasinAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "BasinAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.Fill
void Pathfinding::Poly2Tri::DTSweep::Fill(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::Fill");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "Fill", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.Legalize
bool Pathfinding::Poly2Tri::DTSweep::Legalize(::Pathfinding::Poly2Tri::DTSweepContext* tcx, ::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::Legalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "Legalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tcx), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tcx, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweep.RotateTrianglePair
void Pathfinding::Poly2Tri::DTSweep::RotateTrianglePair(::Pathfinding::Poly2Tri::DelaunayTriangle* t, ::Pathfinding::Poly2Tri::TriangulationPoint* p, ::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ::Pathfinding::Poly2Tri::TriangulationPoint* op) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweep::RotateTrianglePair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "DTSweep", "RotateTrianglePair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(ot), ::il2cpp_utils::ExtractType(op)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, p, ot, op);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.DTSweepBasin
#include "Pathfinding/Poly2Tri/DTSweepBasin.hpp"
// Including type: Pathfinding.Poly2Tri.AdvancingFrontNode
#include "Pathfinding/Poly2Tri/AdvancingFrontNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.AdvancingFrontNode leftNode
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::DTSweepBasin::dyn_leftNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepBasin::dyn_leftNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftNode"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.AdvancingFrontNode bottomNode
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::DTSweepBasin::dyn_bottomNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepBasin::dyn_bottomNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bottomNode"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.AdvancingFrontNode rightNode
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::DTSweepBasin::dyn_rightNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepBasin::dyn_rightNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightNode"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double width
[[deprecated("Use field access instead!")]] double& Pathfinding::Poly2Tri::DTSweepBasin::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepBasin::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean leftHighest
[[deprecated("Use field access instead!")]] bool& Pathfinding::Poly2Tri::DTSweepBasin::dyn_leftHighest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepBasin::dyn_leftHighest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHighest"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.DTSweepConstraint
#include "Pathfinding/Poly2Tri/DTSweepConstraint.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.DTSweepContext
#include "Pathfinding/Poly2Tri/DTSweepContext.hpp"
// Including type: Pathfinding.Poly2Tri.AdvancingFront
#include "Pathfinding/Poly2Tri/AdvancingFront.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepBasin
#include "Pathfinding/Poly2Tri/DTSweepBasin.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepEdgeEvent
#include "Pathfinding/Poly2Tri/DTSweepEdgeEvent.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepPointComparator
#include "Pathfinding/Poly2Tri/DTSweepPointComparator.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
// Including type: Pathfinding.Poly2Tri.DelaunayTriangle
#include "Pathfinding/Poly2Tri/DelaunayTriangle.hpp"
// Including type: Pathfinding.Poly2Tri.AdvancingFrontNode
#include "Pathfinding/Poly2Tri/AdvancingFrontNode.hpp"
// Including type: Pathfinding.Poly2Tri.Triangulatable
#include "Pathfinding/Poly2Tri/Triangulatable.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationConstraint
#include "Pathfinding/Poly2Tri/TriangulationConstraint.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationAlgorithm
#include "Pathfinding/Poly2Tri/TriangulationAlgorithm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Single ALPHA
[[deprecated("Use field access instead!")]] float& Pathfinding::Poly2Tri::DTSweepContext::dyn_ALPHA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::dyn_ALPHA");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ALPHA"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.AdvancingFront Front
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFront*& Pathfinding::Poly2Tri::DTSweepContext::dyn_Front() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::dyn_Front");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Front"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFront**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.DTSweepBasin Basin
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DTSweepBasin*& Pathfinding::Poly2Tri::DTSweepContext::dyn_Basin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::dyn_Basin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Basin"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::DTSweepBasin**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.DTSweepEdgeEvent EdgeEvent
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DTSweepEdgeEvent*& Pathfinding::Poly2Tri::DTSweepContext::dyn_EdgeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::dyn_EdgeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EdgeEvent"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::DTSweepEdgeEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.DTSweepPointComparator _comparator
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DTSweepPointComparator*& Pathfinding::Poly2Tri::DTSweepContext::dyn__comparator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::dyn__comparator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comparator"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::DTSweepPointComparator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.TriangulationPoint <Head>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::DTSweepContext::dyn_$Head$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::dyn_$Head$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Head>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.TriangulationPoint <Tail>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::DTSweepContext::dyn_$Tail$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::dyn_$Tail$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Tail>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.get_Head
::Pathfinding::Poly2Tri::TriangulationPoint* Pathfinding::Poly2Tri::DTSweepContext::get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::get_Head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationPoint*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.set_Head
void Pathfinding::Poly2Tri::DTSweepContext::set_Head(::Pathfinding::Poly2Tri::TriangulationPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::set_Head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.get_Tail
::Pathfinding::Poly2Tri::TriangulationPoint* Pathfinding::Poly2Tri::DTSweepContext::get_Tail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::get_Tail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Tail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationPoint*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.set_Tail
void Pathfinding::Poly2Tri::DTSweepContext::set_Tail(::Pathfinding::Poly2Tri::TriangulationPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::set_Tail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Tail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.RemoveFromList
void Pathfinding::Poly2Tri::DTSweepContext::RemoveFromList(::Pathfinding::Poly2Tri::DelaunayTriangle* triangle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::RemoveFromList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveFromList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(triangle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, triangle);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.MeshClean
void Pathfinding::Poly2Tri::DTSweepContext::MeshClean(::Pathfinding::Poly2Tri::DelaunayTriangle* triangle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::MeshClean");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MeshClean", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(triangle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, triangle);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.MeshCleanReq
void Pathfinding::Poly2Tri::DTSweepContext::MeshCleanReq(::Pathfinding::Poly2Tri::DelaunayTriangle* triangle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::MeshCleanReq");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MeshCleanReq", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(triangle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, triangle);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.AddNode
void Pathfinding::Poly2Tri::DTSweepContext::AddNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::AddNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.RemoveNode
void Pathfinding::Poly2Tri::DTSweepContext::RemoveNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::RemoveNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.LocateNode
::Pathfinding::Poly2Tri::AdvancingFrontNode* Pathfinding::Poly2Tri::DTSweepContext::LocateNode(::Pathfinding::Poly2Tri::TriangulationPoint* point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::LocateNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocateNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::AdvancingFrontNode*, false>(this, ___internal__method, point);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.CreateAdvancingFront
void Pathfinding::Poly2Tri::DTSweepContext::CreateAdvancingFront() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::CreateAdvancingFront");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAdvancingFront", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.MapTriangleToNodes
void Pathfinding::Poly2Tri::DTSweepContext::MapTriangleToNodes(::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::MapTriangleToNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapTriangleToNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.FinalizeTriangulation
void Pathfinding::Poly2Tri::DTSweepContext::FinalizeTriangulation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::FinalizeTriangulation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeTriangulation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.get_IsDebugEnabled
bool Pathfinding::Poly2Tri::DTSweepContext::get_IsDebugEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::get_IsDebugEnabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.Clear
void Pathfinding::Poly2Tri::DTSweepContext::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.PrepareTriangulation
void Pathfinding::Poly2Tri::DTSweepContext::PrepareTriangulation(::Pathfinding::Poly2Tri::Triangulatable* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::PrepareTriangulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.NewConstraint
::Pathfinding::Poly2Tri::TriangulationConstraint* Pathfinding::Poly2Tri::DTSweepContext::NewConstraint(::Pathfinding::Poly2Tri::TriangulationPoint* a, ::Pathfinding::Poly2Tri::TriangulationPoint* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::NewConstraint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationConstraint*, false>(this, ___internal__method, a, b);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepContext.get_Algorithm
::Pathfinding::Poly2Tri::TriangulationAlgorithm Pathfinding::Poly2Tri::DTSweepContext::get_Algorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepContext::get_Algorithm");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationAlgorithm, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.DTSweepDebugContext
#include "Pathfinding/Poly2Tri/DTSweepDebugContext.hpp"
// Including type: Pathfinding.Poly2Tri.DelaunayTriangle
#include "Pathfinding/Poly2Tri/DelaunayTriangle.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
// Including type: Pathfinding.Poly2Tri.AdvancingFrontNode
#include "Pathfinding/Poly2Tri/AdvancingFrontNode.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepConstraint
#include "Pathfinding/Poly2Tri/DTSweepConstraint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.DelaunayTriangle _primaryTriangle
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DelaunayTriangle*& Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__primaryTriangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__primaryTriangle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_primaryTriangle"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::DelaunayTriangle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.DelaunayTriangle _secondaryTriangle
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DelaunayTriangle*& Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__secondaryTriangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__secondaryTriangle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_secondaryTriangle"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::DelaunayTriangle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.TriangulationPoint _activePoint
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__activePoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__activePoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activePoint"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.AdvancingFrontNode _activeNode
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::AdvancingFrontNode*& Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__activeNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__activeNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeNode"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::AdvancingFrontNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.DTSweepConstraint _activeConstraint
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DTSweepConstraint*& Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__activeConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::dyn__activeConstraint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeConstraint"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::DTSweepConstraint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepDebugContext.set_PrimaryTriangle
void Pathfinding::Poly2Tri::DTSweepDebugContext::set_PrimaryTriangle(::Pathfinding::Poly2Tri::DelaunayTriangle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::set_PrimaryTriangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PrimaryTriangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepDebugContext.set_SecondaryTriangle
void Pathfinding::Poly2Tri::DTSweepDebugContext::set_SecondaryTriangle(::Pathfinding::Poly2Tri::DelaunayTriangle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::set_SecondaryTriangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SecondaryTriangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepDebugContext.set_ActivePoint
void Pathfinding::Poly2Tri::DTSweepDebugContext::set_ActivePoint(::Pathfinding::Poly2Tri::TriangulationPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::set_ActivePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ActivePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepDebugContext.set_ActiveNode
void Pathfinding::Poly2Tri::DTSweepDebugContext::set_ActiveNode(::Pathfinding::Poly2Tri::AdvancingFrontNode* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::set_ActiveNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ActiveNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepDebugContext.set_ActiveConstraint
void Pathfinding::Poly2Tri::DTSweepDebugContext::set_ActiveConstraint(::Pathfinding::Poly2Tri::DTSweepConstraint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::set_ActiveConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ActiveConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepDebugContext.Clear
void Pathfinding::Poly2Tri::DTSweepDebugContext::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepDebugContext::Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationDebugContext*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.DTSweepEdgeEvent
#include "Pathfinding/Poly2Tri/DTSweepEdgeEvent.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepConstraint
#include "Pathfinding/Poly2Tri/DTSweepConstraint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.DTSweepConstraint ConstrainedEdge
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::DTSweepConstraint*& Pathfinding::Poly2Tri::DTSweepEdgeEvent::dyn_ConstrainedEdge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepEdgeEvent::dyn_ConstrainedEdge");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConstrainedEdge"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::DTSweepConstraint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean Right
[[deprecated("Use field access instead!")]] bool& Pathfinding::Poly2Tri::DTSweepEdgeEvent::dyn_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepEdgeEvent::dyn_Right");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Right"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.DTSweepPointComparator
#include "Pathfinding/Poly2Tri/DTSweepPointComparator.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Pathfinding.Poly2Tri.DTSweepPointComparator.Compare
int Pathfinding::Poly2Tri::DTSweepPointComparator::Compare(::Pathfinding::Poly2Tri::TriangulationPoint* p1, ::Pathfinding::Poly2Tri::TriangulationPoint* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::DTSweepPointComparator::Compare");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::DTSweepPointComparator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, p1, p2);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.PointOnEdgeException
#include "Pathfinding/Poly2Tri/PointOnEdgeException.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly Pathfinding.Poly2Tri.TriangulationPoint A
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::PointOnEdgeException::dyn_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PointOnEdgeException::dyn_A");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "A"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Pathfinding.Poly2Tri.TriangulationPoint B
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::PointOnEdgeException::dyn_B() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PointOnEdgeException::dyn_B");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "B"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly Pathfinding.Poly2Tri.TriangulationPoint C
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::PointOnEdgeException::dyn_C() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::PointOnEdgeException::dyn_C");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "C"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.Orientation
#include "Pathfinding/Poly2Tri/Orientation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Poly2Tri.Orientation CW
::Pathfinding::Poly2Tri::Orientation Pathfinding::Poly2Tri::Orientation::_get_CW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Orientation::_get_CW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Poly2Tri::Orientation>("Pathfinding.Poly2Tri", "Orientation", "CW"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Poly2Tri.Orientation CW
void Pathfinding::Poly2Tri::Orientation::_set_CW(::Pathfinding::Poly2Tri::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Orientation::_set_CW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "Orientation", "CW", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Poly2Tri.Orientation CCW
::Pathfinding::Poly2Tri::Orientation Pathfinding::Poly2Tri::Orientation::_get_CCW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Orientation::_get_CCW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Poly2Tri::Orientation>("Pathfinding.Poly2Tri", "Orientation", "CCW"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Poly2Tri.Orientation CCW
void Pathfinding::Poly2Tri::Orientation::_set_CCW(::Pathfinding::Poly2Tri::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Orientation::_set_CCW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "Orientation", "CCW", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Poly2Tri.Orientation Collinear
::Pathfinding::Poly2Tri::Orientation Pathfinding::Poly2Tri::Orientation::_get_Collinear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Orientation::_get_Collinear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Poly2Tri::Orientation>("Pathfinding.Poly2Tri", "Orientation", "Collinear"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Poly2Tri.Orientation Collinear
void Pathfinding::Poly2Tri::Orientation::_set_Collinear(::Pathfinding::Poly2Tri::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Orientation::_set_Collinear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "Orientation", "Collinear", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Poly2Tri::Orientation::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Orientation::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.Triangulatable
#include "Pathfinding/Poly2Tri/Triangulatable.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationContext
#include "Pathfinding/Poly2Tri/TriangulationContext.hpp"
// Including type: Pathfinding.Poly2Tri.DelaunayTriangle
#include "Pathfinding/Poly2Tri/DelaunayTriangle.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationMode
#include "Pathfinding/Poly2Tri/TriangulationMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Pathfinding.Poly2Tri.Triangulatable.Prepare
void Pathfinding::Poly2Tri::Triangulatable::Prepare(::Pathfinding::Poly2Tri::TriangulationContext* tcx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Triangulatable::Prepare");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Triangulatable*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tcx);
}
// Autogenerated method: Pathfinding.Poly2Tri.Triangulatable.AddTriangle
void Pathfinding::Poly2Tri::Triangulatable::AddTriangle(::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Triangulatable::AddTriangle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Triangulatable*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.Triangulatable.AddTriangles
void Pathfinding::Poly2Tri::Triangulatable::AddTriangles(::System::Collections::Generic::IEnumerable_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>* list) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Triangulatable::AddTriangles");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Triangulatable*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, list);
}
// Autogenerated method: Pathfinding.Poly2Tri.Triangulatable.get_TriangulationMode
::Pathfinding::Poly2Tri::TriangulationMode Pathfinding::Poly2Tri::Triangulatable::get_TriangulationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::Triangulatable::get_TriangulationMode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::Triangulatable*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationMode, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.TriangulationAlgorithm
#include "Pathfinding/Poly2Tri/TriangulationAlgorithm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Poly2Tri.TriangulationAlgorithm DTSweep
::Pathfinding::Poly2Tri::TriangulationAlgorithm Pathfinding::Poly2Tri::TriangulationAlgorithm::_get_DTSweep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationAlgorithm::_get_DTSweep");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Poly2Tri::TriangulationAlgorithm>("Pathfinding.Poly2Tri", "TriangulationAlgorithm", "DTSweep"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Poly2Tri.TriangulationAlgorithm DTSweep
void Pathfinding::Poly2Tri::TriangulationAlgorithm::_set_DTSweep(::Pathfinding::Poly2Tri::TriangulationAlgorithm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationAlgorithm::_set_DTSweep");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "TriangulationAlgorithm", "DTSweep", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Poly2Tri::TriangulationAlgorithm::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationAlgorithm::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.TriangulationConstraint
#include "Pathfinding/Poly2Tri/TriangulationConstraint.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.TriangulationPoint P
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::TriangulationConstraint::dyn_P() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationConstraint::dyn_P");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "P"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Pathfinding.Poly2Tri.TriangulationPoint Q
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationPoint*& Pathfinding::Poly2Tri::TriangulationConstraint::dyn_Q() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationConstraint::dyn_Q");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Q"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.TriangulationContext
#include "Pathfinding/Poly2Tri/TriangulationContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Pathfinding.Poly2Tri.DelaunayTriangle
#include "Pathfinding/Poly2Tri/DelaunayTriangle.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationDebugContext
#include "Pathfinding/Poly2Tri/TriangulationDebugContext.hpp"
// Including type: Pathfinding.Poly2Tri.Triangulatable
#include "Pathfinding/Poly2Tri/Triangulatable.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationAlgorithm
#include "Pathfinding/Poly2Tri/TriangulationAlgorithm.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationConstraint
#include "Pathfinding/Poly2Tri/TriangulationConstraint.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepDebugContext
#include "Pathfinding/Poly2Tri/DTSweepDebugContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<Pathfinding.Poly2Tri.DelaunayTriangle> Triangles
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>*& Pathfinding::Poly2Tri::TriangulationContext::dyn_Triangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::dyn_Triangles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Triangles"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DelaunayTriangle*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<Pathfinding.Poly2Tri.TriangulationPoint> Points
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::TriangulationPoint*>*& Pathfinding::Poly2Tri::TriangulationContext::dyn_Points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::dyn_Points");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Points"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::TriangulationPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.TriangulationDebugContext <DebugContext>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationDebugContext*& Pathfinding::Poly2Tri::TriangulationContext::dyn_$DebugContext$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::dyn_$DebugContext$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<DebugContext>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationDebugContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.TriangulationMode <TriangulationMode>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationMode& Pathfinding::Poly2Tri::TriangulationContext::dyn_$TriangulationMode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::dyn_$TriangulationMode$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TriangulationMode>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Pathfinding.Poly2Tri.Triangulatable <Triangulatable>k__BackingField
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::Triangulatable*& Pathfinding::Poly2Tri::TriangulationContext::dyn_$Triangulatable$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::dyn_$Triangulatable$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Triangulatable>k__BackingField"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::Triangulatable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <StepCount>k__BackingField
[[deprecated("Use field access instead!")]] int& Pathfinding::Poly2Tri::TriangulationContext::dyn_$StepCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::dyn_$StepCount$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<StepCount>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsDebugEnabled>k__BackingField
[[deprecated("Use field access instead!")]] bool& Pathfinding::Poly2Tri::TriangulationContext::dyn_$IsDebugEnabled$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::dyn_$IsDebugEnabled$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsDebugEnabled>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.get_DebugContext
::Pathfinding::Poly2Tri::TriangulationDebugContext* Pathfinding::Poly2Tri::TriangulationContext::get_DebugContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::get_DebugContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DebugContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationDebugContext*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.get_TriangulationMode
::Pathfinding::Poly2Tri::TriangulationMode Pathfinding::Poly2Tri::TriangulationContext::get_TriangulationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::get_TriangulationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TriangulationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationMode, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.set_TriangulationMode
void Pathfinding::Poly2Tri::TriangulationContext::set_TriangulationMode(::Pathfinding::Poly2Tri::TriangulationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::set_TriangulationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TriangulationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.get_Triangulatable
::Pathfinding::Poly2Tri::Triangulatable* Pathfinding::Poly2Tri::TriangulationContext::get_Triangulatable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::get_Triangulatable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Triangulatable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::Triangulatable*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.set_Triangulatable
void Pathfinding::Poly2Tri::TriangulationContext::set_Triangulatable(::Pathfinding::Poly2Tri::Triangulatable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::set_Triangulatable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Triangulatable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.get_StepCount
int Pathfinding::Poly2Tri::TriangulationContext::get_StepCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::get_StepCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StepCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.set_StepCount
void Pathfinding::Poly2Tri::TriangulationContext::set_StepCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::set_StepCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_StepCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.Done
void Pathfinding::Poly2Tri::TriangulationContext::Done() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::Done");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Done", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.get_Algorithm
::Pathfinding::Poly2Tri::TriangulationAlgorithm Pathfinding::Poly2Tri::TriangulationContext::get_Algorithm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::get_Algorithm");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationAlgorithm, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.PrepareTriangulation
void Pathfinding::Poly2Tri::TriangulationContext::PrepareTriangulation(::Pathfinding::Poly2Tri::Triangulatable* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::PrepareTriangulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.NewConstraint
::Pathfinding::Poly2Tri::TriangulationConstraint* Pathfinding::Poly2Tri::TriangulationContext::NewConstraint(::Pathfinding::Poly2Tri::TriangulationPoint* a, ::Pathfinding::Poly2Tri::TriangulationPoint* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::NewConstraint");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::TriangulationConstraint*, false>(this, ___internal__method, a, b);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.Update
void Pathfinding::Poly2Tri::TriangulationContext::Update(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.Clear
void Pathfinding::Poly2Tri::TriangulationContext::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.get_IsDebugEnabled
bool Pathfinding::Poly2Tri::TriangulationContext::get_IsDebugEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::get_IsDebugEnabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationContext*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationContext.get_DTDebugContext
::Pathfinding::Poly2Tri::DTSweepDebugContext* Pathfinding::Poly2Tri::TriangulationContext::get_DTDebugContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationContext::get_DTDebugContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DTDebugContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::DTSweepDebugContext*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.TriangulationDebugContext
#include "Pathfinding/Poly2Tri/TriangulationDebugContext.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationContext
#include "Pathfinding/Poly2Tri/TriangulationContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected Pathfinding.Poly2Tri.TriangulationContext _tcx
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::TriangulationContext*& Pathfinding::Poly2Tri::TriangulationDebugContext::dyn__tcx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationDebugContext::dyn__tcx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tcx"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::TriangulationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationDebugContext.Clear
void Pathfinding::Poly2Tri::TriangulationDebugContext::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationDebugContext::Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::TriangulationDebugContext*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.TriangulationMode
#include "Pathfinding/Poly2Tri/TriangulationMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Pathfinding.Poly2Tri.TriangulationMode Unconstrained
::Pathfinding::Poly2Tri::TriangulationMode Pathfinding::Poly2Tri::TriangulationMode::_get_Unconstrained() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationMode::_get_Unconstrained");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Poly2Tri::TriangulationMode>("Pathfinding.Poly2Tri", "TriangulationMode", "Unconstrained"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Poly2Tri.TriangulationMode Unconstrained
void Pathfinding::Poly2Tri::TriangulationMode::_set_Unconstrained(::Pathfinding::Poly2Tri::TriangulationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationMode::_set_Unconstrained");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "TriangulationMode", "Unconstrained", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Poly2Tri.TriangulationMode Constrained
::Pathfinding::Poly2Tri::TriangulationMode Pathfinding::Poly2Tri::TriangulationMode::_get_Constrained() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationMode::_get_Constrained");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Poly2Tri::TriangulationMode>("Pathfinding.Poly2Tri", "TriangulationMode", "Constrained"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Poly2Tri.TriangulationMode Constrained
void Pathfinding::Poly2Tri::TriangulationMode::_set_Constrained(::Pathfinding::Poly2Tri::TriangulationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationMode::_set_Constrained");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "TriangulationMode", "Constrained", value));
}
// Autogenerated static field getter
// Get static field: static public Pathfinding.Poly2Tri.TriangulationMode Polygon
::Pathfinding::Poly2Tri::TriangulationMode Pathfinding::Poly2Tri::TriangulationMode::_get_Polygon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationMode::_get_Polygon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Pathfinding::Poly2Tri::TriangulationMode>("Pathfinding.Poly2Tri", "TriangulationMode", "Polygon"));
}
// Autogenerated static field setter
// Set static field: static public Pathfinding.Poly2Tri.TriangulationMode Polygon
void Pathfinding::Poly2Tri::TriangulationMode::_set_Polygon(::Pathfinding::Poly2Tri::TriangulationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationMode::_set_Polygon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "TriangulationMode", "Polygon", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Pathfinding::Poly2Tri::TriangulationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Pathfinding.Poly2Tri.DTSweepConstraint
#include "Pathfinding/Poly2Tri/DTSweepConstraint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Double X
[[deprecated("Use field access instead!")]] double& Pathfinding::Poly2Tri::TriangulationPoint::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationPoint::dyn_X");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double Y
[[deprecated("Use field access instead!")]] double& Pathfinding::Poly2Tri::TriangulationPoint::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationPoint::dyn_Y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Pathfinding.Poly2Tri.DTSweepConstraint> <Edges>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DTSweepConstraint*>*& Pathfinding::Poly2Tri::TriangulationPoint::dyn_$Edges$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationPoint::dyn_$Edges$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Edges>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DTSweepConstraint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationPoint.get_Edges
::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DTSweepConstraint*>* Pathfinding::Poly2Tri::TriangulationPoint::get_Edges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationPoint::get_Edges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Edges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DTSweepConstraint*>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationPoint.set_Edges
void Pathfinding::Poly2Tri::TriangulationPoint::set_Edges(::System::Collections::Generic::List_1<::Pathfinding::Poly2Tri::DTSweepConstraint*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationPoint::set_Edges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Edges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationPoint.AddEdge
void Pathfinding::Poly2Tri::TriangulationPoint::AddEdge(::Pathfinding::Poly2Tri::DTSweepConstraint* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationPoint::AddEdge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEdge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationPoint.get_HasEdges
bool Pathfinding::Poly2Tri::TriangulationPoint::get_HasEdges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationPoint::get_HasEdges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasEdges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationPoint.ToString
::StringW Pathfinding::Poly2Tri::TriangulationPoint::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationPoint::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.TriangulationUtil
#include "Pathfinding/Poly2Tri/TriangulationUtil.hpp"
// Including type: Pathfinding.Poly2Tri.TriangulationPoint
#include "Pathfinding/Poly2Tri/TriangulationPoint.hpp"
// Including type: Pathfinding.Poly2Tri.Orientation
#include "Pathfinding/Poly2Tri/Orientation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Double EPSILON
double Pathfinding::Poly2Tri::TriangulationUtil::_get_EPSILON() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationUtil::_get_EPSILON");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("Pathfinding.Poly2Tri", "TriangulationUtil", "EPSILON"));
}
// Autogenerated static field setter
// Set static field: static public System.Double EPSILON
void Pathfinding::Poly2Tri::TriangulationUtil::_set_EPSILON(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationUtil::_set_EPSILON");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Pathfinding.Poly2Tri", "TriangulationUtil", "EPSILON", value));
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationUtil..cctor
void Pathfinding::Poly2Tri::TriangulationUtil::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationUtil::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "TriangulationUtil", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationUtil.SmartIncircle
bool Pathfinding::Poly2Tri::TriangulationUtil::SmartIncircle(::Pathfinding::Poly2Tri::TriangulationPoint* pa, ::Pathfinding::Poly2Tri::TriangulationPoint* pb, ::Pathfinding::Poly2Tri::TriangulationPoint* pc, ::Pathfinding::Poly2Tri::TriangulationPoint* pd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationUtil::SmartIncircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "TriangulationUtil", "SmartIncircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pa), ::il2cpp_utils::ExtractType(pb), ::il2cpp_utils::ExtractType(pc), ::il2cpp_utils::ExtractType(pd)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pa, pb, pc, pd);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationUtil.InScanArea
bool Pathfinding::Poly2Tri::TriangulationUtil::InScanArea(::Pathfinding::Poly2Tri::TriangulationPoint* pa, ::Pathfinding::Poly2Tri::TriangulationPoint* pb, ::Pathfinding::Poly2Tri::TriangulationPoint* pc, ::Pathfinding::Poly2Tri::TriangulationPoint* pd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationUtil::InScanArea");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "TriangulationUtil", "InScanArea", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pa), ::il2cpp_utils::ExtractType(pb), ::il2cpp_utils::ExtractType(pc), ::il2cpp_utils::ExtractType(pd)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pa, pb, pc, pd);
}
// Autogenerated method: Pathfinding.Poly2Tri.TriangulationUtil.Orient2d
::Pathfinding::Poly2Tri::Orientation Pathfinding::Poly2Tri::TriangulationUtil::Orient2d(::Pathfinding::Poly2Tri::TriangulationPoint* pa, ::Pathfinding::Poly2Tri::TriangulationPoint* pb, ::Pathfinding::Poly2Tri::TriangulationPoint* pc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::TriangulationUtil::Orient2d");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Poly2Tri", "TriangulationUtil", "Orient2d", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pa), ::il2cpp_utils::ExtractType(pb), ::il2cpp_utils::ExtractType(pc)})));
  return ::il2cpp_utils::RunMethodRethrow<::Pathfinding::Poly2Tri::Orientation, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pa, pb, pc);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Pathfinding.Poly2Tri.FixedBitArray3
#include "Pathfinding/Poly2Tri/FixedBitArray3.hpp"
// Including type: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1
#include "Pathfinding/Poly2Tri/FixedBitArray3_-Enumerate-c__Iterator1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean _0
[[deprecated("Use field access instead!")]] bool& Pathfinding::Poly2Tri::FixedBitArray3::dyn__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::dyn__0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_0"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _1
[[deprecated("Use field access instead!")]] bool& Pathfinding::Poly2Tri::FixedBitArray3::dyn__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::dyn__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_1"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _2
[[deprecated("Use field access instead!")]] bool& Pathfinding::Poly2Tri::FixedBitArray3::dyn__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::dyn__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_2"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* Pathfinding::Poly2Tri::FixedBitArray3::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Pathfinding::Poly2Tri::FixedBitArray3), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3.get_Item
bool Pathfinding::Poly2Tri::FixedBitArray3::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3.set_Item
void Pathfinding::Poly2Tri::FixedBitArray3::set_Item(int index, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3.Clear
void Pathfinding::Poly2Tri::FixedBitArray3::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3.Enumerate
::System::Collections::Generic::IEnumerable_1<bool>* Pathfinding::Poly2Tri::FixedBitArray3::Enumerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::Enumerate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Enumerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<bool>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3.GetEnumerator
::System::Collections::Generic::IEnumerator_1<bool>* Pathfinding::Poly2Tri::FixedBitArray3::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Pathfinding::Poly2Tri::FixedBitArray3), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<bool>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1
#include "Pathfinding/Poly2Tri/FixedBitArray3_-Enumerate-c__Iterator1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 <i>__0
[[deprecated("Use field access instead!")]] int& Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::dyn_$i$__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::dyn_$i$__0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>__0"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 $PC
[[deprecated("Use field access instead!")]] int& Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::dyn_$PC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::dyn_$PC");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "$PC"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean $current
[[deprecated("Use field access instead!")]] bool& Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::dyn_$current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::dyn_$current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "$current"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Pathfinding.Poly2Tri.FixedBitArray3 <>f__this
[[deprecated("Use field access instead!")]] ::Pathfinding::Poly2Tri::FixedBitArray3& Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::dyn_$$f__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::dyn_$$f__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>f__this"))->offset;
  return *reinterpret_cast<::Pathfinding::Poly2Tri::FixedBitArray3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1.System.Collections.Generic.IEnumerator<bool>.get_Current
bool Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::System_Collections_Generic_IEnumerator$bool$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::System.Collections.Generic.IEnumerator<bool>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1.System.Collections.IEnumerator.get_Current
::Il2CppObject* Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1.System.Collections.Generic.IEnumerable<bool>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<bool>* Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::System_Collections_Generic_IEnumerable$bool$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::System.Collections.Generic.IEnumerable<bool>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<bool>*, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1.MoveNext
bool Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1.Dispose
void Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Pathfinding.Poly2Tri.FixedBitArray3/<Enumerate>c__Iterator1.Reset
void Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Pathfinding::Poly2Tri::FixedBitArray3::$Enumerate$c__Iterator1*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.ByteArraySlice
#include "ExitGames/Client/Photon/ByteArraySlice.hpp"
// Including type: ExitGames.Client.Photon.ByteArraySlicePool
#include "ExitGames/Client/Photon/ByteArraySlicePool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte[] Buffer
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& ExitGames::Client::Photon::ByteArraySlice::dyn_Buffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::dyn_Buffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Buffer"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Offset
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::ByteArraySlice::dyn_Offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::dyn_Offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Offset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Count
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::ByteArraySlice::dyn_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::dyn_Count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly ExitGames.Client.Photon.ByteArraySlicePool returnPool
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::ByteArraySlicePool*& ExitGames::Client::Photon::ByteArraySlice::dyn_returnPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::dyn_returnPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "returnPool"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::ByteArraySlicePool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 stackIndex
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::ByteArraySlice::dyn_stackIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::dyn_stackIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stackIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlice.Dispose
void ExitGames::Client::Photon::ByteArraySlice::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::ByteArraySlice*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlice.Release
bool ExitGames::Client::Photon::ByteArraySlice::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlice.Reset
void ExitGames::Client::Photon::ByteArraySlice::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.ByteArraySlicePool
#include "ExitGames/Client/Photon/ByteArraySlicePool.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: ExitGames.Client.Photon.ByteArraySlice
#include "ExitGames/Client/Photon/ByteArraySlice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 minStackIndex
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::ByteArraySlicePool::dyn_minStackIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::dyn_minStackIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minStackIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Collections.Generic.Stack`1<ExitGames.Client.Photon.ByteArraySlice>[] poolTiers
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::ByteArraySlice*>*>& ExitGames::Client::Photon::ByteArraySlicePool::dyn_poolTiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::dyn_poolTiers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "poolTiers"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::ByteArraySlice*>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 allocationCounter
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::ByteArraySlicePool::dyn_allocationCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::dyn_allocationCounter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allocationCounter"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlicePool.get_MinStackIndex
int ExitGames::Client::Photon::ByteArraySlicePool::get_MinStackIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::get_MinStackIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MinStackIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlicePool.set_MinStackIndex
void ExitGames::Client::Photon::ByteArraySlicePool::set_MinStackIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::set_MinStackIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MinStackIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlicePool.get_AllocationCounter
int ExitGames::Client::Photon::ByteArraySlicePool::get_AllocationCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::get_AllocationCounter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllocationCounter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlicePool.Acquire
::ExitGames::Client::Photon::ByteArraySlice* ExitGames::Client::Photon::ByteArraySlicePool::Acquire(::ArrayW<uint8_t> buffer, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::ByteArraySlice*, false>(this, ___internal__method, buffer, offset, count);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlicePool.Acquire
::ExitGames::Client::Photon::ByteArraySlice* ExitGames::Client::Photon::ByteArraySlicePool::Acquire(int minByteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(minByteCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::ByteArraySlice*, false>(this, ___internal__method, minByteCount);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlicePool.PopOrCreate
::ExitGames::Client::Photon::ByteArraySlice* ExitGames::Client::Photon::ByteArraySlicePool::PopOrCreate(::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::ByteArraySlice*>* stack, int stackIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::PopOrCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopOrCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stack), ::il2cpp_utils::ExtractType(stackIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::ByteArraySlice*, false>(this, ___internal__method, stack, stackIndex);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlicePool.Release
bool ExitGames::Client::Photon::ByteArraySlicePool::Release(::ExitGames::Client::Photon::ByteArraySlice* slice, int stackIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slice), ::il2cpp_utils::ExtractType(stackIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, slice, stackIndex);
}
// Autogenerated method: ExitGames.Client.Photon.ByteArraySlicePool.ClearPools
void ExitGames::Client::Photon::ByteArraySlicePool::ClearPools(int lower, int upper) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::ClearPools");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPools", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lower), ::il2cpp_utils::ExtractType(upper)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lower, upper);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ExitGames.Client.Photon.Hashtable
#include "ExitGames/Client/Photon/Hashtable.hpp"
// Including type: ExitGames.Client.Photon.DictionaryEntryEnumerator
#include "ExitGames/Client/Photon/DictionaryEntryEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Object[] boxedByte
::ArrayW<::Il2CppObject*> ExitGames::Client::Photon::Hashtable::_get_boxedByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::_get_boxedByte");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::Il2CppObject*>>("ExitGames.Client.Photon", "Hashtable", "boxedByte"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Object[] boxedByte
void ExitGames::Client::Photon::Hashtable::_set_boxedByte(::ArrayW<::Il2CppObject*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::_set_boxedByte");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "Hashtable", "boxedByte", value));
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.GetBoxedByte
::Il2CppObject* ExitGames::Client::Photon::Hashtable::GetBoxedByte(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::GetBoxedByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ExitGames.Client.Photon", "Hashtable", "GetBoxedByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable..cctor
void ExitGames::Client::Photon::Hashtable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ExitGames.Client.Photon", "Hashtable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.get_Item
::Il2CppObject* ExitGames::Client::Photon::Hashtable::get_Item(::Il2CppObject* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, key);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.set_Item
void ExitGames::Client::Photon::Hashtable::set_Item(::Il2CppObject* key, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.get_Item
::Il2CppObject* ExitGames::Client::Photon::Hashtable::get_Item(uint8_t key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, key);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.set_Item
void ExitGames::Client::Photon::Hashtable::set_Item(uint8_t key, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.Add
void ExitGames::Client::Photon::Hashtable::Add(uint8_t k, ::Il2CppObject* v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(k), ::il2cpp_utils::ExtractType(v)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, k, v);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.Remove
void ExitGames::Client::Photon::Hashtable::Remove(uint8_t k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(k)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, k);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.ContainsKey
bool ExitGames::Client::Photon::Hashtable::ContainsKey(uint8_t key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::ContainsKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.GetEnumerator
::ExitGames::Client::Photon::DictionaryEntryEnumerator ExitGames::Client::Photon::Hashtable::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::GetEnumerator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::DictionaryEntryEnumerator, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.Clone
::Il2CppObject* ExitGames::Client::Photon::Hashtable::Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::Clone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.Hashtable.ToString
::StringW ExitGames::Client::Photon::Hashtable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Hashtable::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ExitGames.Client.Photon.DictionaryEntryEnumerator
#include "ExitGames/Client/Photon/DictionaryEntryEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2/Enumerator<System.Object,System.Object> enumerator
[[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator& ExitGames::Client::Photon::DictionaryEntryEnumerator::dyn_enumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::DictionaryEntryEnumerator::dyn_enumerator");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enumerator"))->offset;
  return *reinterpret_cast<typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ExitGames.Client.Photon.DictionaryEntryEnumerator..ctor
// ABORTED elsewhere.  ExitGames::Client::Photon::DictionaryEntryEnumerator::DictionaryEntryEnumerator(typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator original)
// Autogenerated method: ExitGames.Client.Photon.DictionaryEntryEnumerator.System.Collections.IEnumerator.get_Current
::Il2CppObject* ExitGames::Client::Photon::DictionaryEntryEnumerator::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::DictionaryEntryEnumerator::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::ExitGames::Client::Photon::DictionaryEntryEnumerator), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.DictionaryEntryEnumerator.get_Current
::System::Collections::DictionaryEntry ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::ExitGames::Client::Photon::DictionaryEntryEnumerator), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::DictionaryEntry, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.DictionaryEntryEnumerator.get_Key
::Il2CppObject* ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Key");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.DictionaryEntryEnumerator.get_Value
::Il2CppObject* ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.DictionaryEntryEnumerator.MoveNext
bool ExitGames::Client::Photon::DictionaryEntryEnumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::DictionaryEntryEnumerator::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::ExitGames::Client::Photon::DictionaryEntryEnumerator), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.DictionaryEntryEnumerator.Reset
void ExitGames::Client::Photon::DictionaryEntryEnumerator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::DictionaryEntryEnumerator::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::ExitGames::Client::Photon::DictionaryEntryEnumerator), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.DictionaryEntryEnumerator.Dispose
void ExitGames::Client::Photon::DictionaryEntryEnumerator::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::DictionaryEntryEnumerator::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::ExitGames::Client::Photon::DictionaryEntryEnumerator), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.UnknownType
#include "ExitGames/Client/Photon/UnknownType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte TypeCode
[[deprecated("Use field access instead!")]] uint8_t& ExitGames::Client::Photon::UnknownType::dyn_TypeCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::UnknownType::dyn_TypeCode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TypeCode"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Size
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::UnknownType::dyn_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::UnknownType::dyn_Size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] Data
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& ExitGames::Client::Photon::UnknownType::dyn_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::UnknownType::dyn_Data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Data"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.EnetChannel
#include "ExitGames/Client/Photon/EnetChannel.hpp"
// Including type: ExitGames.Client.Photon.NonAllocDictionary`2
#include "ExitGames/Client/Photon/NonAllocDictionary_2.hpp"
// Including type: ExitGames.Client.Photon.NCommand
#include "ExitGames/Client/Photon/NCommand.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Byte ChannelNumber
[[deprecated("Use field access instead!")]] uint8_t& ExitGames::Client::Photon::EnetChannel::dyn_ChannelNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_ChannelNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ChannelNumber"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: ExitGames.Client.Photon.NonAllocDictionary`2<System.Int32,ExitGames.Client.Photon.NCommand> incomingReliableCommandsList
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::NonAllocDictionary_2<int, ::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::EnetChannel::dyn_incomingReliableCommandsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_incomingReliableCommandsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "incomingReliableCommandsList"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::NonAllocDictionary_2<int, ::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: ExitGames.Client.Photon.NonAllocDictionary`2<System.Int32,ExitGames.Client.Photon.NCommand> incomingUnreliableCommandsList
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::NonAllocDictionary_2<int, ::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::EnetChannel::dyn_incomingUnreliableCommandsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_incomingUnreliableCommandsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "incomingUnreliableCommandsList"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::NonAllocDictionary_2<int, ::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.Queue`1<ExitGames.Client.Photon.NCommand> incomingUnsequencedCommandsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::EnetChannel::dyn_incomingUnsequencedCommandsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_incomingUnsequencedCommandsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "incomingUnsequencedCommandsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: ExitGames.Client.Photon.NonAllocDictionary`2<System.Int32,ExitGames.Client.Photon.NCommand> incomingUnsequencedFragments
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::NonAllocDictionary_2<int, ::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::EnetChannel::dyn_incomingUnsequencedFragments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_incomingUnsequencedFragments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "incomingUnsequencedFragments"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::NonAllocDictionary_2<int, ::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.Queue`1<ExitGames.Client.Photon.NCommand> outgoingReliableCommandsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::EnetChannel::dyn_outgoingReliableCommandsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_outgoingReliableCommandsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outgoingReliableCommandsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.Queue`1<ExitGames.Client.Photon.NCommand> outgoingUnreliableCommandsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::EnetChannel::dyn_outgoingUnreliableCommandsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_outgoingUnreliableCommandsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outgoingUnreliableCommandsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 incomingReliableSequenceNumber
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetChannel::dyn_incomingReliableSequenceNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_incomingReliableSequenceNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "incomingReliableSequenceNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 incomingUnreliableSequenceNumber
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetChannel::dyn_incomingUnreliableSequenceNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_incomingUnreliableSequenceNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "incomingUnreliableSequenceNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 outgoingReliableSequenceNumber
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetChannel::dyn_outgoingReliableSequenceNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_outgoingReliableSequenceNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outgoingReliableSequenceNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 outgoingUnreliableSequenceNumber
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetChannel::dyn_outgoingUnreliableSequenceNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_outgoingUnreliableSequenceNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outgoingUnreliableSequenceNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 outgoingReliableUnsequencedNumber
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetChannel::dyn_outgoingReliableUnsequencedNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_outgoingReliableUnsequencedNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outgoingReliableUnsequencedNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 reliableUnsequencedNumbersCompletelyReceived
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetChannel::dyn_reliableUnsequencedNumbersCompletelyReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_reliableUnsequencedNumbersCompletelyReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reliableUnsequencedNumbersCompletelyReceived"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.Int32> reliableUnsequencedNumbersReceived
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& ExitGames::Client::Photon::EnetChannel::dyn_reliableUnsequencedNumbersReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_reliableUnsequencedNumbersReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reliableUnsequencedNumbersReceived"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 highestReceivedAck
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetChannel::dyn_highestReceivedAck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::dyn_highestReceivedAck");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highestReceivedAck"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ExitGames.Client.Photon.EnetChannel.ContainsUnreliableSequenceNumber
bool ExitGames::Client::Photon::EnetChannel::ContainsUnreliableSequenceNumber(int unreliableSequenceNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::ContainsUnreliableSequenceNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsUnreliableSequenceNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unreliableSequenceNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, unreliableSequenceNumber);
}
// Autogenerated method: ExitGames.Client.Photon.EnetChannel.FetchUnreliableSequenceNumber
::ExitGames::Client::Photon::NCommand* ExitGames::Client::Photon::EnetChannel::FetchUnreliableSequenceNumber(int unreliableSequenceNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::FetchUnreliableSequenceNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FetchUnreliableSequenceNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unreliableSequenceNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::NCommand*, false>(this, ___internal__method, unreliableSequenceNumber);
}
// Autogenerated method: ExitGames.Client.Photon.EnetChannel.ContainsReliableSequenceNumber
bool ExitGames::Client::Photon::EnetChannel::ContainsReliableSequenceNumber(int reliableSequenceNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::ContainsReliableSequenceNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsReliableSequenceNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reliableSequenceNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, reliableSequenceNumber);
}
// Autogenerated method: ExitGames.Client.Photon.EnetChannel.FetchReliableSequenceNumber
::ExitGames::Client::Photon::NCommand* ExitGames::Client::Photon::EnetChannel::FetchReliableSequenceNumber(int reliableSequenceNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::FetchReliableSequenceNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FetchReliableSequenceNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reliableSequenceNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::NCommand*, false>(this, ___internal__method, reliableSequenceNumber);
}
// Autogenerated method: ExitGames.Client.Photon.EnetChannel.TryGetFragment
bool ExitGames::Client::Photon::EnetChannel::TryGetFragment(int reliableSequenceNumber, bool isSequenced, ByRef<::ExitGames::Client::Photon::NCommand*> fragment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::TryGetFragment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetFragment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reliableSequenceNumber), ::il2cpp_utils::ExtractType(isSequenced), ::il2cpp_utils::ExtractIndependentType<::ExitGames::Client::Photon::NCommand*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, reliableSequenceNumber, isSequenced, byref(fragment));
}
// Autogenerated method: ExitGames.Client.Photon.EnetChannel.RemoveFragment
void ExitGames::Client::Photon::EnetChannel::RemoveFragment(int reliableSequenceNumber, bool isSequenced) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::RemoveFragment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveFragment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reliableSequenceNumber), ::il2cpp_utils::ExtractType(isSequenced)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reliableSequenceNumber, isSequenced);
}
// Autogenerated method: ExitGames.Client.Photon.EnetChannel.clearAll
void ExitGames::Client::Photon::EnetChannel::clearAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::clearAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "clearAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetChannel.QueueIncomingReliableUnsequenced
bool ExitGames::Client::Photon::EnetChannel::QueueIncomingReliableUnsequenced(::ExitGames::Client::Photon::NCommand* command) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetChannel::QueueIncomingReliableUnsequenced");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueIncomingReliableUnsequenced", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, command);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ExitGames.Client.Photon.EnetPeer
#include "ExitGames/Client/Photon/EnetPeer.hpp"
// Including type: ExitGames.Client.Photon.NCommandPool
#include "ExitGames/Client/Photon/NCommandPool.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ExitGames.Client.Photon.NCommand
#include "ExitGames/Client/Photon/NCommand.hpp"
// Including type: ExitGames.Client.Photon.StreamBuffer
#include "ExitGames/Client/Photon/StreamBuffer.hpp"
// Including type: ExitGames.Client.Photon.EnetChannel
#include "ExitGames/Client/Photon/EnetChannel.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: ExitGames.Client.Photon.SendOptions
#include "ExitGames/Client/Photon/SendOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 CRC_LENGTH
int ExitGames::Client::Photon::EnetPeer::_get_CRC_LENGTH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_CRC_LENGTH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("ExitGames.Client.Photon", "EnetPeer", "CRC_LENGTH"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 CRC_LENGTH
void ExitGames::Client::Photon::EnetPeer::_set_CRC_LENGTH(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_CRC_LENGTH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "CRC_LENGTH", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 EncryptedDataGramHeaderSize
int ExitGames::Client::Photon::EnetPeer::_get_EncryptedDataGramHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_EncryptedDataGramHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("ExitGames.Client.Photon", "EnetPeer", "EncryptedDataGramHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 EncryptedDataGramHeaderSize
void ExitGames::Client::Photon::EnetPeer::_set_EncryptedDataGramHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_EncryptedDataGramHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "EncryptedDataGramHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 EncryptedHeaderSize
int ExitGames::Client::Photon::EnetPeer::_get_EncryptedHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_EncryptedHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("ExitGames.Client.Photon", "EnetPeer", "EncryptedHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 EncryptedHeaderSize
void ExitGames::Client::Photon::EnetPeer::_set_EncryptedHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_EncryptedHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "EncryptedHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 QUICK_RESEND_QUEUELIMIT
int ExitGames::Client::Photon::EnetPeer::_get_QUICK_RESEND_QUEUELIMIT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_QUICK_RESEND_QUEUELIMIT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("ExitGames.Client.Photon", "EnetPeer", "QUICK_RESEND_QUEUELIMIT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 QUICK_RESEND_QUEUELIMIT
void ExitGames::Client::Photon::EnetPeer::_set_QUICK_RESEND_QUEUELIMIT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_QUICK_RESEND_QUEUELIMIT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "QUICK_RESEND_QUEUELIMIT", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 UnsequencedWindowSize
int ExitGames::Client::Photon::EnetPeer::_get_UnsequencedWindowSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_UnsequencedWindowSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("ExitGames.Client.Photon", "EnetPeer", "UnsequencedWindowSize"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 UnsequencedWindowSize
void ExitGames::Client::Photon::EnetPeer::_set_UnsequencedWindowSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_UnsequencedWindowSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "UnsequencedWindowSize", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Byte[] udpHeader0xF3
::ArrayW<uint8_t> ExitGames::Client::Photon::EnetPeer::_get_udpHeader0xF3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_udpHeader0xF3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint8_t>>("ExitGames.Client.Photon", "EnetPeer", "udpHeader0xF3"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Byte[] udpHeader0xF3
void ExitGames::Client::Photon::EnetPeer::_set_udpHeader0xF3(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_udpHeader0xF3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "udpHeader0xF3", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte ControlChannelNumber
uint8_t ExitGames::Client::Photon::EnetPeer::_get_ControlChannelNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_ControlChannelNumber");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("ExitGames.Client.Photon", "EnetPeer", "ControlChannelNumber"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte ControlChannelNumber
void ExitGames::Client::Photon::EnetPeer::_set_ControlChannelNumber(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_ControlChannelNumber");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "ControlChannelNumber", value));
}
// Autogenerated static field getter
// Get static field: static protected internal System.Int16 PeerIdForConnect
int16_t ExitGames::Client::Photon::EnetPeer::_get_PeerIdForConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_PeerIdForConnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int16_t>("ExitGames.Client.Photon", "EnetPeer", "PeerIdForConnect"));
}
// Autogenerated static field setter
// Set static field: static protected internal System.Int16 PeerIdForConnect
void ExitGames::Client::Photon::EnetPeer::_set_PeerIdForConnect(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_PeerIdForConnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "PeerIdForConnect", value));
}
// Autogenerated static field getter
// Get static field: static protected internal System.Int16 PeerIdForConnectTrace
int16_t ExitGames::Client::Photon::EnetPeer::_get_PeerIdForConnectTrace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_get_PeerIdForConnectTrace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int16_t>("ExitGames.Client.Photon", "EnetPeer", "PeerIdForConnectTrace"));
}
// Autogenerated static field setter
// Set static field: static protected internal System.Int16 PeerIdForConnectTrace
void ExitGames::Client::Photon::EnetPeer::_set_PeerIdForConnectTrace(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::_set_PeerIdForConnectTrace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "EnetPeer", "PeerIdForConnectTrace", value));
}
// Autogenerated instance field getter
// Get instance field: ExitGames.Client.Photon.NCommandPool nCommandPool
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::NCommandPool*& ExitGames::Client::Photon::EnetPeer::dyn_nCommandPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_nCommandPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nCommandPool"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::NCommandPool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<ExitGames.Client.Photon.NCommand> sentReliableCommands
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::EnetPeer::dyn_sentReliableCommands() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_sentReliableCommands");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sentReliableCommands"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ExitGames.Client.Photon.StreamBuffer outgoingAcknowledgementsPool
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::StreamBuffer*& ExitGames::Client::Photon::EnetPeer::dyn_outgoingAcknowledgementsPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_outgoingAcknowledgementsPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outgoingAcknowledgementsPool"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::StreamBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Int32[] unsequencedWindow
[[deprecated("Use field access instead!")]] ::ArrayW<int>& ExitGames::Client::Photon::EnetPeer::dyn_unsequencedWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_unsequencedWindow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unsequencedWindow"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 outgoingUnsequencedGroupNumber
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_outgoingUnsequencedGroupNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_outgoingUnsequencedGroupNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outgoingUnsequencedGroupNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 incomingUnsequencedGroupNumber
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_incomingUnsequencedGroupNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_incomingUnsequencedGroupNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "incomingUnsequencedGroupNumber"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte udpCommandCount
[[deprecated("Use field access instead!")]] uint8_t& ExitGames::Client::Photon::EnetPeer::dyn_udpCommandCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_udpCommandCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "udpCommandCount"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] udpBuffer
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& ExitGames::Client::Photon::EnetPeer::dyn_udpBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_udpBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "udpBuffer"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 udpBufferIndex
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_udpBufferIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_udpBufferIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "udpBufferIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] bufferForEncryption
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& ExitGames::Client::Photon::EnetPeer::dyn_bufferForEncryption() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_bufferForEncryption");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bufferForEncryption"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 commandBufferSize
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_commandBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_commandBufferSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "commandBufferSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 challenge
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_challenge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_challenge");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "challenge"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 reliableCommandsRepeated
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_reliableCommandsRepeated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_reliableCommandsRepeated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reliableCommandsRepeated"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 reliableCommandsSent
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_reliableCommandsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_reliableCommandsSent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reliableCommandsSent"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 serverSentTime
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_serverSentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_serverSentTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "serverSentTime"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean datagramEncryptedConnection
[[deprecated("Use field access instead!")]] bool& ExitGames::Client::Photon::EnetPeer::dyn_datagramEncryptedConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_datagramEncryptedConnection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "datagramEncryptedConnection"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ExitGames.Client.Photon.EnetChannel[] channelArray
[[deprecated("Use field access instead!")]] ::ArrayW<::ExitGames::Client::Photon::EnetChannel*>& ExitGames::Client::Photon::EnetPeer::dyn_channelArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_channelArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "channelArray"))->offset;
  return *reinterpret_cast<::ArrayW<::ExitGames::Client::Photon::EnetChannel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Queue`1<System.Int32> commandsToRemove
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<int>*& ExitGames::Client::Photon::EnetPeer::dyn_commandsToRemove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_commandsToRemove");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "commandsToRemove"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 fragmentLength
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_fragmentLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_fragmentLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fragmentLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 fragmentLengthDatagramEncrypt
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_fragmentLengthDatagramEncrypt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_fragmentLengthDatagramEncrypt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fragmentLengthDatagramEncrypt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 fragmentLengthMtuValue
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::EnetPeer::dyn_fragmentLengthMtuValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_fragmentLengthMtuValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fragmentLengthMtuValue"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Queue`1<ExitGames.Client.Photon.NCommand> CommandQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::EnetPeer::dyn_CommandQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::dyn_CommandQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CommandQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.ApplyRandomizedSequenceNumbers
void ExitGames::Client::Photon::EnetPeer::ApplyRandomizedSequenceNumbers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::ApplyRandomizedSequenceNumbers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyRandomizedSequenceNumbers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.GetChannel
::ExitGames::Client::Photon::EnetChannel* ExitGames::Client::Photon::EnetPeer::GetChannel(uint8_t channelNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::GetChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::EnetChannel*, false>(this, ___internal__method, channelNumber);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.GetFragmentLength
int ExitGames::Client::Photon::EnetPeer::GetFragmentLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::GetFragmentLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFragmentLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.CalculatePacketSize
int ExitGames::Client::Photon::EnetPeer::CalculatePacketSize(int inSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::CalculatePacketSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculatePacketSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inSize)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, inSize);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.CalculateInitialOffset
int ExitGames::Client::Photon::EnetPeer::CalculateInitialOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::CalculateInitialOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateInitialOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.CreateAndEnqueueCommand
bool ExitGames::Client::Photon::EnetPeer::CreateAndEnqueueCommand(uint8_t commandType, ::ExitGames::Client::Photon::StreamBuffer* payload, uint8_t channelNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::CreateAndEnqueueCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndEnqueueCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(commandType), ::il2cpp_utils::ExtractType(payload), ::il2cpp_utils::ExtractType(channelNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, commandType, payload, channelNumber);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.SerializeAckToBuffer
int ExitGames::Client::Photon::EnetPeer::SerializeAckToBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::SerializeAckToBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeAckToBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.SerializeToBuffer
int ExitGames::Client::Photon::EnetPeer::SerializeToBuffer(::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>* commandList) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::SerializeToBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeToBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(commandList)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, commandList);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.SerializeCommandToBuffer
bool ExitGames::Client::Photon::EnetPeer::SerializeCommandToBuffer(::ExitGames::Client::Photon::NCommand* command, bool commandIsInSentQueue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::SerializeCommandToBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeCommandToBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command), ::il2cpp_utils::ExtractType(commandIsInSentQueue)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, command, commandIsInSentQueue);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.SendData
void ExitGames::Client::Photon::EnetPeer::SendData(::ArrayW<uint8_t> data, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::SendData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, length);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.SendToSocket
void ExitGames::Client::Photon::EnetPeer::SendToSocket(::ArrayW<uint8_t> data, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::SendToSocket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToSocket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, length);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.SendDataEncrypted
void ExitGames::Client::Photon::EnetPeer::SendDataEncrypted(::ArrayW<uint8_t> data, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::SendDataEncrypted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendDataEncrypted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, length);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.QueueSentCommand
void ExitGames::Client::Photon::EnetPeer::QueueSentCommand(::ExitGames::Client::Photon::NCommand* command, bool commandIsAlreadyInSentQueue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::QueueSentCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueSentCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command), ::il2cpp_utils::ExtractType(commandIsAlreadyInSentQueue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, command, commandIsAlreadyInSentQueue);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.QueueOutgoingReliableCommand
void ExitGames::Client::Photon::EnetPeer::QueueOutgoingReliableCommand(::ExitGames::Client::Photon::NCommand* command) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::QueueOutgoingReliableCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueOutgoingReliableCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, command);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.QueueOutgoingUnreliableCommand
void ExitGames::Client::Photon::EnetPeer::QueueOutgoingUnreliableCommand(::ExitGames::Client::Photon::NCommand* command) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::QueueOutgoingUnreliableCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueOutgoingUnreliableCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, command);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.QueueOutgoingAcknowledgement
void ExitGames::Client::Photon::EnetPeer::QueueOutgoingAcknowledgement(::ExitGames::Client::Photon::NCommand* readCommand, int sendTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::QueueOutgoingAcknowledgement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueOutgoingAcknowledgement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(readCommand), ::il2cpp_utils::ExtractType(sendTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, readCommand, sendTime);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.ExecuteCommand
void ExitGames::Client::Photon::EnetPeer::ExecuteCommand(::ExitGames::Client::Photon::NCommand* command) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::ExecuteCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, command);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.QueueIncomingCommand
bool ExitGames::Client::Photon::EnetPeer::QueueIncomingCommand(::ExitGames::Client::Photon::NCommand* command) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::QueueIncomingCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QueueIncomingCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, command);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.RemoveSentReliableCommand
::ExitGames::Client::Photon::NCommand* ExitGames::Client::Photon::EnetPeer::RemoveSentReliableCommand(int ackReceivedReliableSequenceNumber, int ackReceivedChannel, bool isUnsequenced) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::RemoveSentReliableCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveSentReliableCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ackReceivedReliableSequenceNumber), ::il2cpp_utils::ExtractType(ackReceivedChannel), ::il2cpp_utils::ExtractType(isUnsequenced)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::NCommand*, false>(this, ___internal__method, ackReceivedReliableSequenceNumber, ackReceivedChannel, isUnsequenced);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.CommandListToString
::StringW ExitGames::Client::Photon::EnetPeer::CommandListToString(::ArrayW<::ExitGames::Client::Photon::NCommand*> list) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::CommandListToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CommandListToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, list);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.<ExecuteCommand>b__66_0
void ExitGames::Client::Photon::EnetPeer::$ExecuteCommand$b__66_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::<ExecuteCommand>b__66_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExecuteCommand>b__66_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.get_QueuedIncomingCommandsCount
int ExitGames::Client::Photon::EnetPeer::get_QueuedIncomingCommandsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::get_QueuedIncomingCommandsCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 4));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.get_QueuedOutgoingCommandsCount
int ExitGames::Client::Photon::EnetPeer::get_QueuedOutgoingCommandsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::get_QueuedOutgoingCommandsCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.get_SentReliableCommandsCount
int ExitGames::Client::Photon::EnetPeer::get_SentReliableCommandsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::get_SentReliableCommandsCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.IsTransportEncrypted
bool ExitGames::Client::Photon::EnetPeer::IsTransportEncrypted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::IsTransportEncrypted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.Reset
void ExitGames::Client::Photon::EnetPeer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.Connect
bool ExitGames::Client::Photon::EnetPeer::Connect(::StringW ipport, ::StringW proxyServerAddress, ::StringW appID, ::Il2CppObject* photonToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::Connect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ipport, proxyServerAddress, appID, photonToken);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.OnConnect
void ExitGames::Client::Photon::EnetPeer::OnConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::OnConnect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.Disconnect
void ExitGames::Client::Photon::EnetPeer::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::Disconnect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.StopConnection
void ExitGames::Client::Photon::EnetPeer::StopConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::StopConnection");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.FetchServerTimestamp
void ExitGames::Client::Photon::EnetPeer::FetchServerTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::FetchServerTimestamp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.DispatchIncomingCommands
bool ExitGames::Client::Photon::EnetPeer::DispatchIncomingCommands() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::DispatchIncomingCommands");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 19));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.SendAcksOnly
bool ExitGames::Client::Photon::EnetPeer::SendAcksOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::SendAcksOnly");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 17));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.SendOutgoingCommands
bool ExitGames::Client::Photon::EnetPeer::SendOutgoingCommands() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::SendOutgoingCommands");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 16));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.EnqueuePhotonMessage
bool ExitGames::Client::Photon::EnetPeer::EnqueuePhotonMessage(::ExitGames::Client::Photon::StreamBuffer* opBytes, ::ExitGames::Client::Photon::SendOptions sendParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::EnqueuePhotonMessage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 15));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, opBytes, sendParams);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer.ReceiveIncomingCommands
void ExitGames::Client::Photon::EnetPeer::ReceiveIncomingCommands(::ArrayW<uint8_t> inBuff, int inDataLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::ReceiveIncomingCommands");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::PeerBase*), 18));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, inBuff, inDataLength);
}
// Autogenerated method: ExitGames.Client.Photon.EnetPeer..cctor
void ExitGames::Client::Photon::EnetPeer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ExitGames.Client.Photon", "EnetPeer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.StatusCode
#include "ExitGames/Client/Photon/StatusCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode Connect
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_Connect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_Connect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "Connect"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode Connect
void ExitGames::Client::Photon::StatusCode::_set_Connect(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_Connect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "Connect", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode Disconnect
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode Disconnect
void ExitGames::Client::Photon::StatusCode::_set_Disconnect(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "Disconnect", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode Exception
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_Exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_Exception");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "Exception"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode Exception
void ExitGames::Client::Photon::StatusCode::_set_Exception(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_Exception");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "Exception", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode ExceptionOnConnect
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_ExceptionOnConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_ExceptionOnConnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "ExceptionOnConnect"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode ExceptionOnConnect
void ExitGames::Client::Photon::StatusCode::_set_ExceptionOnConnect(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_ExceptionOnConnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "ExceptionOnConnect", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode ServerAddressInvalid
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_ServerAddressInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_ServerAddressInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "ServerAddressInvalid"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode ServerAddressInvalid
void ExitGames::Client::Photon::StatusCode::_set_ServerAddressInvalid(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_ServerAddressInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "ServerAddressInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode DnsExceptionOnConnect
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_DnsExceptionOnConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_DnsExceptionOnConnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "DnsExceptionOnConnect"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode DnsExceptionOnConnect
void ExitGames::Client::Photon::StatusCode::_set_DnsExceptionOnConnect(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_DnsExceptionOnConnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "DnsExceptionOnConnect", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode SecurityExceptionOnConnect
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_SecurityExceptionOnConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_SecurityExceptionOnConnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "SecurityExceptionOnConnect"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode SecurityExceptionOnConnect
void ExitGames::Client::Photon::StatusCode::_set_SecurityExceptionOnConnect(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_SecurityExceptionOnConnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "SecurityExceptionOnConnect", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode SendError
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_SendError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_SendError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "SendError"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode SendError
void ExitGames::Client::Photon::StatusCode::_set_SendError(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_SendError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "SendError", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode ExceptionOnReceive
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_ExceptionOnReceive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_ExceptionOnReceive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "ExceptionOnReceive"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode ExceptionOnReceive
void ExitGames::Client::Photon::StatusCode::_set_ExceptionOnReceive(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_ExceptionOnReceive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "ExceptionOnReceive", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode TimeoutDisconnect
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_TimeoutDisconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_TimeoutDisconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "TimeoutDisconnect"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode TimeoutDisconnect
void ExitGames::Client::Photon::StatusCode::_set_TimeoutDisconnect(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_TimeoutDisconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "TimeoutDisconnect", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode DisconnectByServerTimeout
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_DisconnectByServerTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_DisconnectByServerTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "DisconnectByServerTimeout"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode DisconnectByServerTimeout
void ExitGames::Client::Photon::StatusCode::_set_DisconnectByServerTimeout(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_DisconnectByServerTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "DisconnectByServerTimeout", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode DisconnectByServerUserLimit
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_DisconnectByServerUserLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_DisconnectByServerUserLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "DisconnectByServerUserLimit"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode DisconnectByServerUserLimit
void ExitGames::Client::Photon::StatusCode::_set_DisconnectByServerUserLimit(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_DisconnectByServerUserLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "DisconnectByServerUserLimit", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode DisconnectByServerLogic
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_DisconnectByServerLogic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_DisconnectByServerLogic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "DisconnectByServerLogic"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode DisconnectByServerLogic
void ExitGames::Client::Photon::StatusCode::_set_DisconnectByServerLogic(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_DisconnectByServerLogic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "DisconnectByServerLogic", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode DisconnectByServerReasonUnknown
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_DisconnectByServerReasonUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_DisconnectByServerReasonUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "DisconnectByServerReasonUnknown"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode DisconnectByServerReasonUnknown
void ExitGames::Client::Photon::StatusCode::_set_DisconnectByServerReasonUnknown(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_DisconnectByServerReasonUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "DisconnectByServerReasonUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode EncryptionEstablished
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_EncryptionEstablished() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_EncryptionEstablished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "EncryptionEstablished"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode EncryptionEstablished
void ExitGames::Client::Photon::StatusCode::_set_EncryptionEstablished(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_EncryptionEstablished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "EncryptionEstablished", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.StatusCode EncryptionFailedToEstablish
::ExitGames::Client::Photon::StatusCode ExitGames::Client::Photon::StatusCode::_get_EncryptionFailedToEstablish() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_get_EncryptionFailedToEstablish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::StatusCode>("ExitGames.Client.Photon", "StatusCode", "EncryptionFailedToEstablish"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.StatusCode EncryptionFailedToEstablish
void ExitGames::Client::Photon::StatusCode::_set_EncryptionFailedToEstablish(::ExitGames::Client::Photon::StatusCode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::_set_EncryptionFailedToEstablish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "StatusCode", "EncryptionFailedToEstablish", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::StatusCode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StatusCode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.IPhotonPeerListener
#include "ExitGames/Client/Photon/IPhotonPeerListener.hpp"
// Including type: ExitGames.Client.Photon.DebugLevel
#include "ExitGames/Client/Photon/DebugLevel.hpp"
// Including type: ExitGames.Client.Photon.OperationResponse
#include "ExitGames/Client/Photon/OperationResponse.hpp"
// Including type: ExitGames.Client.Photon.StatusCode
#include "ExitGames/Client/Photon/StatusCode.hpp"
// Including type: ExitGames.Client.Photon.EventData
#include "ExitGames/Client/Photon/EventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ExitGames.Client.Photon.IPhotonPeerListener.DebugReturn
void ExitGames::Client::Photon::IPhotonPeerListener::DebugReturn(::ExitGames::Client::Photon::DebugLevel level, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonPeerListener::DebugReturn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IPhotonPeerListener*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, level, message);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonPeerListener.OnOperationResponse
void ExitGames::Client::Photon::IPhotonPeerListener::OnOperationResponse(::ExitGames::Client::Photon::OperationResponse* operationResponse) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonPeerListener::OnOperationResponse");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IPhotonPeerListener*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, operationResponse);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonPeerListener.OnStatusChanged
void ExitGames::Client::Photon::IPhotonPeerListener::OnStatusChanged(::ExitGames::Client::Photon::StatusCode statusCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonPeerListener::OnStatusChanged");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IPhotonPeerListener*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, statusCode);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonPeerListener.OnEvent
void ExitGames::Client::Photon::IPhotonPeerListener::OnEvent(::ExitGames::Client::Photon::EventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonPeerListener::OnEvent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IPhotonPeerListener*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.PhotonSocketState
#include "ExitGames/Client/Photon/PhotonSocketState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketState Disconnected
::ExitGames::Client::Photon::PhotonSocketState ExitGames::Client::Photon::PhotonSocketState::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketState>("ExitGames.Client.Photon", "PhotonSocketState", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketState Disconnected
void ExitGames::Client::Photon::PhotonSocketState::_set_Disconnected(::ExitGames::Client::Photon::PhotonSocketState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketState", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketState Connecting
::ExitGames::Client::Photon::PhotonSocketState ExitGames::Client::Photon::PhotonSocketState::_get_Connecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::_get_Connecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketState>("ExitGames.Client.Photon", "PhotonSocketState", "Connecting"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketState Connecting
void ExitGames::Client::Photon::PhotonSocketState::_set_Connecting(::ExitGames::Client::Photon::PhotonSocketState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::_set_Connecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketState", "Connecting", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketState Connected
::ExitGames::Client::Photon::PhotonSocketState ExitGames::Client::Photon::PhotonSocketState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketState>("ExitGames.Client.Photon", "PhotonSocketState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketState Connected
void ExitGames::Client::Photon::PhotonSocketState::_set_Connected(::ExitGames::Client::Photon::PhotonSocketState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketState Disconnecting
::ExitGames::Client::Photon::PhotonSocketState ExitGames::Client::Photon::PhotonSocketState::_get_Disconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::_get_Disconnecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketState>("ExitGames.Client.Photon", "PhotonSocketState", "Disconnecting"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketState Disconnecting
void ExitGames::Client::Photon::PhotonSocketState::_set_Disconnecting(::ExitGames::Client::Photon::PhotonSocketState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::_set_Disconnecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketState", "Disconnecting", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::PhotonSocketState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.PhotonSocketError
#include "ExitGames/Client/Photon/PhotonSocketError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketError Success
::ExitGames::Client::Photon::PhotonSocketError ExitGames::Client::Photon::PhotonSocketError::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketError>("ExitGames.Client.Photon", "PhotonSocketError", "Success"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketError Success
void ExitGames::Client::Photon::PhotonSocketError::_set_Success(::ExitGames::Client::Photon::PhotonSocketError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketError", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketError Skipped
::ExitGames::Client::Photon::PhotonSocketError ExitGames::Client::Photon::PhotonSocketError::_get_Skipped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_get_Skipped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketError>("ExitGames.Client.Photon", "PhotonSocketError", "Skipped"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketError Skipped
void ExitGames::Client::Photon::PhotonSocketError::_set_Skipped(::ExitGames::Client::Photon::PhotonSocketError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_set_Skipped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketError", "Skipped", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketError NoData
::ExitGames::Client::Photon::PhotonSocketError ExitGames::Client::Photon::PhotonSocketError::_get_NoData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_get_NoData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketError>("ExitGames.Client.Photon", "PhotonSocketError", "NoData"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketError NoData
void ExitGames::Client::Photon::PhotonSocketError::_set_NoData(::ExitGames::Client::Photon::PhotonSocketError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_set_NoData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketError", "NoData", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketError Exception
::ExitGames::Client::Photon::PhotonSocketError ExitGames::Client::Photon::PhotonSocketError::_get_Exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_get_Exception");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketError>("ExitGames.Client.Photon", "PhotonSocketError", "Exception"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketError Exception
void ExitGames::Client::Photon::PhotonSocketError::_set_Exception(::ExitGames::Client::Photon::PhotonSocketError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_set_Exception");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketError", "Exception", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.PhotonSocketError Busy
::ExitGames::Client::Photon::PhotonSocketError ExitGames::Client::Photon::PhotonSocketError::_get_Busy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_get_Busy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::PhotonSocketError>("ExitGames.Client.Photon", "PhotonSocketError", "Busy"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.PhotonSocketError Busy
void ExitGames::Client::Photon::PhotonSocketError::_set_Busy(::ExitGames::Client::Photon::PhotonSocketError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::_set_Busy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "PhotonSocketError", "Busy", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::PhotonSocketError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonSocketError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.IPhotonSocket
#include "ExitGames/Client/Photon/IPhotonSocket.hpp"
// Including type: ExitGames.Client.Photon.IPhotonSocket/<>c
#include "ExitGames/Client/Photon/IPhotonSocket_--c.hpp"
// Including type: ExitGames.Client.Photon.PeerBase
#include "ExitGames/Client/Photon/PeerBase.hpp"
// Including type: ExitGames.Client.Photon.IPhotonPeerListener
#include "ExitGames/Client/Photon/IPhotonPeerListener.hpp"
// Including type: ExitGames.Client.Photon.PhotonSocketError
#include "ExitGames/Client/Photon/PhotonSocketError.hpp"
// Including type: ExitGames.Client.Photon.DebugLevel
#include "ExitGames/Client/Photon/DebugLevel.hpp"
// Including type: ExitGames.Client.Photon.StatusCode
#include "ExitGames/Client/Photon/StatusCode.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String <ServerIpAddress>k__BackingField
::StringW ExitGames::Client::Photon::IPhotonSocket::_get_$ServerIpAddress$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::_get_$ServerIpAddress$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::StringW>("ExitGames.Client.Photon", "IPhotonSocket", "<ServerIpAddress>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.String <ServerIpAddress>k__BackingField
void ExitGames::Client::Photon::IPhotonSocket::_set_$ServerIpAddress$k__BackingField(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::_set_$ServerIpAddress$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "IPhotonSocket", "<ServerIpAddress>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: protected internal ExitGames.Client.Photon.PeerBase peerBase
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::PeerBase*& ExitGames::Client::Photon::IPhotonSocket::dyn_peerBase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_peerBase");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "peerBase"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::PeerBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected readonly ExitGames.Client.Photon.ConnectionProtocol Protocol
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::ConnectionProtocol& ExitGames::Client::Photon::IPhotonSocket::dyn_Protocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_Protocol");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Protocol"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::ConnectionProtocol*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean PollReceive
[[deprecated("Use field access instead!")]] bool& ExitGames::Client::Photon::IPhotonSocket::dyn_PollReceive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_PollReceive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PollReceive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ExitGames.Client.Photon.PhotonSocketState <State>k__BackingField
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::PhotonSocketState& ExitGames::Client::Photon::IPhotonSocket::dyn_$State$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_$State$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<State>k__BackingField"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::PhotonSocketState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String ConnectAddress
[[deprecated("Use field access instead!")]] ::StringW& ExitGames::Client::Photon::IPhotonSocket::dyn_ConnectAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_ConnectAddress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectAddress"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <ServerAddress>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& ExitGames::Client::Photon::IPhotonSocket::dyn_$ServerAddress$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_$ServerAddress$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ServerAddress>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <ProxyServerAddress>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& ExitGames::Client::Photon::IPhotonSocket::dyn_$ProxyServerAddress$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_$ProxyServerAddress$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ProxyServerAddress>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <ServerPort>k__BackingField
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::IPhotonSocket::dyn_$ServerPort$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_$ServerPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ServerPort>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <AddressResolvedAsIpv6>k__BackingField
[[deprecated("Use field access instead!")]] bool& ExitGames::Client::Photon::IPhotonSocket::dyn_$AddressResolvedAsIpv6$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_$AddressResolvedAsIpv6$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AddressResolvedAsIpv6>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <UrlProtocol>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& ExitGames::Client::Photon::IPhotonSocket::dyn_$UrlProtocol$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_$UrlProtocol$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UrlProtocol>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <UrlPath>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& ExitGames::Client::Photon::IPhotonSocket::dyn_$UrlPath$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::dyn_$UrlPath$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UrlPath>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_Listener
::ExitGames::Client::Photon::IPhotonPeerListener* ExitGames::Client::Photon::IPhotonSocket::get_Listener() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_Listener");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Listener", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::IPhotonPeerListener*, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_MTU
int ExitGames::Client::Photon::IPhotonSocket::get_MTU() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_MTU");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MTU", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_State
::ExitGames::Client::Photon::PhotonSocketState ExitGames::Client::Photon::IPhotonSocket::get_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_State");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_State", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::PhotonSocketState, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.set_State
void ExitGames::Client::Photon::IPhotonSocket::set_State(::ExitGames::Client::Photon::PhotonSocketState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::set_State");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_State", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_Connected
bool ExitGames::Client::Photon::IPhotonSocket::get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_Connected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Connected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_ServerAddress
::StringW ExitGames::Client::Photon::IPhotonSocket::get_ServerAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_ServerAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ServerAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.set_ServerAddress
void ExitGames::Client::Photon::IPhotonSocket::set_ServerAddress(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::set_ServerAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ServerAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_ProxyServerAddress
::StringW ExitGames::Client::Photon::IPhotonSocket::get_ProxyServerAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_ProxyServerAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProxyServerAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.set_ProxyServerAddress
void ExitGames::Client::Photon::IPhotonSocket::set_ProxyServerAddress(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::set_ProxyServerAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ProxyServerAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_ServerIpAddress
::StringW ExitGames::Client::Photon::IPhotonSocket::get_ServerIpAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_ServerIpAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ExitGames.Client.Photon", "IPhotonSocket", "get_ServerIpAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.set_ServerIpAddress
void ExitGames::Client::Photon::IPhotonSocket::set_ServerIpAddress(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::set_ServerIpAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ExitGames.Client.Photon", "IPhotonSocket", "set_ServerIpAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_ServerPort
int ExitGames::Client::Photon::IPhotonSocket::get_ServerPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_ServerPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ServerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.set_ServerPort
void ExitGames::Client::Photon::IPhotonSocket::set_ServerPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::set_ServerPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ServerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_AddressResolvedAsIpv6
bool ExitGames::Client::Photon::IPhotonSocket::get_AddressResolvedAsIpv6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_AddressResolvedAsIpv6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AddressResolvedAsIpv6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.set_AddressResolvedAsIpv6
void ExitGames::Client::Photon::IPhotonSocket::set_AddressResolvedAsIpv6(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::set_AddressResolvedAsIpv6");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AddressResolvedAsIpv6", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_UrlProtocol
::StringW ExitGames::Client::Photon::IPhotonSocket::get_UrlProtocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_UrlProtocol");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UrlProtocol", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.set_UrlProtocol
void ExitGames::Client::Photon::IPhotonSocket::set_UrlProtocol(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::set_UrlProtocol");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UrlProtocol", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_UrlPath
::StringW ExitGames::Client::Photon::IPhotonSocket::get_UrlPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_UrlPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UrlPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.set_UrlPath
void ExitGames::Client::Photon::IPhotonSocket::set_UrlPath(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::set_UrlPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UrlPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.get_SerializationProtocol
::StringW ExitGames::Client::Photon::IPhotonSocket::get_SerializationProtocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::get_SerializationProtocol");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SerializationProtocol", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.Connect
bool ExitGames::Client::Photon::IPhotonSocket::Connect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::Connect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IPhotonSocket*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.Disconnect
bool ExitGames::Client::Photon::IPhotonSocket::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::Disconnect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IPhotonSocket*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.Send
::ExitGames::Client::Photon::PhotonSocketError ExitGames::Client::Photon::IPhotonSocket::Send(::ArrayW<uint8_t> data, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::Send");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IPhotonSocket*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::PhotonSocketError, false>(this, ___internal__method, data, length);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.Receive
::ExitGames::Client::Photon::PhotonSocketError ExitGames::Client::Photon::IPhotonSocket::Receive(ByRef<::ArrayW<uint8_t>> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::Receive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IPhotonSocket*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::PhotonSocketError, false>(this, ___internal__method, byref(data));
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.HandleReceivedDatagram
void ExitGames::Client::Photon::IPhotonSocket::HandleReceivedDatagram(::ArrayW<uint8_t> inBuffer, int length, bool willBeReused) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::HandleReceivedDatagram");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleReceivedDatagram", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inBuffer), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(willBeReused)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, inBuffer, length, willBeReused);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.ReportDebugOfLevel
bool ExitGames::Client::Photon::IPhotonSocket::ReportDebugOfLevel(::ExitGames::Client::Photon::DebugLevel levelOfMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::ReportDebugOfLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportDebugOfLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelOfMessage)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, levelOfMessage);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.EnqueueDebugReturn
void ExitGames::Client::Photon::IPhotonSocket::EnqueueDebugReturn(::ExitGames::Client::Photon::DebugLevel debugLevel, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::EnqueueDebugReturn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnqueueDebugReturn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(debugLevel), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, debugLevel, message);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.HandleException
void ExitGames::Client::Photon::IPhotonSocket::HandleException(::ExitGames::Client::Photon::StatusCode statusCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::HandleException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(statusCode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, statusCode);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.TryParseAddress
bool ExitGames::Client::Photon::IPhotonSocket::TryParseAddress(::StringW url, ByRef<::StringW> address, ByRef<uint16_t> port, ByRef<::StringW> urlProtocol, ByRef<::StringW> urlPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::TryParseAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryParseAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url), ::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractIndependentType<uint16_t&>(), ::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractIndependentType<::StringW&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, url, byref(address), byref(port), byref(urlProtocol), byref(urlPath));
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.IpAddressTryParse
bool ExitGames::Client::Photon::IPhotonSocket::IpAddressTryParse(::StringW strIP, ByRef<::System::Net::IPAddress*> address) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::IpAddressTryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IpAddressTryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(strIP), ::il2cpp_utils::ExtractIndependentType<::System::Net::IPAddress*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, strIP, byref(address));
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.GetIpAddresses
::ArrayW<::System::Net::IPAddress*> ExitGames::Client::Photon::IPhotonSocket::GetIpAddresses(::StringW hostname) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::GetIpAddresses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIpAddresses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostname)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Net::IPAddress*>, false>(this, ___internal__method, hostname);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.AddressSortComparer
int ExitGames::Client::Photon::IPhotonSocket::AddressSortComparer(::System::Net::IPAddress* x, ::System::Net::IPAddress* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::AddressSortComparer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddressSortComparer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x, y);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.GetIpAddress
::System::Net::IPAddress* ExitGames::Client::Photon::IPhotonSocket::GetIpAddress(::StringW address) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::GetIpAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ExitGames.Client.Photon", "IPhotonSocket", "GetIpAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(address)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Net::IPAddress*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, address);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket.<HandleException>b__52_0
void ExitGames::Client::Photon::IPhotonSocket::$HandleException$b__52_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::<HandleException>b__52_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleException>b__52_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.IPhotonSocket/<>c
#include "ExitGames/Client/Photon/IPhotonSocket_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly ExitGames.Client.Photon.IPhotonSocket/<>c <>9
::ExitGames::Client::Photon::IPhotonSocket::$$c* ExitGames::Client::Photon::IPhotonSocket::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::IPhotonSocket::$$c*>("ExitGames.Client.Photon", "IPhotonSocket/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly ExitGames.Client.Photon.IPhotonSocket/<>c <>9
void ExitGames::Client::Photon::IPhotonSocket::$$c::_set_$$9(::ExitGames::Client::Photon::IPhotonSocket::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "IPhotonSocket/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Net.IPAddress,System.String> <>9__55_0
::System::Func_2<::System::Net::IPAddress*, ::StringW>* ExitGames::Client::Photon::IPhotonSocket::$$c::_get_$$9__55_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::$$c::_get_$$9__55_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Net::IPAddress*, ::StringW>*>("ExitGames.Client.Photon", "IPhotonSocket/<>c", "<>9__55_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Net.IPAddress,System.String> <>9__55_0
void ExitGames::Client::Photon::IPhotonSocket::$$c::_set_$$9__55_0(::System::Func_2<::System::Net::IPAddress*, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::$$c::_set_$$9__55_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "IPhotonSocket/<>c", "<>9__55_0", value)));
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket/<>c..cctor
void ExitGames::Client::Photon::IPhotonSocket::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ExitGames.Client.Photon", "IPhotonSocket/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IPhotonSocket/<>c.<GetIpAddresses>b__55_0
::StringW ExitGames::Client::Photon::IPhotonSocket::$$c::$GetIpAddresses$b__55_0(::System::Net::IPAddress* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IPhotonSocket::$$c::<GetIpAddresses>b__55_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetIpAddresses>b__55_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.SerializationProtocol
#include "ExitGames/Client/Photon/SerializationProtocol.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.SerializationProtocol GpBinaryV16
::ExitGames::Client::Photon::SerializationProtocol ExitGames::Client::Photon::SerializationProtocol::_get_GpBinaryV16() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::SerializationProtocol::_get_GpBinaryV16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::SerializationProtocol>("ExitGames.Client.Photon", "SerializationProtocol", "GpBinaryV16"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.SerializationProtocol GpBinaryV16
void ExitGames::Client::Photon::SerializationProtocol::_set_GpBinaryV16(::ExitGames::Client::Photon::SerializationProtocol value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::SerializationProtocol::_set_GpBinaryV16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "SerializationProtocol", "GpBinaryV16", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.SerializationProtocol GpBinaryV18
::ExitGames::Client::Photon::SerializationProtocol ExitGames::Client::Photon::SerializationProtocol::_get_GpBinaryV18() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::SerializationProtocol::_get_GpBinaryV18");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::SerializationProtocol>("ExitGames.Client.Photon", "SerializationProtocol", "GpBinaryV18"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.SerializationProtocol GpBinaryV18
void ExitGames::Client::Photon::SerializationProtocol::_set_GpBinaryV18(::ExitGames::Client::Photon::SerializationProtocol value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::SerializationProtocol::_set_GpBinaryV18");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "SerializationProtocol", "GpBinaryV18", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::SerializationProtocol::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::SerializationProtocol::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.SerializationProtocolFactory
#include "ExitGames/Client/Photon/SerializationProtocolFactory.hpp"
// Including type: ExitGames.Client.Photon.IProtocol
#include "ExitGames/Client/Photon/IProtocol.hpp"
// Including type: ExitGames.Client.Photon.SerializationProtocol
#include "ExitGames/Client/Photon/SerializationProtocol.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ExitGames.Client.Photon.SerializationProtocolFactory.Create
::ExitGames::Client::Photon::IProtocol* ExitGames::Client::Photon::SerializationProtocolFactory::Create(::ExitGames::Client::Photon::SerializationProtocol serializationProtocol) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::SerializationProtocolFactory::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ExitGames.Client.Photon", "SerializationProtocolFactory", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializationProtocol)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::IProtocol*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, serializationProtocol);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ExitGames.Client.Photon.IProtocol
#include "ExitGames/Client/Photon/IProtocol.hpp"
// Including type: ExitGames.Client.Photon.IProtocol/DeserializationFlags
#include "ExitGames/Client/Photon/IProtocol_DeserializationFlags.hpp"
// Including type: ExitGames.Client.Photon.ByteArraySlicePool
#include "ExitGames/Client/Photon/ByteArraySlicePool.hpp"
// Including type: ExitGames.Client.Photon.StreamBuffer
#include "ExitGames/Client/Photon/StreamBuffer.hpp"
// Including type: ExitGames.Client.Photon.EventData
#include "ExitGames/Client/Photon/EventData.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: ExitGames.Client.Photon.ParameterDictionary
#include "ExitGames/Client/Photon/ParameterDictionary.hpp"
// Including type: ExitGames.Client.Photon.OperationResponse
#include "ExitGames/Client/Photon/OperationResponse.hpp"
// Including type: ExitGames.Client.Photon.OperationRequest
#include "ExitGames/Client/Photon/OperationRequest.hpp"
// Including type: ExitGames.Client.Photon.DisconnectMessage
#include "ExitGames/Client/Photon/DisconnectMessage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly ExitGames.Client.Photon.ByteArraySlicePool ByteArraySlicePool
[[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::ByteArraySlicePool*& ExitGames::Client::Photon::IProtocol::dyn_ByteArraySlicePool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::dyn_ByteArraySlicePool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ByteArraySlicePool"))->offset;
  return *reinterpret_cast<::ExitGames::Client::Photon::ByteArraySlicePool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.get_ProtocolType
::StringW ExitGames::Client::Photon::IProtocol::get_ProtocolType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::get_ProtocolType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.get_VersionBytes
::ArrayW<uint8_t> ExitGames::Client::Photon::IProtocol::get_VersionBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::get_VersionBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.Serialize
void ExitGames::Client::Photon::IProtocol::Serialize(::ExitGames::Client::Photon::StreamBuffer* dout, ::Il2CppObject* serObject, bool setType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::Serialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dout, serObject, setType);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.SerializeShort
void ExitGames::Client::Photon::IProtocol::SerializeShort(::ExitGames::Client::Photon::StreamBuffer* dout, int16_t serObject, bool setType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::SerializeShort");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dout, serObject, setType);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.SerializeString
void ExitGames::Client::Photon::IProtocol::SerializeString(::ExitGames::Client::Photon::StreamBuffer* dout, ::StringW serObject, bool setType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::SerializeString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dout, serObject, setType);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.SerializeEventData
void ExitGames::Client::Photon::IProtocol::SerializeEventData(::ExitGames::Client::Photon::StreamBuffer* stream, ::ExitGames::Client::Photon::EventData* serObject, bool setType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::SerializeEventData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, serObject, setType);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.SerializeOperationRequest
void ExitGames::Client::Photon::IProtocol::SerializeOperationRequest(::ExitGames::Client::Photon::StreamBuffer* stream, uint8_t operationCode, ::System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppObject*>* parameters, bool setType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::SerializeOperationRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, operationCode, parameters, setType);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.SerializeOperationRequest
void ExitGames::Client::Photon::IProtocol::SerializeOperationRequest(::ExitGames::Client::Photon::StreamBuffer* stream, uint8_t operationCode, ::ExitGames::Client::Photon::ParameterDictionary* parameters, bool setType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::SerializeOperationRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, operationCode, parameters, setType);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.SerializeOperationResponse
void ExitGames::Client::Photon::IProtocol::SerializeOperationResponse(::ExitGames::Client::Photon::StreamBuffer* stream, ::ExitGames::Client::Photon::OperationResponse* serObject, bool setType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::SerializeOperationResponse");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, serObject, setType);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.Deserialize
::Il2CppObject* ExitGames::Client::Photon::IProtocol::Deserialize(::ExitGames::Client::Photon::StreamBuffer* din, uint8_t type, ::ExitGames::Client::Photon::IProtocol::DeserializationFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::Deserialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, din, type, flags);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.DeserializeShort
int16_t ExitGames::Client::Photon::IProtocol::DeserializeShort(::ExitGames::Client::Photon::StreamBuffer* din) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializeShort");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method, din);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.DeserializeByte
uint8_t ExitGames::Client::Photon::IProtocol::DeserializeByte(::ExitGames::Client::Photon::StreamBuffer* din) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializeByte");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method, din);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.DeserializeEventData
::ExitGames::Client::Photon::EventData* ExitGames::Client::Photon::IProtocol::DeserializeEventData(::ExitGames::Client::Photon::StreamBuffer* din, ::ExitGames::Client::Photon::EventData* target, ::ExitGames::Client::Photon::IProtocol::DeserializationFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializeEventData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::EventData*, false>(this, ___internal__method, din, target, flags);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.DeserializeOperationRequest
::ExitGames::Client::Photon::OperationRequest* ExitGames::Client::Photon::IProtocol::DeserializeOperationRequest(::ExitGames::Client::Photon::StreamBuffer* din, ::ExitGames::Client::Photon::IProtocol::DeserializationFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializeOperationRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::OperationRequest*, false>(this, ___internal__method, din, flags);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.DeserializeOperationResponse
::ExitGames::Client::Photon::OperationResponse* ExitGames::Client::Photon::IProtocol::DeserializeOperationResponse(::ExitGames::Client::Photon::StreamBuffer* stream, ::ExitGames::Client::Photon::IProtocol::DeserializationFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializeOperationResponse");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::OperationResponse*, false>(this, ___internal__method, stream, flags);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.DeserializeDisconnectMessage
::ExitGames::Client::Photon::DisconnectMessage* ExitGames::Client::Photon::IProtocol::DeserializeDisconnectMessage(::ExitGames::Client::Photon::StreamBuffer* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializeDisconnectMessage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::IProtocol*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::DisconnectMessage*, false>(this, ___internal__method, stream);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.Serialize
::ArrayW<uint8_t> ExitGames::Client::Photon::IProtocol::Serialize(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::Serialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method, obj);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.Deserialize
::Il2CppObject* ExitGames::Client::Photon::IProtocol::Deserialize(::ExitGames::Client::Photon::StreamBuffer* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, stream);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.Deserialize
::Il2CppObject* ExitGames::Client::Photon::IProtocol::Deserialize(::ArrayW<uint8_t> serializedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializedData)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, serializedData);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.DeserializeMessage
::Il2CppObject* ExitGames::Client::Photon::IProtocol::DeserializeMessage(::ExitGames::Client::Photon::StreamBuffer* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializeMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeserializeMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, stream);
}
// Autogenerated method: ExitGames.Client.Photon.IProtocol.SerializeMessage
void ExitGames::Client::Photon::IProtocol::SerializeMessage(::ExitGames::Client::Photon::StreamBuffer* ms, ::Il2CppObject* msg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::SerializeMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ms), ::il2cpp_utils::ExtractType(msg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ms, msg);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.IProtocol/DeserializationFlags
#include "ExitGames/Client/Photon/IProtocol_DeserializationFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.IProtocol/DeserializationFlags None
::ExitGames::Client::Photon::IProtocol::DeserializationFlags ExitGames::Client::Photon::IProtocol::DeserializationFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializationFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::IProtocol::DeserializationFlags>("ExitGames.Client.Photon", "IProtocol/DeserializationFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.IProtocol/DeserializationFlags None
void ExitGames::Client::Photon::IProtocol::DeserializationFlags::_set_None(::ExitGames::Client::Photon::IProtocol::DeserializationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializationFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "IProtocol/DeserializationFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.IProtocol/DeserializationFlags AllowPooledByteArray
::ExitGames::Client::Photon::IProtocol::DeserializationFlags ExitGames::Client::Photon::IProtocol::DeserializationFlags::_get_AllowPooledByteArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializationFlags::_get_AllowPooledByteArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::IProtocol::DeserializationFlags>("ExitGames.Client.Photon", "IProtocol/DeserializationFlags", "AllowPooledByteArray"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.IProtocol/DeserializationFlags AllowPooledByteArray
void ExitGames::Client::Photon::IProtocol::DeserializationFlags::_set_AllowPooledByteArray(::ExitGames::Client::Photon::IProtocol::DeserializationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializationFlags::_set_AllowPooledByteArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "IProtocol/DeserializationFlags", "AllowPooledByteArray", value));
}
// Autogenerated static field getter
// Get static field: static public ExitGames.Client.Photon.IProtocol/DeserializationFlags WrapIncomingStructs
::ExitGames::Client::Photon::IProtocol::DeserializationFlags ExitGames::Client::Photon::IProtocol::DeserializationFlags::_get_WrapIncomingStructs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializationFlags::_get_WrapIncomingStructs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::IProtocol::DeserializationFlags>("ExitGames.Client.Photon", "IProtocol/DeserializationFlags", "WrapIncomingStructs"));
}
// Autogenerated static field setter
// Set static field: static public ExitGames.Client.Photon.IProtocol/DeserializationFlags WrapIncomingStructs
void ExitGames::Client::Photon::IProtocol::DeserializationFlags::_set_WrapIncomingStructs(::ExitGames::Client::Photon::IProtocol::DeserializationFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializationFlags::_set_WrapIncomingStructs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ExitGames.Client.Photon", "IProtocol/DeserializationFlags", "WrapIncomingStructs", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& ExitGames::Client::Photon::IProtocol::DeserializationFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::IProtocol::DeserializationFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.ITrafficRecorder
#include "ExitGames/Client/Photon/ITrafficRecorder.hpp"
// Including type: ExitGames.Client.Photon.IPhotonSocket
#include "ExitGames/Client/Photon/IPhotonSocket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ExitGames.Client.Photon.ITrafficRecorder.get_Enabled
bool ExitGames::Client::Photon::ITrafficRecorder::get_Enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ITrafficRecorder::get_Enabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::ITrafficRecorder*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ExitGames.Client.Photon.ITrafficRecorder.set_Enabled
void ExitGames::Client::Photon::ITrafficRecorder::set_Enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ITrafficRecorder::set_Enabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::ITrafficRecorder*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ExitGames.Client.Photon.ITrafficRecorder.Record
void ExitGames::Client::Photon::ITrafficRecorder::Record(::ArrayW<uint8_t> inBuffer, int length, bool incoming, int16_t peerId, ::ExitGames::Client::Photon::IPhotonSocket* connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ITrafficRecorder::Record");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::ExitGames::Client::Photon::ITrafficRecorder*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, inBuffer, length, incoming, peerId, connection);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ExitGames.Client.Photon.NCommandPool
#include "ExitGames/Client/Photon/NCommandPool.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: ExitGames.Client.Photon.NCommand
#include "ExitGames/Client/Photon/NCommand.hpp"
// Including type: ExitGames.Client.Photon.EnetPeer
#include "ExitGames/Client/Photon/EnetPeer.hpp"
// Including type: ExitGames.Client.Photon.StreamBuffer
#include "ExitGames/Client/Photon/StreamBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Stack`1<ExitGames.Client.Photon.NCommand> pool
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::NCommand*>*& ExitGames::Client::Photon::NCommandPool::dyn_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::NCommandPool::dyn_pool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pool"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::NCommand*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ExitGames.Client.Photon.NCommandPool.Acquire
::ExitGames::Client::Photon::NCommand* ExitGames::Client::Photon::NCommandPool::Acquire(::ExitGames::Client::Photon::EnetPeer* peer, ::ArrayW<uint8_t> inBuff, ByRef<int> readingOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::NCommandPool::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(inBuff), ::il2cpp_utils::ExtractType(readingOffset)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::NCommand*, false>(this, ___internal__method, peer, inBuff, byref(readingOffset));
}
// Autogenerated method: ExitGames.Client.Photon.NCommandPool.Acquire
::ExitGames::Client::Photon::NCommand* ExitGames::Client::Photon::NCommandPool::Acquire(::ExitGames::Client::Photon::EnetPeer* peer, uint8_t commandType, ::ExitGames::Client::Photon::StreamBuffer* payload, uint8_t channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::NCommandPool::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(commandType), ::il2cpp_utils::ExtractType(payload), ::il2cpp_utils::ExtractType(channel)})));
  return ::il2cpp_utils::RunMethodRethrow<::ExitGames::Client::Photon::NCommand*, false>(this, ___internal__method, peer, commandType, payload, channel);
}
// Autogenerated method: ExitGames.Client.Photon.NCommandPool.Release
void ExitGames::Client::Photon::NCommandPool::Release(::ExitGames::Client::Photon::NCommand* nCommand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::NCommandPool::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nCommand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nCommand);
}
