// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.SemaphoreFullException
#include "System/Threading/SemaphoreFullException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.SendOrPostCallback.Invoke
void System::Threading::SendOrPostCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SendOrPostCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SendOrPostCallback*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.SynchronizationLockException
#include "System/Threading/SynchronizationLockException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Lowest
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Lowest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Lowest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Lowest"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Lowest
void System::Threading::ThreadPriority::_set_Lowest(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Lowest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Lowest", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority BelowNormal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_BelowNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_BelowNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "BelowNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority BelowNormal
void System::Threading::ThreadPriority::_set_BelowNormal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_BelowNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "BelowNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Normal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Normal
void System::Threading::ThreadPriority::_set_Normal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority AboveNormal
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_AboveNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_AboveNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "AboveNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority AboveNormal
void System::Threading::ThreadPriority::_set_AboveNormal(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_AboveNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "AboveNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPriority Highest
::System::Threading::ThreadPriority System::Threading::ThreadPriority::_get_Highest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_get_Highest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPriority>("System.Threading", "ThreadPriority", "Highest"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPriority Highest
void System::Threading::ThreadPriority::_set_Highest(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::_set_Highest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPriority", "Highest", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPriority::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPriority::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadStart
#include "System/Threading/ThreadStart.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadStart.Invoke
void System::Threading::ThreadStart::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadStart::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::ThreadStart*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadState
#include "System/Threading/ThreadState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Running
::System::Threading::ThreadState System::Threading::ThreadState::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Running"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Running
void System::Threading::ThreadState::_set_Running(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState StopRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_StopRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_StopRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "StopRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState StopRequested
void System::Threading::ThreadState::_set_StopRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_StopRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "StopRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState SuspendRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_SuspendRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_SuspendRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "SuspendRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState SuspendRequested
void System::Threading::ThreadState::_set_SuspendRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_SuspendRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "SuspendRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Background
::System::Threading::ThreadState System::Threading::ThreadState::_get_Background() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Background");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Background"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Background
void System::Threading::ThreadState::_set_Background(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Background");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Background", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Unstarted
::System::Threading::ThreadState System::Threading::ThreadState::_get_Unstarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Unstarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Unstarted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Unstarted
void System::Threading::ThreadState::_set_Unstarted(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Unstarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Unstarted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Stopped
::System::Threading::ThreadState System::Threading::ThreadState::_get_Stopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Stopped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Stopped"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Stopped
void System::Threading::ThreadState::_set_Stopped(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Stopped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Stopped", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState WaitSleepJoin
::System::Threading::ThreadState System::Threading::ThreadState::_get_WaitSleepJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_WaitSleepJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "WaitSleepJoin"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState WaitSleepJoin
void System::Threading::ThreadState::_set_WaitSleepJoin(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_WaitSleepJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "WaitSleepJoin", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Suspended
::System::Threading::ThreadState System::Threading::ThreadState::_get_Suspended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Suspended");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Suspended"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Suspended
void System::Threading::ThreadState::_set_Suspended(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Suspended");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Suspended", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState AbortRequested
::System::Threading::ThreadState System::Threading::ThreadState::_get_AbortRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_AbortRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "AbortRequested"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState AbortRequested
void System::Threading::ThreadState::_set_AbortRequested(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_AbortRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "AbortRequested", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadState Aborted
::System::Threading::ThreadState System::Threading::ThreadState::_get_Aborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_get_Aborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadState>("System.Threading", "ThreadState", "Aborted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadState Aborted
void System::Threading::ThreadState::_set_Aborted(::System::Threading::ThreadState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::_set_Aborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadState", "Aborted", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadStateException
#include "System/Threading/ThreadStateException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Timeout
#include "System/Threading/Timeout.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.TimeSpan InfiniteTimeSpan
::System::TimeSpan System::Threading::Timeout::_get_InfiniteTimeSpan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::_get_InfiniteTimeSpan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::TimeSpan>("System.Threading", "Timeout", "InfiniteTimeSpan"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.TimeSpan InfiniteTimeSpan
void System::Threading::Timeout::_set_InfiniteTimeSpan(::System::TimeSpan value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::_set_InfiniteTimeSpan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timeout", "InfiniteTimeSpan", value));
}
// Autogenerated method: System.Threading.Timeout..cctor
void System::Threading::Timeout::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timeout::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timeout", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.WaitHandleCannotBeOpenedException
#include "System/Threading/WaitHandleCannotBeOpenedException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.CancellationToken/<>c
#include "System/Threading/CancellationToken_--c.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.CancellationTokenRegistration
#include "System/Threading/CancellationTokenRegistration.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_actionToActionObjShunt
::System::Action_1<::Il2CppObject*>* System::Threading::CancellationToken::_get_s_actionToActionObjShunt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::_get_s_actionToActionObjShunt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading", "CancellationToken", "s_actionToActionObjShunt"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_actionToActionObjShunt
void System::Threading::CancellationToken::_set_s_actionToActionObjShunt(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::_set_s_actionToActionObjShunt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationToken", "s_actionToActionObjShunt", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.CancellationTokenSource _source
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& System::Threading::CancellationToken::dyn__source() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::dyn__source");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_source"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationToken.get_None
::System::Threading::CancellationToken System::Threading::CancellationToken::get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::get_None");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", "get_None", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationToken, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.get_IsCancellationRequested
bool System::Threading::CancellationToken::get_IsCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::get_IsCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.get_CanBeCanceled
bool System::Threading::CancellationToken::get_CanBeCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::get_CanBeCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_CanBeCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken..ctor
// ABORTED elsewhere.  System::Threading::CancellationToken::CancellationToken(::System::Threading::CancellationTokenSource* source)
// Autogenerated method: System.Threading.CancellationToken..ctor
System::Threading::CancellationToken::CancellationToken(bool canceled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canceled)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, canceled);
}
// Autogenerated method: System.Threading.CancellationToken.Register
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::Register(::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback);
}
// Autogenerated method: System.Threading.CancellationToken.Register
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::Register(::System::Action* callback, bool useSynchronizationContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(useSynchronizationContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, useSynchronizationContext);
}
// Autogenerated method: System.Threading.CancellationToken.Register
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::Register(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, state);
}
// Autogenerated method: System.Threading.CancellationToken.InternalRegisterWithoutEC
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::InternalRegisterWithoutEC(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::InternalRegisterWithoutEC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InternalRegisterWithoutEC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, state);
}
// Autogenerated method: System.Threading.CancellationToken.Register
::System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::Register(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* state, bool useSynchronizationContext, bool useExecutionContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(useSynchronizationContext), ::il2cpp_utils::ExtractType(useExecutionContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, state, useSynchronizationContext, useExecutionContext);
}
// Autogenerated method: System.Threading.CancellationToken.Equals
bool System::Threading::CancellationToken::Equals(::System::Threading::CancellationToken other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: System.Threading.CancellationToken.ThrowIfCancellationRequested
void System::Threading::CancellationToken::ThrowIfCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::ThrowIfCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ThrowIfCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.ThrowOperationCanceledException
void System::Threading::CancellationToken::ThrowOperationCanceledException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::ThrowOperationCanceledException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ThrowOperationCanceledException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken..cctor
void System::Threading::CancellationToken::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.Equals
bool System::Threading::CancellationToken::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: System.Threading.CancellationToken.GetHashCode
int System::Threading::CancellationToken::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken.op_Equality
bool System::Threading::operator ==(const ::System::Threading::CancellationToken& left, const ::System::Threading::CancellationToken& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: System.Threading.CancellationToken.op_Inequality
bool System::Threading::operator !=(const ::System::Threading::CancellationToken& left, const ::System::Threading::CancellationToken& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationToken/<>c
#include "System/Threading/CancellationToken_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.CancellationToken/<>c <>9
::System::Threading::CancellationToken::$$c* System::Threading::CancellationToken::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::CancellationToken::$$c*>("System.Threading", "CancellationToken/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.CancellationToken/<>c <>9
void System::Threading::CancellationToken::$$c::_set_$$9(::System::Threading::CancellationToken::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "CancellationToken/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.CancellationToken/<>c..cctor
void System::Threading::CancellationToken::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationToken/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationToken/<>c.<.cctor>b__26_0
void System::Threading::CancellationToken::$$c::$_cctor$b__26_0(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationToken::$$c::<.cctor>b__26_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__26_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 DEFAULT_SPIN_SP
int System::Threading::ManualResetEventSlim::_get_DEFAULT_SPIN_SP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_DEFAULT_SPIN_SP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "DEFAULT_SPIN_SP"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 DEFAULT_SPIN_SP
void System::Threading::ManualResetEventSlim::_set_DEFAULT_SPIN_SP(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_DEFAULT_SPIN_SP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "DEFAULT_SPIN_SP", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SignalledState_BitMask
int System::Threading::ManualResetEventSlim::_get_SignalledState_BitMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SignalledState_BitMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SignalledState_BitMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SignalledState_BitMask
void System::Threading::ManualResetEventSlim::_set_SignalledState_BitMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SignalledState_BitMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SignalledState_BitMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SignalledState_ShiftCount
int System::Threading::ManualResetEventSlim::_get_SignalledState_ShiftCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SignalledState_ShiftCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SignalledState_ShiftCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SignalledState_ShiftCount
void System::Threading::ManualResetEventSlim::_set_SignalledState_ShiftCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SignalledState_ShiftCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SignalledState_ShiftCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 Dispose_BitMask
int System::Threading::ManualResetEventSlim::_get_Dispose_BitMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_Dispose_BitMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "Dispose_BitMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 Dispose_BitMask
void System::Threading::ManualResetEventSlim::_set_Dispose_BitMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_Dispose_BitMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "Dispose_BitMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SpinCountState_BitMask
int System::Threading::ManualResetEventSlim::_get_SpinCountState_BitMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SpinCountState_BitMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SpinCountState_BitMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SpinCountState_BitMask
void System::Threading::ManualResetEventSlim::_set_SpinCountState_BitMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SpinCountState_BitMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SpinCountState_BitMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SpinCountState_ShiftCount
int System::Threading::ManualResetEventSlim::_get_SpinCountState_ShiftCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SpinCountState_ShiftCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SpinCountState_ShiftCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SpinCountState_ShiftCount
void System::Threading::ManualResetEventSlim::_set_SpinCountState_ShiftCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SpinCountState_ShiftCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SpinCountState_ShiftCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SpinCountState_MaxValue
int System::Threading::ManualResetEventSlim::_get_SpinCountState_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_SpinCountState_MaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "SpinCountState_MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SpinCountState_MaxValue
void System::Threading::ManualResetEventSlim::_set_SpinCountState_MaxValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_SpinCountState_MaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "SpinCountState_MaxValue", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NumWaitersState_BitMask
int System::Threading::ManualResetEventSlim::_get_NumWaitersState_BitMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_NumWaitersState_BitMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "NumWaitersState_BitMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NumWaitersState_BitMask
void System::Threading::ManualResetEventSlim::_set_NumWaitersState_BitMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_NumWaitersState_BitMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "NumWaitersState_BitMask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NumWaitersState_ShiftCount
int System::Threading::ManualResetEventSlim::_get_NumWaitersState_ShiftCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_NumWaitersState_ShiftCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "NumWaitersState_ShiftCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NumWaitersState_ShiftCount
void System::Threading::ManualResetEventSlim::_set_NumWaitersState_ShiftCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_NumWaitersState_ShiftCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "NumWaitersState_ShiftCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NumWaitersState_MaxValue
int System::Threading::ManualResetEventSlim::_get_NumWaitersState_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_NumWaitersState_MaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ManualResetEventSlim", "NumWaitersState_MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NumWaitersState_MaxValue
void System::Threading::ManualResetEventSlim::_set_NumWaitersState_MaxValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_NumWaitersState_MaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "NumWaitersState_MaxValue", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> s_cancellationTokenCallback
::System::Action_1<::Il2CppObject*>* System::Threading::ManualResetEventSlim::_get_s_cancellationTokenCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_get_s_cancellationTokenCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading", "ManualResetEventSlim", "s_cancellationTokenCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> s_cancellationTokenCallback
void System::Threading::ManualResetEventSlim::_set_s_cancellationTokenCallback(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::_set_s_cancellationTokenCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ManualResetEventSlim", "s_cancellationTokenCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_lock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::ManualResetEventSlim::dyn_m_lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::dyn_m_lock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_lock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent m_eventObj
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::ManualResetEventSlim::dyn_m_eventObj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::dyn_m_eventObj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_eventObj"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_combinedState
[[deprecated("Use field access instead!")]] int& System::Threading::ManualResetEventSlim::dyn_m_combinedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::dyn_m_combinedState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_combinedState"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.get_WaitHandle
::System::Threading::WaitHandle* System::Threading::ManualResetEventSlim::get_WaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::get_WaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.get_IsSet
bool System::Threading::ManualResetEventSlim::get_IsSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::get_IsSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.set_IsSet
void System::Threading::ManualResetEventSlim::set_IsSet(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::set_IsSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.get_SpinCount
int System::Threading::ManualResetEventSlim::get_SpinCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::get_SpinCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SpinCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.set_SpinCount
void System::Threading::ManualResetEventSlim::set_SpinCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::set_SpinCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SpinCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.get_Waiters
int System::Threading::ManualResetEventSlim::get_Waiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::get_Waiters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Waiters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.set_Waiters
void System::Threading::ManualResetEventSlim::set_Waiters(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::set_Waiters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Waiters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Initialize
void System::Threading::ManualResetEventSlim::Initialize(bool initialState, int spinCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initialState), ::il2cpp_utils::ExtractType(spinCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initialState, spinCount);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.EnsureLockObjectCreated
void System::Threading::ManualResetEventSlim::EnsureLockObjectCreated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::EnsureLockObjectCreated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureLockObjectCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.LazyInitializeEvent
bool System::Threading::ManualResetEventSlim::LazyInitializeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::LazyInitializeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInitializeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Set
void System::Threading::ManualResetEventSlim::Set() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Set
void System::Threading::ManualResetEventSlim::Set(bool duringCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duringCancellation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duringCancellation);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Reset
void System::Threading::ManualResetEventSlim::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Wait
void System::Threading::ManualResetEventSlim::Wait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Wait
bool System::Threading::ManualResetEventSlim::Wait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Dispose
void System::Threading::ManualResetEventSlim::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::ManualResetEventSlim*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.Dispose
void System::Threading::ManualResetEventSlim::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::ManualResetEventSlim*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.ThrowIfDisposed
void System::Threading::ManualResetEventSlim::ThrowIfDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::ThrowIfDisposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.CancellationTokenCallback
void System::Threading::ManualResetEventSlim::CancellationTokenCallback(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::CancellationTokenCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ManualResetEventSlim", "CancellationTokenCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.UpdateStateAtomically
void System::Threading::ManualResetEventSlim::UpdateStateAtomically(int newBits, int updateBitsMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::UpdateStateAtomically");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStateAtomically", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(updateBitsMask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newBits, updateBitsMask);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.ExtractStatePortionAndShiftRight
int System::Threading::ManualResetEventSlim::ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::ExtractStatePortionAndShiftRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ManualResetEventSlim", "ExtractStatePortionAndShiftRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(rightBitShiftCount)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state, mask, rightBitShiftCount);
}
// Autogenerated method: System.Threading.ManualResetEventSlim.ExtractStatePortion
int System::Threading::ManualResetEventSlim::ExtractStatePortion(int state, int mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::ExtractStatePortion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ManualResetEventSlim", "ExtractStatePortion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state, mask);
}
// Autogenerated method: System.Threading.ManualResetEventSlim..cctor
void System::Threading::ManualResetEventSlim::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ManualResetEventSlim::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ManualResetEventSlim", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.SpinWait
#include "System/Threading/SpinWait.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Int32 SpinCountforSpinBeforeWait
int System::Threading::SpinWait::_get_SpinCountforSpinBeforeWait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::_get_SpinCountforSpinBeforeWait");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "SpinWait", "SpinCountforSpinBeforeWait"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 SpinCountforSpinBeforeWait
void System::Threading::SpinWait::_set_SpinCountforSpinBeforeWait(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::_set_SpinCountforSpinBeforeWait");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SpinWait", "SpinCountforSpinBeforeWait", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _count
[[deprecated("Use field access instead!")]] int& System::Threading::SpinWait::dyn__count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::dyn__count");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SpinWait.get_Count
int System::Threading::SpinWait::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinWait.get_NextSpinWillYield
bool System::Threading::SpinWait::get_NextSpinWillYield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::get_NextSpinWillYield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_NextSpinWillYield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinWait.SpinOnce
void System::Threading::SpinWait::SpinOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::SpinOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SpinOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinWait.SpinOnce
void System::Threading::SpinWait::SpinOnce(int sleep1Threshold) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::SpinOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SpinOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sleep1Threshold)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sleep1Threshold);
}
// Autogenerated method: System.Threading.SpinWait.SpinOnceCore
void System::Threading::SpinWait::SpinOnceCore(int sleep1Threshold) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::SpinOnceCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SpinOnceCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sleep1Threshold)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sleep1Threshold);
}
// Autogenerated method: System.Threading.SpinWait..cctor
void System::Threading::SpinWait::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinWait::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SpinWait", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.PlatformHelper
#include "System/Threading/PlatformHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 s_processorCount
int System::Threading::PlatformHelper::_get_s_processorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_get_s_processorCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "PlatformHelper", "s_processorCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 s_processorCount
void System::Threading::PlatformHelper::_set_s_processorCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_set_s_processorCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "PlatformHelper", "s_processorCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 s_lastProcessorCountRefreshTicks
int System::Threading::PlatformHelper::_get_s_lastProcessorCountRefreshTicks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_get_s_lastProcessorCountRefreshTicks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "PlatformHelper", "s_lastProcessorCountRefreshTicks"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 s_lastProcessorCountRefreshTicks
void System::Threading::PlatformHelper::_set_s_lastProcessorCountRefreshTicks(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_set_s_lastProcessorCountRefreshTicks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "PlatformHelper", "s_lastProcessorCountRefreshTicks", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Boolean IsSingleProcessor
bool System::Threading::PlatformHelper::_get_IsSingleProcessor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_get_IsSingleProcessor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "PlatformHelper", "IsSingleProcessor"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Boolean IsSingleProcessor
void System::Threading::PlatformHelper::_set_IsSingleProcessor(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::_set_IsSingleProcessor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "PlatformHelper", "IsSingleProcessor", value));
}
// Autogenerated method: System.Threading.PlatformHelper.get_ProcessorCount
int System::Threading::PlatformHelper::get_ProcessorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::get_ProcessorCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "PlatformHelper", "get_ProcessorCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.PlatformHelper..cctor
void System::Threading::PlatformHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::PlatformHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "PlatformHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.TimeoutHelper
#include "System/Threading/TimeoutHelper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.TimeoutHelper.GetTime
uint System::Threading::TimeoutHelper::GetTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimeoutHelper::GetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "TimeoutHelper", "GetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.TimeoutHelper.UpdateTimeOut
int System::Threading::TimeoutHelper::UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimeoutHelper::UpdateTimeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "TimeoutHelper", "UpdateTimeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(originalWaitMillisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, startTime, originalWaitMillisecondsTimeout);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationTokenRegistration
#include "System/Threading/CancellationTokenRegistration.hpp"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.CancellationCallbackInfo m_callbackInfo
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationCallbackInfo*& System::Threading::CancellationTokenRegistration::dyn_m_callbackInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::dyn_m_callbackInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_callbackInfo"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationCallbackInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.SparselyPopulatedArrayAddInfo`1<System.Threading.CancellationCallbackInfo> m_registrationInfo
[[deprecated("Use field access instead!")]] ::System::Threading::SparselyPopulatedArrayAddInfo_1<::System::Threading::CancellationCallbackInfo*>& System::Threading::CancellationTokenRegistration::dyn_m_registrationInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::dyn_m_registrationInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_registrationInfo"))->offset;
  return *reinterpret_cast<::System::Threading::SparselyPopulatedArrayAddInfo_1<::System::Threading::CancellationCallbackInfo*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration..ctor
// ABORTED elsewhere.  System::Threading::CancellationTokenRegistration::CancellationTokenRegistration(::System::Threading::CancellationCallbackInfo* callbackInfo, ::System::Threading::SparselyPopulatedArrayAddInfo_1<::System::Threading::CancellationCallbackInfo*> registrationInfo)
// Autogenerated method: System.Threading.CancellationTokenRegistration.Unregister
bool System::Threading::CancellationTokenRegistration::Unregister() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration.Dispose
void System::Threading::CancellationTokenRegistration::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::CancellationTokenRegistration), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration.Equals
bool System::Threading::CancellationTokenRegistration::Equals(::System::Threading::CancellationTokenRegistration other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::CancellationTokenRegistration), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration.Equals
bool System::Threading::CancellationTokenRegistration::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.CancellationTokenRegistration.GetHashCode
int System::Threading::CancellationTokenRegistration::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenRegistration::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Threading.CancellationTokenSource/Linked1CancellationTokenSource
#include "System/Threading/CancellationTokenSource_Linked1CancellationTokenSource.hpp"
// Including type: System.Threading.CancellationTokenSource/Linked2CancellationTokenSource
#include "System/Threading/CancellationTokenSource_Linked2CancellationTokenSource.hpp"
// Including type: System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource
#include "System/Threading/CancellationTokenSource_LinkedNCancellationTokenSource.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Threading.SparselyPopulatedArray`1
#include "System/Threading/SparselyPopulatedArray_1.hpp"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.CancellationTokenRegistration
#include "System/Threading/CancellationTokenRegistration.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.CancellationCallbackCoreWorkArguments
#include "System/Threading/CancellationCallbackCoreWorkArguments.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Threading.CancellationTokenSource s_canceledSource
::System::Threading::CancellationTokenSource* System::Threading::CancellationTokenSource::_get_s_canceledSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_s_canceledSource");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::CancellationTokenSource*>("System.Threading", "CancellationTokenSource", "s_canceledSource"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Threading.CancellationTokenSource s_canceledSource
void System::Threading::CancellationTokenSource::_set_s_canceledSource(::System::Threading::CancellationTokenSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_s_canceledSource");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "s_canceledSource", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Threading.CancellationTokenSource s_neverCanceledSource
::System::Threading::CancellationTokenSource* System::Threading::CancellationTokenSource::_get_s_neverCanceledSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_s_neverCanceledSource");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::CancellationTokenSource*>("System.Threading", "CancellationTokenSource", "s_neverCanceledSource"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Threading.CancellationTokenSource s_neverCanceledSource
void System::Threading::CancellationTokenSource::_set_s_neverCanceledSource(::System::Threading::CancellationTokenSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_s_neverCanceledSource");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "s_neverCanceledSource", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 s_nLists
int System::Threading::CancellationTokenSource::_get_s_nLists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_s_nLists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "s_nLists"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 s_nLists
void System::Threading::CancellationTokenSource::_set_s_nLists(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_s_nLists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "s_nLists", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 CannotBeCanceled
int System::Threading::CancellationTokenSource::_get_CannotBeCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_CannotBeCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "CannotBeCanceled"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 CannotBeCanceled
void System::Threading::CancellationTokenSource::_set_CannotBeCanceled(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_CannotBeCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "CannotBeCanceled", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NotCanceledState
int System::Threading::CancellationTokenSource::_get_NotCanceledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_NotCanceledState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "NotCanceledState"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NotCanceledState
void System::Threading::CancellationTokenSource::_set_NotCanceledState(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_NotCanceledState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "NotCanceledState", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NotifyingState
int System::Threading::CancellationTokenSource::_get_NotifyingState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_NotifyingState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "NotifyingState"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NotifyingState
void System::Threading::CancellationTokenSource::_set_NotifyingState(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_NotifyingState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "NotifyingState", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NotifyingCompleteState
int System::Threading::CancellationTokenSource::_get_NotifyingCompleteState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_NotifyingCompleteState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "CancellationTokenSource", "NotifyingCompleteState"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NotifyingCompleteState
void System::Threading::CancellationTokenSource::_set_NotifyingCompleteState(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_NotifyingCompleteState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "NotifyingCompleteState", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.TimerCallback s_timerCallback
::System::Threading::TimerCallback* System::Threading::CancellationTokenSource::_get_s_timerCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_get_s_timerCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::TimerCallback*>("System.Threading", "CancellationTokenSource", "s_timerCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.TimerCallback s_timerCallback
void System::Threading::CancellationTokenSource::_set_s_timerCallback(::System::Threading::TimerCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::_set_s_timerCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource", "s_timerCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent _kernelEvent
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::CancellationTokenSource::dyn__kernelEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn__kernelEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_kernelEvent"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SparselyPopulatedArray`1<System.Threading.CancellationCallbackInfo>[] _registeredCallbacksLists
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::SparselyPopulatedArray_1<::System::Threading::CancellationCallbackInfo*>*>& System::Threading::CancellationTokenSource::dyn__registeredCallbacksLists() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn__registeredCallbacksLists");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_registeredCallbacksLists"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::SparselyPopulatedArray_1<::System::Threading::CancellationCallbackInfo*>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _state
[[deprecated("Use field access instead!")]] int& System::Threading::CancellationTokenSource::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _threadIDExecutingCallbacks
[[deprecated("Use field access instead!")]] int& System::Threading::CancellationTokenSource::dyn__threadIDExecutingCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn__threadIDExecutingCallbacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_threadIDExecutingCallbacks"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
[[deprecated("Use field access instead!")]] bool& System::Threading::CancellationTokenSource::dyn__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.CancellationCallbackInfo _executingCallback
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationCallbackInfo*& System::Threading::CancellationTokenSource::dyn__executingCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn__executingCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_executingCallback"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationCallbackInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Timer _timer
[[deprecated("Use field access instead!")]] ::System::Threading::Timer*& System::Threading::CancellationTokenSource::dyn__timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::dyn__timer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timer"))->offset;
  return *reinterpret_cast<::System::Threading::Timer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_IsCancellationRequested
bool System::Threading::CancellationTokenSource::get_IsCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_IsCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_IsCancellationCompleted
bool System::Threading::CancellationTokenSource::get_IsCancellationCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_IsCancellationCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_IsDisposed
bool System::Threading::CancellationTokenSource::get_IsDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_IsDisposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_ThreadIDExecutingCallbacks
int System::Threading::CancellationTokenSource::get_ThreadIDExecutingCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_ThreadIDExecutingCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ThreadIDExecutingCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.set_ThreadIDExecutingCallbacks
void System::Threading::CancellationTokenSource::set_ThreadIDExecutingCallbacks(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::set_ThreadIDExecutingCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ThreadIDExecutingCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_Token
::System::Threading::CancellationToken System::Threading::CancellationTokenSource::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationToken, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.get_ExecutingCallback
::System::Threading::CancellationCallbackInfo* System::Threading::CancellationTokenSource::get_ExecutingCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::get_ExecutingCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutingCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationCallbackInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.InitializeWithTimer
void System::Threading::CancellationTokenSource::InitializeWithTimer(int millisecondsDelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::InitializeWithTimer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeWithTimer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsDelay);
}
// Autogenerated method: System.Threading.CancellationTokenSource.Cancel
void System::Threading::CancellationTokenSource::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.Cancel
void System::Threading::CancellationTokenSource::Cancel(bool throwOnFirstException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(throwOnFirstException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, throwOnFirstException);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CancelAfter
void System::Threading::CancellationTokenSource::CancelAfter(int millisecondsDelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CancelAfter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsDelay);
}
// Autogenerated method: System.Threading.CancellationTokenSource.TimerCallbackLogic
void System::Threading::CancellationTokenSource::TimerCallbackLogic(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::TimerCallbackLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "TimerCallbackLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.CancellationTokenSource.Dispose
void System::Threading::CancellationTokenSource::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::CancellationTokenSource*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.Dispose
void System::Threading::CancellationTokenSource::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::CancellationTokenSource*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.CancellationTokenSource.ThrowIfDisposed
void System::Threading::CancellationTokenSource::ThrowIfDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::ThrowIfDisposed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.ThrowObjectDisposedException
void System::Threading::CancellationTokenSource::ThrowObjectDisposedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::ThrowObjectDisposedException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "ThrowObjectDisposedException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource.InternalRegister
::System::Threading::CancellationTokenRegistration System::Threading::CancellationTokenSource::InternalRegister(::System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* stateForCallback, ::System::Threading::SynchronizationContext* targetSyncContext, ::System::Threading::ExecutionContext* executionContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::InternalRegister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(stateForCallback), ::il2cpp_utils::ExtractType(targetSyncContext), ::il2cpp_utils::ExtractType(executionContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenRegistration, false>(this, ___internal__method, callback, stateForCallback, targetSyncContext, executionContext);
}
// Autogenerated method: System.Threading.CancellationTokenSource.NotifyCancellation
void System::Threading::CancellationTokenSource::NotifyCancellation(bool throwOnFirstException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::NotifyCancellation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyCancellation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(throwOnFirstException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, throwOnFirstException);
}
// Autogenerated method: System.Threading.CancellationTokenSource.ExecuteCallbackHandlers
void System::Threading::CancellationTokenSource::ExecuteCallbackHandlers(bool throwOnFirstException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::ExecuteCallbackHandlers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteCallbackHandlers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(throwOnFirstException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, throwOnFirstException);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CancellationCallbackCoreWork_OnSyncContext
void System::Threading::CancellationTokenSource::CancellationCallbackCoreWork_OnSyncContext(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CancellationCallbackCoreWork_OnSyncContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancellationCallbackCoreWork_OnSyncContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CancellationCallbackCoreWork
void System::Threading::CancellationTokenSource::CancellationCallbackCoreWork(::System::Threading::CancellationCallbackCoreWorkArguments args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CancellationCallbackCoreWork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancellationCallbackCoreWork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CreateLinkedTokenSource
::System::Threading::CancellationTokenSource* System::Threading::CancellationTokenSource::CreateLinkedTokenSource(::System::Threading::CancellationToken token1, ::System::Threading::CancellationToken token2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CreateLinkedTokenSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "CreateLinkedTokenSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token1), ::il2cpp_utils::ExtractType(token2)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenSource*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, token1, token2);
}
// Autogenerated method: System.Threading.CancellationTokenSource.CreateLinkedTokenSource
::System::Threading::CancellationTokenSource* System::Threading::CancellationTokenSource::CreateLinkedTokenSource(::System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::CreateLinkedTokenSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", "CreateLinkedTokenSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationTokenSource*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, token);
}
// Autogenerated method: System.Threading.CancellationTokenSource.WaitForCallbackToComplete
void System::Threading::CancellationTokenSource::WaitForCallbackToComplete(::System::Threading::CancellationCallbackInfo* callbackInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::WaitForCallbackToComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitForCallbackToComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callbackInfo);
}
// Autogenerated method: System.Threading.CancellationTokenSource..cctor
void System::Threading::CancellationTokenSource::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.CancellationTokenSource/Linked1CancellationTokenSource
#include "System/Threading/CancellationTokenSource_Linked1CancellationTokenSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.CancellationTokenRegistration _reg1
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenRegistration& System::Threading::CancellationTokenSource::Linked1CancellationTokenSource::dyn__reg1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Linked1CancellationTokenSource::dyn__reg1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reg1"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenRegistration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationTokenSource/Linked1CancellationTokenSource.Dispose
void System::Threading::CancellationTokenSource::Linked1CancellationTokenSource::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Linked1CancellationTokenSource::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::CancellationTokenSource*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.CancellationTokenSource/Linked2CancellationTokenSource
#include "System/Threading/CancellationTokenSource_Linked2CancellationTokenSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.CancellationTokenRegistration _reg1
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenRegistration& System::Threading::CancellationTokenSource::Linked2CancellationTokenSource::dyn__reg1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Linked2CancellationTokenSource::dyn__reg1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reg1"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenRegistration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.CancellationTokenRegistration _reg2
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenRegistration& System::Threading::CancellationTokenSource::Linked2CancellationTokenSource::dyn__reg2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Linked2CancellationTokenSource::dyn__reg2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reg2"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenRegistration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationTokenSource/Linked2CancellationTokenSource.Dispose
void System::Threading::CancellationTokenSource::Linked2CancellationTokenSource::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::Linked2CancellationTokenSource::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::CancellationTokenSource*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource
#include "System/Threading/CancellationTokenSource_LinkedNCancellationTokenSource.hpp"
// Including type: System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource/<>c
#include "System/Threading/CancellationTokenSource_LinkedNCancellationTokenSource_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Action`1<System.Object> s_linkedTokenCancelDelegate
::System::Action_1<::Il2CppObject*>* System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::_get_s_linkedTokenCancelDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::_get_s_linkedTokenCancelDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading", "CancellationTokenSource/LinkedNCancellationTokenSource", "s_linkedTokenCancelDelegate"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Action`1<System.Object> s_linkedTokenCancelDelegate
void System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::_set_s_linkedTokenCancelDelegate(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::_set_s_linkedTokenCancelDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource/LinkedNCancellationTokenSource", "s_linkedTokenCancelDelegate", value));
}
// Autogenerated method: System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource..cctor
void System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource/LinkedNCancellationTokenSource", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource/<>c
#include "System/Threading/CancellationTokenSource_LinkedNCancellationTokenSource_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource/<>c <>9
::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c* System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c*>("System.Threading", "CancellationTokenSource/LinkedNCancellationTokenSource/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource/<>c <>9
void System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c::_set_$$9(::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "CancellationTokenSource/LinkedNCancellationTokenSource/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource/<>c..cctor
void System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationTokenSource/LinkedNCancellationTokenSource/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.CancellationTokenSource/LinkedNCancellationTokenSource/<>c.<.cctor>b__4_0
void System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c::$_cctor$b__4_0(::Il2CppObject* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationTokenSource::LinkedNCancellationTokenSource::$$c::<.cctor>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.CancellationCallbackCoreWorkArguments
#include "System/Threading/CancellationCallbackCoreWorkArguments.hpp"
// Including type: System.Threading.SparselyPopulatedArrayFragment`1
#include "System/Threading/SparselyPopulatedArrayFragment_1.hpp"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.SparselyPopulatedArrayFragment`1<System.Threading.CancellationCallbackInfo> _currArrayFragment
[[deprecated("Use field access instead!")]] ::System::Threading::SparselyPopulatedArrayFragment_1<::System::Threading::CancellationCallbackInfo*>*& System::Threading::CancellationCallbackCoreWorkArguments::dyn__currArrayFragment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackCoreWorkArguments::dyn__currArrayFragment");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currArrayFragment"))->offset;
  return *reinterpret_cast<::System::Threading::SparselyPopulatedArrayFragment_1<::System::Threading::CancellationCallbackInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _currArrayIndex
[[deprecated("Use field access instead!")]] int& System::Threading::CancellationCallbackCoreWorkArguments::dyn__currArrayIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackCoreWorkArguments::dyn__currArrayIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currArrayIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationCallbackCoreWorkArguments..ctor
// ABORTED elsewhere.  System::Threading::CancellationCallbackCoreWorkArguments::CancellationCallbackCoreWorkArguments(::System::Threading::SparselyPopulatedArrayFragment_1<::System::Threading::CancellationCallbackInfo*>* currArrayFragment, int currArrayIndex)
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationCallbackInfo
#include "System/Threading/CancellationCallbackInfo.hpp"
// Including type: System.Threading.CancellationCallbackInfo/WithSyncContext
#include "System/Threading/CancellationCallbackInfo_WithSyncContext.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_executionContextCallback
::System::Threading::ContextCallback* System::Threading::CancellationCallbackInfo::_get_s_executionContextCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::_get_s_executionContextCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading", "CancellationCallbackInfo", "s_executionContextCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_executionContextCallback
void System::Threading::CancellationCallbackInfo::_set_s_executionContextCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::_set_s_executionContextCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationCallbackInfo", "s_executionContextCallback", value));
}
// Autogenerated instance field getter
// Get instance field: readonly System.Action`1<System.Object> Callback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppObject*>*& System::Threading::CancellationCallbackInfo::dyn_Callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_Callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Callback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Object StateForCallback
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::CancellationCallbackInfo::dyn_StateForCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_StateForCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "StateForCallback"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.ExecutionContext TargetExecutionContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::CancellationCallbackInfo::dyn_TargetExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_TargetExecutionContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TargetExecutionContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.CancellationTokenSource CancellationTokenSource
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& System::Threading::CancellationCallbackInfo::dyn_CancellationTokenSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::dyn_CancellationTokenSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CancellationTokenSource"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.CancellationCallbackInfo.ExecuteCallback
void System::Threading::CancellationCallbackInfo::ExecuteCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::ExecuteCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.CancellationCallbackInfo.ExecutionContextCallback
void System::Threading::CancellationCallbackInfo::ExecutionContextCallback(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::ExecutionContextCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "CancellationCallbackInfo", "ExecutionContextCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationCallbackInfo/WithSyncContext
#include "System/Threading/CancellationCallbackInfo_WithSyncContext.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.SynchronizationContext TargetSyncContext
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::CancellationCallbackInfo::WithSyncContext::dyn_TargetSyncContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::CancellationCallbackInfo::WithSyncContext::dyn_TargetSyncContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TargetSyncContext"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.LockHolder
#include "System/Threading/LockHolder.hpp"
// Including type: System.Threading.Lock
#include "System/Threading/Lock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.Lock _lock
[[deprecated("Use field access instead!")]] ::System::Threading::Lock*& System::Threading::LockHolder::dyn__lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockHolder::dyn__lock");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lock"))->offset;
  return *reinterpret_cast<::System::Threading::Lock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.LockHolder.Hold
::System::Threading::LockHolder System::Threading::LockHolder::Hold(::System::Threading::Lock* l) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockHolder::Hold");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "LockHolder", "Hold", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::LockHolder, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, l);
}
// Autogenerated method: System.Threading.LockHolder.Dispose
void System::Threading::LockHolder::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockHolder::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::LockHolder), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Lock
#include "System/Threading/Lock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Object _lock
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Lock::dyn__lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Lock::dyn__lock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Lock.Acquire
void System::Threading::Lock::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Lock::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Lock.Release
void System::Threading::Lock::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Lock::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SemaphoreSlim
#include "System/Threading/SemaphoreSlim.hpp"
// Including type: System.Threading.SemaphoreSlim/TaskNode
#include "System/Threading/SemaphoreSlim_TaskNode.hpp"
// Including type: System.Threading.SemaphoreSlim/<WaitUntilCountOrTimeoutAsync>d__32
#include "System/Threading/SemaphoreSlim_-WaitUntilCountOrTimeoutAsync-d__32.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.Task`1<System.Boolean> s_trueTask
::System::Threading::Tasks::Task_1<bool>* System::Threading::SemaphoreSlim::_get_s_trueTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_get_s_trueTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task_1<bool>*>("System.Threading", "SemaphoreSlim", "s_trueTask"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.Task`1<System.Boolean> s_trueTask
void System::Threading::SemaphoreSlim::_set_s_trueTask(::System::Threading::Tasks::Task_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_set_s_trueTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SemaphoreSlim", "s_trueTask", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.Task`1<System.Boolean> s_falseTask
::System::Threading::Tasks::Task_1<bool>* System::Threading::SemaphoreSlim::_get_s_falseTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_get_s_falseTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task_1<bool>*>("System.Threading", "SemaphoreSlim", "s_falseTask"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.Task`1<System.Boolean> s_falseTask
void System::Threading::SemaphoreSlim::_set_s_falseTask(::System::Threading::Tasks::Task_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_set_s_falseTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SemaphoreSlim", "s_falseTask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 NO_MAXIMUM
int System::Threading::SemaphoreSlim::_get_NO_MAXIMUM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_get_NO_MAXIMUM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "SemaphoreSlim", "NO_MAXIMUM"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 NO_MAXIMUM
void System::Threading::SemaphoreSlim::_set_NO_MAXIMUM(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_set_NO_MAXIMUM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SemaphoreSlim", "NO_MAXIMUM", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Object> s_cancellationTokenCanceledEventHandler
::System::Action_1<::Il2CppObject*>* System::Threading::SemaphoreSlim::_get_s_cancellationTokenCanceledEventHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_get_s_cancellationTokenCanceledEventHandler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading", "SemaphoreSlim", "s_cancellationTokenCanceledEventHandler"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Object> s_cancellationTokenCanceledEventHandler
void System::Threading::SemaphoreSlim::_set_s_cancellationTokenCanceledEventHandler(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::_set_s_cancellationTokenCanceledEventHandler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SemaphoreSlim", "s_cancellationTokenCanceledEventHandler", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_currentCount
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::dyn_m_currentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_currentCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_currentCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 m_maxCount
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::dyn_m_maxCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_maxCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_maxCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_waitCount
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::dyn_m_waitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_waitCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_waitCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_lockObj
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::SemaphoreSlim::dyn_m_lockObj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_lockObj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_lockObj"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent m_waitHandle
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::SemaphoreSlim::dyn_m_waitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_waitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_waitHandle"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SemaphoreSlim/TaskNode m_asyncHead
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::dyn_m_asyncHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_asyncHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_asyncHead"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SemaphoreSlim/TaskNode m_asyncTail
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::dyn_m_asyncTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::dyn_m_asyncTail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_asyncTail"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Wait
void System::Threading::SemaphoreSlim::Wait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Wait
bool System::Threading::SemaphoreSlim::Wait(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Wait
bool System::Threading::SemaphoreSlim::Wait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout
bool System::Threading::SemaphoreSlim::WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitUntilCountOrTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitUntilCountOrTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, startTime, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitAsync
::System::Threading::Tasks::Task* System::Threading::SemaphoreSlim::WaitAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitAsync
::System::Threading::Tasks::Task_1<bool>* System::Threading::SemaphoreSlim::WaitAsync(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.CreateAndAddAsyncWaiter
::System::Threading::SemaphoreSlim::TaskNode* System::Threading::SemaphoreSlim::CreateAndAddAsyncWaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::CreateAndAddAsyncWaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndAddAsyncWaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SemaphoreSlim::TaskNode*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.RemoveAsyncWaiter
bool System::Threading::SemaphoreSlim::RemoveAsyncWaiter(::System::Threading::SemaphoreSlim::TaskNode* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::RemoveAsyncWaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAsyncWaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.SemaphoreSlim.WaitUntilCountOrTimeoutAsync
::System::Threading::Tasks::Task_1<bool>* System::Threading::SemaphoreSlim::WaitUntilCountOrTimeoutAsync(::System::Threading::SemaphoreSlim::TaskNode* asyncWaiter, int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::WaitUntilCountOrTimeoutAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitUntilCountOrTimeoutAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncWaiter), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, asyncWaiter, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Release
int System::Threading::SemaphoreSlim::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Release
int System::Threading::SemaphoreSlim::Release(int releaseCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(releaseCount)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, releaseCount);
}
// Autogenerated method: System.Threading.SemaphoreSlim.QueueWaiterTask
void System::Threading::SemaphoreSlim::QueueWaiterTask(::System::Threading::SemaphoreSlim::TaskNode* waiterTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::QueueWaiterTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SemaphoreSlim", "QueueWaiterTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waiterTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waiterTask);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Dispose
void System::Threading::SemaphoreSlim::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SemaphoreSlim*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.Dispose
void System::Threading::SemaphoreSlim::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SemaphoreSlim*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.SemaphoreSlim.CancellationTokenCanceledEventHandler
void System::Threading::SemaphoreSlim::CancellationTokenCanceledEventHandler(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::CancellationTokenCanceledEventHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SemaphoreSlim", "CancellationTokenCanceledEventHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.SemaphoreSlim.CheckDispose
void System::Threading::SemaphoreSlim::CheckDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::CheckDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim.GetResourceString
::StringW System::Threading::SemaphoreSlim::GetResourceString(::StringW str) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::GetResourceString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SemaphoreSlim", "GetResourceString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str);
}
// Autogenerated method: System.Threading.SemaphoreSlim..cctor
void System::Threading::SemaphoreSlim::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SemaphoreSlim", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.SemaphoreSlim/TaskNode
#include "System/Threading/SemaphoreSlim_TaskNode.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.SemaphoreSlim/TaskNode Prev
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::TaskNode::dyn_Prev() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::TaskNode::dyn_Prev");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Prev"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.SemaphoreSlim/TaskNode Next
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::TaskNode::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::TaskNode::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SemaphoreSlim/TaskNode.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::SemaphoreSlim::TaskNode::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::TaskNode::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SemaphoreSlim::TaskNode*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim/TaskNode.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::SemaphoreSlim::TaskNode::System_Threading_IThreadPoolWorkItem_MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::TaskNode::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SemaphoreSlim::TaskNode*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SemaphoreSlim/<WaitUntilCountOrTimeoutAsync>d__32
#include "System/Threading/SemaphoreSlim_-WaitUntilCountOrTimeoutAsync-d__32.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.SemaphoreSlim/TaskNode
#include "System/Threading/SemaphoreSlim_TaskNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Boolean> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<bool>& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.CancellationToken cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_cancellationToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.SemaphoreSlim/TaskNode asyncWaiter
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim::TaskNode*& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_asyncWaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_asyncWaiter");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asyncWaiter"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim::TaskNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 millisecondsTimeout
[[deprecated("Use field access instead!")]] int& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_millisecondsTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_millisecondsTimeout");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "millisecondsTimeout"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.SemaphoreSlim <>4__this
[[deprecated("Use field access instead!")]] ::System::Threading::SemaphoreSlim*& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::System::Threading::SemaphoreSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.CancellationTokenSource <cts>5__2
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$cts$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$cts$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<cts>5__2"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>7__wrap2
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$7__wrap2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$7__wrap2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap2"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/ConfiguredTaskAwaiter<System.Threading.Tasks.Task> <>u__1
[[deprecated("Use field access instead!")]] typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<::System::Threading::Tasks::Task*>::ConfiguredTaskAwaiter& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<::System::Threading::Tasks::Task*>::ConfiguredTaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/ConfiguredTaskAwaiter<System.Boolean> <>u__2
[[deprecated("Use field access instead!")]] typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<bool>::ConfiguredTaskAwaiter& System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$u__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::dyn_$$u__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__2"))->offset;
  return *reinterpret_cast<typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<bool>::ConfiguredTaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SemaphoreSlim/<WaitUntilCountOrTimeoutAsync>d__32.MoveNext
void System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SemaphoreSlim/<WaitUntilCountOrTimeoutAsync>d__32.SetStateMachine
void System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::SemaphoreSlim::$WaitUntilCountOrTimeoutAsync$d__32), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.SpinLock
#include "System/Threading/SpinLock.hpp"
// Including type: System.Threading.SpinLock/SystemThreading_SpinLockDebugView
#include "System/Threading/SpinLock_SystemThreading_SpinLockDebugView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MAXIMUM_WAITERS
int System::Threading::SpinLock::_get_MAXIMUM_WAITERS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::_get_MAXIMUM_WAITERS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "SpinLock", "MAXIMUM_WAITERS"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAXIMUM_WAITERS
void System::Threading::SpinLock::_set_MAXIMUM_WAITERS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::_set_MAXIMUM_WAITERS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SpinLock", "MAXIMUM_WAITERS", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_owner
[[deprecated("Use field access instead!")]] int& System::Threading::SpinLock::dyn_m_owner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::dyn_m_owner");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_owner"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SpinLock..ctor
System::Threading::SpinLock::SpinLock(bool enableThreadOwnerTracking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enableThreadOwnerTracking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enableThreadOwnerTracking);
}
// Autogenerated method: System.Threading.SpinLock.Enter
void System::Threading::SpinLock::Enter(ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(lockTaken));
}
// Autogenerated method: System.Threading.SpinLock.TryEnter
void System::Threading::SpinLock::TryEnter(int millisecondsTimeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::TryEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.SpinLock.ContinueTryEnter
void System::Threading::SpinLock::ContinueTryEnter(int millisecondsTimeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::ContinueTryEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ContinueTryEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.SpinLock.DecrementWaiters
void System::Threading::SpinLock::DecrementWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::DecrementWaiters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "DecrementWaiters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock.ContinueTryEnterWithThreadTracking
void System::Threading::SpinLock::ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::ContinueTryEnterWithThreadTracking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ContinueTryEnterWithThreadTracking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, startTime, byref(lockTaken));
}
// Autogenerated method: System.Threading.SpinLock.Exit
void System::Threading::SpinLock::Exit(bool useMemoryBarrier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::Exit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Exit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(useMemoryBarrier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, useMemoryBarrier);
}
// Autogenerated method: System.Threading.SpinLock.ExitSlowPath
void System::Threading::SpinLock::ExitSlowPath(bool useMemoryBarrier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::ExitSlowPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ExitSlowPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(useMemoryBarrier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, useMemoryBarrier);
}
// Autogenerated method: System.Threading.SpinLock.get_IsHeldByCurrentThread
bool System::Threading::SpinLock::get_IsHeldByCurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::get_IsHeldByCurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsHeldByCurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock.get_IsThreadOwnerTrackingEnabled
bool System::Threading::SpinLock::get_IsThreadOwnerTrackingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::get_IsThreadOwnerTrackingEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsThreadOwnerTrackingEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock..cctor
void System::Threading::SpinLock::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SpinLock::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SpinLock", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.EventWaitHandle
#include "System/Threading/EventWaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.EventWaitHandle.Reset
bool System::Threading::EventWaitHandle::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventWaitHandle::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.EventWaitHandle.Set
bool System::Threading::EventWaitHandle::Set() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::EventWaitHandle::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ContextCallback.Invoke
void System::Threading::ContextCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ContextCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::ContextCallback*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ExecutionContextSwitcher
#include "System/Threading/ExecutionContextSwitcher.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.ExecutionContext/Reader outerEC
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext::Reader& System::Threading::ExecutionContextSwitcher::dyn_outerEC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::dyn_outerEC");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outerEC"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext::Reader*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean outerECBelongsToScope
[[deprecated("Use field access instead!")]] bool& System::Threading::ExecutionContextSwitcher::dyn_outerECBelongsToScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::dyn_outerECBelongsToScope");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outerECBelongsToScope"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object hecsw
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::ExecutionContextSwitcher::dyn_hecsw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::dyn_hecsw");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hecsw"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Thread thread
[[deprecated("Use field access instead!")]] ::System::Threading::Thread*& System::Threading::ExecutionContextSwitcher::dyn_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::dyn_thread");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread"))->offset;
  return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ExecutionContextSwitcher.UndoNoThrow
bool System::Threading::ExecutionContextSwitcher::UndoNoThrow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::UndoNoThrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "UndoNoThrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContextSwitcher.Undo
void System::Threading::ExecutionContextSwitcher::Undo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContextSwitcher::Undo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Undo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Threading.ExecutionContext/Reader
#include "System/Threading/ExecutionContext_Reader.hpp"
// Including type: System.Threading.ExecutionContext/CaptureOptions
#include "System/Threading/ExecutionContext_CaptureOptions.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Runtime.Remoting.Messaging.LogicalCallContext
#include "System/Runtime/Remoting/Messaging/LogicalCallContext.hpp"
// Including type: System.Runtime.Remoting.Messaging.IllogicalCallContext
#include "System/Runtime/Remoting/Messaging/IllogicalCallContext.hpp"
// Including type: System.Threading.IAsyncLocal
#include "System/Threading/IAsyncLocal.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.ExecutionContextSwitcher
#include "System/Threading/ExecutionContextSwitcher.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.ExecutionContext s_dummyDefaultEC
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::_get_s_dummyDefaultEC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::_get_s_dummyDefaultEC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext*>("System.Threading", "ExecutionContext", "s_dummyDefaultEC"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.ExecutionContext s_dummyDefaultEC
void System::Threading::ExecutionContext::_set_s_dummyDefaultEC(::System::Threading::ExecutionContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::_set_s_dummyDefaultEC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext", "s_dummyDefaultEC", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Threading.ExecutionContext Default
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext*>("System.Threading", "ExecutionContext", "Default"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Threading.ExecutionContext Default
void System::Threading::ExecutionContext::_set_Default(::System::Threading::ExecutionContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext", "Default", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SynchronizationContext _syncContext
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::ExecutionContext::dyn__syncContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__syncContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncContext"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SynchronizationContext _syncContextNoFlow
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::ExecutionContext::dyn__syncContextNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__syncContextNoFlow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncContextNoFlow"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext
[[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::Messaging::LogicalCallContext*& System::Threading::ExecutionContext::dyn__logicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__logicalCallContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_logicalCallContext"))->offset;
  return *reinterpret_cast<::System::Runtime::Remoting::Messaging::LogicalCallContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext
[[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::Messaging::IllogicalCallContext*& System::Threading::ExecutionContext::dyn__illogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__illogicalCallContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_illogicalCallContext"))->offset;
  return *reinterpret_cast<::System::Runtime::Remoting::Messaging::IllogicalCallContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext/Flags _flags
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext::Flags& System::Threading::ExecutionContext::dyn__flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__flags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flags"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext::Flags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Threading.IAsyncLocal,System.Object> _localValues
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Threading::IAsyncLocal*, ::Il2CppObject*>*& System::Threading::ExecutionContext::dyn__localValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__localValues");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localValues"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::System::Threading::IAsyncLocal*, ::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Threading.IAsyncLocal> _localChangeNotifications
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Threading::IAsyncLocal*>*& System::Threading::ExecutionContext::dyn__localChangeNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::dyn__localChangeNotifications");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localChangeNotifications"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Threading::IAsyncLocal*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ExecutionContext.get_isNewCapture
bool System::Threading::ExecutionContext::get_isNewCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_isNewCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isNewCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_isNewCapture
void System::Threading::ExecutionContext::set_isNewCapture(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_isNewCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isNewCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_isFlowSuppressed
bool System::Threading::ExecutionContext::get_isFlowSuppressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_isFlowSuppressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFlowSuppressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_isFlowSuppressed
void System::Threading::ExecutionContext::set_isFlowSuppressed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_isFlowSuppressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isFlowSuppressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_IsPreAllocatedDefault
bool System::Threading::ExecutionContext::get_IsPreAllocatedDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_IsPreAllocatedDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPreAllocatedDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.OnAsyncLocalContextChanged
void System::Threading::ExecutionContext::OnAsyncLocalContextChanged(::System::Threading::ExecutionContext* previous, ::System::Threading::ExecutionContext* current) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::OnAsyncLocalContextChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "OnAsyncLocalContextChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previous), ::il2cpp_utils::ExtractType(current)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, previous, current);
}
// Autogenerated method: System.Threading.ExecutionContext.get_LogicalCallContext
::System::Runtime::Remoting::Messaging::LogicalCallContext* System::Threading::ExecutionContext::get_LogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_LogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Messaging::LogicalCallContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_LogicalCallContext
void System::Threading::ExecutionContext::set_LogicalCallContext(::System::Runtime::Remoting::Messaging::LogicalCallContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_LogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_IllogicalCallContext
::System::Runtime::Remoting::Messaging::IllogicalCallContext* System::Threading::ExecutionContext::get_IllogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_IllogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IllogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Messaging::IllogicalCallContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_IllogicalCallContext
void System::Threading::ExecutionContext::set_IllogicalCallContext(::System::Runtime::Remoting::Messaging::IllogicalCallContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_IllogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IllogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_SynchronizationContext
::System::Threading::SynchronizationContext* System::Threading::ExecutionContext::get_SynchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_SynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_SynchronizationContext
void System::Threading::ExecutionContext::set_SynchronizationContext(::System::Threading::SynchronizationContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_SynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.get_SynchronizationContextNoFlow
::System::Threading::SynchronizationContext* System::Threading::ExecutionContext::get_SynchronizationContextNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::get_SynchronizationContextNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SynchronizationContextNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.set_SynchronizationContextNoFlow
void System::Threading::ExecutionContext::set_SynchronizationContextNoFlow(::System::Threading::SynchronizationContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::set_SynchronizationContextNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SynchronizationContextNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.ExecutionContext.Dispose
void System::Threading::ExecutionContext::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::ExecutionContext*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.Run
void System::Threading::ExecutionContext::Run(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, callback, state);
}
// Autogenerated method: System.Threading.ExecutionContext.Run
void System::Threading::ExecutionContext::Run(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state, bool preserveSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(preserveSyncCtx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, callback, state, preserveSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext.RunInternal
void System::Threading::ExecutionContext::RunInternal(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::RunInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "RunInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, callback, state);
}
// Autogenerated method: System.Threading.ExecutionContext.RunInternal
void System::Threading::ExecutionContext::RunInternal(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state, bool preserveSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::RunInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "RunInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(preserveSyncCtx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, callback, state, preserveSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext.EstablishCopyOnWriteScope
void System::Threading::ExecutionContext::EstablishCopyOnWriteScope(ByRef<::System::Threading::ExecutionContextSwitcher> ecsw) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::EstablishCopyOnWriteScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "EstablishCopyOnWriteScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ecsw)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(ecsw));
}
// Autogenerated method: System.Threading.ExecutionContext.EstablishCopyOnWriteScope
void System::Threading::ExecutionContext::EstablishCopyOnWriteScope(::System::Threading::Thread* currentThread, bool knownNullWindowsIdentity, ByRef<::System::Threading::ExecutionContextSwitcher> ecsw) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::EstablishCopyOnWriteScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "EstablishCopyOnWriteScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentThread), ::il2cpp_utils::ExtractType(knownNullWindowsIdentity), ::il2cpp_utils::ExtractType(ecsw)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, currentThread, knownNullWindowsIdentity, byref(ecsw));
}
// Autogenerated method: System.Threading.ExecutionContext.SetExecutionContext
::System::Threading::ExecutionContextSwitcher System::Threading::ExecutionContext::SetExecutionContext(::System::Threading::ExecutionContext* executionContext, bool preserveSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executionContext), ::il2cpp_utils::ExtractType(preserveSyncCtx)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContextSwitcher, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, executionContext, preserveSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext.CreateCopy
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CreateCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.CreateMutableCopy
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::CreateMutableCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CreateMutableCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMutableCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.IsFlowSuppressed
bool System::Threading::ExecutionContext::IsFlowSuppressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::IsFlowSuppressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "IsFlowSuppressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.Capture
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::Capture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Capture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "Capture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.FastCapture
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::FastCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::FastCapture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "FastCapture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext.Capture
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::Capture(ByRef<::System::Threading::StackCrawlMark> stackMark, ::System::Threading::ExecutionContext::CaptureOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Capture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", "Capture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(stackMark), options);
}
// Autogenerated method: System.Threading.ExecutionContext.GetObjectData
void System::Threading::ExecutionContext::GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::GetObjectData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::ExecutionContext*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Threading.ExecutionContext.IsDefaultFTContext
bool System::Threading::ExecutionContext::IsDefaultFTContext(bool ignoreSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::IsDefaultFTContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDefaultFTContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreSyncCtx)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ignoreSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext..cctor
void System::Threading::ExecutionContext::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ExecutionContext", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ExecutionContext/Flags
#include "System/Threading/ExecutionContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/Flags None
::System::Threading::ExecutionContext::Flags System::Threading::ExecutionContext::Flags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::Flags>("System.Threading", "ExecutionContext/Flags", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/Flags None
void System::Threading::ExecutionContext::Flags::_set_None(::System::Threading::ExecutionContext::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/Flags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/Flags IsNewCapture
::System::Threading::ExecutionContext::Flags System::Threading::ExecutionContext::Flags::_get_IsNewCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_get_IsNewCapture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::Flags>("System.Threading", "ExecutionContext/Flags", "IsNewCapture"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/Flags IsNewCapture
void System::Threading::ExecutionContext::Flags::_set_IsNewCapture(::System::Threading::ExecutionContext::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_set_IsNewCapture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/Flags", "IsNewCapture", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/Flags IsFlowSuppressed
::System::Threading::ExecutionContext::Flags System::Threading::ExecutionContext::Flags::_get_IsFlowSuppressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_get_IsFlowSuppressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::Flags>("System.Threading", "ExecutionContext/Flags", "IsFlowSuppressed"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/Flags IsFlowSuppressed
void System::Threading::ExecutionContext::Flags::_set_IsFlowSuppressed(::System::Threading::ExecutionContext::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_set_IsFlowSuppressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/Flags", "IsFlowSuppressed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/Flags IsPreAllocatedDefault
::System::Threading::ExecutionContext::Flags System::Threading::ExecutionContext::Flags::_get_IsPreAllocatedDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_get_IsPreAllocatedDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::Flags>("System.Threading", "ExecutionContext/Flags", "IsPreAllocatedDefault"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/Flags IsPreAllocatedDefault
void System::Threading::ExecutionContext::Flags::_set_IsPreAllocatedDefault(::System::Threading::ExecutionContext::Flags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::_set_IsPreAllocatedDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/Flags", "IsPreAllocatedDefault", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ExecutionContext::Flags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Flags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ExecutionContext/Reader
#include "System/Threading/ExecutionContext_Reader.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Runtime.Remoting.Messaging.LogicalCallContext/Reader
#include "System/Runtime/Remoting/Messaging/LogicalCallContext_Reader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext m_ec
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::ExecutionContext::Reader::dyn_m_ec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::dyn_m_ec");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ec"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ExecutionContext/Reader..ctor
// ABORTED elsewhere.  System::Threading::ExecutionContext::Reader::Reader(::System::Threading::ExecutionContext* ec)
// Autogenerated method: System.Threading.ExecutionContext/Reader.DangerousGetRawExecutionContext
::System::Threading::ExecutionContext* System::Threading::ExecutionContext::Reader::DangerousGetRawExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::DangerousGetRawExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "DangerousGetRawExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/Reader.get_IsNull
bool System::Threading::ExecutionContext::Reader::get_IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/Reader.IsDefaultFTContext
bool System::Threading::ExecutionContext::Reader::IsDefaultFTContext(bool ignoreSyncCtx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::IsDefaultFTContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsDefaultFTContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreSyncCtx)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ignoreSyncCtx);
}
// Autogenerated method: System.Threading.ExecutionContext/Reader.get_IsFlowSuppressed
bool System::Threading::ExecutionContext::Reader::get_IsFlowSuppressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_IsFlowSuppressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsFlowSuppressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/Reader.get_SynchronizationContext
::System::Threading::SynchronizationContext* System::Threading::ExecutionContext::Reader::get_SynchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_SynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_SynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/Reader.get_SynchronizationContextNoFlow
::System::Threading::SynchronizationContext* System::Threading::ExecutionContext::Reader::get_SynchronizationContextNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_SynchronizationContextNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_SynchronizationContextNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/Reader.get_LogicalCallContext
::System::Runtime::Remoting::Messaging::LogicalCallContext::Reader System::Threading::ExecutionContext::Reader::get_LogicalCallContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::get_LogicalCallContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_LogicalCallContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Messaging::LogicalCallContext::Reader, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ExecutionContext/Reader.HasSameLocalValues
bool System::Threading::ExecutionContext::Reader::HasSameLocalValues(::System::Threading::ExecutionContext* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::Reader::HasSameLocalValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasSameLocalValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ExecutionContext/CaptureOptions
#include "System/Threading/ExecutionContext_CaptureOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/CaptureOptions None
::System::Threading::ExecutionContext::CaptureOptions System::Threading::ExecutionContext::CaptureOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::CaptureOptions>("System.Threading", "ExecutionContext/CaptureOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/CaptureOptions None
void System::Threading::ExecutionContext::CaptureOptions::_set_None(::System::Threading::ExecutionContext::CaptureOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/CaptureOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/CaptureOptions IgnoreSyncCtx
::System::Threading::ExecutionContext::CaptureOptions System::Threading::ExecutionContext::CaptureOptions::_get_IgnoreSyncCtx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_get_IgnoreSyncCtx");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::CaptureOptions>("System.Threading", "ExecutionContext/CaptureOptions", "IgnoreSyncCtx"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/CaptureOptions IgnoreSyncCtx
void System::Threading::ExecutionContext::CaptureOptions::_set_IgnoreSyncCtx(::System::Threading::ExecutionContext::CaptureOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_set_IgnoreSyncCtx");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/CaptureOptions", "IgnoreSyncCtx", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.ExecutionContext/CaptureOptions OptimizeDefaultCase
::System::Threading::ExecutionContext::CaptureOptions System::Threading::ExecutionContext::CaptureOptions::_get_OptimizeDefaultCase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_get_OptimizeDefaultCase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ExecutionContext::CaptureOptions>("System.Threading", "ExecutionContext/CaptureOptions", "OptimizeDefaultCase"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ExecutionContext/CaptureOptions OptimizeDefaultCase
void System::Threading::ExecutionContext::CaptureOptions::_set_OptimizeDefaultCase(::System::Threading::ExecutionContext::CaptureOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::_set_OptimizeDefaultCase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ExecutionContext/CaptureOptions", "OptimizeDefaultCase", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::ExecutionContext::CaptureOptions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::CaptureOptions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Monitor
#include "System/Threading/Monitor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Monitor.Enter
void System::Threading::Monitor::Enter(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Enter
void System::Threading::Monitor::Enter(::Il2CppObject* obj, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Enter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Enter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.ThrowLockTakenException
void System::Threading::Monitor::ThrowLockTakenException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ThrowLockTakenException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ThrowLockTakenException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Monitor.Exit
void System::Threading::Monitor::Exit(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Exit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Exit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.TryEnter
bool System::Threading::Monitor::TryEnter(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::TryEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "TryEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.TryEnter
void System::Threading::Monitor::TryEnter(::Il2CppObject* obj, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::TryEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "TryEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.TryEnter
bool System::Threading::Monitor::TryEnter(::Il2CppObject* obj, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::TryEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "TryEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Monitor.TryEnter
void System::Threading::Monitor::TryEnter(::Il2CppObject* obj, int millisecondsTimeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::TryEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "TryEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, millisecondsTimeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.IsEntered
bool System::Threading::Monitor::IsEntered(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::IsEntered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "IsEntered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Wait
bool System::Threading::Monitor::Wait(::Il2CppObject* obj, int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.Monitor.Wait
bool System::Threading::Monitor::Wait(::Il2CppObject* obj, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Monitor.Pulse
void System::Threading::Monitor::Pulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.PulseAll
void System::Threading::Monitor::PulseAll(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::PulseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "PulseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_test_synchronised
bool System::Threading::Monitor::Monitor_test_synchronised(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_test_synchronised");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_test_synchronised", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_pulse
void System::Threading::Monitor::Monitor_pulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.ObjPulse
void System::Threading::Monitor::ObjPulse(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ObjPulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_pulse_all
void System::Threading::Monitor::Monitor_pulse_all(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_pulse_all");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_pulse_all", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.ObjPulseAll
void System::Threading::Monitor::ObjPulseAll(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ObjPulseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjPulseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.Monitor_wait
bool System::Threading::Monitor::Monitor_wait(::Il2CppObject* obj, int ms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(ms)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, ms);
}
// Autogenerated method: System.Threading.Monitor.ObjWait
bool System::Threading::Monitor::ObjWait(bool exitContext, int millisecondsTimeout, ::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ObjWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ObjWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exitContext), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, exitContext, millisecondsTimeout, obj);
}
// Autogenerated method: System.Threading.Monitor.try_enter_with_atomic_var
void System::Threading::Monitor::try_enter_with_atomic_var(::Il2CppObject* obj, int millisecondsTimeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::try_enter_with_atomic_var");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "try_enter_with_atomic_var", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, millisecondsTimeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.ReliableEnterTimeout
void System::Threading::Monitor::ReliableEnterTimeout(::Il2CppObject* obj, int timeout, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ReliableEnterTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ReliableEnterTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, timeout, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.ReliableEnter
void System::Threading::Monitor::ReliableEnter(::Il2CppObject* obj, ByRef<bool> lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::ReliableEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "ReliableEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(lockTaken)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, byref(lockTaken));
}
// Autogenerated method: System.Threading.Monitor.Monitor_test_owner
bool System::Threading::Monitor::Monitor_test_owner(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::Monitor_test_owner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "Monitor_test_owner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Monitor.IsEnteredNative
bool System::Threading::Monitor::IsEnteredNative(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Monitor::IsEnteredNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Monitor", "IsEnteredNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.SynchronizationContextProperties
#include "System/Threading/SynchronizationContextProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.SynchronizationContextProperties None
::System::Threading::SynchronizationContextProperties System::Threading::SynchronizationContextProperties::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::SynchronizationContextProperties>("System.Threading", "SynchronizationContextProperties", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.SynchronizationContextProperties None
void System::Threading::SynchronizationContextProperties::_set_None(::System::Threading::SynchronizationContextProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContextProperties", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.SynchronizationContextProperties RequireWaitNotification
::System::Threading::SynchronizationContextProperties System::Threading::SynchronizationContextProperties::_get_RequireWaitNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::_get_RequireWaitNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::SynchronizationContextProperties>("System.Threading", "SynchronizationContextProperties", "RequireWaitNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.SynchronizationContextProperties RequireWaitNotification
void System::Threading::SynchronizationContextProperties::_set_RequireWaitNotification(::System::Threading::SynchronizationContextProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::_set_RequireWaitNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContextProperties", "RequireWaitNotification", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::SynchronizationContextProperties::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContextProperties::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType1
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType1"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType1
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType1(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType1", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType2
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType2"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType2
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType2(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType2", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType3
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType3"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType3
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType3(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType3", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType4
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType4"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType4
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType4(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType4", value));
}
// Autogenerated static field getter
// Get static field: static private System.Type s_cachedPreparedType5
::System::Type* System::Threading::SynchronizationContext::_get_s_cachedPreparedType5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_get_s_cachedPreparedType5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Type*>("System.Threading", "SynchronizationContext", "s_cachedPreparedType5"));
}
// Autogenerated static field setter
// Set static field: static private System.Type s_cachedPreparedType5
void System::Threading::SynchronizationContext::_set_s_cachedPreparedType5(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::_set_s_cachedPreparedType5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SynchronizationContext", "s_cachedPreparedType5", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SynchronizationContextProperties _props
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContextProperties& System::Threading::SynchronizationContext::dyn__props() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::dyn__props");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_props"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContextProperties*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.SynchronizationContext.IsWaitNotificationRequired
bool System::Threading::SynchronizationContext::IsWaitNotificationRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::IsWaitNotificationRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsWaitNotificationRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.Send
void System::Threading::SynchronizationContext::Send(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::Send");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.SynchronizationContext.Post
void System::Threading::SynchronizationContext::Post(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::Post");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.SynchronizationContext.OperationStarted
void System::Threading::SynchronizationContext::OperationStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::OperationStarted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.OperationCompleted
void System::Threading::SynchronizationContext::OperationCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::OperationCompleted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.Wait
int System::Threading::SynchronizationContext::Wait(::ArrayW<::System::IntPtr> waitHandles, bool waitAll, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::Wait");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 8));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, waitHandles, waitAll, millisecondsTimeout);
}
// Autogenerated method: System.Threading.SynchronizationContext.WaitHelper
int System::Threading::SynchronizationContext::WaitHelper(::ArrayW<::System::IntPtr> waitHandles, bool waitAll, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::WaitHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "WaitHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(waitAll), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, waitAll, millisecondsTimeout);
}
// Autogenerated method: System.Threading.SynchronizationContext.SetSynchronizationContext
void System::Threading::SynchronizationContext::SetSynchronizationContext(::System::Threading::SynchronizationContext* syncContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::SetSynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "SetSynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncContext)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, syncContext);
}
// Autogenerated method: System.Threading.SynchronizationContext.get_Current
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.get_CurrentNoFlow
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::get_CurrentNoFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::get_CurrentNoFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "get_CurrentNoFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.GetThreadLocalContext
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::GetThreadLocalContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::GetThreadLocalContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "GetThreadLocalContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.CreateCopy
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::CreateCopy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.SynchronizationContext.get_CurrentExplicit
::System::Threading::SynchronizationContext* System::Threading::SynchronizationContext::get_CurrentExplicit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::SynchronizationContext::get_CurrentExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "SynchronizationContext", "get_CurrentExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext
#include "System/Threading/OSSpecificSynchronizationContext.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/InvocationEntryDelegate
#include "System/Threading/OSSpecificSynchronizationContext_InvocationEntryDelegate.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/InvocationContext
#include "System/Threading/OSSpecificSynchronizationContext_InvocationContext.hpp"
// Including type: System.Threading.OSSpecificSynchronizationContext/<>c
#include "System/Threading/OSSpecificSynchronizationContext_--c.hpp"
// Including type: System.Runtime.CompilerServices.ConditionalWeakTable`2
#include "System/Runtime/CompilerServices/ConditionalWeakTable_2.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Object,System.Threading.OSSpecificSynchronizationContext> s_ContextCache
::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>* System::Threading::OSSpecificSynchronizationContext::_get_s_ContextCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::_get_s_ContextCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>*>("System.Threading", "OSSpecificSynchronizationContext", "s_ContextCache")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Object,System.Threading.OSSpecificSynchronizationContext> s_ContextCache
void System::Threading::OSSpecificSynchronizationContext::_set_s_ContextCache(::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::_set_s_ContextCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext", "s_ContextCache", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_OSSynchronizationContext
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::OSSpecificSynchronizationContext::dyn_m_OSSynchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::dyn_m_OSSynchronizationContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OSSynchronizationContext"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Get
::System::Threading::OSSpecificSynchronizationContext* System::Threading::OSSpecificSynchronizationContext::Get() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::OSSpecificSynchronizationContext*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.InvocationEntry
void System::Threading::OSSpecificSynchronizationContext::InvocationEntry(::System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "InvocationEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.GetOSContext
::Il2CppObject* System::Threading::OSSpecificSynchronizationContext::GetOSContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::GetOSContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "GetOSContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.PostInternal
void System::Threading::OSSpecificSynchronizationContext::PostInternal(::Il2CppObject* osSynchronizationContext, ::System::IntPtr callback, ::System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::PostInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", "PostInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(osSynchronizationContext), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(arg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, osSynchronizationContext, callback, arg);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext..cctor
void System::Threading::OSSpecificSynchronizationContext::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.CreateCopy
::System::Threading::SynchronizationContext* System::Threading::OSSpecificSynchronizationContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::CreateCopy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Send
void System::Threading::OSSpecificSynchronizationContext::Send(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::Send");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext.Post
void System::Threading::OSSpecificSynchronizationContext::Post(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::Post");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::SynchronizationContext*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, d, state);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/InvocationEntryDelegate
#include "System/Threading/OSSpecificSynchronizationContext_InvocationEntryDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/InvocationEntryDelegate.Invoke
void System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke(::System::IntPtr arg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::OSSpecificSynchronizationContext::InvocationEntryDelegate*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, arg);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/InvocationContext
#include "System/Threading/OSSpecificSynchronizationContext_InvocationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.SendOrPostCallback m_Delegate
[[deprecated("Use field access instead!")]] ::System::Threading::SendOrPostCallback*& System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_Delegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_Delegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Delegate"))->offset;
  return *reinterpret_cast<::System::Threading::SendOrPostCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_State
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_State() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::dyn_m_State");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_State"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/InvocationContext.Invoke
void System::Threading::OSSpecificSynchronizationContext::InvocationContext::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::InvocationContext::Invoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.OSSpecificSynchronizationContext/<>c
#include "System/Threading/OSSpecificSynchronizationContext_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.OSSpecificSynchronizationContext/<>c <>9
::System::Threading::OSSpecificSynchronizationContext::$$c* System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::OSSpecificSynchronizationContext::$$c*>("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.OSSpecificSynchronizationContext/<>c <>9
void System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9(::System::Threading::OSSpecificSynchronizationContext::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Runtime.CompilerServices.ConditionalWeakTable`2/CreateValueCallback<System.Object,System.Threading.OSSpecificSynchronizationContext> <>9__3_0
typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback* System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback*>("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Runtime.CompilerServices.ConditionalWeakTable`2/CreateValueCallback<System.Object,System.Threading.OSSpecificSynchronizationContext> <>9__3_0
void System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9__3_0(typename ::System::Runtime::CompilerServices::ConditionalWeakTable_2<::Il2CppObject*, ::System::Threading::OSSpecificSynchronizationContext*>::CreateValueCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading", "OSSpecificSynchronizationContext/<>c", "<>9__3_0", value)));
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/<>c..cctor
void System::Threading::OSSpecificSynchronizationContext::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "OSSpecificSynchronizationContext/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.OSSpecificSynchronizationContext/<>c.<Get>b__3_0
::System::Threading::OSSpecificSynchronizationContext* System::Threading::OSSpecificSynchronizationContext::$$c::$Get$b__3_0(::Il2CppObject* _osContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::OSSpecificSynchronizationContext::$$c::<Get>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Get>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_osContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::OSSpecificSynchronizationContext*, false>(this, ___internal__method, _osContext);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadHelper
#include "System/Threading/ThreadHelper.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ContextCallback _ccb
::System::Threading::ContextCallback* System::Threading::ThreadHelper::_get__ccb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::_get__ccb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading", "ThreadHelper", "_ccb"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ContextCallback _ccb
void System::Threading::ThreadHelper::_set__ccb(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::_set__ccb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadHelper", "_ccb", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Delegate _start
[[deprecated("Use field access instead!")]] ::System::Delegate*& System::Threading::ThreadHelper::dyn__start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_start"))->offset;
  return *reinterpret_cast<::System::Delegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _startArg
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::ThreadHelper::dyn__startArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__startArg");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startArg"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext _executionContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::ThreadHelper::dyn__executionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::dyn__executionContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_executionContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadHelper.SetExecutionContextHelper
void System::Threading::ThreadHelper::SetExecutionContextHelper(::System::Threading::ExecutionContext* ec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::SetExecutionContextHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContextHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ec);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart_Context
void System::Threading::ThreadHelper::ThreadStart_Context(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadHelper", "ThreadStart_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart
void System::Threading::ThreadHelper::ThreadStart(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThreadStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadHelper.ThreadStart
void System::Threading::ThreadHelper::ThreadStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::ThreadStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThreadStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadHelper..cctor
void System::Threading::ThreadHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.InternalThread
#include "System/Threading/InternalThread.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: System.Security.Principal.IPrincipal
#include "System/Security/Principal/IPrincipal.hpp"
// Including type: System.LocalDataStoreMgr
#include "System/LocalDataStoreMgr.hpp"
// Including type: System.LocalDataStoreHolder
#include "System/LocalDataStoreHolder.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Threading.AsyncLocal`1
#include "System/Threading/AsyncLocal_1.hpp"
// Including type: System.Threading.ThreadStart
#include "System/Threading/ThreadStart.hpp"
// Including type: System.Threading.ParameterizedThreadStart
#include "System/Threading/ParameterizedThreadStart.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Runtime.Remoting.Contexts.Context
#include "System/Runtime/Remoting/Contexts/Context.hpp"
// Including type: System.Threading.ThreadState
#include "System/Threading/ThreadState.hpp"
// Including type: System.Threading.ExecutionContext/Reader
#include "System/Threading/ExecutionContext_Reader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
::System::LocalDataStoreMgr* System::Threading::Thread::_get_s_LocalDataStoreMgr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_LocalDataStoreMgr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::LocalDataStoreMgr*>("System.Threading", "Thread", "s_LocalDataStoreMgr"));
}
// Autogenerated static field setter
// Set static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
void System::Threading::Thread::_set_s_LocalDataStoreMgr(::System::LocalDataStoreMgr* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_LocalDataStoreMgr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_LocalDataStoreMgr", value));
}
// Autogenerated static field getter
// Get static field: static private System.LocalDataStoreHolder s_LocalDataStore
::System::LocalDataStoreHolder* System::Threading::Thread::_get_s_LocalDataStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_LocalDataStore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::LocalDataStoreHolder*>("System.Threading", "Thread", "s_LocalDataStore"));
}
// Autogenerated static field setter
// Set static field: static private System.LocalDataStoreHolder s_LocalDataStore
void System::Threading::Thread::_set_s_LocalDataStore(::System::LocalDataStoreHolder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_LocalDataStore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_LocalDataStore", value));
}
// Autogenerated static field getter
// Get static field: static System.Globalization.CultureInfo m_CurrentCulture
::System::Globalization::CultureInfo* System::Threading::Thread::_get_m_CurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_m_CurrentCulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Globalization::CultureInfo*>("System.Threading", "Thread", "m_CurrentCulture"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.CultureInfo m_CurrentCulture
void System::Threading::Thread::_set_m_CurrentCulture(::System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_m_CurrentCulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "m_CurrentCulture", value));
}
// Autogenerated static field getter
// Get static field: static System.Globalization.CultureInfo m_CurrentUICulture
::System::Globalization::CultureInfo* System::Threading::Thread::_get_m_CurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_m_CurrentUICulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Globalization::CultureInfo*>("System.Threading", "Thread", "m_CurrentUICulture"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.CultureInfo m_CurrentUICulture
void System::Threading::Thread::_set_m_CurrentUICulture(::System::Globalization::CultureInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_m_CurrentUICulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "m_CurrentUICulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* System::Threading::Thread::_get_s_asyncLocalCurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_asyncLocalCurrentCulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>*>("System.Threading", "Thread", "s_asyncLocalCurrentCulture"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
void System::Threading::Thread::_set_s_asyncLocalCurrentCulture(::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_asyncLocalCurrentCulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_asyncLocalCurrentCulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* System::Threading::Thread::_get_s_asyncLocalCurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_s_asyncLocalCurrentUICulture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>*>("System.Threading", "Thread", "s_asyncLocalCurrentUICulture"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
void System::Threading::Thread::_set_s_asyncLocalCurrentUICulture(::System::Threading::AsyncLocal_1<::System::Globalization::CultureInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_s_asyncLocalCurrentUICulture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "s_asyncLocalCurrentUICulture", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Thread current_thread
::System::Threading::Thread* System::Threading::Thread::_get_current_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_get_current_thread");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Thread*>("System.Threading", "Thread", "current_thread"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Thread current_thread
void System::Threading::Thread::_set_current_thread(::System::Threading::Thread* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::_set_current_thread");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Thread", "current_thread", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.InternalThread internal_thread
[[deprecated("Use field access instead!")]] ::System::Threading::InternalThread*& System::Threading::Thread::dyn_internal_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_internal_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "internal_thread"))->offset;
  return *reinterpret_cast<::System::Threading::InternalThread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_ThreadStartArg
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Thread::dyn_m_ThreadStartArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ThreadStartArg");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ThreadStartArg"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object pending_exception
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Thread::dyn_pending_exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_pending_exception");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pending_exception"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.MulticastDelegate m_Delegate
[[deprecated("Use field access instead!")]] ::System::MulticastDelegate*& System::Threading::Thread::dyn_m_Delegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_Delegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Delegate"))->offset;
  return *reinterpret_cast<::System::MulticastDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext m_ExecutionContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::Thread::dyn_m_ExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ExecutionContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExecutionContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_ExecutionContextBelongsToOuterScope
[[deprecated("Use field access instead!")]] bool& System::Threading::Thread::dyn_m_ExecutionContextBelongsToOuterScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_m_ExecutionContextBelongsToOuterScope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExecutionContextBelongsToOuterScope"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Security.Principal.IPrincipal principal
[[deprecated("Use field access instead!")]] ::System::Security::Principal::IPrincipal*& System::Threading::Thread::dyn_principal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_principal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "principal"))->offset;
  return *reinterpret_cast<::System::Security::Principal::IPrincipal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 principal_version
[[deprecated("Use field access instead!")]] int& System::Threading::Thread::dyn_principal_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::dyn_principal_version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "principal_version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start(::Il2CppObject* parameter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameter)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parameter);
}
// Autogenerated method: System.Threading.Thread.Start
void System::Threading::Thread::Start(ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(stackMark));
}
// Autogenerated method: System.Threading.Thread.GetExecutionContextReader
::System::Threading::ExecutionContext::Reader System::Threading::Thread::GetExecutionContextReader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetExecutionContextReader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExecutionContextReader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext::Reader, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_ExecutionContextBelongsToCurrentScope
bool System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ExecutionContextBelongsToCurrentScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_ExecutionContextBelongsToCurrentScope
void System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_ExecutionContextBelongsToCurrentScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ExecutionContextBelongsToCurrentScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.GetMutableExecutionContext
::System::Threading::ExecutionContext* System::Threading::Thread::GetMutableExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetMutableExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMutableExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetExecutionContext
void System::Threading::Thread::SetExecutionContext(::System::Threading::ExecutionContext* value, bool belongsToCurrentScope) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(belongsToCurrentScope)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, belongsToCurrentScope);
}
// Autogenerated method: System.Threading.Thread.SetExecutionContext
void System::Threading::Thread::SetExecutionContext(::System::Threading::ExecutionContext::Reader value, bool belongsToCurrentScope) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetExecutionContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExecutionContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(belongsToCurrentScope)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value, belongsToCurrentScope);
}
// Autogenerated method: System.Threading.Thread.set_Priority
void System::Threading::Thread::set_Priority(::System::Threading::ThreadPriority value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_Priority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Priority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.SetPriorityNative
void System::Threading::Thread::SetPriorityNative(int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetPriorityNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPriorityNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, priority);
}
// Autogenerated method: System.Threading.Thread.JoinInternal
bool System::Threading::Thread::JoinInternal(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::JoinInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.Join
void System::Threading::Thread::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Join
bool System::Threading::Thread::Join(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.SleepInternal
void System::Threading::Thread::SleepInternal(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SleepInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SleepInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.Sleep
void System::Threading::Thread::Sleep(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Sleep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Sleep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Thread.YieldInternal
bool System::Threading::Thread::YieldInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::YieldInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "YieldInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Yield
bool System::Threading::Thread::Yield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Yield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Yield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SetStartHelper
void System::Threading::Thread::SetStartHelper(::System::Delegate* start, int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetStartHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStartHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(maxStackSize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.get_CurrentUICulture
::System::Globalization::CultureInfo* System::Threading::Thread::get_CurrentUICulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentUICulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentUICulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetCurrentUICultureNoAppX
::System::Globalization::CultureInfo* System::Threading::Thread::GetCurrentUICultureNoAppX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentUICultureNoAppX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentUICultureNoAppX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentCulture
::System::Globalization::CultureInfo* System::Threading::Thread::get_CurrentCulture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentCulture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentCulture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetCurrentCultureNoAppX
::System::Globalization::CultureInfo* System::Threading::Thread::GetCurrentCultureNoAppX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentCultureNoAppX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentCultureNoAppX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Globalization::CultureInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.MemoryBarrier
void System::Threading::Thread::MemoryBarrier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::MemoryBarrier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "MemoryBarrier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ConstructInternalThread
void System::Threading::Thread::ConstructInternalThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ConstructInternalThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConstructInternalThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_Internal
::System::Threading::InternalThread* System::Threading::Thread::get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::InternalThread*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentContext
::System::Runtime::Remoting::Contexts::Context* System::Threading::Thread::get_CurrentContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::Remoting::Contexts::Context*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetCurrentThread_icall
void System::Threading::Thread::GetCurrentThread_icall(ByRef<::System::Threading::Thread*> thread) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentThread_icall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetCurrentThread_icall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(thread));
}
// Autogenerated method: System.Threading.Thread.GetCurrentThread
::System::Threading::Thread* System::Threading::Thread::GetCurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetCurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetCurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Thread*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentThread
::System::Threading::Thread* System::Threading::Thread::get_CurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Thread*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_CurrentThreadId
int System::Threading::Thread::get_CurrentThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_CurrentThreadId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "get_CurrentThreadId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetDomainID
int System::Threading::Thread::GetDomainID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetDomainID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetDomainID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Thread_internal
bool System::Threading::Thread::Thread_internal(::System::MulticastDelegate* start) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Thread_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Thread_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, start);
}
// Autogenerated method: System.Threading.Thread.get_IsThreadPoolThread
bool System::Threading::Thread::get_IsThreadPoolThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsThreadPoolThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsThreadPoolThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsThreadPoolThreadInternal
bool System::Threading::Thread::get_IsThreadPoolThreadInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsThreadPoolThreadInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsThreadPoolThreadInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.get_IsAlive
bool System::Threading::Thread::get_IsAlive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_IsAlive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAlive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_IsBackground
void System::Threading::Thread::set_IsBackground(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_IsBackground");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsBackground", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.GetName_internal
::StringW System::Threading::Thread::GetName_internal(::System::Threading::InternalThread* thread) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetName_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetName_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread);
}
// Autogenerated method: System.Threading.Thread.SetName_icall
void System::Threading::Thread::SetName_icall(::System::Threading::InternalThread* thread, ::Il2CppChar* name, int nameLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetName_icall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetName_icall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(nameLength)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, name, nameLength);
}
// Autogenerated method: System.Threading.Thread.SetName_internal
void System::Threading::Thread::SetName_internal(::System::Threading::InternalThread* thread, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetName_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetName_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, name);
}
// Autogenerated method: System.Threading.Thread.get_Name
::StringW System::Threading::Thread::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.set_Name
void System::Threading::Thread::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Thread.get_ThreadState
::System::Threading::ThreadState System::Threading::Thread::get_ThreadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ThreadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ThreadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Abort_internal
void System::Threading::Thread::Abort_internal(::System::Threading::InternalThread* thread, ::Il2CppObject* stateInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Abort_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "Abort_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(stateInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, stateInfo);
}
// Autogenerated method: System.Threading.Thread.Abort
void System::Threading::Thread::Abort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Abort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Abort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SpinWait_nop
void System::Threading::Thread::SpinWait_nop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SpinWait_nop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SpinWait_nop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.SpinWait
void System::Threading::Thread::SpinWait(int iterations) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iterations)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, iterations);
}
// Autogenerated method: System.Threading.Thread.StartInternal
void System::Threading::Thread::StartInternal(::Il2CppObject* principal, ByRef<::System::Threading::StackCrawlMark> stackMark) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::StartInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(principal), ::il2cpp_utils::ExtractType(stackMark)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, principal, byref(stackMark));
}
// Autogenerated method: System.Threading.Thread.SetState
void System::Threading::Thread::SetState(::System::Threading::InternalThread* thread, ::System::Threading::ThreadState set) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(set)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, set);
}
// Autogenerated method: System.Threading.Thread.ClrState
void System::Threading::Thread::ClrState(::System::Threading::InternalThread* thread, ::System::Threading::ThreadState clr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ClrState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "ClrState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread), ::il2cpp_utils::ExtractType(clr)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread, clr);
}
// Autogenerated method: System.Threading.Thread.GetState
::System::Threading::ThreadState System::Threading::Thread::GetState(::System::Threading::InternalThread* thread) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thread)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, thread);
}
// Autogenerated method: System.Threading.Thread.SystemMaxStackStize
int System::Threading::Thread::SystemMaxStackStize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SystemMaxStackStize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "SystemMaxStackStize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetProcessDefaultStackSize
int System::Threading::Thread::GetProcessDefaultStackSize(int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetProcessDefaultStackSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "GetProcessDefaultStackSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxStackSize)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.SetStart
void System::Threading::Thread::SetStart(::System::MulticastDelegate* start, int maxStackSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::SetStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(maxStackSize)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, start, maxStackSize);
}
// Autogenerated method: System.Threading.Thread.get_ManagedThreadId
int System::Threading::Thread::get_ManagedThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::get_ManagedThreadId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ManagedThreadId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.BeginCriticalRegion
void System::Threading::Thread::BeginCriticalRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::BeginCriticalRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "BeginCriticalRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.EndCriticalRegion
void System::Threading::Thread::EndCriticalRegion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::EndCriticalRegion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Thread", "EndCriticalRegion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Thread.ValidateThreadState
::System::Threading::ThreadState System::Threading::Thread::ValidateThreadState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::ValidateThreadState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateThreadState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadState, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.Finalize
void System::Threading::Thread::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Runtime::ConstrainedExecution::CriticalFinalizerObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Thread.GetHashCode
int System::Threading::Thread::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Thread::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMe
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMe");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMe"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMe
void System::Threading::StackCrawlMark::_set_LookForMe(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMe");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMe", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMyCaller
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMyCaller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMyCaller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMyCaller"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMyCaller
void System::Threading::StackCrawlMark::_set_LookForMyCaller(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMyCaller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMyCaller", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForMyCallersCaller
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForMyCallersCaller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForMyCallersCaller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForMyCallersCaller"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForMyCallersCaller
void System::Threading::StackCrawlMark::_set_LookForMyCallersCaller(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForMyCallersCaller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForMyCallersCaller", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.StackCrawlMark LookForThread
::System::Threading::StackCrawlMark System::Threading::StackCrawlMark::_get_LookForThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_get_LookForThread");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::StackCrawlMark>("System.Threading", "StackCrawlMark", "LookForThread"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.StackCrawlMark LookForThread
void System::Threading::StackCrawlMark::_set_LookForThread(::System::Threading::StackCrawlMark value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::_set_LookForThread");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "StackCrawlMark", "LookForThread", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::StackCrawlMark::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::StackCrawlMark::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadInterruptedException
#include "System/Threading/ThreadInterruptedException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::IThreadPoolWorkItem::ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::IThreadPoolWorkItem::ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::IThreadPoolWorkItem*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::IThreadPoolWorkItem::MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::IThreadPoolWorkItem::MarkAborted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::IThreadPoolWorkItem*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.WaitCallback.Invoke
void System::Threading::WaitCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitCallback*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.WaitOrTimerCallback.Invoke
void System::Threading::WaitOrTimerCallback::Invoke(::Il2CppObject* state, bool timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitOrTimerCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitOrTimerCallback*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state, timedOut);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolGlobals
#include "System/Threading/ThreadPoolGlobals.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue
#include "System/Threading/ThreadPoolWorkQueue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 processorCount
int System::Threading::ThreadPoolGlobals::_get_processorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_processorCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ThreadPoolGlobals", "processorCount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 processorCount
void System::Threading::ThreadPoolGlobals::_set_processorCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_processorCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "processorCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean vmTpInitialized
bool System::Threading::ThreadPoolGlobals::_get_vmTpInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_vmTpInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "vmTpInitialized"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean vmTpInitialized
void System::Threading::ThreadPoolGlobals::_set_vmTpInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_vmTpInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "vmTpInitialized", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean enableWorkerTracking
bool System::Threading::ThreadPoolGlobals::_get_enableWorkerTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_enableWorkerTracking");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading", "ThreadPoolGlobals", "enableWorkerTracking"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean enableWorkerTracking
void System::Threading::ThreadPoolGlobals::_set_enableWorkerTracking(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_enableWorkerTracking");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "enableWorkerTracking", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.ThreadPoolWorkQueue workQueue
::System::Threading::ThreadPoolWorkQueue* System::Threading::ThreadPoolGlobals::_get_workQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_get_workQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueue*>("System.Threading", "ThreadPoolGlobals", "workQueue"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.ThreadPoolWorkQueue workQueue
void System::Threading::ThreadPoolGlobals::_set_workQueue(::System::Threading::ThreadPoolWorkQueue* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::_set_workQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolGlobals", "workQueue", value));
}
// Autogenerated method: System.Threading.ThreadPoolGlobals..cctor
void System::Threading::ThreadPoolGlobals::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolGlobals::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolGlobals", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue
#include "System/Threading/ThreadPoolWorkQueue.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/SparseArray`1
#include "System/Threading/ThreadPoolWorkQueue_SparseArray_1.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.ThreadPoolWorkQueueThreadLocals
#include "System/Threading/ThreadPoolWorkQueueThreadLocals.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ThreadPoolWorkQueue/SparseArray`1<System.Threading.ThreadPoolWorkQueue/WorkStealingQueue> allThreadQueues
::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>* System::Threading::ThreadPoolWorkQueue::_get_allThreadQueues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::_get_allThreadQueues");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>*>("System.Threading", "ThreadPoolWorkQueue", "allThreadQueues"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ThreadPoolWorkQueue/SparseArray`1<System.Threading.ThreadPoolWorkQueue/WorkStealingQueue> allThreadQueues
void System::Threading::ThreadPoolWorkQueue::_set_allThreadQueues(::System::Threading::ThreadPoolWorkQueue::SparseArray_1<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::_set_allThreadQueues");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolWorkQueue", "allThreadQueues", value));
}
// Autogenerated instance field getter
// Get instance field: System.Threading.ThreadPoolWorkQueue/QueueSegment queueHead
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::dyn_queueHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_queueHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "queueHead"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.ThreadPoolWorkQueue/QueueSegment queueTail
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::dyn_queueTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_queueTail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "queueTail"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numOutstandingThreadRequests
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::dyn_numOutstandingThreadRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::dyn_numOutstandingThreadRequests");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numOutstandingThreadRequests"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.EnsureCurrentThreadHasQueue
::System::Threading::ThreadPoolWorkQueueThreadLocals* System::Threading::ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::EnsureCurrentThreadHasQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureCurrentThreadHasQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ThreadPoolWorkQueueThreadLocals*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.EnsureThreadRequested
void System::Threading::ThreadPoolWorkQueue::EnsureThreadRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::EnsureThreadRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureThreadRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.MarkThreadRequestSatisfied
void System::Threading::ThreadPoolWorkQueue::MarkThreadRequestSatisfied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::MarkThreadRequestSatisfied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkThreadRequestSatisfied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Enqueue
void System::Threading::ThreadPoolWorkQueue::Enqueue(::System::Threading::IThreadPoolWorkItem* callback, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(forceGlobal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.LocalFindAndPop
bool System::Threading::ThreadPoolWorkQueue::LocalFindAndPop(::System::Threading::IThreadPoolWorkItem* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::LocalFindAndPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalFindAndPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, callback);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Dequeue
void System::Threading::ThreadPoolWorkQueue::Dequeue(::System::Threading::ThreadPoolWorkQueueThreadLocals* tl, ByRef<::System::Threading::IThreadPoolWorkItem*> callback, ByRef<bool> missedSteal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Dequeue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tl), ::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tl, byref(callback), byref(missedSteal));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue.Dispatch
bool System::Threading::ThreadPoolWorkQueue::Dispatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::Dispatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolWorkQueue", "Dispatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue..cctor
void System::Threading::ThreadPoolWorkQueue::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPoolWorkQueue", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.IThreadPoolWorkItem[] m_array
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::IThreadPoolWorkItem*>& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_array() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_array");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_array"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::IThreadPoolWorkItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_mask
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_mask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_mask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_mask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_headIndex
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_headIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_headIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_headIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_tailIndex
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_tailIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_tailIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_tailIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SpinLock m_foreignLock
[[deprecated("Use field access instead!")]] ::System::Threading::SpinLock& System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_foreignLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::dyn_m_foreignLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_foreignLock"))->offset;
  return *reinterpret_cast<::System::Threading::SpinLock*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.LocalPush
void System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPush(::System::Threading::IThreadPoolWorkItem* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.LocalFindAndPop
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop(::System::Threading::IThreadPoolWorkItem* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalFindAndPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalFindAndPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.LocalPop
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPop(ByRef<::System::Threading::IThreadPoolWorkItem*> obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::LocalPop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.TrySteal
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal(ByRef<::System::Threading::IThreadPoolWorkItem*> obj, ByRef<bool> missedSteal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySteal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractType(missedSteal)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj), byref(missedSteal));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue.TrySteal
bool System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal(ByRef<::System::Threading::IThreadPoolWorkItem*> obj, ByRef<bool> missedSteal, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue::TrySteal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySteal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>(), ::il2cpp_utils::ExtractType(missedSteal), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(obj), byref(missedSteal), millisecondsTimeout);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ThreadPoolWorkQueue/QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.IThreadPoolWorkItem[] nodes
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::IThreadPoolWorkItem*>& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_nodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_nodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodes"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::IThreadPoolWorkItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 indexes
[[deprecated("Use field access instead!")]] int& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_indexes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_indexes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indexes"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.ThreadPoolWorkQueue/QueueSegment Next
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::QueueSegment*& System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::QueueSegment**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.GetIndexes
void System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes(ByRef<int> upper, ByRef<int> lower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(upper), byref(lower));
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.CompareExchangeIndexes
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes(ByRef<int> prevUpper, int newUpper, ByRef<int> prevLower, int newLower) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareExchangeIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prevUpper), ::il2cpp_utils::ExtractType(newUpper), ::il2cpp_utils::ExtractType(prevLower), ::il2cpp_utils::ExtractType(newLower)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(prevUpper), newUpper, byref(prevLower), newLower);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.IsUsedUp
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsUsedUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.TryEnqueue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue(::System::Threading::IThreadPoolWorkItem* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEnqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, node);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.TryDequeue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue(ByRef<::System::Threading::IThreadPoolWorkItem*> node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::System::Threading::IThreadPoolWorkItem*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(node));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPoolWorkQueueThreadLocals
#include "System/Threading/ThreadPoolWorkQueueThreadLocals.hpp"
// Including type: System.Random
#include "System/Random.hpp"
// Including type: System.Threading.ThreadPoolWorkQueue/WorkStealingQueue
#include "System/Threading/ThreadPoolWorkQueue_WorkStealingQueue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals
::System::Threading::ThreadPoolWorkQueueThreadLocals* System::Threading::ThreadPoolWorkQueueThreadLocals::_get_threadLocals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::_get_threadLocals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ThreadPoolWorkQueueThreadLocals*>("System.Threading", "ThreadPoolWorkQueueThreadLocals", "threadLocals"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals
void System::Threading::ThreadPoolWorkQueueThreadLocals::_set_threadLocals(::System::Threading::ThreadPoolWorkQueueThreadLocals* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::_set_threadLocals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ThreadPoolWorkQueueThreadLocals", "threadLocals", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Threading.ThreadPoolWorkQueue workQueue
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "workQueue"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Threading.ThreadPoolWorkQueue/WorkStealingQueue workStealingQueue
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workStealingQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_workStealingQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "workStealingQueue"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadPoolWorkQueue::WorkStealingQueue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Random random
[[deprecated("Use field access instead!")]] ::System::Random*& System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_random() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::dyn_random");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "random"))->offset;
  return *reinterpret_cast<::System::Random**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueueThreadLocals.CleanUp
void System::Threading::ThreadPoolWorkQueueThreadLocals::CleanUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::CleanUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueueThreadLocals.Finalize
void System::Threading::ThreadPoolWorkQueueThreadLocals::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPoolWorkQueueThreadLocals::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading._ThreadPoolWaitCallback
#include "System/Threading/_ThreadPoolWaitCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading._ThreadPoolWaitCallback.PerformWaitCallback
bool System::Threading::_ThreadPoolWaitCallback::PerformWaitCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::_ThreadPoolWaitCallback::PerformWaitCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "_ThreadPoolWaitCallback", "PerformWaitCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.QueueUserWorkItemCallback
#include "System/Threading/QueueUserWorkItemCallback.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.ContextCallback ccb
::System::Threading::ContextCallback* System::Threading::QueueUserWorkItemCallback::_get_ccb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::_get_ccb");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading", "QueueUserWorkItemCallback", "ccb"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.ContextCallback ccb
void System::Threading::QueueUserWorkItemCallback::_set_ccb(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::_set_ccb");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "QueueUserWorkItemCallback", "ccb", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitCallback callback
[[deprecated("Use field access instead!")]] ::System::Threading::WaitCallback*& System::Threading::QueueUserWorkItemCallback::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::Threading::WaitCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ExecutionContext context
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::QueueUserWorkItemCallback::dyn_context() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_context");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "context"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::QueueUserWorkItemCallback::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::QueueUserWorkItemCallback*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::QueueUserWorkItemCallback::System_Threading_IThreadPoolWorkItem_MarkAborted(::System::Threading::ThreadAbortException* tae) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::System.Threading.IThreadPoolWorkItem.MarkAborted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::QueueUserWorkItemCallback*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tae);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback.WaitCallback_Context
void System::Threading::QueueUserWorkItemCallback::WaitCallback_Context(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::WaitCallback_Context");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "QueueUserWorkItemCallback", "WaitCallback_Context", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.QueueUserWorkItemCallback..cctor
void System::Threading::QueueUserWorkItemCallback::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::QueueUserWorkItemCallback::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "QueueUserWorkItemCallback", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPool
#include "System/Threading/ThreadPool.hpp"
// Including type: System.Threading.ThreadPool/<>c__DisplayClass17_0`1
#include "System/Threading/ThreadPool_--c__DisplayClass17_0_1.hpp"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPool.GetAvailableThreads
void System::Threading::ThreadPool::GetAvailableThreads(ByRef<int> workerThreads, ByRef<int> completionPortThreads) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::GetAvailableThreads");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "GetAvailableThreads", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(workerThreads), byref(completionPortThreads));
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ByRef<::System::Threading::StackCrawlMark> stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(millisecondsTimeOutInterval), ::il2cpp_utils::ExtractType(executeOnlyOnce), ::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(compressStack)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce, byref(stackMark), compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, int millisecondsTimeOutInterval, bool executeOnlyOnce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(millisecondsTimeOutInterval), ::il2cpp_utils::ExtractType(executeOnlyOnce)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce);
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
::System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(::System::Threading::WaitHandle* waitObject, ::System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, ::System::TimeSpan timeout, bool executeOnlyOnce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject), ::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(executeOnlyOnce)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitObject, callBack, state, timeout, executeOnlyOnce);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(::System::Threading::WaitCallback* callBack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueUserWorkItem
bool System::Threading::ThreadPool::UnsafeQueueUserWorkItem(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::UnsafeQueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "UnsafeQueueUserWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItemHelper
bool System::Threading::ThreadPool::QueueUserWorkItemHelper(::System::Threading::WaitCallback* callBack, ::Il2CppObject* state, ByRef<::System::Threading::StackCrawlMark> stackMark, bool compressStack, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::QueueUserWorkItemHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "QueueUserWorkItemHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callBack), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(stackMark), ::il2cpp_utils::ExtractType(compressStack), ::il2cpp_utils::ExtractType(forceGlobal)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, callBack, state, byref(stackMark), compressStack, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueCustomWorkItem
void System::Threading::ThreadPool::UnsafeQueueCustomWorkItem(::System::Threading::IThreadPoolWorkItem* workItem, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::UnsafeQueueCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "UnsafeQueueCustomWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workItem), ::il2cpp_utils::ExtractType(forceGlobal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, workItem, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPool.TryPopCustomWorkItem
bool System::Threading::ThreadPool::TryPopCustomWorkItem(::System::Threading::IThreadPoolWorkItem* workItem) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::TryPopCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "TryPopCustomWorkItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workItem)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, workItem);
}
// Autogenerated method: System.Threading.ThreadPool.RequestWorkerThread
bool System::Threading::ThreadPool::RequestWorkerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::RequestWorkerThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "RequestWorkerThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.EnsureVMInitialized
void System::Threading::ThreadPool::EnsureVMInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::EnsureVMInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "EnsureVMInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.GetAvailableThreadsNative
void System::Threading::ThreadPool::GetAvailableThreadsNative(ByRef<int> workerThreads, ByRef<int> completionPortThreads) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::GetAvailableThreadsNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "GetAvailableThreadsNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(workerThreads), byref(completionPortThreads));
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemComplete
bool System::Threading::ThreadPool::NotifyWorkItemComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.ReportThreadStatus
void System::Threading::ThreadPool::ReportThreadStatus(bool isWorking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::ReportThreadStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "ReportThreadStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isWorking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, isWorking);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgress
void System::Threading::ThreadPool::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgressNative
void System::Threading::ThreadPool::NotifyWorkItemProgressNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemProgressNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgressNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemQueued
void System::Threading::ThreadPool::NotifyWorkItemQueued() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::NotifyWorkItemQueued");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "NotifyWorkItemQueued", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.InitializeVMTp
void System::Threading::ThreadPool::InitializeVMTp(ByRef<bool> enableWorkerTracking) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::InitializeVMTp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "InitializeVMTp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enableWorkerTracking)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(enableWorkerTracking));
}
// Autogenerated method: System.Threading.ThreadPool.get_IsThreadPoolThread
bool System::Threading::ThreadPool::get_IsThreadPoolThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadPool::get_IsThreadPoolThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", "get_IsThreadPoolThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeWaitHandle
#include "Microsoft/Win32/SafeHandles/SafeWaitHandle.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Runtime.InteropServices.SafeHandle
#include "System/Runtime/InteropServices/SafeHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 WaitTimeout
int System::Threading::WaitHandle::_get_WaitTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WaitTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WaitTimeout"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 WaitTimeout
void System::Threading::WaitHandle::_set_WaitTimeout(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WaitTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WaitTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MAX_WAITHANDLES
int System::Threading::WaitHandle::_get_MAX_WAITHANDLES() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_MAX_WAITHANDLES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "MAX_WAITHANDLES"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAX_WAITHANDLES
void System::Threading::WaitHandle::_set_MAX_WAITHANDLES(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_MAX_WAITHANDLES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "MAX_WAITHANDLES", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_OBJECT_0
int System::Threading::WaitHandle::_get_WAIT_OBJECT_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_OBJECT_0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_OBJECT_0"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_OBJECT_0
void System::Threading::WaitHandle::_set_WAIT_OBJECT_0(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_OBJECT_0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_OBJECT_0", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_ABANDONED
int System::Threading::WaitHandle::_get_WAIT_ABANDONED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_ABANDONED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_ABANDONED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_ABANDONED
void System::Threading::WaitHandle::_set_WAIT_ABANDONED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_ABANDONED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_ABANDONED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WAIT_FAILED
int System::Threading::WaitHandle::_get_WAIT_FAILED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_WAIT_FAILED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "WAIT_FAILED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WAIT_FAILED
void System::Threading::WaitHandle::_set_WAIT_FAILED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_WAIT_FAILED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "WAIT_FAILED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ERROR_TOO_MANY_POSTS
int System::Threading::WaitHandle::_get_ERROR_TOO_MANY_POSTS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_ERROR_TOO_MANY_POSTS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "ERROR_TOO_MANY_POSTS"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ERROR_TOO_MANY_POSTS
void System::Threading::WaitHandle::_set_ERROR_TOO_MANY_POSTS(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_ERROR_TOO_MANY_POSTS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "ERROR_TOO_MANY_POSTS", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ERROR_NOT_OWNED_BY_CALLER
int System::Threading::WaitHandle::_get_ERROR_NOT_OWNED_BY_CALLER() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_ERROR_NOT_OWNED_BY_CALLER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "ERROR_NOT_OWNED_BY_CALLER"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ERROR_NOT_OWNED_BY_CALLER
void System::Threading::WaitHandle::_set_ERROR_NOT_OWNED_BY_CALLER(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_ERROR_NOT_OWNED_BY_CALLER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "ERROR_NOT_OWNED_BY_CALLER", value));
}
// Autogenerated static field getter
// Get static field: static protected readonly System.IntPtr InvalidHandle
::System::IntPtr System::Threading::WaitHandle::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::IntPtr>("System.Threading", "WaitHandle", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static protected readonly System.IntPtr InvalidHandle
void System::Threading::WaitHandle::_set_InvalidHandle(::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 MaxWaitHandles
int System::Threading::WaitHandle::_get_MaxWaitHandles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_get_MaxWaitHandles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "WaitHandle", "MaxWaitHandles"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 MaxWaitHandles
void System::Threading::WaitHandle::_set_MaxWaitHandles(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::_set_MaxWaitHandles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "WaitHandle", "MaxWaitHandles", value));
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr waitHandle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::WaitHandle::dyn_waitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_waitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waitHandle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle
[[deprecated("Use field access instead!")]] ::Microsoft::Win32::SafeHandles::SafeWaitHandle*& System::Threading::WaitHandle::dyn_safeWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_safeWaitHandle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "safeWaitHandle"))->offset;
  return *reinterpret_cast<::Microsoft::Win32::SafeHandles::SafeWaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean hasThreadAffinity
[[deprecated("Use field access instead!")]] bool& System::Threading::WaitHandle::dyn_hasThreadAffinity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::dyn_hasThreadAffinity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasThreadAffinity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.WaitHandle.Init
void System::Threading::WaitHandle::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.get_Handle
::System::IntPtr System::Threading::WaitHandle::get_Handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::get_Handle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.set_Handle
void System::Threading::WaitHandle::set_Handle(::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::set_Handle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.WaitHandle.get_SafeWaitHandle
::Microsoft::Win32::SafeHandles::SafeWaitHandle* System::Threading::WaitHandle::get_SafeWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::get_SafeWaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SafeWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Microsoft::Win32::SafeHandles::SafeWaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.set_SafeWaitHandle
void System::Threading::WaitHandle::set_SafeWaitHandle(::Microsoft::Win32::SafeHandles::SafeWaitHandle* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::set_SafeWaitHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SafeWaitHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.WaitHandle.SetHandleInternal
void System::Threading::WaitHandle::SetHandleInternal(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::SetHandleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHandleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, handle);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(::System::TimeSpan timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 11));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(::System::TimeSpan timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOne
bool System::Threading::WaitHandle::WaitOne(int64_t timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.InternalWaitOne
bool System::Threading::WaitHandle::InternalWaitOne(::System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, int64_t millisecondsTimeout, bool hasThreadAffinity, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::InternalWaitOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "InternalWaitOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitableSafeHandle), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(hasThreadAffinity), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitableSafeHandle, millisecondsTimeout, hasThreadAffinity, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAll
bool System::Threading::WaitHandle::WaitAll(::ArrayW<::System::Threading::WaitHandle*> waitHandles, int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAll
bool System::Threading::WaitHandle::WaitAll(::ArrayW<::System::Threading::WaitHandle*> waitHandles, int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::ArrayW<::System::Threading::WaitHandle*> waitHandles, int millisecondsTimeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::ArrayW<::System::Threading::WaitHandle*> waitHandles, ::System::TimeSpan timeout, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(timeout), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, timeout, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitAny
int System::Threading::WaitHandle::WaitAny(::ArrayW<::System::Threading::WaitHandle*> waitHandles) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles);
}
// Autogenerated method: System.Threading.WaitHandle.ThrowAbandonedMutexException
void System::Threading::WaitHandle::ThrowAbandonedMutexException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::ThrowAbandonedMutexException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "ThrowAbandonedMutexException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.ThrowAbandonedMutexException
void System::Threading::WaitHandle::ThrowAbandonedMutexException(int location, ::System::Threading::WaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::ThrowAbandonedMutexException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "ThrowAbandonedMutexException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, location, handle);
}
// Autogenerated method: System.Threading.WaitHandle.Close
void System::Threading::WaitHandle::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Close");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.Dispose
void System::Threading::WaitHandle::Dispose(bool explicitDisposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, explicitDisposing);
}
// Autogenerated method: System.Threading.WaitHandle.Dispose
void System::Threading::WaitHandle::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::WaitHandle*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.WaitHandle.WaitOneNative
int System::Threading::WaitHandle::WaitOneNative(::System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitOneNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitOneNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitableSafeHandle), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(hasThreadAffinity), ::il2cpp_utils::ExtractType(exitContext)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitableSafeHandle, millisecondsTimeout, hasThreadAffinity, exitContext);
}
// Autogenerated method: System.Threading.WaitHandle.WaitMultiple
int System::Threading::WaitHandle::WaitMultiple(::ArrayW<::System::Threading::WaitHandle*> waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::WaitMultiple");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "WaitMultiple", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitHandles), ::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(exitContext), ::il2cpp_utils::ExtractType(WaitAll)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, waitHandles, millisecondsTimeout, exitContext, WaitAll);
}
// Autogenerated method: System.Threading.WaitHandle.Wait_internal
int System::Threading::WaitHandle::Wait_internal(::System::IntPtr* handles, int numHandles, bool waitAll, int ms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::Wait_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", "Wait_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handles), ::il2cpp_utils::ExtractType(numHandles), ::il2cpp_utils::ExtractType(waitAll), ::il2cpp_utils::ExtractType(ms)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handles, numHandles, waitAll, ms);
}
// Autogenerated method: System.Threading.WaitHandle..cctor
void System::Threading::WaitHandle::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::WaitHandle::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "WaitHandle", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Interlocked
#include "System/Threading/Interlocked.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int System::Threading::Interlocked::CompareExchange(ByRef<int> location1, int value, int comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int System::Threading::Interlocked::CompareExchange(ByRef<int> location1, int value, int comparand, ByRef<bool> succeeded) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand), ::il2cpp_utils::ExtractType(succeeded)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand, byref(succeeded));
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
void System::Threading::Interlocked::CompareExchange(ByRef<::Il2CppObject*> location1, ByRef<::Il2CppObject*> value, ByRef<::Il2CppObject*> comparand, ByRef<::Il2CppObject*> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), byref(value), byref(comparand), byref(result));
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
::Il2CppObject* System::Threading::Interlocked::CompareExchange(ByRef<::Il2CppObject*> location1, ::Il2CppObject* value, ::Il2CppObject* comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
float System::Threading::Interlocked::CompareExchange(ByRef<float> location1, float value, float comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.Decrement
int System::Threading::Interlocked::Decrement(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Decrement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Decrement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Increment
int System::Threading::Interlocked::Increment(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Increment
int64_t System::Threading::Interlocked::Increment(ByRef<int64_t> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Increment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Increment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Exchange
int System::Threading::Interlocked::Exchange(ByRef<int> location1, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
void System::Threading::Interlocked::Exchange(ByRef<::Il2CppObject*> location1, ByRef<::Il2CppObject*> value, ByRef<::Il2CppObject*> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), byref(value), byref(result));
}
// Autogenerated method: System.Threading.Interlocked.Exchange
::Il2CppObject* System::Threading::Interlocked::Exchange(ByRef<::Il2CppObject*> location1, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
float System::Threading::Interlocked::Exchange(ByRef<float> location1, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
int64_t System::Threading::Interlocked::CompareExchange(ByRef<int64_t> location1, int64_t value, int64_t comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
::System::IntPtr System::Threading::Interlocked::CompareExchange(ByRef<::System::IntPtr> location1, ::System::IntPtr value, ::System::IntPtr comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.CompareExchange
double System::Threading::Interlocked::CompareExchange(ByRef<double> location1, double value, double comparand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::CompareExchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "CompareExchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparand)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value, comparand);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
int64_t System::Threading::Interlocked::Exchange(ByRef<int64_t> location1, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
::System::IntPtr System::Threading::Interlocked::Exchange(ByRef<::System::IntPtr> location1, ::System::IntPtr value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Exchange
double System::Threading::Interlocked::Exchange(ByRef<double> location1, double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Exchange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Exchange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.Read
int64_t System::Threading::Interlocked::Read(ByRef<int64_t> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Interlocked.Add
int System::Threading::Interlocked::Add(ByRef<int> location1, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location1), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location1), value);
}
// Autogenerated method: System.Threading.Interlocked.MemoryBarrier
void System::Threading::Interlocked::MemoryBarrier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Interlocked::MemoryBarrier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Interlocked", "MemoryBarrier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.LockQueue
#include "System/Threading/LockQueue.hpp"
// Including type: System.Threading.ReaderWriterLock
#include "System/Threading/ReaderWriterLock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.ReaderWriterLock rwlock
[[deprecated("Use field access instead!")]] ::System::Threading::ReaderWriterLock*& System::Threading::LockQueue::dyn_rwlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::dyn_rwlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rwlock"))->offset;
  return *reinterpret_cast<::System::Threading::ReaderWriterLock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lockCount
[[deprecated("Use field access instead!")]] int& System::Threading::LockQueue::dyn_lockCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::dyn_lockCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lockCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.LockQueue.Wait
bool System::Threading::LockQueue::Wait(int timeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, timeout);
}
// Autogenerated method: System.Threading.LockQueue.get_IsEmpty
bool System::Threading::LockQueue::get_IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::get_IsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.LockQueue.Pulse
void System::Threading::LockQueue::Pulse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::Pulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.NativeEventCalls
#include "System/Threading/NativeEventCalls.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeWaitHandle
#include "Microsoft/Win32/SafeHandles/SafeWaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.NativeEventCalls.CreateEvent_internal
::System::IntPtr System::Threading::NativeEventCalls::CreateEvent_internal(bool manual, bool initial, ::StringW name, ByRef<int> errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::CreateEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CreateEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manual), ::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manual, initial, name, byref(errorCode));
}
// Autogenerated method: System.Threading.NativeEventCalls.CreateEvent_icall
::System::IntPtr System::Threading::NativeEventCalls::CreateEvent_icall(bool manual, bool initial, ::Il2CppChar* name, int name_length, ByRef<int> errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::CreateEvent_icall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CreateEvent_icall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manual), ::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(name_length), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manual, initial, name, name_length, byref(errorCode));
}
// Autogenerated method: System.Threading.NativeEventCalls.SetEvent
bool System::Threading::NativeEventCalls::SetEvent(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::SetEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "SetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.SetEvent_internal
bool System::Threading::NativeEventCalls::SetEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::SetEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "SetEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.ResetEvent
bool System::Threading::NativeEventCalls::ResetEvent(::Microsoft::Win32::SafeHandles::SafeWaitHandle* handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::ResetEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "ResetEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.ResetEvent_internal
bool System::Threading::NativeEventCalls::ResetEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::ResetEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "ResetEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated method: System.Threading.NativeEventCalls.CloseEvent_internal
void System::Threading::NativeEventCalls::CloseEvent_internal(::System::IntPtr handle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::NativeEventCalls::CloseEvent_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "NativeEventCalls", "CloseEvent_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.ReaderWriterLock
#include "System/Threading/ReaderWriterLock.hpp"
// Including type: System.Threading.LockQueue
#include "System/Threading/LockQueue.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 seq_num
[[deprecated("Use field access instead!")]] int& System::Threading::ReaderWriterLock::dyn_seq_num() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_seq_num");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seq_num"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 state
[[deprecated("Use field access instead!")]] int& System::Threading::ReaderWriterLock::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 readers
[[deprecated("Use field access instead!")]] int& System::Threading::ReaderWriterLock::dyn_readers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_readers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readers"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 writer_lock_owner
[[deprecated("Use field access instead!")]] int& System::Threading::ReaderWriterLock::dyn_writer_lock_owner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_writer_lock_owner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "writer_lock_owner"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.LockQueue writer_queue
[[deprecated("Use field access instead!")]] ::System::Threading::LockQueue*& System::Threading::ReaderWriterLock::dyn_writer_queue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_writer_queue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "writer_queue"))->offset;
  return *reinterpret_cast<::System::Threading::LockQueue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Hashtable reader_locks
[[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& System::Threading::ReaderWriterLock::dyn_reader_locks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::dyn_reader_locks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reader_locks"))->offset;
  return *reinterpret_cast<::System::Collections::Hashtable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.ReaderWriterLock.AcquireWriterLock
void System::Threading::ReaderWriterLock::AcquireWriterLock(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::AcquireWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.ReaderWriterLock.AcquireWriterLock
void System::Threading::ReaderWriterLock::AcquireWriterLock(int millisecondsTimeout, int initialLockCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::AcquireWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(initialLockCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, millisecondsTimeout, initialLockCount);
}
// Autogenerated method: System.Threading.ReaderWriterLock.ReleaseWriterLock
void System::Threading::ReaderWriterLock::ReleaseWriterLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::ReleaseWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLock.ReleaseWriterLock
void System::Threading::ReaderWriterLock::ReleaseWriterLock(int releaseCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::ReleaseWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(releaseCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, releaseCount);
}
// Autogenerated method: System.Threading.ReaderWriterLock.HasWriterLock
bool System::Threading::ReaderWriterLock::HasWriterLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::HasWriterLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasWriterLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ReaderWriterLock.Finalize
void System::Threading::ReaderWriterLock::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Runtime::ConstrainedExecution::CriticalFinalizerObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitHandle _waitObject
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& System::Threading::RegisteredWaitHandle::dyn__waitObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__waitObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_waitObject"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitOrTimerCallback _callback
[[deprecated("Use field access instead!")]] ::System::Threading::WaitOrTimerCallback*& System::Threading::RegisteredWaitHandle::dyn__callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callback"))->offset;
  return *reinterpret_cast<::System::Threading::WaitOrTimerCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::RegisteredWaitHandle::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.WaitHandle _finalEvent
[[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& System::Threading::RegisteredWaitHandle::dyn__finalEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__finalEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finalEvent"))->offset;
  return *reinterpret_cast<::System::Threading::WaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent _cancelEvent
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::RegisteredWaitHandle::dyn__cancelEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__cancelEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cancelEvent"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.TimeSpan _timeout
[[deprecated("Use field access instead!")]] ::System::TimeSpan& System::Threading::RegisteredWaitHandle::dyn__timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__timeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeout"))->offset;
  return *reinterpret_cast<::System::TimeSpan*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _callsInProcess
[[deprecated("Use field access instead!")]] int& System::Threading::RegisteredWaitHandle::dyn__callsInProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__callsInProcess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callsInProcess"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _executeOnlyOnce
[[deprecated("Use field access instead!")]] bool& System::Threading::RegisteredWaitHandle::dyn__executeOnlyOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__executeOnlyOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_executeOnlyOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _unregistered
[[deprecated("Use field access instead!")]] bool& System::Threading::RegisteredWaitHandle::dyn__unregistered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::dyn__unregistered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unregistered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.Wait
void System::Threading::RegisteredWaitHandle::Wait(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.DoCallBack
void System::Threading::RegisteredWaitHandle::DoCallBack(::Il2CppObject* timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::DoCallBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoCallBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timedOut)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timedOut);
}
// Autogenerated method: System.Threading.RegisteredWaitHandle.Unregister
bool System::Threading::RegisteredWaitHandle::Unregister(::System::Threading::WaitHandle* waitObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::RegisteredWaitHandle::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waitObject)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, waitObject);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.InternalThread
#include "System/Threading/InternalThread.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 lock_thread_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_lock_thread_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_lock_thread_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lock_thread_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr native_handle
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_native_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_native_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "native_handle"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr name_chars
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_name_chars() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_name_chars");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name_chars"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 name_free
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_name_free() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_name_free");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name_free"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 name_length
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_name_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_name_length");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name_length"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ThreadState state
[[deprecated("Use field access instead!")]] ::System::Threading::ThreadState& System::Threading::InternalThread::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::System::Threading::ThreadState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object abort_exc
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_abort_exc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_exc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_exc"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 abort_state_handle
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_abort_state_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_state_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_state_handle"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int64 thread_id
[[deprecated("Use field access instead!")]] int64_t& System::Threading::InternalThread::dyn_thread_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_id"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr debugger_thread
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_debugger_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_debugger_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugger_thread"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UIntPtr static_data
[[deprecated("Use field access instead!")]] ::System::UIntPtr& System::Threading::InternalThread::dyn_static_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_static_data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "static_data"))->offset;
  return *reinterpret_cast<::System::UIntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr runtime_thread_info
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_runtime_thread_info() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_runtime_thread_info");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "runtime_thread_info"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object current_appcontext
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_current_appcontext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_current_appcontext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "current_appcontext"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object root_domain_thread
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::InternalThread::dyn_root_domain_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_root_domain_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root_domain_thread"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte[] _serialized_principal
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& System::Threading::InternalThread::dyn__serialized_principal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn__serialized_principal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_serialized_principal"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _serialized_principal_version
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn__serialized_principal_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn__serialized_principal_version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_serialized_principal_version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr appdomain_refs
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_appdomain_refs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_appdomain_refs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "appdomain_refs"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 interruption_requested
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_interruption_requested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_interruption_requested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interruption_requested"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr longlived
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_longlived() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_longlived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "longlived"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean threadpool_thread
[[deprecated("Use field access instead!")]] bool& System::Threading::InternalThread::dyn_threadpool_thread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_threadpool_thread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "threadpool_thread"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean thread_interrupt_requested
[[deprecated("Use field access instead!")]] bool& System::Threading::InternalThread::dyn_thread_interrupt_requested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_interrupt_requested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_interrupt_requested"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 stack_size
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_stack_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_stack_size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stack_size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte apartment_state
[[deprecated("Use field access instead!")]] uint8_t& System::Threading::InternalThread::dyn_apartment_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_apartment_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "apartment_state"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 critical_region_level
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_critical_region_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_critical_region_level");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "critical_region_level"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 managed_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_managed_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_managed_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "managed_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 small_id
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_small_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_small_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "small_id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr manage_callback
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_manage_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_manage_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "manage_callback"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr flags
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_flags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flags"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr thread_pinning_ref
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_thread_pinning_ref() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_pinning_ref");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_pinning_ref"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr abort_protected_block_count
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_abort_protected_block_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_abort_protected_block_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "abort_protected_block_count"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 priority
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr owned_mutex
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_owned_mutex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_owned_mutex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "owned_mutex"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr suspended_event
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_suspended_event() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_suspended_event");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "suspended_event"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 self_suspended
[[deprecated("Use field access instead!")]] int& System::Threading::InternalThread::dyn_self_suspended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_self_suspended");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self_suspended"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr thread_state
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_thread_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_thread_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thread_state"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr netcore0
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_netcore0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_netcore0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "netcore0"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr netcore1
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_netcore1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_netcore1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "netcore1"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr netcore2
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_netcore2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_netcore2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "netcore2"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.IntPtr last
[[deprecated("Use field access instead!")]] ::System::IntPtr& System::Threading::InternalThread::dyn_last() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::dyn_last");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "last"))->offset;
  return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.InternalThread.Thread_free_internal
void System::Threading::InternalThread::Thread_free_internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::Thread_free_internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Thread_free_internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.InternalThread.Finalize
void System::Threading::InternalThread::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::InternalThread::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Runtime::ConstrainedExecution::CriticalFinalizerObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.Threading.Timer/TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
// Including type: System.Threading.Timer/Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int64 MaxValue
int64_t System::Threading::Timer::_get_MaxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_get_MaxValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("System.Threading", "Timer", "MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 MaxValue
void System::Threading::Timer::_set_MaxValue(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::_set_MaxValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "MaxValue", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.TimerCallback callback
[[deprecated("Use field access instead!")]] ::System::Threading::TimerCallback*& System::Threading::Timer::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::Threading::TimerCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Timer::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 due_time_ms
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_due_time_ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_due_time_ms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "due_time_ms"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 period_ms
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_period_ms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_period_ms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "period_ms"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 next_run
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::dyn_next_run() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_next_run");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "next_run"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disposed
[[deprecated("Use field access instead!")]] bool& System::Threading::Timer::dyn_disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean is_dead
[[deprecated("Use field access instead!")]] bool& System::Threading::Timer::dyn_is_dead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_is_dead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "is_dead"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean is_added
[[deprecated("Use field access instead!")]] bool& System::Threading::Timer::dyn_is_added() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::dyn_is_added");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "is_added"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Timer.get_scheduler
::System::Threading::Timer::Scheduler* System::Threading::Timer::get_scheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::get_scheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer", "get_scheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Timer::Scheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer.Init
void System::Threading::Timer::Init(::System::Threading::TimerCallback* callback, ::Il2CppObject* state, int64_t dueTime, int64_t period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, state, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int dueTime, int period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(::System::TimeSpan dueTime, ::System::TimeSpan period) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period);
}
// Autogenerated method: System.Threading.Timer.Dispose
void System::Threading::Timer::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Timer*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int64_t dueTime, int64_t period, bool first) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dueTime), ::il2cpp_utils::ExtractType(period), ::il2cpp_utils::ExtractType(first)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, dueTime, period, first);
}
// Autogenerated method: System.Threading.Timer.KeepRootedWhileScheduled
void System::Threading::Timer::KeepRootedWhileScheduled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::KeepRootedWhileScheduled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeepRootedWhileScheduled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer.GetTimeMonotonic
int64_t System::Threading::Timer::GetTimeMonotonic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::GetTimeMonotonic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer", "GetTimeMonotonic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer/TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Timer/TimerComparer.System.Collections.IComparer.Compare
int System::Threading::Timer::TimerComparer::System_Collections_IComparer_Compare(::Il2CppObject* x, ::Il2CppObject* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::TimerComparer::System.Collections.IComparer.Compare");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::Timer::TimerComparer), 4));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x, y);
}
// Autogenerated method: System.Threading.Timer/TimerComparer.Compare
int System::Threading::Timer::TimerComparer::Compare(::System::Threading::Timer* tx, ::System::Threading::Timer* ty) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::TimerComparer::Compare");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::Timer::TimerComparer), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, tx, ty);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer/Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Timer/Scheduler instance
::System::Threading::Timer::Scheduler* System::Threading::Timer::Scheduler::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Timer::Scheduler*>("System.Threading", "Timer/Scheduler", "instance"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Timer/Scheduler instance
void System::Threading::Timer::Scheduler::_set_instance(::System::Threading::Timer::Scheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer/Scheduler", "instance", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean needReSort
[[deprecated("Use field access instead!")]] bool& System::Threading::Timer::Scheduler::dyn_needReSort() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::dyn_needReSort");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "needReSort"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Threading.Timer> list
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Threading::Timer*>*& System::Threading::Timer::Scheduler::dyn_list() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::dyn_list");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "list"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Threading::Timer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 current_next_run
[[deprecated("Use field access instead!")]] int64_t& System::Threading::Timer::Scheduler::dyn_current_next_run() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::dyn_current_next_run");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "current_next_run"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent changed
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& System::Threading::Timer::Scheduler::dyn_changed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::dyn_changed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "changed"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Timer/Scheduler.InitScheduler
void System::Threading::Timer::Scheduler::InitScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::InitScheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitScheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer/Scheduler.WakeupScheduler
void System::Threading::Timer::Scheduler::WakeupScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::WakeupScheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WakeupScheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer/Scheduler.SchedulerThread
void System::Threading::Timer::Scheduler::SchedulerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::SchedulerThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SchedulerThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer/Scheduler.get_Instance
::System::Threading::Timer::Scheduler* System::Threading::Timer::Scheduler::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Timer::Scheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Timer/Scheduler.Remove
void System::Threading::Timer::Scheduler::Remove(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/Scheduler.Change
void System::Threading::Timer::Scheduler::Change(::System::Threading::Timer* timer, int64_t new_next_run) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Change");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Change", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer), ::il2cpp_utils::ExtractType(new_next_run)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer, new_next_run);
}
// Autogenerated method: System.Threading.Timer/Scheduler.Add
void System::Threading::Timer::Scheduler::Add(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/Scheduler.InternalRemove
void System::Threading::Timer::Scheduler::InternalRemove(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::InternalRemove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/Scheduler.TimerCB
void System::Threading::Timer::Scheduler::TimerCB(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::TimerCB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", "TimerCB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, o);
}
// Autogenerated method: System.Threading.Timer/Scheduler.FireTimer
void System::Threading::Timer::Scheduler::FireTimer(::System::Threading::Timer* timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::FireTimer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireTimer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timer);
}
// Autogenerated method: System.Threading.Timer/Scheduler.RunSchedulerLoop
int System::Threading::Timer::Scheduler::RunSchedulerLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::RunSchedulerLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunSchedulerLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Timer/Scheduler..cctor
void System::Threading::Timer::Scheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Timer::Scheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Timer/Scheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.TimerCallback.Invoke
void System::Threading::TimerCallback::Invoke(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::TimerCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::TimerCallback*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Volatile
#include "System/Threading/Volatile.hpp"
// Including type: System.Threading.Volatile/VolatileBoolean
#include "System/Threading/Volatile_VolatileBoolean.hpp"
// Including type: System.Threading.Volatile/VolatileInt32
#include "System/Threading/Volatile_VolatileInt32.hpp"
// Including type: System.Threading.Volatile/VolatileIntPtr
#include "System/Threading/Volatile_VolatileIntPtr.hpp"
// Including type: System.Threading.Volatile/VolatileObject
#include "System/Threading/Volatile_VolatileObject.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Volatile.Read
bool System::Threading::Volatile::Read(ByRef<bool> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Volatile.Read
int System::Threading::Volatile::Read(ByRef<int> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Volatile.Write
void System::Threading::Volatile::Write(ByRef<int> location, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location), value);
}
// Autogenerated method: System.Threading.Volatile.Read
::System::IntPtr System::Threading::Volatile::Read(ByRef<::System::IntPtr> location) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location));
}
// Autogenerated method: System.Threading.Volatile.Write
void System::Threading::Volatile::Write(ByRef<int64_t> location, int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Volatile::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(location), value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskCanceledException
#include "System/Threading/Tasks/TaskCanceledException.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task _canceledTask
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::TaskCanceledException::dyn__canceledTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCanceledException::dyn__canceledTask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canceledTask"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskSchedulerException
#include "System/Threading/Tasks/TaskSchedulerException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskToApm
#include "System/Threading/Tasks/TaskToApm.hpp"
// Including type: System.Threading.Tasks.TaskToApm/TaskWrapperAsyncResult
#include "System/Threading/Tasks/TaskToApm_TaskWrapperAsyncResult.hpp"
// Including type: System.Threading.Tasks.TaskToApm/<>c__DisplayClass3_0
#include "System/Threading/Tasks/TaskToApm_--c__DisplayClass3_0.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskToApm.Begin
::System::IAsyncResult* System::Threading::Tasks::TaskToApm::Begin(::System::Threading::Tasks::Task* task, ::System::AsyncCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::Begin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskToApm", "Begin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task, callback, state);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm.End
void System::Threading::Tasks::TaskToApm::End(::System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::End");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskToApm", "End", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, asyncResult);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm.InvokeCallbackWhenTaskCompletes
void System::Threading::Tasks::TaskToApm::InvokeCallbackWhenTaskCompletes(::System::Threading::Tasks::Task* antecedent, ::System::AsyncCallback* callback, ::System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::InvokeCallbackWhenTaskCompletes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskToApm", "InvokeCallbackWhenTaskCompletes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(antecedent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, antecedent, callback, asyncResult);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskToApm/TaskWrapperAsyncResult
#include "System/Threading/Tasks/TaskToApm_TaskWrapperAsyncResult.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.Task Task
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn_Task() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn_Task");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Task"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _state
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _completedSynchronously
[[deprecated("Use field access instead!")]] bool& System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn__completedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::dyn__completedSynchronously");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_completedSynchronously"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/TaskWrapperAsyncResult.System.IAsyncResult.get_AsyncState
::Il2CppObject* System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_AsyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System.IAsyncResult.get_AsyncState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/TaskWrapperAsyncResult.System.IAsyncResult.get_CompletedSynchronously
bool System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_CompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System.IAsyncResult.get_CompletedSynchronously");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/TaskWrapperAsyncResult.System.IAsyncResult.get_IsCompleted
bool System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System.IAsyncResult.get_IsCompleted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/TaskWrapperAsyncResult.System.IAsyncResult.get_AsyncWaitHandle
::System::Threading::WaitHandle* System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_AsyncWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::System.IAsyncResult.get_AsyncWaitHandle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskToApm/<>c__DisplayClass3_0
#include "System/Threading/Tasks/TaskToApm_--c__DisplayClass3_0.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.AsyncCallback callback
[[deprecated("Use field access instead!")]] ::System::AsyncCallback*& System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::dyn_callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::dyn_callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
  return *reinterpret_cast<::System::AsyncCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.IAsyncResult asyncResult
[[deprecated("Use field access instead!")]] ::System::IAsyncResult*& System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::dyn_asyncResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::dyn_asyncResult");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asyncResult"))->offset;
  return *reinterpret_cast<::System::IAsyncResult**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskToApm/<>c__DisplayClass3_0.<InvokeCallbackWhenTaskCompletes>b__0
void System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::$InvokeCallbackWhenTaskCompletes$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskToApm::$$c__DisplayClass3_0::<InvokeCallbackWhenTaskCompletes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InvokeCallbackWhenTaskCompletes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.ValueTask
#include "System/Threading/Tasks/ValueTask.hpp"
// Including type: System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask
#include "System/Threading/Tasks/ValueTask_ValueTaskSourceAsTask.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Sources.IValueTaskSource
#include "System/Threading/Tasks/Sources/IValueTaskSource.hpp"
// Including type: System.Runtime.CompilerServices.ValueTaskAwaiter
#include "System/Runtime/CompilerServices/ValueTaskAwaiter.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable
#include "System/Runtime/CompilerServices/ConfiguredValueTaskAwaitable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.Task s_canceledTask
::System::Threading::Tasks::Task* System::Threading::Tasks::ValueTask::_get_s_canceledTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::_get_s_canceledTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task*>("System.Threading.Tasks", "ValueTask", "s_canceledTask"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.Task s_canceledTask
void System::Threading::Tasks::ValueTask::_set_s_canceledTask(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::_set_s_canceledTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "ValueTask", "s_canceledTask", value));
}
// Autogenerated instance field getter
// Get instance field: readonly System.Object _obj
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::ValueTask::dyn__obj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::dyn__obj");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_obj"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Int16 _token
[[deprecated("Use field access instead!")]] int16_t& System::Threading::Tasks::ValueTask::dyn__token() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::dyn__token");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_token"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Boolean _continueOnCapturedContext
[[deprecated("Use field access instead!")]] bool& System::Threading::Tasks::ValueTask::dyn__continueOnCapturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::dyn__continueOnCapturedContext");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_continueOnCapturedContext"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.get_CompletedTask
::System::Threading::Tasks::Task* System::Threading::Tasks::ValueTask::get_CompletedTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::get_CompletedTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "ValueTask", "get_CompletedTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask..ctor
System::Threading::Tasks::ValueTask::ValueTask(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.ValueTask..ctor
System::Threading::Tasks::ValueTask::ValueTask(::System::Threading::Tasks::Sources::IValueTaskSource* source, int16_t token) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source, token);
}
// Autogenerated method: System.Threading.Tasks.ValueTask..ctor
// ABORTED elsewhere.  System::Threading::Tasks::ValueTask::ValueTask(::Il2CppObject* obj, int16_t token, bool continueOnCapturedContext)
// Autogenerated method: System.Threading.Tasks.ValueTask.Equals
bool System::Threading::Tasks::ValueTask::Equals(::System::Threading::Tasks::ValueTask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::Tasks::ValueTask), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.AsTask
::System::Threading::Tasks::Task* System::Threading::Tasks::ValueTask::AsTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::AsTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AsTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.GetTaskForValueTaskSource
::System::Threading::Tasks::Task* System::Threading::Tasks::ValueTask::GetTaskForValueTaskSource(::System::Threading::Tasks::Sources::IValueTaskSource* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::GetTaskForValueTaskSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetTaskForValueTaskSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, t);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.get_IsCompleted
bool System::Threading::Tasks::ValueTask::get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::get_IsCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.get_IsCompletedSuccessfully
bool System::Threading::Tasks::ValueTask::get_IsCompletedSuccessfully() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::get_IsCompletedSuccessfully");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCompletedSuccessfully", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully
void System::Threading::Tasks::ValueTask::ThrowIfCompletedUnsuccessfully() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ThrowIfCompletedUnsuccessfully");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ThrowIfCompletedUnsuccessfully", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.GetAwaiter
::System::Runtime::CompilerServices::ValueTaskAwaiter System::Threading::Tasks::ValueTask::GetAwaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::GetAwaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetAwaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::ValueTaskAwaiter, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.ConfigureAwait
::System::Runtime::CompilerServices::ConfiguredValueTaskAwaitable System::Threading::Tasks::ValueTask::ConfigureAwait(bool continueOnCapturedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ConfigureAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ConfigureAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continueOnCapturedContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::ConfiguredValueTaskAwaitable, false>(this, ___internal__method, continueOnCapturedContext);
}
// Autogenerated method: System.Threading.Tasks.ValueTask..cctor
void System::Threading::Tasks::ValueTask::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "ValueTask", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.GetHashCode
int System::Threading::Tasks::ValueTask::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask.Equals
bool System::Threading::Tasks::ValueTask::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask
#include "System/Threading/Tasks/ValueTask_ValueTaskSourceAsTask.hpp"
// Including type: System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask/<>c
#include "System/Threading/Tasks/ValueTask_ValueTaskSourceAsTask_--c.hpp"
// Including type: System.Threading.Tasks.Sources.IValueTaskSource
#include "System/Threading/Tasks/Sources/IValueTaskSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_completionAction
::System::Action_1<::Il2CppObject*>* System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::_get_s_completionAction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::_get_s_completionAction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "ValueTask/ValueTaskSourceAsTask", "s_completionAction"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_completionAction
void System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::_set_s_completionAction(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::_set_s_completionAction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "ValueTask/ValueTaskSourceAsTask", "s_completionAction", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Tasks.Sources.IValueTaskSource _source
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Sources::IValueTaskSource*& System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::dyn__source() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::dyn__source");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_source"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Sources::IValueTaskSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int16 _token
[[deprecated("Use field access instead!")]] int16_t& System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::dyn__token() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::dyn__token");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_token"))->offset;
  return *reinterpret_cast<int16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask..cctor
void System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "ValueTask/ValueTaskSourceAsTask", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask/<>c
#include "System/Threading/Tasks/ValueTask_ValueTaskSourceAsTask_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask/<>c <>9
::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c* System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c*>("System.Threading.Tasks", "ValueTask/ValueTaskSourceAsTask/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask/<>c <>9
void System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c::_set_$$9(::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "ValueTask/ValueTaskSourceAsTask/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask/<>c..cctor
void System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "ValueTask/ValueTaskSourceAsTask/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ValueTask/ValueTaskSourceAsTask/<>c.<.cctor>b__4_0
void System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c::$_cctor$b__4_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ValueTask::ValueTaskSourceAsTask::$$c::<.cctor>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.BeginEndAwaitableAdapter
#include "System/Threading/Tasks/BeginEndAwaitableAdapter.hpp"
// Including type: System.Threading.Tasks.BeginEndAwaitableAdapter/<>c
#include "System/Threading/Tasks/BeginEndAwaitableAdapter_--c.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.AsyncCallback Callback
::System::AsyncCallback* System::Threading::Tasks::BeginEndAwaitableAdapter::_get_Callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::BeginEndAwaitableAdapter::_get_Callback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::AsyncCallback*>("System.Threading.Tasks", "BeginEndAwaitableAdapter", "Callback"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.AsyncCallback Callback
void System::Threading::Tasks::BeginEndAwaitableAdapter::_set_Callback(::System::AsyncCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::BeginEndAwaitableAdapter::_set_Callback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "BeginEndAwaitableAdapter", "Callback", value));
}
// Autogenerated method: System.Threading.Tasks.BeginEndAwaitableAdapter..cctor
void System::Threading::Tasks::BeginEndAwaitableAdapter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::BeginEndAwaitableAdapter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "BeginEndAwaitableAdapter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.BeginEndAwaitableAdapter/<>c
#include "System/Threading/Tasks/BeginEndAwaitableAdapter_--c.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.BeginEndAwaitableAdapter/<>c <>9
::System::Threading::Tasks::BeginEndAwaitableAdapter::$$c* System::Threading::Tasks::BeginEndAwaitableAdapter::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::BeginEndAwaitableAdapter::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::BeginEndAwaitableAdapter::$$c*>("System.Threading.Tasks", "BeginEndAwaitableAdapter/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.BeginEndAwaitableAdapter/<>c <>9
void System::Threading::Tasks::BeginEndAwaitableAdapter::$$c::_set_$$9(::System::Threading::Tasks::BeginEndAwaitableAdapter::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::BeginEndAwaitableAdapter::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "BeginEndAwaitableAdapter/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.Tasks.BeginEndAwaitableAdapter/<>c..cctor
void System::Threading::Tasks::BeginEndAwaitableAdapter::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::BeginEndAwaitableAdapter::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "BeginEndAwaitableAdapter/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.BeginEndAwaitableAdapter/<>c.<.cctor>b__2_0
void System::Threading::Tasks::BeginEndAwaitableAdapter::$$c::$_cctor$b__2_0(::System::IAsyncResult* asyncResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::BeginEndAwaitableAdapter::$$c::<.cctor>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncResult)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, asyncResult);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskAwaiters
#include "System/Threading/Tasks/TaskAwaiters.hpp"
// Including type: System.Threading.Tasks.ForceAsyncAwaiter
#include "System/Threading/Tasks/ForceAsyncAwaiter.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskAwaiters.ForceAsync
::System::Threading::Tasks::ForceAsyncAwaiter System::Threading::Tasks::TaskAwaiters::ForceAsync(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskAwaiters::ForceAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskAwaiters", "ForceAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::ForceAsyncAwaiter, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.ForceAsyncAwaiter
#include "System/Threading/Tasks/ForceAsyncAwaiter.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task _task
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::ForceAsyncAwaiter::dyn__task() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ForceAsyncAwaiter::dyn__task");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_task"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.ForceAsyncAwaiter..ctor
// ABORTED elsewhere.  System::Threading::Tasks::ForceAsyncAwaiter::ForceAsyncAwaiter(::System::Threading::Tasks::Task* task)
// Autogenerated method: System.Threading.Tasks.ForceAsyncAwaiter.GetAwaiter
::System::Threading::Tasks::ForceAsyncAwaiter System::Threading::Tasks::ForceAsyncAwaiter::GetAwaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ForceAsyncAwaiter::GetAwaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetAwaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::ForceAsyncAwaiter, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ForceAsyncAwaiter.get_IsCompleted
bool System::Threading::Tasks::ForceAsyncAwaiter::get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ForceAsyncAwaiter::get_IsCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ForceAsyncAwaiter.GetResult
void System::Threading::Tasks::ForceAsyncAwaiter::GetResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ForceAsyncAwaiter::GetResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ForceAsyncAwaiter.OnCompleted
void System::Threading::Tasks::ForceAsyncAwaiter::OnCompleted(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ForceAsyncAwaiter::OnCompleted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::Tasks::ForceAsyncAwaiter), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.ForceAsyncAwaiter.UnsafeOnCompleted
void System::Threading::Tasks::ForceAsyncAwaiter::UnsafeOnCompleted(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ForceAsyncAwaiter::UnsafeOnCompleted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Threading::Tasks::ForceAsyncAwaiter), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.DebuggerSupport
#include "System/Threading/Tasks/DebuggerSupport.hpp"
// Including type: System.Collections.Generic.LowLevelDictionary`2
#include "System/Collections/Generic/LowLevelDictionary_2.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
// Including type: Internal.Runtime.Augments.AsyncStatus
#include "Internal/Runtime/Augments/AsyncStatus.hpp"
// Including type: System.Threading.Tasks.CausalityRelation
#include "System/Threading/Tasks/CausalityRelation.hpp"
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.LowLevelDictionary`2<System.Int32,System.Threading.Tasks.Task> s_activeTasks
::System::Collections::Generic::LowLevelDictionary_2<int, ::System::Threading::Tasks::Task*>* System::Threading::Tasks::DebuggerSupport::_get_s_activeTasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::_get_s_activeTasks");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::LowLevelDictionary_2<int, ::System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "DebuggerSupport", "s_activeTasks")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.LowLevelDictionary`2<System.Int32,System.Threading.Tasks.Task> s_activeTasks
void System::Threading::Tasks::DebuggerSupport::_set_s_activeTasks(::System::Collections::Generic::LowLevelDictionary_2<int, ::System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::_set_s_activeTasks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "DebuggerSupport", "s_activeTasks", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_activeTasksLock
::Il2CppObject* System::Threading::Tasks::DebuggerSupport::_get_s_activeTasksLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::_get_s_activeTasksLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "DebuggerSupport", "s_activeTasksLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_activeTasksLock
void System::Threading::Tasks::DebuggerSupport::_set_s_activeTasksLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::_set_s_activeTasksLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "DebuggerSupport", "s_activeTasksLock", value));
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.get_LoggingOn
bool System::Threading::Tasks::DebuggerSupport::get_LoggingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::get_LoggingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "get_LoggingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.TraceOperationCreation
void System::Threading::Tasks::DebuggerSupport::TraceOperationCreation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::Task* task, ::StringW operationName, uint64_t relatedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::TraceOperationCreation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "TraceOperationCreation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(operationName), ::il2cpp_utils::ExtractType(relatedContext)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, task, operationName, relatedContext);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.TraceOperationCompletion
void System::Threading::Tasks::DebuggerSupport::TraceOperationCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::Task* task, ::Internal::Runtime::Augments::AsyncStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::TraceOperationCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "TraceOperationCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(status)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, task, status);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.TraceOperationRelation
void System::Threading::Tasks::DebuggerSupport::TraceOperationRelation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::Task* task, ::System::Threading::Tasks::CausalityRelation relation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::TraceOperationRelation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "TraceOperationRelation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(relation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, task, relation);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.TraceSynchronousWorkStart
void System::Threading::Tasks::DebuggerSupport::TraceSynchronousWorkStart(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::Task* task, ::System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::TraceSynchronousWorkStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "TraceSynchronousWorkStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, task, work);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.TraceSynchronousWorkCompletion
void System::Threading::Tasks::DebuggerSupport::TraceSynchronousWorkCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::TraceSynchronousWorkCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "TraceSynchronousWorkCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, work);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.AddToActiveTasks
void System::Threading::Tasks::DebuggerSupport::AddToActiveTasks(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::AddToActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "AddToActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.AddToActiveTasksNonInlined
void System::Threading::Tasks::DebuggerSupport::AddToActiveTasksNonInlined(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::AddToActiveTasksNonInlined");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "AddToActiveTasksNonInlined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.RemoveFromActiveTasks
void System::Threading::Tasks::DebuggerSupport::RemoveFromActiveTasks(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::RemoveFromActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "RemoveFromActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport.RemoveFromActiveTasksNonInlined
void System::Threading::Tasks::DebuggerSupport::RemoveFromActiveTasksNonInlined(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::RemoveFromActiveTasksNonInlined");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", "RemoveFromActiveTasksNonInlined", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.DebuggerSupport..cctor
void System::Threading::Tasks::DebuggerSupport::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::DebuggerSupport::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "DebuggerSupport", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Created
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Created() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Created");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Created"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Created
void System::Threading::Tasks::TaskStatus::_set_Created(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Created");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Created", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingForActivation
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingForActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingForActivation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingForActivation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingForActivation
void System::Threading::Tasks::TaskStatus::_set_WaitingForActivation(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingForActivation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingForActivation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingToRun
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingToRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingToRun");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingToRun"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingToRun
void System::Threading::Tasks::TaskStatus::_set_WaitingToRun(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingToRun");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingToRun", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Running
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Running"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Running
void System::Threading::Tasks::TaskStatus::_set_Running(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_WaitingForChildrenToComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_WaitingForChildrenToComplete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "WaitingForChildrenToComplete"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
void System::Threading::Tasks::TaskStatus::_set_WaitingForChildrenToComplete(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_WaitingForChildrenToComplete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "WaitingForChildrenToComplete", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus RanToCompletion
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_RanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_RanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "RanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus RanToCompletion
void System::Threading::Tasks::TaskStatus::_set_RanToCompletion(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_RanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "RanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Canceled
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Canceled
void System::Threading::Tasks::TaskStatus::_set_Canceled(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskStatus Faulted
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::TaskStatus::_get_Faulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_get_Faulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskStatus>("System.Threading.Tasks", "TaskStatus", "Faulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskStatus Faulted
void System::Threading::Tasks::TaskStatus::_set_Faulted(::System::Threading::Tasks::TaskStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::_set_Faulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskStatus", "Faulted", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task/ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
// Including type: System.Threading.Tasks.Task/SetOnInvokeMres
#include "System/Threading/Tasks/Task_SetOnInvokeMres.hpp"
// Including type: System.Threading.Tasks.Task/DelayPromise
#include "System/Threading/Tasks/Task_DelayPromise.hpp"
// Including type: System.Threading.Tasks.Task/WhenAllPromise
#include "System/Threading/Tasks/Task_WhenAllPromise.hpp"
// Including type: System.Threading.Tasks.Task/<>c
#include "System/Threading/Tasks/Task_--c.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.Tasks.StackGuard
#include "System/Threading/Tasks/StackGuard.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Threading.Tasks.TaskContinuation
#include "System/Threading/Tasks/TaskContinuation.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter
#include "System/Runtime/CompilerServices/TaskAwaiter.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
#include "System/Runtime/CompilerServices/ConfiguredTaskAwaitable.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Runtime.CompilerServices.YieldAwaitable
#include "System/Runtime/CompilerServices/YieldAwaitable.hpp"
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.OperationCanceledException
#include "System/OperationCanceledException.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskIdCounter
int System::Threading::Tasks::Task::_get_s_taskIdCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskIdCounter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "s_taskIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskIdCounter
void System::Threading::Tasks::Task::_set_s_taskIdCounter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskIdCounter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 OptionsMask
int System::Threading::Tasks::Task::_get_OptionsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_OptionsMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "OptionsMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 OptionsMask
void System::Threading::Tasks::Task::_set_OptionsMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_OptionsMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "OptionsMask", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_STARTED
int System::Threading::Tasks::Task::_get_TASK_STATE_STARTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_STARTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_STARTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_STARTED
void System::Threading::Tasks::Task::_set_TASK_STATE_STARTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_STARTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_STARTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
int System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
void System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DISPOSED
int System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DISPOSED
void System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
int System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
void System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_FAULTED
int System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_FAULTED
void System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
int System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
void System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
int System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
void System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 CANCELLATION_REQUESTED
int System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 CANCELLATION_REQUESTED
void System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_taskCompletionSentinel
::Il2CppObject* System::Threading::Tasks::Task::_get_s_taskCompletionSentinel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskCompletionSentinel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "Task", "s_taskCompletionSentinel"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_taskCompletionSentinel
void System::Threading::Tasks::Task::_set_s_taskCompletionSentinel(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskCompletionSentinel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCompletionSentinel", value));
}
// Autogenerated static field getter
// Get static field: static System.Boolean s_asyncDebuggingEnabled
bool System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled"));
}
// Autogenerated static field setter
// Set static field: static System.Boolean s_asyncDebuggingEnabled
void System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
::System::Action_1<::Il2CppObject*>* System::Threading::Tasks::Task::_get_s_taskCancelCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_taskCancelCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task", "s_taskCancelCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
void System::Threading::Tasks::Task::_set_s_taskCancelCallback(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_taskCancelCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCancelCallback", value));
}
// Autogenerated static field getter
// Get static field: static System.Threading.Tasks.Task t_currentTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_t_currentTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_t_currentTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "t_currentTask"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.Tasks.Task t_currentTask
void System::Threading::Tasks::Task::_set_t_currentTask(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_t_currentTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_currentTask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.StackGuard t_stackGuard
::System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::_get_t_stackGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_t_stackGuard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::StackGuard*>("System.Threading.Tasks", "Task", "t_stackGuard"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.StackGuard t_stackGuard
void System::Threading::Tasks::Task::_set_t_stackGuard(::System::Threading::Tasks::StackGuard* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_t_stackGuard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_stackGuard", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>* System::Threading::Tasks::Task::_get_s_createContingentProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_createContingentProperties");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>*>("System.Threading.Tasks", "Task", "s_createContingentProperties"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
void System::Threading::Tasks::Task::_set_s_createContingentProperties(::System::Func_1<::System::Threading::Tasks::Task::ContingentProperties*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_createContingentProperties");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_createContingentProperties", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskFactory <Factory>k__BackingField
::System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::_get_$Factory$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_$Factory$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskFactory*>("System.Threading.Tasks", "Task", "<Factory>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskFactory <Factory>k__BackingField
void System::Threading::Tasks::Task::_set_$Factory$k__BackingField(::System::Threading::Tasks::TaskFactory* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_$Factory$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "<Factory>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.Task <CompletedTask>k__BackingField
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_$CompletedTask$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_$CompletedTask$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "<CompletedTask>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.Task <CompletedTask>k__BackingField
void System::Threading::Tasks::Task::_set_$CompletedTask$k__BackingField(::System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_$CompletedTask$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "<CompletedTask>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
::System::Predicate_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Predicate_1<::System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
void System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate(::System::Predicate_1<::System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_ecCallback
::System::Threading::ContextCallback* System::Threading::Tasks::Task::_get_s_ecCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_ecCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading.Tasks", "Task", "s_ecCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_ecCallback
void System::Threading::Tasks::Task::_set_s_ecCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_ecCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_ecCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
::System::Predicate_1<::Il2CppObject*>* System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Predicate_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
void System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate(::System::Predicate_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_currentActiveTasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_currentActiveTasks");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_currentActiveTasks")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
void System::Threading::Tasks::Task::_set_s_currentActiveTasks(::System::Collections::Generic::Dictionary_2<int, ::System::Threading::Tasks::Task*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_currentActiveTasks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_currentActiveTasks", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_activeTasksLock
::Il2CppObject* System::Threading::Tasks::Task::_get_s_activeTasksLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_get_s_activeTasksLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Threading.Tasks", "Task", "s_activeTasksLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_activeTasksLock
void System::Threading::Tasks::Task::_set_s_activeTasksLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::_set_s_activeTasksLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_activeTasksLock", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_taskId
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::dyn_m_taskId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_taskId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Delegate m_action
[[deprecated("Use field access instead!")]] ::System::Delegate*& System::Threading::Tasks::Task::dyn_m_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_action"))->offset;
  return *reinterpret_cast<::System::Delegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object m_stateObject
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::dyn_m_stateObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_stateObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_stateObject"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.TaskScheduler m_taskScheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::Task::dyn_m_taskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_taskScheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskScheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.Task m_parent
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::Task::dyn_m_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_parent"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_stateFlags
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::dyn_m_stateFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_stateFlags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_stateFlags"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object m_continuationObject
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::dyn_m_continuationObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_continuationObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_continuationObject"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.Task/ContingentProperties m_contingentProperties
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task::ContingentProperties*& System::Threading::Tasks::Task::dyn_m_contingentProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::dyn_m_contingentProperties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_contingentProperties"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task::ContingentProperties**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task.TaskConstructorCore
void System::Threading::Tasks::Task::TaskConstructorCore(::System::Delegate* action, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskCreationOptions creationOptions, ::System::Threading::Tasks::InternalTaskOptions internalOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TaskConstructorCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TaskConstructorCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(internalOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action, state, cancellationToken, creationOptions, internalOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.AssignCancellationToken
void System::Threading::Tasks::Task::AssignCancellationToken(::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::Task* antecedent, ::System::Threading::Tasks::TaskContinuation* continuation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AssignCancellationToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignCancellationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(antecedent), ::il2cpp_utils::ExtractType(continuation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cancellationToken, antecedent, continuation);
}
// Autogenerated method: System.Threading.Tasks.Task.TaskCancelCallback
void System::Threading::Tasks::Task::TaskCancelCallback(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TaskCancelCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "TaskCancelCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, o);
}
// Autogenerated method: System.Threading.Tasks.Task.TrySetCanceled
bool System::Threading::Tasks::Task::TrySetCanceled(::System::Threading::CancellationToken tokenToRecord) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TrySetCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySetCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tokenToRecord);
}
// Autogenerated method: System.Threading.Tasks.Task.TrySetCanceled
bool System::Threading::Tasks::Task::TrySetCanceled(::System::Threading::CancellationToken tokenToRecord, ::Il2CppObject* cancellationException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TrySetCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySetCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord), ::il2cpp_utils::ExtractType(cancellationException)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tokenToRecord, cancellationException);
}
// Autogenerated method: System.Threading.Tasks.Task.TrySetException
bool System::Threading::Tasks::Task::TrySetException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::TrySetException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySetException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Options
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_Options() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Options");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Options", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.OptionsMethod
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::OptionsMethod(int flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::OptionsMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "OptionsMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AtomicStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtomicStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(illegalBits)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newBits, illegalBits);
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits, ByRef<int> oldFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AtomicStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AtomicStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newBits), ::il2cpp_utils::ExtractType(illegalBits), ::il2cpp_utils::ExtractType(oldFlags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, newBits, illegalBits, byref(oldFlags));
}
// Autogenerated method: System.Threading.Tasks.Task.SetNotificationForWaitCompletion
void System::Threading::Tasks::Task::SetNotificationForWaitCompletion(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetNotificationForWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNotificationForWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enabled)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletionIfNecessary
bool System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyDebuggerOfWaitCompletionIfNecessary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.AnyTaskRequiresNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AnyTaskRequiresNotifyDebuggerOfWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "AnyTaskRequiresNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabledOrNotRanToCompletion
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWaitNotificationEnabledOrNotRanToCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 11));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabled
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsWaitNotificationEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsWaitNotificationEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletion
void System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.MarkStarted
bool System::Threading::Tasks::Task::MarkStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::MarkStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.AddNewChild
void System::Threading::Tasks::Task::AddNewChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddNewChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNewChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.DisregardChild
void System::Threading::Tasks::Task::DisregardChild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DisregardChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisregardChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalStartNew
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalStartNew(::System::Threading::Tasks::Task* creatingTask, ::System::Delegate* action, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::Tasks::TaskCreationOptions options, ::System::Threading::Tasks::InternalTaskOptions internalOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalStartNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalStartNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creatingTask), ::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(internalOptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creatingTask, action, state, cancellationToken, scheduler, options, internalOptions);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Id
int System::Threading::Tasks::Task::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_InternalCurrent
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_InternalCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_InternalCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_InternalCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCurrentIfAttached
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalCurrentIfAttached(::System::Threading::Tasks::TaskCreationOptions creationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalCurrentIfAttached");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalCurrentIfAttached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creationOptions);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CurrentStackGuard
::System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::get_CurrentStackGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CurrentStackGuard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_CurrentStackGuard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::StackGuard*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Exception
::System::AggregateException* System::Threading::Tasks::Task::get_Exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Exception");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Exception", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AggregateException*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Status
::System::Threading::Tasks::TaskStatus System::Threading::Tasks::Task::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskStatus, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCanceled
bool System::Threading::Tasks::Task::get_IsCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationRequested
bool System::Threading::Tasks::Task::get_IsCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCancellationRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitialized
::System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureContingentPropertiesInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitializedCore
::System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureContingentPropertiesInitializedCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CancellationToken
::System::Threading::CancellationToken System::Threading::Tasks::Task::get_CancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CancellationToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CancellationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::CancellationToken, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationAcknowledged
bool System::Threading::Tasks::Task::get_IsCancellationAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCancellationAcknowledged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCancellationAcknowledged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCompleted
bool System::Threading::Tasks::Task::get_IsCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCompleted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.IsCompletedMethod
bool System::Threading::Tasks::Task::IsCompletedMethod(int flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::IsCompletedMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "IsCompletedMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, flags);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCompletedSuccessfully
bool System::Threading::Tasks::Task::get_IsCompletedSuccessfully() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsCompletedSuccessfully");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCompletedSuccessfully", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CreationOptions
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_CreationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CreationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_AsyncWaitHandle
::System::Threading::WaitHandle* System::Threading::Tasks::Task::System_IAsyncResult_get_AsyncWaitHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.IAsyncResult.get_AsyncWaitHandle");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_AsyncState
::Il2CppObject* System::Threading::Tasks::Task::get_AsyncState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_AsyncState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_CompletedSynchronously
bool System::Threading::Tasks::Task::System_IAsyncResult_get_CompletedSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.IAsyncResult.get_CompletedSynchronously");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExecutingTaskScheduler
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::Task::get_ExecutingTaskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ExecutingTaskScheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExecutingTaskScheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_Factory
::System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::get_Factory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_Factory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_Factory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskFactory*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedTask
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_CompletedTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CompletedTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "get_CompletedTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedEvent
::System::Threading::ManualResetEventSlim* System::Threading::Tasks::Task::get_CompletedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CompletedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CompletedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ManualResetEventSlim*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExceptionRecorded
bool System::Threading::Tasks::Task::get_ExceptionRecorded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_ExceptionRecorded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExceptionRecorded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsFaulted
bool System::Threading::Tasks::Task::get_IsFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsFaulted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFaulted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_CapturedContext
::System::Threading::ExecutionContext* System::Threading::Tasks::Task::get_CapturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_CapturedContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CapturedContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ExecutionContext*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.set_CapturedContext
void System::Threading::Tasks::Task::set_CapturedContext(::System::Threading::ExecutionContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::set_CapturedContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CapturedContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Threading.Tasks.Task.ScheduleAndStart
void System::Threading::Tasks::Task::ScheduleAndStart(bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ScheduleAndStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScheduleAndStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(needsProtection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, needsProtection);
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::Il2CppObject* exceptionObject, bool representsCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject), ::il2cpp_utils::ExtractType(representsCancellation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject, representsCancellation);
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptions
::System::AggregateException* System::Threading::Tasks::Task::GetExceptions(bool includeTaskCanceledExceptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetExceptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeTaskCanceledExceptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AggregateException*, false>(this, ___internal__method, includeTaskCanceledExceptions);
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptionDispatchInfos
::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* System::Threading::Tasks::Task::GetExceptionDispatchInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetExceptionDispatchInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptionDispatchInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.GetCancellationExceptionDispatchInfo
::System::Runtime::ExceptionServices::ExceptionDispatchInfo* System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ThrowIfExceptional
void System::Threading::Tasks::Task::ThrowIfExceptional(bool includeTaskCanceledExceptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ThrowIfExceptional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowIfExceptional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeTaskCanceledExceptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, includeTaskCanceledExceptions);
}
// Autogenerated method: System.Threading.Tasks.Task.UpdateExceptionObservedStatus
void System::Threading::Tasks::Task::UpdateExceptionObservedStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::UpdateExceptionObservedStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateExceptionObservedStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsExceptionObservedByParent
bool System::Threading::Tasks::Task::get_IsExceptionObservedByParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsExceptionObservedByParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsExceptionObservedByParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsDelegateInvoked
bool System::Threading::Tasks::Task::get_IsDelegateInvoked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::get_IsDelegateInvoked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDelegateInvoked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Finish
void System::Threading::Tasks::Task::Finish(bool bUserDelegateExecuted) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Finish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bUserDelegateExecuted)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bUserDelegateExecuted);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageTwo
void System::Threading::Tasks::Task::FinishStageTwo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishStageTwo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishStageTwo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageThree
void System::Threading::Tasks::Task::FinishStageThree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishStageThree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishStageThree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ProcessChildCompletion
void System::Threading::Tasks::Task::ProcessChildCompletion(::System::Threading::Tasks::Task* childTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ProcessChildCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessChildCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, childTask);
}
// Autogenerated method: System.Threading.Tasks.Task.AddExceptionsFromChildren
void System::Threading::Tasks::Task::AddExceptionsFromChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddExceptionsFromChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddExceptionsFromChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Execute
void System::Threading::Tasks::Task::Execute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteEntry
bool System::Threading::Tasks::Task::ExecuteEntry(bool bPreventDoubleExecution) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecuteEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bPreventDoubleExecution)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bPreventDoubleExecution);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecutionContextCallback
void System::Threading::Tasks::Task::ExecutionContextCallback(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecutionContextCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "ExecutionContextCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvoke
void System::Threading::Tasks::Task::InnerInvoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InnerInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.HandleException
void System::Threading::Tasks::Task::HandleException(::System::Exception* unhandledException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::HandleException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unhandledException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, unhandledException);
}
// Autogenerated method: System.Threading.Tasks.Task.GetAwaiter
::System::Runtime::CompilerServices::TaskAwaiter System::Threading::Tasks::Task::GetAwaiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::GetAwaiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAwaiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::TaskAwaiter, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ConfigureAwait
::System::Runtime::CompilerServices::ConfiguredTaskAwaitable System::Threading::Tasks::Task::ConfigureAwait(bool continueOnCapturedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ConfigureAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfigureAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continueOnCapturedContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::ConfiguredTaskAwaitable, false>(this, ___internal__method, continueOnCapturedContext);
}
// Autogenerated method: System.Threading.Tasks.Task.SetContinuationForAwait
void System::Threading::Tasks::Task::SetContinuationForAwait(::System::Action* continuationAction, bool continueOnCapturedContext, bool flowExecutionContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetContinuationForAwait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContinuationForAwait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(continueOnCapturedContext), ::il2cpp_utils::ExtractType(flowExecutionContext)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationAction, continueOnCapturedContext, flowExecutionContext);
}
// Autogenerated method: System.Threading.Tasks.Task.Yield
::System::Runtime::CompilerServices::YieldAwaitable System::Threading::Tasks::Task::Yield() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Yield");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Yield", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::CompilerServices::YieldAwaitable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
void System::Threading::Tasks::Task::Wait() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
bool System::Threading::Tasks::Task::Wait(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Tasks.Task.Wait
bool System::Threading::Tasks::Task::Wait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Wait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.WrappedTryRunInline
bool System::Threading::Tasks::Task::WrappedTryRunInline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WrappedTryRunInline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WrappedTryRunInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWait
bool System::Threading::Tasks::Task::InternalWait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.SpinThenBlockingWait
bool System::Threading::Tasks::Task::SpinThenBlockingWait(int millisecondsTimeout, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SpinThenBlockingWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpinThenBlockingWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.SpinWait
bool System::Threading::Tasks::Task::SpinWait(int millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SpinWait");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpinWait", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, millisecondsTimeout);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCancel
bool System::Threading::Tasks::Task::InternalCancel(bool bCancelNonExecutingOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalCancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bCancelNonExecutingOnly)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bCancelNonExecutingOnly);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(::System::Threading::CancellationToken tokenToRecord) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tokenToRecord);
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(::System::Threading::CancellationToken tokenToRecord, ::Il2CppObject* cancellationException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RecordInternalCancellationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordInternalCancellationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tokenToRecord), ::il2cpp_utils::ExtractType(cancellationException)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tokenToRecord, cancellationException);
}
// Autogenerated method: System.Threading.Tasks.Task.CancellationCleanupLogic
void System::Threading::Tasks::Task::CancellationCleanupLogic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CancellationCleanupLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancellationCleanupLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.SetCancellationAcknowledged
void System::Threading::Tasks::Task::SetCancellationAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetCancellationAcknowledged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCancellationAcknowledged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.FinishContinuations
void System::Threading::Tasks::Task::FinishContinuations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FinishContinuations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishContinuations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.LogFinishCompletionNotification
void System::Threading::Tasks::Task::LogFinishCompletionNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::LogFinishCompletionNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogFinishCompletionNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_1<::System::Threading::Tasks::Task*>* continuationAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_1<::System::Threading::Tasks::Task*>* continuationAction, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, cancellationToken, continuationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_1<::System::Threading::Tasks::Task*>* continuationAction, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, scheduler, cancellationToken, continuationOptions);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_2<::System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, state, cancellationToken, continuationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(::System::Action_2<::System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions continuationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationAction), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(continuationOptions)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, continuationAction, state, scheduler, cancellationToken, continuationOptions);
}
// Autogenerated method: System.Threading.Tasks.Task.CreationOptionsFromContinuationOptions
void System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions(::System::Threading::Tasks::TaskContinuationOptions continuationOptions, ByRef<::System::Threading::Tasks::TaskCreationOptions> creationOptions, ByRef<::System::Threading::Tasks::InternalTaskOptions> internalOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "CreationOptionsFromContinuationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationOptions), ::il2cpp_utils::ExtractIndependentType<::System::Threading::Tasks::TaskCreationOptions&>(), ::il2cpp_utils::ExtractIndependentType<::System::Threading::Tasks::InternalTaskOptions&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, continuationOptions, byref(creationOptions), byref(internalOptions));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWithCore
void System::Threading::Tasks::Task::ContinueWithCore(::System::Threading::Tasks::Task* continuationTask, ::System::Threading::Tasks::TaskScheduler* scheduler, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskContinuationOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContinueWithCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWithCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationTask), ::il2cpp_utils::ExtractType(scheduler), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationTask, scheduler, cancellationToken, options);
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(::System::Threading::Tasks::ITaskCompletionAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddCompletionAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCompletionAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(::System::Threading::Tasks::ITaskCompletionAction* action, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddCompletionAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCompletionAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuationComplex
bool System::Threading::Tasks::Task::AddTaskContinuationComplex(::Il2CppObject* tc, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddTaskContinuationComplex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTaskContinuationComplex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tc, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuation
bool System::Threading::Tasks::Task::AddTaskContinuation(::Il2CppObject* tc, bool addBeforeOthers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddTaskContinuation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTaskContinuation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc), ::il2cpp_utils::ExtractType(addBeforeOthers)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tc, addBeforeOthers);
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveContinuation
void System::Threading::Tasks::Task::RemoveContinuation(::Il2CppObject* continuationObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RemoveContinuation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveContinuation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuationObject);
}
// Autogenerated method: System.Threading.Tasks.Task.FromException
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromException(::System::Exception* exception) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FromException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exception)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, exception);
}
// Autogenerated method: System.Threading.Tasks.Task.FromCancellation
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromCancellation(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FromCancellation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromCancellation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.FromCanceled
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromCanceled(::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::FromCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Func_1<::System::Threading::Tasks::Task*>* function) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, function);
}
// Autogenerated method: System.Threading.Tasks.Task.Run
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(::System::Func_1<::System::Threading::Tasks::Task*>* function, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, function, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsDelay);
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay, ::System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::Delay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Delay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsDelay), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, millisecondsDelay, cancellationToken);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(::System::Collections::Generic::IEnumerable_1<::System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::WhenAll(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWhenAll
::System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalWhenAll(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::InternalWhenAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalWhenAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAny
::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::WhenAny(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAny
::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::WhenAny(::System::Collections::Generic::IEnumerable_1<::System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.Task.AddToActiveTasks
bool System::Threading::Tasks::Task::AddToActiveTasks(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::AddToActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "AddToActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveFromActiveTasks
void System::Threading::Tasks::Task::RemoveFromActiveTasks(int taskId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::RemoveFromActiveTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "RemoveFromActiveTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(taskId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, taskId);
}
// Autogenerated method: System.Threading.Tasks.Task.MarkAborted
void System::Threading::Tasks::Task::MarkAborted(::System::Threading::ThreadAbortException* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::MarkAborted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteWithThreadLocal
void System::Threading::Tasks::Task::ExecuteWithThreadLocal(ByRef<::System::Threading::Tasks::Task*> currentTaskSlot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ExecuteWithThreadLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteWithThreadLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentTaskSlot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(currentTaskSlot));
}
// Autogenerated method: System.Threading.Tasks.Task..cctor
void System::Threading::Tasks::Task::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task/ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.Tasks.TaskExceptionHolder
#include "System/Threading/Tasks/TaskExceptionHolder.hpp"
// Including type: System.Collections.Generic.LowLevelListWithIList`1
#include "System/Collections/Generic/LowLevelListWithIList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Threading.ExecutionContext m_capturedContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_capturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_capturedContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_capturedContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.ManualResetEventSlim m_completionEvent
[[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEventSlim*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_completionEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_completionEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_completionEvent"))->offset;
  return *reinterpret_cast<::System::Threading::ManualResetEventSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Tasks.TaskExceptionHolder m_exceptionsHolder
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskExceptionHolder*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_exceptionsHolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_exceptionsHolder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_exceptionsHolder"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskExceptionHolder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.CancellationToken m_cancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& System::Threading::Tasks::Task::ContingentProperties::dyn_m_cancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_cancellationToken");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Object m_cancellationRegistration
[[deprecated("Use field access instead!")]] ::Il2CppObject*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_cancellationRegistration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_cancellationRegistration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cancellationRegistration"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_internalCancellationRequested
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::ContingentProperties::dyn_m_internalCancellationRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_internalCancellationRequested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_internalCancellationRequested"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_completionCountdown
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::ContingentProperties::dyn_m_completionCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_completionCountdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_completionCountdown"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.LowLevelListWithIList`1<System.Threading.Tasks.Task> m_exceptionalChildren
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::LowLevelListWithIList_1<::System::Threading::Tasks::Task*>*& System::Threading::Tasks::Task::ContingentProperties::dyn_m_exceptionalChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::dyn_m_exceptionalChildren");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_exceptionalChildren"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::LowLevelListWithIList_1<::System::Threading::Tasks::Task*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task/ContingentProperties.SetCompleted
void System::Threading::Tasks::Task::ContingentProperties::SetCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::SetCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/ContingentProperties.UnregisterCancellationCallback
void System::Threading::Tasks::Task::ContingentProperties::UnregisterCancellationCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::ContingentProperties::UnregisterCancellationCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterCancellationCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/SetOnInvokeMres
#include "System/Threading/Tasks/Task_SetOnInvokeMres.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.Task/SetOnInvokeMres.Invoke
void System::Threading::Tasks::Task::SetOnInvokeMres::Invoke(::System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetOnInvokeMres::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task::SetOnInvokeMres*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completingTask);
}
// Autogenerated method: System.Threading.Tasks.Task/SetOnInvokeMres.get_InvokeMayRunArbitraryCode
bool System::Threading::Tasks::Task::SetOnInvokeMres::get_InvokeMayRunArbitraryCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::SetOnInvokeMres::get_InvokeMayRunArbitraryCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task::SetOnInvokeMres*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/DelayPromise
#include "System/Threading/Tasks/Task_DelayPromise.hpp"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.CancellationToken Token
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& System::Threading::Tasks::Task::DelayPromise::dyn_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DelayPromise::dyn_Token");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Token"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.CancellationTokenRegistration Registration
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenRegistration& System::Threading::Tasks::Task::DelayPromise::dyn_Registration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DelayPromise::dyn_Registration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Registration"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationTokenRegistration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Threading.Timer Timer
[[deprecated("Use field access instead!")]] ::System::Threading::Timer*& System::Threading::Tasks::Task::DelayPromise::dyn_Timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DelayPromise::dyn_Timer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Timer"))->offset;
  return *reinterpret_cast<::System::Threading::Timer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task/DelayPromise.Complete
void System::Threading::Tasks::Task::DelayPromise::Complete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::DelayPromise::Complete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Complete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Task/WhenAllPromise
#include "System/Threading/Tasks/Task_WhenAllPromise.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task[] m_tasks
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::Tasks::Task*>& System::Threading::Tasks::Task::WhenAllPromise::dyn_m_tasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::dyn_m_tasks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_tasks"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::Tasks::Task*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_count
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Task::WhenAllPromise::dyn_m_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::dyn_m_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.Task/WhenAllPromise.Invoke
void System::Threading::Tasks::Task::WhenAllPromise::Invoke(::System::Threading::Tasks::Task* ignored) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task::WhenAllPromise*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ignored);
}
// Autogenerated method: System.Threading.Tasks.Task/WhenAllPromise.get_InvokeMayRunArbitraryCode
bool System::Threading::Tasks::Task::WhenAllPromise::get_InvokeMayRunArbitraryCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::get_InvokeMayRunArbitraryCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task::WhenAllPromise*), 15));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/WhenAllPromise.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::WhenAllPromise::get_ShouldNotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::WhenAllPromise::get_ShouldNotifyDebuggerOfWaitCompletion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 11));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task/<>c
#include "System/Threading/Tasks/Task_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.Threading.Tasks.Task/ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.Task/<>c <>9
::System::Threading::Tasks::Task::$$c* System::Threading::Tasks::Task::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Task::$$c*>("System.Threading.Tasks", "Task/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.Task/<>c <>9
void System::Threading::Tasks::Task::$$c::_set_$$9(::System::Threading::Tasks::Task::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Object> <>9__247_0
::System::Action_1<::Il2CppObject*>* System::Threading::Tasks::Task::$$c::_get_$$9__247_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_get_$$9__247_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "Task/<>c", "<>9__247_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Object> <>9__247_0
void System::Threading::Tasks::Task::$$c::_set_$$9__247_0(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_set_$$9__247_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9__247_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.TimerCallback <>9__247_1
::System::Threading::TimerCallback* System::Threading::Tasks::Task::$$c::_get_$$9__247_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_get_$$9__247_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::TimerCallback*>("System.Threading.Tasks", "Task/<>c", "<>9__247_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.TimerCallback <>9__247_1
void System::Threading::Tasks::Task::$$c::_set_$$9__247_1(::System::Threading::TimerCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::_set_$$9__247_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task/<>c", "<>9__247_1", value)));
}
// Autogenerated method: System.Threading.Tasks.Task/<>c..cctor
void System::Threading::Tasks::Task::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<Delay>b__247_0
void System::Threading::Tasks::Task::$$c::$Delay$b__247_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<Delay>b__247_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Delay>b__247_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<Delay>b__247_1
void System::Threading::Tasks::Task::$$c::$Delay$b__247_1(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<Delay>b__247_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Delay>b__247_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<.cctor>b__271_0
::System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::$$c::$_cctor$b__271_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<.cctor>b__271_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__271_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task::ContingentProperties*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<.cctor>b__271_1
bool System::Threading::Tasks::Task::$$c::$_cctor$b__271_1(::System::Threading::Tasks::Task* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<.cctor>b__271_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__271_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: System.Threading.Tasks.Task/<>c.<.cctor>b__271_2
bool System::Threading::Tasks::Task::$$c::$_cctor$b__271_2(::Il2CppObject* tc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Task::$$c::<.cctor>b__271_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__271_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tc)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tc);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CompletionActionInvoker
#include "System/Threading/Tasks/CompletionActionInvoker.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.ITaskCompletionAction m_action
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::ITaskCompletionAction*& System::Threading::Tasks::CompletionActionInvoker::dyn_m_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CompletionActionInvoker::dyn_m_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_action"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::ITaskCompletionAction**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task m_completingTask
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::CompletionActionInvoker::dyn_m_completingTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CompletionActionInvoker::dyn_m_completingTask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_completingTask"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.CompletionActionInvoker.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::CompletionActionInvoker::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CompletionActionInvoker::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::CompletionActionInvoker*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.CompletionActionInvoker.MarkAborted
void System::Threading::Tasks::CompletionActionInvoker::MarkAborted(::System::Threading::ThreadAbortException* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CompletionActionInvoker::MarkAborted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::CompletionActionInvoker*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskCreationOptions
#include "System/Threading/Tasks/TaskCreationOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions None
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions None
void System::Threading::Tasks::TaskCreationOptions::_set_None(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions PreferFairness
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_PreferFairness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_PreferFairness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "PreferFairness"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions PreferFairness
void System::Threading::Tasks::TaskCreationOptions::_set_PreferFairness(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_PreferFairness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "PreferFairness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions LongRunning
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_LongRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_LongRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "LongRunning"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions LongRunning
void System::Threading::Tasks::TaskCreationOptions::_set_LongRunning(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_LongRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "LongRunning", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions AttachedToParent
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_AttachedToParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_AttachedToParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "AttachedToParent"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions AttachedToParent
void System::Threading::Tasks::TaskCreationOptions::_set_AttachedToParent(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_AttachedToParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "AttachedToParent", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions DenyChildAttach
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_DenyChildAttach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_DenyChildAttach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "DenyChildAttach"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions DenyChildAttach
void System::Threading::Tasks::TaskCreationOptions::_set_DenyChildAttach(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_DenyChildAttach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "DenyChildAttach", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions HideScheduler
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_HideScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_HideScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "HideScheduler"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions HideScheduler
void System::Threading::Tasks::TaskCreationOptions::_set_HideScheduler(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_HideScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "HideScheduler", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskCreationOptions RunContinuationsAsynchronously
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskCreationOptions::_get_RunContinuationsAsynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_get_RunContinuationsAsynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "TaskCreationOptions", "RunContinuationsAsynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskCreationOptions RunContinuationsAsynchronously
void System::Threading::Tasks::TaskCreationOptions::_set_RunContinuationsAsynchronously(::System::Threading::Tasks::TaskCreationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::_set_RunContinuationsAsynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskCreationOptions", "RunContinuationsAsynchronously", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskCreationOptions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskCreationOptions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.InternalTaskOptions
#include "System/Threading/Tasks/InternalTaskOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions None
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions None
void System::Threading::Tasks::InternalTaskOptions::_set_None(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions InternalOptionsMask
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_InternalOptionsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_InternalOptionsMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "InternalOptionsMask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions InternalOptionsMask
void System::Threading::Tasks::InternalTaskOptions::_set_InternalOptionsMask(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_InternalOptionsMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "InternalOptionsMask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions ContinuationTask
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_ContinuationTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_ContinuationTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "ContinuationTask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions ContinuationTask
void System::Threading::Tasks::InternalTaskOptions::_set_ContinuationTask(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_ContinuationTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "ContinuationTask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions PromiseTask
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_PromiseTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_PromiseTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "PromiseTask"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions PromiseTask
void System::Threading::Tasks::InternalTaskOptions::_set_PromiseTask(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_PromiseTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "PromiseTask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions LazyCancellation
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_LazyCancellation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_LazyCancellation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "LazyCancellation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions LazyCancellation
void System::Threading::Tasks::InternalTaskOptions::_set_LazyCancellation(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_LazyCancellation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "LazyCancellation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions QueuedByRuntime
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_QueuedByRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_QueuedByRuntime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "QueuedByRuntime"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions QueuedByRuntime
void System::Threading::Tasks::InternalTaskOptions::_set_QueuedByRuntime(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_QueuedByRuntime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "QueuedByRuntime", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.InternalTaskOptions DoNotDispose
::System::Threading::Tasks::InternalTaskOptions System::Threading::Tasks::InternalTaskOptions::_get_DoNotDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_get_DoNotDispose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::InternalTaskOptions>("System.Threading.Tasks", "InternalTaskOptions", "DoNotDispose"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.InternalTaskOptions DoNotDispose
void System::Threading::Tasks::InternalTaskOptions::_set_DoNotDispose(::System::Threading::Tasks::InternalTaskOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::_set_DoNotDispose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "InternalTaskOptions", "DoNotDispose", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::InternalTaskOptions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::InternalTaskOptions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions None
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions None
void System::Threading::Tasks::TaskContinuationOptions::_set_None(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions PreferFairness
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_PreferFairness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_PreferFairness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "PreferFairness"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions PreferFairness
void System::Threading::Tasks::TaskContinuationOptions::_set_PreferFairness(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_PreferFairness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "PreferFairness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions LongRunning
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_LongRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_LongRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "LongRunning"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions LongRunning
void System::Threading::Tasks::TaskContinuationOptions::_set_LongRunning(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_LongRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "LongRunning", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions AttachedToParent
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_AttachedToParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_AttachedToParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "AttachedToParent"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions AttachedToParent
void System::Threading::Tasks::TaskContinuationOptions::_set_AttachedToParent(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_AttachedToParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "AttachedToParent", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions DenyChildAttach
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_DenyChildAttach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_DenyChildAttach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "DenyChildAttach"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions DenyChildAttach
void System::Threading::Tasks::TaskContinuationOptions::_set_DenyChildAttach(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_DenyChildAttach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "DenyChildAttach", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions HideScheduler
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_HideScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_HideScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "HideScheduler"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions HideScheduler
void System::Threading::Tasks::TaskContinuationOptions::_set_HideScheduler(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_HideScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "HideScheduler", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions LazyCancellation
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_LazyCancellation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_LazyCancellation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "LazyCancellation"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions LazyCancellation
void System::Threading::Tasks::TaskContinuationOptions::_set_LazyCancellation(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_LazyCancellation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "LazyCancellation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions RunContinuationsAsynchronously
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_RunContinuationsAsynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_RunContinuationsAsynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "RunContinuationsAsynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions RunContinuationsAsynchronously
void System::Threading::Tasks::TaskContinuationOptions::_set_RunContinuationsAsynchronously(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_RunContinuationsAsynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "RunContinuationsAsynchronously", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnRanToCompletion
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_NotOnRanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnRanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnRanToCompletion
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnRanToCompletion(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_NotOnRanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnRanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnFaulted
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_NotOnFaulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnFaulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnFaulted
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnFaulted(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_NotOnFaulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnFaulted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnCanceled
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_NotOnCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_NotOnCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "NotOnCanceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions NotOnCanceled
void System::Threading::Tasks::TaskContinuationOptions::_set_NotOnCanceled(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_NotOnCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "NotOnCanceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnRanToCompletion
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnRanToCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnRanToCompletion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnRanToCompletion"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnRanToCompletion
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnRanToCompletion(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnRanToCompletion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnRanToCompletion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnFaulted
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnFaulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnFaulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnFaulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnFaulted
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnFaulted(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnFaulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnFaulted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnCanceled
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_OnlyOnCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnCanceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions OnlyOnCanceled
void System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnCanceled(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_OnlyOnCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "OnlyOnCanceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.TaskContinuationOptions ExecuteSynchronously
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskContinuationOptions::_get_ExecuteSynchronously() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_get_ExecuteSynchronously");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskContinuationOptions>("System.Threading.Tasks", "TaskContinuationOptions", "ExecuteSynchronously"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.TaskContinuationOptions ExecuteSynchronously
void System::Threading::Tasks::TaskContinuationOptions::_set_ExecuteSynchronously(::System::Threading::Tasks::TaskContinuationOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::_set_ExecuteSynchronously");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskContinuationOptions", "ExecuteSynchronously", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskContinuationOptions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuationOptions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.StackGuard
#include "System/Threading/Tasks/StackGuard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MAX_UNCHECKED_INLINING_DEPTH
int System::Threading::Tasks::StackGuard::_get_MAX_UNCHECKED_INLINING_DEPTH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::_get_MAX_UNCHECKED_INLINING_DEPTH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "StackGuard", "MAX_UNCHECKED_INLINING_DEPTH"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAX_UNCHECKED_INLINING_DEPTH
void System::Threading::Tasks::StackGuard::_set_MAX_UNCHECKED_INLINING_DEPTH(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::_set_MAX_UNCHECKED_INLINING_DEPTH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "StackGuard", "MAX_UNCHECKED_INLINING_DEPTH", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_inliningDepth
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::StackGuard::dyn_m_inliningDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::dyn_m_inliningDepth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_inliningDepth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.StackGuard.TryBeginInliningScope
bool System::Threading::Tasks::StackGuard::TryBeginInliningScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::TryBeginInliningScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryBeginInliningScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.StackGuard.EndInliningScope
void System::Threading::Tasks::StackGuard::EndInliningScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StackGuard::EndInliningScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInliningScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.ITaskCompletionAction.Invoke
void System::Threading::Tasks::ITaskCompletionAction::Invoke(::System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ITaskCompletionAction::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::ITaskCompletionAction*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completingTask);
}
// Autogenerated method: System.Threading.Tasks.ITaskCompletionAction.get_InvokeMayRunArbitraryCode
bool System::Threading::Tasks::ITaskCompletionAction::get_InvokeMayRunArbitraryCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ITaskCompletionAction::get_InvokeMayRunArbitraryCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::ITaskCompletionAction*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.ContinuationTaskFromTask
#include "System/Threading/Tasks/ContinuationTaskFromTask.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Threading.Tasks.Task m_antecedent
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::ContinuationTaskFromTask::dyn_m_antecedent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ContinuationTaskFromTask::dyn_m_antecedent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_antecedent"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke
void System::Threading::Tasks::ContinuationTaskFromTask::InnerInvoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ContinuationTaskFromTask::InnerInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskContinuation
#include "System/Threading/Tasks/TaskContinuation.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskContinuation.Run
void System::Threading::Tasks::TaskContinuation::Run(::System::Threading::Tasks::Task* completedTask, bool bCanInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskContinuation*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completedTask, bCanInlineContinuationTask);
}
// Autogenerated method: System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue
void System::Threading::Tasks::TaskContinuation::InlineIfPossibleOrElseQueue(::System::Threading::Tasks::Task* task, bool needsProtection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskContinuation::InlineIfPossibleOrElseQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskContinuation", "InlineIfPossibleOrElseQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(needsProtection)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, task, needsProtection);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.StandardTaskContinuation
#include "System/Threading/Tasks/StandardTaskContinuation.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.Task m_task
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::StandardTaskContinuation::dyn_m_task() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StandardTaskContinuation::dyn_m_task");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_task"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly System.Threading.Tasks.TaskContinuationOptions m_options
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskContinuationOptions& System::Threading::Tasks::StandardTaskContinuation::dyn_m_options() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StandardTaskContinuation::dyn_m_options");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_options"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskContinuationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.TaskScheduler m_taskScheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::StandardTaskContinuation::dyn_m_taskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StandardTaskContinuation::dyn_m_taskScheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskScheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.StandardTaskContinuation.Run
void System::Threading::Tasks::StandardTaskContinuation::Run(::System::Threading::Tasks::Task* completedTask, bool bCanInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::StandardTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskContinuation*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completedTask, bCanInlineContinuationTask);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation.hpp"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
::System::Threading::SendOrPostCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::SendOrPostCallback*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postCallback(::System::Threading::SendOrPostCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postCallback", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_postActionCallback
::System::Threading::ContextCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_get_s_postActionCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postActionCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_postActionCallback
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postActionCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_set_s_postActionCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "s_postActionCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.SynchronizationContext m_syncContext
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::dyn_m_syncContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::dyn_m_syncContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_syncContext"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.PostAction
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::PostAction(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::PostAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "PostAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.GetPostActionCallback
::System::Threading::ContextCallback* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::GetPostActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::GetPostActionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", "GetPostActionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ContextCallback*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation..cctor
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.Run
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::Run(::System::Threading::Tasks::Task* ignored, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::AwaitTaskContinuation*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ignored, canInlineContinuationTask);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c
#include "System/Threading/Tasks/SynchronizationContextAwaitTaskContinuation_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c <>9
::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c* System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c*>("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c <>9
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_set_$$9(::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c..cctor
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextAwaitTaskContinuation/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation/<>c.<.cctor>b__7_0
void System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::$_cctor$b__7_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextAwaitTaskContinuation::$$c::<.cctor>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation.hpp"
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation_--c.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.TaskScheduler m_scheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::dyn_m_scheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::dyn_m_scheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_scheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation.Run
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::Run(::System::Threading::Tasks::Task* ignored, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::AwaitTaskContinuation*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ignored, canInlineContinuationTask);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c
#include "System/Threading/Tasks/TaskSchedulerAwaitTaskContinuation_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c <>9
::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c* System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c*>("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c <>9
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9(::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Object> <>9__2_0
::System::Action_1<::Il2CppObject*>* System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Il2CppObject*>*>("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Object> <>9__2_0
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9__2_0(::System::Action_1<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", "<>9__2_0", value)));
}
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c..cctor
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskSchedulerAwaitTaskContinuation/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation/<>c.<Run>b__2_0
void System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::$Run$b__2_0(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskSchedulerAwaitTaskContinuation::$$c::<Run>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Run>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.AwaitTaskContinuation
#include "System/Threading/Tasks/AwaitTaskContinuation.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_invokeActionCallback
::System::Threading::ContextCallback* System::Threading::Tasks::AwaitTaskContinuation::_get_s_invokeActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::_get_s_invokeActionCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ContextCallback*>("System.Threading.Tasks", "AwaitTaskContinuation", "s_invokeActionCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_invokeActionCallback
void System::Threading::Tasks::AwaitTaskContinuation::_set_s_invokeActionCallback(::System::Threading::ContextCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::_set_s_invokeActionCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AwaitTaskContinuation", "s_invokeActionCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.ExecutionContext m_capturedContext
[[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& System::Threading::Tasks::AwaitTaskContinuation::dyn_m_capturedContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::dyn_m_capturedContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_capturedContext"))->offset;
  return *reinterpret_cast<::System::Threading::ExecutionContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected readonly System.Action m_action
[[deprecated("Use field access instead!")]] ::System::Action*& System::Threading::Tasks::AwaitTaskContinuation::dyn_m_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::dyn_m_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_action"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.CreateTask
::System::Threading::Tasks::Task* System::Threading::Tasks::AwaitTaskContinuation::CreateTask(::System::Action_1<::Il2CppObject*>* action, ::Il2CppObject* state, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::CreateTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, action, state, scheduler);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.get_IsValidLocationForInlining
bool System::Threading::Tasks::AwaitTaskContinuation::get_IsValidLocationForInlining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::get_IsValidLocationForInlining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "get_IsValidLocationForInlining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::AwaitTaskContinuation::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::System.Threading.IThreadPoolWorkItem.ExecuteWorkItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::AwaitTaskContinuation*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.InvokeAction
void System::Threading::Tasks::AwaitTaskContinuation::InvokeAction(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::InvokeAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "InvokeAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.GetInvokeActionCallback
::System::Threading::ContextCallback* System::Threading::Tasks::AwaitTaskContinuation::GetInvokeActionCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::GetInvokeActionCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "GetInvokeActionCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::ContextCallback*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.RunCallback
void System::Threading::Tasks::AwaitTaskContinuation::RunCallback(::System::Threading::ContextCallback* callback, ::Il2CppObject* state, ByRef<::System::Threading::Tasks::Task*> currentTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::RunCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(currentTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, state, byref(currentTask));
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction
void System::Threading::Tasks::AwaitTaskContinuation::RunOrScheduleAction(::System::Action* action, bool allowInlining, ByRef<::System::Threading::Tasks::Task*> currentTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::RunOrScheduleAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "RunOrScheduleAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(allowInlining), ::il2cpp_utils::ExtractType(currentTask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action, allowInlining, byref(currentTask));
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.UnsafeScheduleAction
void System::Threading::Tasks::AwaitTaskContinuation::UnsafeScheduleAction(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::UnsafeScheduleAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "UnsafeScheduleAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.ThrowAsyncIfNecessary
void System::Threading::Tasks::AwaitTaskContinuation::ThrowAsyncIfNecessary(::System::Exception* exc) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::ThrowAsyncIfNecessary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AwaitTaskContinuation", "ThrowAsyncIfNecessary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exc)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, exc);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.MarkAborted
void System::Threading::Tasks::AwaitTaskContinuation::MarkAborted(::System::Threading::ThreadAbortException* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::MarkAborted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::AwaitTaskContinuation*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: System.Threading.Tasks.AwaitTaskContinuation.Run
void System::Threading::Tasks::AwaitTaskContinuation::Run(::System::Threading::Tasks::Task* ignored, bool canInlineContinuationTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AwaitTaskContinuation::Run");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskContinuation*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ignored, canInlineContinuationTask);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskExceptionHolder
#include "System/Threading/Tasks/TaskExceptionHolder.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Collections.Generic.LowLevelListWithIList`1
#include "System/Collections/Generic/LowLevelListWithIList_1.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Boolean s_failFastOnUnobservedException
bool System::Threading::Tasks::TaskExceptionHolder::_get_s_failFastOnUnobservedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::_get_s_failFastOnUnobservedException");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "TaskExceptionHolder", "s_failFastOnUnobservedException"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Boolean s_failFastOnUnobservedException
void System::Threading::Tasks::TaskExceptionHolder::_set_s_failFastOnUnobservedException(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::_set_s_failFastOnUnobservedException");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskExceptionHolder", "s_failFastOnUnobservedException", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task m_task
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& System::Threading::Tasks::TaskExceptionHolder::dyn_m_task() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::dyn_m_task");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_task"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::Task**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.LowLevelListWithIList`1<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::LowLevelListWithIList_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*& System::Threading::Tasks::TaskExceptionHolder::dyn_m_faultExceptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::dyn_m_faultExceptions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_faultExceptions"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::LowLevelListWithIList_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException
[[deprecated("Use field access instead!")]] ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& System::Threading::Tasks::TaskExceptionHolder::dyn_m_cancellationException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::dyn_m_cancellationException");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cancellationException"))->offset;
  return *reinterpret_cast<::System::Runtime::ExceptionServices::ExceptionDispatchInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_isHandled
[[deprecated("Use field access instead!")]] bool& System::Threading::Tasks::TaskExceptionHolder::dyn_m_isHandled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::dyn_m_isHandled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_isHandled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.ShouldFailFastOnUnobservedException
bool System::Threading::Tasks::TaskExceptionHolder::ShouldFailFastOnUnobservedException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::ShouldFailFastOnUnobservedException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", "ShouldFailFastOnUnobservedException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.get_ContainsFaultList
bool System::Threading::Tasks::TaskExceptionHolder::get_ContainsFaultList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::get_ContainsFaultList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContainsFaultList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.Add
void System::Threading::Tasks::TaskExceptionHolder::Add(::Il2CppObject* exceptionObject, bool representsCancellation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject), ::il2cpp_utils::ExtractType(representsCancellation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject, representsCancellation);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.SetCancellationException
void System::Threading::Tasks::TaskExceptionHolder::SetCancellationException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::SetCancellationException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCancellationException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.AddFaultException
void System::Threading::Tasks::TaskExceptionHolder::AddFaultException(::Il2CppObject* exceptionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::AddFaultException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFaultException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptionObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exceptionObject);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.MarkAsUnhandled
void System::Threading::Tasks::TaskExceptionHolder::MarkAsUnhandled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::MarkAsUnhandled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAsUnhandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.MarkAsHandled
void System::Threading::Tasks::TaskExceptionHolder::MarkAsHandled(bool calledFromFinalizer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::MarkAsHandled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkAsHandled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(calledFromFinalizer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, calledFromFinalizer);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.CreateExceptionObject
::System::AggregateException* System::Threading::Tasks::TaskExceptionHolder::CreateExceptionObject(bool calledFromFinalizer, ::System::Exception* includeThisException) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::CreateExceptionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateExceptionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(calledFromFinalizer), ::il2cpp_utils::ExtractType(includeThisException)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::AggregateException*, false>(this, ___internal__method, calledFromFinalizer, includeThisException);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.GetExceptionDispatchInfos
::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* System::Threading::Tasks::TaskExceptionHolder::GetExceptionDispatchInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::GetExceptionDispatchInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetExceptionDispatchInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.GetCancellationExceptionDispatchInfo
::System::Runtime::ExceptionServices::ExceptionDispatchInfo* System::Threading::Tasks::TaskExceptionHolder::GetCancellationExceptionDispatchInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::GetCancellationExceptionDispatchInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder..cctor
void System::Threading::Tasks::TaskExceptionHolder::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExceptionHolder", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskExceptionHolder.Finalize
void System::Threading::Tasks::TaskExceptionHolder::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Threading.Tasks.TaskFactory/CompleteOnCountdownPromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnCountdownPromise.hpp"
// Including type: System.Threading.Tasks.TaskFactory/CompleteOnInvokePromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnInvokePromise.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Func`4
#include "System/Func_4.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.Func`5
#include "System/Func_5.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.CancellationToken m_defaultCancellationToken
[[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& System::Threading::Tasks::TaskFactory::dyn_m_defaultCancellationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::dyn_m_defaultCancellationToken");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultCancellationToken"))->offset;
  return *reinterpret_cast<::System::Threading::CancellationToken*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.TaskScheduler m_defaultScheduler
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskScheduler*& System::Threading::Tasks::TaskFactory::dyn_m_defaultScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::dyn_m_defaultScheduler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultScheduler"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskScheduler**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCreationOptions& System::Threading::Tasks::TaskFactory::dyn_m_defaultCreationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::dyn_m_defaultCreationOptions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultCreationOptions"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskCreationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions
[[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskContinuationOptions& System::Threading::Tasks::TaskFactory::dyn_m_defaultContinuationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::dyn_m_defaultContinuationOptions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_defaultContinuationOptions"))->offset;
  return *reinterpret_cast<::System::Threading::Tasks::TaskContinuationOptions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckCreationOptions
void System::Threading::Tasks::TaskFactory::CheckCreationOptions(::System::Threading::Tasks::TaskCreationOptions creationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CheckCreationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckCreationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creationOptions);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.get_Scheduler
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskFactory::get_Scheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::get_Scheduler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Scheduler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.get_CreationOptions
::System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::TaskFactory::get_CreationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::get_CreationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskCreationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.get_ContinuationOptions
::System::Threading::Tasks::TaskContinuationOptions System::Threading::Tasks::TaskFactory::get_ContinuationOptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::get_ContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContinuationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskContinuationOptions, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.StartNew
::System::Threading::Tasks::Task* System::Threading::Tasks::TaskFactory::StartNew(::System::Action* action, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskCreationOptions creationOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::StartNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, action, cancellationToken, creationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.StartNew
::System::Threading::Tasks::Task* System::Threading::Tasks::TaskFactory::StartNew(::System::Action_1<::Il2CppObject*>* action, ::Il2CppObject* state, ::System::Threading::CancellationToken cancellationToken, ::System::Threading::Tasks::TaskCreationOptions creationOptions, ::System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::StartNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(cancellationToken), ::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(scheduler)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, action, state, cancellationToken, creationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckFromAsyncOptions
void System::Threading::Tasks::TaskFactory::CheckFromAsyncOptions(::System::Threading::Tasks::TaskCreationOptions creationOptions, bool hasBeginMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CheckFromAsyncOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckFromAsyncOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creationOptions), ::il2cpp_utils::ExtractType(hasBeginMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, creationOptions, hasBeginMethod);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CommonCWAllLogic
::System::Threading::Tasks::Task_1<::ArrayW<::System::Threading::Tasks::Task*>>* System::Threading::Tasks::TaskFactory::CommonCWAllLogic(::ArrayW<::System::Threading::Tasks::Task*> tasksCopy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CommonCWAllLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CommonCWAllLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasksCopy)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::ArrayW<::System::Threading::Tasks::Task*>>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasksCopy);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CommonCWAnyLogic
::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>* System::Threading::Tasks::TaskFactory::CommonCWAnyLogic(::System::Collections::Generic::IList_1<::System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CommonCWAnyLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CommonCWAnyLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckMultiContinuationTasksAndCopy
::ArrayW<::System::Threading::Tasks::Task*> System::Threading::Tasks::TaskFactory::CheckMultiContinuationTasksAndCopy(::ArrayW<::System::Threading::Tasks::Task*> tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CheckMultiContinuationTasksAndCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckMultiContinuationTasksAndCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tasks)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Threading::Tasks::Task*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckMultiTaskContinuationOptions
void System::Threading::Tasks::TaskFactory::CheckMultiTaskContinuationOptions(::System::Threading::Tasks::TaskContinuationOptions continuationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CheckMultiTaskContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", "CheckMultiTaskContinuationOptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(continuationOptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, continuationOptions);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskFactory/CompleteOnCountdownPromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnCountdownPromise.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Tasks.Task[] _tasks
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::Tasks::Task*>& System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::dyn__tasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::dyn__tasks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tasks"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Threading::Tasks::Task*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _count
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::dyn__count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::dyn__count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory/CompleteOnCountdownPromise.Invoke
void System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::Invoke(::System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completingTask);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory/CompleteOnCountdownPromise.get_InvokeMayRunArbitraryCode
bool System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::get_InvokeMayRunArbitraryCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::get_InvokeMayRunArbitraryCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise*), 15));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory/CompleteOnCountdownPromise.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::get_ShouldNotifyDebuggerOfWaitCompletion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnCountdownPromise::get_ShouldNotifyDebuggerOfWaitCompletion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Task*), 11));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskFactory/CompleteOnInvokePromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnInvokePromise.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IList`1<System.Threading.Tasks.Task> _tasks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::System::Threading::Tasks::Task*>*& System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::dyn__tasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::dyn__tasks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tasks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IList_1<::System::Threading::Tasks::Task*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory/CompleteOnInvokePromise.Invoke
void System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::Invoke(::System::Threading::Tasks::Task* completingTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, completingTask);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory/CompleteOnInvokePromise.get_InvokeMayRunArbitraryCode
bool System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::get_InvokeMayRunArbitraryCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise::get_InvokeMayRunArbitraryCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskFactory::CompleteOnInvokePromise*), 15));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.TaskScheduler/SystemThreadingTasks_TaskSchedulerDebugView
#include "System/Threading/Tasks/TaskScheduler_SystemThreadingTasks_TaskSchedulerDebugView.hpp"
// Including type: System.Runtime.CompilerServices.ConditionalWeakTable`2
#include "System/Runtime/CompilerServices/ConditionalWeakTable_2.hpp"
// Including type: System.EventHandler`1
#include "System/EventHandler_1.hpp"
// Including type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
#include "System/Threading/Tasks/UnobservedTaskExceptionEventArgs.hpp"
// Including type: System.Threading.Lock
#include "System/Threading/Lock.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Threading.Tasks.TaskScheduler,System.Object> s_activeTaskSchedulers
::System::Runtime::CompilerServices::ConditionalWeakTable_2<::System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>* System::Threading::Tasks::TaskScheduler::_get_s_activeTaskSchedulers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get_s_activeTaskSchedulers");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Runtime::CompilerServices::ConditionalWeakTable_2<::System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>*>("System.Threading.Tasks", "TaskScheduler", "s_activeTaskSchedulers")));
}
// Autogenerated static field setter
// Set static field: static private System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Threading.Tasks.TaskScheduler,System.Object> s_activeTaskSchedulers
void System::Threading::Tasks::TaskScheduler::_set_s_activeTaskSchedulers(::System::Runtime::CompilerServices::ConditionalWeakTable_2<::System::Threading::Tasks::TaskScheduler*, ::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set_s_activeTaskSchedulers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_activeTaskSchedulers", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::_get_s_defaultTaskScheduler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get_s_defaultTaskScheduler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::TaskScheduler*>("System.Threading.Tasks", "TaskScheduler", "s_defaultTaskScheduler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler
void System::Threading::Tasks::TaskScheduler::_set_s_defaultTaskScheduler(::System::Threading::Tasks::TaskScheduler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set_s_defaultTaskScheduler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_defaultTaskScheduler", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskSchedulerIdCounter
int System::Threading::Tasks::TaskScheduler::_get_s_taskSchedulerIdCounter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get_s_taskSchedulerIdCounter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "TaskScheduler", "s_taskSchedulerIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskSchedulerIdCounter
void System::Threading::Tasks::TaskScheduler::_set_s_taskSchedulerIdCounter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set_s_taskSchedulerIdCounter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_taskSchedulerIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private System.EventHandler`1<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException
::System::EventHandler_1<::System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>* System::Threading::Tasks::TaskScheduler::_get__unobservedTaskException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get__unobservedTaskException");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::EventHandler_1<::System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>*>("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskException"));
}
// Autogenerated static field setter
// Set static field: static private System.EventHandler`1<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException
void System::Threading::Tasks::TaskScheduler::_set__unobservedTaskException(::System::EventHandler_1<::System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set__unobservedTaskException");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskException", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Lock _unobservedTaskExceptionLockObject
::System::Threading::Lock* System::Threading::Tasks::TaskScheduler::_get__unobservedTaskExceptionLockObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_get__unobservedTaskExceptionLockObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Lock*>("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskExceptionLockObject"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Lock _unobservedTaskExceptionLockObject
void System::Threading::Tasks::TaskScheduler::_set__unobservedTaskExceptionLockObject(::System::Threading::Lock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::_set__unobservedTaskExceptionLockObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskExceptionLockObject", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_taskSchedulerId
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::TaskScheduler::dyn_m_taskSchedulerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::dyn_m_taskSchedulerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_taskSchedulerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.QueueTask
void System::Threading::Tasks::TaskScheduler::QueueTask(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::QueueTask");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline
bool System::Threading::Tasks::TaskScheduler::TryExecuteTaskInline(::System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::TryExecuteTaskInline");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryRunInline
bool System::Threading::Tasks::TaskScheduler::TryRunInline(::System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::TryRunInline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRunInline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(taskWasPreviouslyQueued)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryDequeue
bool System::Threading::Tasks::TaskScheduler::TryDequeue(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::TryDequeue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.NotifyWorkItemProgress
void System::Threading::Tasks::TaskScheduler::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::NotifyWorkItemProgress");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_RequiresAtomicStartTransition
bool System::Threading::Tasks::TaskScheduler::get_RequiresAtomicStartTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_RequiresAtomicStartTransition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Default
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Current
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_InternalCurrent
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_InternalCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_InternalCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "get_InternalCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext
::System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::FromCurrentSynchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::FromCurrentSynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "FromCurrentSynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::TaskScheduler*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Id
int System::Threading::Tasks::TaskScheduler::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::get_Id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryExecuteTask
bool System::Threading::Tasks::TaskScheduler::TryExecuteTask(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::TryExecuteTask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryExecuteTask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.PublishUnobservedTaskException
void System::Threading::Tasks::TaskScheduler::PublishUnobservedTaskException(::Il2CppObject* sender, ::System::Threading::Tasks::UnobservedTaskExceptionEventArgs* ueea) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::PublishUnobservedTaskException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", "PublishUnobservedTaskException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(ueea)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sender, ueea);
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler..cctor
void System::Threading::Tasks::TaskScheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskScheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskScheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.SynchronizationContextTaskScheduler
#include "System/Threading/Tasks/SynchronizationContextTaskScheduler.hpp"
// Including type: System.Threading.Tasks.SynchronizationContextTaskScheduler/<>c
#include "System/Threading/Tasks/SynchronizationContextTaskScheduler_--c.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
::System::Threading::SendOrPostCallback* System::Threading::Tasks::SynchronizationContextTaskScheduler::_get_s_postCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::_get_s_postCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::SendOrPostCallback*>("System.Threading.Tasks", "SynchronizationContextTaskScheduler", "s_postCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.SendOrPostCallback s_postCallback
void System::Threading::Tasks::SynchronizationContextTaskScheduler::_set_s_postCallback(::System::Threading::SendOrPostCallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::_set_s_postCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextTaskScheduler", "s_postCallback", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.SynchronizationContext m_synchronizationContext
[[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& System::Threading::Tasks::SynchronizationContextTaskScheduler::dyn_m_synchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::dyn_m_synchronizationContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_synchronizationContext"))->offset;
  return *reinterpret_cast<::System::Threading::SynchronizationContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextTaskScheduler.QueueTask
void System::Threading::Tasks::SynchronizationContextTaskScheduler::QueueTask(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::QueueTask");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextTaskScheduler.TryExecuteTaskInline
bool System::Threading::Tasks::SynchronizationContextTaskScheduler::TryExecuteTaskInline(::System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::TryExecuteTaskInline");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextTaskScheduler..cctor
void System::Threading::Tasks::SynchronizationContextTaskScheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextTaskScheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.SynchronizationContextTaskScheduler/<>c
#include "System/Threading/Tasks/SynchronizationContextTaskScheduler_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.SynchronizationContextTaskScheduler/<>c <>9
::System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c* System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c*>("System.Threading.Tasks", "SynchronizationContextTaskScheduler/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.SynchronizationContextTaskScheduler/<>c <>9
void System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c::_set_$$9(::System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "SynchronizationContextTaskScheduler/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextTaskScheduler/<>c..cctor
void System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "SynchronizationContextTaskScheduler/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.SynchronizationContextTaskScheduler/<>c.<.cctor>b__8_0
void System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c::$_cctor$b__8_0(::Il2CppObject* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::SynchronizationContextTaskScheduler::$$c::<.cctor>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
#include "System/Threading/Tasks/UnobservedTaskExceptionEventArgs.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.AggregateException m_exception
[[deprecated("Use field access instead!")]] ::System::AggregateException*& System::Threading::Tasks::UnobservedTaskExceptionEventArgs::dyn_m_exception() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::UnobservedTaskExceptionEventArgs::dyn_m_exception");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_exception"))->offset;
  return *reinterpret_cast<::System::AggregateException**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean m_observed
[[deprecated("Use field access instead!")]] bool& System::Threading::Tasks::UnobservedTaskExceptionEventArgs::dyn_m_observed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::UnobservedTaskExceptionEventArgs::dyn_m_observed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_observed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.ThreadPoolTaskScheduler
#include "System/Threading/Tasks/ThreadPoolTaskScheduler.hpp"
// Including type: System.Threading.Tasks.ThreadPoolTaskScheduler/<>c
#include "System/Threading/Tasks/ThreadPoolTaskScheduler_--c.hpp"
// Including type: System.Threading.ParameterizedThreadStart
#include "System/Threading/ParameterizedThreadStart.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.ParameterizedThreadStart s_longRunningThreadWork
::System::Threading::ParameterizedThreadStart* System::Threading::Tasks::ThreadPoolTaskScheduler::_get_s_longRunningThreadWork() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::_get_s_longRunningThreadWork");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::ParameterizedThreadStart*>("System.Threading.Tasks", "ThreadPoolTaskScheduler", "s_longRunningThreadWork"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.ParameterizedThreadStart s_longRunningThreadWork
void System::Threading::Tasks::ThreadPoolTaskScheduler::_set_s_longRunningThreadWork(::System::Threading::ParameterizedThreadStart* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::_set_s_longRunningThreadWork");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "ThreadPoolTaskScheduler", "s_longRunningThreadWork", value));
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.QueueTask
void System::Threading::Tasks::ThreadPoolTaskScheduler::QueueTask(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::QueueTask");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline
bool System::Threading::Tasks::ThreadPoolTaskScheduler::TryExecuteTaskInline(::System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::TryExecuteTaskInline");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task, taskWasPreviouslyQueued);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.TryDequeue
bool System::Threading::Tasks::ThreadPoolTaskScheduler::TryDequeue(::System::Threading::Tasks::Task* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::TryDequeue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, task);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.NotifyWorkItemProgress
void System::Threading::Tasks::ThreadPoolTaskScheduler::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::NotifyWorkItemProgress");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler.get_RequiresAtomicStartTransition
bool System::Threading::Tasks::ThreadPoolTaskScheduler::get_RequiresAtomicStartTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::get_RequiresAtomicStartTransition");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::TaskScheduler*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler..cctor
void System::Threading::Tasks::ThreadPoolTaskScheduler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "ThreadPoolTaskScheduler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.ThreadPoolTaskScheduler/<>c
#include "System/Threading/Tasks/ThreadPoolTaskScheduler_--c.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.ThreadPoolTaskScheduler/<>c <>9
::System::Threading::Tasks::ThreadPoolTaskScheduler::$$c* System::Threading::Tasks::ThreadPoolTaskScheduler::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Threading::Tasks::ThreadPoolTaskScheduler::$$c*>("System.Threading.Tasks", "ThreadPoolTaskScheduler/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.ThreadPoolTaskScheduler/<>c <>9
void System::Threading::Tasks::ThreadPoolTaskScheduler::$$c::_set_$$9(::System::Threading::Tasks::ThreadPoolTaskScheduler::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Threading.Tasks", "ThreadPoolTaskScheduler/<>c", "<>9", value)));
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler/<>c..cctor
void System::Threading::Tasks::ThreadPoolTaskScheduler::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "ThreadPoolTaskScheduler/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.ThreadPoolTaskScheduler/<>c.<.cctor>b__10_0
void System::Threading::Tasks::ThreadPoolTaskScheduler::$$c::$_cctor$b__10_0(::Il2CppObject* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::ThreadPoolTaskScheduler::$$c::<.cctor>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Required
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Required");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Required"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Required
void System::Threading::Tasks::CausalityTraceLevel::_set_Required(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Required");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Required", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Important
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Important() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Important");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Important"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Important
void System::Threading::Tasks::CausalityTraceLevel::_set_Important(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Important");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Important", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityTraceLevel Verbose
::System::Threading::Tasks::CausalityTraceLevel System::Threading::Tasks::CausalityTraceLevel::_get_Verbose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_get_Verbose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityTraceLevel>("System.Threading.Tasks", "CausalityTraceLevel", "Verbose"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityTraceLevel Verbose
void System::Threading::Tasks::CausalityTraceLevel::_set_Verbose(::System::Threading::Tasks::CausalityTraceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::_set_Verbose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityTraceLevel", "Verbose", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalityTraceLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityTraceLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.AsyncCausalityStatus
#include "System/Threading/Tasks/AsyncCausalityStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Started
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Started");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Started"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Started
void System::Threading::Tasks::AsyncCausalityStatus::_set_Started(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Started");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Started", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Completed
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Completed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Completed"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Completed
void System::Threading::Tasks::AsyncCausalityStatus::_set_Completed(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Completed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Completed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Canceled
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Canceled
void System::Threading::Tasks::AsyncCausalityStatus::_set_Canceled(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Canceled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.AsyncCausalityStatus Error
::System::Threading::Tasks::AsyncCausalityStatus System::Threading::Tasks::AsyncCausalityStatus::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::AsyncCausalityStatus>("System.Threading.Tasks", "AsyncCausalityStatus", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.AsyncCausalityStatus Error
void System::Threading::Tasks::AsyncCausalityStatus::_set_Error(::System::Threading::Tasks::AsyncCausalityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "AsyncCausalityStatus", "Error", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::AsyncCausalityStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalityRelation
#include "System/Threading/Tasks/CausalityRelation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation AssignDelegate
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_AssignDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_AssignDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "AssignDelegate"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation AssignDelegate
void System::Threading::Tasks::CausalityRelation::_set_AssignDelegate(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_AssignDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "AssignDelegate", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Join
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Join");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Join"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Join
void System::Threading::Tasks::CausalityRelation::_set_Join(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Join");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Join", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Choice
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Choice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Choice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Choice"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Choice
void System::Threading::Tasks::CausalityRelation::_set_Choice(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Choice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Choice", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Cancel
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Cancel"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Cancel
void System::Threading::Tasks::CausalityRelation::_set_Cancel(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Cancel", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalityRelation Error
::System::Threading::Tasks::CausalityRelation System::Threading::Tasks::CausalityRelation::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalityRelation>("System.Threading.Tasks", "CausalityRelation", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalityRelation Error
void System::Threading::Tasks::CausalityRelation::_set_Error(::System::Threading::Tasks::CausalityRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalityRelation", "Error", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalityRelation::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalityRelation::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
::System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_Execution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_get_Execution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "Execution"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
void System::Threading::Tasks::CausalitySynchronousWork::_set_Execution(::System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::_set_Execution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "Execution", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::CausalitySynchronousWork::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::CausalitySynchronousWork::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.AsyncCausalityTracer
#include "System/Threading/Tasks/AsyncCausalityTracer.hpp"
// Including type: System.Threading.Tasks.CausalityTraceLevel
#include "System/Threading/Tasks/CausalityTraceLevel.hpp"
// Including type: System.Threading.Tasks.AsyncCausalityStatus
#include "System/Threading/Tasks/AsyncCausalityStatus.hpp"
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.get_LoggingOn
bool System::Threading::Tasks::AsyncCausalityTracer::get_LoggingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::get_LoggingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "get_LoggingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationCreation
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCreation(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::StringW operationName, uint64_t relatedContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCreation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationCreation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(operationName), ::il2cpp_utils::ExtractType(relatedContext)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, operationName, relatedContext);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceOperationCompletion
void System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::System::Threading::Tasks::AsyncCausalityStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceOperationCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceOperationCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(status)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, status);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceSynchronousWorkStart
void System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkStart(::System::Threading::Tasks::CausalityTraceLevel traceLevel, int taskId, ::System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceSynchronousWorkStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(taskId), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, taskId, work);
}
// Autogenerated method: System.Threading.Tasks.AsyncCausalityTracer.TraceSynchronousWorkCompletion
void System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkCompletion(::System::Threading::Tasks::CausalityTraceLevel traceLevel, ::System::Threading::Tasks::CausalitySynchronousWork work) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::AsyncCausalityTracer::TraceSynchronousWorkCompletion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "AsyncCausalityTracer", "TraceSynchronousWorkCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(traceLevel), ::il2cpp_utils::ExtractType(work)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, traceLevel, work);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags
#include "System/Threading/Tasks/Sources/ValueTaskSourceOnCompletedFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags None
::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags>("System.Threading.Tasks.Sources", "ValueTaskSourceOnCompletedFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags None
void System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_set_None(::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks.Sources", "ValueTaskSourceOnCompletedFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags UseSchedulingContext
::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_get_UseSchedulingContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_get_UseSchedulingContext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags>("System.Threading.Tasks.Sources", "ValueTaskSourceOnCompletedFlags", "UseSchedulingContext"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags UseSchedulingContext
void System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_set_UseSchedulingContext(::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_set_UseSchedulingContext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks.Sources", "ValueTaskSourceOnCompletedFlags", "UseSchedulingContext", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags FlowExecutionContext
::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_get_FlowExecutionContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_get_FlowExecutionContext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags>("System.Threading.Tasks.Sources", "ValueTaskSourceOnCompletedFlags", "FlowExecutionContext"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags FlowExecutionContext
void System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_set_FlowExecutionContext(::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::_set_FlowExecutionContext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks.Sources", "ValueTaskSourceOnCompletedFlags", "FlowExecutionContext", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.Sources.ValueTaskSourceStatus
#include "System/Threading/Tasks/Sources/ValueTaskSourceStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.Sources.ValueTaskSourceStatus Pending
::System::Threading::Tasks::Sources::ValueTaskSourceStatus System::Threading::Tasks::Sources::ValueTaskSourceStatus::_get_Pending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::_get_Pending");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Sources::ValueTaskSourceStatus>("System.Threading.Tasks.Sources", "ValueTaskSourceStatus", "Pending"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.Sources.ValueTaskSourceStatus Pending
void System::Threading::Tasks::Sources::ValueTaskSourceStatus::_set_Pending(::System::Threading::Tasks::Sources::ValueTaskSourceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::_set_Pending");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks.Sources", "ValueTaskSourceStatus", "Pending", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.Sources.ValueTaskSourceStatus Succeeded
::System::Threading::Tasks::Sources::ValueTaskSourceStatus System::Threading::Tasks::Sources::ValueTaskSourceStatus::_get_Succeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::_get_Succeeded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Sources::ValueTaskSourceStatus>("System.Threading.Tasks.Sources", "ValueTaskSourceStatus", "Succeeded"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.Sources.ValueTaskSourceStatus Succeeded
void System::Threading::Tasks::Sources::ValueTaskSourceStatus::_set_Succeeded(::System::Threading::Tasks::Sources::ValueTaskSourceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::_set_Succeeded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks.Sources", "ValueTaskSourceStatus", "Succeeded", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.Sources.ValueTaskSourceStatus Faulted
::System::Threading::Tasks::Sources::ValueTaskSourceStatus System::Threading::Tasks::Sources::ValueTaskSourceStatus::_get_Faulted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::_get_Faulted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Sources::ValueTaskSourceStatus>("System.Threading.Tasks.Sources", "ValueTaskSourceStatus", "Faulted"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.Sources.ValueTaskSourceStatus Faulted
void System::Threading::Tasks::Sources::ValueTaskSourceStatus::_set_Faulted(::System::Threading::Tasks::Sources::ValueTaskSourceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::_set_Faulted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks.Sources", "ValueTaskSourceStatus", "Faulted", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.Sources.ValueTaskSourceStatus Canceled
::System::Threading::Tasks::Sources::ValueTaskSourceStatus System::Threading::Tasks::Sources::ValueTaskSourceStatus::_get_Canceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::_get_Canceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Threading::Tasks::Sources::ValueTaskSourceStatus>("System.Threading.Tasks.Sources", "ValueTaskSourceStatus", "Canceled"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.Sources.ValueTaskSourceStatus Canceled
void System::Threading::Tasks::Sources::ValueTaskSourceStatus::_set_Canceled(::System::Threading::Tasks::Sources::ValueTaskSourceStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::_set_Canceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks.Sources", "ValueTaskSourceStatus", "Canceled", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Threading::Tasks::Sources::ValueTaskSourceStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::ValueTaskSourceStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Sources.IValueTaskSource
#include "System/Threading/Tasks/Sources/IValueTaskSource.hpp"
// Including type: System.Threading.Tasks.Sources.ValueTaskSourceStatus
#include "System/Threading/Tasks/Sources/ValueTaskSourceStatus.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags
#include "System/Threading/Tasks/Sources/ValueTaskSourceOnCompletedFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.Sources.IValueTaskSource.GetStatus
::System::Threading::Tasks::Sources::ValueTaskSourceStatus System::Threading::Tasks::Sources::IValueTaskSource::GetStatus(int16_t token) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::IValueTaskSource::GetStatus");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Sources::IValueTaskSource*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Sources::ValueTaskSourceStatus, false>(this, ___internal__method, token);
}
// Autogenerated method: System.Threading.Tasks.Sources.IValueTaskSource.OnCompleted
void System::Threading::Tasks::Sources::IValueTaskSource::OnCompleted(::System::Action_1<::Il2CppObject*>* continuation, ::Il2CppObject* state, int16_t token, ::System::Threading::Tasks::Sources::ValueTaskSourceOnCompletedFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::IValueTaskSource::OnCompleted");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Sources::IValueTaskSource*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuation, state, token, flags);
}
// Autogenerated method: System.Threading.Tasks.Sources.IValueTaskSource.GetResult
void System::Threading::Tasks::Sources::IValueTaskSource::GetResult(int16_t token) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::Sources::IValueTaskSource::GetResult");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Threading::Tasks::Sources::IValueTaskSource*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, token);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.ASCIIEncoding
#include "System/Text/ASCIIEncoding.hpp"
// Including type: System.Text.ASCIIEncoding/ASCIIEncodingSealed
#include "System/Text/ASCIIEncoding_ASCIIEncodingSealed.hpp"
// Including type: System.Text.EncoderNLS
#include "System/Text/EncoderNLS.hpp"
// Including type: System.Text.DecoderNLS
#include "System/Text/DecoderNLS.hpp"
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Text.ASCIIEncoding/ASCIIEncodingSealed s_default
::System::Text::ASCIIEncoding::ASCIIEncodingSealed* System::Text::ASCIIEncoding::_get_s_default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::_get_s_default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::ASCIIEncoding::ASCIIEncodingSealed*>("System.Text", "ASCIIEncoding", "s_default"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.ASCIIEncoding/ASCIIEncodingSealed s_default
void System::Text::ASCIIEncoding::_set_s_default(::System::Text::ASCIIEncoding::ASCIIEncodingSealed* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::_set_s_default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "ASCIIEncoding", "s_default", value));
}
// Autogenerated method: System.Text.ASCIIEncoding..cctor
void System::Text::ASCIIEncoding::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "ASCIIEncoding", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.ASCIIEncoding.SetDefaultFallbacks
void System::Text::ASCIIEncoding::SetDefaultFallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::SetDefaultFallbacks");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetByteCount
int System::Text::ASCIIEncoding::GetByteCount(::ArrayW<::Il2CppChar> chars, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 13));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, index, count);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetByteCount
int System::Text::ASCIIEncoding::GetByteCount(::StringW chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetByteCount
int System::Text::ASCIIEncoding::GetByteCount(::Il2CppChar* chars, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 14));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetBytes
int System::Text::ASCIIEncoding::GetBytes(::StringW chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 20));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetBytes
int System::Text::ASCIIEncoding::GetBytes(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 18));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetBytes
int System::Text::ASCIIEncoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 22));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetCharCount
int System::Text::ASCIIEncoding::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 23));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetCharCount
int System::Text::ASCIIEncoding::GetCharCount(uint8_t* bytes, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 24));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetChars
int System::Text::ASCIIEncoding::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 28));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetChars
int System::Text::ASCIIEncoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 29));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetString
::StringW System::Text::ASCIIEncoding::GetString(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, bytes, byteIndex, byteCount);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetByteCount
int System::Text::ASCIIEncoding::GetByteCount(::Il2CppChar* chars, int charCount, ::System::Text::EncoderNLS* encoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 15));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, encoder);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetBytes
int System::Text::ASCIIEncoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, ::System::Text::EncoderNLS* encoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 21));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount, encoder);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetCharCount
int System::Text::ASCIIEncoding::GetCharCount(uint8_t* bytes, int count, ::System::Text::DecoderNLS* decoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 25));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count, decoder);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetChars
int System::Text::ASCIIEncoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, ::System::Text::DecoderNLS* decoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 30));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount, decoder);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetMaxByteCount
int System::Text::ASCIIEncoding::GetMaxByteCount(int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetMaxByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 35));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, charCount);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetMaxCharCount
int System::Text::ASCIIEncoding::GetMaxCharCount(int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetMaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 36));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byteCount);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetDecoder
::System::Text::Decoder* System::Text::ASCIIEncoding::GetDecoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetDecoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 33));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Decoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.ASCIIEncoding.GetEncoder
::System::Text::Encoder* System::Text::ASCIIEncoding::GetEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::ASCIIEncoding::GetEncoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 34));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoder*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.ASCIIEncoding/ASCIIEncodingSealed
#include "System/Text/ASCIIEncoding_ASCIIEncodingSealed.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.Text.DecoderFallback
#include "System/Text/DecoderFallback.hpp"
// Including type: System.Text.DecoderFallbackBuffer
#include "System/Text/DecoderFallbackBuffer.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
// Including type: System.Span`1
#include "System/Span_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Text.DecoderFallback _fallback
[[deprecated("Use field access instead!")]] ::System::Text::DecoderFallback*& System::Text::Decoder::dyn__fallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::dyn__fallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallback"))->offset;
  return *reinterpret_cast<::System::Text::DecoderFallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Text.DecoderFallbackBuffer _fallbackBuffer
[[deprecated("Use field access instead!")]] ::System::Text::DecoderFallbackBuffer*& System::Text::Decoder::dyn__fallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::dyn__fallbackBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallbackBuffer"))->offset;
  return *reinterpret_cast<::System::Text::DecoderFallbackBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.Decoder.get_Fallback
::System::Text::DecoderFallback* System::Text::Decoder::get_Fallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::get_Fallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Fallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallback*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.Decoder.get_FallbackBuffer
::System::Text::DecoderFallbackBuffer* System::Text::Decoder::get_FallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::get_FallbackBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FallbackBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.Decoder.get_InternalHasFallbackBuffer
bool System::Text::Decoder::get_InternalHasFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::get_InternalHasFallbackBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InternalHasFallbackBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.Decoder.Reset
void System::Text::Decoder::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.Decoder.GetCharCount
int System::Text::Decoder::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.Decoder.GetCharCount
int System::Text::Decoder::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count, flush);
}
// Autogenerated method: System.Text.Decoder.GetCharCount
int System::Text::Decoder::GetCharCount(uint8_t* bytes, int count, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 7));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count, flush);
}
// Autogenerated method: System.Text.Decoder.GetChars
int System::Text::Decoder::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex);
}
// Autogenerated method: System.Text.Decoder.GetChars
int System::Text::Decoder::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 9));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex, flush);
}
// Autogenerated method: System.Text.Decoder.GetChars
int System::Text::Decoder::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 10));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount, flush);
}
// Autogenerated method: System.Text.Decoder.GetChars
int System::Text::Decoder::GetChars(::System::ReadOnlySpan_1<uint8_t> bytes, ::System::Span_1<::Il2CppChar> chars, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 11));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, chars, flush);
}
// Autogenerated method: System.Text.Decoder.Convert
void System::Text::Decoder::Convert(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, bool flush, ByRef<int> bytesUsed, ByRef<int> charsUsed, ByRef<bool> completed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::Convert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex, charCount, flush, byref(bytesUsed), byref(charsUsed), byref(completed));
}
// Autogenerated method: System.Text.Decoder.Convert
void System::Text::Decoder::Convert(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, bool flush, ByRef<int> bytesUsed, ByRef<int> charsUsed, ByRef<bool> completed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Decoder::Convert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytes, byteCount, chars, charCount, flush, byref(bytesUsed), byref(charsUsed), byref(completed));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.InternalDecoderBestFitFallback
#include "System/Text/InternalDecoderBestFitFallback.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Text.DecoderFallbackBuffer
#include "System/Text/DecoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Text.Encoding _encoding
[[deprecated("Use field access instead!")]] ::System::Text::Encoding*& System::Text::InternalDecoderBestFitFallback::dyn__encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallback::dyn__encoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_encoding"))->offset;
  return *reinterpret_cast<::System::Text::Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Char[] _arrayBestFit
[[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& System::Text::InternalDecoderBestFitFallback::dyn__arrayBestFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallback::dyn__arrayBestFit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_arrayBestFit"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppChar>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Char _cReplacement
[[deprecated("Use field access instead!")]] ::Il2CppChar& System::Text::InternalDecoderBestFitFallback::dyn__cReplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallback::dyn__cReplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cReplacement"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallback.CreateFallbackBuffer
::System::Text::DecoderFallbackBuffer* System::Text::InternalDecoderBestFitFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallback.get_MaxCharCount
int System::Text::InternalDecoderBestFitFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallback.Equals
bool System::Text::InternalDecoderBestFitFallback::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallback::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallback.GetHashCode
int System::Text::InternalDecoderBestFitFallback::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallback::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.InternalDecoderBestFitFallbackBuffer
#include "System/Text/InternalDecoderBestFitFallbackBuffer.hpp"
// Including type: System.Text.InternalDecoderBestFitFallback
#include "System/Text/InternalDecoderBestFitFallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Object s_InternalSyncObject
::Il2CppObject* System::Text::InternalDecoderBestFitFallbackBuffer::_get_s_InternalSyncObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::_get_s_InternalSyncObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Text", "InternalDecoderBestFitFallbackBuffer", "s_InternalSyncObject"));
}
// Autogenerated static field setter
// Set static field: static private System.Object s_InternalSyncObject
void System::Text::InternalDecoderBestFitFallbackBuffer::_set_s_InternalSyncObject(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::_set_s_InternalSyncObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "InternalDecoderBestFitFallbackBuffer", "s_InternalSyncObject", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Char _cBestFit
[[deprecated("Use field access instead!")]] ::Il2CppChar& System::Text::InternalDecoderBestFitFallbackBuffer::dyn__cBestFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::dyn__cBestFit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cBestFit"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _iCount
[[deprecated("Use field access instead!")]] int& System::Text::InternalDecoderBestFitFallbackBuffer::dyn__iCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::dyn__iCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_iCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _iSize
[[deprecated("Use field access instead!")]] int& System::Text::InternalDecoderBestFitFallbackBuffer::dyn__iSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::dyn__iSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_iSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.InternalDecoderBestFitFallback _oFallback
[[deprecated("Use field access instead!")]] ::System::Text::InternalDecoderBestFitFallback*& System::Text::InternalDecoderBestFitFallbackBuffer::dyn__oFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::dyn__oFallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_oFallback"))->offset;
  return *reinterpret_cast<::System::Text::InternalDecoderBestFitFallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallbackBuffer.get_InternalSyncObject
::Il2CppObject* System::Text::InternalDecoderBestFitFallbackBuffer::get_InternalSyncObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::get_InternalSyncObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "InternalDecoderBestFitFallbackBuffer", "get_InternalSyncObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallbackBuffer.TryBestFit
::Il2CppChar System::Text::InternalDecoderBestFitFallbackBuffer::TryBestFit(::ArrayW<uint8_t> bytesCheck) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::TryBestFit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryBestFit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesCheck)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method, bytesCheck);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallbackBuffer.Fallback
bool System::Text::InternalDecoderBestFitFallbackBuffer::Fallback(::ArrayW<uint8_t> bytesUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bytesUnknown, index);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallbackBuffer.GetNextChar
::Il2CppChar System::Text::InternalDecoderBestFitFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallbackBuffer.get_Remaining
int System::Text::InternalDecoderBestFitFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallbackBuffer.Reset
void System::Text::InternalDecoderBestFitFallbackBuffer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalDecoderBestFitFallbackBuffer.InternalFallback
int System::Text::InternalDecoderBestFitFallbackBuffer::InternalFallback(::ArrayW<uint8_t> bytes, uint8_t* pBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalDecoderBestFitFallbackBuffer::InternalFallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 9));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, pBytes);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.DecoderExceptionFallback
#include "System/Text/DecoderExceptionFallback.hpp"
// Including type: System.Text.DecoderFallbackBuffer
#include "System/Text/DecoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Text.DecoderExceptionFallback.CreateFallbackBuffer
::System::Text::DecoderFallbackBuffer* System::Text::DecoderExceptionFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderExceptionFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderExceptionFallback.get_MaxCharCount
int System::Text::DecoderExceptionFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderExceptionFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderExceptionFallback.Equals
bool System::Text::DecoderExceptionFallback::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderExceptionFallback::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.DecoderExceptionFallback.GetHashCode
int System::Text::DecoderExceptionFallback::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderExceptionFallback::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.DecoderExceptionFallbackBuffer
#include "System/Text/DecoderExceptionFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Text.DecoderExceptionFallbackBuffer.Throw
void System::Text::DecoderExceptionFallbackBuffer::Throw(::ArrayW<uint8_t> bytesUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderExceptionFallbackBuffer::Throw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Throw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesUnknown), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytesUnknown, index);
}
// Autogenerated method: System.Text.DecoderExceptionFallbackBuffer.Fallback
bool System::Text::DecoderExceptionFallbackBuffer::Fallback(::ArrayW<uint8_t> bytesUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderExceptionFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bytesUnknown, index);
}
// Autogenerated method: System.Text.DecoderExceptionFallbackBuffer.GetNextChar
::Il2CppChar System::Text::DecoderExceptionFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderExceptionFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderExceptionFallbackBuffer.get_Remaining
int System::Text::DecoderExceptionFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderExceptionFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.DecoderFallbackException
#include "System/Text/DecoderFallbackException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Byte[] _bytesUnknown
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& System::Text::DecoderFallbackException::dyn__bytesUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackException::dyn__bytesUnknown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bytesUnknown"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _index
[[deprecated("Use field access instead!")]] int& System::Text::DecoderFallbackException::dyn__index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackException::dyn__index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.DecoderFallback
#include "System/Text/DecoderFallback.hpp"
// Including type: System.Text.DecoderFallbackBuffer
#include "System/Text/DecoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.DecoderFallback s_replacementFallback
::System::Text::DecoderFallback* System::Text::DecoderFallback::_get_s_replacementFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallback::_get_s_replacementFallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::DecoderFallback*>("System.Text", "DecoderFallback", "s_replacementFallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.DecoderFallback s_replacementFallback
void System::Text::DecoderFallback::_set_s_replacementFallback(::System::Text::DecoderFallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallback::_set_s_replacementFallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "DecoderFallback", "s_replacementFallback", value));
}
// Autogenerated static field getter
// Get static field: static private System.Text.DecoderFallback s_exceptionFallback
::System::Text::DecoderFallback* System::Text::DecoderFallback::_get_s_exceptionFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallback::_get_s_exceptionFallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::DecoderFallback*>("System.Text", "DecoderFallback", "s_exceptionFallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.DecoderFallback s_exceptionFallback
void System::Text::DecoderFallback::_set_s_exceptionFallback(::System::Text::DecoderFallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallback::_set_s_exceptionFallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "DecoderFallback", "s_exceptionFallback", value));
}
// Autogenerated method: System.Text.DecoderFallback.get_ReplacementFallback
::System::Text::DecoderFallback* System::Text::DecoderFallback::get_ReplacementFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallback::get_ReplacementFallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "DecoderFallback", "get_ReplacementFallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallback*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.DecoderFallback.get_ExceptionFallback
::System::Text::DecoderFallback* System::Text::DecoderFallback::get_ExceptionFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallback::get_ExceptionFallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "DecoderFallback", "get_ExceptionFallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallback*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.DecoderFallback.CreateFallbackBuffer
::System::Text::DecoderFallbackBuffer* System::Text::DecoderFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderFallback.get_MaxCharCount
int System::Text::DecoderFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.DecoderFallbackBuffer
#include "System/Text/DecoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Byte* byteStart
[[deprecated("Use field access instead!")]] uint8_t*& System::Text::DecoderFallbackBuffer::dyn_byteStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::dyn_byteStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "byteStart"))->offset;
  return *reinterpret_cast<uint8_t**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Char* charEnd
[[deprecated("Use field access instead!")]] ::Il2CppChar*& System::Text::DecoderFallbackBuffer::dyn_charEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::dyn_charEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "charEnd"))->offset;
  return *reinterpret_cast<::Il2CppChar**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.Fallback
bool System::Text::DecoderFallbackBuffer::Fallback(::ArrayW<uint8_t> bytesUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bytesUnknown, index);
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.GetNextChar
::Il2CppChar System::Text::DecoderFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.get_Remaining
int System::Text::DecoderFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.Reset
void System::Text::DecoderFallbackBuffer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.InternalReset
void System::Text::DecoderFallbackBuffer::InternalReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::InternalReset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalReset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.InternalInitialize
void System::Text::DecoderFallbackBuffer::InternalInitialize(uint8_t* byteStart, ::Il2CppChar* charEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::InternalInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(byteStart), ::il2cpp_utils::ExtractType(charEnd)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byteStart, charEnd);
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.InternalFallback
bool System::Text::DecoderFallbackBuffer::InternalFallback(::ArrayW<uint8_t> bytes, uint8_t* pBytes, ByRef<::Il2CppChar*> chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::InternalFallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bytes, pBytes, byref(chars));
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.InternalFallback
int System::Text::DecoderFallbackBuffer::InternalFallback(::ArrayW<uint8_t> bytes, uint8_t* pBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::InternalFallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 9));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, pBytes);
}
// Autogenerated method: System.Text.DecoderFallbackBuffer.ThrowLastBytesRecursive
void System::Text::DecoderFallbackBuffer::ThrowLastBytesRecursive(::ArrayW<uint8_t> bytesUnknown) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderFallbackBuffer::ThrowLastBytesRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowLastBytesRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesUnknown)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytesUnknown);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.DecoderNLS
#include "System/Text/DecoderNLS.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Text.Encoding _encoding
[[deprecated("Use field access instead!")]] ::System::Text::Encoding*& System::Text::DecoderNLS::dyn__encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::dyn__encoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_encoding"))->offset;
  return *reinterpret_cast<::System::Text::Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _mustFlush
[[deprecated("Use field access instead!")]] bool& System::Text::DecoderNLS::dyn__mustFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::dyn__mustFlush");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mustFlush"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean _throwOnOverflow
[[deprecated("Use field access instead!")]] bool& System::Text::DecoderNLS::dyn__throwOnOverflow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::dyn__throwOnOverflow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_throwOnOverflow"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _bytesUsed
[[deprecated("Use field access instead!")]] int& System::Text::DecoderNLS::dyn__bytesUsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::dyn__bytesUsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bytesUsed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.DecoderNLS.get_MustFlush
bool System::Text::DecoderNLS::get_MustFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::get_MustFlush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MustFlush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderNLS.get_HasState
bool System::Text::DecoderNLS::get_HasState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::get_HasState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderNLS*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderNLS.ClearMustFlush
void System::Text::DecoderNLS::ClearMustFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::ClearMustFlush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMustFlush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderNLS.Reset
void System::Text::DecoderNLS::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderNLS.GetCharCount
int System::Text::DecoderNLS::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.DecoderNLS.GetCharCount
int System::Text::DecoderNLS::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count, flush);
}
// Autogenerated method: System.Text.DecoderNLS.GetCharCount
int System::Text::DecoderNLS::GetCharCount(uint8_t* bytes, int count, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 7));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count, flush);
}
// Autogenerated method: System.Text.DecoderNLS.GetChars
int System::Text::DecoderNLS::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 8));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex);
}
// Autogenerated method: System.Text.DecoderNLS.GetChars
int System::Text::DecoderNLS::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 9));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex, flush);
}
// Autogenerated method: System.Text.DecoderNLS.GetChars
int System::Text::DecoderNLS::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 10));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount, flush);
}
// Autogenerated method: System.Text.DecoderNLS.Convert
void System::Text::DecoderNLS::Convert(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, bool flush, ByRef<int> bytesUsed, ByRef<int> charsUsed, ByRef<bool> completed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::Convert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex, charCount, flush, byref(bytesUsed), byref(charsUsed), byref(completed));
}
// Autogenerated method: System.Text.DecoderNLS.Convert
void System::Text::DecoderNLS::Convert(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, bool flush, ByRef<int> bytesUsed, ByRef<int> charsUsed, ByRef<bool> completed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderNLS::Convert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Decoder*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytes, byteCount, chars, charCount, flush, byref(bytesUsed), byref(charsUsed), byref(completed));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.DecoderReplacementFallback
#include "System/Text/DecoderReplacementFallback.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Text.DecoderFallbackBuffer
#include "System/Text/DecoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _strDefault
[[deprecated("Use field access instead!")]] ::StringW& System::Text::DecoderReplacementFallback::dyn__strDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallback::dyn__strDefault");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strDefault"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.DecoderReplacementFallback.System.Runtime.Serialization.ISerializable.GetObjectData
void System::Text::DecoderReplacementFallback::System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallback::System.Runtime.Serialization.ISerializable.GetObjectData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderReplacementFallback*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Text.DecoderReplacementFallback.get_DefaultString
::StringW System::Text::DecoderReplacementFallback::get_DefaultString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallback::get_DefaultString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderReplacementFallback.CreateFallbackBuffer
::System::Text::DecoderFallbackBuffer* System::Text::DecoderReplacementFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderReplacementFallback.get_MaxCharCount
int System::Text::DecoderReplacementFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderReplacementFallback.Equals
bool System::Text::DecoderReplacementFallback::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallback::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.DecoderReplacementFallback.GetHashCode
int System::Text::DecoderReplacementFallback::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallback::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.DecoderReplacementFallbackBuffer
#include "System/Text/DecoderReplacementFallbackBuffer.hpp"
// Including type: System.Text.DecoderReplacementFallback
#include "System/Text/DecoderReplacementFallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _strDefault
[[deprecated("Use field access instead!")]] ::StringW& System::Text::DecoderReplacementFallbackBuffer::dyn__strDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallbackBuffer::dyn__strDefault");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strDefault"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _fallbackCount
[[deprecated("Use field access instead!")]] int& System::Text::DecoderReplacementFallbackBuffer::dyn__fallbackCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallbackBuffer::dyn__fallbackCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallbackCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _fallbackIndex
[[deprecated("Use field access instead!")]] int& System::Text::DecoderReplacementFallbackBuffer::dyn__fallbackIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallbackBuffer::dyn__fallbackIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallbackIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.DecoderReplacementFallbackBuffer.Fallback
bool System::Text::DecoderReplacementFallbackBuffer::Fallback(::ArrayW<uint8_t> bytesUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bytesUnknown, index);
}
// Autogenerated method: System.Text.DecoderReplacementFallbackBuffer.GetNextChar
::Il2CppChar System::Text::DecoderReplacementFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderReplacementFallbackBuffer.get_Remaining
int System::Text::DecoderReplacementFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderReplacementFallbackBuffer.Reset
void System::Text::DecoderReplacementFallbackBuffer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallbackBuffer::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.DecoderReplacementFallbackBuffer.InternalFallback
int System::Text::DecoderReplacementFallbackBuffer::InternalFallback(::ArrayW<uint8_t> bytes, uint8_t* pBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::DecoderReplacementFallbackBuffer::InternalFallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 9));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, pBytes);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
// Including type: System.Text.EncoderFallback
#include "System/Text/EncoderFallback.hpp"
// Including type: System.Text.EncoderFallbackBuffer
#include "System/Text/EncoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Text.EncoderFallback _fallback
[[deprecated("Use field access instead!")]] ::System::Text::EncoderFallback*& System::Text::Encoder::dyn__fallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::dyn__fallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallback"))->offset;
  return *reinterpret_cast<::System::Text::EncoderFallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Text.EncoderFallbackBuffer _fallbackBuffer
[[deprecated("Use field access instead!")]] ::System::Text::EncoderFallbackBuffer*& System::Text::Encoder::dyn__fallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::dyn__fallbackBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallbackBuffer"))->offset;
  return *reinterpret_cast<::System::Text::EncoderFallbackBuffer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.Encoder.get_Fallback
::System::Text::EncoderFallback* System::Text::Encoder::get_Fallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::get_Fallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Fallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::EncoderFallback*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.Encoder.get_FallbackBuffer
::System::Text::EncoderFallbackBuffer* System::Text::Encoder::get_FallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::get_FallbackBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FallbackBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::EncoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.Encoder.get_InternalHasFallbackBuffer
bool System::Text::Encoder::get_InternalHasFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::get_InternalHasFallbackBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InternalHasFallbackBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.Encoder.Reset
void System::Text::Encoder::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.Encoder.GetByteCount
int System::Text::Encoder::GetByteCount(::ArrayW<::Il2CppChar> chars, int index, int count, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, index, count, flush);
}
// Autogenerated method: System.Text.Encoder.GetByteCount
int System::Text::Encoder::GetByteCount(::Il2CppChar* chars, int count, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count, flush);
}
// Autogenerated method: System.Text.Encoder.GetBytes
int System::Text::Encoder::GetBytes(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex, flush);
}
// Autogenerated method: System.Text.Encoder.GetBytes
int System::Text::Encoder::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 8));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount, flush);
}
// Autogenerated method: System.Text.Encoder.Convert
void System::Text::Encoder::Convert(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, bool flush, ByRef<int> charsUsed, ByRef<int> bytesUsed, ByRef<bool> completed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::Convert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex, byteCount, flush, byref(charsUsed), byref(bytesUsed), byref(completed));
}
// Autogenerated method: System.Text.Encoder.Convert
void System::Text::Encoder::Convert(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, bool flush, ByRef<int> charsUsed, ByRef<int> bytesUsed, ByRef<bool> completed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Encoder::Convert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, chars, charCount, bytes, byteCount, flush, byref(charsUsed), byref(bytesUsed), byref(completed));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.InternalEncoderBestFitFallback
#include "System/Text/InternalEncoderBestFitFallback.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Text.EncoderFallbackBuffer
#include "System/Text/EncoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Text.Encoding _encoding
[[deprecated("Use field access instead!")]] ::System::Text::Encoding*& System::Text::InternalEncoderBestFitFallback::dyn__encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallback::dyn__encoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_encoding"))->offset;
  return *reinterpret_cast<::System::Text::Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Char[] _arrayBestFit
[[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& System::Text::InternalEncoderBestFitFallback::dyn__arrayBestFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallback::dyn__arrayBestFit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_arrayBestFit"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppChar>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallback.CreateFallbackBuffer
::System::Text::EncoderFallbackBuffer* System::Text::InternalEncoderBestFitFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallback*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::EncoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallback.get_MaxCharCount
int System::Text::InternalEncoderBestFitFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallback*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallback.Equals
bool System::Text::InternalEncoderBestFitFallback::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallback::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallback.GetHashCode
int System::Text::InternalEncoderBestFitFallback::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallback::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.InternalEncoderBestFitFallbackBuffer
#include "System/Text/InternalEncoderBestFitFallbackBuffer.hpp"
// Including type: System.Text.InternalEncoderBestFitFallback
#include "System/Text/InternalEncoderBestFitFallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Object s_InternalSyncObject
::Il2CppObject* System::Text::InternalEncoderBestFitFallbackBuffer::_get_s_InternalSyncObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::_get_s_InternalSyncObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Text", "InternalEncoderBestFitFallbackBuffer", "s_InternalSyncObject"));
}
// Autogenerated static field setter
// Set static field: static private System.Object s_InternalSyncObject
void System::Text::InternalEncoderBestFitFallbackBuffer::_set_s_InternalSyncObject(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::_set_s_InternalSyncObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "InternalEncoderBestFitFallbackBuffer", "s_InternalSyncObject", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Char _cBestFit
[[deprecated("Use field access instead!")]] ::Il2CppChar& System::Text::InternalEncoderBestFitFallbackBuffer::dyn__cBestFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::dyn__cBestFit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cBestFit"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.InternalEncoderBestFitFallback _oFallback
[[deprecated("Use field access instead!")]] ::System::Text::InternalEncoderBestFitFallback*& System::Text::InternalEncoderBestFitFallbackBuffer::dyn__oFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::dyn__oFallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_oFallback"))->offset;
  return *reinterpret_cast<::System::Text::InternalEncoderBestFitFallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _iCount
[[deprecated("Use field access instead!")]] int& System::Text::InternalEncoderBestFitFallbackBuffer::dyn__iCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::dyn__iCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_iCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _iSize
[[deprecated("Use field access instead!")]] int& System::Text::InternalEncoderBestFitFallbackBuffer::dyn__iSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::dyn__iSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_iSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallbackBuffer.get_InternalSyncObject
::Il2CppObject* System::Text::InternalEncoderBestFitFallbackBuffer::get_InternalSyncObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::get_InternalSyncObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "InternalEncoderBestFitFallbackBuffer", "get_InternalSyncObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallbackBuffer.TryBestFit
::Il2CppChar System::Text::InternalEncoderBestFitFallbackBuffer::TryBestFit(::Il2CppChar cUnknown) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::TryBestFit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryBestFit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cUnknown)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method, cUnknown);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallbackBuffer.Fallback
bool System::Text::InternalEncoderBestFitFallbackBuffer::Fallback(::Il2CppChar charUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, charUnknown, index);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallbackBuffer.Fallback
bool System::Text::InternalEncoderBestFitFallbackBuffer::Fallback(::Il2CppChar charUnknownHigh, ::Il2CppChar charUnknownLow, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, charUnknownHigh, charUnknownLow, index);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallbackBuffer.GetNextChar
::Il2CppChar System::Text::InternalEncoderBestFitFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallbackBuffer.MovePrevious
bool System::Text::InternalEncoderBestFitFallbackBuffer::MovePrevious() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::MovePrevious");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallbackBuffer.get_Remaining
int System::Text::InternalEncoderBestFitFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 8));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.InternalEncoderBestFitFallbackBuffer.Reset
void System::Text::InternalEncoderBestFitFallbackBuffer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::InternalEncoderBestFitFallbackBuffer::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.EncoderExceptionFallback
#include "System/Text/EncoderExceptionFallback.hpp"
// Including type: System.Text.EncoderFallbackBuffer
#include "System/Text/EncoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Text.EncoderExceptionFallback.CreateFallbackBuffer
::System::Text::EncoderFallbackBuffer* System::Text::EncoderExceptionFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallback*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::EncoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderExceptionFallback.get_MaxCharCount
int System::Text::EncoderExceptionFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallback*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderExceptionFallback.Equals
bool System::Text::EncoderExceptionFallback::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallback::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.EncoderExceptionFallback.GetHashCode
int System::Text::EncoderExceptionFallback::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallback::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.EncoderExceptionFallbackBuffer
#include "System/Text/EncoderExceptionFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Text.EncoderExceptionFallbackBuffer.Fallback
bool System::Text::EncoderExceptionFallbackBuffer::Fallback(::Il2CppChar charUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, charUnknown, index);
}
// Autogenerated method: System.Text.EncoderExceptionFallbackBuffer.Fallback
bool System::Text::EncoderExceptionFallbackBuffer::Fallback(::Il2CppChar charUnknownHigh, ::Il2CppChar charUnknownLow, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, charUnknownHigh, charUnknownLow, index);
}
// Autogenerated method: System.Text.EncoderExceptionFallbackBuffer.GetNextChar
::Il2CppChar System::Text::EncoderExceptionFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderExceptionFallbackBuffer.MovePrevious
bool System::Text::EncoderExceptionFallbackBuffer::MovePrevious() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallbackBuffer::MovePrevious");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderExceptionFallbackBuffer.get_Remaining
int System::Text::EncoderExceptionFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderExceptionFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 8));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.EncoderFallbackException
#include "System/Text/EncoderFallbackException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Char _charUnknown
[[deprecated("Use field access instead!")]] ::Il2CppChar& System::Text::EncoderFallbackException::dyn__charUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackException::dyn__charUnknown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_charUnknown"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Char _charUnknownHigh
[[deprecated("Use field access instead!")]] ::Il2CppChar& System::Text::EncoderFallbackException::dyn__charUnknownHigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackException::dyn__charUnknownHigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_charUnknownHigh"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Char _charUnknownLow
[[deprecated("Use field access instead!")]] ::Il2CppChar& System::Text::EncoderFallbackException::dyn__charUnknownLow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackException::dyn__charUnknownLow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_charUnknownLow"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _index
[[deprecated("Use field access instead!")]] int& System::Text::EncoderFallbackException::dyn__index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackException::dyn__index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.EncoderFallback
#include "System/Text/EncoderFallback.hpp"
// Including type: System.Text.EncoderFallbackBuffer
#include "System/Text/EncoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.EncoderFallback s_replacementFallback
::System::Text::EncoderFallback* System::Text::EncoderFallback::_get_s_replacementFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallback::_get_s_replacementFallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::EncoderFallback*>("System.Text", "EncoderFallback", "s_replacementFallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.EncoderFallback s_replacementFallback
void System::Text::EncoderFallback::_set_s_replacementFallback(::System::Text::EncoderFallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallback::_set_s_replacementFallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "EncoderFallback", "s_replacementFallback", value));
}
// Autogenerated static field getter
// Get static field: static private System.Text.EncoderFallback s_exceptionFallback
::System::Text::EncoderFallback* System::Text::EncoderFallback::_get_s_exceptionFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallback::_get_s_exceptionFallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::EncoderFallback*>("System.Text", "EncoderFallback", "s_exceptionFallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.EncoderFallback s_exceptionFallback
void System::Text::EncoderFallback::_set_s_exceptionFallback(::System::Text::EncoderFallback* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallback::_set_s_exceptionFallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "EncoderFallback", "s_exceptionFallback", value));
}
// Autogenerated method: System.Text.EncoderFallback.get_ReplacementFallback
::System::Text::EncoderFallback* System::Text::EncoderFallback::get_ReplacementFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallback::get_ReplacementFallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "EncoderFallback", "get_ReplacementFallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::EncoderFallback*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallback.get_ExceptionFallback
::System::Text::EncoderFallback* System::Text::EncoderFallback::get_ExceptionFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallback::get_ExceptionFallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "EncoderFallback", "get_ExceptionFallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::EncoderFallback*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallback.CreateFallbackBuffer
::System::Text::EncoderFallbackBuffer* System::Text::EncoderFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallback*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::EncoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallback.get_MaxCharCount
int System::Text::EncoderFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallback*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.EncoderFallbackBuffer
#include "System/Text/EncoderFallbackBuffer.hpp"
// Including type: System.Text.EncoderNLS
#include "System/Text/EncoderNLS.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 iMaxRecursion
int System::Text::EncoderFallbackBuffer::_get_iMaxRecursion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::_get_iMaxRecursion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Text", "EncoderFallbackBuffer", "iMaxRecursion"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 iMaxRecursion
void System::Text::EncoderFallbackBuffer::_set_iMaxRecursion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::_set_iMaxRecursion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "EncoderFallbackBuffer", "iMaxRecursion", value));
}
// Autogenerated instance field getter
// Get instance field: System.Char* charStart
[[deprecated("Use field access instead!")]] ::Il2CppChar*& System::Text::EncoderFallbackBuffer::dyn_charStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::dyn_charStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "charStart"))->offset;
  return *reinterpret_cast<::Il2CppChar**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Char* charEnd
[[deprecated("Use field access instead!")]] ::Il2CppChar*& System::Text::EncoderFallbackBuffer::dyn_charEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::dyn_charEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "charEnd"))->offset;
  return *reinterpret_cast<::Il2CppChar**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Text.EncoderNLS encoder
[[deprecated("Use field access instead!")]] ::System::Text::EncoderNLS*& System::Text::EncoderFallbackBuffer::dyn_encoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::dyn_encoder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "encoder"))->offset;
  return *reinterpret_cast<::System::Text::EncoderNLS**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean setEncoder
[[deprecated("Use field access instead!")]] bool& System::Text::EncoderFallbackBuffer::dyn_setEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::dyn_setEncoder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setEncoder"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean bUsedEncoder
[[deprecated("Use field access instead!")]] bool& System::Text::EncoderFallbackBuffer::dyn_bUsedEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::dyn_bUsedEncoder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bUsedEncoder"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean bFallingBack
[[deprecated("Use field access instead!")]] bool& System::Text::EncoderFallbackBuffer::dyn_bFallingBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::dyn_bFallingBack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bFallingBack"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 iRecursionCount
[[deprecated("Use field access instead!")]] int& System::Text::EncoderFallbackBuffer::dyn_iRecursionCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::dyn_iRecursionCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iRecursionCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.Fallback
bool System::Text::EncoderFallbackBuffer::Fallback(::Il2CppChar charUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, charUnknown, index);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.Fallback
bool System::Text::EncoderFallbackBuffer::Fallback(::Il2CppChar charUnknownHigh, ::Il2CppChar charUnknownLow, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, charUnknownHigh, charUnknownLow, index);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.GetNextChar
::Il2CppChar System::Text::EncoderFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.MovePrevious
bool System::Text::EncoderFallbackBuffer::MovePrevious() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::MovePrevious");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.get_Remaining
int System::Text::EncoderFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.Reset
void System::Text::EncoderFallbackBuffer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.InternalReset
void System::Text::EncoderFallbackBuffer::InternalReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::InternalReset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalReset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.InternalInitialize
void System::Text::EncoderFallbackBuffer::InternalInitialize(::Il2CppChar* charStart, ::Il2CppChar* charEnd, ::System::Text::EncoderNLS* encoder, bool setEncoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::InternalInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charStart), ::il2cpp_utils::ExtractType(charEnd), ::il2cpp_utils::ExtractType(encoder), ::il2cpp_utils::ExtractType(setEncoder)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, charStart, charEnd, encoder, setEncoder);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.InternalGetNextChar
::Il2CppChar System::Text::EncoderFallbackBuffer::InternalGetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::InternalGetNextChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalGetNextChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.InternalFallback
bool System::Text::EncoderFallbackBuffer::InternalFallback(::Il2CppChar ch, ByRef<::Il2CppChar*> chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::InternalFallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ch, byref(chars));
}
// Autogenerated method: System.Text.EncoderFallbackBuffer.ThrowLastCharRecursive
void System::Text::EncoderFallbackBuffer::ThrowLastCharRecursive(int charRecursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderFallbackBuffer::ThrowLastCharRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowLastCharRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charRecursive)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, charRecursive);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.EncoderNLS
#include "System/Text/EncoderNLS.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Char _charLeftOver
[[deprecated("Use field access instead!")]] ::Il2CppChar& System::Text::EncoderNLS::dyn__charLeftOver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::dyn__charLeftOver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_charLeftOver"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.Encoding _encoding
[[deprecated("Use field access instead!")]] ::System::Text::Encoding*& System::Text::EncoderNLS::dyn__encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::dyn__encoding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_encoding"))->offset;
  return *reinterpret_cast<::System::Text::Encoding**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _mustFlush
[[deprecated("Use field access instead!")]] bool& System::Text::EncoderNLS::dyn__mustFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::dyn__mustFlush");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mustFlush"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean _throwOnOverflow
[[deprecated("Use field access instead!")]] bool& System::Text::EncoderNLS::dyn__throwOnOverflow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::dyn__throwOnOverflow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_throwOnOverflow"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 _charsUsed
[[deprecated("Use field access instead!")]] int& System::Text::EncoderNLS::dyn__charsUsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::dyn__charsUsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_charsUsed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.EncoderNLS.get_Encoding
::System::Text::Encoding* System::Text::EncoderNLS::get_Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::get_Encoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderNLS.get_MustFlush
bool System::Text::EncoderNLS::get_MustFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::get_MustFlush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MustFlush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderNLS.get_HasState
bool System::Text::EncoderNLS::get_HasState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::get_HasState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderNLS*), 11));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderNLS.ClearMustFlush
void System::Text::EncoderNLS::ClearMustFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::ClearMustFlush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMustFlush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderNLS.Reset
void System::Text::EncoderNLS::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderNLS.GetByteCount
int System::Text::EncoderNLS::GetByteCount(::ArrayW<::Il2CppChar> chars, int index, int count, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, index, count, flush);
}
// Autogenerated method: System.Text.EncoderNLS.GetByteCount
int System::Text::EncoderNLS::GetByteCount(::Il2CppChar* chars, int count, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count, flush);
}
// Autogenerated method: System.Text.EncoderNLS.GetBytes
int System::Text::EncoderNLS::GetBytes(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 7));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex, flush);
}
// Autogenerated method: System.Text.EncoderNLS.GetBytes
int System::Text::EncoderNLS::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, bool flush) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 8));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount, flush);
}
// Autogenerated method: System.Text.EncoderNLS.Convert
void System::Text::EncoderNLS::Convert(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, bool flush, ByRef<int> charsUsed, ByRef<int> bytesUsed, ByRef<bool> completed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::Convert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex, byteCount, flush, byref(charsUsed), byref(bytesUsed), byref(completed));
}
// Autogenerated method: System.Text.EncoderNLS.Convert
void System::Text::EncoderNLS::Convert(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, bool flush, ByRef<int> charsUsed, ByRef<int> bytesUsed, ByRef<bool> completed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderNLS::Convert");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoder*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, chars, charCount, bytes, byteCount, flush, byref(charsUsed), byref(bytesUsed), byref(completed));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.EncoderReplacementFallback
#include "System/Text/EncoderReplacementFallback.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Text.EncoderFallbackBuffer
#include "System/Text/EncoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _strDefault
[[deprecated("Use field access instead!")]] ::StringW& System::Text::EncoderReplacementFallback::dyn__strDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallback::dyn__strDefault");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strDefault"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.EncoderReplacementFallback.System.Runtime.Serialization.ISerializable.GetObjectData
void System::Text::EncoderReplacementFallback::System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallback::System.Runtime.Serialization.ISerializable.GetObjectData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderReplacementFallback*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Text.EncoderReplacementFallback.get_DefaultString
::StringW System::Text::EncoderReplacementFallback::get_DefaultString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallback::get_DefaultString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DefaultString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderReplacementFallback.CreateFallbackBuffer
::System::Text::EncoderFallbackBuffer* System::Text::EncoderReplacementFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallback*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::EncoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderReplacementFallback.get_MaxCharCount
int System::Text::EncoderReplacementFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallback*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderReplacementFallback.Equals
bool System::Text::EncoderReplacementFallback::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallback::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.EncoderReplacementFallback.GetHashCode
int System::Text::EncoderReplacementFallback::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallback::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.EncoderReplacementFallbackBuffer
#include "System/Text/EncoderReplacementFallbackBuffer.hpp"
// Including type: System.Text.EncoderReplacementFallback
#include "System/Text/EncoderReplacementFallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _strDefault
[[deprecated("Use field access instead!")]] ::StringW& System::Text::EncoderReplacementFallbackBuffer::dyn__strDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::dyn__strDefault");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strDefault"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _fallbackCount
[[deprecated("Use field access instead!")]] int& System::Text::EncoderReplacementFallbackBuffer::dyn__fallbackCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::dyn__fallbackCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallbackCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _fallbackIndex
[[deprecated("Use field access instead!")]] int& System::Text::EncoderReplacementFallbackBuffer::dyn__fallbackIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::dyn__fallbackIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fallbackIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.EncoderReplacementFallbackBuffer.Fallback
bool System::Text::EncoderReplacementFallbackBuffer::Fallback(::Il2CppChar charUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, charUnknown, index);
}
// Autogenerated method: System.Text.EncoderReplacementFallbackBuffer.Fallback
bool System::Text::EncoderReplacementFallbackBuffer::Fallback(::Il2CppChar charUnknownHigh, ::Il2CppChar charUnknownLow, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, charUnknownHigh, charUnknownLow, index);
}
// Autogenerated method: System.Text.EncoderReplacementFallbackBuffer.GetNextChar
::Il2CppChar System::Text::EncoderReplacementFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderReplacementFallbackBuffer.MovePrevious
bool System::Text::EncoderReplacementFallbackBuffer::MovePrevious() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::MovePrevious");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderReplacementFallbackBuffer.get_Remaining
int System::Text::EncoderReplacementFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 8));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncoderReplacementFallbackBuffer.Reset
void System::Text::EncoderReplacementFallbackBuffer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncoderReplacementFallbackBuffer::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderFallbackBuffer*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.EncodingNLS
#include "System/Text/EncodingNLS.hpp"
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Text.EncodingNLS.GetByteCount
int System::Text::EncodingNLS::GetByteCount(::ArrayW<::Il2CppChar> chars, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 13));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, index, count);
}
// Autogenerated method: System.Text.EncodingNLS.GetByteCount
int System::Text::EncodingNLS::GetByteCount(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
}
// Autogenerated method: System.Text.EncodingNLS.GetByteCount
int System::Text::EncodingNLS::GetByteCount(::Il2CppChar* chars, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 14));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count);
}
// Autogenerated method: System.Text.EncodingNLS.GetBytes
int System::Text::EncodingNLS::GetBytes(::StringW s, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 20));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.EncodingNLS.GetBytes
int System::Text::EncodingNLS::GetBytes(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 18));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.EncodingNLS.GetBytes
int System::Text::EncodingNLS::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 22));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount);
}
// Autogenerated method: System.Text.EncodingNLS.GetCharCount
int System::Text::EncodingNLS::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 23));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.EncodingNLS.GetCharCount
int System::Text::EncodingNLS::GetCharCount(uint8_t* bytes, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 24));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count);
}
// Autogenerated method: System.Text.EncodingNLS.GetChars
int System::Text::EncodingNLS::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 28));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex);
}
// Autogenerated method: System.Text.EncodingNLS.GetChars
int System::Text::EncodingNLS::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 29));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount);
}
// Autogenerated method: System.Text.EncodingNLS.GetString
::StringW System::Text::EncodingNLS::GetString(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.EncodingNLS.GetDecoder
::System::Text::Decoder* System::Text::EncodingNLS::GetDecoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetDecoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 33));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Decoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.EncodingNLS.GetEncoder
::System::Text::Encoder* System::Text::EncodingNLS::GetEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingNLS::GetEncoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 34));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoder*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.EncodingProvider
#include "System/Text/EncodingProvider.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Text.EncoderFallback
#include "System/Text/EncoderFallback.hpp"
// Including type: System.Text.DecoderFallback
#include "System/Text/DecoderFallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Object s_InternalSyncObject
::Il2CppObject* System::Text::EncodingProvider::_get_s_InternalSyncObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::_get_s_InternalSyncObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Text", "EncodingProvider", "s_InternalSyncObject"));
}
// Autogenerated static field setter
// Set static field: static private System.Object s_InternalSyncObject
void System::Text::EncodingProvider::_set_s_InternalSyncObject(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::_set_s_InternalSyncObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "EncodingProvider", "s_InternalSyncObject", value));
}
// Autogenerated static field getter
// Get static field: static private System.Text.EncodingProvider[] s_providers
::ArrayW<::System::Text::EncodingProvider*> System::Text::EncodingProvider::_get_s_providers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::_get_s_providers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::System::Text::EncodingProvider*>>("System.Text", "EncodingProvider", "s_providers"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.EncodingProvider[] s_providers
void System::Text::EncodingProvider::_set_s_providers(::ArrayW<::System::Text::EncodingProvider*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::_set_s_providers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "EncodingProvider", "s_providers", value));
}
// Autogenerated method: System.Text.EncodingProvider.GetEncoding
::System::Text::Encoding* System::Text::EncodingProvider::GetEncoding(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::GetEncoding");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncodingProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Text.EncodingProvider.GetEncoding
::System::Text::Encoding* System::Text::EncodingProvider::GetEncoding(int codepage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::GetEncoding");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncodingProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method, codepage);
}
// Autogenerated method: System.Text.EncodingProvider.GetEncoding
::System::Text::Encoding* System::Text::EncodingProvider::GetEncoding(::StringW name, ::System::Text::EncoderFallback* encoderFallback, ::System::Text::DecoderFallback* decoderFallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::GetEncoding");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncodingProvider*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method, name, encoderFallback, decoderFallback);
}
// Autogenerated method: System.Text.EncodingProvider.GetEncoding
::System::Text::Encoding* System::Text::EncodingProvider::GetEncoding(int codepage, ::System::Text::EncoderFallback* encoderFallback, ::System::Text::DecoderFallback* decoderFallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::GetEncoding");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncodingProvider*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(this, ___internal__method, codepage, encoderFallback, decoderFallback);
}
// Autogenerated method: System.Text.EncodingProvider.GetEncodingFromProvider
::System::Text::Encoding* System::Text::EncodingProvider::GetEncodingFromProvider(int codepage) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::GetEncodingFromProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "EncodingProvider", "GetEncodingFromProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(codepage)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, codepage);
}
// Autogenerated method: System.Text.EncodingProvider.GetEncodingFromProvider
::System::Text::Encoding* System::Text::EncodingProvider::GetEncodingFromProvider(::StringW encodingName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::GetEncodingFromProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "EncodingProvider", "GetEncodingFromProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(encodingName)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, encodingName);
}
// Autogenerated method: System.Text.EncodingProvider.GetEncodingFromProvider
::System::Text::Encoding* System::Text::EncodingProvider::GetEncodingFromProvider(int codepage, ::System::Text::EncoderFallback* enc, ::System::Text::DecoderFallback* dec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::GetEncodingFromProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "EncodingProvider", "GetEncodingFromProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(codepage), ::il2cpp_utils::ExtractType(enc), ::il2cpp_utils::ExtractType(dec)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, codepage, enc, dec);
}
// Autogenerated method: System.Text.EncodingProvider.GetEncodingFromProvider
::System::Text::Encoding* System::Text::EncodingProvider::GetEncodingFromProvider(::StringW encodingName, ::System::Text::EncoderFallback* enc, ::System::Text::DecoderFallback* dec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::GetEncodingFromProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "EncodingProvider", "GetEncodingFromProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(encodingName), ::il2cpp_utils::ExtractType(enc), ::il2cpp_utils::ExtractType(dec)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoding*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, encodingName, enc, dec);
}
// Autogenerated method: System.Text.EncodingProvider..cctor
void System::Text::EncodingProvider::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::EncodingProvider::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "EncodingProvider", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.Latin1Encoding
#include "System/Text/Latin1Encoding.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Text.EncoderNLS
#include "System/Text/EncoderNLS.hpp"
// Including type: System.Text.DecoderNLS
#include "System/Text/DecoderNLS.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Text.Latin1Encoding s_default
::System::Text::Latin1Encoding* System::Text::Latin1Encoding::_get_s_default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::_get_s_default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::Latin1Encoding*>("System.Text", "Latin1Encoding", "s_default"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.Latin1Encoding s_default
void System::Text::Latin1Encoding::_set_s_default(::System::Text::Latin1Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::_set_s_default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "Latin1Encoding", "s_default", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Char[] arrayCharBestFit
::ArrayW<::Il2CppChar> System::Text::Latin1Encoding::_get_arrayCharBestFit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::_get_arrayCharBestFit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::Il2CppChar>>("System.Text", "Latin1Encoding", "arrayCharBestFit"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Char[] arrayCharBestFit
void System::Text::Latin1Encoding::_set_arrayCharBestFit(::ArrayW<::Il2CppChar> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::_set_arrayCharBestFit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "Latin1Encoding", "arrayCharBestFit", value));
}
// Autogenerated method: System.Text.Latin1Encoding.System.Runtime.Serialization.ISerializable.GetObjectData
void System::Text::Latin1Encoding::System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::System.Runtime.Serialization.ISerializable.GetObjectData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Latin1Encoding*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Text.Latin1Encoding..cctor
void System::Text::Latin1Encoding::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "Latin1Encoding", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.Latin1Encoding.GetByteCount
int System::Text::Latin1Encoding::GetByteCount(::Il2CppChar* chars, int charCount, ::System::Text::EncoderNLS* encoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 15));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, encoder);
}
// Autogenerated method: System.Text.Latin1Encoding.GetBytes
int System::Text::Latin1Encoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, ::System::Text::EncoderNLS* encoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 21));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount, encoder);
}
// Autogenerated method: System.Text.Latin1Encoding.GetCharCount
int System::Text::Latin1Encoding::GetCharCount(uint8_t* bytes, int count, ::System::Text::DecoderNLS* decoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 25));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count, decoder);
}
// Autogenerated method: System.Text.Latin1Encoding.GetChars
int System::Text::Latin1Encoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, ::System::Text::DecoderNLS* decoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 30));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount, decoder);
}
// Autogenerated method: System.Text.Latin1Encoding.GetMaxByteCount
int System::Text::Latin1Encoding::GetMaxByteCount(int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::GetMaxByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 35));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, charCount);
}
// Autogenerated method: System.Text.Latin1Encoding.GetMaxCharCount
int System::Text::Latin1Encoding::GetMaxCharCount(int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::GetMaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 36));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byteCount);
}
// Autogenerated method: System.Text.Latin1Encoding.GetBestFitUnicodeToBytesData
::ArrayW<::Il2CppChar> System::Text::Latin1Encoding::GetBestFitUnicodeToBytesData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::Latin1Encoding::GetBestFitUnicodeToBytesData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 39));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Il2CppChar>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.NormalizationForm
#include "System/Text/NormalizationForm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Text.NormalizationForm FormC
::System::Text::NormalizationForm System::Text::NormalizationForm::_get_FormC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::_get_FormC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::NormalizationForm>("System.Text", "NormalizationForm", "FormC"));
}
// Autogenerated static field setter
// Set static field: static public System.Text.NormalizationForm FormC
void System::Text::NormalizationForm::_set_FormC(::System::Text::NormalizationForm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::_set_FormC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "NormalizationForm", "FormC", value));
}
// Autogenerated static field getter
// Get static field: static public System.Text.NormalizationForm FormD
::System::Text::NormalizationForm System::Text::NormalizationForm::_get_FormD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::_get_FormD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::NormalizationForm>("System.Text", "NormalizationForm", "FormD"));
}
// Autogenerated static field setter
// Set static field: static public System.Text.NormalizationForm FormD
void System::Text::NormalizationForm::_set_FormD(::System::Text::NormalizationForm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::_set_FormD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "NormalizationForm", "FormD", value));
}
// Autogenerated static field getter
// Get static field: static public System.Text.NormalizationForm FormKC
::System::Text::NormalizationForm System::Text::NormalizationForm::_get_FormKC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::_get_FormKC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::NormalizationForm>("System.Text", "NormalizationForm", "FormKC"));
}
// Autogenerated static field setter
// Set static field: static public System.Text.NormalizationForm FormKC
void System::Text::NormalizationForm::_set_FormKC(::System::Text::NormalizationForm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::_set_FormKC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "NormalizationForm", "FormKC", value));
}
// Autogenerated static field getter
// Get static field: static public System.Text.NormalizationForm FormKD
::System::Text::NormalizationForm System::Text::NormalizationForm::_get_FormKD() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::_get_FormKD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::NormalizationForm>("System.Text", "NormalizationForm", "FormKD"));
}
// Autogenerated static field setter
// Set static field: static public System.Text.NormalizationForm FormKD
void System::Text::NormalizationForm::_set_FormKD(::System::Text::NormalizationForm value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::_set_FormKD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "NormalizationForm", "FormKD", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& System::Text::NormalizationForm::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::NormalizationForm::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
// Including type: System.Span`1
#include "System/Span_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.ParamsArray
#include "System/ParamsArray.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Int32 DefaultCapacity
int System::Text::StringBuilder::_get_DefaultCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_get_DefaultCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Text", "StringBuilder", "DefaultCapacity"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 DefaultCapacity
void System::Text::StringBuilder::_set_DefaultCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_set_DefaultCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilder", "DefaultCapacity", value));
}
// Autogenerated static field getter
// Get static field: static private System.String CapacityField
::StringW System::Text::StringBuilder::_get_CapacityField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_get_CapacityField");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("System.Text", "StringBuilder", "CapacityField"));
}
// Autogenerated static field setter
// Set static field: static private System.String CapacityField
void System::Text::StringBuilder::_set_CapacityField(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_set_CapacityField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilder", "CapacityField", value));
}
// Autogenerated static field getter
// Get static field: static private System.String MaxCapacityField
::StringW System::Text::StringBuilder::_get_MaxCapacityField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_get_MaxCapacityField");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("System.Text", "StringBuilder", "MaxCapacityField"));
}
// Autogenerated static field setter
// Set static field: static private System.String MaxCapacityField
void System::Text::StringBuilder::_set_MaxCapacityField(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_set_MaxCapacityField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilder", "MaxCapacityField", value));
}
// Autogenerated static field getter
// Get static field: static private System.String StringValueField
::StringW System::Text::StringBuilder::_get_StringValueField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_get_StringValueField");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("System.Text", "StringBuilder", "StringValueField"));
}
// Autogenerated static field setter
// Set static field: static private System.String StringValueField
void System::Text::StringBuilder::_set_StringValueField(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_set_StringValueField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilder", "StringValueField", value));
}
// Autogenerated static field getter
// Get static field: static private System.String ThreadIDField
::StringW System::Text::StringBuilder::_get_ThreadIDField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_get_ThreadIDField");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("System.Text", "StringBuilder", "ThreadIDField"));
}
// Autogenerated static field setter
// Set static field: static private System.String ThreadIDField
void System::Text::StringBuilder::_set_ThreadIDField(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_set_ThreadIDField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilder", "ThreadIDField", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 MaxChunkSize
int System::Text::StringBuilder::_get_MaxChunkSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_get_MaxChunkSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Text", "StringBuilder", "MaxChunkSize"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 MaxChunkSize
void System::Text::StringBuilder::_set_MaxChunkSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_set_MaxChunkSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilder", "MaxChunkSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 IndexLimit
int System::Text::StringBuilder::_get_IndexLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_get_IndexLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Text", "StringBuilder", "IndexLimit"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 IndexLimit
void System::Text::StringBuilder::_set_IndexLimit(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_set_IndexLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilder", "IndexLimit", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 WidthLimit
int System::Text::StringBuilder::_get_WidthLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_get_WidthLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Text", "StringBuilder", "WidthLimit"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 WidthLimit
void System::Text::StringBuilder::_set_WidthLimit(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::_set_WidthLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilder", "WidthLimit", value));
}
// Autogenerated instance field getter
// Get instance field: System.Char[] m_ChunkChars
[[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& System::Text::StringBuilder::dyn_m_ChunkChars() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::dyn_m_ChunkChars");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChunkChars"))->offset;
  return *reinterpret_cast<::ArrayW<::Il2CppChar>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Text.StringBuilder m_ChunkPrevious
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& System::Text::StringBuilder::dyn_m_ChunkPrevious() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::dyn_m_ChunkPrevious");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChunkPrevious"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_ChunkLength
[[deprecated("Use field access instead!")]] int& System::Text::StringBuilder::dyn_m_ChunkLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::dyn_m_ChunkLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChunkLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_ChunkOffset
[[deprecated("Use field access instead!")]] int& System::Text::StringBuilder::dyn_m_ChunkOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::dyn_m_ChunkOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChunkOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_MaxCapacity
[[deprecated("Use field access instead!")]] int& System::Text::StringBuilder::dyn_m_MaxCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::dyn_m_MaxCapacity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxCapacity"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.StringBuilder.System.Runtime.Serialization.ISerializable.GetObjectData
void System::Text::StringBuilder::System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::System.Runtime.Serialization.ISerializable.GetObjectData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::StringBuilder*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Text.StringBuilder.get_Capacity
int System::Text::StringBuilder::get_Capacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::get_Capacity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.StringBuilder.set_Capacity
void System::Text::StringBuilder::set_Capacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::set_Capacity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.get_MaxCapacity
int System::Text::StringBuilder::get_MaxCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::get_MaxCapacity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxCapacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.StringBuilder.ToString
::StringW System::Text::StringBuilder::ToString(int startIndex, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::ToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, startIndex, length);
}
// Autogenerated method: System.Text.StringBuilder.Clear
::System::Text::StringBuilder* System::Text::StringBuilder::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.StringBuilder.get_Length
int System::Text::StringBuilder::get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::get_Length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.StringBuilder.set_Length
void System::Text::StringBuilder::set_Length(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::set_Length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.get_Chars
::Il2CppChar System::Text::StringBuilder::get_Chars(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::get_Chars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Chars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method, index);
}
// Autogenerated method: System.Text.StringBuilder.set_Chars
void System::Text::StringBuilder::set_Chars(int index, ::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::set_Chars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Chars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::Il2CppChar value, int repeatCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(repeatCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value, repeatCount);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::ArrayW<::Il2CppChar> value, int startIndex, int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(charCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value, startIndex, charCount);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.AppendHelper
void System::Text::StringBuilder::AppendHelper(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::StringW value, int startIndex, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value, startIndex, count);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::System::Text::StringBuilder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.AppendCore
::System::Text::StringBuilder* System::Text::StringBuilder::AppendCore(::System::Text::StringBuilder* value, int startIndex, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendCore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendCore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value, startIndex, count);
}
// Autogenerated method: System.Text.StringBuilder.AppendLine
::System::Text::StringBuilder* System::Text::StringBuilder::AppendLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.StringBuilder.AppendLine
::System::Text::StringBuilder* System::Text::StringBuilder::AppendLine(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.CopyTo
void System::Text::StringBuilder::CopyTo(int sourceIndex, ::System::Span_1<::Il2CppChar> destination, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::CopyTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceIndex), ::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sourceIndex, destination, count);
}
// Autogenerated method: System.Text.StringBuilder.Remove
::System::Text::StringBuilder* System::Text::StringBuilder::Remove(int startIndex, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, startIndex, length);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::ArrayW<::Il2CppChar> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::System::ReadOnlySpan_1<::Il2CppChar> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.StringBuilder.Insert
::System::Text::StringBuilder* System::Text::StringBuilder::Insert(int index, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Insert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, index, value);
}
// Autogenerated method: System.Text.StringBuilder.Insert
::System::Text::StringBuilder* System::Text::StringBuilder::Insert(int index, ::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Insert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, index, value);
}
// Autogenerated method: System.Text.StringBuilder.AppendFormat
::System::Text::StringBuilder* System::Text::StringBuilder::AppendFormat(::StringW format, ::Il2CppObject* arg0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, format, arg0);
}
// Autogenerated method: System.Text.StringBuilder.AppendFormat
::System::Text::StringBuilder* System::Text::StringBuilder::AppendFormat(::StringW format, ::Il2CppObject* arg0, ::Il2CppObject* arg1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, format, arg0, arg1);
}
// Autogenerated method: System.Text.StringBuilder.AppendFormat
::System::Text::StringBuilder* System::Text::StringBuilder::AppendFormat(::StringW format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, format, arg0, arg1, arg2);
}
// Autogenerated method: System.Text.StringBuilder.AppendFormat
::System::Text::StringBuilder* System::Text::StringBuilder::AppendFormat(::StringW format, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, format, args);
}
// Autogenerated method: System.Text.StringBuilder.AppendFormat
::System::Text::StringBuilder* System::Text::StringBuilder::AppendFormat(::System::IFormatProvider* provider, ::StringW format, ::Il2CppObject* arg0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, provider, format, arg0);
}
// Autogenerated method: System.Text.StringBuilder.AppendFormat
::System::Text::StringBuilder* System::Text::StringBuilder::AppendFormat(::System::IFormatProvider* provider, ::StringW format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, provider, format, arg0, arg1, arg2);
}
// Autogenerated method: System.Text.StringBuilder.FormatError
void System::Text::StringBuilder::FormatError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::FormatError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "StringBuilder", "FormatError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.StringBuilder.AppendFormatHelper
::System::Text::StringBuilder* System::Text::StringBuilder::AppendFormatHelper(::System::IFormatProvider* provider, ::StringW format, ::System::ParamsArray args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::AppendFormatHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendFormatHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, provider, format, args);
}
// Autogenerated method: System.Text.StringBuilder.Replace
::System::Text::StringBuilder* System::Text::StringBuilder::Replace(::StringW oldValue, ::StringW newValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Replace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Replace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldValue), ::il2cpp_utils::ExtractType(newValue)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, oldValue, newValue);
}
// Autogenerated method: System.Text.StringBuilder.Replace
::System::Text::StringBuilder* System::Text::StringBuilder::Replace(::StringW oldValue, ::StringW newValue, int startIndex, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Replace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Replace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldValue), ::il2cpp_utils::ExtractType(newValue), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, oldValue, newValue, startIndex, count);
}
// Autogenerated method: System.Text.StringBuilder.Append
::System::Text::StringBuilder* System::Text::StringBuilder::Append(::Il2CppChar* value, int valueCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(valueCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, value, valueCount);
}
// Autogenerated method: System.Text.StringBuilder.Insert
void System::Text::StringBuilder::Insert(int index, ::Il2CppChar* value, int valueCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Insert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(valueCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value, valueCount);
}
// Autogenerated method: System.Text.StringBuilder.ReplaceAllInChunk
void System::Text::StringBuilder::ReplaceAllInChunk(::ArrayW<int> replacements, int replacementsCount, ::System::Text::StringBuilder* sourceChunk, int removeCount, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::ReplaceAllInChunk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceAllInChunk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(replacements), ::il2cpp_utils::ExtractType(replacementsCount), ::il2cpp_utils::ExtractType(sourceChunk), ::il2cpp_utils::ExtractType(removeCount), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, replacements, replacementsCount, sourceChunk, removeCount, value);
}
// Autogenerated method: System.Text.StringBuilder.StartsWith
bool System::Text::StringBuilder::StartsWith(::System::Text::StringBuilder* chunk, int indexInChunk, int count, ::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::StartsWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartsWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chunk), ::il2cpp_utils::ExtractType(indexInChunk), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, chunk, indexInChunk, count, value);
}
// Autogenerated method: System.Text.StringBuilder.ReplaceInPlaceAtChunk
void System::Text::StringBuilder::ReplaceInPlaceAtChunk(ByRef<::System::Text::StringBuilder*> chunk, ByRef<int> indexInChunk, ::Il2CppChar* value, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::ReplaceInPlaceAtChunk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceInPlaceAtChunk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chunk), ::il2cpp_utils::ExtractType(indexInChunk), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(chunk), byref(indexInChunk), value, count);
}
// Autogenerated method: System.Text.StringBuilder.ThreadSafeCopy
void System::Text::StringBuilder::ThreadSafeCopy(::Il2CppChar* sourcePtr, ::ArrayW<::Il2CppChar> destination, int destinationIndex, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::ThreadSafeCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "StringBuilder", "ThreadSafeCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourcePtr), ::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(destinationIndex), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sourcePtr, destination, destinationIndex, count);
}
// Autogenerated method: System.Text.StringBuilder.ThreadSafeCopy
void System::Text::StringBuilder::ThreadSafeCopy(::ArrayW<::Il2CppChar> source, int sourceIndex, ::System::Span_1<::Il2CppChar> destination, int destinationIndex, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::ThreadSafeCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "StringBuilder", "ThreadSafeCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(sourceIndex), ::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(destinationIndex), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source, sourceIndex, destination, destinationIndex, count);
}
// Autogenerated method: System.Text.StringBuilder.FindChunkForIndex
::System::Text::StringBuilder* System::Text::StringBuilder::FindChunkForIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::FindChunkForIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindChunkForIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, index);
}
// Autogenerated method: System.Text.StringBuilder.get_RemainingCurrentChunk
::System::Span_1<::Il2CppChar> System::Text::StringBuilder::get_RemainingCurrentChunk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::get_RemainingCurrentChunk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RemainingCurrentChunk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Span_1<::Il2CppChar>, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.StringBuilder.Next
::System::Text::StringBuilder* System::Text::StringBuilder::Next(::System::Text::StringBuilder* chunk) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Next");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chunk)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(this, ___internal__method, chunk);
}
// Autogenerated method: System.Text.StringBuilder.ExpandByABlock
void System::Text::StringBuilder::ExpandByABlock(int minBlockCharCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::ExpandByABlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExpandByABlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(minBlockCharCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, minBlockCharCount);
}
// Autogenerated method: System.Text.StringBuilder.MakeRoom
void System::Text::StringBuilder::MakeRoom(int index, int count, ByRef<::System::Text::StringBuilder*> chunk, ByRef<int> indexInChunk, bool doNotMoveFollowingChars) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::MakeRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MakeRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractIndependentType<::System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(doNotMoveFollowingChars)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, count, byref(chunk), byref(indexInChunk), doNotMoveFollowingChars);
}
// Autogenerated method: System.Text.StringBuilder.Remove
void System::Text::StringBuilder::Remove(int startIndex, int count, ByRef<::System::Text::StringBuilder*> chunk, ByRef<int> indexInChunk) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractIndependentType<::System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, startIndex, count, byref(chunk), byref(indexInChunk));
}
// Autogenerated method: System.Text.StringBuilder.ToString
::StringW System::Text::StringBuilder::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilder::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.StringBuilderCache
#include "System/Text/StringBuilderCache.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.StringBuilder t_cachedInstance
::System::Text::StringBuilder* System::Text::StringBuilderCache::_get_t_cachedInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilderCache::_get_t_cachedInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::StringBuilder*>("System.Text", "StringBuilderCache", "t_cachedInstance"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.StringBuilder t_cachedInstance
void System::Text::StringBuilderCache::_set_t_cachedInstance(::System::Text::StringBuilder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilderCache::_set_t_cachedInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "StringBuilderCache", "t_cachedInstance", value));
}
// Autogenerated method: System.Text.StringBuilderCache.Acquire
::System::Text::StringBuilder* System::Text::StringBuilderCache::Acquire(int capacity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilderCache::Acquire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "StringBuilderCache", "Acquire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, capacity);
}
// Autogenerated method: System.Text.StringBuilderCache.Release
void System::Text::StringBuilderCache::Release(::System::Text::StringBuilder* sb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilderCache::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "StringBuilderCache", "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sb);
}
// Autogenerated method: System.Text.StringBuilderCache.GetStringAndRelease
::StringW System::Text::StringBuilderCache::GetStringAndRelease(::System::Text::StringBuilder* sb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::StringBuilderCache::GetStringAndRelease");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "StringBuilderCache", "GetStringAndRelease", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sb);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.UTF32Encoding
#include "System/Text/UTF32Encoding.hpp"
// Including type: System.Text.UTF32Encoding/UTF32Decoder
#include "System/Text/UTF32Encoding_UTF32Decoder.hpp"
// Including type: System.Text.EncoderNLS
#include "System/Text/EncoderNLS.hpp"
// Including type: System.Text.DecoderNLS
#include "System/Text/DecoderNLS.hpp"
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Text.UTF32Encoding s_default
::System::Text::UTF32Encoding* System::Text::UTF32Encoding::_get_s_default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::_get_s_default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::UTF32Encoding*>("System.Text", "UTF32Encoding", "s_default"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.UTF32Encoding s_default
void System::Text::UTF32Encoding::_set_s_default(::System::Text::UTF32Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::_set_s_default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UTF32Encoding", "s_default", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Text.UTF32Encoding s_bigEndianDefault
::System::Text::UTF32Encoding* System::Text::UTF32Encoding::_get_s_bigEndianDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::_get_s_bigEndianDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::UTF32Encoding*>("System.Text", "UTF32Encoding", "s_bigEndianDefault"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.UTF32Encoding s_bigEndianDefault
void System::Text::UTF32Encoding::_set_s_bigEndianDefault(::System::Text::UTF32Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::_set_s_bigEndianDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UTF32Encoding", "s_bigEndianDefault", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] s_bigEndianPreamble
::ArrayW<uint8_t> System::Text::UTF32Encoding::_get_s_bigEndianPreamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::_get_s_bigEndianPreamble");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint8_t>>("System.Text", "UTF32Encoding", "s_bigEndianPreamble"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] s_bigEndianPreamble
void System::Text::UTF32Encoding::_set_s_bigEndianPreamble(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::_set_s_bigEndianPreamble");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UTF32Encoding", "s_bigEndianPreamble", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] s_littleEndianPreamble
::ArrayW<uint8_t> System::Text::UTF32Encoding::_get_s_littleEndianPreamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::_get_s_littleEndianPreamble");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint8_t>>("System.Text", "UTF32Encoding", "s_littleEndianPreamble"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] s_littleEndianPreamble
void System::Text::UTF32Encoding::_set_s_littleEndianPreamble(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::_set_s_littleEndianPreamble");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UTF32Encoding", "s_littleEndianPreamble", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _emitUTF32ByteOrderMark
[[deprecated("Use field access instead!")]] bool& System::Text::UTF32Encoding::dyn__emitUTF32ByteOrderMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::dyn__emitUTF32ByteOrderMark");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitUTF32ByteOrderMark"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isThrowException
[[deprecated("Use field access instead!")]] bool& System::Text::UTF32Encoding::dyn__isThrowException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::dyn__isThrowException");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isThrowException"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _bigEndian
[[deprecated("Use field access instead!")]] bool& System::Text::UTF32Encoding::dyn__bigEndian() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::dyn__bigEndian");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bigEndian"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF32Encoding.GetSurrogate
uint System::Text::UTF32Encoding::GetSurrogate(::Il2CppChar cHigh, ::Il2CppChar cLow) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cHigh), ::il2cpp_utils::ExtractType(cLow)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, cHigh, cLow);
}
// Autogenerated method: System.Text.UTF32Encoding.GetHighSurrogate
::Il2CppChar System::Text::UTF32Encoding::GetHighSurrogate(uint iChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetHighSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHighSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iChar)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method, iChar);
}
// Autogenerated method: System.Text.UTF32Encoding.GetLowSurrogate
::Il2CppChar System::Text::UTF32Encoding::GetLowSurrogate(uint iChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetLowSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLowSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iChar)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method, iChar);
}
// Autogenerated method: System.Text.UTF32Encoding..cctor
void System::Text::UTF32Encoding::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "UTF32Encoding", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.UTF32Encoding.SetDefaultFallbacks
void System::Text::UTF32Encoding::SetDefaultFallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::SetDefaultFallbacks");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF32Encoding.GetByteCount
int System::Text::UTF32Encoding::GetByteCount(::ArrayW<::Il2CppChar> chars, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 13));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, index, count);
}
// Autogenerated method: System.Text.UTF32Encoding.GetByteCount
int System::Text::UTF32Encoding::GetByteCount(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
}
// Autogenerated method: System.Text.UTF32Encoding.GetByteCount
int System::Text::UTF32Encoding::GetByteCount(::Il2CppChar* chars, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 14));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count);
}
// Autogenerated method: System.Text.UTF32Encoding.GetBytes
int System::Text::UTF32Encoding::GetBytes(::StringW s, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 20));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.UTF32Encoding.GetBytes
int System::Text::UTF32Encoding::GetBytes(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 18));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.UTF32Encoding.GetBytes
int System::Text::UTF32Encoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 22));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount);
}
// Autogenerated method: System.Text.UTF32Encoding.GetCharCount
int System::Text::UTF32Encoding::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 23));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.UTF32Encoding.GetCharCount
int System::Text::UTF32Encoding::GetCharCount(uint8_t* bytes, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 24));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count);
}
// Autogenerated method: System.Text.UTF32Encoding.GetChars
int System::Text::UTF32Encoding::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 28));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex);
}
// Autogenerated method: System.Text.UTF32Encoding.GetChars
int System::Text::UTF32Encoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 29));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount);
}
// Autogenerated method: System.Text.UTF32Encoding.GetString
::StringW System::Text::UTF32Encoding::GetString(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.UTF32Encoding.GetByteCount
int System::Text::UTF32Encoding::GetByteCount(::Il2CppChar* chars, int count, ::System::Text::EncoderNLS* encoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 15));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count, encoder);
}
// Autogenerated method: System.Text.UTF32Encoding.GetBytes
int System::Text::UTF32Encoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, ::System::Text::EncoderNLS* encoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 21));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount, encoder);
}
// Autogenerated method: System.Text.UTF32Encoding.GetCharCount
int System::Text::UTF32Encoding::GetCharCount(uint8_t* bytes, int count, ::System::Text::DecoderNLS* baseDecoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 25));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count, baseDecoder);
}
// Autogenerated method: System.Text.UTF32Encoding.GetChars
int System::Text::UTF32Encoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, ::System::Text::DecoderNLS* baseDecoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 30));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount, baseDecoder);
}
// Autogenerated method: System.Text.UTF32Encoding.GetDecoder
::System::Text::Decoder* System::Text::UTF32Encoding::GetDecoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetDecoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 33));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Decoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF32Encoding.GetEncoder
::System::Text::Encoder* System::Text::UTF32Encoding::GetEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetEncoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 34));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF32Encoding.GetMaxByteCount
int System::Text::UTF32Encoding::GetMaxByteCount(int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetMaxByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 35));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, charCount);
}
// Autogenerated method: System.Text.UTF32Encoding.GetMaxCharCount
int System::Text::UTF32Encoding::GetMaxCharCount(int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetMaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 36));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byteCount);
}
// Autogenerated method: System.Text.UTF32Encoding.GetPreamble
::ArrayW<uint8_t> System::Text::UTF32Encoding::GetPreamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetPreamble");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF32Encoding.get_Preamble
::System::ReadOnlySpan_1<uint8_t> System::Text::UTF32Encoding::get_Preamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::get_Preamble");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF32Encoding.Equals
bool System::Text::UTF32Encoding::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.UTF32Encoding.GetHashCode
int System::Text::UTF32Encoding::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.UTF32Encoding/UTF32Decoder
#include "System/Text/UTF32Encoding_UTF32Decoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 iChar
[[deprecated("Use field access instead!")]] int& System::Text::UTF32Encoding::UTF32Decoder::dyn_iChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::UTF32Decoder::dyn_iChar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iChar"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 readByteCount
[[deprecated("Use field access instead!")]] int& System::Text::UTF32Encoding::UTF32Decoder::dyn_readByteCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::UTF32Decoder::dyn_readByteCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "readByteCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF32Encoding/UTF32Decoder.Reset
void System::Text::UTF32Encoding::UTF32Decoder::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::UTF32Decoder::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderNLS*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF32Encoding/UTF32Decoder.get_HasState
bool System::Text::UTF32Encoding::UTF32Decoder::get_HasState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF32Encoding::UTF32Decoder::get_HasState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderNLS*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.UTF7Encoding
#include "System/Text/UTF7Encoding.hpp"
// Including type: System.Text.UTF7Encoding/Decoder
#include "System/Text/UTF7Encoding_Decoder.hpp"
// Including type: System.Text.UTF7Encoding/Encoder
#include "System/Text/UTF7Encoding_Encoder.hpp"
// Including type: System.Text.UTF7Encoding/DecoderUTF7Fallback
#include "System/Text/UTF7Encoding_DecoderUTF7Fallback.hpp"
// Including type: System.Text.UTF7Encoding/DecoderUTF7FallbackBuffer
#include "System/Text/UTF7Encoding_DecoderUTF7FallbackBuffer.hpp"
// Including type: System.Text.EncoderNLS
#include "System/Text/EncoderNLS.hpp"
// Including type: System.Text.DecoderNLS
#include "System/Text/DecoderNLS.hpp"
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Text.UTF7Encoding s_default
::System::Text::UTF7Encoding* System::Text::UTF7Encoding::_get_s_default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::_get_s_default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::UTF7Encoding*>("System.Text", "UTF7Encoding", "s_default"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.UTF7Encoding s_default
void System::Text::UTF7Encoding::_set_s_default(::System::Text::UTF7Encoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::_set_s_default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UTF7Encoding", "s_default", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Byte[] _base64Bytes
[[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& System::Text::UTF7Encoding::dyn__base64Bytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::dyn__base64Bytes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_base64Bytes"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.SByte[] _base64Values
[[deprecated("Use field access instead!")]] ::ArrayW<int8_t>& System::Text::UTF7Encoding::dyn__base64Values() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::dyn__base64Values");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_base64Values"))->offset;
  return *reinterpret_cast<::ArrayW<int8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] _directEncode
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& System::Text::UTF7Encoding::dyn__directEncode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::dyn__directEncode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_directEncode"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _allowOptionals
[[deprecated("Use field access instead!")]] bool& System::Text::UTF7Encoding::dyn__allowOptionals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::dyn__allowOptionals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allowOptionals"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF7Encoding.MakeTables
void System::Text::UTF7Encoding::MakeTables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::MakeTables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MakeTables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding..cctor
void System::Text::UTF7Encoding::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "UTF7Encoding", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding.SetDefaultFallbacks
void System::Text::UTF7Encoding::SetDefaultFallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::SetDefaultFallbacks");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding.Equals
bool System::Text::UTF7Encoding::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.UTF7Encoding.GetHashCode
int System::Text::UTF7Encoding::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding.GetByteCount
int System::Text::UTF7Encoding::GetByteCount(::ArrayW<::Il2CppChar> chars, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 13));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, index, count);
}
// Autogenerated method: System.Text.UTF7Encoding.GetByteCount
int System::Text::UTF7Encoding::GetByteCount(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
}
// Autogenerated method: System.Text.UTF7Encoding.GetByteCount
int System::Text::UTF7Encoding::GetByteCount(::Il2CppChar* chars, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 14));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count);
}
// Autogenerated method: System.Text.UTF7Encoding.GetBytes
int System::Text::UTF7Encoding::GetBytes(::StringW s, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 20));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.UTF7Encoding.GetBytes
int System::Text::UTF7Encoding::GetBytes(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 18));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.UTF7Encoding.GetBytes
int System::Text::UTF7Encoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 22));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount);
}
// Autogenerated method: System.Text.UTF7Encoding.GetCharCount
int System::Text::UTF7Encoding::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 23));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.UTF7Encoding.GetCharCount
int System::Text::UTF7Encoding::GetCharCount(uint8_t* bytes, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 24));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count);
}
// Autogenerated method: System.Text.UTF7Encoding.GetChars
int System::Text::UTF7Encoding::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 28));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex);
}
// Autogenerated method: System.Text.UTF7Encoding.GetChars
int System::Text::UTF7Encoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 29));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount);
}
// Autogenerated method: System.Text.UTF7Encoding.GetString
::StringW System::Text::UTF7Encoding::GetString(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.UTF7Encoding.GetByteCount
int System::Text::UTF7Encoding::GetByteCount(::Il2CppChar* chars, int count, ::System::Text::EncoderNLS* baseEncoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 15));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count, baseEncoder);
}
// Autogenerated method: System.Text.UTF7Encoding.GetBytes
int System::Text::UTF7Encoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, ::System::Text::EncoderNLS* baseEncoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 21));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount, baseEncoder);
}
// Autogenerated method: System.Text.UTF7Encoding.GetCharCount
int System::Text::UTF7Encoding::GetCharCount(uint8_t* bytes, int count, ::System::Text::DecoderNLS* baseDecoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 25));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count, baseDecoder);
}
// Autogenerated method: System.Text.UTF7Encoding.GetChars
int System::Text::UTF7Encoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, ::System::Text::DecoderNLS* baseDecoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 30));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount, baseDecoder);
}
// Autogenerated method: System.Text.UTF7Encoding.GetDecoder
::System::Text::Decoder* System::Text::UTF7Encoding::GetDecoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetDecoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 33));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Decoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding.GetEncoder
::System::Text::Encoder* System::Text::UTF7Encoding::GetEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetEncoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 34));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding.GetMaxByteCount
int System::Text::UTF7Encoding::GetMaxByteCount(int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetMaxByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 35));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, charCount);
}
// Autogenerated method: System.Text.UTF7Encoding.GetMaxCharCount
int System::Text::UTF7Encoding::GetMaxCharCount(int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::GetMaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 36));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byteCount);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.UTF7Encoding/Decoder
#include "System/Text/UTF7Encoding_Decoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 bits
[[deprecated("Use field access instead!")]] int& System::Text::UTF7Encoding::Decoder::dyn_bits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Decoder::dyn_bits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bits"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 bitCount
[[deprecated("Use field access instead!")]] int& System::Text::UTF7Encoding::Decoder::dyn_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Decoder::dyn_bitCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bitCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean firstByte
[[deprecated("Use field access instead!")]] bool& System::Text::UTF7Encoding::Decoder::dyn_firstByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Decoder::dyn_firstByte");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "firstByte"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF7Encoding/Decoder.Reset
void System::Text::UTF7Encoding::Decoder::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Decoder::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderNLS*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding/Decoder.get_HasState
bool System::Text::UTF7Encoding::Decoder::get_HasState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Decoder::get_HasState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderNLS*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.UTF7Encoding/Encoder
#include "System/Text/UTF7Encoding_Encoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 bits
[[deprecated("Use field access instead!")]] int& System::Text::UTF7Encoding::Encoder::dyn_bits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Encoder::dyn_bits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bits"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 bitCount
[[deprecated("Use field access instead!")]] int& System::Text::UTF7Encoding::Encoder::dyn_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Encoder::dyn_bitCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bitCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF7Encoding/Encoder.Reset
void System::Text::UTF7Encoding::Encoder::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Encoder::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderNLS*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding/Encoder.get_HasState
bool System::Text::UTF7Encoding::Encoder::get_HasState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::Encoder::get_HasState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderNLS*), 11));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.UTF7Encoding/DecoderUTF7Fallback
#include "System/Text/UTF7Encoding_DecoderUTF7Fallback.hpp"
// Including type: System.Text.DecoderFallbackBuffer
#include "System/Text/DecoderFallbackBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7Fallback.CreateFallbackBuffer
::System::Text::DecoderFallbackBuffer* System::Text::UTF7Encoding::DecoderUTF7Fallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7Fallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::DecoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7Fallback.get_MaxCharCount
int System::Text::UTF7Encoding::DecoderUTF7Fallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7Fallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallback*), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7Fallback.Equals
bool System::Text::UTF7Encoding::DecoderUTF7Fallback::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7Fallback::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7Fallback.GetHashCode
int System::Text::UTF7Encoding::DecoderUTF7Fallback::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7Fallback::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.UTF7Encoding/DecoderUTF7FallbackBuffer
#include "System/Text/UTF7Encoding_DecoderUTF7FallbackBuffer.hpp"
// Including type: System.Text.UTF7Encoding/DecoderUTF7Fallback
#include "System/Text/UTF7Encoding_DecoderUTF7Fallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Char cFallback
[[deprecated("Use field access instead!")]] ::Il2CppChar& System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::dyn_cFallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::dyn_cFallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cFallback"))->offset;
  return *reinterpret_cast<::Il2CppChar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 iCount
[[deprecated("Use field access instead!")]] int& System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::dyn_iCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::dyn_iCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 iSize
[[deprecated("Use field access instead!")]] int& System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::dyn_iSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::dyn_iSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7FallbackBuffer.Fallback
bool System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::Fallback(::ArrayW<uint8_t> bytesUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, bytesUnknown, index);
}
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7FallbackBuffer.GetNextChar
::Il2CppChar System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7FallbackBuffer.get_Remaining
int System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7FallbackBuffer.Reset
void System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF7Encoding/DecoderUTF7FallbackBuffer.InternalFallback
int System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::InternalFallback(::ArrayW<uint8_t> bytes, uint8_t* pBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF7Encoding::DecoderUTF7FallbackBuffer::InternalFallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderFallbackBuffer*), 9));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, pBytes);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.UTF8Encoding
#include "System/Text/UTF8Encoding.hpp"
// Including type: System.Text.UTF8Encoding/UTF8EncodingSealed
#include "System/Text/UTF8Encoding_UTF8EncodingSealed.hpp"
// Including type: System.Text.UTF8Encoding/UTF8Encoder
#include "System/Text/UTF8Encoding_UTF8Encoder.hpp"
// Including type: System.Text.UTF8Encoding/UTF8Decoder
#include "System/Text/UTF8Encoding_UTF8Decoder.hpp"
// Including type: System.Text.DecoderFallbackBuffer
#include "System/Text/DecoderFallbackBuffer.hpp"
// Including type: System.Text.EncoderNLS
#include "System/Text/EncoderNLS.hpp"
// Including type: System.Text.DecoderNLS
#include "System/Text/DecoderNLS.hpp"
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Text.UTF8Encoding/UTF8EncodingSealed s_default
::System::Text::UTF8Encoding::UTF8EncodingSealed* System::Text::UTF8Encoding::_get_s_default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::_get_s_default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::UTF8Encoding::UTF8EncodingSealed*>("System.Text", "UTF8Encoding", "s_default"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.UTF8Encoding/UTF8EncodingSealed s_default
void System::Text::UTF8Encoding::_set_s_default(::System::Text::UTF8Encoding::UTF8EncodingSealed* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::_set_s_default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UTF8Encoding", "s_default", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Byte[] s_preamble
::ArrayW<uint8_t> System::Text::UTF8Encoding::_get_s_preamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::_get_s_preamble");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint8_t>>("System.Text", "UTF8Encoding", "s_preamble"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Byte[] s_preamble
void System::Text::UTF8Encoding::_set_s_preamble(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::_set_s_preamble");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UTF8Encoding", "s_preamble", value));
}
// Autogenerated instance field getter
// Get instance field: readonly System.Boolean _emitUTF8Identifier
[[deprecated("Use field access instead!")]] bool& System::Text::UTF8Encoding::dyn__emitUTF8Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::dyn__emitUTF8Identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitUTF8Identifier"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isThrowException
[[deprecated("Use field access instead!")]] bool& System::Text::UTF8Encoding::dyn__isThrowException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::dyn__isThrowException");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isThrowException"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF8Encoding.PtrDiff
int System::Text::UTF8Encoding::PtrDiff(::Il2CppChar* a, ::Il2CppChar* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::PtrDiff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "UTF8Encoding", "PtrDiff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: System.Text.UTF8Encoding.PtrDiff
int System::Text::UTF8Encoding::PtrDiff(uint8_t* a, uint8_t* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::PtrDiff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "UTF8Encoding", "PtrDiff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: System.Text.UTF8Encoding.InRange
bool System::Text::UTF8Encoding::InRange(int ch, int start, int end) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::InRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "UTF8Encoding", "InRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ch, start, end);
}
// Autogenerated method: System.Text.UTF8Encoding.FallbackInvalidByteSequence
bool System::Text::UTF8Encoding::FallbackInvalidByteSequence(ByRef<uint8_t*> pSrc, int ch, ::System::Text::DecoderFallbackBuffer* fallback, ByRef<::Il2CppChar*> pTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::FallbackInvalidByteSequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FallbackInvalidByteSequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(ch), ::il2cpp_utils::ExtractType(fallback), ::il2cpp_utils::ExtractType(pTarget)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(pSrc), ch, fallback, byref(pTarget));
}
// Autogenerated method: System.Text.UTF8Encoding.FallbackInvalidByteSequence
int System::Text::UTF8Encoding::FallbackInvalidByteSequence(uint8_t* pSrc, int ch, ::System::Text::DecoderFallbackBuffer* fallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::FallbackInvalidByteSequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FallbackInvalidByteSequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(ch), ::il2cpp_utils::ExtractType(fallback)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, pSrc, ch, fallback);
}
// Autogenerated method: System.Text.UTF8Encoding.GetBytesUnknown
::ArrayW<uint8_t> System::Text::UTF8Encoding::GetBytesUnknown(ByRef<uint8_t*> pSrc, int ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetBytesUnknown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBytesUnknown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method, byref(pSrc), ch);
}
// Autogenerated method: System.Text.UTF8Encoding..cctor
void System::Text::UTF8Encoding::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "UTF8Encoding", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.UTF8Encoding.SetDefaultFallbacks
void System::Text::UTF8Encoding::SetDefaultFallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::SetDefaultFallbacks");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF8Encoding.GetByteCount
int System::Text::UTF8Encoding::GetByteCount(::ArrayW<::Il2CppChar> chars, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 13));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, index, count);
}
// Autogenerated method: System.Text.UTF8Encoding.GetByteCount
int System::Text::UTF8Encoding::GetByteCount(::StringW chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars);
}
// Autogenerated method: System.Text.UTF8Encoding.GetByteCount
int System::Text::UTF8Encoding::GetByteCount(::Il2CppChar* chars, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 14));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count);
}
// Autogenerated method: System.Text.UTF8Encoding.GetBytes
int System::Text::UTF8Encoding::GetBytes(::StringW s, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 20));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.UTF8Encoding.GetBytes
int System::Text::UTF8Encoding::GetBytes(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 18));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.UTF8Encoding.GetBytes
int System::Text::UTF8Encoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 22));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount);
}
// Autogenerated method: System.Text.UTF8Encoding.GetCharCount
int System::Text::UTF8Encoding::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 23));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.UTF8Encoding.GetCharCount
int System::Text::UTF8Encoding::GetCharCount(uint8_t* bytes, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 24));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count);
}
// Autogenerated method: System.Text.UTF8Encoding.GetChars
int System::Text::UTF8Encoding::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 28));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex);
}
// Autogenerated method: System.Text.UTF8Encoding.GetChars
int System::Text::UTF8Encoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 29));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount);
}
// Autogenerated method: System.Text.UTF8Encoding.GetString
::StringW System::Text::UTF8Encoding::GetString(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.UTF8Encoding.GetByteCount
int System::Text::UTF8Encoding::GetByteCount(::Il2CppChar* chars, int count, ::System::Text::EncoderNLS* baseEncoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 15));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count, baseEncoder);
}
// Autogenerated method: System.Text.UTF8Encoding.GetBytes
int System::Text::UTF8Encoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, ::System::Text::EncoderNLS* baseEncoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 21));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount, baseEncoder);
}
// Autogenerated method: System.Text.UTF8Encoding.GetCharCount
int System::Text::UTF8Encoding::GetCharCount(uint8_t* bytes, int count, ::System::Text::DecoderNLS* baseDecoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 25));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count, baseDecoder);
}
// Autogenerated method: System.Text.UTF8Encoding.GetChars
int System::Text::UTF8Encoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, ::System::Text::DecoderNLS* baseDecoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 30));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount, baseDecoder);
}
// Autogenerated method: System.Text.UTF8Encoding.GetDecoder
::System::Text::Decoder* System::Text::UTF8Encoding::GetDecoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetDecoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 33));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Decoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF8Encoding.GetEncoder
::System::Text::Encoder* System::Text::UTF8Encoding::GetEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetEncoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 34));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF8Encoding.GetMaxByteCount
int System::Text::UTF8Encoding::GetMaxByteCount(int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetMaxByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 35));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, charCount);
}
// Autogenerated method: System.Text.UTF8Encoding.GetMaxCharCount
int System::Text::UTF8Encoding::GetMaxCharCount(int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetMaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 36));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byteCount);
}
// Autogenerated method: System.Text.UTF8Encoding.GetPreamble
::ArrayW<uint8_t> System::Text::UTF8Encoding::GetPreamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetPreamble");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF8Encoding.get_Preamble
::System::ReadOnlySpan_1<uint8_t> System::Text::UTF8Encoding::get_Preamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::get_Preamble");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF8Encoding.Equals
bool System::Text::UTF8Encoding::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.UTF8Encoding.GetHashCode
int System::Text::UTF8Encoding::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.UTF8Encoding/UTF8EncodingSealed
#include "System/Text/UTF8Encoding_UTF8EncodingSealed.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Text.UTF8Encoding/UTF8EncodingSealed.get_Preamble
::System::ReadOnlySpan_1<uint8_t> System::Text::UTF8Encoding::UTF8EncodingSealed::get_Preamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::UTF8EncodingSealed::get_Preamble");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::UTF8Encoding*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.UTF8Encoding/UTF8Encoder
#include "System/Text/UTF8Encoding_UTF8Encoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 surrogateChar
[[deprecated("Use field access instead!")]] int& System::Text::UTF8Encoding::UTF8Encoder::dyn_surrogateChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::UTF8Encoder::dyn_surrogateChar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "surrogateChar"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF8Encoding/UTF8Encoder.Reset
void System::Text::UTF8Encoding::UTF8Encoder::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::UTF8Encoder::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderNLS*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF8Encoding/UTF8Encoder.get_HasState
bool System::Text::UTF8Encoding::UTF8Encoder::get_HasState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::UTF8Encoder::get_HasState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::EncoderNLS*), 11));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Text.UTF8Encoding/UTF8Decoder
#include "System/Text/UTF8Encoding_UTF8Decoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 bits
[[deprecated("Use field access instead!")]] int& System::Text::UTF8Encoding::UTF8Decoder::dyn_bits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::UTF8Decoder::dyn_bits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bits"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UTF8Encoding/UTF8Decoder.Reset
void System::Text::UTF8Encoding::UTF8Decoder::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::UTF8Decoder::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderNLS*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UTF8Encoding/UTF8Decoder.get_HasState
bool System::Text::UTF8Encoding::UTF8Decoder::get_HasState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UTF8Encoding::UTF8Decoder::get_HasState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::DecoderNLS*), 14));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.UnicodeEncoding
#include "System/Text/UnicodeEncoding.hpp"
// Including type: System.Text.UnicodeEncoding/Decoder
#include "System/Text/UnicodeEncoding_Decoder.hpp"
// Including type: System.Text.EncoderNLS
#include "System/Text/EncoderNLS.hpp"
// Including type: System.Text.DecoderNLS
#include "System/Text/DecoderNLS.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
// Including type: System.Text.Decoder
#include "System/Text/Decoder.hpp"
// Including type: System.ReadOnlySpan`1
#include "System/ReadOnlySpan_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Text.UnicodeEncoding s_bigEndianDefault
::System::Text::UnicodeEncoding* System::Text::UnicodeEncoding::_get_s_bigEndianDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_get_s_bigEndianDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::UnicodeEncoding*>("System.Text", "UnicodeEncoding", "s_bigEndianDefault"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.UnicodeEncoding s_bigEndianDefault
void System::Text::UnicodeEncoding::_set_s_bigEndianDefault(::System::Text::UnicodeEncoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_set_s_bigEndianDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UnicodeEncoding", "s_bigEndianDefault", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Text.UnicodeEncoding s_littleEndianDefault
::System::Text::UnicodeEncoding* System::Text::UnicodeEncoding::_get_s_littleEndianDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_get_s_littleEndianDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::UnicodeEncoding*>("System.Text", "UnicodeEncoding", "s_littleEndianDefault"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Text.UnicodeEncoding s_littleEndianDefault
void System::Text::UnicodeEncoding::_set_s_littleEndianDefault(::System::Text::UnicodeEncoding* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_set_s_littleEndianDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UnicodeEncoding", "s_littleEndianDefault", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] s_bigEndianPreamble
::ArrayW<uint8_t> System::Text::UnicodeEncoding::_get_s_bigEndianPreamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_get_s_bigEndianPreamble");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint8_t>>("System.Text", "UnicodeEncoding", "s_bigEndianPreamble"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] s_bigEndianPreamble
void System::Text::UnicodeEncoding::_set_s_bigEndianPreamble(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_set_s_bigEndianPreamble");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UnicodeEncoding", "s_bigEndianPreamble", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] s_littleEndianPreamble
::ArrayW<uint8_t> System::Text::UnicodeEncoding::_get_s_littleEndianPreamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_get_s_littleEndianPreamble");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint8_t>>("System.Text", "UnicodeEncoding", "s_littleEndianPreamble"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] s_littleEndianPreamble
void System::Text::UnicodeEncoding::_set_s_littleEndianPreamble(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_set_s_littleEndianPreamble");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UnicodeEncoding", "s_littleEndianPreamble", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.UInt64 highLowPatternMask
uint64_t System::Text::UnicodeEncoding::_get_highLowPatternMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_get_highLowPatternMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("System.Text", "UnicodeEncoding", "highLowPatternMask"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt64 highLowPatternMask
void System::Text::UnicodeEncoding::_set_highLowPatternMask(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::_set_highLowPatternMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Text", "UnicodeEncoding", "highLowPatternMask", value));
}
// Autogenerated instance field getter
// Get instance field: System.Boolean isThrowException
[[deprecated("Use field access instead!")]] bool& System::Text::UnicodeEncoding::dyn_isThrowException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::dyn_isThrowException");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isThrowException"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean bigEndian
[[deprecated("Use field access instead!")]] bool& System::Text::UnicodeEncoding::dyn_bigEndian() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::dyn_bigEndian");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bigEndian"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean byteOrderMark
[[deprecated("Use field access instead!")]] bool& System::Text::UnicodeEncoding::dyn_byteOrderMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::dyn_byteOrderMark");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "byteOrderMark"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: System.Text.UnicodeEncoding..cctor
void System::Text::UnicodeEncoding::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Text", "UnicodeEncoding", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Text.UnicodeEncoding.SetDefaultFallbacks
void System::Text::UnicodeEncoding::SetDefaultFallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::SetDefaultFallbacks");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetByteCount
int System::Text::UnicodeEncoding::GetByteCount(::ArrayW<::Il2CppChar> chars, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 13));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, index, count);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetByteCount
int System::Text::UnicodeEncoding::GetByteCount(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 12));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetByteCount
int System::Text::UnicodeEncoding::GetByteCount(::Il2CppChar* chars, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 14));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetBytes
int System::Text::UnicodeEncoding::GetBytes(::StringW s, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 20));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetBytes
int System::Text::UnicodeEncoding::GetBytes(::ArrayW<::Il2CppChar> chars, int charIndex, int charCount, ::ArrayW<uint8_t> bytes, int byteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 18));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charIndex, charCount, bytes, byteIndex);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetBytes
int System::Text::UnicodeEncoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 22));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetCharCount
int System::Text::UnicodeEncoding::GetCharCount(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 23));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetCharCount
int System::Text::UnicodeEncoding::GetCharCount(uint8_t* bytes, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 24));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetChars
int System::Text::UnicodeEncoding::GetChars(::ArrayW<uint8_t> bytes, int byteIndex, int byteCount, ::ArrayW<::Il2CppChar> chars, int charIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 28));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteIndex, byteCount, chars, charIndex);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetChars
int System::Text::UnicodeEncoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 29));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetString
::StringW System::Text::UnicodeEncoding::GetString(::ArrayW<uint8_t> bytes, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, bytes, index, count);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetByteCount
int System::Text::UnicodeEncoding::GetByteCount(::Il2CppChar* chars, int count, ::System::Text::EncoderNLS* encoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 15));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, count, encoder);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetBytes
int System::Text::UnicodeEncoding::GetBytes(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, ::System::Text::EncoderNLS* encoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetBytes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 21));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, chars, charCount, bytes, byteCount, encoder);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetCharCount
int System::Text::UnicodeEncoding::GetCharCount(uint8_t* bytes, int count, ::System::Text::DecoderNLS* baseDecoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 25));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, count, baseDecoder);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetChars
int System::Text::UnicodeEncoding::GetChars(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, ::System::Text::DecoderNLS* baseDecoder) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetChars");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 30));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bytes, byteCount, chars, charCount, baseDecoder);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetEncoder
::System::Text::Encoder* System::Text::UnicodeEncoding::GetEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetEncoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 34));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Encoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetDecoder
::System::Text::Decoder* System::Text::UnicodeEncoding::GetDecoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetDecoder");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 33));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::Decoder*, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetPreamble
::ArrayW<uint8_t> System::Text::UnicodeEncoding::GetPreamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetPreamble");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UnicodeEncoding.get_Preamble
::System::ReadOnlySpan_1<uint8_t> System::Text::UnicodeEncoding::get_Preamble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::get_Preamble");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::System::ReadOnlySpan_1<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetMaxByteCount
int System::Text::UnicodeEncoding::GetMaxByteCount(int charCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetMaxByteCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 35));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, charCount);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetMaxCharCount
int System::Text::UnicodeEncoding::GetMaxCharCount(int byteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetMaxCharCount");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 36));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, byteCount);
}
// Autogenerated method: System.Text.UnicodeEncoding.Equals
bool System::Text::UnicodeEncoding::Equals(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Text.UnicodeEncoding.GetHashCode
int System::Text::UnicodeEncoding::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::UnicodeEncoding::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Text::Encoding*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
