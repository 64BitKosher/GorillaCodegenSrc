// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsoleInstance
#include "GlobalNamespace/DevConsoleInstance.hpp"
// Including type: GorillaDevButton
#include "GlobalNamespace/GorillaDevButton.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: DevConsole/DisplayedLogLine
#include "GlobalNamespace/DevConsole_DisplayedLogLine.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton[] buttons
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaDevButton*>& GlobalNamespace::DevConsoleInstance::dyn_buttons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_buttons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttons"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaDevButton*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] disableWhileActive
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::DevConsoleInstance::dyn_disableWhileActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_disableWhileActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableWhileActive"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] enableWhileActive
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::DevConsoleInstance::dyn_enableWhileActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_enableWhileActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableWhileActive"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsoleInstance::dyn_maxHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_maxHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lineHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsoleInstance::dyn_lineHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_lineHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 targetLogIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsoleInstance::dyn_targetLogIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_targetLogIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetLogIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 currentLogIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsoleInstance::dyn_currentLogIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_currentLogIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentLogIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 expandAmount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsoleInstance::dyn_expandAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_expandAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "expandAmount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 expandedMessageIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsoleInstance::dyn_expandedMessageIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_expandedMessageIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "expandedMessageIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canExpand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsoleInstance::dyn_canExpand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_canExpand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canExpand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<DevConsole/DisplayedLogLine> logLines
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>*& GlobalNamespace::DevConsoleInstance::dyn_logLines() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_logLines");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logLines"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.HashSet`1<UnityEngine.LogType> selectedLogTypes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::LogType>*& GlobalNamespace::DevConsoleInstance::dyn_selectedLogTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_selectedLogTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "selectedLogTypes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::UnityEngine::LogType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaDevButton[] logTypeButtons
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaDevButton*>& GlobalNamespace::DevConsoleInstance::dyn_logTypeButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_logTypeButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logTypeButtons"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaDevButton*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaDevButton BottomButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& GlobalNamespace::DevConsoleInstance::dyn_BottomButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_BottomButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BottomButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaDevButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lineStartHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsoleInstance::dyn_lineStartHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_lineStartHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineStartHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lineStartZ
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsoleInstance::dyn_lineStartZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_lineStartZ");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineStartZ"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single textStartHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsoleInstance::dyn_textStartHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_textStartHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textStartHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lineStartTextWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsoleInstance::dyn_lineStartTextWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_lineStartTextWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineStartTextWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double textScale
[[deprecated("Use field access instead!")]] double& GlobalNamespace::DevConsoleInstance::dyn_textScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_textScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textScale"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsoleInstance::dyn_isEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_isEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject ConsoleLineExample
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::DevConsoleInstance::dyn_ConsoleLineExample() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::dyn_ConsoleLineExample");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConsoleLineExample"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevConsoleInstance.OnEnable
void GlobalNamespace::DevConsoleInstance::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleInstance::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevErrorSoundAnnoyer
#include "GlobalNamespace/DevErrorSoundAnnoyer.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.Font
#include "UnityEngine/Font.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip errorSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::DevErrorSoundAnnoyer::dyn_errorSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevErrorSoundAnnoyer::dyn_errorSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "errorSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::DevErrorSoundAnnoyer::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevErrorSoundAnnoyer::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Text errorUIText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::DevErrorSoundAnnoyer::dyn_errorUIText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevErrorSoundAnnoyer::dyn_errorUIText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "errorUIText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Font errorFont
[[deprecated("Use field access instead!")]] ::UnityEngine::Font*& GlobalNamespace::DevErrorSoundAnnoyer::dyn_errorFont() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevErrorSoundAnnoyer::dyn_errorFont");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "errorFont"))->offset;
  return *reinterpret_cast<::UnityEngine::Font**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String displayedText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevErrorSoundAnnoyer::dyn_displayedText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevErrorSoundAnnoyer::dyn_displayedText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "displayedText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevInspectorColor
#include "GlobalNamespace/DevInspectorColor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.String <Color>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevInspectorColor::dyn_$Color$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorColor::dyn_$Color$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Color>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevInspectorColor.get_Color
::StringW GlobalNamespace::DevInspectorColor::get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorColor::get_Color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevInspectorHide
#include "GlobalNamespace/DevInspectorHide.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevInspectorShow
#include "GlobalNamespace/DevInspectorShow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevInspectorYellow
#include "GlobalNamespace/DevInspectorYellow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevInspectorCyan
#include "GlobalNamespace/DevInspectorCyan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ComponentMember
#include "GlobalNamespace/ComponentMember.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ComponentMember::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean <IsStarred>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ComponentMember::dyn_$IsStarred$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::dyn_$IsStarred$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsStarred>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String <Color>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ComponentMember::dyn_$Color$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::dyn_$Color$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Color>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Func`1<System.String> getValue
[[deprecated("Use field access instead!")]] ::System::Func_1<::StringW>*& GlobalNamespace::ComponentMember::dyn_getValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::dyn_getValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "getValue"))->offset;
  return *reinterpret_cast<::System::Func_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String computedPrefix
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ComponentMember::dyn_computedPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::dyn_computedPrefix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "computedPrefix"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String computedSuffix
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ComponentMember::dyn_computedSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::dyn_computedSuffix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "computedSuffix"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ComponentMember.get_Name
::StringW GlobalNamespace::ComponentMember::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ComponentMember.get_Value
::StringW GlobalNamespace::ComponentMember::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ComponentMember.get_IsStarred
bool GlobalNamespace::ComponentMember::get_IsStarred() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::get_IsStarred");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsStarred", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ComponentMember.get_Color
::StringW GlobalNamespace::ComponentMember::get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ComponentMember::get_Color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevInspector
#include "GlobalNamespace/DevInspector.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject pivot
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::DevInspector::dyn_pivot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::dyn_pivot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pivot"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text outputInfo
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::DevInspector::dyn_outputInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::dyn_outputInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outputInfo"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Component[] componentToInspect
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Component*>& GlobalNamespace::DevInspector::dyn_componentToInspect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::dyn_componentToInspect");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentToInspect"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Component*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevInspector::dyn_isEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::dyn_isEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean autoFind
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevInspector::dyn_autoFind() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::dyn_autoFind");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoFind"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject canvas
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::DevInspector::dyn_canvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::dyn_canvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canvas"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 sidewaysOffset
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevInspector::dyn_sidewaysOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::dyn_sidewaysOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sidewaysOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevInspector.OnEnable
void GlobalNamespace::DevInspector::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevInspectorManager
#include "GlobalNamespace/DevInspectorManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private DevInspectorManager _instance
::GlobalNamespace::DevInspectorManager* GlobalNamespace::DevInspectorManager::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorManager::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DevInspectorManager*>("", "DevInspectorManager", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private DevInspectorManager _instance
void GlobalNamespace::DevInspectorManager::_set__instance(::GlobalNamespace::DevInspectorManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorManager::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DevInspectorManager", "_instance", value));
}
// Autogenerated method: DevInspectorManager.get_instance
::GlobalNamespace::DevInspectorManager* GlobalNamespace::DevInspectorManager::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorManager::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DevInspectorManager", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::DevInspectorManager*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevInspectorScanner
#include "GlobalNamespace/DevInspectorScanner.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text hintTextOutput
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::DevInspectorScanner::dyn_hintTextOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorScanner::dyn_hintTextOutput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hintTextOutput"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scanDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevInspectorScanner::dyn_scanDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorScanner::dyn_scanDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scanDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scanAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevInspectorScanner::dyn_scanAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorScanner::dyn_scanAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scanAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask scanLayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::DevInspectorScanner::dyn_scanLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorScanner::dyn_scanLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scanLayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String targetComponentName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevInspectorScanner::dyn_targetComponentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorScanner::dyn_targetComponentName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetComponentName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rayPerDegree
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevInspectorScanner::dyn_rayPerDegree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspectorScanner::dyn_rayPerDegree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rayPerDegree"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FlagCauldronColorer
#include "GlobalNamespace/FlagCauldronColorer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public FlagCauldronColorer/ColorMode mode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlagCauldronColorer::ColorMode& GlobalNamespace::FlagCauldronColorer::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlagCauldronColorer::ColorMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform colorPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FlagCauldronColorer::dyn_colorPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::dyn_colorPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FlagCauldronColorer/ColorMode
#include "GlobalNamespace/FlagCauldronColorer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FlagCauldronColorer/ColorMode None
::GlobalNamespace::FlagCauldronColorer::ColorMode GlobalNamespace::FlagCauldronColorer::ColorMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FlagCauldronColorer::ColorMode>("", "FlagCauldronColorer/ColorMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public FlagCauldronColorer/ColorMode None
void GlobalNamespace::FlagCauldronColorer::ColorMode::_set_None(::GlobalNamespace::FlagCauldronColorer::ColorMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlagCauldronColorer/ColorMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public FlagCauldronColorer/ColorMode Red
::GlobalNamespace::FlagCauldronColorer::ColorMode GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Red() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Red");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FlagCauldronColorer::ColorMode>("", "FlagCauldronColorer/ColorMode", "Red"));
}
// Autogenerated static field setter
// Set static field: static public FlagCauldronColorer/ColorMode Red
void GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Red(::GlobalNamespace::FlagCauldronColorer::ColorMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Red");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlagCauldronColorer/ColorMode", "Red", value));
}
// Autogenerated static field getter
// Get static field: static public FlagCauldronColorer/ColorMode Green
::GlobalNamespace::FlagCauldronColorer::ColorMode GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Green() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Green");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FlagCauldronColorer::ColorMode>("", "FlagCauldronColorer/ColorMode", "Green"));
}
// Autogenerated static field setter
// Set static field: static public FlagCauldronColorer/ColorMode Green
void GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Green(::GlobalNamespace::FlagCauldronColorer::ColorMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Green");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlagCauldronColorer/ColorMode", "Green", value));
}
// Autogenerated static field getter
// Get static field: static public FlagCauldronColorer/ColorMode Blue
::GlobalNamespace::FlagCauldronColorer::ColorMode GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Blue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Blue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FlagCauldronColorer::ColorMode>("", "FlagCauldronColorer/ColorMode", "Blue"));
}
// Autogenerated static field setter
// Set static field: static public FlagCauldronColorer/ColorMode Blue
void GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Blue(::GlobalNamespace::FlagCauldronColorer::ColorMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Blue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlagCauldronColorer/ColorMode", "Blue", value));
}
// Autogenerated static field getter
// Get static field: static public FlagCauldronColorer/ColorMode Black
::GlobalNamespace::FlagCauldronColorer::ColorMode GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Black() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Black");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FlagCauldronColorer::ColorMode>("", "FlagCauldronColorer/ColorMode", "Black"));
}
// Autogenerated static field setter
// Set static field: static public FlagCauldronColorer/ColorMode Black
void GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Black(::GlobalNamespace::FlagCauldronColorer::ColorMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Black");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlagCauldronColorer/ColorMode", "Black", value));
}
// Autogenerated static field getter
// Get static field: static public FlagCauldronColorer/ColorMode Clear
::GlobalNamespace::FlagCauldronColorer::ColorMode GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_get_Clear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FlagCauldronColorer::ColorMode>("", "FlagCauldronColorer/ColorMode", "Clear"));
}
// Autogenerated static field setter
// Set static field: static public FlagCauldronColorer/ColorMode Clear
void GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Clear(::GlobalNamespace::FlagCauldronColorer::ColorMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::_set_Clear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlagCauldronColorer/ColorMode", "Clear", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FlagCauldronColorer::ColorMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FlagCauldronColorer::ColorMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FlattenerCrumb
#include "GlobalNamespace/FlattenerCrumb.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTShaderGlobals
#include "GlobalNamespace/GTShaderGlobals.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Camera gMainCamera
::UnityEngine::Camera* GlobalNamespace::GTShaderGlobals::_get_gMainCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get_gMainCamera");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Camera*>("", "GTShaderGlobals", "gMainCamera"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Camera gMainCamera
void GlobalNamespace::GTShaderGlobals::_set_gMainCamera(::UnityEngine::Camera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set_gMainCamera");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "gMainCamera", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Transform gMainCameraXform
::UnityEngine::Transform* GlobalNamespace::GTShaderGlobals::_get_gMainCameraXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get_gMainCameraXform");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Transform*>("", "GTShaderGlobals", "gMainCameraXform"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Transform gMainCameraXform
void GlobalNamespace::GTShaderGlobals::_set_gMainCameraXform(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set_gMainCameraXform");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "gMainCameraXform", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector3 gGameViewCameraPos
::UnityEngine::Vector3 GlobalNamespace::GTShaderGlobals::_get_gGameViewCameraPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get_gGameViewCameraPos");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "GTShaderGlobals", "gGameViewCameraPos"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector3 gGameViewCameraPos
void GlobalNamespace::GTShaderGlobals::_set_gGameViewCameraPos(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set_gGameViewCameraPos");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "gGameViewCameraPos", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Texture2D gBlueNoiseTex
::UnityEngine::Texture2D* GlobalNamespace::GTShaderGlobals::_get_gBlueNoiseTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get_gBlueNoiseTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Texture2D*>("", "GTShaderGlobals", "gBlueNoiseTex"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Texture2D gBlueNoiseTex
void GlobalNamespace::GTShaderGlobals::_set_gBlueNoiseTex(::UnityEngine::Texture2D* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set_gBlueNoiseTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "gBlueNoiseTex", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector4 gBlueNoiseTexWH
::UnityEngine::Vector4 GlobalNamespace::GTShaderGlobals::_get_gBlueNoiseTexWH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get_gBlueNoiseTexWH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector4>("", "GTShaderGlobals", "gBlueNoiseTexWH"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector4 gBlueNoiseTexWH
void GlobalNamespace::GTShaderGlobals::_set_gBlueNoiseTexWH(::UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set_gBlueNoiseTexWH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "gBlueNoiseTexWH", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 gIFrame
int GlobalNamespace::GTShaderGlobals::_get_gIFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get_gIFrame");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTShaderGlobals", "gIFrame"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 gIFrame
void GlobalNamespace::GTShaderGlobals::_set_gIFrame(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set_gIFrame");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "gIFrame", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _GT_WorldSpaceCameraPos
int GlobalNamespace::GTShaderGlobals::_get__GT_WorldSpaceCameraPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get__GT_WorldSpaceCameraPos");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTShaderGlobals", "_GT_WorldSpaceCameraPos"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _GT_WorldSpaceCameraPos
void GlobalNamespace::GTShaderGlobals::_set__GT_WorldSpaceCameraPos(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set__GT_WorldSpaceCameraPos");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "_GT_WorldSpaceCameraPos", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _GT_BlueNoiseTex
int GlobalNamespace::GTShaderGlobals::_get__GT_BlueNoiseTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get__GT_BlueNoiseTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTShaderGlobals", "_GT_BlueNoiseTex"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _GT_BlueNoiseTex
void GlobalNamespace::GTShaderGlobals::_set__GT_BlueNoiseTex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set__GT_BlueNoiseTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "_GT_BlueNoiseTex", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _GT_BlueNoiseTex_WH
int GlobalNamespace::GTShaderGlobals::_get__GT_BlueNoiseTex_WH() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get__GT_BlueNoiseTex_WH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTShaderGlobals", "_GT_BlueNoiseTex_WH"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _GT_BlueNoiseTex_WH
void GlobalNamespace::GTShaderGlobals::_set__GT_BlueNoiseTex_WH(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set__GT_BlueNoiseTex_WH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "_GT_BlueNoiseTex_WH", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _GT_iFrame
int GlobalNamespace::GTShaderGlobals::_get__GT_iFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_get__GT_iFrame");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTShaderGlobals", "_GT_iFrame"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _GT_iFrame
void GlobalNamespace::GTShaderGlobals::_set__GT_iFrame(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::_set__GT_iFrame");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderGlobals", "_GT_iFrame", value));
}
// Autogenerated method: GTShaderGlobals.Initialize
void GlobalNamespace::GTShaderGlobals::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTShaderGlobals", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTShaderGlobals.OnEnable
void GlobalNamespace::GTShaderGlobals::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTShaderGlobals.Update
void GlobalNamespace::GTShaderGlobals::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTShaderGlobals..cctor
void GlobalNamespace::GTShaderGlobals::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderGlobals::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTShaderGlobals", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaActionButton
#include "GlobalNamespace/GorillaActionButton.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onPress
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::GorillaActionButton::dyn_onPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaActionButton::dyn_onPress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPress"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaActionButton.ButtonActivation
void GlobalNamespace::GorillaActionButton::ButtonActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaActionButton::ButtonActivation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaSoundLookupAttribute
#include "GlobalNamespace/GorillaSoundLookupAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTBitOps
#include "GlobalNamespace/GTBitOps.hpp"
// Including type: GTBitOps/BitWriteInfo
#include "GlobalNamespace/GTBitOps_BitWriteInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GTBitOps.GetValueMask
int GlobalNamespace::GTBitOps::GetValueMask(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::GetValueMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "GetValueMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, count);
}
// Autogenerated method: GTBitOps.GetClearMask
int GlobalNamespace::GTBitOps::GetClearMask(int index, int valueMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::GetClearMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "GetClearMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(valueMask)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, index, valueMask);
}
// Autogenerated method: GTBitOps.GetClearMaskByCount
int GlobalNamespace::GTBitOps::GetClearMaskByCount(int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::GetClearMaskByCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "GetClearMaskByCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, index, count);
}
// Autogenerated method: GTBitOps.ReadBits
int GlobalNamespace::GTBitOps::ReadBits(int bits, int index, int valueMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::ReadBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "ReadBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(valueMask)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bits, index, valueMask);
}
// Autogenerated method: GTBitOps.ReadBits
int GlobalNamespace::GTBitOps::ReadBits(int bits, ::GlobalNamespace::GTBitOps::BitWriteInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::ReadBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "ReadBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(info)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bits, info);
}
// Autogenerated method: GTBitOps.ReadBitsByCount
int GlobalNamespace::GTBitOps::ReadBitsByCount(int bits, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::ReadBitsByCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "ReadBitsByCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bits, index, count);
}
// Autogenerated method: GTBitOps.ReadBit
bool GlobalNamespace::GTBitOps::ReadBit(int bits, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::ReadBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "ReadBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bits, index);
}
// Autogenerated method: GTBitOps.WriteBits
void GlobalNamespace::GTBitOps::WriteBits(ByRef<int> bits, ::GlobalNamespace::GTBitOps::BitWriteInfo info, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::WriteBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "WriteBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(bits), info, value);
}
// Autogenerated method: GTBitOps.WriteBits
int GlobalNamespace::GTBitOps::WriteBits_(int bits, ::GlobalNamespace::GTBitOps::BitWriteInfo info, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::WriteBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "WriteBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bits, info, value);
}
// Autogenerated method: GTBitOps.WriteBits
void GlobalNamespace::GTBitOps::WriteBits(ByRef<int> bits, int index, int valueMask, int clearMask, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::WriteBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "WriteBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(valueMask), ::il2cpp_utils::ExtractType(clearMask), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(bits), index, valueMask, clearMask, value);
}
// Autogenerated method: GTBitOps.WriteBits
int GlobalNamespace::GTBitOps::WriteBits_(int bits, int index, int valueMask, int clearMask, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::WriteBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "WriteBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(valueMask), ::il2cpp_utils::ExtractType(clearMask), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bits, index, valueMask, clearMask, value);
}
// Autogenerated method: GTBitOps.WriteBitsByCount
void GlobalNamespace::GTBitOps::WriteBitsByCount(ByRef<int> bits, int index, int count, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::WriteBitsByCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "WriteBitsByCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(bits), index, count, value);
}
// Autogenerated method: GTBitOps.WriteBitsByCount
int GlobalNamespace::GTBitOps::WriteBitsByCount_(int bits, int index, int count, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::WriteBitsByCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "WriteBitsByCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bits, index, count, value);
}
// Autogenerated method: GTBitOps.WriteBit
void GlobalNamespace::GTBitOps::WriteBit(ByRef<int> bits, int index, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::WriteBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "WriteBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(bits), index, value);
}
// Autogenerated method: GTBitOps.WriteBit
int GlobalNamespace::GTBitOps::WriteBit_(int bits, int index, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::WriteBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "WriteBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bits), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bits, index, value);
}
// Autogenerated method: GTBitOps.ToBinaryString
::StringW GlobalNamespace::GTBitOps::ToBinaryString(int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::ToBinaryString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTBitOps", "ToBinaryString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, number);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTBitOps/BitWriteInfo
#include "GlobalNamespace/GTBitOps_BitWriteInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 index
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTBitOps::BitWriteInfo::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::BitWriteInfo::dyn_index");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 valueMask
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTBitOps::BitWriteInfo::dyn_valueMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::BitWriteInfo::dyn_valueMask");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "valueMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 clearMask
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTBitOps::BitWriteInfo::dyn_clearMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::BitWriteInfo::dyn_clearMask");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clearMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GTBitOps/BitWriteInfo..ctor
GlobalNamespace::GTBitOps::BitWriteInfo::BitWriteInfo(int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBitOps::BitWriteInfo::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, count);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GTDev
#include "GlobalNamespace/GTDev.hpp"
// Including type: GTDev/HideInCallStackAttribute
#include "GlobalNamespace/GTDev_HideInCallStackAttribute.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: GTDev/<>c
#include "GlobalNamespace/GTDev_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Reflection.MethodBase
#include "System/Reflection/MethodBase.hpp"
// Including type: BuildSafe.SessionState
#include "BuildSafe/SessionState.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Diagnostics.StackTrace
#include "System/Diagnostics/StackTrace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Action`1<GTDev/LogEntry> OnLogEntry
::System::Action_1<::GlobalNamespace::GTDev::LogEntry>* GlobalNamespace::GTDev::_get_OnLogEntry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_get_OnLogEntry");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::GTDev::LogEntry>*>("", "GTDev", "OnLogEntry"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<GTDev/LogEntry> OnLogEntry
void GlobalNamespace::GTDev::_set_OnLogEntry(::System::Action_1<::GlobalNamespace::GTDev::LogEntry>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_set_OnLogEntry");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDev", "OnLogEntry", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 gDevID
int GlobalNamespace::GTDev::_get_gDevID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_get_gDevID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTDev", "gDevID"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 gDevID
void GlobalNamespace::GTDev::_set_gDevID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_set_gDevID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDev", "gDevID", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean gHasDevID
bool GlobalNamespace::GTDev::_get_gHasDevID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_get_gHasDevID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "GTDev", "gHasDevID"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean gHasDevID
void GlobalNamespace::GTDev::_set_gHasDevID(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_set_gHasDevID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDev", "gHasDevID", value));
}
// Autogenerated static field getter
// Get static field: static private System.String gProjectFolder
::StringW GlobalNamespace::GTDev::_get_gProjectFolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_get_gProjectFolder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "GTDev", "gProjectFolder"));
}
// Autogenerated static field setter
// Set static field: static private System.String gProjectFolder
void GlobalNamespace::GTDev::_set_gProjectFolder(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_set_gProjectFolder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDev", "gProjectFolder", value));
}
// Autogenerated static field getter
// Get static field: static private System.Reflection.FieldInfo gFetchProjectFolder
::System::Reflection::FieldInfo* GlobalNamespace::GTDev::_get_gFetchProjectFolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_get_gFetchProjectFolder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Reflection::FieldInfo*>("", "GTDev", "gFetchProjectFolder"));
}
// Autogenerated static field setter
// Set static field: static private System.Reflection.FieldInfo gFetchProjectFolder
void GlobalNamespace::GTDev::_set_gFetchProjectFolder(::System::Reflection::FieldInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_set_gFetchProjectFolder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDev", "gFetchProjectFolder", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean gProjectFolderSet
bool GlobalNamespace::GTDev::_get_gProjectFolderSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_get_gProjectFolderSet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "GTDev", "gProjectFolderSet"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean gProjectFolderSet
void GlobalNamespace::GTDev::_set_gProjectFolderSet(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_set_gProjectFolderSet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDev", "gProjectFolderSet", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<System.Reflection.MethodBase> gIgnoreMethods
::System::Collections::Generic::HashSet_1<::System::Reflection::MethodBase*>* GlobalNamespace::GTDev::_get_gIgnoreMethods() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_get_gIgnoreMethods");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::System::Reflection::MethodBase*>*>("", "GTDev", "gIgnoreMethods"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<System.Reflection.MethodBase> gIgnoreMethods
void GlobalNamespace::GTDev::_set_gIgnoreMethods(::System::Collections::Generic::HashSet_1<::System::Reflection::MethodBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_set_gIgnoreMethods");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDev", "gIgnoreMethods", value));
}
// Autogenerated static field getter
// Get static field: static public readonly BuildSafe.SessionState SessionState
::BuildSafe::SessionState* GlobalNamespace::GTDev::_get_SessionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_get_SessionState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::BuildSafe::SessionState*>("", "GTDev", "SessionState"));
}
// Autogenerated static field setter
// Set static field: static public readonly BuildSafe.SessionState SessionState
void GlobalNamespace::GTDev::_set_SessionState(::BuildSafe::SessionState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_set_SessionState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDev", "SessionState", value));
}
// Autogenerated method: GTDev.InitializeOnLoad
void GlobalNamespace::GTDev::InitializeOnLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::InitializeOnLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "InitializeOnLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTDev.Log
void GlobalNamespace::GTDev::Log(::StringW msg, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, channel);
}
// Autogenerated method: GTDev.Log
void GlobalNamespace::GTDev::Log(::StringW msg, ::UnityEngine::Object* context, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, context, channel);
}
// Autogenerated method: GTDev.LogError
void GlobalNamespace::GTDev::LogError(::StringW msg, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::LogError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, channel);
}
// Autogenerated method: GTDev.LogError
void GlobalNamespace::GTDev::LogError(::StringW msg, ::UnityEngine::Object* context, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::LogError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, context, channel);
}
// Autogenerated method: GTDev.LogWarning
void GlobalNamespace::GTDev::LogWarning(::StringW msg, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, channel);
}
// Autogenerated method: GTDev.LogWarning
void GlobalNamespace::GTDev::LogWarning(::StringW msg, ::UnityEngine::Object* context, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, context, channel);
}
// Autogenerated method: GTDev.LogSilent
void GlobalNamespace::GTDev::LogSilent(::StringW msg, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::LogSilent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "LogSilent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, channel);
}
// Autogenerated method: GTDev.LogSilent
void GlobalNamespace::GTDev::LogSilent(::StringW msg, ::UnityEngine::Object* context, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::LogSilent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "LogSilent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, context, channel);
}
// Autogenerated method: GTDev.LogEditorOnly
void GlobalNamespace::GTDev::LogEditorOnly(::StringW msg, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::LogEditorOnly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "LogEditorOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, channel);
}
// Autogenerated method: GTDev.LogEditorOnly
void GlobalNamespace::GTDev::LogEditorOnly(::StringW msg, ::UnityEngine::Object* context, ::StringW channel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::LogEditorOnly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "LogEditorOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(channel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, msg, context, channel);
}
// Autogenerated method: GTDev.CallEditorOnly
void GlobalNamespace::GTDev::CallEditorOnly(::System::Action* call) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::CallEditorOnly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "CallEditorOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(call)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, call);
}
// Autogenerated method: GTDev.add_OnLogEntry
void GlobalNamespace::GTDev::add_OnLogEntry(::System::Action_1<::GlobalNamespace::GTDev::LogEntry>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::add_OnLogEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "add_OnLogEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: GTDev.remove_OnLogEntry
void GlobalNamespace::GTDev::remove_OnLogEntry(::System::Action_1<::GlobalNamespace::GTDev::LogEntry>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::remove_OnLogEntry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "remove_OnLogEntry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: GTDev.get_DevID
int GlobalNamespace::GTDev::get_DevID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::get_DevID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "get_DevID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTDev.FetchDevID
int GlobalNamespace::GTDev::FetchDevID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::FetchDevID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "FetchDevID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTDev._Log
void GlobalNamespace::GTDev::_Log(::System::Action_1<::Il2CppObject*>* call, ::StringW msg, ::UnityEngine::Object* ctx, ::StringW chl, ::StringW clr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::_Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "_Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(call), ::il2cpp_utils::ExtractType(msg), ::il2cpp_utils::ExtractType(ctx), ::il2cpp_utils::ExtractType(chl), ::il2cpp_utils::ExtractType(clr)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, call, msg, ctx, chl, clr);
}
// Autogenerated method: GTDev.get_projectFolder
::StringW GlobalNamespace::GTDev::get_projectFolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::get_projectFolder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "get_projectFolder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTDev.CacheProjectFolder
void GlobalNamespace::GTDev::CacheProjectFolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::CacheProjectFolder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "CacheProjectFolder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTDev.IsIgnoredMethod
bool GlobalNamespace::GTDev::IsIgnoredMethod(::System::Reflection::MethodBase* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::IsIgnoredMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "IsIgnoredMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, method);
}
// Autogenerated method: GTDev.ExtractFormattedStackTrace
::StringW GlobalNamespace::GTDev::ExtractFormattedStackTrace(::System::Diagnostics::StackTrace* stackTrace) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::ExtractFormattedStackTrace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", "ExtractFormattedStackTrace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackTrace)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, stackTrace);
}
// Autogenerated method: GTDev..cctor
void GlobalNamespace::GTDev::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTDev/HideInCallStackAttribute
#include "GlobalNamespace/GTDev_HideInCallStackAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTDev/<>c
#include "GlobalNamespace/GTDev_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly GTDev/<>c <>9
::GlobalNamespace::GTDev::$$c* GlobalNamespace::GTDev::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDev::$$c*>("", "GTDev/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly GTDev/<>c <>9
void GlobalNamespace::GTDev::$$c::_set_$$9(::GlobalNamespace::GTDev::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "GTDev/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Reflection.FieldInfo,System.Boolean> <>9__28_0
::System::Func_2<::System::Reflection::FieldInfo*, bool>* GlobalNamespace::GTDev::$$c::_get_$$9__28_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::$$c::_get_$$9__28_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Reflection::FieldInfo*, bool>*>("", "GTDev/<>c", "<>9__28_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Reflection.FieldInfo,System.Boolean> <>9__28_0
void GlobalNamespace::GTDev::$$c::_set_$$9__28_0(::System::Func_2<::System::Reflection::FieldInfo*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::$$c::_set_$$9__28_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "GTDev/<>c", "<>9__28_0", value)));
}
// Autogenerated method: GTDev/<>c..cctor
void GlobalNamespace::GTDev::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDev/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTDev/<>c.<CacheProjectFolder>b__28_0
bool GlobalNamespace::GTDev::$$c::$CacheProjectFolder$b__28_0(::System::Reflection::FieldInfo* f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDev::$$c::<CacheProjectFolder>b__28_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CacheProjectFolder>b__28_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, f);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTDisableStaticOnAwake
#include "GlobalNamespace/GTDisableStaticOnAwake.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GTDisableStaticOnAwake.Awake
void GlobalNamespace::GTDisableStaticOnAwake::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDisableStaticOnAwake::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTDoor
#include "GlobalNamespace/GTDoor.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: GTDoorTrigger
#include "GlobalNamespace/GTDoorTrigger.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform doorTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GTDoor::dyn_doorTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_doorTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider[] doorColliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::GTDoor::dyn_doorColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_doorColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorColliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GTDoorTrigger[] doorButtonTriggers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTDoorTrigger*>& GlobalNamespace::GTDoor::dyn_doorButtonTriggers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_doorButtonTriggers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorButtonTriggers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GTDoorTrigger*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GTDoorTrigger[] doorHoldOpenTriggers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTDoorTrigger*>& GlobalNamespace::GTDoor::dyn_doorHoldOpenTriggers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_doorHoldOpenTriggers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorHoldOpenTriggers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GTDoorTrigger*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GTDoor::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip openSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::GTDoor::dyn_openSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_openSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "openSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip closeSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::GTDoor::dyn_closeSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_closeSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closeSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single doorOpenSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GTDoor::dyn_doorOpenSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_doorOpenSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorOpenSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single doorCloseSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GTDoor::dyn_doorCloseSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_doorCloseSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorCloseSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeUntilDoorCloses
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GTDoor::dyn_timeUntilDoorCloses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_timeUntilDoorCloses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeUntilDoorCloses"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GTDoor/DoorState currentState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTDoor::DoorState& GlobalNamespace::GTDoor::dyn_currentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_currentState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTDoor::DoorState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean beingHeldOpen
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GTDoor::dyn_beingHeldOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_beingHeldOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beingHeldOpen"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single tLastOpened
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GTDoor::dyn_tLastOpened() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_tLastOpened");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tLastOpened"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BoingKit.FloatSpring doorSpring
[[deprecated("Use field access instead!")]] ::BoingKit::FloatSpring& GlobalNamespace::GTDoor::dyn_doorSpring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_doorSpring");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorSpring"))->offset;
  return *reinterpret_cast<::BoingKit::FloatSpring*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single doorClosingWarningAdvanceNotice
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GTDoor::dyn_doorClosingWarningAdvanceNotice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_doorClosingWarningAdvanceNotice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorClosingWarningAdvanceNotice"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean peopleInHoldOpenVolume
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GTDoor::dyn_peopleInHoldOpenVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_peopleInHoldOpenVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "peopleInHoldOpenVolume"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean buttonTriggeredThisFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GTDoor::dyn_buttonTriggeredThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::dyn_buttonTriggeredThisFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonTriggeredThisFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GTDoor.Start
void GlobalNamespace::GTDoor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDoor.Update
void GlobalNamespace::GTDoor::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDoor.UpdateDoorState
void GlobalNamespace::GTDoor::UpdateDoorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::UpdateDoorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDoorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDoor.OpenDoor
void GlobalNamespace::GTDoor::OpenDoor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::OpenDoor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenDoor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDoor.CloseDoor
void GlobalNamespace::GTDoor::CloseDoor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::CloseDoor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CloseDoor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDoor.UpdateDoorAnimation
void GlobalNamespace::GTDoor::UpdateDoorAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::UpdateDoorAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDoorAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDoor.ResetDoorOpenedTime
void GlobalNamespace::GTDoor::ResetDoorOpenedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::ResetDoorOpenedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetDoorOpenedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDoor.ChangeDoorState
void GlobalNamespace::GTDoor::ChangeDoorState(::GlobalNamespace::GTDoor::DoorState shouldOpenState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::ChangeDoorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeDoorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shouldOpenState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, shouldOpenState);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTDoor/DoorState
#include "GlobalNamespace/GTDoor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTDoor/DoorState Closed
::GlobalNamespace::GTDoor::DoorState GlobalNamespace::GTDoor::DoorState::_get_Closed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_get_Closed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDoor::DoorState>("", "GTDoor/DoorState", "Closed"));
}
// Autogenerated static field setter
// Set static field: static public GTDoor/DoorState Closed
void GlobalNamespace::GTDoor::DoorState::_set_Closed(::GlobalNamespace::GTDoor::DoorState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_set_Closed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDoor/DoorState", "Closed", value));
}
// Autogenerated static field getter
// Get static field: static public GTDoor/DoorState ClosingWaitingOnRPC
::GlobalNamespace::GTDoor::DoorState GlobalNamespace::GTDoor::DoorState::_get_ClosingWaitingOnRPC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_get_ClosingWaitingOnRPC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDoor::DoorState>("", "GTDoor/DoorState", "ClosingWaitingOnRPC"));
}
// Autogenerated static field setter
// Set static field: static public GTDoor/DoorState ClosingWaitingOnRPC
void GlobalNamespace::GTDoor::DoorState::_set_ClosingWaitingOnRPC(::GlobalNamespace::GTDoor::DoorState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_set_ClosingWaitingOnRPC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDoor/DoorState", "ClosingWaitingOnRPC", value));
}
// Autogenerated static field getter
// Get static field: static public GTDoor/DoorState Closing
::GlobalNamespace::GTDoor::DoorState GlobalNamespace::GTDoor::DoorState::_get_Closing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_get_Closing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDoor::DoorState>("", "GTDoor/DoorState", "Closing"));
}
// Autogenerated static field setter
// Set static field: static public GTDoor/DoorState Closing
void GlobalNamespace::GTDoor::DoorState::_set_Closing(::GlobalNamespace::GTDoor::DoorState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_set_Closing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDoor/DoorState", "Closing", value));
}
// Autogenerated static field getter
// Get static field: static public GTDoor/DoorState Open
::GlobalNamespace::GTDoor::DoorState GlobalNamespace::GTDoor::DoorState::_get_Open() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_get_Open");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDoor::DoorState>("", "GTDoor/DoorState", "Open"));
}
// Autogenerated static field setter
// Set static field: static public GTDoor/DoorState Open
void GlobalNamespace::GTDoor::DoorState::_set_Open(::GlobalNamespace::GTDoor::DoorState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_set_Open");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDoor/DoorState", "Open", value));
}
// Autogenerated static field getter
// Get static field: static public GTDoor/DoorState OpeningWaitingOnRPC
::GlobalNamespace::GTDoor::DoorState GlobalNamespace::GTDoor::DoorState::_get_OpeningWaitingOnRPC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_get_OpeningWaitingOnRPC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDoor::DoorState>("", "GTDoor/DoorState", "OpeningWaitingOnRPC"));
}
// Autogenerated static field setter
// Set static field: static public GTDoor/DoorState OpeningWaitingOnRPC
void GlobalNamespace::GTDoor::DoorState::_set_OpeningWaitingOnRPC(::GlobalNamespace::GTDoor::DoorState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_set_OpeningWaitingOnRPC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDoor/DoorState", "OpeningWaitingOnRPC", value));
}
// Autogenerated static field getter
// Get static field: static public GTDoor/DoorState Opening
::GlobalNamespace::GTDoor::DoorState GlobalNamespace::GTDoor::DoorState::_get_Opening() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_get_Opening");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDoor::DoorState>("", "GTDoor/DoorState", "Opening"));
}
// Autogenerated static field setter
// Set static field: static public GTDoor/DoorState Opening
void GlobalNamespace::GTDoor::DoorState::_set_Opening(::GlobalNamespace::GTDoor::DoorState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_set_Opening");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDoor/DoorState", "Opening", value));
}
// Autogenerated static field getter
// Get static field: static public GTDoor/DoorState HeldOpen
::GlobalNamespace::GTDoor::DoorState GlobalNamespace::GTDoor::DoorState::_get_HeldOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_get_HeldOpen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDoor::DoorState>("", "GTDoor/DoorState", "HeldOpen"));
}
// Autogenerated static field setter
// Set static field: static public GTDoor/DoorState HeldOpen
void GlobalNamespace::GTDoor::DoorState::_set_HeldOpen(::GlobalNamespace::GTDoor::DoorState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_set_HeldOpen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDoor/DoorState", "HeldOpen", value));
}
// Autogenerated static field getter
// Get static field: static public GTDoor/DoorState HeldOpenLocally
::GlobalNamespace::GTDoor::DoorState GlobalNamespace::GTDoor::DoorState::_get_HeldOpenLocally() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_get_HeldOpenLocally");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDoor::DoorState>("", "GTDoor/DoorState", "HeldOpenLocally"));
}
// Autogenerated static field setter
// Set static field: static public GTDoor/DoorState HeldOpenLocally
void GlobalNamespace::GTDoor::DoorState::_set_HeldOpenLocally(::GlobalNamespace::GTDoor::DoorState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::_set_HeldOpenLocally");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDoor/DoorState", "HeldOpenLocally", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTDoor::DoorState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoor::DoorState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTDoorTrigger
#include "GlobalNamespace/GTDoorTrigger.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Playables.PlayableDirector timeline
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& GlobalNamespace::GTDoorTrigger::dyn_timeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::dyn_timeline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeline"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastTriggeredFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTDoorTrigger::dyn_lastTriggeredFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::dyn_lastTriggeredFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastTriggeredFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Collider> overlappingColliders
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& GlobalNamespace::GTDoorTrigger::dyn_overlappingColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::dyn_overlappingColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlappingColliders"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Collider*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GTDoorTrigger.get_overlapCount
int GlobalNamespace::GTDoorTrigger::get_overlapCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::get_overlapCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overlapCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: GTDoorTrigger.get_TriggeredThisFrame
bool GlobalNamespace::GTDoorTrigger::get_TriggeredThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::get_TriggeredThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TriggeredThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GTDoorTrigger.ValidateOverlappingColliders
void GlobalNamespace::GTDoorTrigger::ValidateOverlappingColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::ValidateOverlappingColliders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateOverlappingColliders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDoorTrigger.OnTriggerEnter
void GlobalNamespace::GTDoorTrigger::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: GTDoorTrigger.OnTriggerExit
void GlobalNamespace::GTDoorTrigger::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDoorTrigger::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTPosRotConstraintManager
#include "GlobalNamespace/GTPosRotConstraintManager.hpp"
// Including type: GTPosRotConstraints
#include "GlobalNamespace/GTPosRotConstraints.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTPosRotConstraintManager instance
::GlobalNamespace::GTPosRotConstraintManager* GlobalNamespace::GTPosRotConstraintManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTPosRotConstraintManager*>("", "GTPosRotConstraintManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public GTPosRotConstraintManager instance
void GlobalNamespace::GTPosRotConstraintManager::_set_instance(::GlobalNamespace::GTPosRotConstraintManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTPosRotConstraintManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::GTPosRotConstraintManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "GTPosRotConstraintManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::GTPosRotConstraintManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTPosRotConstraintManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _kComponentsCapacity
int GlobalNamespace::GTPosRotConstraintManager::_get__kComponentsCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_get__kComponentsCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTPosRotConstraintManager", "_kComponentsCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _kComponentsCapacity
void GlobalNamespace::GTPosRotConstraintManager::_set__kComponentsCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_set__kComponentsCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTPosRotConstraintManager", "_kComponentsCapacity", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _kConstraintsCapacity
int GlobalNamespace::GTPosRotConstraintManager::_get__kConstraintsCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_get__kConstraintsCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTPosRotConstraintManager", "_kConstraintsCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _kConstraintsCapacity
void GlobalNamespace::GTPosRotConstraintManager::_set__kConstraintsCapacity(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_set__kConstraintsCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTPosRotConstraintManager", "_kConstraintsCapacity", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<GorillaPosRotConstraint> constraints
::System::Collections::Generic::List_1<::GlobalNamespace::GorillaPosRotConstraint>* GlobalNamespace::GTPosRotConstraintManager::_get_constraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_get_constraints");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::GorillaPosRotConstraint>*>("", "GTPosRotConstraintManager", "constraints"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<GorillaPosRotConstraint> constraints
void GlobalNamespace::GTPosRotConstraintManager::_set_constraints(::System::Collections::Generic::List_1<::GlobalNamespace::GorillaPosRotConstraint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_set_constraints");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTPosRotConstraintManager", "constraints", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.Dictionary`2<System.Int32,GTPosRotConstraintManager/Range> componentRanges
::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::GTPosRotConstraintManager::Range>* GlobalNamespace::GTPosRotConstraintManager::_get_componentRanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_get_componentRanges");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::GTPosRotConstraintManager::Range>*>("", "GTPosRotConstraintManager", "componentRanges")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.Dictionary`2<System.Int32,GTPosRotConstraintManager/Range> componentRanges
void GlobalNamespace::GTPosRotConstraintManager::_set_componentRanges(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::GTPosRotConstraintManager::Range>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::_set_componentRanges");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTPosRotConstraintManager", "componentRanges", value));
}
// Autogenerated method: GTPosRotConstraintManager.Awake
void GlobalNamespace::GTPosRotConstraintManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTPosRotConstraintManager.OnDestroy
void GlobalNamespace::GTPosRotConstraintManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTPosRotConstraintManager.LateUpdate
void GlobalNamespace::GTPosRotConstraintManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTPosRotConstraintManager.CreateManager
void GlobalNamespace::GTPosRotConstraintManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTPosRotConstraintManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTPosRotConstraintManager.SetInstance
void GlobalNamespace::GTPosRotConstraintManager::SetInstance(::GlobalNamespace::GTPosRotConstraintManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTPosRotConstraintManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: GTPosRotConstraintManager.Register
void GlobalNamespace::GTPosRotConstraintManager::Register(::GlobalNamespace::GTPosRotConstraints* component) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTPosRotConstraintManager", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, component);
}
// Autogenerated method: GTPosRotConstraintManager.Unregister
void GlobalNamespace::GTPosRotConstraintManager::Unregister(::GlobalNamespace::GTPosRotConstraints* component) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTPosRotConstraintManager", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, component);
}
// Autogenerated method: GTPosRotConstraintManager..cctor
void GlobalNamespace::GTPosRotConstraintManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraintManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTPosRotConstraintManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTPosRotConstraints
#include "GlobalNamespace/GTPosRotConstraints.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaPosRotConstraint[] constraints
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaPosRotConstraint>& GlobalNamespace::GTPosRotConstraints::dyn_constraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::dyn_constraints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "constraints"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaPosRotConstraint>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GTPosRotConstraints::dyn_$IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::dyn_$IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GTPosRotConstraints.get_IsSpawned
bool GlobalNamespace::GTPosRotConstraints::get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTPosRotConstraints*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GTPosRotConstraints.set_IsSpawned
void GlobalNamespace::GTPosRotConstraints::set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTPosRotConstraints*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GTPosRotConstraints.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::GTPosRotConstraints::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTPosRotConstraints*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTPosRotConstraints.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::GTPosRotConstraints::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTPosRotConstraints*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTPosRotConstraints.OnEnable
void GlobalNamespace::GTPosRotConstraints::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTPosRotConstraints.OnDisable
void GlobalNamespace::GTPosRotConstraints::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTPosRotConstraints::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HoldableLeftHandReference
#include "GlobalNamespace/HoldableLeftHandReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HoldableRightHandReference
#include "GlobalNamespace/HoldableRightHandReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: JoinTriggerVisualState
#include "GlobalNamespace/JoinTriggerVisualState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JoinTriggerVisualState ConnectionError
::GlobalNamespace::JoinTriggerVisualState GlobalNamespace::JoinTriggerVisualState::_get_ConnectionError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_get_ConnectionError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::JoinTriggerVisualState>("", "JoinTriggerVisualState", "ConnectionError"));
}
// Autogenerated static field setter
// Set static field: static public JoinTriggerVisualState ConnectionError
void GlobalNamespace::JoinTriggerVisualState::_set_ConnectionError(::GlobalNamespace::JoinTriggerVisualState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_set_ConnectionError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "JoinTriggerVisualState", "ConnectionError", value));
}
// Autogenerated static field getter
// Get static field: static public JoinTriggerVisualState AlreadyInRoom
::GlobalNamespace::JoinTriggerVisualState GlobalNamespace::JoinTriggerVisualState::_get_AlreadyInRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_get_AlreadyInRoom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::JoinTriggerVisualState>("", "JoinTriggerVisualState", "AlreadyInRoom"));
}
// Autogenerated static field setter
// Set static field: static public JoinTriggerVisualState AlreadyInRoom
void GlobalNamespace::JoinTriggerVisualState::_set_AlreadyInRoom(::GlobalNamespace::JoinTriggerVisualState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_set_AlreadyInRoom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "JoinTriggerVisualState", "AlreadyInRoom", value));
}
// Autogenerated static field getter
// Get static field: static public JoinTriggerVisualState InPrivateRoom
::GlobalNamespace::JoinTriggerVisualState GlobalNamespace::JoinTriggerVisualState::_get_InPrivateRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_get_InPrivateRoom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::JoinTriggerVisualState>("", "JoinTriggerVisualState", "InPrivateRoom"));
}
// Autogenerated static field setter
// Set static field: static public JoinTriggerVisualState InPrivateRoom
void GlobalNamespace::JoinTriggerVisualState::_set_InPrivateRoom(::GlobalNamespace::JoinTriggerVisualState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_set_InPrivateRoom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "JoinTriggerVisualState", "InPrivateRoom", value));
}
// Autogenerated static field getter
// Get static field: static public JoinTriggerVisualState NotConnectedSoloJoin
::GlobalNamespace::JoinTriggerVisualState GlobalNamespace::JoinTriggerVisualState::_get_NotConnectedSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_get_NotConnectedSoloJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::JoinTriggerVisualState>("", "JoinTriggerVisualState", "NotConnectedSoloJoin"));
}
// Autogenerated static field setter
// Set static field: static public JoinTriggerVisualState NotConnectedSoloJoin
void GlobalNamespace::JoinTriggerVisualState::_set_NotConnectedSoloJoin(::GlobalNamespace::JoinTriggerVisualState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_set_NotConnectedSoloJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "JoinTriggerVisualState", "NotConnectedSoloJoin", value));
}
// Autogenerated static field getter
// Get static field: static public JoinTriggerVisualState LeaveRoomAndSoloJoin
::GlobalNamespace::JoinTriggerVisualState GlobalNamespace::JoinTriggerVisualState::_get_LeaveRoomAndSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_get_LeaveRoomAndSoloJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::JoinTriggerVisualState>("", "JoinTriggerVisualState", "LeaveRoomAndSoloJoin"));
}
// Autogenerated static field setter
// Set static field: static public JoinTriggerVisualState LeaveRoomAndSoloJoin
void GlobalNamespace::JoinTriggerVisualState::_set_LeaveRoomAndSoloJoin(::GlobalNamespace::JoinTriggerVisualState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_set_LeaveRoomAndSoloJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "JoinTriggerVisualState", "LeaveRoomAndSoloJoin", value));
}
// Autogenerated static field getter
// Get static field: static public JoinTriggerVisualState LeaveRoomAndPartyJoin
::GlobalNamespace::JoinTriggerVisualState GlobalNamespace::JoinTriggerVisualState::_get_LeaveRoomAndPartyJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_get_LeaveRoomAndPartyJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::JoinTriggerVisualState>("", "JoinTriggerVisualState", "LeaveRoomAndPartyJoin"));
}
// Autogenerated static field setter
// Set static field: static public JoinTriggerVisualState LeaveRoomAndPartyJoin
void GlobalNamespace::JoinTriggerVisualState::_set_LeaveRoomAndPartyJoin(::GlobalNamespace::JoinTriggerVisualState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_set_LeaveRoomAndPartyJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "JoinTriggerVisualState", "LeaveRoomAndPartyJoin", value));
}
// Autogenerated static field getter
// Get static field: static public JoinTriggerVisualState AbandonPartyAndSoloJoin
::GlobalNamespace::JoinTriggerVisualState GlobalNamespace::JoinTriggerVisualState::_get_AbandonPartyAndSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_get_AbandonPartyAndSoloJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::JoinTriggerVisualState>("", "JoinTriggerVisualState", "AbandonPartyAndSoloJoin"));
}
// Autogenerated static field setter
// Set static field: static public JoinTriggerVisualState AbandonPartyAndSoloJoin
void GlobalNamespace::JoinTriggerVisualState::_set_AbandonPartyAndSoloJoin(::GlobalNamespace::JoinTriggerVisualState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::_set_AbandonPartyAndSoloJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "JoinTriggerVisualState", "AbandonPartyAndSoloJoin", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::JoinTriggerVisualState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerVisualState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: JoinTriggerUI
#include "GlobalNamespace/JoinTriggerUI.hpp"
// Including type: GorillaNetworking.GorillaNetworkJoinTrigger
#include "GorillaNetworking/GorillaNetworkJoinTrigger.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: JoinTriggerUITemplate
#include "GlobalNamespace/JoinTriggerUITemplate.hpp"
// Including type: JoinTriggerVisualState
#include "GlobalNamespace/JoinTriggerVisualState.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private XSceneRef joinTriggerRef
[[deprecated("Use field access instead!")]] ::GlobalNamespace::XSceneRef& GlobalNamespace::JoinTriggerUI::dyn_joinTriggerRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_joinTriggerRef");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joinTriggerRef"))->offset;
  return *reinterpret_cast<::GlobalNamespace::XSceneRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaNetworking.GorillaNetworkJoinTrigger joinTrigger
[[deprecated("Use field access instead!")]] ::GorillaNetworking::GorillaNetworkJoinTrigger*& GlobalNamespace::JoinTriggerUI::dyn_joinTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_joinTrigger");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joinTrigger"))->offset;
  return *reinterpret_cast<::GorillaNetworking::GorillaNetworkJoinTrigger**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private XSceneRef milestoneRendererRef
[[deprecated("Use field access instead!")]] ::GlobalNamespace::XSceneRef& GlobalNamespace::JoinTriggerUI::dyn_milestoneRendererRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_milestoneRendererRef");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "milestoneRendererRef"))->offset;
  return *reinterpret_cast<::GlobalNamespace::XSceneRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer milestoneRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::JoinTriggerUI::dyn_milestoneRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_milestoneRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "milestoneRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private XSceneRef screenBGRendererRef
[[deprecated("Use field access instead!")]] ::GlobalNamespace::XSceneRef& GlobalNamespace::JoinTriggerUI::dyn_screenBGRendererRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_screenBGRendererRef");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "screenBGRendererRef"))->offset;
  return *reinterpret_cast<::GlobalNamespace::XSceneRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer screenBGRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::JoinTriggerUI::dyn_screenBGRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_screenBGRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "screenBGRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private XSceneRef screenTextRef
[[deprecated("Use field access instead!")]] ::GlobalNamespace::XSceneRef& GlobalNamespace::JoinTriggerUI::dyn_screenTextRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_screenTextRef");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "screenTextRef"))->offset;
  return *reinterpret_cast<::GlobalNamespace::XSceneRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Text screenText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::JoinTriggerUI::dyn_screenText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_screenText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "screenText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private JoinTriggerUITemplate template
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JoinTriggerUITemplate*& GlobalNamespace::JoinTriggerUI::dyn_template() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_template");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "template"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JoinTriggerUITemplate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean didStart
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::JoinTriggerUI::dyn_didStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::dyn_didStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didStart"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JoinTriggerUI.Awake
void GlobalNamespace::JoinTriggerUI::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: JoinTriggerUI.Start
void GlobalNamespace::JoinTriggerUI::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: JoinTriggerUI.OnEnable
void GlobalNamespace::JoinTriggerUI::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: JoinTriggerUI.OnDisable
void GlobalNamespace::JoinTriggerUI::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: JoinTriggerUI.SetState
void GlobalNamespace::JoinTriggerUI::SetState(::GlobalNamespace::JoinTriggerVisualState state, ::System::Func_1<::StringW>* oldRoom, ::System::Func_1<::StringW>* newRoom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUI::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(oldRoom), ::il2cpp_utils::ExtractType(newRoom)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state, oldRoom, newRoom);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: JoinTriggerUITemplate
#include "GlobalNamespace/JoinTriggerUITemplate.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material Milestone_Error
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_Error");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Milestone_Error"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material Milestone_AlreadyInRoom
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_AlreadyInRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_AlreadyInRoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Milestone_AlreadyInRoom"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material Milestone_InPrivateRoom
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_InPrivateRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_InPrivateRoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Milestone_InPrivateRoom"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material Milestone_NotConnectedSoloJoin
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_NotConnectedSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_NotConnectedSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Milestone_NotConnectedSoloJoin"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material Milestone_LeaveRoomAndSoloJoin
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_LeaveRoomAndSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_LeaveRoomAndSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Milestone_LeaveRoomAndSoloJoin"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material Milestone_LeaveRoomAndGroupJoin
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_LeaveRoomAndGroupJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_LeaveRoomAndGroupJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Milestone_LeaveRoomAndGroupJoin"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material Milestone_AbandonPartyAndSoloJoin
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_AbandonPartyAndSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_Milestone_AbandonPartyAndSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Milestone_AbandonPartyAndSoloJoin"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material ScreenBG_Error
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_Error");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenBG_Error"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material ScreenBG_AlreadyInRoom
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_AlreadyInRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_AlreadyInRoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenBG_AlreadyInRoom"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material ScreenBG_InPrivateRoom
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_InPrivateRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_InPrivateRoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenBG_InPrivateRoom"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material ScreenBG_NotConnectedSoloJoin
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_NotConnectedSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_NotConnectedSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenBG_NotConnectedSoloJoin"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material ScreenBG_LeaveRoomAndSoloJoin
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_LeaveRoomAndSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_LeaveRoomAndSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenBG_LeaveRoomAndSoloJoin"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material ScreenBG_LeaveRoomAndGroupJoin
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_LeaveRoomAndGroupJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_LeaveRoomAndGroupJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenBG_LeaveRoomAndGroupJoin"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material ScreenBG_AbandonPartyAndSoloJoin
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_AbandonPartyAndSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenBG_AbandonPartyAndSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenBG_AbandonPartyAndSoloJoin"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String ScreenText_Error
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_Error");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenText_Error"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean showFullErrorMessages
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::JoinTriggerUITemplate::dyn_showFullErrorMessages() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_showFullErrorMessages");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showFullErrorMessages"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public JoinTriggerUITemplate/FormattedString ScreenText_AlreadyInRoom
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JoinTriggerUITemplate::FormattedString& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_AlreadyInRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_AlreadyInRoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenText_AlreadyInRoom"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JoinTriggerUITemplate::FormattedString*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public JoinTriggerUITemplate/FormattedString ScreenText_InPrivateRoom
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JoinTriggerUITemplate::FormattedString& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_InPrivateRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_InPrivateRoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenText_InPrivateRoom"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JoinTriggerUITemplate::FormattedString*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public JoinTriggerUITemplate/FormattedString ScreenText_NotConnectedSoloJoin
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JoinTriggerUITemplate::FormattedString& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_NotConnectedSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_NotConnectedSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenText_NotConnectedSoloJoin"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JoinTriggerUITemplate::FormattedString*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public JoinTriggerUITemplate/FormattedString ScreenText_LeaveRoomAndSoloJoin
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JoinTriggerUITemplate::FormattedString& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_LeaveRoomAndSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_LeaveRoomAndSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenText_LeaveRoomAndSoloJoin"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JoinTriggerUITemplate::FormattedString*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public JoinTriggerUITemplate/FormattedString ScreenText_LeaveRoomAndGroupJoin
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JoinTriggerUITemplate::FormattedString& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_LeaveRoomAndGroupJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_LeaveRoomAndGroupJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenText_LeaveRoomAndGroupJoin"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JoinTriggerUITemplate::FormattedString*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public JoinTriggerUITemplate/FormattedString ScreenText_AbandonPartyAndSoloJoin
[[deprecated("Use field access instead!")]] ::GlobalNamespace::JoinTriggerUITemplate::FormattedString& GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_AbandonPartyAndSoloJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::dyn_ScreenText_AbandonPartyAndSoloJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ScreenText_AbandonPartyAndSoloJoin"))->offset;
  return *reinterpret_cast<::GlobalNamespace::JoinTriggerUITemplate::FormattedString*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: JoinTriggerUITemplate/FormattedString
#include "GlobalNamespace/JoinTriggerUITemplate.hpp"
// Including type: StringFormatter
#include "GlobalNamespace/StringFormatter.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String formatText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::JoinTriggerUITemplate::FormattedString::dyn_formatText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::FormattedString::dyn_formatText");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "formatText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private StringFormatter formatter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StringFormatter*& GlobalNamespace::JoinTriggerUITemplate::FormattedString::dyn_formatter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::FormattedString::dyn_formatter");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "formatter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StringFormatter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JoinTriggerUITemplate/FormattedString.GetText
::StringW GlobalNamespace::JoinTriggerUITemplate::FormattedString::GetText(::StringW oldRoom, ::StringW newRoom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::FormattedString::GetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldRoom), ::il2cpp_utils::ExtractType(newRoom)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, oldRoom, newRoom);
}
// Autogenerated method: JoinTriggerUITemplate/FormattedString.GetText
::StringW GlobalNamespace::JoinTriggerUITemplate::FormattedString::GetText(::System::Func_1<::StringW>* oldRoom, ::System::Func_1<::StringW>* newRoom) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::JoinTriggerUITemplate::FormattedString::GetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldRoom), ::il2cpp_utils::ExtractType(newRoom)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, oldRoom, newRoom);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LocalActivateOnDateRange
#include "GlobalNamespace/LocalActivateOnDateRange.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 activationYear
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_activationYear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_activationYear");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationYear"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 activationMonth
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_activationMonth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_activationMonth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationMonth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 activationDay
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_activationDay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_activationDay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationDay"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 activationHour
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_activationHour() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_activationHour");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationHour"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 activationMinute
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_activationMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_activationMinute");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationMinute"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 activationSecond
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_activationSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_activationSecond");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationSecond"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 deactivationYear
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationYear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationYear");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivationYear"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 deactivationMonth
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationMonth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationMonth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivationMonth"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 deactivationDay
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationDay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationDay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivationDay"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 deactivationHour
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationHour() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationHour");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivationHour"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 deactivationMinute
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationMinute");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivationMinute"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 deactivationSecond
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationSecond");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivationSecond"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] gameObjectsToActivate
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::LocalActivateOnDateRange::dyn_gameObjectsToActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_gameObjectsToActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObjectsToActivate"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isActive
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LocalActivateOnDateRange::dyn_isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_isActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime activationTime
[[deprecated("Use field access instead!")]] ::System::DateTime& GlobalNamespace::LocalActivateOnDateRange::dyn_activationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_activationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationTime"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime deactivationTime
[[deprecated("Use field access instead!")]] ::System::DateTime& GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_deactivationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deactivationTime"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double dbgTimeUntilActivation
[[deprecated("Use field access instead!")]] double& GlobalNamespace::LocalActivateOnDateRange::dyn_dbgTimeUntilActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_dbgTimeUntilActivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbgTimeUntilActivation"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double dbgTimeUntilDeactivation
[[deprecated("Use field access instead!")]] double& GlobalNamespace::LocalActivateOnDateRange::dyn_dbgTimeUntilDeactivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::dyn_dbgTimeUntilDeactivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dbgTimeUntilDeactivation"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LocalActivateOnDateRange.Awake
void GlobalNamespace::LocalActivateOnDateRange::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalActivateOnDateRange.OnEnable
void GlobalNamespace::LocalActivateOnDateRange::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalActivateOnDateRange.InitActiveTimes
void GlobalNamespace::LocalActivateOnDateRange::InitActiveTimes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::InitActiveTimes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitActiveTimes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalActivateOnDateRange.LateUpdate
void GlobalNamespace::LocalActivateOnDateRange::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalActivateOnDateRange::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LocalChestController
#include "GlobalNamespace/LocalChestController.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: MazePlayerCollection
#include "GlobalNamespace/MazePlayerCollection.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Playables.PlayableDirector director
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& GlobalNamespace::LocalChestController::dyn_director() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalChestController::dyn_director");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "director"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MazePlayerCollection playerCollectionVolume
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MazePlayerCollection*& GlobalNamespace::LocalChestController::dyn_playerCollectionVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalChestController::dyn_playerCollectionVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerCollectionVolume"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MazePlayerCollection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isOpen
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LocalChestController::dyn_isOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalChestController::dyn_isOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isOpen"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LocalChestController.OnTriggerEnter
void GlobalNamespace::LocalChestController::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocalChestController::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MirrorCameraScript
#include "GlobalNamespace/MirrorCameraScript.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Camera mainCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::MirrorCameraScript::dyn_mainCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::dyn_mainCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mainCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Camera mirrorCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::MirrorCameraScript::dyn_mirrorCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::dyn_mirrorCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mirrorCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MirrorCameraScript.Start
void GlobalNamespace::MirrorCameraScript::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirrorCameraScript.OnDestroy
void GlobalNamespace::MirrorCameraScript::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirrorCameraScript.MirrorCullingMaskChanged
void GlobalNamespace::MirrorCameraScript::MirrorCullingMaskChanged(int newMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::MirrorCullingMaskChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorCullingMaskChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newMask)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newMask);
}
// Autogenerated method: MirrorCameraScript.LateUpdate
void GlobalNamespace::MirrorCameraScript::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirrorCameraScript.CalculateReflectionMatrix
void GlobalNamespace::MirrorCameraScript::CalculateReflectionMatrix(ByRef<::UnityEngine::Matrix4x4> reflectionMatrix, ::UnityEngine::Vector4 plane) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::CalculateReflectionMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateReflectionMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reflectionMatrix), ::il2cpp_utils::ExtractType(plane)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(reflectionMatrix), plane);
}
// Autogenerated method: MirrorCameraScript.CameraSpacePlane
::UnityEngine::Vector4 GlobalNamespace::MirrorCameraScript::CameraSpacePlane(::UnityEngine::Camera* cam, ::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 normal, float sideSign) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirrorCameraScript::CameraSpacePlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CameraSpacePlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cam), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(sideSign)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector4, false>(this, ___internal__method, cam, pos, normal, sideSign);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ObjectHierarchyFlattener
#include "GlobalNamespace/ObjectHierarchyFlattener.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: FlattenerCrumb
#include "GlobalNamespace/FlattenerCrumb.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject originalParentGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::ObjectHierarchyFlattener::dyn_originalParentGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::dyn_originalParentGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalParentGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform originalParentTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::ObjectHierarchyFlattener::dyn_originalParentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::dyn_originalParentTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalParentTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 originalLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ObjectHierarchyFlattener::dyn_originalLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::dyn_originalLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion originalLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ObjectHierarchyFlattener::dyn_originalLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::dyn_originalLocalRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 originalScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ObjectHierarchyFlattener::dyn_originalScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::dyn_originalScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean trackTransformOfParent
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ObjectHierarchyFlattener::dyn_trackTransformOfParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::dyn_trackTransformOfParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackTransformOfParent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean maintainRelativeScale
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ObjectHierarchyFlattener::dyn_maintainRelativeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::dyn_maintainRelativeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maintainRelativeScale"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FlattenerCrumb crumb
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FlattenerCrumb*& GlobalNamespace::ObjectHierarchyFlattener::dyn_crumb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::dyn_crumb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "crumb"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FlattenerCrumb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObjectHierarchyFlattener.ResetTransform
void GlobalNamespace::ObjectHierarchyFlattener::ResetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::ResetTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObjectHierarchyFlattener.InvokeLateUpdate
void GlobalNamespace::ObjectHierarchyFlattener::InvokeLateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::InvokeLateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeLateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObjectHierarchyFlattener.OnEnable
void GlobalNamespace::ObjectHierarchyFlattener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObjectHierarchyFlattener.OnDisable
void GlobalNamespace::ObjectHierarchyFlattener::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattener::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ObjectHierarchyFlattenerManager
#include "GlobalNamespace/ObjectHierarchyFlattenerManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ObjectHierarchyFlattener
#include "GlobalNamespace/ObjectHierarchyFlattener.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ObjectHierarchyFlattenerManager instance
::GlobalNamespace::ObjectHierarchyFlattenerManager* GlobalNamespace::ObjectHierarchyFlattenerManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ObjectHierarchyFlattenerManager*>("", "ObjectHierarchyFlattenerManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public ObjectHierarchyFlattenerManager instance
void GlobalNamespace::ObjectHierarchyFlattenerManager::_set_instance(::GlobalNamespace::ObjectHierarchyFlattenerManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObjectHierarchyFlattenerManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::ObjectHierarchyFlattenerManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "ObjectHierarchyFlattenerManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::ObjectHierarchyFlattenerManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObjectHierarchyFlattenerManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.List`1<ObjectHierarchyFlattener> alloHF
::System::Collections::Generic::List_1<::GlobalNamespace::ObjectHierarchyFlattener*>* GlobalNamespace::ObjectHierarchyFlattenerManager::_get_alloHF() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::_get_alloHF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::ObjectHierarchyFlattener*>*>("", "ObjectHierarchyFlattenerManager", "alloHF"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.List`1<ObjectHierarchyFlattener> alloHF
void GlobalNamespace::ObjectHierarchyFlattenerManager::_set_alloHF(::System::Collections::Generic::List_1<::GlobalNamespace::ObjectHierarchyFlattener*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::_set_alloHF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObjectHierarchyFlattenerManager", "alloHF", value));
}
// Autogenerated method: ObjectHierarchyFlattenerManager.Awake
void GlobalNamespace::ObjectHierarchyFlattenerManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObjectHierarchyFlattenerManager.CreateManager
void GlobalNamespace::ObjectHierarchyFlattenerManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ObjectHierarchyFlattenerManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ObjectHierarchyFlattenerManager.SetInstance
void GlobalNamespace::ObjectHierarchyFlattenerManager::SetInstance(::GlobalNamespace::ObjectHierarchyFlattenerManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ObjectHierarchyFlattenerManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: ObjectHierarchyFlattenerManager.RegisterOHF
void GlobalNamespace::ObjectHierarchyFlattenerManager::RegisterOHF(::GlobalNamespace::ObjectHierarchyFlattener* rbWI) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::RegisterOHF");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ObjectHierarchyFlattenerManager", "RegisterOHF", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rbWI)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rbWI);
}
// Autogenerated method: ObjectHierarchyFlattenerManager.UnregisterOHF
void GlobalNamespace::ObjectHierarchyFlattenerManager::UnregisterOHF(::GlobalNamespace::ObjectHierarchyFlattener* rbWI) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::UnregisterOHF");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ObjectHierarchyFlattenerManager", "UnregisterOHF", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rbWI)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rbWI);
}
// Autogenerated method: ObjectHierarchyFlattenerManager.LateUpdate
void GlobalNamespace::ObjectHierarchyFlattenerManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObjectHierarchyFlattenerManager..cctor
void GlobalNamespace::ObjectHierarchyFlattenerManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectHierarchyFlattenerManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ObjectHierarchyFlattenerManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PerSceneRenderData
#include "GlobalNamespace/PerSceneRenderData.hpp"
// Including type: PerSceneRenderData/<>c__DisplayClass19_0
#include "GlobalNamespace/PerSceneRenderData_--c__DisplayClass19_0.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.ResourceRequest
#include "UnityEngine/ResourceRequest.hpp"
// Including type: UnityEngine.LightmapData
#include "UnityEngine/LightmapData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer representativeRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::PerSceneRenderData::dyn_representativeRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_representativeRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "representativeRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String lightmapsResourcePath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::PerSceneRenderData::dyn_lightmapsResourcePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_lightmapsResourcePath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightmapsResourcePath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D singleLightmap
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::PerSceneRenderData::dyn_singleLightmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_singleLightmap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "singleLightmap"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastLightmapIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PerSceneRenderData::dyn_lastLightmapIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_lastLightmapIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastLightmapIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] gO
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::PerSceneRenderData::dyn_gO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_gO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gO"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.MeshRenderer[] mRenderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& GlobalNamespace::PerSceneRenderData::dyn_mRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_mRenderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mRenderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MeshRenderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 mRendererIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PerSceneRenderData::dyn_mRendererIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_mRendererIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mRendererIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.ResourceRequest> resourceRequests
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::ResourceRequest*>*& GlobalNamespace::PerSceneRenderData::dyn_resourceRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_resourceRequests");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resourceRequests"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::ResourceRequest*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Texture2D> lightmapsCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Texture2D*>*& GlobalNamespace::PerSceneRenderData::dyn_lightmapsCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::dyn_lightmapsCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightmapsCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Texture2D*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PerSceneRenderData.RefreshRenderer
void GlobalNamespace::PerSceneRenderData::RefreshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::RefreshRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PerSceneRenderData.get_sceneName
::StringW GlobalNamespace::PerSceneRenderData::get_sceneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::get_sceneName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: PerSceneRenderData.get_sceneIndex
int GlobalNamespace::PerSceneRenderData::get_sceneIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::get_sceneIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: PerSceneRenderData.Awake
void GlobalNamespace::PerSceneRenderData::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PerSceneRenderData.OnEnable
void GlobalNamespace::PerSceneRenderData::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PerSceneRenderData.OnDisable
void GlobalNamespace::PerSceneRenderData::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PerSceneRenderData.AddMeshToList
void GlobalNamespace::PerSceneRenderData::AddMeshToList(::UnityEngine::GameObject* _gO, ::UnityEngine::MeshRenderer* mR) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::AddMeshToList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddMeshToList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_gO), ::il2cpp_utils::ExtractType(mR)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, _gO, mR);
}
// Autogenerated method: PerSceneRenderData.CheckShouldRepopulate
bool GlobalNamespace::PerSceneRenderData::CheckShouldRepopulate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::CheckShouldRepopulate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckShouldRepopulate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PerSceneRenderData.GetLightmap
::UnityEngine::Texture2D* GlobalNamespace::PerSceneRenderData::GetLightmap(::StringW timeOfDay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::GetLightmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLightmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeOfDay)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(this, ___internal__method, timeOfDay);
}
// Autogenerated method: PerSceneRenderData.PopulateLightmaps
void GlobalNamespace::PerSceneRenderData::PopulateLightmaps(::StringW fromTimeOfDay, ::StringW toTimeOfDay, ::ArrayW<::UnityEngine::LightmapData*> lightmaps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::PopulateLightmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopulateLightmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromTimeOfDay), ::il2cpp_utils::ExtractType(toTimeOfDay), ::il2cpp_utils::ExtractType(lightmaps)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromTimeOfDay, toTimeOfDay, lightmaps);
}
// Autogenerated method: PerSceneRenderData.ReleaseLightmap
void GlobalNamespace::PerSceneRenderData::ReleaseLightmap(::StringW oldTimeOfDay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::ReleaseLightmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseLightmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldTimeOfDay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, oldTimeOfDay);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PerSceneRenderData/<>c__DisplayClass19_0
#include "GlobalNamespace/PerSceneRenderData_--c__DisplayClass19_0.hpp"
// Including type: UnityEngine.ResourceRequest
#include "UnityEngine/ResourceRequest.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public PerSceneRenderData <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PerSceneRenderData*& GlobalNamespace::PerSceneRenderData::$$c__DisplayClass19_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::$$c__DisplayClass19_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PerSceneRenderData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String timeOfDay
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::PerSceneRenderData::$$c__DisplayClass19_0::dyn_timeOfDay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::$$c__DisplayClass19_0::dyn_timeOfDay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeOfDay"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ResourceRequest request
[[deprecated("Use field access instead!")]] ::UnityEngine::ResourceRequest*& GlobalNamespace::PerSceneRenderData::$$c__DisplayClass19_0::dyn_request() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::$$c__DisplayClass19_0::dyn_request");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "request"))->offset;
  return *reinterpret_cast<::UnityEngine::ResourceRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PerSceneRenderData/<>c__DisplayClass19_0.<GetLightmap>b__0
void GlobalNamespace::PerSceneRenderData::$$c__DisplayClass19_0::$GetLightmap$b__0(::UnityEngine::AsyncOperation* ao) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerSceneRenderData::$$c__DisplayClass19_0::<GetLightmap>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetLightmap>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ao)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ao);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlantableFlagManager
#include "GlobalNamespace/PlantableFlagManager.hpp"
// Including type: PlantableFlagManager/<>c
#include "GlobalNamespace/PlantableFlagManager_--c.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public PlantableObject[] flags
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::PlantableObject*>& GlobalNamespace::PlantableFlagManager::dyn_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::dyn_flags");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flags"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::PlantableObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FlagCauldronColorer[] cauldrons
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::FlagCauldronColorer*>& GlobalNamespace::PlantableFlagManager::dyn_cauldrons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::dyn_cauldrons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cauldrons"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::FlagCauldronColorer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FlagCauldronColorer/ColorMode[] mode
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::FlagCauldronColorer::ColorMode>& GlobalNamespace::PlantableFlagManager::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::FlagCauldronColorer::ColorMode>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlantableObject/AppliedColors[][] flagColors
[[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::GlobalNamespace::PlantableObject::AppliedColors>>& GlobalNamespace::PlantableFlagManager::dyn_flagColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::dyn_flagColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flagColors"))->offset;
  return *reinterpret_cast<::ArrayW<::ArrayW<::GlobalNamespace::PlantableObject::AppliedColors>>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlantableFlagManager.ResetMyFlags
void GlobalNamespace::PlantableFlagManager::ResetMyFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::ResetMyFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetMyFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableFlagManager.ResetAllFlags
void GlobalNamespace::PlantableFlagManager::ResetAllFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::ResetAllFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetAllFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableFlagManager.RainbowifyAllFlags
void GlobalNamespace::PlantableFlagManager::RainbowifyAllFlags(float saturation, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::RainbowifyAllFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RainbowifyAllFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saturation), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, saturation, value);
}
// Autogenerated method: PlantableFlagManager.Awake
void GlobalNamespace::PlantableFlagManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableFlagManager.Update
void GlobalNamespace::PlantableFlagManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableFlagManager.UpdateFlagColorRPC
void GlobalNamespace::PlantableFlagManager::UpdateFlagColorRPC(int flagIndex, int colorIndex, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::UpdateFlagColorRPC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFlagColorRPC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flagIndex), ::il2cpp_utils::ExtractType(colorIndex), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flagIndex, colorIndex, info);
}
// Autogenerated method: PlantableFlagManager.UpdateFlagColors
void GlobalNamespace::PlantableFlagManager::UpdateFlagColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::UpdateFlagColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFlagColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableFlagManager.OnPhotonSerializeView
void GlobalNamespace::PlantableFlagManager::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PlantableFlagManager*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlantableFlagManager/<>c
#include "GlobalNamespace/PlantableFlagManager_--c.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly PlantableFlagManager/<>c <>9
::GlobalNamespace::PlantableFlagManager::$$c* GlobalNamespace::PlantableFlagManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::PlantableFlagManager::$$c*>("", "PlantableFlagManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly PlantableFlagManager/<>c <>9
void GlobalNamespace::PlantableFlagManager::$$c::_set_$$9(::GlobalNamespace::PlantableFlagManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PlantableFlagManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__2_0
::System::Action* GlobalNamespace::PlantableFlagManager::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "PlantableFlagManager/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__2_0
void GlobalNamespace::PlantableFlagManager::$$c::_set_$$9__2_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PlantableFlagManager/<>c", "<>9__2_0", value)));
}
// Autogenerated method: PlantableFlagManager/<>c..cctor
void GlobalNamespace::PlantableFlagManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlantableFlagManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PlantableFlagManager/<>c.<ResetAllFlags>b__2_0
void GlobalNamespace::PlantableFlagManager::$$c::$ResetAllFlags$b__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableFlagManager::$$c::<ResetAllFlags>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ResetAllFlags>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlantablePoint
#include "GlobalNamespace/PlantablePoint.hpp"
// Including type: PlantableObject
#include "GlobalNamespace/PlantableObject.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean shouldBeSet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlantablePoint::dyn_shouldBeSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantablePoint::dyn_shouldBeSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shouldBeSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask floorMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::PlantablePoint::dyn_floorMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantablePoint::dyn_floorMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "floorMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlantableObject plantableObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlantableObject*& GlobalNamespace::PlantablePoint::dyn_plantableObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantablePoint::dyn_plantableObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "plantableObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlantableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlantablePoint.OnTriggerEnter
void GlobalNamespace::PlantablePoint::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantablePoint::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: PlantablePoint.OnTriggerExit
void GlobalNamespace::PlantablePoint::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantablePoint::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PositionVolumeModifier
#include "GlobalNamespace/PositionVolumeModifier.hpp"
// Including type: TimeOfDayDependentAudio
#include "GlobalNamespace/TimeOfDayDependentAudio.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public TimeOfDayDependentAudio audioToMod
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeOfDayDependentAudio*& GlobalNamespace::PositionVolumeModifier::dyn_audioToMod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PositionVolumeModifier::dyn_audioToMod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioToMod"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeOfDayDependentAudio**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PositionVolumeModifier.OnTriggerStay
void GlobalNamespace::PositionVolumeModifier::OnTriggerStay(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PositionVolumeModifier::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RandomTimedSeedManager
#include "GlobalNamespace/RandomTimedSeedManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private RandomTimedSeedManager <instance>k__BackingField
::GlobalNamespace::RandomTimedSeedManager* GlobalNamespace::RandomTimedSeedManager::_get_$instance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::_get_$instance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::RandomTimedSeedManager*>("", "RandomTimedSeedManager", "<instance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private RandomTimedSeedManager <instance>k__BackingField
void GlobalNamespace::RandomTimedSeedManager::_set_$instance$k__BackingField(::GlobalNamespace::RandomTimedSeedManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::_set_$instance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RandomTimedSeedManager", "<instance>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SeedMin
int GlobalNamespace::RandomTimedSeedManager::_get_SeedMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::_get_SeedMin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "RandomTimedSeedManager", "SeedMin"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SeedMin
void GlobalNamespace::RandomTimedSeedManager::_set_SeedMin(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::_set_SeedMin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RandomTimedSeedManager", "SeedMin", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SeedMax
int GlobalNamespace::RandomTimedSeedManager::_get_SeedMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::_get_SeedMax");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "RandomTimedSeedManager", "SeedMax"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SeedMax
void GlobalNamespace::RandomTimedSeedManager::_set_SeedMax(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::_set_SeedMax");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RandomTimedSeedManager", "SeedMax", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single MaxSyncTime
float GlobalNamespace::RandomTimedSeedManager::_get_MaxSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::_get_MaxSyncTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "RandomTimedSeedManager", "MaxSyncTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single MaxSyncTime
void GlobalNamespace::RandomTimedSeedManager::_set_MaxSyncTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::_set_MaxSyncTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RandomTimedSeedManager", "MaxSyncTime", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Action> callbacksOnSeedChanged
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Action*>*& GlobalNamespace::RandomTimedSeedManager::dyn_callbacksOnSeedChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::dyn_callbacksOnSeedChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callbacksOnSeedChanged"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Action*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <seed>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RandomTimedSeedManager::dyn_$seed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::dyn_$seed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<seed>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single idealSyncTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomTimedSeedManager::dyn_idealSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::dyn_idealSyncTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "idealSyncTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <currentSyncTime>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomTimedSeedManager::dyn_$currentSyncTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::dyn_$currentSyncTime$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<currentSyncTime>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 cachedSeed
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RandomTimedSeedManager::dyn_cachedSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::dyn_cachedSeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedSeed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RandomTimedSeedManager::dyn_$ITickSystemTick_TickRunning$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::dyn_$ITickSystemTick_TickRunning$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ITickSystemTick.TickRunning>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomTimedSeedManager.get_instance
::GlobalNamespace::RandomTimedSeedManager* GlobalNamespace::RandomTimedSeedManager::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RandomTimedSeedManager", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::RandomTimedSeedManager*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RandomTimedSeedManager.set_instance
void GlobalNamespace::RandomTimedSeedManager::set_instance(::GlobalNamespace::RandomTimedSeedManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::set_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RandomTimedSeedManager", "set_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: RandomTimedSeedManager.get_seed
int GlobalNamespace::RandomTimedSeedManager::get_seed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::get_seed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_seed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: RandomTimedSeedManager.set_seed
void GlobalNamespace::RandomTimedSeedManager::set_seed(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::set_seed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_seed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RandomTimedSeedManager.get_currentSyncTime
float GlobalNamespace::RandomTimedSeedManager::get_currentSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::get_currentSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RandomTimedSeedManager.set_currentSyncTime
void GlobalNamespace::RandomTimedSeedManager::set_currentSyncTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::set_currentSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_currentSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RandomTimedSeedManager.Awake
void GlobalNamespace::RandomTimedSeedManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomTimedSeedManager.AddCallbackOnSeedChanged
void GlobalNamespace::RandomTimedSeedManager::AddCallbackOnSeedChanged(::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::AddCallbackOnSeedChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCallbackOnSeedChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: RandomTimedSeedManager.RemoveCallbackOnSeedChanged
void GlobalNamespace::RandomTimedSeedManager::RemoveCallbackOnSeedChanged(::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::RemoveCallbackOnSeedChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveCallbackOnSeedChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: RandomTimedSeedManager.ITickSystemTick.get_TickRunning
bool GlobalNamespace::RandomTimedSeedManager::ITickSystemTick_get_TickRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::ITickSystemTick.get_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RandomTimedSeedManager*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RandomTimedSeedManager.ITickSystemTick.set_TickRunning
void GlobalNamespace::RandomTimedSeedManager::ITickSystemTick_set_TickRunning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::ITickSystemTick.set_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RandomTimedSeedManager*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RandomTimedSeedManager.ITickSystemTick.Tick
void GlobalNamespace::RandomTimedSeedManager::ITickSystemTick_Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::ITickSystemTick.Tick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RandomTimedSeedManager*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomTimedSeedManager.Photon.Pun.IPunObservable.OnPhotonSerializeView
void GlobalNamespace::RandomTimedSeedManager::Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomTimedSeedManager::Photon.Pun.IPunObservable.OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RandomTimedSeedManager*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ShaderPlatformSetter
#include "GlobalNamespace/ShaderPlatformSetter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShaderPlatformSetter.HandleRuntimeInitializeOnLoad
void GlobalNamespace::ShaderPlatformSetter::HandleRuntimeInitializeOnLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPlatformSetter::HandleRuntimeInitializeOnLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ShaderPlatformSetter", "HandleRuntimeInitializeOnLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ShaderPropertiesMapSO
#include "GlobalNamespace/ShaderPropertiesMapSO.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kResourcesAssetName
::StringW GlobalNamespace::ShaderPropertiesMapSO::_get_kResourcesAssetName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::_get_kResourcesAssetName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "ShaderPropertiesMapSO", "kResourcesAssetName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kResourcesAssetName
void GlobalNamespace::ShaderPropertiesMapSO::_set_kResourcesAssetName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::_set_kResourcesAssetName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ShaderPropertiesMapSO", "kResourcesAssetName", value));
}
// Autogenerated static field getter
// Get static field: static private ShaderPropertiesMapSO _instance
::GlobalNamespace::ShaderPropertiesMapSO* GlobalNamespace::ShaderPropertiesMapSO::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ShaderPropertiesMapSO*>("", "ShaderPropertiesMapSO", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private ShaderPropertiesMapSO _instance
void GlobalNamespace::ShaderPropertiesMapSO::_set__instance(::GlobalNamespace::ShaderPropertiesMapSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ShaderPropertiesMapSO", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean <hasInstance>k__BackingField
bool GlobalNamespace::ShaderPropertiesMapSO::_get_$hasInstance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::_get_$hasInstance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "ShaderPropertiesMapSO", "<hasInstance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <hasInstance>k__BackingField
void GlobalNamespace::ShaderPropertiesMapSO::_set_$hasInstance$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::_set_$hasInstance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ShaderPropertiesMapSO", "<hasInstance>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,System.String[]> shaderToTex2DProps
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::StringW>>*& GlobalNamespace::ShaderPropertiesMapSO::dyn_shaderToTex2DProps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::dyn_shaderToTex2DProps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shaderToTex2DProps"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<::StringW>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ShaderPropertiesMapSO.get_hasInstance
bool GlobalNamespace::ShaderPropertiesMapSO::get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::get_hasInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ShaderPropertiesMapSO", "get_hasInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ShaderPropertiesMapSO.set_hasInstance
void GlobalNamespace::ShaderPropertiesMapSO::set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::set_hasInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ShaderPropertiesMapSO", "set_hasInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ShaderPropertiesMapSO.GetInstance
::GlobalNamespace::ShaderPropertiesMapSO* GlobalNamespace::ShaderPropertiesMapSO::GetInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderPropertiesMapSO::GetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ShaderPropertiesMapSO", "GetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ShaderPropertiesMapSO*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RequestableOwnershipGaurdHandler
#include "GlobalNamespace/RequestableOwnershipGaurdHandler.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: RequestableOwnershipGuard
#include "GlobalNamespace/RequestableOwnershipGuard.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: ExitGames.Client.Photon.Hashtable
#include "ExitGames/Client/Photon/Hashtable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<Photon.Pun.PhotonView> gaurdedViews
::System::Collections::Generic::HashSet_1<::Photon::Pun::PhotonView*>* GlobalNamespace::RequestableOwnershipGaurdHandler::_get_gaurdedViews() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::_get_gaurdedViews");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::Photon::Pun::PhotonView*>*>("", "RequestableOwnershipGaurdHandler", "gaurdedViews"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<Photon.Pun.PhotonView> gaurdedViews
void GlobalNamespace::RequestableOwnershipGaurdHandler::_set_gaurdedViews(::System::Collections::Generic::HashSet_1<::Photon::Pun::PhotonView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::_set_gaurdedViews");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RequestableOwnershipGaurdHandler", "gaurdedViews", value));
}
// Autogenerated static field getter
// Get static field: static private readonly RequestableOwnershipGaurdHandler callbackInstance
::GlobalNamespace::RequestableOwnershipGaurdHandler* GlobalNamespace::RequestableOwnershipGaurdHandler::_get_callbackInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::_get_callbackInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::RequestableOwnershipGaurdHandler*>("", "RequestableOwnershipGaurdHandler", "callbackInstance"));
}
// Autogenerated static field setter
// Set static field: static private readonly RequestableOwnershipGaurdHandler callbackInstance
void GlobalNamespace::RequestableOwnershipGaurdHandler::_set_callbackInstance(::GlobalNamespace::RequestableOwnershipGaurdHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::_set_callbackInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RequestableOwnershipGaurdHandler", "callbackInstance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<Photon.Pun.PhotonView,RequestableOwnershipGuard> guardingLookup
::System::Collections::Generic::Dictionary_2<::Photon::Pun::PhotonView*, ::GlobalNamespace::RequestableOwnershipGuard*>* GlobalNamespace::RequestableOwnershipGaurdHandler::_get_guardingLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::_get_guardingLookup");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::Photon::Pun::PhotonView*, ::GlobalNamespace::RequestableOwnershipGuard*>*>("", "RequestableOwnershipGaurdHandler", "guardingLookup")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<Photon.Pun.PhotonView,RequestableOwnershipGuard> guardingLookup
void GlobalNamespace::RequestableOwnershipGaurdHandler::_set_guardingLookup(::System::Collections::Generic::Dictionary_2<::Photon::Pun::PhotonView*, ::GlobalNamespace::RequestableOwnershipGuard*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::_set_guardingLookup");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RequestableOwnershipGaurdHandler", "guardingLookup", value));
}
// Autogenerated method: RequestableOwnershipGaurdHandler..cctor
void GlobalNamespace::RequestableOwnershipGaurdHandler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RequestableOwnershipGaurdHandler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.RegisterView
void GlobalNamespace::RequestableOwnershipGaurdHandler::RegisterView(::Photon::Pun::PhotonView* view, ::GlobalNamespace::RequestableOwnershipGuard* guard) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::RegisterView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RequestableOwnershipGaurdHandler", "RegisterView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view), ::il2cpp_utils::ExtractType(guard)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, view, guard);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.RemoveView
void GlobalNamespace::RequestableOwnershipGaurdHandler::RemoveView(::Photon::Pun::PhotonView* view) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::RemoveView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RequestableOwnershipGaurdHandler", "RemoveView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, view);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.RegisterViews
void GlobalNamespace::RequestableOwnershipGaurdHandler::RegisterViews(::ArrayW<::Photon::Pun::PhotonView*> views, ::GlobalNamespace::RequestableOwnershipGuard* guard) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::RegisterViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RequestableOwnershipGaurdHandler", "RegisterViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(views), ::il2cpp_utils::ExtractType(guard)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, views, guard);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.RemoveViews
void GlobalNamespace::RequestableOwnershipGaurdHandler::RemoveViews(::ArrayW<::Photon::Pun::PhotonView*> views, ::GlobalNamespace::RequestableOwnershipGuard* guard) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::RemoveViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RequestableOwnershipGaurdHandler", "RemoveViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(views), ::il2cpp_utils::ExtractType(guard)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, views, guard);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransfered
void GlobalNamespace::RequestableOwnershipGaurdHandler::Photon_Pun_IPunOwnershipCallbacks_OnOwnershipTransfered(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* previousOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransfered");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGaurdHandler*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetView, previousOwner);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.Photon.Pun.IPunOwnershipCallbacks.OnOwnershipRequest
void GlobalNamespace::RequestableOwnershipGaurdHandler::Photon_Pun_IPunOwnershipCallbacks_OnOwnershipRequest(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* requestingPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::Photon.Pun.IPunOwnershipCallbacks.OnOwnershipRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGaurdHandler*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetView, requestingPlayer);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransferFailed
void GlobalNamespace::RequestableOwnershipGaurdHandler::Photon_Pun_IPunOwnershipCallbacks_OnOwnershipTransferFailed(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* senderOfFailedRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransferFailed");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGaurdHandler*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetView, senderOfFailedRequest);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.OnPlayerEnteredRoom
void GlobalNamespace::RequestableOwnershipGaurdHandler::OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::OnPlayerEnteredRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGaurdHandler*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newPlayer);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.OnPlayerLeftRoom
void GlobalNamespace::RequestableOwnershipGaurdHandler::OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::OnPlayerLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGaurdHandler*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, otherPlayer);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.OnRoomPropertiesUpdate
void GlobalNamespace::RequestableOwnershipGaurdHandler::OnRoomPropertiesUpdate(::ExitGames::Client::Photon::Hashtable* propertiesThatChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::OnRoomPropertiesUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGaurdHandler*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, propertiesThatChanged);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.OnPlayerPropertiesUpdate
void GlobalNamespace::RequestableOwnershipGaurdHandler::OnPlayerPropertiesUpdate(::Photon::Realtime::Player* targetPlayer, ::ExitGames::Client::Photon::Hashtable* changedProps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::OnPlayerPropertiesUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGaurdHandler*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetPlayer, changedProps);
}
// Autogenerated method: RequestableOwnershipGaurdHandler.Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched
void GlobalNamespace::RequestableOwnershipGaurdHandler::Photon_Realtime_IInRoomCallbacks_OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGaurdHandler::Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGaurdHandler*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newMasterClient);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: NetworkingState
#include "GlobalNamespace/NetworkingState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NetworkingState IsOwner
::GlobalNamespace::NetworkingState GlobalNamespace::NetworkingState::_get_IsOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_get_IsOwner");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NetworkingState>("", "NetworkingState", "IsOwner"));
}
// Autogenerated static field setter
// Set static field: static public NetworkingState IsOwner
void GlobalNamespace::NetworkingState::_set_IsOwner(::GlobalNamespace::NetworkingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_set_IsOwner");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkingState", "IsOwner", value));
}
// Autogenerated static field getter
// Get static field: static public NetworkingState IsBlindClient
::GlobalNamespace::NetworkingState GlobalNamespace::NetworkingState::_get_IsBlindClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_get_IsBlindClient");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NetworkingState>("", "NetworkingState", "IsBlindClient"));
}
// Autogenerated static field setter
// Set static field: static public NetworkingState IsBlindClient
void GlobalNamespace::NetworkingState::_set_IsBlindClient(::GlobalNamespace::NetworkingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_set_IsBlindClient");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkingState", "IsBlindClient", value));
}
// Autogenerated static field getter
// Get static field: static public NetworkingState IsClient
::GlobalNamespace::NetworkingState GlobalNamespace::NetworkingState::_get_IsClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_get_IsClient");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NetworkingState>("", "NetworkingState", "IsClient"));
}
// Autogenerated static field setter
// Set static field: static public NetworkingState IsClient
void GlobalNamespace::NetworkingState::_set_IsClient(::GlobalNamespace::NetworkingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_set_IsClient");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkingState", "IsClient", value));
}
// Autogenerated static field getter
// Get static field: static public NetworkingState ForcefullyTakingOver
::GlobalNamespace::NetworkingState GlobalNamespace::NetworkingState::_get_ForcefullyTakingOver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_get_ForcefullyTakingOver");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NetworkingState>("", "NetworkingState", "ForcefullyTakingOver"));
}
// Autogenerated static field setter
// Set static field: static public NetworkingState ForcefullyTakingOver
void GlobalNamespace::NetworkingState::_set_ForcefullyTakingOver(::GlobalNamespace::NetworkingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_set_ForcefullyTakingOver");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkingState", "ForcefullyTakingOver", value));
}
// Autogenerated static field getter
// Get static field: static public NetworkingState RequestingOwnership
::GlobalNamespace::NetworkingState GlobalNamespace::NetworkingState::_get_RequestingOwnership() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_get_RequestingOwnership");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NetworkingState>("", "NetworkingState", "RequestingOwnership"));
}
// Autogenerated static field setter
// Set static field: static public NetworkingState RequestingOwnership
void GlobalNamespace::NetworkingState::_set_RequestingOwnership(::GlobalNamespace::NetworkingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_set_RequestingOwnership");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkingState", "RequestingOwnership", value));
}
// Autogenerated static field getter
// Get static field: static public NetworkingState RequestingOwnershipWaitingForSight
::GlobalNamespace::NetworkingState GlobalNamespace::NetworkingState::_get_RequestingOwnershipWaitingForSight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_get_RequestingOwnershipWaitingForSight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NetworkingState>("", "NetworkingState", "RequestingOwnershipWaitingForSight"));
}
// Autogenerated static field setter
// Set static field: static public NetworkingState RequestingOwnershipWaitingForSight
void GlobalNamespace::NetworkingState::_set_RequestingOwnershipWaitingForSight(::GlobalNamespace::NetworkingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_set_RequestingOwnershipWaitingForSight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkingState", "RequestingOwnershipWaitingForSight", value));
}
// Autogenerated static field getter
// Get static field: static public NetworkingState ForcefullyTakingOverWaitingForSight
::GlobalNamespace::NetworkingState GlobalNamespace::NetworkingState::_get_ForcefullyTakingOverWaitingForSight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_get_ForcefullyTakingOverWaitingForSight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::NetworkingState>("", "NetworkingState", "ForcefullyTakingOverWaitingForSight"));
}
// Autogenerated static field setter
// Set static field: static public NetworkingState ForcefullyTakingOverWaitingForSight
void GlobalNamespace::NetworkingState::_set_ForcefullyTakingOverWaitingForSight(::GlobalNamespace::NetworkingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::_set_ForcefullyTakingOverWaitingForSight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NetworkingState", "ForcefullyTakingOverWaitingForSight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::NetworkingState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkingState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RequestableOwnershipGuard
#include "GlobalNamespace/RequestableOwnershipGuard.hpp"
// Including type: RequestableOwnershipGuard/<>c
#include "GlobalNamespace/RequestableOwnershipGuard_--c.hpp"
// Including type: RequestableOwnershipGuard/<>c__DisplayClass33_0
#include "GlobalNamespace/RequestableOwnershipGuard_--c__DisplayClass33_0.hpp"
// Including type: RequestableOwnershipGuard/<RequestTimeout>d__42
#include "GlobalNamespace/RequestableOwnershipGuard_-RequestTimeout-d__42.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IRequestableOwnershipGuardCallbacks
#include "GlobalNamespace/IRequestableOwnershipGuardCallbacks.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Sirenix.OdinInspector.SelfValidationResult
#include "Sirenix/OdinInspector/SelfValidationResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public NetworkingState currentState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkingState& GlobalNamespace::RequestableOwnershipGuard::dyn_currentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_currentState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NetworkingState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Pun.PhotonView[] photonViews
[[deprecated("Use field access instead!")]] ::ArrayW<::Photon::Pun::PhotonView*>& GlobalNamespace::RequestableOwnershipGuard::dyn_photonViews() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_photonViews");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "photonViews"))->offset;
  return *reinterpret_cast<::ArrayW<::Photon::Pun::PhotonView*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean autoRegister
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RequestableOwnershipGuard::dyn_autoRegister() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_autoRegister");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoRegister"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player currentOwner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::RequestableOwnershipGuard::dyn_currentOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_currentOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentOwner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Realtime.Player currentMasterClient
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::RequestableOwnershipGuard::dyn_currentMasterClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_currentMasterClient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentMasterClient"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Realtime.Player fallbackOwner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::RequestableOwnershipGuard::dyn_fallbackOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_fallbackOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fallbackOwner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player creator
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::RequestableOwnershipGuard::dyn_creator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_creator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "creator"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean giveCreatorAbsoluteAuthority
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RequestableOwnershipGuard::dyn_giveCreatorAbsoluteAuthority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_giveCreatorAbsoluteAuthority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "giveCreatorAbsoluteAuthority"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean attemptMasterAssistedTakeoverOnDeny
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RequestableOwnershipGuard::dyn_attemptMasterAssistedTakeoverOnDeny() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_attemptMasterAssistedTakeoverOnDeny");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attemptMasterAssistedTakeoverOnDeny"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action ownershipDenied
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::RequestableOwnershipGuard::dyn_ownershipDenied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_ownershipDenied");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ownershipDenied"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action ownershipRequestAccepted
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::RequestableOwnershipGuard::dyn_ownershipRequestAccepted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_ownershipRequestAccepted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ownershipRequestAccepted"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player actualOwner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::RequestableOwnershipGuard::dyn_actualOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_actualOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "actualOwner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String ownershipRequestNonce
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::RequestableOwnershipGuard::dyn_ownershipRequestNonce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_ownershipRequestNonce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ownershipRequestNonce"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<IRequestableOwnershipGuardCallbacks> callbacksList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*& GlobalNamespace::RequestableOwnershipGuard::dyn_callbacksList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::dyn_callbacksList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callbacksList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RequestableOwnershipGuard.SetViewToRequest
void GlobalNamespace::RequestableOwnershipGuard::SetViewToRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::SetViewToRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetViewToRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.get_photonView
::Photon::Pun::PhotonView* GlobalNamespace::RequestableOwnershipGuard::get_photonView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::get_photonView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_photonView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Photon::Pun::PhotonView*, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.get_isTrulyMine
bool GlobalNamespace::RequestableOwnershipGuard::get_isTrulyMine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::get_isTrulyMine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isTrulyMine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.get_isMine
bool GlobalNamespace::RequestableOwnershipGuard::get_isMine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::get_isMine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.BindPhotonViews
void GlobalNamespace::RequestableOwnershipGuard::BindPhotonViews() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::BindPhotonViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindPhotonViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.OnPhotonSerializeView
void GlobalNamespace::RequestableOwnershipGuard::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnPhotonSerializeView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPhotonSerializeView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: RequestableOwnershipGuard.RequestCurrentOwnerFromAuthorityRPC
void GlobalNamespace::RequestableOwnershipGuard::RequestCurrentOwnerFromAuthorityRPC(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::RequestCurrentOwnerFromAuthorityRPC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestCurrentOwnerFromAuthorityRPC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated method: RequestableOwnershipGuard.TransferOwnershipFromToRPC
void GlobalNamespace::RequestableOwnershipGuard::TransferOwnershipFromToRPC(::Photon::Realtime::Player* player, ::StringW nonce, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::TransferOwnershipFromToRPC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferOwnershipFromToRPC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(nonce), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player, nonce, info);
}
// Autogenerated method: RequestableOwnershipGuard.SetOwnershipFromMasterClient
void GlobalNamespace::RequestableOwnershipGuard::SetOwnershipFromMasterClient(::Photon::Realtime::Player* player, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::SetOwnershipFromMasterClient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOwnershipFromMasterClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player, info);
}
// Autogenerated method: RequestableOwnershipGuard.OnMasterClientAssistedTakeoverRequest
void GlobalNamespace::RequestableOwnershipGuard::OnMasterClientAssistedTakeoverRequest(::StringW nonce, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnMasterClientAssistedTakeoverRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnMasterClientAssistedTakeoverRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonce), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nonce, info);
}
// Autogenerated method: RequestableOwnershipGuard.OwnershipRequested
void GlobalNamespace::RequestableOwnershipGuard::OwnershipRequested(::StringW nonce, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OwnershipRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OwnershipRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonce), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nonce, info);
}
// Autogenerated method: RequestableOwnershipGuard.TransferOwnershipWithID
void GlobalNamespace::RequestableOwnershipGuard::TransferOwnershipWithID(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::TransferOwnershipWithID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferOwnershipWithID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id);
}
// Autogenerated method: RequestableOwnershipGuard.TransferOwnership
void GlobalNamespace::RequestableOwnershipGuard::TransferOwnership(::Photon::Realtime::Player* player, ::StringW Nonce) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::TransferOwnership");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferOwnership", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(Nonce)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player, Nonce);
}
// Autogenerated method: RequestableOwnershipGuard.RequestTheCurrentOwnerFromAuthority
void GlobalNamespace::RequestableOwnershipGuard::RequestTheCurrentOwnerFromAuthority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::RequestTheCurrentOwnerFromAuthority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestTheCurrentOwnerFromAuthority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.SetCurrentOwner
void GlobalNamespace::RequestableOwnershipGuard::SetCurrentOwner(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::SetCurrentOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCurrentOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: RequestableOwnershipGuard.SetOwnership
void GlobalNamespace::RequestableOwnershipGuard::SetOwnership(::Photon::Realtime::Player* player, bool isLocalOnly, bool dontPropigate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::SetOwnership");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOwnership", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(isLocalOnly), ::il2cpp_utils::ExtractType(dontPropigate)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player, isLocalOnly, dontPropigate);
}
// Autogenerated method: RequestableOwnershipGuard.GetAuthoritativePlayer
::Photon::Realtime::Player* GlobalNamespace::RequestableOwnershipGuard::GetAuthoritativePlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::GetAuthoritativePlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAuthoritativePlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Photon::Realtime::Player*, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.PlayerHasAuthority
bool GlobalNamespace::RequestableOwnershipGuard::PlayerHasAuthority(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::PlayerHasAuthority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerHasAuthority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, player);
}
// Autogenerated method: RequestableOwnershipGuard.OwnershipRequestDenied
void GlobalNamespace::RequestableOwnershipGuard::OwnershipRequestDenied(::StringW nonce, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OwnershipRequestDenied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OwnershipRequestDenied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nonce), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nonce, info);
}
// Autogenerated method: RequestableOwnershipGuard.RequestTimeout
::System::Collections::IEnumerator* GlobalNamespace::RequestableOwnershipGuard::RequestTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::RequestTimeout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestTimeout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.RequestOwnership
void GlobalNamespace::RequestableOwnershipGuard::RequestOwnership(::System::Action* onRequestSuccess, ::System::Action* onRequestFailed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::RequestOwnership");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestOwnership", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onRequestSuccess), ::il2cpp_utils::ExtractType(onRequestFailed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, onRequestSuccess, onRequestFailed);
}
// Autogenerated method: RequestableOwnershipGuard.RequestOwnershipImmediately
void GlobalNamespace::RequestableOwnershipGuard::RequestOwnershipImmediately(::System::Action* onRequestFailed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::RequestOwnershipImmediately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestOwnershipImmediately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onRequestFailed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, onRequestFailed);
}
// Autogenerated method: RequestableOwnershipGuard.RequestOwnershipImmediatelyWithGuaranteedAuthority
void GlobalNamespace::RequestableOwnershipGuard::RequestOwnershipImmediatelyWithGuaranteedAuthority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::RequestOwnershipImmediatelyWithGuaranteedAuthority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestOwnershipImmediatelyWithGuaranteedAuthority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.Validate
void GlobalNamespace::RequestableOwnershipGuard::Validate(::Sirenix::OdinInspector::SelfValidationResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::Validate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGuard*), 56));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: RequestableOwnershipGuard.AddCallbackTarget
void GlobalNamespace::RequestableOwnershipGuard::AddCallbackTarget(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callbackObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::AddCallbackTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCallbackTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callbackObject);
}
// Autogenerated method: RequestableOwnershipGuard.RemoveCallbackTarget
void GlobalNamespace::RequestableOwnershipGuard::RemoveCallbackTarget(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callbackObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::RemoveCallbackTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveCallbackTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callbackObject);
}
// Autogenerated method: RequestableOwnershipGuard.SetCreator
void GlobalNamespace::RequestableOwnershipGuard::SetCreator(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::SetCreator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCreator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: RequestableOwnershipGuard.get_EdCurrentState
::GlobalNamespace::NetworkingState GlobalNamespace::RequestableOwnershipGuard::get_EdCurrentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::get_EdCurrentState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EdCurrentState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::NetworkingState, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.<OnEnable>b__17_0
void GlobalNamespace::RequestableOwnershipGuard::$OnEnable$b__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::<OnEnable>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnEnable>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.OnDisable
void GlobalNamespace::RequestableOwnershipGuard::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.OnEnable
void GlobalNamespace::RequestableOwnershipGuard::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.OnPlayerEnteredRoom
void GlobalNamespace::RequestableOwnershipGuard::OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnPlayerEnteredRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 43));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newPlayer);
}
// Autogenerated method: RequestableOwnershipGuard.OnPreLeavingRoom
void GlobalNamespace::RequestableOwnershipGuard::OnPreLeavingRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnPreLeavingRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 55));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.OnJoinedRoom
void GlobalNamespace::RequestableOwnershipGuard::OnJoinedRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnJoinedRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard.OnPlayerLeftRoom
void GlobalNamespace::RequestableOwnershipGuard::OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnPlayerLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 44));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, otherPlayer);
}
// Autogenerated method: RequestableOwnershipGuard.OnMasterClientSwitched
void GlobalNamespace::RequestableOwnershipGuard::OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::OnMasterClientSwitched");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newMasterClient);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RequestableOwnershipGuard/<>c
#include "GlobalNamespace/RequestableOwnershipGuard_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IRequestableOwnershipGuardCallbacks
#include "GlobalNamespace/IRequestableOwnershipGuardCallbacks.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly RequestableOwnershipGuard/<>c <>9
::GlobalNamespace::RequestableOwnershipGuard::$$c* GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::RequestableOwnershipGuard::$$c*>("", "RequestableOwnershipGuard/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly RequestableOwnershipGuard/<>c <>9
void GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9(::GlobalNamespace::RequestableOwnershipGuard::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "RequestableOwnershipGuard/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__20_0
::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__20_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__20_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*>("", "RequestableOwnershipGuard/<>c", "<>9__20_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__20_0
void GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__20_0(::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__20_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "RequestableOwnershipGuard/<>c", "<>9__20_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__22_0
::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__22_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__22_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*>("", "RequestableOwnershipGuard/<>c", "<>9__22_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__22_0
void GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__22_0(::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__22_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "RequestableOwnershipGuard/<>c", "<>9__22_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__22_1
::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__22_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__22_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*>("", "RequestableOwnershipGuard/<>c", "<>9__22_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__22_1
void GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__22_1(::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__22_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "RequestableOwnershipGuard/<>c", "<>9__22_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__22_2
::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__22_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__22_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*>("", "RequestableOwnershipGuard/<>c", "<>9__22_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__22_2
void GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__22_2(::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__22_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "RequestableOwnershipGuard/<>c", "<>9__22_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__22_3
::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__22_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_get_$$9__22_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>*>("", "RequestableOwnershipGuard/<>c", "<>9__22_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<IRequestableOwnershipGuardCallbacks> <>9__22_3
void GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__22_3(::System::Action_1<::GlobalNamespace::IRequestableOwnershipGuardCallbacks*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::_set_$$9__22_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "RequestableOwnershipGuard/<>c", "<>9__22_3", value)));
}
// Autogenerated method: RequestableOwnershipGuard/<>c..cctor
void GlobalNamespace::RequestableOwnershipGuard::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RequestableOwnershipGuard/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard/<>c.<OnPreLeavingRoom>b__20_0
void GlobalNamespace::RequestableOwnershipGuard::$$c::$OnPreLeavingRoom$b__20_0(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::<OnPreLeavingRoom>b__20_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnPreLeavingRoom>b__20_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: RequestableOwnershipGuard/<>c.<OnPlayerLeftRoom>b__22_0
void GlobalNamespace::RequestableOwnershipGuard::$$c::$OnPlayerLeftRoom$b__22_0(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::<OnPlayerLeftRoom>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnPlayerLeftRoom>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: RequestableOwnershipGuard/<>c.<OnPlayerLeftRoom>b__22_1
void GlobalNamespace::RequestableOwnershipGuard::$$c::$OnPlayerLeftRoom$b__22_1(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::<OnPlayerLeftRoom>b__22_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnPlayerLeftRoom>b__22_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: RequestableOwnershipGuard/<>c.<OnPlayerLeftRoom>b__22_2
void GlobalNamespace::RequestableOwnershipGuard::$$c::$OnPlayerLeftRoom$b__22_2(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::<OnPlayerLeftRoom>b__22_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnPlayerLeftRoom>b__22_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: RequestableOwnershipGuard/<>c.<OnPlayerLeftRoom>b__22_3
void GlobalNamespace::RequestableOwnershipGuard::$$c::$OnPlayerLeftRoom$b__22_3(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c::<OnPlayerLeftRoom>b__22_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnPlayerLeftRoom>b__22_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RequestableOwnershipGuard/<>c__DisplayClass33_0
#include "GlobalNamespace/RequestableOwnershipGuard_--c__DisplayClass33_0.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: IRequestableOwnershipGuardCallbacks
#include "GlobalNamespace/IRequestableOwnershipGuardCallbacks.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player player
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::dyn_player() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::dyn_player");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "player"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RequestableOwnershipGuard <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RequestableOwnershipGuard*& GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RequestableOwnershipGuard**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RequestableOwnershipGuard/<>c__DisplayClass33_0.<SetOwnership>b__0
void GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::$SetOwnership$b__0(::GlobalNamespace::IRequestableOwnershipGuardCallbacks* actualOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$$c__DisplayClass33_0::<SetOwnership>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SetOwnership>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actualOwner)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, actualOwner);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: RequestableOwnershipGuard/<RequestTimeout>d__42
#include "GlobalNamespace/RequestableOwnershipGuard_-RequestTimeout-d__42.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RequestableOwnershipGuard <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RequestableOwnershipGuard*& GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RequestableOwnershipGuard**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RequestableOwnershipGuard/<RequestTimeout>d__42.System.IDisposable.Dispose
void GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard/<RequestTimeout>d__42.MoveNext
bool GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard/<RequestTimeout>d__42.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard/<RequestTimeout>d__42.System.Collections.IEnumerator.Reset
void GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RequestableOwnershipGuard/<RequestTimeout>d__42.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RequestableOwnershipGuard::$RequestTimeout$d__42*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: IRequestableOwnershipGuardCallbacks
#include "GlobalNamespace/IRequestableOwnershipGuardCallbacks.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRequestableOwnershipGuardCallbacks.OnOwnershipTransferred
void GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnOwnershipTransferred");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IRequestableOwnershipGuardCallbacks*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toPlayer, fromPlayer);
}
// Autogenerated method: IRequestableOwnershipGuardCallbacks.OnOwnershipRequest
bool GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnOwnershipRequest(::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnOwnershipRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IRequestableOwnershipGuardCallbacks*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer);
}
// Autogenerated method: IRequestableOwnershipGuardCallbacks.OnMyOwnerLeft
void GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnMyOwnerLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnMyOwnerLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IRequestableOwnershipGuardCallbacks*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IRequestableOwnershipGuardCallbacks.OnMasterClientAssistedTakeoverRequest
bool GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnMasterClientAssistedTakeoverRequest(::Photon::Realtime::Player* fromPlayer, ::Photon::Realtime::Player* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnMasterClientAssistedTakeoverRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IRequestableOwnershipGuardCallbacks*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer, toPlayer);
}
// Autogenerated method: IRequestableOwnershipGuardCallbacks.OnMyCreatorLeft
void GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnMyCreatorLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IRequestableOwnershipGuardCallbacks::OnMyCreatorLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IRequestableOwnershipGuardCallbacks*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ScenePreparer
#include "GlobalNamespace/ScenePreparer.hpp"
// Including type: OVRManager
#include "GlobalNamespace/OVRManager.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public OVRManager ovrManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager*& GlobalNamespace::ScenePreparer::dyn_ovrManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePreparer::dyn_ovrManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ovrManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OVRManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] betaDisableObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::ScenePreparer::dyn_betaDisableObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePreparer::dyn_betaDisableObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "betaDisableObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] betaEnableObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::ScenePreparer::dyn_betaEnableObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePreparer::dyn_betaEnableObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "betaEnableObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScenePreparer.Awake
void GlobalNamespace::ScenePreparer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePreparer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SkyboxSettings
#include "GlobalNamespace/SkyboxSettings.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _skyMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::SkyboxSettings::dyn__skyMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SkyboxSettings::dyn__skyMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skyMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SkyboxSettings.OnEnable
void GlobalNamespace::SkyboxSettings::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SkyboxSettings::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SoundOnCollisionTagSpecific
#include "GlobalNamespace/SoundOnCollisionTagSpecific.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String tagName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SoundOnCollisionTagSpecific::dyn_tagName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundOnCollisionTagSpecific::dyn_tagName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tagName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single noiseCooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SoundOnCollisionTagSpecific::dyn_noiseCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundOnCollisionTagSpecific::dyn_noiseCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noiseCooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nextSound
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SoundOnCollisionTagSpecific::dyn_nextSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundOnCollisionTagSpecific::dyn_nextSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextSound"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::SoundOnCollisionTagSpecific::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundOnCollisionTagSpecific::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] collisionSounds
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::SoundOnCollisionTagSpecific::dyn_collisionSounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundOnCollisionTagSpecific::dyn_collisionSounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionSounds"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SoundOnCollisionTagSpecific.OnTriggerEnter
void GlobalNamespace::SoundOnCollisionTagSpecific::OnTriggerEnter(::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundOnCollisionTagSpecific::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpeakerVoiceToLoudness
#include "GlobalNamespace/SpeakerVoiceToLoudness.hpp"
// Including type: SpeakerVoiceToLoudness/<>c__DisplayClass3_0
#include "GlobalNamespace/SpeakerVoiceToLoudness_--c__DisplayClass3_0.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: Photon.Voice.IAudioOut`1
#include "Photon/Voice/IAudioOut_1.hpp"
// Including type: Photon.Voice.Unity.Speaker
#include "Photon/Voice/Unity/Speaker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Photon.Voice.Unity.PlaybackDelaySettings playbackDelaySettings
[[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::PlaybackDelaySettings& GlobalNamespace::SpeakerVoiceToLoudness::dyn_playbackDelaySettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceToLoudness::dyn_playbackDelaySettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playbackDelaySettings"))->offset;
  return *reinterpret_cast<::Photon::Voice::Unity::PlaybackDelaySettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single loudness
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpeakerVoiceToLoudness::dyn_loudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceToLoudness::dyn_loudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loudness"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpeakerVoiceToLoudness.Awake
void GlobalNamespace::SpeakerVoiceToLoudness::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceToLoudness::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpeakerVoiceToLoudness.GetVolumeTracking
::System::Func_1<::Photon::Voice::IAudioOut_1<float>*>* GlobalNamespace::SpeakerVoiceToLoudness::GetVolumeTracking(::Photon::Voice::Unity::Speaker* speaker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceToLoudness::GetVolumeTracking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVolumeTracking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(speaker)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Func_1<::Photon::Voice::IAudioOut_1<float>*>*, false>(this, ___internal__method, speaker);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpeakerVoiceToLoudness/<>c__DisplayClass3_0
#include "GlobalNamespace/SpeakerVoiceToLoudness_--c__DisplayClass3_0.hpp"
// Including type: Photon.Voice.Unity.Speaker
#include "Photon/Voice/Unity/Speaker.hpp"
// Including type: Photon.Voice.IAudioOut`1
#include "Photon/Voice/IAudioOut_1.hpp"
// Including type: Photon.Voice.AudioOutDelayControl/PlayDelayConfig
#include "Photon/Voice/AudioOutDelayControl_PlayDelayConfig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SpeakerVoiceToLoudness <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SpeakerVoiceToLoudness*& GlobalNamespace::SpeakerVoiceToLoudness::$$c__DisplayClass3_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceToLoudness::$$c__DisplayClass3_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SpeakerVoiceToLoudness**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Voice.Unity.Speaker speaker
[[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Speaker*& GlobalNamespace::SpeakerVoiceToLoudness::$$c__DisplayClass3_0::dyn_speaker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceToLoudness::$$c__DisplayClass3_0::dyn_speaker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speaker"))->offset;
  return *reinterpret_cast<::Photon::Voice::Unity::Speaker**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Voice.AudioOutDelayControl/PlayDelayConfig pdc
[[deprecated("Use field access instead!")]] ::Photon::Voice::AudioOutDelayControl::PlayDelayConfig*& GlobalNamespace::SpeakerVoiceToLoudness::$$c__DisplayClass3_0::dyn_pdc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceToLoudness::$$c__DisplayClass3_0::dyn_pdc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pdc"))->offset;
  return *reinterpret_cast<::Photon::Voice::AudioOutDelayControl::PlayDelayConfig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpeakerVoiceToLoudness/<>c__DisplayClass3_0.<GetVolumeTracking>b__0
::Photon::Voice::IAudioOut_1<float>* GlobalNamespace::SpeakerVoiceToLoudness::$$c__DisplayClass3_0::$GetVolumeTracking$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceToLoudness::$$c__DisplayClass3_0::<GetVolumeTracking>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetVolumeTracking>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::IAudioOut_1<float>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpeakerVoiceLoudnessAudioOut
#include "GlobalNamespace/SpeakerVoiceLoudnessAudioOut.hpp"
// Including type: SpeakerVoiceToLoudness
#include "GlobalNamespace/SpeakerVoiceToLoudness.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: Photon.Voice.ILogger
#include "Photon/Voice/ILogger.hpp"
// Including type: Photon.Voice.AudioOutDelayControl/PlayDelayConfig
#include "Photon/Voice/AudioOutDelayControl_PlayDelayConfig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SpeakerVoiceToLoudness voiceToLoudness
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SpeakerVoiceToLoudness*& GlobalNamespace::SpeakerVoiceLoudnessAudioOut::dyn_voiceToLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceLoudnessAudioOut::dyn_voiceToLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "voiceToLoudness"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SpeakerVoiceToLoudness**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpeakerVoiceLoudnessAudioOut.OutWrite
void GlobalNamespace::SpeakerVoiceLoudnessAudioOut::OutWrite(::ArrayW<float> data, int offsetSamples) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeakerVoiceLoudnessAudioOut::OutWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::Unity::UnityAudioOut*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, offsetSamples);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpinParametricAnimation
#include "GlobalNamespace/SpinParametricAnimation.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 axis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SpinParametricAnimation::dyn_axis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::dyn_axis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "axis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean WorldSpaceRotation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpinParametricAnimation::dyn_WorldSpaceRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::dyn_WorldSpaceRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WorldSpaceRotation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single revolutionsPerSecond
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpinParametricAnimation::dyn_revolutionsPerSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::dyn_revolutionsPerSecond");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "revolutionsPerSecond"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve timeCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::SpinParametricAnimation::dyn_timeCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::dyn_timeCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _animationProgress
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpinParametricAnimation::dyn__animationProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::dyn__animationProgress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animationProgress"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _oldAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpinParametricAnimation::dyn__oldAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::dyn__oldAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_oldAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpinParametricAnimation.OnEnable
void GlobalNamespace::SpinParametricAnimation::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpinParametricAnimation.LateUpdate
void GlobalNamespace::SpinParametricAnimation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinParametricAnimation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: StringFormatter
#include "GlobalNamespace/StringFormatter.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.StringBuilder builder
::System::Text::StringBuilder* GlobalNamespace::StringFormatter::_get_builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::_get_builder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::StringBuilder*>("", "StringFormatter", "builder"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.StringBuilder builder
void GlobalNamespace::StringFormatter::_set_builder(::System::Text::StringBuilder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::_set_builder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringFormatter", "builder", value));
}
// Autogenerated instance field getter
// Get instance field: private System.String[] spans
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::StringFormatter::dyn_spans() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::dyn_spans");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spans"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[] indices
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::StringFormatter::dyn_indices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::dyn_indices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indices"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StringFormatter.Format
::StringW GlobalNamespace::StringFormatter::Format(::StringW term1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(term1)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, term1);
}
// Autogenerated method: StringFormatter.Format
::StringW GlobalNamespace::StringFormatter::Format(::System::Func_1<::StringW>* term1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(term1)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, term1);
}
// Autogenerated method: StringFormatter.Format
::StringW GlobalNamespace::StringFormatter::Format(::StringW term1, ::StringW term2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(term1), ::il2cpp_utils::ExtractType(term2)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, term1, term2);
}
// Autogenerated method: StringFormatter.Format
::StringW GlobalNamespace::StringFormatter::Format(::System::Func_1<::StringW>* term1, ::System::Func_1<::StringW>* term2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(term1), ::il2cpp_utils::ExtractType(term2)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, term1, term2);
}
// Autogenerated method: StringFormatter.Format
::StringW GlobalNamespace::StringFormatter::Format(::ArrayW<::StringW> terms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(terms)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, terms);
}
// Autogenerated method: StringFormatter.Parse
::GlobalNamespace::StringFormatter* GlobalNamespace::StringFormatter::Parse(::StringW input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::Parse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringFormatter", "Parse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::StringFormatter*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, input);
}
// Autogenerated method: StringFormatter..cctor
void GlobalNamespace::StringFormatter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringFormatter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringFormatter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThermalManager
#include "GlobalNamespace/ThermalManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ThermalSourceVolume
#include "GlobalNamespace/ThermalSourceVolume.hpp"
// Including type: ThermalReceiver
#include "GlobalNamespace/ThermalReceiver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.List`1<ThermalSourceVolume> sources
::System::Collections::Generic::List_1<::GlobalNamespace::ThermalSourceVolume*>* GlobalNamespace::ThermalManager::_get_sources() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::_get_sources");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::ThermalSourceVolume*>*>("", "ThermalManager", "sources"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.List`1<ThermalSourceVolume> sources
void GlobalNamespace::ThermalManager::_set_sources(::System::Collections::Generic::List_1<::GlobalNamespace::ThermalSourceVolume*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::_set_sources");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThermalManager", "sources", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.List`1<ThermalReceiver> receivers
::System::Collections::Generic::List_1<::GlobalNamespace::ThermalReceiver*>* GlobalNamespace::ThermalManager::_get_receivers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::_get_receivers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::ThermalReceiver*>*>("", "ThermalManager", "receivers"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.List`1<ThermalReceiver> receivers
void GlobalNamespace::ThermalManager::_set_receivers(::System::Collections::Generic::List_1<::GlobalNamespace::ThermalReceiver*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::_set_receivers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThermalManager", "receivers", value));
}
// Autogenerated static field getter
// Get static field: static public ThermalManager instance
::GlobalNamespace::ThermalManager* GlobalNamespace::ThermalManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThermalManager*>("", "ThermalManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public ThermalManager instance
void GlobalNamespace::ThermalManager::_set_instance(::GlobalNamespace::ThermalManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThermalManager", "instance", value));
}
// Autogenerated method: ThermalManager.OnEnable
void GlobalNamespace::ThermalManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThermalManager.LateUpdate
void GlobalNamespace::ThermalManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThermalManager.Register
void GlobalNamespace::ThermalManager::Register(::GlobalNamespace::ThermalSourceVolume* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThermalManager", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source);
}
// Autogenerated method: ThermalManager.Unregister
void GlobalNamespace::ThermalManager::Unregister(::GlobalNamespace::ThermalSourceVolume* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThermalManager", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source);
}
// Autogenerated method: ThermalManager.Register
void GlobalNamespace::ThermalManager::Register(::GlobalNamespace::ThermalReceiver* receiver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThermalManager", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(receiver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, receiver);
}
// Autogenerated method: ThermalManager.Unregister
void GlobalNamespace::ThermalManager::Unregister(::GlobalNamespace::ThermalReceiver* receiver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThermalManager", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(receiver)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, receiver);
}
// Autogenerated method: ThermalManager..cctor
void GlobalNamespace::ThermalManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThermalManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThermalReceiver
#include "GlobalNamespace/ThermalReceiver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single radius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThermalReceiver::dyn_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::dyn_radius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single conductivity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThermalReceiver::dyn_conductivity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::dyn_conductivity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "conductivity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single celsius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThermalReceiver::dyn_celsius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::dyn_celsius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "celsius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single defaultCelsius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThermalReceiver::dyn_defaultCelsius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::dyn_defaultCelsius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultCelsius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThermalReceiver.get_Farenheit
float GlobalNamespace::ThermalReceiver::get_Farenheit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::get_Farenheit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Farenheit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ThermalReceiver.get_floatValue
float GlobalNamespace::ThermalReceiver::get_floatValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::get_floatValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThermalReceiver*), 4));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ThermalReceiver.Awake
void GlobalNamespace::ThermalReceiver::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThermalReceiver.OnEnable
void GlobalNamespace::ThermalReceiver::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThermalReceiver.OnDisable
void GlobalNamespace::ThermalReceiver::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThermalReceiver.ResetToDefaultState
void GlobalNamespace::ThermalReceiver::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalReceiver::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThermalReceiver*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThermalSourceVolume
#include "GlobalNamespace/ThermalSourceVolume.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single celsius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThermalSourceVolume::dyn_celsius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalSourceVolume::dyn_celsius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "celsius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single innerRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThermalSourceVolume::dyn_innerRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalSourceVolume::dyn_innerRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "innerRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single outerRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThermalSourceVolume::dyn_outerRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalSourceVolume::dyn_outerRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outerRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThermalSourceVolume.OnEnable
void GlobalNamespace::ThermalSourceVolume::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalSourceVolume::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThermalSourceVolume.OnDisable
void GlobalNamespace::ThermalSourceVolume::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalSourceVolume::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TimeOfDayDependentAudio
#include "GlobalNamespace/TimeOfDayDependentAudio.hpp"
// Including type: TimeOfDayDependentAudio/<UpdateTimeOfDay>d__22
#include "GlobalNamespace/TimeOfDayDependentAudio_-UpdateTimeOfDay-d__22.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource[] audioSources
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& GlobalNamespace::TimeOfDayDependentAudio::dyn_audioSources() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_audioSources");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSources"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioSource*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single[] volumes
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::TimeOfDayDependentAudio::dyn_volumes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_volumes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volumes"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single currentVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayDependentAudio::dyn_currentVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_currentVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single stepTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayDependentAudio::dyn_stepTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_stepTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stepTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BetterDayNightManager/WeatherType myWeather
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BetterDayNightManager::WeatherType& GlobalNamespace::TimeOfDayDependentAudio::dyn_myWeather() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_myWeather");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myWeather"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BetterDayNightManager::WeatherType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject dependentStuff
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::TimeOfDayDependentAudio::dyn_dependentStuff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_dependentStuff");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dependentStuff"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject timeOfDayDependent
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::TimeOfDayDependentAudio::dyn_timeOfDayDependent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_timeOfDayDependent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeOfDayDependent"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean includesAudio
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TimeOfDayDependentAudio::dyn_includesAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_includesAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "includesAudio"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem myParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::TimeOfDayDependentAudio::dyn_myParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_myParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single startingEmissionRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayDependentAudio::dyn_startingEmissionRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_startingEmissionRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingEmissionRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastEmission
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TimeOfDayDependentAudio::dyn_lastEmission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_lastEmission");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastEmission"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 nextEmission
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TimeOfDayDependentAudio::dyn_nextEmission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_nextEmission");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextEmission"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/MinMaxCurve newCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MinMaxCurve& GlobalNamespace::TimeOfDayDependentAudio::dyn_newCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_newCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MinMaxCurve*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/EmissionModule myEmissionModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::TimeOfDayDependentAudio::dyn_myEmissionModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_myEmissionModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myEmissionModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single newRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayDependentAudio::dyn_newRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_newRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "newRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single positionMultiplierSet
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayDependentAudio::dyn_positionMultiplierSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_positionMultiplierSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionMultiplierSet"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single positionMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayDependentAudio::dyn_positionMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_positionMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isModified
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TimeOfDayDependentAudio::dyn_isModified() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::dyn_isModified");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isModified"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimeOfDayDependentAudio.Awake
void GlobalNamespace::TimeOfDayDependentAudio::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayDependentAudio.OnDisable
void GlobalNamespace::TimeOfDayDependentAudio::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayDependentAudio.OnEnable
void GlobalNamespace::TimeOfDayDependentAudio::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayDependentAudio.FixedUpdate
void GlobalNamespace::TimeOfDayDependentAudio::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayDependentAudio.UpdateTimeOfDay
::System::Collections::IEnumerator* GlobalNamespace::TimeOfDayDependentAudio::UpdateTimeOfDay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::UpdateTimeOfDay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTimeOfDay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: TimeOfDayDependentAudio/<UpdateTimeOfDay>d__22
#include "GlobalNamespace/TimeOfDayDependentAudio_-UpdateTimeOfDay-d__22.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TimeOfDayDependentAudio <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeOfDayDependentAudio*& GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeOfDayDependentAudio**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimeOfDayDependentAudio/<UpdateTimeOfDay>d__22.System.IDisposable.Dispose
void GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayDependentAudio/<UpdateTimeOfDay>d__22.MoveNext
bool GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayDependentAudio/<UpdateTimeOfDay>d__22.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayDependentAudio/<UpdateTimeOfDay>d__22.System.Collections.IEnumerator.Reset
void GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayDependentAudio/<UpdateTimeOfDay>d__22.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TimeOfDayDependentAudio::$UpdateTimeOfDay$d__22*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ToggleableWearable
#include "GlobalNamespace/ToggleableWearable.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 animParam_Progress
int GlobalNamespace::ToggleableWearable::_get_animParam_Progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::_get_animParam_Progress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ToggleableWearable", "animParam_Progress"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 animParam_Progress
void GlobalNamespace::ToggleableWearable::_set_animParam_Progress(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::_set_animParam_Progress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ToggleableWearable", "animParam_Progress", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer[] renderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& GlobalNamespace::ToggleableWearable::dyn_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Renderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator[] animators
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Animator*>& GlobalNamespace::ToggleableWearable::dyn_animators() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_animators");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animators"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Animator*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single animationTransitionDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ToggleableWearable::dyn_animationTransitionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_animationTransitionDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animationTransitionDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean startOn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ToggleableWearable::dyn_startOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_startOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startOn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::ToggleableWearable::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip toggleOnSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ToggleableWearable::dyn_toggleOnSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_toggleOnSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toggleOnSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip toggleOffSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ToggleableWearable::dyn_toggleOffSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_toggleOffSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toggleOffSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask layerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::ToggleableWearable::dyn_layerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_layerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single triggerRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ToggleableWearable::dyn_triggerRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_triggerRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggerRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 triggerOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ToggleableWearable::dyn_triggerOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_triggerOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggerOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig/WearablePackedStateSlots assignedSlot
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig::WearablePackedStateSlots& GlobalNamespace::ToggleableWearable::dyn_assignedSlot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_assignedSlot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assignedSlot"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig::WearablePackedStateSlots*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single turnOnVibrationDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ToggleableWearable::dyn_turnOnVibrationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_turnOnVibrationDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "turnOnVibrationDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single turnOnVibrationStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ToggleableWearable::dyn_turnOnVibrationStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_turnOnVibrationStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "turnOnVibrationStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single turnOffVibrationDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ToggleableWearable::dyn_turnOffVibrationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_turnOffVibrationDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "turnOffVibrationDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single turnOffVibrationStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ToggleableWearable::dyn_turnOffVibrationStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_turnOffVibrationStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "turnOffVibrationStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig ownerRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::ToggleableWearable::dyn_ownerRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_ownerRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ownerRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean ownerIsLocal
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ToggleableWearable::dyn_ownerIsLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_ownerIsLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ownerIsLocal"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isOn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ToggleableWearable::dyn_isOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_isOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isOn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 toggleCooldownRange
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::ToggleableWearable::dyn_toggleCooldownRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_toggleCooldownRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toggleCooldownRange"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasAudioSource
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ToggleableWearable::dyn_hasAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_hasAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasAudioSource"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Collider[] colliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::ToggleableWearable::dyn_colliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_colliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 framesSinceCooldownAndExitingVolume
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ToggleableWearable::dyn_framesSinceCooldownAndExitingVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_framesSinceCooldownAndExitingVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "framesSinceCooldownAndExitingVolume"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single toggleCooldownTimer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ToggleableWearable::dyn_toggleCooldownTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_toggleCooldownTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toggleCooldownTimer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 assignedSlotBitIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ToggleableWearable::dyn_assignedSlotBitIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_assignedSlotBitIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assignedSlotBitIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single progress
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ToggleableWearable::dyn_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_progress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progress"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean oneShot
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ToggleableWearable::dyn_oneShot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::dyn_oneShot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oneShot"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ToggleableWearable.Awake
void GlobalNamespace::ToggleableWearable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ToggleableWearable.LateUpdate
void GlobalNamespace::ToggleableWearable::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ToggleableWearable.LocalToggle
void GlobalNamespace::ToggleableWearable::LocalToggle(bool isLeftHand, bool playAudio) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::LocalToggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalToggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeftHand), ::il2cpp_utils::ExtractType(playAudio)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeftHand, playAudio);
}
// Autogenerated method: ToggleableWearable.SharedSetState
void GlobalNamespace::ToggleableWearable::SharedSetState(bool state, bool playAudio) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::SharedSetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SharedSetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(playAudio)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state, playAudio);
}
// Autogenerated method: ToggleableWearable..cctor
void GlobalNamespace::ToggleableWearable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ToggleableWearable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ToggleableWearable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TrailRendererScalerLocal
#include "GlobalNamespace/TrailRendererScalerLocal.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityLayerExtensions
#include "GlobalNamespace/UnityLayerExtensions.hpp"
// Including type: UnityLayer
#include "GlobalNamespace/UnityLayer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityLayerExtensions.ToLayerMask
int GlobalNamespace::UnityLayerExtensions::ToLayerMask(::GlobalNamespace::UnityLayer self) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayerExtensions::ToLayerMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityLayerExtensions", "ToLayerMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: UnityLayerExtensions.ToLayerIndex
int GlobalNamespace::UnityLayerExtensions::ToLayerIndex(::GlobalNamespace::UnityLayer self) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayerExtensions::ToLayerIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityLayerExtensions", "ToLayerIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: UnityLayerExtensions.IsOnLayer
bool GlobalNamespace::UnityLayerExtensions::IsOnLayer(::UnityEngine::GameObject* obj, ::GlobalNamespace::UnityLayer layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayerExtensions::IsOnLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityLayerExtensions", "IsOnLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(layer)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, layer);
}
// Autogenerated method: UnityLayerExtensions.SetLayer
void GlobalNamespace::UnityLayerExtensions::SetLayer(::UnityEngine::GameObject* obj, ::GlobalNamespace::UnityLayer layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayerExtensions::SetLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityLayerExtensions", "SetLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(layer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj, layer);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityLayer
#include "GlobalNamespace/UnityLayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityLayer Default
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "Default"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer Default
void GlobalNamespace::UnityLayer::_set_Default(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer TransparentFX
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_TransparentFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_TransparentFX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "TransparentFX"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer TransparentFX
void GlobalNamespace::UnityLayer::_set_TransparentFX(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_TransparentFX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "TransparentFX", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer IgnoreRaycast
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_IgnoreRaycast() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_IgnoreRaycast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "IgnoreRaycast"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer IgnoreRaycast
void GlobalNamespace::UnityLayer::_set_IgnoreRaycast(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_IgnoreRaycast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "IgnoreRaycast", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer Zone
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_Zone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_Zone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "Zone"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer Zone
void GlobalNamespace::UnityLayer::_set_Zone(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_Zone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "Zone", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer Water
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_Water() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_Water");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "Water"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer Water
void GlobalNamespace::UnityLayer::_set_Water(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_Water");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "Water", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer UI
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_UI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_UI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "UI"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer UI
void GlobalNamespace::UnityLayer::_set_UI(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_UI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "UI", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer TempRainInCityPleaseFixSomebody
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_TempRainInCityPleaseFixSomebody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_TempRainInCityPleaseFixSomebody");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "TempRainInCityPleaseFixSomebody"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer TempRainInCityPleaseFixSomebody
void GlobalNamespace::UnityLayer::_set_TempRainInCityPleaseFixSomebody(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_TempRainInCityPleaseFixSomebody");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "TempRainInCityPleaseFixSomebody", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaBodyCollider
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaBodyCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaBodyCollider");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaBodyCollider"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaBodyCollider
void GlobalNamespace::UnityLayer::_set_GorillaBodyCollider(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaBodyCollider");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaBodyCollider", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaObject
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaObject"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaObject
void GlobalNamespace::UnityLayer::_set_GorillaObject(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaObject", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaHand
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaHand"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaHand
void GlobalNamespace::UnityLayer::_set_GorillaHand(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaHand", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaTrigger
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaTrigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaTrigger"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaTrigger
void GlobalNamespace::UnityLayer::_set_GorillaTrigger(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaTrigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaTrigger", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer MetaReportScreen
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_MetaReportScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_MetaReportScreen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "MetaReportScreen"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer MetaReportScreen
void GlobalNamespace::UnityLayer::_set_MetaReportScreen(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_MetaReportScreen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "MetaReportScreen", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaHead
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaHead");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaHead"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaHead
void GlobalNamespace::UnityLayer::_set_GorillaHead(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaHead");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaHead", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaTagCollider
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaTagCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaTagCollider");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaTagCollider"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaTagCollider
void GlobalNamespace::UnityLayer::_set_GorillaTagCollider(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaTagCollider");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaTagCollider", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaBoundary
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaBoundary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaBoundary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaBoundary"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaBoundary
void GlobalNamespace::UnityLayer::_set_GorillaBoundary(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaBoundary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaBoundary", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaSpectator
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaSpectator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaSpectator");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaSpectator"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaSpectator
void GlobalNamespace::UnityLayer::_set_GorillaSpectator(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaSpectator");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaSpectator", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaInteractable
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaInteractable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaInteractable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaInteractable"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaInteractable
void GlobalNamespace::UnityLayer::_set_GorillaInteractable(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaInteractable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaInteractable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaParticle
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaParticle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaParticle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaParticle"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaParticle
void GlobalNamespace::UnityLayer::_set_GorillaParticle(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaParticle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaParticle", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaCosmetics
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaCosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaCosmetics");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaCosmetics"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaCosmetics
void GlobalNamespace::UnityLayer::_set_GorillaCosmetics(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaCosmetics");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaCosmetics", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer MirrorOnly
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_MirrorOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_MirrorOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "MirrorOnly"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer MirrorOnly
void GlobalNamespace::UnityLayer::_set_MirrorOnly(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_MirrorOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "MirrorOnly", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaThrowable
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaThrowable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaThrowable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaThrowable"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaThrowable
void GlobalNamespace::UnityLayer::_set_GorillaThrowable(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaThrowable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaThrowable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaCosmeticParticle
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaCosmeticParticle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaCosmeticParticle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaCosmeticParticle"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaCosmeticParticle
void GlobalNamespace::UnityLayer::_set_GorillaCosmeticParticle(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaCosmeticParticle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaCosmeticParticle", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer NoMirror
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_NoMirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_NoMirror");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "NoMirror"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer NoMirror
void GlobalNamespace::UnityLayer::_set_NoMirror(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_NoMirror");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "NoMirror", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer GorillaSlingshotCollider
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_GorillaSlingshotCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_GorillaSlingshotCollider");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "GorillaSlingshotCollider"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer GorillaSlingshotCollider
void GlobalNamespace::UnityLayer::_set_GorillaSlingshotCollider(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_GorillaSlingshotCollider");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "GorillaSlingshotCollider", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer RopeSwing
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_RopeSwing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_RopeSwing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "RopeSwing"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer RopeSwing
void GlobalNamespace::UnityLayer::_set_RopeSwing(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_RopeSwing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "RopeSwing", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer Prop
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_Prop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_Prop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "Prop"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer Prop
void GlobalNamespace::UnityLayer::_set_Prop(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_Prop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "Prop", value));
}
// Autogenerated static field getter
// Get static field: static public UnityLayer Bake
::GlobalNamespace::UnityLayer GlobalNamespace::UnityLayer::_get_Bake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_get_Bake");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UnityLayer>("", "UnityLayer", "Bake"));
}
// Autogenerated static field setter
// Set static field: static public UnityLayer Bake
void GlobalNamespace::UnityLayer::_set_Bake(::GlobalNamespace::UnityLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::_set_Bake");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityLayer", "Bake", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::UnityLayer::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityLayer::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WatchableStringSO
#include "GlobalNamespace/WatchableStringSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String InitialValue
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::WatchableStringSO::dyn_InitialValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::dyn_InitialValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InitialValue"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <_value>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::WatchableStringSO::dyn_$_value$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::dyn_$_value$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<_value>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private EnterPlayID enterPlayID
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EnterPlayID& GlobalNamespace::WatchableStringSO::dyn_enterPlayID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::dyn_enterPlayID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enterPlayID"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EnterPlayID*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Action`1<System.String>> callbacks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Action_1<::StringW>*>*& GlobalNamespace::WatchableStringSO::dyn_callbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::dyn_callbacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callbacks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Action_1<::StringW>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WatchableStringSO.get__value
::StringW GlobalNamespace::WatchableStringSO::get__value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::get__value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get__value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: WatchableStringSO.set__value
void GlobalNamespace::WatchableStringSO::set__value(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::set__value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set__value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WatchableStringSO.get_Value
::StringW GlobalNamespace::WatchableStringSO::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: WatchableStringSO.set_Value
void GlobalNamespace::WatchableStringSO::set_Value(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::set_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WatchableStringSO.EnsureInitialized
void GlobalNamespace::WatchableStringSO::EnsureInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::EnsureInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WatchableStringSO.AddCallback
void GlobalNamespace::WatchableStringSO::AddCallback(::System::Action_1<::StringW>* callback, bool shouldCallbackNow) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::AddCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(shouldCallbackNow)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, shouldCallbackNow);
}
// Autogenerated method: WatchableStringSO.RemoveCallback
void GlobalNamespace::WatchableStringSO::RemoveCallback(::System::Action_1<::StringW>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::RemoveCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: WatchableStringSO.ToString
::StringW GlobalNamespace::WatchableStringSO::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WatchableStringSO::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Object*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WaterRippleEffect
#include "GlobalNamespace/WaterRippleEffect.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: GorillaLocomotion.Swimming.WaterVolume
#include "GorillaLocomotion/Swimming/WaterVolume.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single ripplePlaybackSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterRippleEffect::dyn_ripplePlaybackSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_ripplePlaybackSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ripplePlaybackSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fadeOutDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterRippleEffect::dyn_fadeOutDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_fadeOutDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeOutDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fadeOutTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterRippleEffect::dyn_fadeOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_fadeOutTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeOutTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String ripplePlaybackSpeedName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::WaterRippleEffect::dyn_ripplePlaybackSpeedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_ripplePlaybackSpeedName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ripplePlaybackSpeedName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 ripplePlaybackSpeedHash
[[deprecated("Use field access instead!")]] int& GlobalNamespace::WaterRippleEffect::dyn_ripplePlaybackSpeedHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_ripplePlaybackSpeedHash");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ripplePlaybackSpeedHash"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rippleStartTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterRippleEffect::dyn_rippleStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_rippleStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rippleStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::WaterRippleEffect::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SpriteRenderer renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::WaterRippleEffect::dyn_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaLocomotion.Swimming.WaterVolume waterVolume
[[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& GlobalNamespace::WaterRippleEffect::dyn_waterVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::dyn_waterVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waterVolume"))->offset;
  return *reinterpret_cast<::GorillaLocomotion::Swimming::WaterVolume**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WaterRippleEffect.Awake
void GlobalNamespace::WaterRippleEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaterRippleEffect.Destroy
void GlobalNamespace::WaterRippleEffect::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::Destroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaterRippleEffect.PlayEffect
void GlobalNamespace::WaterRippleEffect::PlayEffect(::GorillaLocomotion::Swimming::WaterVolume* volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::PlayEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(volume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, volume);
}
// Autogenerated method: WaterRippleEffect.Update
void GlobalNamespace::WaterRippleEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterRippleEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WaterSplashEffect
#include "GlobalNamespace/WaterSplashEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: GorillaLocomotion.Swimming.WaterVolume
#include "GorillaLocomotion/Swimming/WaterVolume.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 lastPlayedBigSplashAudioClipIndex
int GlobalNamespace::WaterSplashEffect::_get_lastPlayedBigSplashAudioClipIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::_get_lastPlayedBigSplashAudioClipIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "WaterSplashEffect", "lastPlayedBigSplashAudioClipIndex"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 lastPlayedBigSplashAudioClipIndex
void GlobalNamespace::WaterSplashEffect::_set_lastPlayedBigSplashAudioClipIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::_set_lastPlayedBigSplashAudioClipIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "WaterSplashEffect", "lastPlayedBigSplashAudioClipIndex", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 lastPlayedSmallSplashEntryAudioClipIndex
int GlobalNamespace::WaterSplashEffect::_get_lastPlayedSmallSplashEntryAudioClipIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::_get_lastPlayedSmallSplashEntryAudioClipIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "WaterSplashEffect", "lastPlayedSmallSplashEntryAudioClipIndex"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 lastPlayedSmallSplashEntryAudioClipIndex
void GlobalNamespace::WaterSplashEffect::_set_lastPlayedSmallSplashEntryAudioClipIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::_set_lastPlayedSmallSplashEntryAudioClipIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "WaterSplashEffect", "lastPlayedSmallSplashEntryAudioClipIndex", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 lastPlayedSmallSplashExitAudioClipIndex
int GlobalNamespace::WaterSplashEffect::_get_lastPlayedSmallSplashExitAudioClipIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::_get_lastPlayedSmallSplashExitAudioClipIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "WaterSplashEffect", "lastPlayedSmallSplashExitAudioClipIndex"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 lastPlayedSmallSplashExitAudioClipIndex
void GlobalNamespace::WaterSplashEffect::_set_lastPlayedSmallSplashExitAudioClipIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::_set_lastPlayedSmallSplashExitAudioClipIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "WaterSplashEffect", "lastPlayedSmallSplashExitAudioClipIndex", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem[] bigSplashParticleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::WaterSplashEffect::dyn_bigSplashParticleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_bigSplashParticleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bigSplashParticleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem[] smallSplashParticleSystems
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::WaterSplashEffect::dyn_smallSplashParticleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_smallSplashParticleSystems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smallSplashParticleSystems"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bigSplashBaseGravityMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterSplashEffect::dyn_bigSplashBaseGravityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_bigSplashBaseGravityMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bigSplashBaseGravityMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bigSplashBaseStartSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterSplashEffect::dyn_bigSplashBaseStartSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_bigSplashBaseStartSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bigSplashBaseStartSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bigSplashBaseSimulationSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterSplashEffect::dyn_bigSplashBaseSimulationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_bigSplashBaseSimulationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bigSplashBaseSimulationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single smallSplashBaseGravityMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterSplashEffect::dyn_smallSplashBaseGravityMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_smallSplashBaseGravityMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smallSplashBaseGravityMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single smallSplashBaseStartSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterSplashEffect::dyn_smallSplashBaseStartSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_smallSplashBaseStartSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smallSplashBaseStartSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single smallSplashBaseSimulationSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterSplashEffect::dyn_smallSplashBaseSimulationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_smallSplashBaseSimulationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smallSplashBaseSimulationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lifeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterSplashEffect::dyn_lifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_lifeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lifeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single startTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WaterSplashEffect::dyn_startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_startTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::WaterSplashEffect::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] bigSplashAudioClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::WaterSplashEffect::dyn_bigSplashAudioClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_bigSplashAudioClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bigSplashAudioClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] smallSplashEntryAudioClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::WaterSplashEffect::dyn_smallSplashEntryAudioClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_smallSplashEntryAudioClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smallSplashEntryAudioClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] smallSplashExitAudioClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::WaterSplashEffect::dyn_smallSplashExitAudioClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_smallSplashExitAudioClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smallSplashExitAudioClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaLocomotion.Swimming.WaterVolume waterVolume
[[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& GlobalNamespace::WaterSplashEffect::dyn_waterVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::dyn_waterVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waterVolume"))->offset;
  return *reinterpret_cast<::GorillaLocomotion::Swimming::WaterVolume**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WaterSplashEffect.OnEnable
void GlobalNamespace::WaterSplashEffect::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaterSplashEffect.Destroy
void GlobalNamespace::WaterSplashEffect::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::Destroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaterSplashEffect.PlayEffect
void GlobalNamespace::WaterSplashEffect::PlayEffect(bool isBigSplash, bool isEntry, float scale, ::GorillaLocomotion::Swimming::WaterVolume* volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::PlayEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isBigSplash), ::il2cpp_utils::ExtractType(isEntry), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(volume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isBigSplash, isEntry, scale, volume);
}
// Autogenerated method: WaterSplashEffect.Update
void GlobalNamespace::WaterSplashEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaterSplashEffect.DeactivateParticleSystems
void GlobalNamespace::WaterSplashEffect::DeactivateParticleSystems(::ArrayW<::UnityEngine::ParticleSystem*> particleSystems) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::DeactivateParticleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateParticleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particleSystems)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, particleSystems);
}
// Autogenerated method: WaterSplashEffect.PlayParticleEffects
void GlobalNamespace::WaterSplashEffect::PlayParticleEffects(::ArrayW<::UnityEngine::ParticleSystem*> particleSystems) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::PlayParticleEffects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayParticleEffects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particleSystems)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, particleSystems);
}
// Autogenerated method: WaterSplashEffect.SetParticleEffectParameters
void GlobalNamespace::WaterSplashEffect::SetParticleEffectParameters(::ArrayW<::UnityEngine::ParticleSystem*> particleSystems, float scale, float baseGravMultiplier, float baseStartSpeed, float baseSimulationSpeed, ::GorillaLocomotion::Swimming::WaterVolume* waterVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::SetParticleEffectParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetParticleEffectParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particleSystems), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(baseGravMultiplier), ::il2cpp_utils::ExtractType(baseStartSpeed), ::il2cpp_utils::ExtractType(baseSimulationSpeed), ::il2cpp_utils::ExtractType(waterVolume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, particleSystems, scale, baseGravMultiplier, baseStartSpeed, baseSimulationSpeed, waterVolume);
}
// Autogenerated method: WaterSplashEffect.PlayRandomAudioClipWithoutRepeats
void GlobalNamespace::WaterSplashEffect::PlayRandomAudioClipWithoutRepeats(::ArrayW<::UnityEngine::AudioClip*> audioClips, ByRef<int> lastPlayedAudioClipIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::PlayRandomAudioClipWithoutRepeats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayRandomAudioClipWithoutRepeats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClips), ::il2cpp_utils::ExtractType(lastPlayedAudioClipIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, audioClips, byref(lastPlayedAudioClipIndex));
}
// Autogenerated method: WaterSplashEffect..cctor
void GlobalNamespace::WaterSplashEffect::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterSplashEffect::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "WaterSplashEffect", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaSetZoneTrigger
#include "GlobalNamespace/GorillaSetZoneTrigger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GTZone[] zones
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTZone>& GlobalNamespace::GorillaSetZoneTrigger::dyn_zones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSetZoneTrigger::dyn_zones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zones"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GTZone>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaSetZoneTrigger.OnBoxTriggered
void GlobalNamespace::GorillaSetZoneTrigger::OnBoxTriggered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSetZoneTrigger::OnBoxTriggered");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaTriggerBox*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTZone
#include "GlobalNamespace/GTZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTZone forest
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_forest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_forest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "forest"));
}
// Autogenerated static field setter
// Set static field: static public GTZone forest
void GlobalNamespace::GTZone::_set_forest(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_forest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "forest", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone city
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_city() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_city");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "city"));
}
// Autogenerated static field setter
// Set static field: static public GTZone city
void GlobalNamespace::GTZone::_set_city(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_city");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "city", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone basement
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_basement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_basement");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "basement"));
}
// Autogenerated static field setter
// Set static field: static public GTZone basement
void GlobalNamespace::GTZone::_set_basement(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_basement");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "basement", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone canyon
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_canyon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_canyon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "canyon"));
}
// Autogenerated static field setter
// Set static field: static public GTZone canyon
void GlobalNamespace::GTZone::_set_canyon(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_canyon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "canyon", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone beach
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_beach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_beach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "beach"));
}
// Autogenerated static field setter
// Set static field: static public GTZone beach
void GlobalNamespace::GTZone::_set_beach(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_beach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "beach", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone mountain
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_mountain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_mountain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "mountain"));
}
// Autogenerated static field setter
// Set static field: static public GTZone mountain
void GlobalNamespace::GTZone::_set_mountain(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_mountain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "mountain", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone skyJungle
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_skyJungle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_skyJungle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "skyJungle"));
}
// Autogenerated static field setter
// Set static field: static public GTZone skyJungle
void GlobalNamespace::GTZone::_set_skyJungle(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_skyJungle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "skyJungle", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone cave
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_cave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_cave");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "cave"));
}
// Autogenerated static field setter
// Set static field: static public GTZone cave
void GlobalNamespace::GTZone::_set_cave(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_cave");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "cave", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone cityWithSkyJungle
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_cityWithSkyJungle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_cityWithSkyJungle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "cityWithSkyJungle"));
}
// Autogenerated static field setter
// Set static field: static public GTZone cityWithSkyJungle
void GlobalNamespace::GTZone::_set_cityWithSkyJungle(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_cityWithSkyJungle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "cityWithSkyJungle", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone tutorial
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_tutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_tutorial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "tutorial"));
}
// Autogenerated static field setter
// Set static field: static public GTZone tutorial
void GlobalNamespace::GTZone::_set_tutorial(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_tutorial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "tutorial", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone rotating
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_rotating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_rotating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "rotating"));
}
// Autogenerated static field setter
// Set static field: static public GTZone rotating
void GlobalNamespace::GTZone::_set_rotating(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_rotating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "rotating", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone none
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_none() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_none");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "none"));
}
// Autogenerated static field setter
// Set static field: static public GTZone none
void GlobalNamespace::GTZone::_set_none(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_none");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "none", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone Metropolis
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_Metropolis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_Metropolis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "Metropolis"));
}
// Autogenerated static field setter
// Set static field: static public GTZone Metropolis
void GlobalNamespace::GTZone::_set_Metropolis(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_Metropolis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "Metropolis", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone cityNoBuildings
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_cityNoBuildings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_cityNoBuildings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "cityNoBuildings"));
}
// Autogenerated static field setter
// Set static field: static public GTZone cityNoBuildings
void GlobalNamespace::GTZone::_set_cityNoBuildings(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_cityNoBuildings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "cityNoBuildings", value));
}
// Autogenerated static field getter
// Get static field: static public GTZone attic
::GlobalNamespace::GTZone GlobalNamespace::GTZone::_get_attic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_get_attic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTZone>("", "GTZone", "attic"));
}
// Autogenerated static field setter
// Set static field: static public GTZone attic
void GlobalNamespace::GTZone::_set_attic(::GlobalNamespace::GTZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::_set_attic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTZone", "attic", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTZone::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTZone::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTSubZone
#include "GlobalNamespace/GTSubZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTSubZone none
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_none() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_none");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "none"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone none
void GlobalNamespace::GTSubZone::_set_none(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_none");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "none", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone store
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_store() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_store");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "store"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone store
void GlobalNamespace::GTSubZone::_set_store(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_store");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "store", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone store_dress_room
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_store_dress_room() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_store_dress_room");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "store_dress_room"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone store_dress_room
void GlobalNamespace::GTSubZone::_set_store_dress_room(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_store_dress_room");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "store_dress_room", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone store_mirror
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_store_mirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_store_mirror");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "store_mirror"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone store_mirror
void GlobalNamespace::GTSubZone::_set_store_mirror(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_store_mirror");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "store_mirror", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone store_f1
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_store_f1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_store_f1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "store_f1"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone store_f1
void GlobalNamespace::GTSubZone::_set_store_f1(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_store_f1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "store_f1", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone store_f2
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_store_f2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_store_f2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "store_f2"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone store_f2
void GlobalNamespace::GTSubZone::_set_store_f2(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_store_f2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "store_f2", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone store_f3
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_store_f3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_store_f3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "store_f3"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone store_f3
void GlobalNamespace::GTSubZone::_set_store_f3(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_store_f3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "store_f3", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone store_register
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_store_register() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_store_register");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "store_register"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone store_register
void GlobalNamespace::GTSubZone::_set_store_register(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_store_register");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "store_register", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone tree_room
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_tree_room() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_tree_room");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "tree_room"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone tree_room
void GlobalNamespace::GTSubZone::_set_tree_room(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_tree_room");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "tree_room", value));
}
// Autogenerated static field getter
// Get static field: static public GTSubZone entrance_tunnel
::GlobalNamespace::GTSubZone GlobalNamespace::GTSubZone::_get_entrance_tunnel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_get_entrance_tunnel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTSubZone>("", "GTSubZone", "entrance_tunnel"));
}
// Autogenerated static field setter
// Set static field: static public GTSubZone entrance_tunnel
void GlobalNamespace::GTSubZone::_set_entrance_tunnel(::GlobalNamespace::GTSubZone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::_set_entrance_tunnel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTSubZone", "entrance_tunnel", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTSubZone::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubZone::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneManagement
#include "GlobalNamespace/ZoneManagement.hpp"
// Including type: ZoneData
#include "GlobalNamespace/ZoneData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ZoneManagement instance
::GlobalNamespace::ZoneManagement* GlobalNamespace::ZoneManagement::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ZoneManagement*>("", "ZoneManagement", "instance"));
}
// Autogenerated static field setter
// Set static field: static public ZoneManagement instance
void GlobalNamespace::ZoneManagement::_set_instance(::GlobalNamespace::ZoneManagement* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ZoneManagement", "instance", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <hasInstance>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneManagement::dyn_$hasInstance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_$hasInstance$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<hasInstance>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ZoneData[] zones
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneData*>& GlobalNamespace::ZoneManagement::dyn_zones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_zones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zones"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ZoneData*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] allObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::ZoneManagement::dyn_allObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_allObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] objectActivationState
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::ZoneManagement::dyn_objectActivationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_objectActivationState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectActivationState"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action onZoneChanged
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::ZoneManagement::dyn_onZoneChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_onZoneChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onZoneChanged"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.String> scenesLoaded
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& GlobalNamespace::ZoneManagement::dyn_scenesLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_scenesLoaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesLoaded"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.String> scenesRequested
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& GlobalNamespace::ZoneManagement::dyn_scenesRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_scenesRequested");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesRequested"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.String> sceneForceStayLoaded
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& GlobalNamespace::ZoneManagement::dyn_sceneForceStayLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_sceneForceStayLoaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneForceStayLoaded"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.String> scenesToUnload
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::ZoneManagement::dyn_scenesToUnload() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::dyn_scenesToUnload");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenesToUnload"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneManagement.get_hasInstance
bool GlobalNamespace::ZoneManagement::get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::get_hasInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ZoneManagement.set_hasInstance
void GlobalNamespace::ZoneManagement::set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::set_hasInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hasInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ZoneManagement.Awake
void GlobalNamespace::ZoneManagement::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneManagement.SetActiveZone
void GlobalNamespace::ZoneManagement::SetActiveZone(::GlobalNamespace::GTZone zone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::SetActiveZone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneManagement", "SetActiveZone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zone)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zone);
}
// Autogenerated method: ZoneManagement.SetActiveZones
void GlobalNamespace::ZoneManagement::SetActiveZones(::ArrayW<::GlobalNamespace::GTZone> zones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::SetActiveZones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneManagement", "SetActiveZones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zones)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zones);
}
// Autogenerated method: ZoneManagement.IsInZone
bool GlobalNamespace::ZoneManagement::IsInZone(::GlobalNamespace::GTZone zone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::IsInZone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneManagement", "IsInZone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zone)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zone);
}
// Autogenerated method: ZoneManagement.GetPrimaryGameObject
::UnityEngine::GameObject* GlobalNamespace::ZoneManagement::GetPrimaryGameObject(::GlobalNamespace::GTZone zone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::GetPrimaryGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrimaryGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zone)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, zone);
}
// Autogenerated method: ZoneManagement.AddSceneToForceStayLoaded
void GlobalNamespace::ZoneManagement::AddSceneToForceStayLoaded(::StringW sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::AddSceneToForceStayLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneManagement", "AddSceneToForceStayLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sceneName);
}
// Autogenerated method: ZoneManagement.RemoveSceneFromForceStayLoaded
void GlobalNamespace::ZoneManagement::RemoveSceneFromForceStayLoaded(::StringW sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::RemoveSceneFromForceStayLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneManagement", "RemoveSceneFromForceStayLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sceneName);
}
// Autogenerated method: ZoneManagement.FindInstance
void GlobalNamespace::ZoneManagement::FindInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::FindInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneManagement", "FindInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ZoneManagement.IsSceneLoaded
bool GlobalNamespace::ZoneManagement::IsSceneLoaded(::GlobalNamespace::GTZone gtZone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::IsSceneLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSceneLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gtZone)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, gtZone);
}
// Autogenerated method: ZoneManagement.IsZoneActive
bool GlobalNamespace::ZoneManagement::IsZoneActive(::GlobalNamespace::GTZone zone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::IsZoneActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsZoneActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zone)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zone);
}
// Autogenerated method: ZoneManagement.GetAllLoadedScenes
::System::Collections::Generic::HashSet_1<::StringW>* GlobalNamespace::ZoneManagement::GetAllLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::GetAllLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::HashSet_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: ZoneManagement.IsSceneLoaded
bool GlobalNamespace::ZoneManagement::IsSceneLoaded(::StringW sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::IsSceneLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSceneLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, sceneName);
}
// Autogenerated method: ZoneManagement.Initialize
void GlobalNamespace::ZoneManagement::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneManagement.SetZones
void GlobalNamespace::ZoneManagement::SetZones(::ArrayW<::GlobalNamespace::GTZone> newActiveZones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::SetZones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetZones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newActiveZones)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newActiveZones);
}
// Autogenerated method: ZoneManagement.GetZoneData
::GlobalNamespace::ZoneData* GlobalNamespace::ZoneManagement::GetZoneData(::GlobalNamespace::GTZone zone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneManagement::GetZoneData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetZoneData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zone)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ZoneData*, false>(this, ___internal__method, zone);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneData
#include "GlobalNamespace/ZoneData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GTZone zone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::ZoneData::dyn_zone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneData::dyn_zone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String sceneName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ZoneData::dyn_sceneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneData::dyn_sceneName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] rootGameObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::ZoneData::dyn_rootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneData::dyn_rootGameObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rootGameObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean active
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneData::dyn_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneData::dyn_active");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "active"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneRootRegister
#include "GlobalNamespace/ZoneRootRegister.hpp"
// Including type: GorillaTag.WatchableGameObjectSO
#include "GorillaTag/WatchableGameObjectSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GorillaTag.WatchableGameObjectSO watchableSlot
[[deprecated("Use field access instead!")]] ::GorillaTag::WatchableGameObjectSO*& GlobalNamespace::ZoneRootRegister::dyn_watchableSlot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneRootRegister::dyn_watchableSlot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "watchableSlot"))->offset;
  return *reinterpret_cast<::GorillaTag::WatchableGameObjectSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneRootRegister.Awake
void GlobalNamespace::ZoneRootRegister::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneRootRegister::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneRootRegister.OnDestroy
void GlobalNamespace::ZoneRootRegister::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneRootRegister::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SceneIndex
#include "GlobalNamespace/SceneIndex.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SceneIndex GT
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_GT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_GT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "GT"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex GT
void GlobalNamespace::SceneIndex::_set_GT(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_GT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "GT", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Canyon
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Canyon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Canyon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Canyon"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Canyon
void GlobalNamespace::SceneIndex::_set_Canyon(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Canyon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Canyon", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Beach
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Beach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Beach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Beach"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Beach
void GlobalNamespace::SceneIndex::_set_Beach(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Beach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Beach", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Cave
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Cave() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Cave");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Cave"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Cave
void GlobalNamespace::SceneIndex::_set_Cave(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Cave");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Cave", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Basement
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Basement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Basement");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Basement"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Basement
void GlobalNamespace::SceneIndex::_set_Basement(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Basement");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Basement", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Mountain
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Mountain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Mountain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Mountain"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Mountain
void GlobalNamespace::SceneIndex::_set_Mountain(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Mountain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Mountain", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Skyjungle
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Skyjungle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Skyjungle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Skyjungle"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Skyjungle
void GlobalNamespace::SceneIndex::_set_Skyjungle(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Skyjungle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Skyjungle", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Rotating
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Rotating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Rotating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Rotating"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Rotating
void GlobalNamespace::SceneIndex::_set_Rotating(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Rotating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Rotating", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Metropolis
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Metropolis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Metropolis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Metropolis"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Metropolis
void GlobalNamespace::SceneIndex::_set_Metropolis(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Metropolis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Metropolis", value));
}
// Autogenerated static field getter
// Get static field: static public SceneIndex Attic
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndex::_get_Attic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_get_Attic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SceneIndex>("", "SceneIndex", "Attic"));
}
// Autogenerated static field setter
// Set static field: static public SceneIndex Attic
void GlobalNamespace::SceneIndex::_set_Attic(::GlobalNamespace::SceneIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::_set_Attic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndex", "Attic", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SceneIndex::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndex::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SceneIndexExtensions
#include "GlobalNamespace/SceneIndexExtensions.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: SceneIndex
#include "GlobalNamespace/SceneIndex.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.SceneManagement.LoadSceneMode
#include "UnityEngine/SceneManagement/LoadSceneMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 SceneIndex_COUNT
int GlobalNamespace::SceneIndexExtensions::_get_SceneIndex_COUNT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::_get_SceneIndex_COUNT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SceneIndexExtensions", "SceneIndex_COUNT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SceneIndex_COUNT
void GlobalNamespace::SceneIndexExtensions::_set_SceneIndex_COUNT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::_set_SceneIndex_COUNT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndexExtensions", "SceneIndex_COUNT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.Action>[] onSceneLoadCallbacks
::ArrayW<::System::Collections::Generic::List_1<::System::Action*>*> GlobalNamespace::SceneIndexExtensions::_get_onSceneLoadCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::_get_onSceneLoadCallbacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::System::Collections::Generic::List_1<::System::Action*>*>>("", "SceneIndexExtensions", "onSceneLoadCallbacks"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.Action>[] onSceneLoadCallbacks
void GlobalNamespace::SceneIndexExtensions::_set_onSceneLoadCallbacks(::ArrayW<::System::Collections::Generic::List_1<::System::Action*>*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::_set_onSceneLoadCallbacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndexExtensions", "onSceneLoadCallbacks", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.Action>[] onSceneUnloadCallbacks
::ArrayW<::System::Collections::Generic::List_1<::System::Action*>*> GlobalNamespace::SceneIndexExtensions::_get_onSceneUnloadCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::_get_onSceneUnloadCallbacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::System::Collections::Generic::List_1<::System::Action*>*>>("", "SceneIndexExtensions", "onSceneUnloadCallbacks"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.Action>[] onSceneUnloadCallbacks
void GlobalNamespace::SceneIndexExtensions::_set_onSceneUnloadCallbacks(::ArrayW<::System::Collections::Generic::List_1<::System::Action*>*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::_set_onSceneUnloadCallbacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneIndexExtensions", "onSceneUnloadCallbacks", value));
}
// Autogenerated method: SceneIndexExtensions.GetSceneIndex
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndexExtensions::GetSceneIndex(::UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::GetSceneIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "GetSceneIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SceneIndex, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene);
}
// Autogenerated method: SceneIndexExtensions.GetSceneIndex
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndexExtensions::GetSceneIndex(::UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::GetSceneIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "GetSceneIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SceneIndex, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: SceneIndexExtensions.GetSceneIndex
::GlobalNamespace::SceneIndex GlobalNamespace::SceneIndexExtensions::GetSceneIndex(::UnityEngine::Component* cmp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::GetSceneIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "GetSceneIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cmp)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SceneIndex, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cmp);
}
// Autogenerated method: SceneIndexExtensions.AddCallbackOnSceneLoad
void GlobalNamespace::SceneIndexExtensions::AddCallbackOnSceneLoad(::GlobalNamespace::SceneIndex scene, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::AddCallbackOnSceneLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "AddCallbackOnSceneLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, callback);
}
// Autogenerated method: SceneIndexExtensions.RemoveCallbackOnSceneLoad
void GlobalNamespace::SceneIndexExtensions::RemoveCallbackOnSceneLoad(::GlobalNamespace::SceneIndex scene, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::RemoveCallbackOnSceneLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "RemoveCallbackOnSceneLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, callback);
}
// Autogenerated method: SceneIndexExtensions.OnSceneLoad
void GlobalNamespace::SceneIndexExtensions::OnSceneLoad(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::OnSceneLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "OnSceneLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, mode);
}
// Autogenerated method: SceneIndexExtensions.AddCallbackOnSceneUnload
void GlobalNamespace::SceneIndexExtensions::AddCallbackOnSceneUnload(::GlobalNamespace::SceneIndex scene, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::AddCallbackOnSceneUnload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "AddCallbackOnSceneUnload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, callback);
}
// Autogenerated method: SceneIndexExtensions.RemoveCallbackOnSceneUnload
void GlobalNamespace::SceneIndexExtensions::RemoveCallbackOnSceneUnload(::GlobalNamespace::SceneIndex scene, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::RemoveCallbackOnSceneUnload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "RemoveCallbackOnSceneUnload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene, callback);
}
// Autogenerated method: SceneIndexExtensions.OnSceneUnload
void GlobalNamespace::SceneIndexExtensions::OnSceneUnload(::UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::OnSceneUnload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "OnSceneUnload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene);
}
// Autogenerated method: SceneIndexExtensions.Reset
void GlobalNamespace::SceneIndexExtensions::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneIndexExtensions::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneIndexExtensions", "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: XSceneRef
#include "GlobalNamespace/XSceneRef.hpp"
// Including type: XSceneRefTarget
#include "GlobalNamespace/XSceneRefTarget.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SceneIndex TargetScene
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SceneIndex& GlobalNamespace::XSceneRef::dyn_TargetScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::dyn_TargetScene");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TargetScene"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SceneIndex*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 TargetID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::XSceneRef::dyn_TargetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::dyn_TargetID");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TargetID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private XSceneRefTarget cached
[[deprecated("Use field access instead!")]] ::GlobalNamespace::XSceneRefTarget*& GlobalNamespace::XSceneRef::dyn_cached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::dyn_cached");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cached"))->offset;
  return *reinterpret_cast<::GlobalNamespace::XSceneRefTarget**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean didCache
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::XSceneRef::dyn_didCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::dyn_didCache");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "didCache"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: XSceneRef.TryResolve
bool GlobalNamespace::XSceneRef::TryResolve(ByRef<::GlobalNamespace::XSceneRefTarget*> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::TryResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::XSceneRefTarget*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: XSceneRef.TryResolve
bool GlobalNamespace::XSceneRef::TryResolve(ByRef<::UnityEngine::GameObject*> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::TryResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::UnityEngine::GameObject*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(result));
}
// Autogenerated method: XSceneRef.AddCallbackOnLoad
void GlobalNamespace::XSceneRef::AddCallbackOnLoad(::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::AddCallbackOnLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AddCallbackOnLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: XSceneRef.RemoveCallbackOnLoad
void GlobalNamespace::XSceneRef::RemoveCallbackOnLoad(::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::RemoveCallbackOnLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RemoveCallbackOnLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: XSceneRef.AddCallbackOnUnload
void GlobalNamespace::XSceneRef::AddCallbackOnUnload(::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::AddCallbackOnUnload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "AddCallbackOnUnload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: XSceneRef.RemoveCallbackOnUnload
void GlobalNamespace::XSceneRef::RemoveCallbackOnUnload(::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRef::RemoveCallbackOnUnload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RemoveCallbackOnUnload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: XSceneRefGlobalHub
#include "GlobalNamespace/XSceneRefGlobalHub.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: XSceneRefTarget
#include "GlobalNamespace/XSceneRefTarget.hpp"
// Including type: SceneIndex
#include "GlobalNamespace/SceneIndex.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.Collections.Generic.Dictionary`2<System.Int32,XSceneRefTarget>> registry
::System::Collections::Generic::List_1<::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::XSceneRefTarget*>*>* GlobalNamespace::XSceneRefGlobalHub::_get_registry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefGlobalHub::_get_registry");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::XSceneRefTarget*>*>*>("", "XSceneRefGlobalHub", "registry")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.Collections.Generic.Dictionary`2<System.Int32,XSceneRefTarget>> registry
void GlobalNamespace::XSceneRefGlobalHub::_set_registry(::System::Collections::Generic::List_1<::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::XSceneRefTarget*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefGlobalHub::_set_registry");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XSceneRefGlobalHub", "registry", value));
}
// Autogenerated method: XSceneRefGlobalHub.Register
void GlobalNamespace::XSceneRefGlobalHub::Register(int _ID, ::GlobalNamespace::XSceneRefTarget* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefGlobalHub::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XSceneRefGlobalHub", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_ID), ::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, _ID, obj);
}
// Autogenerated method: XSceneRefGlobalHub.Unregister
void GlobalNamespace::XSceneRefGlobalHub::Unregister(int _ID, ::GlobalNamespace::XSceneRefTarget* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefGlobalHub::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XSceneRefGlobalHub", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_ID), ::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, _ID, obj);
}
// Autogenerated method: XSceneRefGlobalHub.TryResolve
bool GlobalNamespace::XSceneRefGlobalHub::TryResolve(::GlobalNamespace::SceneIndex sceneIndex, int _ID, ByRef<::GlobalNamespace::XSceneRefTarget*> result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefGlobalHub::TryResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XSceneRefGlobalHub", "TryResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneIndex), ::il2cpp_utils::ExtractType(_ID), ::il2cpp_utils::ExtractIndependentType<::GlobalNamespace::XSceneRefTarget*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sceneIndex, _ID, byref(result));
}
// Autogenerated method: XSceneRefGlobalHub..cctor
void GlobalNamespace::XSceneRefGlobalHub::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefGlobalHub::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XSceneRefGlobalHub", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: XSceneRefTarget
#include "GlobalNamespace/XSceneRefTarget.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.DateTime epoch
::System::DateTime GlobalNamespace::XSceneRefTarget::_get_epoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::_get_epoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::DateTime>("", "XSceneRefTarget", "epoch"));
}
// Autogenerated static field setter
// Set static field: static private System.DateTime epoch
void GlobalNamespace::XSceneRefTarget::_set_epoch(::System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::_set_epoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XSceneRefTarget", "epoch", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 lastAssignedID
int GlobalNamespace::XSceneRefTarget::_get_lastAssignedID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::_get_lastAssignedID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "XSceneRefTarget", "lastAssignedID"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 lastAssignedID
void GlobalNamespace::XSceneRefTarget::_set_lastAssignedID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::_set_lastAssignedID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XSceneRefTarget", "lastAssignedID", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 UniqueID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::XSceneRefTarget::dyn_UniqueID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::dyn_UniqueID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UniqueID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastRegisteredID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::XSceneRefTarget::dyn_lastRegisteredID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::dyn_lastRegisteredID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastRegisteredID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: XSceneRefTarget.Awake
void GlobalNamespace::XSceneRefTarget::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: XSceneRefTarget.Reset
void GlobalNamespace::XSceneRefTarget::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: XSceneRefTarget.OnValidate
void GlobalNamespace::XSceneRefTarget::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: XSceneRefTarget.Register
void GlobalNamespace::XSceneRefTarget::Register(bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: XSceneRefTarget.OnDestroy
void GlobalNamespace::XSceneRefTarget::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: XSceneRefTarget.AssignNewID
void GlobalNamespace::XSceneRefTarget::AssignNewID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::AssignNewID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignNewID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: XSceneRefTarget.CreateNewID
int GlobalNamespace::XSceneRefTarget::CreateNewID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::CreateNewID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XSceneRefTarget", "CreateNewID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: XSceneRefTarget..cctor
void GlobalNamespace::XSceneRefTarget::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::XSceneRefTarget::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XSceneRefTarget", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneConditionalComponentEnabling
#include "GlobalNamespace/ZoneConditionalComponentEnabling.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GTZone zone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::ZoneConditionalComponentEnabling::dyn_zone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalComponentEnabling::dyn_zone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean invisibleWhileLoaded
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneConditionalComponentEnabling::dyn_invisibleWhileLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalComponentEnabling::dyn_invisibleWhileLoaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invisibleWhileLoaded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MonoBehaviour[] components
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MonoBehaviour*>& GlobalNamespace::ZoneConditionalComponentEnabling::dyn_components() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalComponentEnabling::dyn_components");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "components"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MonoBehaviour*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneConditionalComponentEnabling.Start
void GlobalNamespace::ZoneConditionalComponentEnabling::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalComponentEnabling::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneConditionalComponentEnabling.OnDestroy
void GlobalNamespace::ZoneConditionalComponentEnabling::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalComponentEnabling::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneConditionalComponentEnabling.OnZoneChanged
void GlobalNamespace::ZoneConditionalComponentEnabling::OnZoneChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalComponentEnabling::OnZoneChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnZoneChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneConditionalGameObjectEnabling
#include "GlobalNamespace/ZoneConditionalGameObjectEnabling.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GTZone zone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::ZoneConditionalGameObjectEnabling::dyn_zone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalGameObjectEnabling::dyn_zone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean invisibleWhileLoaded
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneConditionalGameObjectEnabling::dyn_invisibleWhileLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalGameObjectEnabling::dyn_invisibleWhileLoaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invisibleWhileLoaded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] gameObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::ZoneConditionalGameObjectEnabling::dyn_gameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalGameObjectEnabling::dyn_gameObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneConditionalGameObjectEnabling.Start
void GlobalNamespace::ZoneConditionalGameObjectEnabling::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalGameObjectEnabling::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneConditionalGameObjectEnabling.OnDestroy
void GlobalNamespace::ZoneConditionalGameObjectEnabling::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalGameObjectEnabling::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneConditionalGameObjectEnabling.OnZoneChanged
void GlobalNamespace::ZoneConditionalGameObjectEnabling::OnZoneChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalGameObjectEnabling::OnZoneChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnZoneChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneConditionalVisibility
#include "GlobalNamespace/ZoneConditionalVisibility.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GTZone zone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::ZoneConditionalVisibility::dyn_zone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalVisibility::dyn_zone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean invisibleWhileLoaded
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneConditionalVisibility::dyn_invisibleWhileLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalVisibility::dyn_invisibleWhileLoaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invisibleWhileLoaded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneConditionalVisibility.Start
void GlobalNamespace::ZoneConditionalVisibility::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalVisibility::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneConditionalVisibility.OnDestroy
void GlobalNamespace::ZoneConditionalVisibility::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalVisibility::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneConditionalVisibility.OnZoneChanged
void GlobalNamespace::ZoneConditionalVisibility::OnZoneChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneConditionalVisibility::OnZoneChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnZoneChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ScenePerformanceData
#include "GlobalNamespace/ScenePerformanceData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String mapName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ScenePerformanceData::dyn_mapName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePerformanceData::dyn_mapName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mapName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 msHigh
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenePerformanceData::dyn_msHigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePerformanceData::dyn_msHigh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "msHigh"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 medianMS
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenePerformanceData::dyn_medianMS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePerformanceData::dyn_medianMS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "medianMS"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 averageMS
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenePerformanceData::dyn_averageMS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePerformanceData::dyn_averageMS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "averageMS"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 fpsLow
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenePerformanceData::dyn_fpsLow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePerformanceData::dyn_fpsLow");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fpsLow"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 medianFPS
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenePerformanceData::dyn_medianFPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePerformanceData::dyn_medianFPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "medianFPS"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 averageFPS
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScenePerformanceData::dyn_averageFPS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScenePerformanceData::dyn_averageFPS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "averageFPS"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PerfTestFPSCaptureController
#include "GlobalNamespace/PerfTestFPSCaptureController.hpp"
// Including type: SerializablePerformanceReport`1
#include "GlobalNamespace/SerializablePerformanceReport_1.hpp"
// Including type: ScenePerformanceData
#include "GlobalNamespace/ScenePerformanceData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SerializablePerformanceReport`1<ScenePerformanceData> performanceSummary
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SerializablePerformanceReport_1<::GlobalNamespace::ScenePerformanceData*>*& GlobalNamespace::PerfTestFPSCaptureController::dyn_performanceSummary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerfTestFPSCaptureController::dyn_performanceSummary");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "performanceSummary"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SerializablePerformanceReport_1<::GlobalNamespace::ScenePerformanceData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single captureWaitTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PerfTestFPSCaptureController::dyn_captureWaitTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerfTestFPSCaptureController::dyn_captureWaitTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "captureWaitTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PerfTestGorillaTeleportManager
#include "GlobalNamespace/PerfTestGorillaTeleportManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PerfTestObjectDestroyer
#include "GlobalNamespace/PerfTestObjectDestroyer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PerfTestObjectDestroyer.Start
void GlobalNamespace::PerfTestObjectDestroyer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PerfTestObjectDestroyer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TestTeleportDestination
#include "GlobalNamespace/TestTeleportDestination.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GTZone[] zones
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTZone>& GlobalNamespace::TestTeleportDestination::dyn_zones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestTeleportDestination::dyn_zones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zones"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GTZone>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject teleportTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::TestTeleportDestination::dyn_teleportTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestTeleportDestination::dyn_teleportTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
