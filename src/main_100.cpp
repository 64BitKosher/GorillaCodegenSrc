// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GhostLab
#include "GlobalNamespace/GhostLab.hpp"
// Including type: GhostLabReliableState
#include "GlobalNamespace/GhostLabReliableState.hpp"
// Including type: IDCardScanner
#include "GlobalNamespace/IDCardScanner.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public IDCardScanner entranceDoorScanner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IDCardScanner*& GlobalNamespace::GhostLab::dyn_entranceDoorScanner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_entranceDoorScanner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "entranceDoorScanner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IDCardScanner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform outerDoor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GhostLab::dyn_outerDoor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_outerDoor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outerDoor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform innerDoor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GhostLab::dyn_innerDoor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_innerDoor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "innerDoor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 doorTravelDistance
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GhostLab::dyn_doorTravelDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_doorTravelDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorTravelDistance"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single doorMoveSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GhostLab::dyn_doorMoveSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_doorMoveSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorMoveSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single singleDoorMoveSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GhostLab::dyn_singleDoorMoveSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_singleDoorMoveSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "singleDoorMoveSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GhostLab/EntranceDoorsState doorState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLab::EntranceDoorsState& GlobalNamespace::GhostLab::dyn_doorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_doorState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GhostLab::EntranceDoorsState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GhostLabReliableState relState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLabReliableState*& GlobalNamespace::GhostLab::dyn_relState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_relState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "relState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GhostLabReliableState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform toggleDoorsParent
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GhostLab::dyn_toggleDoorsParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_toggleDoorsParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toggleDoorsParent"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] slidingDoor
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::GhostLab::dyn_slidingDoor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_slidingDoor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slidingDoor"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 singleDoorTravelDistance
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GhostLab::dyn_singleDoorTravelDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_singleDoorTravelDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "singleDoorTravelDistance"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] doorOpen
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::GhostLab::dyn_doorOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::dyn_doorOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorOpen"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GhostLab.Awake
void GlobalNamespace::GhostLab::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostLab.BuildValidationCheck
bool GlobalNamespace::GhostLab::BuildValidationCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::BuildValidationCheck");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GhostLab*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GhostLab.DoorButtonPress
void GlobalNamespace::GhostLab::DoorButtonPress(int buttonIndex, bool forSingleDoor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::DoorButtonPress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoorButtonPress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonIndex), ::il2cpp_utils::ExtractType(forSingleDoor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buttonIndex, forSingleDoor);
}
// Autogenerated method: GhostLab.UpdateDoorState
void GlobalNamespace::GhostLab::UpdateDoorState(int buttonIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::UpdateDoorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDoorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buttonIndex);
}
// Autogenerated method: GhostLab.UpdateEntranceDoorsState
void GlobalNamespace::GhostLab::UpdateEntranceDoorsState(int buttonIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::UpdateEntranceDoorsState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEntranceDoorsState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buttonIndex);
}
// Autogenerated method: GhostLab.Update
void GlobalNamespace::GhostLab::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostLab.SynchStates
void GlobalNamespace::GhostLab::SynchStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::SynchStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SynchStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostLab.IsDoorMoving
bool GlobalNamespace::GhostLab::IsDoorMoving(bool singleDoor, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::IsDoorMoving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDoorMoving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(singleDoor), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, singleDoor, index);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GhostLab/EntranceDoorsState
#include "GlobalNamespace/GhostLab.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GhostLab/EntranceDoorsState BothClosed
::GlobalNamespace::GhostLab::EntranceDoorsState GlobalNamespace::GhostLab::EntranceDoorsState::_get_BothClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::EntranceDoorsState::_get_BothClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GhostLab::EntranceDoorsState>("", "GhostLab/EntranceDoorsState", "BothClosed"));
}
// Autogenerated static field setter
// Set static field: static public GhostLab/EntranceDoorsState BothClosed
void GlobalNamespace::GhostLab::EntranceDoorsState::_set_BothClosed(::GlobalNamespace::GhostLab::EntranceDoorsState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::EntranceDoorsState::_set_BothClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GhostLab/EntranceDoorsState", "BothClosed", value));
}
// Autogenerated static field getter
// Get static field: static public GhostLab/EntranceDoorsState InnerDoorOpen
::GlobalNamespace::GhostLab::EntranceDoorsState GlobalNamespace::GhostLab::EntranceDoorsState::_get_InnerDoorOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::EntranceDoorsState::_get_InnerDoorOpen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GhostLab::EntranceDoorsState>("", "GhostLab/EntranceDoorsState", "InnerDoorOpen"));
}
// Autogenerated static field setter
// Set static field: static public GhostLab/EntranceDoorsState InnerDoorOpen
void GlobalNamespace::GhostLab::EntranceDoorsState::_set_InnerDoorOpen(::GlobalNamespace::GhostLab::EntranceDoorsState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::EntranceDoorsState::_set_InnerDoorOpen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GhostLab/EntranceDoorsState", "InnerDoorOpen", value));
}
// Autogenerated static field getter
// Get static field: static public GhostLab/EntranceDoorsState OuterDoorOpen
::GlobalNamespace::GhostLab::EntranceDoorsState GlobalNamespace::GhostLab::EntranceDoorsState::_get_OuterDoorOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::EntranceDoorsState::_get_OuterDoorOpen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GhostLab::EntranceDoorsState>("", "GhostLab/EntranceDoorsState", "OuterDoorOpen"));
}
// Autogenerated static field setter
// Set static field: static public GhostLab/EntranceDoorsState OuterDoorOpen
void GlobalNamespace::GhostLab::EntranceDoorsState::_set_OuterDoorOpen(::GlobalNamespace::GhostLab::EntranceDoorsState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::EntranceDoorsState::_set_OuterDoorOpen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GhostLab/EntranceDoorsState", "OuterDoorOpen", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GhostLab::EntranceDoorsState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLab::EntranceDoorsState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GhostLabButton
#include "GlobalNamespace/GhostLabButton.hpp"
// Including type: GhostLab
#include "GlobalNamespace/GhostLab.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GhostLab ghostLab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLab*& GlobalNamespace::GhostLabButton::dyn_ghostLab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabButton::dyn_ghostLab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ghostLab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GhostLab**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 buttonIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GhostLabButton::dyn_buttonIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabButton::dyn_buttonIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean forSingleDoor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GhostLabButton::dyn_forSingleDoor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabButton::dyn_forSingleDoor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forSingleDoor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GhostLabButton.BuildValidationCheck
bool GlobalNamespace::GhostLabButton::BuildValidationCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabButton::BuildValidationCheck");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GhostLabButton*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GhostLabButton.ButtonActivation
void GlobalNamespace::GhostLabButton::ButtonActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabButton::ButtonActivation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GhostLabReliableState
#include "GlobalNamespace/GhostLabReliableState.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GhostLab/EntranceDoorsState doorState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLab::EntranceDoorsState& GlobalNamespace::GhostLabReliableState::dyn_doorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::dyn_doorState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doorState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GhostLab::EntranceDoorsState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 singleDoorCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GhostLabReliableState::dyn_singleDoorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::dyn_singleDoorCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "singleDoorCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean[] singleDoorOpen
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::GhostLabReliableState::dyn_singleDoorOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::dyn_singleDoorOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "singleDoorOpen"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GhostLabReliableState.Awake
void GlobalNamespace::GhostLabReliableState::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostLabReliableState.OnOwnerChange
void GlobalNamespace::GhostLabReliableState::OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::OnOwnerChange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GhostLabReliableState*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, previousOwner);
}
// Autogenerated method: GhostLabReliableState.OnPhotonSerializeView
void GlobalNamespace::GhostLabReliableState::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GhostLabReliableState*), 56));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: GhostLabReliableState.UpdateEntranceDoorsState
void GlobalNamespace::GhostLabReliableState::UpdateEntranceDoorsState(::GlobalNamespace::GhostLab::EntranceDoorsState newState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::UpdateEntranceDoorsState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEntranceDoorsState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newState);
}
// Autogenerated method: GhostLabReliableState.UpdateSingleDoorState
void GlobalNamespace::GhostLabReliableState::UpdateSingleDoorState(int singleDoorIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::UpdateSingleDoorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSingleDoorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(singleDoorIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, singleDoorIndex);
}
// Autogenerated method: GhostLabReliableState.RemoteEntranceDoorState
void GlobalNamespace::GhostLabReliableState::RemoteEntranceDoorState(::GlobalNamespace::GhostLab::EntranceDoorsState newState, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::RemoteEntranceDoorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoteEntranceDoorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newState), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newState, info);
}
// Autogenerated method: GhostLabReliableState.RemoteSingleDoorState
void GlobalNamespace::GhostLabReliableState::RemoteSingleDoorState(int doorIndex, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GhostLabReliableState::RemoteSingleDoorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoteSingleDoorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(doorIndex), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, doorIndex, info);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: IDCardScanner
#include "GlobalNamespace/IDCardScanner.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: GhostLab
#include "GlobalNamespace/GhostLab.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public TransferrableObject myTransferrableObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::IDCardScanner::dyn_myTransferrableObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDCardScanner::dyn_myTransferrableObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myTransferrableObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GhostLab ghostLab
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GhostLab*& GlobalNamespace::IDCardScanner::dyn_ghostLab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDCardScanner::dyn_ghostLab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ghostLab"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GhostLab**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: IDCardScanner.BuildValidationCheck
bool GlobalNamespace::IDCardScanner::BuildValidationCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDCardScanner::BuildValidationCheck");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IDCardScanner*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IDCardScanner.Awake
void GlobalNamespace::IDCardScanner::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDCardScanner::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IDCardScanner.OnTriggerEnter
void GlobalNamespace::IDCardScanner::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDCardScanner::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ScannableIDCard
#include "GlobalNamespace/ScannableIDCard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScannableIDCard.Start
void GlobalNamespace::ScannableIDCard::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScannableIDCard::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScannableIDCard.Update
void GlobalNamespace::ScannableIDCard::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScannableIDCard::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SecondLookSkeleton
#include "GlobalNamespace/SecondLookSkeleton.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SkeletonPathingNode
#include "GlobalNamespace/SkeletonPathingNode.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SecondLookSkeletonSynchValues
#include "GlobalNamespace/SecondLookSkeletonSynchValues.hpp"
// Including type: NetPlayer
#include "GlobalNamespace/NetPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] angerPoint
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::SecondLookSkeleton::dyn_angerPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_angerPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angerPoint"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 angerPointIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SecondLookSkeleton::dyn_angerPointIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_angerPointIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angerPointIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SkeletonPathingNode[] pathPoints
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SkeletonPathingNode*>& GlobalNamespace::SecondLookSkeleton::dyn_pathPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_pathPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pathPoints"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SkeletonPathingNode*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SkeletonPathingNode[] exitPoints
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SkeletonPathingNode*>& GlobalNamespace::SecondLookSkeleton::dyn_exitPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_exitPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "exitPoints"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SkeletonPathingNode*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform heightOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SecondLookSkeleton::dyn_heightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_heightOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heightOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean firstLookActivated
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SecondLookSkeleton::dyn_firstLookActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_firstLookActivated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "firstLookActivated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean lookedAway
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SecondLookSkeleton::dyn_lookedAway() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_lookedAway");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookedAway"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean currentlyLooking
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SecondLookSkeleton::dyn_currentlyLooking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_currentlyLooking");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentlyLooking"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single ghostActivationDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_ghostActivationDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_ghostActivationDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ghostActivationDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject spookyGhost
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SecondLookSkeleton::dyn_spookyGhost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_spookyGhost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spookyGhost"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeFirstAppeared
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_timeFirstAppeared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_timeFirstAppeared");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeFirstAppeared"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeToFirstDisappear
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_timeToFirstDisappear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_timeToFirstDisappear");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeToFirstDisappear"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SecondLookSkeleton/GhostState currentState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeleton::GhostState& GlobalNamespace::SecondLookSkeleton::dyn_currentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_currentState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SecondLookSkeleton::GhostState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject spookyText
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SecondLookSkeleton::dyn_spookyText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_spookyText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spookyText"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single patrolSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_patrolSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_patrolSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "patrolSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single chaseSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_chaseSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_chaseSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chaseSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single caughtSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_caughtSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_caughtSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "caughtSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SkeletonPathingNode firstNode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SkeletonPathingNode*& GlobalNamespace::SecondLookSkeleton::dyn_firstNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_firstNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "firstNode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SkeletonPathingNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SkeletonPathingNode currentNode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SkeletonPathingNode*& GlobalNamespace::SecondLookSkeleton::dyn_currentNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_currentNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentNode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SkeletonPathingNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SkeletonPathingNode nextNode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SkeletonPathingNode*& GlobalNamespace::SecondLookSkeleton::dyn_nextNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_nextNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextNode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SkeletonPathingNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform lookSource
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SecondLookSkeleton::dyn_lookSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_lookSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookSource"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform playerTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SecondLookSkeleton::dyn_playerTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_playerTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single reachNodeDist
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_reachNodeDist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_reachNodeDist");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reachNodeDist"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxRotSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_maxRotSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_maxRotSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxRotSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hapticStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_hapticStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_hapticStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hapticDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_hapticDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_hapticDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 offsetGrabPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SecondLookSkeleton::dyn_offsetGrabPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_offsetGrabPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offsetGrabPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single throwForce
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_throwForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_throwForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "throwForce"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::SecondLookSkeleton::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bodyHeightOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_bodyHeightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_bodyHeightOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bodyHeightOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeThrown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_timeThrown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_timeThrown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeThrown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timeThrownCooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_timeThrownCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_timeThrownCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeThrownCooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single catchDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_catchDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_catchDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "catchDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxSeeDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SecondLookSkeleton::dyn_maxSeeDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_maxSeeDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSeeDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit[] rHits
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& GlobalNamespace::SecondLookSkeleton::dyn_rHits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_rHits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rHits"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RaycastHit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask mask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::SecondLookSkeleton::dyn_mask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_mask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask playerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::SecondLookSkeleton::dyn_playerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_playerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::SecondLookSkeleton::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip initialScream
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::SecondLookSkeleton::dyn_initialScream() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_initialScream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialScream"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip patrolLoop
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::SecondLookSkeleton::dyn_patrolLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_patrolLoop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "patrolLoop"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip chaseLoop
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::SecondLookSkeleton::dyn_chaseLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_chaseLoop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chaseLoop"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip grabbedSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::SecondLookSkeleton::dyn_grabbedSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_grabbedSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabbedSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip carryingLoop
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::SecondLookSkeleton::dyn_carryingLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_carryingLoop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "carryingLoop"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip throwSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::SecondLookSkeleton::dyn_throwSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_throwSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "throwSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<SkeletonPathingNode> resetChaseHistory
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SkeletonPathingNode*>*& GlobalNamespace::SecondLookSkeleton::dyn_resetChaseHistory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_resetChaseHistory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resetChaseHistory"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::SkeletonPathingNode*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SecondLookSkeletonSynchValues synchValues
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeletonSynchValues*& GlobalNamespace::SecondLookSkeleton::dyn_synchValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_synchValues");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "synchValues"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SecondLookSkeletonSynchValues**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean localCaught
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SecondLookSkeleton::dyn_localCaught() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_localCaught");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localCaught"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean localThrown
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SecondLookSkeleton::dyn_localThrown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_localThrown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localThrown"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<NetPlayer> playersSeen
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::NetPlayer*>*& GlobalNamespace::SecondLookSkeleton::dyn_playersSeen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_playersSeen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playersSeen"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::NetPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean tapped
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SecondLookSkeleton::dyn_tapped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_tapped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tapped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SecondLookSkeleton::dyn_initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit closest
[[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& GlobalNamespace::SecondLookSkeleton::dyn_closest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::dyn_closest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closest"))->offset;
  return *reinterpret_cast<::UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SecondLookSkeleton.Start
void GlobalNamespace::SecondLookSkeleton::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.Update
void GlobalNamespace::SecondLookSkeleton::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.ChangeState
void GlobalNamespace::SecondLookSkeleton::ChangeState(::GlobalNamespace::SecondLookSkeleton::GhostState newState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::ChangeState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newState);
}
// Autogenerated method: SecondLookSkeleton.ProcessGhostState
void GlobalNamespace::SecondLookSkeleton::ProcessGhostState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::ProcessGhostState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessGhostState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.CaughtPlayerUpdate
void GlobalNamespace::SecondLookSkeleton::CaughtPlayerUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::CaughtPlayerUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CaughtPlayerUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.SetTappedState
void GlobalNamespace::SecondLookSkeleton::SetTappedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::SetTappedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTappedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.FollowPosition
void GlobalNamespace::SecondLookSkeleton::FollowPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::FollowPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FollowPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.CheckActivateGhost
void GlobalNamespace::SecondLookSkeleton::CheckActivateGhost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::CheckActivateGhost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckActivateGhost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.CanSeePlayer
bool GlobalNamespace::SecondLookSkeleton::CanSeePlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::CanSeePlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanSeePlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.CanSeePlayerWithResults
bool GlobalNamespace::SecondLookSkeleton::CanSeePlayerWithResults(ByRef<::UnityEngine::RaycastHit> closest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::CanSeePlayerWithResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanSeePlayerWithResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::UnityEngine::RaycastHit&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(closest));
}
// Autogenerated method: SecondLookSkeleton.ActivateGhost
void GlobalNamespace::SecondLookSkeleton::ActivateGhost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::ActivateGhost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateGhost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.StartChasing
void GlobalNamespace::SecondLookSkeleton::StartChasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::StartChasing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartChasing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.CheckPlayerSeen
bool GlobalNamespace::SecondLookSkeleton::CheckPlayerSeen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::CheckPlayerSeen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckPlayerSeen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.RemoteActivateGhost
void GlobalNamespace::SecondLookSkeleton::RemoteActivateGhost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::RemoteActivateGhost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoteActivateGhost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.RemotePlayerSeen
void GlobalNamespace::SecondLookSkeleton::RemotePlayerSeen(::GlobalNamespace::NetPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::RemotePlayerSeen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemotePlayerSeen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: SecondLookSkeleton.RemotePlayerCaught
void GlobalNamespace::SecondLookSkeleton::RemotePlayerCaught(::GlobalNamespace::NetPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::RemotePlayerCaught");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemotePlayerCaught", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: SecondLookSkeleton.IsCurrentlyLooking
bool GlobalNamespace::SecondLookSkeleton::IsCurrentlyLooking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::IsCurrentlyLooking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsCurrentlyLooking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.PatrolMove
void GlobalNamespace::SecondLookSkeleton::PatrolMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::PatrolMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PatrolMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.CheckReachedNextNode
void GlobalNamespace::SecondLookSkeleton::CheckReachedNextNode(bool forChuck, bool forChase) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::CheckReachedNextNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckReachedNextNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forChuck), ::il2cpp_utils::ExtractType(forChase)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, forChuck, forChase);
}
// Autogenerated method: SecondLookSkeleton.ChaseMove
void GlobalNamespace::SecondLookSkeleton::ChaseMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::ChaseMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChaseMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.CaughtMove
void GlobalNamespace::SecondLookSkeleton::CaughtMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::CaughtMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CaughtMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.SyncNodes
void GlobalNamespace::SecondLookSkeleton::SyncNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::SyncNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SyncNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.SetNodes
void GlobalNamespace::SecondLookSkeleton::SetNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::SetNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.GhostAtExit
bool GlobalNamespace::SecondLookSkeleton::GhostAtExit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostAtExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GhostAtExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.GhostMove
void GlobalNamespace::SecondLookSkeleton::GhostMove(::UnityEngine::Transform* target, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GhostMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(speed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, speed);
}
// Autogenerated method: SecondLookSkeleton.DeactivateGhost
void GlobalNamespace::SecondLookSkeleton::DeactivateGhost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::DeactivateGhost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateGhost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.CanGrab
bool GlobalNamespace::SecondLookSkeleton::CanGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::CanGrab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanGrab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.GrabPlayer
void GlobalNamespace::SecondLookSkeleton::GrabPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GrabPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.FloatPlayer
void GlobalNamespace::SecondLookSkeleton::FloatPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::FloatPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FloatPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.ChuckPlayer
void GlobalNamespace::SecondLookSkeleton::ChuckPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::ChuckPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChuckPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.SetHeightOffset
void GlobalNamespace::SecondLookSkeleton::SetHeightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::SetHeightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHeightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeleton.IsMine
bool GlobalNamespace::SecondLookSkeleton::IsMine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::IsMine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SecondLookSkeleton/GhostState
#include "GlobalNamespace/SecondLookSkeleton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SecondLookSkeleton/GhostState Unactivated
::GlobalNamespace::SecondLookSkeleton::GhostState GlobalNamespace::SecondLookSkeleton::GhostState::_get_Unactivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_get_Unactivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SecondLookSkeleton::GhostState>("", "SecondLookSkeleton/GhostState", "Unactivated"));
}
// Autogenerated static field setter
// Set static field: static public SecondLookSkeleton/GhostState Unactivated
void GlobalNamespace::SecondLookSkeleton::GhostState::_set_Unactivated(::GlobalNamespace::SecondLookSkeleton::GhostState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_set_Unactivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecondLookSkeleton/GhostState", "Unactivated", value));
}
// Autogenerated static field getter
// Get static field: static public SecondLookSkeleton/GhostState Activated
::GlobalNamespace::SecondLookSkeleton::GhostState GlobalNamespace::SecondLookSkeleton::GhostState::_get_Activated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_get_Activated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SecondLookSkeleton::GhostState>("", "SecondLookSkeleton/GhostState", "Activated"));
}
// Autogenerated static field setter
// Set static field: static public SecondLookSkeleton/GhostState Activated
void GlobalNamespace::SecondLookSkeleton::GhostState::_set_Activated(::GlobalNamespace::SecondLookSkeleton::GhostState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_set_Activated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecondLookSkeleton/GhostState", "Activated", value));
}
// Autogenerated static field getter
// Get static field: static public SecondLookSkeleton/GhostState Patrolling
::GlobalNamespace::SecondLookSkeleton::GhostState GlobalNamespace::SecondLookSkeleton::GhostState::_get_Patrolling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_get_Patrolling");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SecondLookSkeleton::GhostState>("", "SecondLookSkeleton/GhostState", "Patrolling"));
}
// Autogenerated static field setter
// Set static field: static public SecondLookSkeleton/GhostState Patrolling
void GlobalNamespace::SecondLookSkeleton::GhostState::_set_Patrolling(::GlobalNamespace::SecondLookSkeleton::GhostState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_set_Patrolling");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecondLookSkeleton/GhostState", "Patrolling", value));
}
// Autogenerated static field getter
// Get static field: static public SecondLookSkeleton/GhostState Chasing
::GlobalNamespace::SecondLookSkeleton::GhostState GlobalNamespace::SecondLookSkeleton::GhostState::_get_Chasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_get_Chasing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SecondLookSkeleton::GhostState>("", "SecondLookSkeleton/GhostState", "Chasing"));
}
// Autogenerated static field setter
// Set static field: static public SecondLookSkeleton/GhostState Chasing
void GlobalNamespace::SecondLookSkeleton::GhostState::_set_Chasing(::GlobalNamespace::SecondLookSkeleton::GhostState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_set_Chasing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecondLookSkeleton/GhostState", "Chasing", value));
}
// Autogenerated static field getter
// Get static field: static public SecondLookSkeleton/GhostState CaughtPlayer
::GlobalNamespace::SecondLookSkeleton::GhostState GlobalNamespace::SecondLookSkeleton::GhostState::_get_CaughtPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_get_CaughtPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SecondLookSkeleton::GhostState>("", "SecondLookSkeleton/GhostState", "CaughtPlayer"));
}
// Autogenerated static field setter
// Set static field: static public SecondLookSkeleton/GhostState CaughtPlayer
void GlobalNamespace::SecondLookSkeleton::GhostState::_set_CaughtPlayer(::GlobalNamespace::SecondLookSkeleton::GhostState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_set_CaughtPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecondLookSkeleton/GhostState", "CaughtPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public SecondLookSkeleton/GhostState PlayerThrown
::GlobalNamespace::SecondLookSkeleton::GhostState GlobalNamespace::SecondLookSkeleton::GhostState::_get_PlayerThrown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_get_PlayerThrown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SecondLookSkeleton::GhostState>("", "SecondLookSkeleton/GhostState", "PlayerThrown"));
}
// Autogenerated static field setter
// Set static field: static public SecondLookSkeleton/GhostState PlayerThrown
void GlobalNamespace::SecondLookSkeleton::GhostState::_set_PlayerThrown(::GlobalNamespace::SecondLookSkeleton::GhostState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_set_PlayerThrown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecondLookSkeleton/GhostState", "PlayerThrown", value));
}
// Autogenerated static field getter
// Get static field: static public SecondLookSkeleton/GhostState Reset
::GlobalNamespace::SecondLookSkeleton::GhostState GlobalNamespace::SecondLookSkeleton::GhostState::_get_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_get_Reset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SecondLookSkeleton::GhostState>("", "SecondLookSkeleton/GhostState", "Reset"));
}
// Autogenerated static field setter
// Set static field: static public SecondLookSkeleton/GhostState Reset
void GlobalNamespace::SecondLookSkeleton::GhostState::_set_Reset(::GlobalNamespace::SecondLookSkeleton::GhostState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::_set_Reset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SecondLookSkeleton/GhostState", "Reset", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SecondLookSkeleton::GhostState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeleton::GhostState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SecondLookSkeletonEnabler
#include "GlobalNamespace/SecondLookSkeletonEnabler.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: SecondLookSkeleton
#include "GlobalNamespace/SecondLookSkeleton.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean isTapped
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SecondLookSkeletonEnabler::dyn_isTapped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonEnabler::dyn_isTapped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isTapped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource playOnDisappear
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::SecondLookSkeletonEnabler::dyn_playOnDisappear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonEnabler::dyn_playOnDisappear");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playOnDisappear"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem particles
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::SecondLookSkeletonEnabler::dyn_particles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonEnabler::dyn_particles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particles"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject spookyText
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SecondLookSkeletonEnabler::dyn_spookyText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonEnabler::dyn_spookyText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spookyText"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SecondLookSkeleton skele
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeleton*& GlobalNamespace::SecondLookSkeletonEnabler::dyn_skele() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonEnabler::dyn_skele");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skele"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SecondLookSkeleton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SecondLookSkeletonEnabler.Awake
void GlobalNamespace::SecondLookSkeletonEnabler::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonEnabler::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SecondLookSkeletonEnabler.OnTapLocal
void GlobalNamespace::SecondLookSkeletonEnabler::OnTapLocal(float tapStrength, float tapTime, ::Photon::Pun::PhotonMessageInfo sender) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonEnabler::OnTapLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::Tappable*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tapStrength, tapTime, sender);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SecondLookSkeletonSynchValues
#include "GlobalNamespace/SecondLookSkeletonSynchValues.hpp"
// Including type: SecondLookSkeleton
#include "GlobalNamespace/SecondLookSkeleton.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SecondLookSkeleton/GhostState currentState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeleton::GhostState& GlobalNamespace::SecondLookSkeletonSynchValues::dyn_currentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::dyn_currentState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SecondLookSkeleton::GhostState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SecondLookSkeletonSynchValues::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::dyn_position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SecondLookSkeletonSynchValues::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::dyn_rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SecondLookSkeleton mySkeleton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SecondLookSkeleton*& GlobalNamespace::SecondLookSkeletonSynchValues::dyn_mySkeleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::dyn_mySkeleton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mySkeleton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SecondLookSkeleton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 currentNode
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SecondLookSkeletonSynchValues::dyn_currentNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::dyn_currentNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentNode"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 nextNode
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SecondLookSkeletonSynchValues::dyn_nextNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::dyn_nextNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextNode"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 angerPoint
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SecondLookSkeletonSynchValues::dyn_angerPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::dyn_angerPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angerPoint"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SecondLookSkeletonSynchValues.OnOwnerChange
void GlobalNamespace::SecondLookSkeletonSynchValues::OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::OnOwnerChange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SecondLookSkeletonSynchValues*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, previousOwner);
}
// Autogenerated method: SecondLookSkeletonSynchValues.OnPhotonSerializeView
void GlobalNamespace::SecondLookSkeletonSynchValues::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SecondLookSkeletonSynchValues*), 56));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: SecondLookSkeletonSynchValues.RemoteActivateGhost
void GlobalNamespace::SecondLookSkeletonSynchValues::RemoteActivateGhost(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::RemoteActivateGhost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoteActivateGhost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated method: SecondLookSkeletonSynchValues.RemotePlayerSeen
void GlobalNamespace::SecondLookSkeletonSynchValues::RemotePlayerSeen(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::RemotePlayerSeen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemotePlayerSeen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated method: SecondLookSkeletonSynchValues.RemotePlayerCaught
void GlobalNamespace::SecondLookSkeletonSynchValues::RemotePlayerCaught(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SecondLookSkeletonSynchValues::RemotePlayerCaught");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemotePlayerCaught", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SkeletonPathingNode
#include "GlobalNamespace/SkeletonPathingNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean ejectionPoint
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SkeletonPathingNode::dyn_ejectionPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SkeletonPathingNode::dyn_ejectionPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ejectionPoint"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SkeletonPathingNode[] connectedNodes
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SkeletonPathingNode*>& GlobalNamespace::SkeletonPathingNode::dyn_connectedNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SkeletonPathingNode::dyn_connectedNodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedNodes"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SkeletonPathingNode*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single distanceToExitNode
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SkeletonPathingNode::dyn_distanceToExitNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SkeletonPathingNode::dyn_distanceToExitNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distanceToExitNode"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SkeletonPathingNode.Awake
void GlobalNamespace::SkeletonPathingNode::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SkeletonPathingNode::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WindTunnelRibbonProcess
#include "GlobalNamespace/WindTunnelRibbonProcess.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: WindTunnelRibbonProcess.Start
void GlobalNamespace::WindTunnelRibbonProcess::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WindTunnelRibbonProcess::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WindTunnelRibbonProcess.Update
void GlobalNamespace::WindTunnelRibbonProcess::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WindTunnelRibbonProcess::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BakeBlendShape
#include "GlobalNamespace/BakeBlendShape.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BakeBlendShape.Update
void GlobalNamespace::BakeBlendShape::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeBlendShape::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FingerFlagTwirlTest
#include "GlobalNamespace/FingerFlagTwirlTest.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 rotAnimDurations
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FingerFlagTwirlTest::dyn_rotAnimDurations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagTwirlTest::dyn_rotAnimDurations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotAnimDurations"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 rotAnimAmplitudes
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FingerFlagTwirlTest::dyn_rotAnimAmplitudes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagTwirlTest::dyn_rotAnimAmplitudes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotAnimAmplitudes"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotXAnimCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FingerFlagTwirlTest::dyn_rotXAnimCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagTwirlTest::dyn_rotXAnimCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotXAnimCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotYAnimCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FingerFlagTwirlTest::dyn_rotYAnimCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagTwirlTest::dyn_rotYAnimCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotYAnimCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rotZAnimCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::FingerFlagTwirlTest::dyn_rotZAnimCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagTwirlTest::dyn_rotZAnimCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotZAnimCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 animTimes
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FingerFlagTwirlTest::dyn_animTimes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagTwirlTest::dyn_animTimes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animTimes"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FingerFlagTwirlTest.FixedUpdate
void GlobalNamespace::FingerFlagTwirlTest::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagTwirlTest::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FingerFlagWearable
#include "GlobalNamespace/FingerFlagWearable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean attachedToLeftHand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerFlagWearable::dyn_attachedToLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_attachedToLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachedToLeftHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform pinkyRingBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FingerFlagWearable::dyn_pinkyRingBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_pinkyRingBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pinkyRingBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform thumbRingBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FingerFlagWearable::dyn_thumbRingBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_thumbRingBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thumbRingBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] clothBones
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::FingerFlagWearable::dyn_clothBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_clothBones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clothBones"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] clothRigidbodies
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::FingerFlagWearable::dyn_clothRigidbodies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_clothRigidbodies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clothRigidbodies"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::FingerFlagWearable::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single extendSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerFlagWearable::dyn_extendSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_extendSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extendSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single retractSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerFlagWearable::dyn_retractSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_retractSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::FingerFlagWearable::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip extendAudioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::FingerFlagWearable::dyn_extendAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_extendAudioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extendAudioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip retractAudioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::FingerFlagWearable::dyn_retractAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_retractAudioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractAudioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single extendVibrationDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerFlagWearable::dyn_extendVibrationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_extendVibrationDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extendVibrationDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single extendVibrationStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerFlagWearable::dyn_extendVibrationStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_extendVibrationStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extendVibrationStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single retractVibrationDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerFlagWearable::dyn_retractVibrationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_retractVibrationDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractVibrationDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single retractVibrationStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerFlagWearable::dyn_retractVibrationStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_retractVibrationStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractVibrationStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 retractExtendTimeAnimParam
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FingerFlagWearable::dyn_retractExtendTimeAnimParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_retractExtendTimeAnimParam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractExtendTimeAnimParam"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean networkedExtended
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerFlagWearable::dyn_networkedExtended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_networkedExtended");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "networkedExtended"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean extended
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerFlagWearable::dyn_extended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_extended");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extended"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean fullyRetracted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerFlagWearable::dyn_fullyRetracted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_fullyRetracted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fullyRetracted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single retractExtendTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerFlagWearable::dyn_retractExtendTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_retractExtendTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractExtendTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.InputDevice inputDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::FingerFlagWearable::dyn_inputDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_inputDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::FingerFlagWearable::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 stateBitIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FingerFlagWearable::dyn_stateBitIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_stateBitIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stateBitIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerFlagWearable::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GorillaTag.ISpawnable.IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FingerFlagWearable.GorillaTag.ISpawnable.get_IsSpawned
bool GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::GorillaTag.ISpawnable.get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::FingerFlagWearable*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.GorillaTag.ISpawnable.set_IsSpawned
void GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::GorillaTag.ISpawnable.set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::FingerFlagWearable*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FingerFlagWearable.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::FingerFlagWearable*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::FingerFlagWearable*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.OnEnable
void GlobalNamespace::FingerFlagWearable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.UpdateLocal
void GlobalNamespace::FingerFlagWearable::UpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::UpdateLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.UpdateShared
void GlobalNamespace::FingerFlagWearable::UpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::UpdateShared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateShared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.UpdateReplicated
void GlobalNamespace::FingerFlagWearable::UpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::UpdateReplicated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateReplicated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.IsMyItem
bool GlobalNamespace::FingerFlagWearable::IsMyItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::IsMyItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMyItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.LateUpdate
void GlobalNamespace::FingerFlagWearable::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.UpdateAnimation
void GlobalNamespace::FingerFlagWearable::UpdateAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::UpdateAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerFlagWearable.OnExtendStateChanged
void GlobalNamespace::FingerFlagWearable::OnExtendStateChanged(bool playAudio) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::OnExtendStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnExtendStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playAudio)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playAudio);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpiderDangler
#include "GlobalNamespace/SpiderDangler.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kSegmentCount
int GlobalNamespace::SpiderDangler::_get_kSegmentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::_get_kSegmentCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SpiderDangler", "kSegmentCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kSegmentCount
void GlobalNamespace::SpiderDangler::_set_kSegmentCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::_set_kSegmentCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SpiderDangler", "kSegmentCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kVelocityDamper
float GlobalNamespace::SpiderDangler::_get_kVelocityDamper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::_get_kVelocityDamper");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SpiderDangler", "kVelocityDamper"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kVelocityDamper
void GlobalNamespace::SpiderDangler::_set_kVelocityDamper(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::_set_kVelocityDamper");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SpiderDangler", "kVelocityDamper", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kConstraintCalculationIterations
int GlobalNamespace::SpiderDangler::_get_kConstraintCalculationIterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::_get_kConstraintCalculationIterations");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SpiderDangler", "kConstraintCalculationIterations"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kConstraintCalculationIterations
void GlobalNamespace::SpiderDangler::_set_kConstraintCalculationIterations(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::_set_kConstraintCalculationIterations");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SpiderDangler", "kConstraintCalculationIterations", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform endTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SpiderDangler::dyn_endTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::dyn_endTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector4 spinSpeeds
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::SpiderDangler::dyn_spinSpeeds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::dyn_spinSpeeds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spinSpeeds"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector4 spinScales
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::SpiderDangler::dyn_spinScales() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::dyn_spinScales");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spinScales"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer lineRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::SpiderDangler::dyn_lineRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::dyn_lineRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SpiderDangler/RopeSegment[] ropeSegs
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SpiderDangler::RopeSegment>& GlobalNamespace::SpiderDangler::dyn_ropeSegs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::dyn_ropeSegs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ropeSegs"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SpiderDangler::RopeSegment>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single ropeSegLen
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpiderDangler::dyn_ropeSegLen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::dyn_ropeSegLen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ropeSegLen"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single ropeSegLenScaled
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpiderDangler::dyn_ropeSegLenScaled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::dyn_ropeSegLenScaled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ropeSegLenScaled"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpiderDangler.Awake
void GlobalNamespace::SpiderDangler::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpiderDangler.FixedUpdate
void GlobalNamespace::SpiderDangler::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpiderDangler.LateUpdate
void GlobalNamespace::SpiderDangler::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpiderDangler.Simulate
void GlobalNamespace::SpiderDangler::Simulate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::Simulate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Simulate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpiderDangler.ApplyConstraint
void GlobalNamespace::SpiderDangler::ApplyConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::ApplyConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpiderDangler.ApplyConstraintSegment
void GlobalNamespace::SpiderDangler::ApplyConstraintSegment(ByRef<::GlobalNamespace::SpiderDangler::RopeSegment> segA, ByRef<::GlobalNamespace::SpiderDangler::RopeSegment> segB, float dampenA, float dampenB) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::ApplyConstraintSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyConstraintSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(segA), ::il2cpp_utils::ExtractType(segB), ::il2cpp_utils::ExtractType(dampenA), ::il2cpp_utils::ExtractType(dampenB)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(segA), byref(segB), dampenA, dampenB);
}
// Autogenerated method: SpiderDangler.DrawRope
void GlobalNamespace::SpiderDangler::DrawRope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::DrawRope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawRope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpiderDangler/RopeSegment
#include "GlobalNamespace/SpiderDangler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 pos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SpiderDangler::RopeSegment::dyn_pos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::RopeSegment::dyn_pos");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 posOld
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SpiderDangler::RopeSegment::dyn_posOld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::RopeSegment::dyn_posOld");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "posOld"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpiderDangler/RopeSegment..ctor
GlobalNamespace::SpiderDangler::RopeSegment::RopeSegment(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpiderDangler::RopeSegment::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CornOnCobCosmetic
#include "GlobalNamespace/CornOnCobCosmetic.hpp"
// Including type: ThermalReceiver
#include "GlobalNamespace/ThermalReceiver.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: SoundBankPlayer
#include "GlobalNamespace/SoundBankPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ThermalReceiver thermalReceiver
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThermalReceiver*& GlobalNamespace::CornOnCobCosmetic::dyn_thermalReceiver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::dyn_thermalReceiver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thermalReceiver"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThermalReceiver**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem particleSys
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::CornOnCobCosmetic::dyn_particleSys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::dyn_particleSys");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleSys"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve particleEmissionCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::CornOnCobCosmetic::dyn_particleEmissionCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::dyn_particleEmissionCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleEmissionCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SoundBankPlayer soundBankPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& GlobalNamespace::CornOnCobCosmetic::dyn_soundBankPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::dyn_soundBankPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundBankPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundBankPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/EmissionModule emissionModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::CornOnCobCosmetic::dyn_emissionModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::dyn_emissionModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emissionModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxBurstProbability
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CornOnCobCosmetic::dyn_maxBurstProbability() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::dyn_maxBurstProbability");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxBurstProbability"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 previousParticleCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CornOnCobCosmetic::dyn_previousParticleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::dyn_previousParticleCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousParticleCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CornOnCobCosmetic.Awake
void GlobalNamespace::CornOnCobCosmetic::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CornOnCobCosmetic.LateUpdate
void GlobalNamespace::CornOnCobCosmetic::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CornOnCobCosmetic::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpawnOnEnter
#include "GlobalNamespace/SpawnOnEnter.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject prefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SpawnOnEnter::dyn_prefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnOnEnter::dyn_prefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnOnEnter::dyn_cooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnOnEnter::dyn_cooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastSpawnTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnOnEnter::dyn_lastSpawnTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnOnEnter::dyn_lastSpawnTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastSpawnTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpawnOnEnter.OnTriggerEnter
void GlobalNamespace::SpawnOnEnter::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnOnEnter::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 numFrames
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaVelocityEstimator::dyn_numFrames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_numFrames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numFrames"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <linearVelocity>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GorillaVelocityEstimator::dyn_$linearVelocity$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_$linearVelocity$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<linearVelocity>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <angularVelocity>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GorillaVelocityEstimator::dyn_$angularVelocity$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_$angularVelocity$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<angularVelocity>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <handPos>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GorillaVelocityEstimator::dyn_$handPos$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_$handPos$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<handPos>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaVelocityEstimator/VelocityHistorySample[] history
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaVelocityEstimator::VelocityHistorySample>& GlobalNamespace::GorillaVelocityEstimator::dyn_history() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_history");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "history"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaVelocityEstimator::VelocityHistorySample>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 currentFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaVelocityEstimator::dyn_currentFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_currentFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GorillaVelocityEstimator::dyn_lastPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_lastPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion lastRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::GorillaVelocityEstimator::dyn_lastRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_lastRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastRotationVec
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GorillaVelocityEstimator::dyn_lastRotationVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_lastRotationVec");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastRotationVec"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useGlobalSpace
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaVelocityEstimator::dyn_useGlobalSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::dyn_useGlobalSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useGlobalSpace"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaVelocityEstimator.get_linearVelocity
::UnityEngine::Vector3 GlobalNamespace::GorillaVelocityEstimator::get_linearVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::get_linearVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_linearVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimator.set_linearVelocity
void GlobalNamespace::GorillaVelocityEstimator::set_linearVelocity(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::set_linearVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_linearVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GorillaVelocityEstimator.get_angularVelocity
::UnityEngine::Vector3 GlobalNamespace::GorillaVelocityEstimator::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimator.set_angularVelocity
void GlobalNamespace::GorillaVelocityEstimator::set_angularVelocity(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::set_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_angularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GorillaVelocityEstimator.get_handPos
::UnityEngine::Vector3 GlobalNamespace::GorillaVelocityEstimator::get_handPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::get_handPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimator.set_handPos
void GlobalNamespace::GorillaVelocityEstimator::set_handPos(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::set_handPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GorillaVelocityEstimator.Awake
void GlobalNamespace::GorillaVelocityEstimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimator.OnEnable
void GlobalNamespace::GorillaVelocityEstimator::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimator.OnDisable
void GlobalNamespace::GorillaVelocityEstimator::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimator.OnDestroy
void GlobalNamespace::GorillaVelocityEstimator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimator.TriggeredLateUpdate
void GlobalNamespace::GorillaVelocityEstimator::TriggeredLateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimator::TriggeredLateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggeredLateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaVelocityEstimatorManager
#include "GlobalNamespace/GorillaVelocityEstimatorManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GorillaVelocityEstimatorManager instance
::GlobalNamespace::GorillaVelocityEstimatorManager* GlobalNamespace::GorillaVelocityEstimatorManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaVelocityEstimatorManager*>("", "GorillaVelocityEstimatorManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public GorillaVelocityEstimatorManager instance
void GlobalNamespace::GorillaVelocityEstimatorManager::_set_instance(::GlobalNamespace::GorillaVelocityEstimatorManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaVelocityEstimatorManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::GorillaVelocityEstimatorManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "GorillaVelocityEstimatorManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::GorillaVelocityEstimatorManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaVelocityEstimatorManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.List`1<GorillaVelocityEstimator> estimators
::System::Collections::Generic::List_1<::GlobalNamespace::GorillaVelocityEstimator*>* GlobalNamespace::GorillaVelocityEstimatorManager::_get_estimators() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::_get_estimators");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::GorillaVelocityEstimator*>*>("", "GorillaVelocityEstimatorManager", "estimators"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.List`1<GorillaVelocityEstimator> estimators
void GlobalNamespace::GorillaVelocityEstimatorManager::_set_estimators(::System::Collections::Generic::List_1<::GlobalNamespace::GorillaVelocityEstimator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::_set_estimators");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaVelocityEstimatorManager", "estimators", value));
}
// Autogenerated method: GorillaVelocityEstimatorManager.Awake
void GlobalNamespace::GorillaVelocityEstimatorManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimatorManager.OnDestroy
void GlobalNamespace::GorillaVelocityEstimatorManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimatorManager.LateUpdate
void GlobalNamespace::GorillaVelocityEstimatorManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimatorManager.CreateManager
void GlobalNamespace::GorillaVelocityEstimatorManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GorillaVelocityEstimatorManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GorillaVelocityEstimatorManager.SetInstance
void GlobalNamespace::GorillaVelocityEstimatorManager::SetInstance(::GlobalNamespace::GorillaVelocityEstimatorManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GorillaVelocityEstimatorManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: GorillaVelocityEstimatorManager.Register
void GlobalNamespace::GorillaVelocityEstimatorManager::Register(::GlobalNamespace::GorillaVelocityEstimator* velEstimator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GorillaVelocityEstimatorManager", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(velEstimator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, velEstimator);
}
// Autogenerated method: GorillaVelocityEstimatorManager.Unregister
void GlobalNamespace::GorillaVelocityEstimatorManager::Unregister(::GlobalNamespace::GorillaVelocityEstimator* velEstimator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GorillaVelocityEstimatorManager", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(velEstimator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, velEstimator);
}
// Autogenerated method: GorillaVelocityEstimatorManager..cctor
void GlobalNamespace::GorillaVelocityEstimatorManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaVelocityEstimatorManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GorillaVelocityEstimatorManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SnowballMaker
#include "GlobalNamespace/SnowballMaker.hpp"
// Including type: SnowballThrowable
#include "GlobalNamespace/SnowballThrowable.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SnowballMaker <leftHandInstance>k__BackingField
::GlobalNamespace::SnowballMaker* GlobalNamespace::SnowballMaker::_get_$leftHandInstance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::_get_$leftHandInstance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::SnowballMaker*>("", "SnowballMaker", "<leftHandInstance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private SnowballMaker <leftHandInstance>k__BackingField
void GlobalNamespace::SnowballMaker::_set_$leftHandInstance$k__BackingField(::GlobalNamespace::SnowballMaker* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::_set_$leftHandInstance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SnowballMaker", "<leftHandInstance>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private SnowballMaker <rightHandInstance>k__BackingField
::GlobalNamespace::SnowballMaker* GlobalNamespace::SnowballMaker::_get_$rightHandInstance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::_get_$rightHandInstance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::SnowballMaker*>("", "SnowballMaker", "<rightHandInstance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private SnowballMaker <rightHandInstance>k__BackingField
void GlobalNamespace::SnowballMaker::_set_$rightHandInstance$k__BackingField(::GlobalNamespace::SnowballMaker* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::_set_$rightHandInstance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SnowballMaker", "<rightHandInstance>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isLeftHand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SnowballMaker::dyn_isLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::dyn_isLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isLeftHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SnowballThrowable[] <snowballs>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SnowballThrowable*>& GlobalNamespace::SnowballMaker::dyn_$snowballs$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::dyn_$snowballs$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<snowballs>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SnowballThrowable*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaVelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& GlobalNamespace::SnowballMaker::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaVelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SnowballMaker.get_leftHandInstance
::GlobalNamespace::SnowballMaker* GlobalNamespace::SnowballMaker::get_leftHandInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::get_leftHandInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SnowballMaker", "get_leftHandInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SnowballMaker*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SnowballMaker.set_leftHandInstance
void GlobalNamespace::SnowballMaker::set_leftHandInstance(::GlobalNamespace::SnowballMaker* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::set_leftHandInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SnowballMaker", "set_leftHandInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SnowballMaker.get_rightHandInstance
::GlobalNamespace::SnowballMaker* GlobalNamespace::SnowballMaker::get_rightHandInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::get_rightHandInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SnowballMaker", "get_rightHandInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SnowballMaker*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SnowballMaker.set_rightHandInstance
void GlobalNamespace::SnowballMaker::set_rightHandInstance(::GlobalNamespace::SnowballMaker* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::set_rightHandInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SnowballMaker", "set_rightHandInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SnowballMaker.get_snowballs
::ArrayW<::GlobalNamespace::SnowballThrowable*> GlobalNamespace::SnowballMaker::get_snowballs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::get_snowballs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_snowballs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::SnowballThrowable*>, false>(this, ___internal__method);
}
// Autogenerated method: SnowballMaker.set_snowballs
void GlobalNamespace::SnowballMaker::set_snowballs(::ArrayW<::GlobalNamespace::SnowballThrowable*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::set_snowballs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_snowballs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SnowballMaker.Awake
void GlobalNamespace::SnowballMaker::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballMaker.SetupThrowables
void GlobalNamespace::SnowballMaker::SetupThrowables(::ArrayW<::GlobalNamespace::SnowballThrowable*> newThrowables) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::SetupThrowables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupThrowables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newThrowables)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newThrowables);
}
// Autogenerated method: SnowballMaker.LateUpdate
void GlobalNamespace::SnowballMaker::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballMaker::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SnowballThrowable
#include "GlobalNamespace/SnowballThrowable.hpp"
// Including type: SnowballThrowable/SnowballHitEvent
#include "GlobalNamespace/SnowballThrowable_SnowballHitEvent.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
// Including type: SoundBankPlayer
#include "GlobalNamespace/SoundBankPlayer.hpp"
// Including type: GorillaTagScripts.RandomBucketThrowable
#include "GorillaTagScripts/RandomBucketThrowable.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 colorShaderProp
int GlobalNamespace::SnowballThrowable::_get_colorShaderProp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::_get_colorShaderProp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SnowballThrowable", "colorShaderProp"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 colorShaderProp
void GlobalNamespace::SnowballThrowable::_set_colorShaderProp(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::_set_colorShaderProp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SnowballThrowable", "colorShaderProp", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Int32> matDataIndexes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::SnowballThrowable::dyn_matDataIndexes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_matDataIndexes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "matDataIndexes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject projectilePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SnowballThrowable::dyn_projectilePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_projectilePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectilePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean randomizeColor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SnowballThrowable::dyn_randomizeColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_randomizeColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "randomizeColor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaTag.GTColor/HSVRanges randomColorHSVRanges
[[deprecated("Use field access instead!")]] ::GorillaTag::GTColor::HSVRanges& GlobalNamespace::SnowballThrowable::dyn_randomColorHSVRanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_randomColorHSVRanges");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "randomColorHSVRanges"))->offset;
  return *reinterpret_cast<::GorillaTag::GTColor::HSVRanges*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaVelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& GlobalNamespace::SnowballThrowable::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaVelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SoundBankPlayer launchSoundBankPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& GlobalNamespace::SnowballThrowable::dyn_launchSoundBankPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_launchSoundBankPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "launchSoundBankPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundBankPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single linSpeedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SnowballThrowable::dyn_linSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_linSpeedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linSpeedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxLinSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SnowballThrowable::dyn_maxLinSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_maxLinSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxLinSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxWristSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SnowballThrowable::dyn_maxWristSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_maxWristSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxWristSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isLeftHanded
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SnowballThrowable::dyn_isLeftHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_isLeftHanded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isLeftHanded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SnowballThrowable/SnowballHitEvent OnSnowballHitPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SnowballThrowable::SnowballHitEvent*& GlobalNamespace::SnowballThrowable::dyn_OnSnowballHitPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_OnSnowballHitPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnSnowballHitPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SnowballThrowable::SnowballHitEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean randomModelSelection
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SnowballThrowable::dyn_randomModelSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_randomModelSelection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "randomModelSelection"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<GorillaTagScripts.RandomBucketThrowable> localModels
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTagScripts::RandomBucketThrowable*>*& GlobalNamespace::SnowballThrowable::dyn_localModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_localModels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localModels"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GorillaTagScripts::RandomBucketThrowable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 throwableMakerIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SnowballThrowable::dyn_throwableMakerIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_throwableMakerIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "throwableMakerIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig targetRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::SnowballThrowable::dyn_targetRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_targetRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isOfflineRig
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SnowballThrowable::dyn_isOfflineRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_isOfflineRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isOfflineRig"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean awakeHasBeenCalled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SnowballThrowable::dyn_awakeHasBeenCalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_awakeHasBeenCalled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "awakeHasBeenCalled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean OnEnableHasBeenCalled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SnowballThrowable::dyn_OnEnableHasBeenCalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_OnEnableHasBeenCalled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnEnableHasBeenCalled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock matPropBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::SnowballThrowable::dyn_matPropBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_matPropBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "matPropBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer[] renderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& GlobalNamespace::SnowballThrowable::dyn_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Renderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 randModelIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SnowballThrowable::dyn_randModelIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::dyn_randModelIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "randModelIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SnowballThrowable.add_OnSnowballHitPlayer
void GlobalNamespace::SnowballThrowable::add_OnSnowballHitPlayer(::GlobalNamespace::SnowballThrowable::SnowballHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::add_OnSnowballHitPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnSnowballHitPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SnowballThrowable.remove_OnSnowballHitPlayer
void GlobalNamespace::SnowballThrowable::remove_OnSnowballHitPlayer(::GlobalNamespace::SnowballThrowable::SnowballHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::remove_OnSnowballHitPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnSnowballHitPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SnowballThrowable.get_ProjectileHash
int GlobalNamespace::SnowballThrowable::get_ProjectileHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::get_ProjectileHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProjectileHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.Awake
void GlobalNamespace::SnowballThrowable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.IsMine
bool GlobalNamespace::SnowballThrowable::IsMine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::IsMine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.EnableSnowballLocal
void GlobalNamespace::SnowballThrowable::EnableSnowballLocal(bool enable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::EnableSnowballLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableSnowballLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable);
}
// Autogenerated method: SnowballThrowable.GetRandomModelIndex
int GlobalNamespace::SnowballThrowable::GetRandomModelIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::GetRandomModelIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRandomModelIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.EnableRandomModel
void GlobalNamespace::SnowballThrowable::EnableRandomModel(int index, bool enable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::EnableRandomModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableRandomModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(enable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, enable);
}
// Autogenerated method: SnowballThrowable.LateUpdateLocal
void GlobalNamespace::SnowballThrowable::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::LateUpdateLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdateLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.LateUpdateReplicated
void GlobalNamespace::SnowballThrowable::LateUpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::LateUpdateReplicated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdateReplicated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.LateUpdateShared
void GlobalNamespace::SnowballThrowable::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::LateUpdateShared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdateShared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.Anchor
::UnityEngine::Transform* GlobalNamespace::SnowballThrowable::Anchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::Anchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Anchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.AnchorToHand
void GlobalNamespace::SnowballThrowable::AnchorToHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::AnchorToHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnchorToHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.LateUpdate
void GlobalNamespace::SnowballThrowable::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.LaunchSnowball
void GlobalNamespace::SnowballThrowable::LaunchSnowball() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::LaunchSnowball");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchSnowball", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.OnProjectileHitPlayer
void GlobalNamespace::SnowballThrowable::OnProjectileHitPlayer(::Photon::Realtime::Player* hitPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::OnProjectileHitPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnProjectileHitPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hitPlayer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hitPlayer);
}
// Autogenerated method: SnowballThrowable.ApplyColor
void GlobalNamespace::SnowballThrowable::ApplyColor(::UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::ApplyColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newColor);
}
// Autogenerated method: SnowballThrowable..cctor
void GlobalNamespace::SnowballThrowable::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SnowballThrowable", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SnowballThrowable.OnEnable
void GlobalNamespace::SnowballThrowable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SnowballThrowable.OnRelease
bool GlobalNamespace::SnowballThrowable::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SnowballThrowable/SnowballHitEvent
#include "GlobalNamespace/SnowballThrowable_SnowballHitEvent.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SnowballThrowable/SnowballHitEvent.Invoke
void GlobalNamespace::SnowballThrowable::SnowballHitEvent::Invoke(::Photon::Realtime::Player* hitPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::SnowballHitEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SnowballThrowable::SnowballHitEvent*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hitPlayer);
}
// Autogenerated method: SnowballThrowable/SnowballHitEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::SnowballThrowable::SnowballHitEvent::BeginInvoke(::Photon::Realtime::Player* hitPlayer, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::SnowballHitEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SnowballThrowable::SnowballHitEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, hitPlayer, callback, object);
}
// Autogenerated method: SnowballThrowable/SnowballHitEvent.EndInvoke
void GlobalNamespace::SnowballThrowable::SnowballHitEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnowballThrowable::SnowballHitEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SnowballThrowable::SnowballHitEvent*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CloudUmbrellaCloud
#include "GlobalNamespace/CloudUmbrellaCloud.hpp"
// Including type: UmbrellaItem
#include "GlobalNamespace/UmbrellaItem.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kHideAtScale
float GlobalNamespace::CloudUmbrellaCloud::_get_kHideAtScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::_get_kHideAtScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "CloudUmbrellaCloud", "kHideAtScale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHideAtScale
void GlobalNamespace::CloudUmbrellaCloud::_set_kHideAtScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::_set_kHideAtScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CloudUmbrellaCloud", "kHideAtScale", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHideAtScaleTolerance
float GlobalNamespace::CloudUmbrellaCloud::_get_kHideAtScaleTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::_get_kHideAtScaleTolerance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "CloudUmbrellaCloud", "kHideAtScaleTolerance"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHideAtScaleTolerance
void GlobalNamespace::CloudUmbrellaCloud::_set_kHideAtScaleTolerance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::_set_kHideAtScaleTolerance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CloudUmbrellaCloud", "kHideAtScaleTolerance", value));
}
// Autogenerated instance field getter
// Get instance field: public UmbrellaItem umbrella
[[deprecated("Use field access instead!")]] ::GlobalNamespace::UmbrellaItem*& GlobalNamespace::CloudUmbrellaCloud::dyn_umbrella() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::dyn_umbrella");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "umbrella"))->offset;
  return *reinterpret_cast<::GlobalNamespace::UmbrellaItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform cloudRotateXform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::CloudUmbrellaCloud::dyn_cloudRotateXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::dyn_cloudRotateXform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cloudRotateXform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer cloudRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::CloudUmbrellaCloud::dyn_cloudRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::dyn_cloudRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cloudRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve scaleCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::CloudUmbrellaCloud::dyn_scaleCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::dyn_scaleCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean rendererOn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CloudUmbrellaCloud::dyn_rendererOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::dyn_rendererOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rendererOn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform umbrellaXform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::CloudUmbrellaCloud::dyn_umbrellaXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::dyn_umbrellaXform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "umbrellaXform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform cloudScaleXform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::CloudUmbrellaCloud::dyn_cloudScaleXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::dyn_cloudScaleXform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cloudScaleXform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CloudUmbrellaCloud.Awake
void GlobalNamespace::CloudUmbrellaCloud::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CloudUmbrellaCloud.LateUpdate
void GlobalNamespace::CloudUmbrellaCloud::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudUmbrellaCloud::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PartyHornTransferableObject
#include "GlobalNamespace/PartyHornTransferableObject.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject effectsGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::PartyHornTransferableObject::dyn_effectsGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_effectsGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectsGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PartyHornTransferableObject::dyn_cooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_cooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single mouthPieceZOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PartyHornTransferableObject::dyn_mouthPieceZOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_mouthPieceZOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mouthPieceZOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single mouthPieceRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PartyHornTransferableObject::dyn_mouthPieceRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_mouthPieceRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mouthPieceRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform mouthPiece
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PartyHornTransferableObject::dyn_mouthPiece() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_mouthPiece");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mouthPiece"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 mouthOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PartyHornTransferableObject::dyn_mouthOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_mouthOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mouthOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean soundActivated
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PartyHornTransferableObject::dyn_soundActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_soundActivated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundActivated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent OnCooldownStart
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::PartyHornTransferableObject::dyn_OnCooldownStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_OnCooldownStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnCooldownStart"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent OnCooldownReset
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::PartyHornTransferableObject::dyn_OnCooldownReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_OnCooldownReset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnCooldownReset"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single cooldownRemaining
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PartyHornTransferableObject::dyn_cooldownRemaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_cooldownRemaining");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldownRemaining"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform localHead
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PartyHornTransferableObject::dyn_localHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_localHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localHead"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PartyHornTransferableObject/PartyHornState partyHornStateLastFrame
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PartyHornTransferableObject::PartyHornState& GlobalNamespace::PartyHornTransferableObject::dyn_partyHornStateLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_partyHornStateLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "partyHornStateLastFrame"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PartyHornTransferableObject::PartyHornState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean localWasActivated
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PartyHornTransferableObject::dyn_localWasActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::dyn_localWasActivated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localWasActivated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PartyHornTransferableObject.CalcMouthPiecePos
::UnityEngine::Vector3 GlobalNamespace::PartyHornTransferableObject::CalcMouthPiecePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::CalcMouthPiecePos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalcMouthPiecePos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: PartyHornTransferableObject.InitToDefault
void GlobalNamespace::PartyHornTransferableObject::InitToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::InitToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PartyHornTransferableObject.OnEnable
void GlobalNamespace::PartyHornTransferableObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PartyHornTransferableObject.ResetToDefaultState
void GlobalNamespace::PartyHornTransferableObject::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PartyHornTransferableObject.LateUpdateLocal
void GlobalNamespace::PartyHornTransferableObject::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PartyHornTransferableObject.LateUpdateShared
void GlobalNamespace::PartyHornTransferableObject::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PartyHornTransferableObject/PartyHornState
#include "GlobalNamespace/PartyHornTransferableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PartyHornTransferableObject/PartyHornState None
::GlobalNamespace::PartyHornTransferableObject::PartyHornState GlobalNamespace::PartyHornTransferableObject::PartyHornState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::PartyHornState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PartyHornTransferableObject::PartyHornState>("", "PartyHornTransferableObject/PartyHornState", "None"));
}
// Autogenerated static field setter
// Set static field: static public PartyHornTransferableObject/PartyHornState None
void GlobalNamespace::PartyHornTransferableObject::PartyHornState::_set_None(::GlobalNamespace::PartyHornTransferableObject::PartyHornState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::PartyHornState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PartyHornTransferableObject/PartyHornState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public PartyHornTransferableObject/PartyHornState CoolingDown
::GlobalNamespace::PartyHornTransferableObject::PartyHornState GlobalNamespace::PartyHornTransferableObject::PartyHornState::_get_CoolingDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::PartyHornState::_get_CoolingDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PartyHornTransferableObject::PartyHornState>("", "PartyHornTransferableObject/PartyHornState", "CoolingDown"));
}
// Autogenerated static field setter
// Set static field: static public PartyHornTransferableObject/PartyHornState CoolingDown
void GlobalNamespace::PartyHornTransferableObject::PartyHornState::_set_CoolingDown(::GlobalNamespace::PartyHornTransferableObject::PartyHornState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::PartyHornState::_set_CoolingDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PartyHornTransferableObject/PartyHornState", "CoolingDown", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PartyHornTransferableObject::PartyHornState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PartyHornTransferableObject::PartyHornState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PinwheelAnimator
#include "GlobalNamespace/PinwheelAnimator.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform spinnerTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PinwheelAnimator::dyn_spinnerTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::dyn_spinnerTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spinnerTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxSpinSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PinwheelAnimator::dyn_maxSpinSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::dyn_maxSpinSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSpinSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single spinSpeedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PinwheelAnimator::dyn_spinSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::dyn_spinSpeedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spinSpeedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single damping
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PinwheelAnimator::dyn_damping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::dyn_damping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "damping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 oldPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PinwheelAnimator::dyn_oldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::dyn_oldPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single spinSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PinwheelAnimator::dyn_spinSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::dyn_spinSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spinSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PinwheelAnimator.OnEnable
void GlobalNamespace::PinwheelAnimator::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PinwheelAnimator.LateUpdate
void GlobalNamespace::PinwheelAnimator::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PinwheelAnimator::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WingsWearable
#include "GlobalNamespace/WingsWearable.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::WingsWearable::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve flapSpeedCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::WingsWearable::dyn_flapSpeedCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::dyn_flapSpeedCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flapSpeedCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform xform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::WingsWearable::dyn_xform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::dyn_xform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "xform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 oldPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::WingsWearable::dyn_oldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::dyn_oldPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 flapSpeedParamID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::WingsWearable::dyn_flapSpeedParamID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::dyn_flapSpeedParamID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flapSpeedParamID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WingsWearable.Awake
void GlobalNamespace::WingsWearable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WingsWearable.OnEnable
void GlobalNamespace::WingsWearable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WingsWearable.Update
void GlobalNamespace::WingsWearable::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WingsWearable::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ScheduledTimelinePlayer
#include "GlobalNamespace/ScheduledTimelinePlayer.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Playables.PlayableDirector timeline
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& GlobalNamespace::ScheduledTimelinePlayer::dyn_timeline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScheduledTimelinePlayer::dyn_timeline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeline"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableDirector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 eventHour
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScheduledTimelinePlayer::dyn_eventHour() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScheduledTimelinePlayer::dyn_eventHour");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eventHour"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 scheduledEventID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ScheduledTimelinePlayer::dyn_scheduledEventID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScheduledTimelinePlayer::dyn_scheduledEventID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scheduledEventID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ScheduledTimelinePlayer.OnEnable
void GlobalNamespace::ScheduledTimelinePlayer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScheduledTimelinePlayer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScheduledTimelinePlayer.OnDisable
void GlobalNamespace::ScheduledTimelinePlayer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScheduledTimelinePlayer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScheduledTimelinePlayer.HandleScheduledEvent
void GlobalNamespace::ScheduledTimelinePlayer::HandleScheduledEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScheduledTimelinePlayer::HandleScheduledEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScheduledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MagicRingCosmetic
#include "GlobalNamespace/MagicRingCosmetic.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: ThermalReceiver
#include "GlobalNamespace/ThermalReceiver.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: SoundBankPlayer
#include "GlobalNamespace/SoundBankPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ThermalReceiver thermalReceiver
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThermalReceiver*& GlobalNamespace::MagicRingCosmetic::dyn_thermalReceiver() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_thermalReceiver");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thermalReceiver"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThermalReceiver**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer ringRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::MagicRingCosmetic::dyn_ringRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_ringRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ringRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeInTemperatureThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MagicRingCosmetic::dyn_fadeInTemperatureThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_fadeInTemperatureThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeInTemperatureThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeOutTemperatureThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MagicRingCosmetic::dyn_fadeOutTemperatureThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_fadeOutTemperatureThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeOutTemperatureThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single fadeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MagicRingCosmetic::dyn_fadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_fadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SoundBankPlayer fadeInSounds
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& GlobalNamespace::MagicRingCosmetic::dyn_fadeInSounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_fadeInSounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeInSounds"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundBankPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SoundBankPlayer fadeOutSounds
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& GlobalNamespace::MagicRingCosmetic::dyn_fadeOutSounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_fadeOutSounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeOutSounds"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundBankPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MagicRingCosmetic/FadeState fadeState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicRingCosmetic::FadeState& GlobalNamespace::MagicRingCosmetic::dyn_fadeState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_fadeState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MagicRingCosmetic::FadeState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 emissionColorShaderPropID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MagicRingCosmetic::dyn_emissionColorShaderPropID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_emissionColorShaderPropID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emissionColorShaderPropID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color defaultEmissiveColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::MagicRingCosmetic::dyn_defaultEmissiveColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_defaultEmissiveColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultEmissiveColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single emissiveAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::MagicRingCosmetic::dyn_emissiveAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_emissiveAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emissiveAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock materialPropertyBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::MagicRingCosmetic::dyn_materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::dyn_materialPropertyBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "materialPropertyBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MagicRingCosmetic.Awake
void GlobalNamespace::MagicRingCosmetic::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MagicRingCosmetic.LateUpdate
void GlobalNamespace::MagicRingCosmetic::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MagicRingCosmetic/FadeState
#include "GlobalNamespace/MagicRingCosmetic.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MagicRingCosmetic/FadeState FadedOut
::GlobalNamespace::MagicRingCosmetic::FadeState GlobalNamespace::MagicRingCosmetic::FadeState::_get_FadedOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::FadeState::_get_FadedOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MagicRingCosmetic::FadeState>("", "MagicRingCosmetic/FadeState", "FadedOut"));
}
// Autogenerated static field setter
// Set static field: static public MagicRingCosmetic/FadeState FadedOut
void GlobalNamespace::MagicRingCosmetic::FadeState::_set_FadedOut(::GlobalNamespace::MagicRingCosmetic::FadeState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::FadeState::_set_FadedOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MagicRingCosmetic/FadeState", "FadedOut", value));
}
// Autogenerated static field getter
// Get static field: static public MagicRingCosmetic/FadeState FadedIn
::GlobalNamespace::MagicRingCosmetic::FadeState GlobalNamespace::MagicRingCosmetic::FadeState::_get_FadedIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::FadeState::_get_FadedIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MagicRingCosmetic::FadeState>("", "MagicRingCosmetic/FadeState", "FadedIn"));
}
// Autogenerated static field setter
// Set static field: static public MagicRingCosmetic/FadeState FadedIn
void GlobalNamespace::MagicRingCosmetic::FadeState::_set_FadedIn(::GlobalNamespace::MagicRingCosmetic::FadeState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::FadeState::_set_FadedIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MagicRingCosmetic/FadeState", "FadedIn", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MagicRingCosmetic::FadeState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicRingCosmetic::FadeState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WizardStaffHoldable
#include "GlobalNamespace/WizardStaffHoldable.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject effectsGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::WizardStaffHoldable::dyn_effectsGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_effectsGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectsGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform tipTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::WizardStaffHoldable::dyn_tipTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_tipTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tipTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single tipCollisionRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WizardStaffHoldable::dyn_tipCollisionRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_tipCollisionRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tipCollisionRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask tipCollisionLayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::WizardStaffHoldable::dyn_tipCollisionLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_tipCollisionLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tipCollisionLayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaVelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& GlobalNamespace::WizardStaffHoldable::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaVelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WizardStaffHoldable::dyn_cooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_cooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minSlamVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WizardStaffHoldable::dyn_minSlamVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_minSlamVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minSlamVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minSlamAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WizardStaffHoldable::dyn_minSlamAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_minSlamAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minSlamAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single cooldownRemaining
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WizardStaffHoldable::dyn_cooldownRemaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_cooldownRemaining");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldownRemaining"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hitLastFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::WizardStaffHoldable::dyn_hitLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_hitLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitLastFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 tipTargetLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::WizardStaffHoldable::dyn_tipTargetLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_tipTargetLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tipTargetLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasEffectsGameObject
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::WizardStaffHoldable::dyn_hasEffectsGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_hasEffectsGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasEffectsGameObject"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean effectsHaveBeenPlayed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::WizardStaffHoldable::dyn_effectsHaveBeenPlayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::dyn_effectsHaveBeenPlayed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectsHaveBeenPlayed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WizardStaffHoldable.InitToDefault
void GlobalNamespace::WizardStaffHoldable::InitToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::InitToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WizardStaffHoldable.OnSpawn
void GlobalNamespace::WizardStaffHoldable::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WizardStaffHoldable.OnEnable
void GlobalNamespace::WizardStaffHoldable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WizardStaffHoldable.ResetToDefaultState
void GlobalNamespace::WizardStaffHoldable::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WizardStaffHoldable.LateUpdateLocal
void GlobalNamespace::WizardStaffHoldable::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WizardStaffHoldable.LateUpdateShared
void GlobalNamespace::WizardStaffHoldable::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WizardStaffHoldable.LateUpdateReplicated
void GlobalNamespace::WizardStaffHoldable::LateUpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WizardStaffHoldable::LateUpdateReplicated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 91));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AprilFools
#include "GlobalNamespace/AprilFools.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 changeIntervalSeconds
int GlobalNamespace::AprilFools::_get_changeIntervalSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_get_changeIntervalSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AprilFools", "changeIntervalSeconds"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 changeIntervalSeconds
void GlobalNamespace::AprilFools::_set_changeIntervalSeconds(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_set_changeIntervalSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AprilFools", "changeIntervalSeconds", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 lerpIntervalSeconds
int GlobalNamespace::AprilFools::_get_lerpIntervalSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_get_lerpIntervalSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AprilFools", "lerpIntervalSeconds"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 lerpIntervalSeconds
void GlobalNamespace::AprilFools::_set_lerpIntervalSeconds(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_set_lerpIntervalSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AprilFools", "lerpIntervalSeconds", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single minRange
float GlobalNamespace::AprilFools::_get_minRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_get_minRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "AprilFools", "minRange"));
}
// Autogenerated static field setter
// Set static field: static private System.Single minRange
void GlobalNamespace::AprilFools::_set_minRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_set_minRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AprilFools", "minRange", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single maxRange
float GlobalNamespace::AprilFools::_get_maxRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_get_maxRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "AprilFools", "maxRange"));
}
// Autogenerated static field setter
// Set static field: static private System.Single maxRange
void GlobalNamespace::AprilFools::_set_maxRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_set_maxRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AprilFools", "maxRange", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single excludeRangeStart
float GlobalNamespace::AprilFools::_get_excludeRangeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_get_excludeRangeStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "AprilFools", "excludeRangeStart"));
}
// Autogenerated static field setter
// Set static field: static private System.Single excludeRangeStart
void GlobalNamespace::AprilFools::_set_excludeRangeStart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_set_excludeRangeStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AprilFools", "excludeRangeStart", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single excludeRangeEnd
float GlobalNamespace::AprilFools::_get_excludeRangeEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_get_excludeRangeEnd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "AprilFools", "excludeRangeEnd"));
}
// Autogenerated static field setter
// Set static field: static private System.Single excludeRangeEnd
void GlobalNamespace::AprilFools::_set_excludeRangeEnd(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::_set_excludeRangeEnd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AprilFools", "excludeRangeEnd", value));
}
// Autogenerated method: AprilFools.mod
int GlobalNamespace::AprilFools::mod(int x, int m) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::mod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AprilFools", "mod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(m)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, m);
}
// Autogenerated method: AprilFools.GenerateTarget
float GlobalNamespace::AprilFools::GenerateTarget(::StringW username, ::StringW roomName, ::StringW areaName, int startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::GenerateTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AprilFools", "GenerateTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(username), ::il2cpp_utils::ExtractType(roomName), ::il2cpp_utils::ExtractType(areaName), ::il2cpp_utils::ExtractType(startTime)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, username, roomName, areaName, startTime);
}
// Autogenerated method: AprilFools.Slerp
float GlobalNamespace::AprilFools::Slerp(float a, float b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AprilFools", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: AprilFools.SmoothSlerp
float GlobalNamespace::AprilFools::SmoothSlerp(float a, float b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::SmoothSlerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AprilFools", "SmoothSlerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: AprilFools.GenerateSmoothTarget
float GlobalNamespace::AprilFools::GenerateSmoothTarget(::StringW username, ::StringW roomName, ::StringW areaName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AprilFools::GenerateSmoothTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AprilFools", "GenerateSmoothTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(username), ::il2cpp_utils::ExtractType(roomName), ::il2cpp_utils::ExtractType(areaName)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, username, roomName, areaName);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FeatherDusterHoldable
#include "GlobalNamespace/FeatherDusterHoldable.hpp"
// Including type: SoundBankPlayer
#include "GlobalNamespace/SoundBankPlayer.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask collisionLayer
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::FeatherDusterHoldable::dyn_collisionLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_collisionLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionLayer"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single overlapSphereRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FeatherDusterHoldable::dyn_overlapSphereRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_overlapSphereRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlapSphereRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single collideMinSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FeatherDusterHoldable::dyn_collideMinSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_collideMinSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collideMinSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem particleFx
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::FeatherDusterHoldable::dyn_particleFx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_particleFx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFx"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SoundBankPlayer soundBankPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& GlobalNamespace::FeatherDusterHoldable::dyn_soundBankPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_soundBankPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundBankPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundBankPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single soundCooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FeatherDusterHoldable::dyn_soundCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_soundCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundCooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/EmissionModule emissionModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::FeatherDusterHoldable::dyn_emissionModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_emissionModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emissionModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialRateOverTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FeatherDusterHoldable::dyn_initialRateOverTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_initialRateOverTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialRateOverTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeSinceLastSound
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FeatherDusterHoldable::dyn_timeSinceLastSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_timeSinceLastSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeSinceLastSound"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastWorldPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::FeatherDusterHoldable::dyn_lastWorldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_lastWorldPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastWorldPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider[] colliderResult
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::FeatherDusterHoldable::dyn_colliderResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::dyn_colliderResult");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderResult"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FeatherDusterHoldable.Awake
void GlobalNamespace::FeatherDusterHoldable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FeatherDusterHoldable.OnEnable
void GlobalNamespace::FeatherDusterHoldable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FeatherDusterHoldable.Update
void GlobalNamespace::FeatherDusterHoldable::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FeatherDusterHoldable::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RotationSoundPlayer
#include "GlobalNamespace/RotationSoundPlayer.hpp"
// Including type: RotationSoundPlayer/<>c
#include "GlobalNamespace/RotationSoundPlayer_--c.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SoundBankPlayer
#include "GlobalNamespace/SoundBankPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] transforms
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::RotationSoundPlayer::dyn_transforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_transforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transforms"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SoundBankPlayer soundBankPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& GlobalNamespace::RotationSoundPlayer::dyn_soundBankPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_soundBankPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundBankPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundBankPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rotationAmountThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotationSoundPlayer::dyn_rotationAmountThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_rotationAmountThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationAmountThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rotationSpeedThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotationSoundPlayer::dyn_rotationSpeedThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_rotationSpeedThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationSpeedThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single cooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotationSoundPlayer::dyn_cooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_cooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single cooldownTimer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotationSoundPlayer::dyn_cooldownTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_cooldownTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldownTimer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] initialUpAxis
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::RotationSoundPlayer::dyn_initialUpAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_initialUpAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialUpAxis"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] lastUpAxis
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::RotationSoundPlayer::dyn_lastUpAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_lastUpAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastUpAxis"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] lastRotationSpeeds
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::RotationSoundPlayer::dyn_lastRotationSpeeds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::dyn_lastRotationSpeeds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastRotationSpeeds"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RotationSoundPlayer.Awake
void GlobalNamespace::RotationSoundPlayer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RotationSoundPlayer.Update
void GlobalNamespace::RotationSoundPlayer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RotationSoundPlayer/<>c
#include "GlobalNamespace/RotationSoundPlayer_--c.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly RotationSoundPlayer/<>c <>9
::GlobalNamespace::RotationSoundPlayer::$$c* GlobalNamespace::RotationSoundPlayer::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::RotationSoundPlayer::$$c*>("", "RotationSoundPlayer/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly RotationSoundPlayer/<>c <>9
void GlobalNamespace::RotationSoundPlayer::$$c::_set_$$9(::GlobalNamespace::RotationSoundPlayer::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "RotationSoundPlayer/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Predicate`1<UnityEngine.Transform> <>9__9_0
::System::Predicate_1<::UnityEngine::Transform*>* GlobalNamespace::RotationSoundPlayer::$$c::_get_$$9__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::$$c::_get_$$9__9_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Predicate_1<::UnityEngine::Transform*>*>("", "RotationSoundPlayer/<>c", "<>9__9_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Predicate`1<UnityEngine.Transform> <>9__9_0
void GlobalNamespace::RotationSoundPlayer::$$c::_set_$$9__9_0(::System::Predicate_1<::UnityEngine::Transform*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::$$c::_set_$$9__9_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "RotationSoundPlayer/<>c", "<>9__9_0", value)));
}
// Autogenerated method: RotationSoundPlayer/<>c..cctor
void GlobalNamespace::RotationSoundPlayer::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RotationSoundPlayer/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: RotationSoundPlayer/<>c.<Awake>b__9_0
bool GlobalNamespace::RotationSoundPlayer::$$c::$Awake$b__9_0(::UnityEngine::Transform* xform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotationSoundPlayer::$$c::<Awake>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xform)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, xform);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VacuumHoldable
#include "GlobalNamespace/VacuumHoldable.hpp"
// Including type: VacuumHoldable/VacuumState
#include "GlobalNamespace/VacuumHoldable_VacuumState.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem particleFX
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::VacuumHoldable::dyn_particleFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::dyn_particleFX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFX"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::VacuumHoldable::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single activationVibrationStartStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VacuumHoldable::dyn_activationVibrationStartStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::dyn_activationVibrationStartStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationVibrationStartStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single activationVibrationStartDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VacuumHoldable::dyn_activationVibrationStartDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::dyn_activationVibrationStartDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationVibrationStartDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single activationVibrationLoopStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VacuumHoldable::dyn_activationVibrationLoopStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::dyn_activationVibrationLoopStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationVibrationLoopStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single activationStartTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VacuumHoldable::dyn_activationStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::dyn_activationStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasAudioSource
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VacuumHoldable::dyn_hasAudioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::dyn_hasAudioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasAudioSource"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VacuumHoldable.InitToDefault
void GlobalNamespace::VacuumHoldable::InitToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::InitToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VacuumHoldable.OnSpawn
void GlobalNamespace::VacuumHoldable::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VacuumHoldable.OnEnable
void GlobalNamespace::VacuumHoldable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VacuumHoldable.OnDisable
void GlobalNamespace::VacuumHoldable::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VacuumHoldable.ResetToDefaultState
void GlobalNamespace::VacuumHoldable::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VacuumHoldable.LateUpdateShared
void GlobalNamespace::VacuumHoldable::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VacuumHoldable.OnActivate
void GlobalNamespace::VacuumHoldable::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VacuumHoldable.OnDeactivate
void GlobalNamespace::VacuumHoldable::OnDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::OnDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 99));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VacuumHoldable/VacuumState
#include "GlobalNamespace/VacuumHoldable_VacuumState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VacuumHoldable/VacuumState None
::GlobalNamespace::VacuumHoldable::VacuumState GlobalNamespace::VacuumHoldable::VacuumState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::VacuumState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VacuumHoldable::VacuumState>("", "VacuumHoldable/VacuumState", "None"));
}
// Autogenerated static field setter
// Set static field: static public VacuumHoldable/VacuumState None
void GlobalNamespace::VacuumHoldable::VacuumState::_set_None(::GlobalNamespace::VacuumHoldable::VacuumState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::VacuumState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VacuumHoldable/VacuumState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public VacuumHoldable/VacuumState Active
::GlobalNamespace::VacuumHoldable::VacuumState GlobalNamespace::VacuumHoldable::VacuumState::_get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::VacuumState::_get_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VacuumHoldable::VacuumState>("", "VacuumHoldable/VacuumState", "Active"));
}
// Autogenerated static field setter
// Set static field: static public VacuumHoldable/VacuumState Active
void GlobalNamespace::VacuumHoldable::VacuumState::_set_Active(::GlobalNamespace::VacuumHoldable::VacuumState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::VacuumState::_set_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VacuumHoldable/VacuumState", "Active", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VacuumHoldable::VacuumState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VacuumHoldable::VacuumState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HorseStickNoiseMaker
#include "GlobalNamespace/HorseStickNoiseMaker.hpp"
// Including type: SoundBankPlayer
#include "GlobalNamespace/SoundBankPlayer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single metersPerClip
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HorseStickNoiseMaker::dyn_metersPerClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_metersPerClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "metersPerClip"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minSecBetweenClips
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HorseStickNoiseMaker::dyn_minSecBetweenClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_minSecBetweenClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minSecBetweenClips"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SoundBankPlayer soundBankPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& GlobalNamespace::HorseStickNoiseMaker::dyn_soundBankPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_soundBankPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundBankPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundBankPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform gorillaPlayerXform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::HorseStickNoiseMaker::dyn_gorillaPlayerXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_gorillaPlayerXform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gorillaPlayerXform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String gorillaPlayerXform_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::HorseStickNoiseMaker::dyn_gorillaPlayerXform_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_gorillaPlayerXform_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gorillaPlayerXform_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem particleFX
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::HorseStickNoiseMaker::dyn_particleFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_particleFX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFX"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 oldPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::HorseStickNoiseMaker::dyn_oldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_oldPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeSincePlay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HorseStickNoiseMaker::dyn_timeSincePlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_timeSincePlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeSincePlay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single distElapsed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HorseStickNoiseMaker::dyn_distElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::dyn_distElapsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distElapsed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HorseStickNoiseMaker.OnEnable
void GlobalNamespace::HorseStickNoiseMaker::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HorseStickNoiseMaker.LateUpdate
void GlobalNamespace::HorseStickNoiseMaker::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HorseStickNoiseMaker::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FingerTorch
#include "GlobalNamespace/FingerTorch.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean attachedToLeftHand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerTorch::dyn_attachedToLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_attachedToLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachedToLeftHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform pinkyRingBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FingerTorch::dyn_pinkyRingBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_pinkyRingBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pinkyRingBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform thumbRingBone
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FingerTorch::dyn_thumbRingBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_thumbRingBone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thumbRingBone"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::FingerTorch::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip extendAudioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::FingerTorch::dyn_extendAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_extendAudioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extendAudioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip retractAudioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::FingerTorch::dyn_retractAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_retractAudioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractAudioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single extendVibrationDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerTorch::dyn_extendVibrationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_extendVibrationDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extendVibrationDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single extendVibrationStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerTorch::dyn_extendVibrationStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_extendVibrationStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extendVibrationStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single retractVibrationDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerTorch::dyn_retractVibrationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_retractVibrationDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractVibrationDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single retractVibrationStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerTorch::dyn_retractVibrationStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_retractVibrationStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractVibrationStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject particleFX
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::FingerTorch::dyn_particleFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_particleFX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFX"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean networkedExtended
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerTorch::dyn_networkedExtended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_networkedExtended");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "networkedExtended"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean extended
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerTorch::dyn_extended() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_extended");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extended"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean fullyRetracted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerTorch::dyn_fullyRetracted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_fullyRetracted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fullyRetracted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single retractExtendTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FingerTorch::dyn_retractExtendTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_retractExtendTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "retractExtendTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.InputDevice inputDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::FingerTorch::dyn_inputDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_inputDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::FingerTorch::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 stateBitIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FingerTorch::dyn_stateBitIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_stateBitIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stateBitIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FingerTorch::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GorillaTag.ISpawnable.IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FingerTorch.GorillaTag.ISpawnable.get_IsSpawned
bool GlobalNamespace::FingerTorch::GorillaTag_ISpawnable_get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::GorillaTag.ISpawnable.get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::FingerTorch*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.GorillaTag.ISpawnable.set_IsSpawned
void GlobalNamespace::FingerTorch::GorillaTag_ISpawnable_set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::GorillaTag.ISpawnable.set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::FingerTorch*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FingerTorch.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::FingerTorch::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::FingerTorch*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::FingerTorch::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::FingerTorch*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.OnEnable
void GlobalNamespace::FingerTorch::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.OnDisable
void GlobalNamespace::FingerTorch::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.UpdateLocal
void GlobalNamespace::FingerTorch::UpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::UpdateLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.UpdateShared
void GlobalNamespace::FingerTorch::UpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::UpdateShared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateShared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.UpdateReplicated
void GlobalNamespace::FingerTorch::UpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::UpdateReplicated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateReplicated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.IsMyItem
bool GlobalNamespace::FingerTorch::IsMyItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::IsMyItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMyItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.LateUpdate
void GlobalNamespace::FingerTorch::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FingerTorch.OnExtendStateChanged
void GlobalNamespace::FingerTorch::OnExtendStateChanged(bool playAudio) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerTorch::OnExtendStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnExtendStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playAudio)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playAudio);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AngryBeeAnimator
#include "GlobalNamespace/AngryBeeAnimator.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject beePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::AngryBeeAnimator::dyn_beePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_beePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numBees
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AngryBeeAnimator::dyn_numBees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_numBees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numBees"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single orbitMinRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeAnimator::dyn_orbitMinRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_orbitMinRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orbitMinRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single orbitMaxRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeAnimator::dyn_orbitMaxRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_orbitMaxRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orbitMaxRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single orbitMaxHeightDisplacement
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeAnimator::dyn_orbitMaxHeightDisplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_orbitMaxHeightDisplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orbitMaxHeightDisplacement"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single orbitMaxCenterDisplacement
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeAnimator::dyn_orbitMaxCenterDisplacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_orbitMaxCenterDisplacement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orbitMaxCenterDisplacement"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single orbitMaxTilt
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeAnimator::dyn_orbitMaxTilt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_orbitMaxTilt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orbitMaxTilt"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single orbitSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeAnimator::dyn_orbitSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_orbitSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orbitSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single beeScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeAnimator::dyn_beeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_beeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beeScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] beeOrbits
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::AngryBeeAnimator::dyn_beeOrbits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_beeOrbits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beeOrbits"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] bees
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::AngryBeeAnimator::dyn_bees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_bees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bees"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] beeOrbitalAxes
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::AngryBeeAnimator::dyn_beeOrbitalAxes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_beeOrbitalAxes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beeOrbitalAxes"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] beeOrbitalRadii
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::AngryBeeAnimator::dyn_beeOrbitalRadii() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::dyn_beeOrbitalRadii");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beeOrbitalRadii"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AngryBeeAnimator.Awake
void GlobalNamespace::AngryBeeAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeAnimator.Update
void GlobalNamespace::AngryBeeAnimator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeAnimator.SetEmergeFraction
void GlobalNamespace::AngryBeeAnimator::SetEmergeFraction(float fraction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeAnimator::SetEmergeFraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEmergeFraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fraction)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fraction);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AngryBeeSwarm
#include "GlobalNamespace/AngryBeeSwarm.hpp"
// Including type: UnityEngine.AI.NavMeshPath
#include "UnityEngine/AI/NavMeshPath.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: AngryBeeAnimator
#include "GlobalNamespace/AngryBeeAnimator.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AngryBeeSwarm instance
::GlobalNamespace::AngryBeeSwarm* GlobalNamespace::AngryBeeSwarm::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AngryBeeSwarm*>("", "AngryBeeSwarm", "instance"));
}
// Autogenerated static field setter
// Set static field: static public AngryBeeSwarm instance
void GlobalNamespace::AngryBeeSwarm::_set_instance(::GlobalNamespace::AngryBeeSwarm* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AngryBeeSwarm", "instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single navMeshSampleRange
float GlobalNamespace::AngryBeeSwarm::_get_navMeshSampleRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::_get_navMeshSampleRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "AngryBeeSwarm", "navMeshSampleRange"));
}
// Autogenerated static field setter
// Set static field: static private System.Single navMeshSampleRange
void GlobalNamespace::AngryBeeSwarm::_set_navMeshSampleRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::_set_navMeshSampleRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AngryBeeSwarm", "navMeshSampleRange", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Single heightAboveNavmesh
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_heightAboveNavmesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_heightAboveNavmesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "heightAboveNavmesh"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform followTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::AngryBeeSwarm::dyn_followTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_followTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "followTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single velocityStep
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_velocityStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_velocityStep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityStep"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_currentSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_currentSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single velocityIncreaseInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_velocityIncreaseInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_velocityIncreaseInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityIncreaseInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 noisyOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::AngryBeeSwarm::dyn_noisyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_noisyOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noisyOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 ghostOffsetGrabbingLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::AngryBeeSwarm::dyn_ghostOffsetGrabbingLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_ghostOffsetGrabbingLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ghostOffsetGrabbingLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single emergeStartedTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_emergeStartedTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_emergeStartedTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emergeStartedTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single grabTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_grabTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_grabTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastSpeedIncreased
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_lastSpeedIncreased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_lastSpeedIncreased");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastSpeedIncreased"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single totalTimeToEmerge
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_totalTimeToEmerge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_totalTimeToEmerge");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "totalTimeToEmerge"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single catchDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_catchDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_catchDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "catchDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single grabDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_grabDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_grabDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single grabSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_grabSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_grabSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minGrabCooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_minGrabCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_minGrabCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minGrabCooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialRangeLimit
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_initialRangeLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_initialRangeLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialRangeLimit"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single finalRangeLimit
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_finalRangeLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_finalRangeLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finalRangeLimit"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rangeLimitBlendDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_rangeLimitBlendDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_rangeLimitBlendDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rangeLimitBlendDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single boredAfterDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_boredAfterDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_boredAfterDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boredAfterDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player targetPlayer
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::AngryBeeSwarm::dyn_targetPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_targetPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetPlayer"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AngryBeeAnimator beeAnimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AngryBeeAnimator*& GlobalNamespace::AngryBeeSwarm::dyn_beeAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_beeAnimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beeAnimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AngryBeeAnimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AngryBeeSwarm/ChaseState currentState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AngryBeeSwarm::ChaseState& GlobalNamespace::AngryBeeSwarm::dyn_currentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_currentState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AngryBeeSwarm::ChaseState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AngryBeeSwarm/ChaseState lastState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AngryBeeSwarm::ChaseState& GlobalNamespace::AngryBeeSwarm::dyn_lastState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_lastState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AngryBeeSwarm::ChaseState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player grabbedPlayer
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::AngryBeeSwarm::dyn_grabbedPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_grabbedPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabbedPlayer"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean targetIsOnNavMesh
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::AngryBeeSwarm::dyn_targetIsOnNavMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_targetIsOnNavMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetIsOnNavMesh"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hapticStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_hapticStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_hapticStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hapticDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_hapticDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_hapticDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single MinHeightAboveWater
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_MinHeightAboveWater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_MinHeightAboveWater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MinHeightAboveWater"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single PlayerMinHeightAboveWater
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_PlayerMinHeightAboveWater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_PlayerMinHeightAboveWater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PlayerMinHeightAboveWater"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single RefreshClosestPlayerInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_RefreshClosestPlayerInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_RefreshClosestPlayerInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RefreshClosestPlayerInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single NextRefreshClosestPlayerTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_NextRefreshClosestPlayerTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_NextRefreshClosestPlayerTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextRefreshClosestPlayerTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single BoredToDeathAtTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_BoredToDeathAtTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_BoredToDeathAtTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BoredToDeathAtTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform testEmergeFrom
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::AngryBeeSwarm::dyn_testEmergeFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_testEmergeFrom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testEmergeFrom"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform testEmergeTo
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::AngryBeeSwarm::dyn_testEmergeTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_testEmergeTo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testEmergeTo"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 emergeFromPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::AngryBeeSwarm::dyn_emergeFromPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_emergeFromPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emergeFromPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 emergeToPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::AngryBeeSwarm::dyn_emergeToPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_emergeToPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emergeToPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AI.NavMeshPath path
[[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshPath*& GlobalNamespace::AngryBeeSwarm::dyn_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "path"))->offset;
  return *reinterpret_cast<::UnityEngine::AI::NavMeshPath**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Vector3> pathPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& GlobalNamespace::AngryBeeSwarm::dyn_pathPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_pathPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pathPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 currentPathPointIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AngryBeeSwarm::dyn_currentPathPointIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_currentPathPointIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentPathPointIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nextPathTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AngryBeeSwarm::dyn_nextPathTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::dyn_nextPathTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextPathTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AngryBeeSwarm.get_isDormant
bool GlobalNamespace::AngryBeeSwarm::get_isDormant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::get_isDormant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDormant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.Awake
void GlobalNamespace::AngryBeeSwarm::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.InitializeSwarm
void GlobalNamespace::AngryBeeSwarm::InitializeSwarm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::InitializeSwarm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeSwarm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.LateUpdate
void GlobalNamespace::AngryBeeSwarm::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.UpdateState
void GlobalNamespace::AngryBeeSwarm::UpdateState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::UpdateState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.Emerge
void GlobalNamespace::AngryBeeSwarm::Emerge(::UnityEngine::Vector3 fromPosition, ::UnityEngine::Vector3 toPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::Emerge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emerge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPosition), ::il2cpp_utils::ExtractType(toPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromPosition, toPosition);
}
// Autogenerated method: AngryBeeSwarm.OnChangeState
void GlobalNamespace::AngryBeeSwarm::OnChangeState(::GlobalNamespace::AngryBeeSwarm::ChaseState newState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::OnChangeState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnChangeState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newState);
}
// Autogenerated method: AngryBeeSwarm.ChooseClosestTarget
void GlobalNamespace::AngryBeeSwarm::ChooseClosestTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChooseClosestTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChooseClosestTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.SetInitialRotations
void GlobalNamespace::AngryBeeSwarm::SetInitialRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::SetInitialRotations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInitialRotations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.SwarmEmergeUpdateShared
void GlobalNamespace::AngryBeeSwarm::SwarmEmergeUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::SwarmEmergeUpdateShared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwarmEmergeUpdateShared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.RiseGrabbedLocalPlayer
void GlobalNamespace::AngryBeeSwarm::RiseGrabbedLocalPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::RiseGrabbedLocalPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RiseGrabbedLocalPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.UpdateFollowPath
void GlobalNamespace::AngryBeeSwarm::UpdateFollowPath(::UnityEngine::Vector3 destination, float currentSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::UpdateFollowPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFollowPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination), ::il2cpp_utils::ExtractType(currentSpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destination, currentSpeed);
}
// Autogenerated method: AngryBeeSwarm.GetNewPath
void GlobalNamespace::AngryBeeSwarm::GetNewPath(::UnityEngine::Vector3 destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::GetNewPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destination);
}
// Autogenerated method: AngryBeeSwarm.ResetPath
void GlobalNamespace::AngryBeeSwarm::ResetPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ResetPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.ChaseHost
void GlobalNamespace::AngryBeeSwarm::ChaseHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseHost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChaseHost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.MoveBodyShared
void GlobalNamespace::AngryBeeSwarm::MoveBodyShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::MoveBodyShared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveBodyShared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.GrabBodyShared
void GlobalNamespace::AngryBeeSwarm::GrabBodyShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::GrabBodyShared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrabBodyShared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.Photon.Pun.IPunObservable.OnPhotonSerializeView
void GlobalNamespace::AngryBeeSwarm::Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::Photon.Pun.IPunObservable.OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::AngryBeeSwarm*), 56));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: AngryBeeSwarm.Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange
void GlobalNamespace::AngryBeeSwarm::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::AngryBeeSwarm*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, previousOwner);
}
// Autogenerated method: AngryBeeSwarm.TestEmerge
void GlobalNamespace::AngryBeeSwarm::TestEmerge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::TestEmerge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestEmerge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AngryBeeSwarm.OnJoinedRoom
void GlobalNamespace::AngryBeeSwarm::OnJoinedRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::OnJoinedRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AngryBeeSwarm/ChaseState
#include "GlobalNamespace/AngryBeeSwarm.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AngryBeeSwarm/ChaseState Dormant
::GlobalNamespace::AngryBeeSwarm::ChaseState GlobalNamespace::AngryBeeSwarm::ChaseState::_get_Dormant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::_get_Dormant");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AngryBeeSwarm::ChaseState>("", "AngryBeeSwarm/ChaseState", "Dormant"));
}
// Autogenerated static field setter
// Set static field: static public AngryBeeSwarm/ChaseState Dormant
void GlobalNamespace::AngryBeeSwarm::ChaseState::_set_Dormant(::GlobalNamespace::AngryBeeSwarm::ChaseState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::_set_Dormant");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AngryBeeSwarm/ChaseState", "Dormant", value));
}
// Autogenerated static field getter
// Get static field: static public AngryBeeSwarm/ChaseState InitialEmerge
::GlobalNamespace::AngryBeeSwarm::ChaseState GlobalNamespace::AngryBeeSwarm::ChaseState::_get_InitialEmerge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::_get_InitialEmerge");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AngryBeeSwarm::ChaseState>("", "AngryBeeSwarm/ChaseState", "InitialEmerge"));
}
// Autogenerated static field setter
// Set static field: static public AngryBeeSwarm/ChaseState InitialEmerge
void GlobalNamespace::AngryBeeSwarm::ChaseState::_set_InitialEmerge(::GlobalNamespace::AngryBeeSwarm::ChaseState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::_set_InitialEmerge");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AngryBeeSwarm/ChaseState", "InitialEmerge", value));
}
// Autogenerated static field getter
// Get static field: static public AngryBeeSwarm/ChaseState Chasing
::GlobalNamespace::AngryBeeSwarm::ChaseState GlobalNamespace::AngryBeeSwarm::ChaseState::_get_Chasing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::_get_Chasing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AngryBeeSwarm::ChaseState>("", "AngryBeeSwarm/ChaseState", "Chasing"));
}
// Autogenerated static field setter
// Set static field: static public AngryBeeSwarm/ChaseState Chasing
void GlobalNamespace::AngryBeeSwarm::ChaseState::_set_Chasing(::GlobalNamespace::AngryBeeSwarm::ChaseState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::_set_Chasing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AngryBeeSwarm/ChaseState", "Chasing", value));
}
// Autogenerated static field getter
// Get static field: static public AngryBeeSwarm/ChaseState Grabbing
::GlobalNamespace::AngryBeeSwarm::ChaseState GlobalNamespace::AngryBeeSwarm::ChaseState::_get_Grabbing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::_get_Grabbing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AngryBeeSwarm::ChaseState>("", "AngryBeeSwarm/ChaseState", "Grabbing"));
}
// Autogenerated static field setter
// Set static field: static public AngryBeeSwarm/ChaseState Grabbing
void GlobalNamespace::AngryBeeSwarm::ChaseState::_set_Grabbing(::GlobalNamespace::AngryBeeSwarm::ChaseState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::_set_Grabbing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AngryBeeSwarm/ChaseState", "Grabbing", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AngryBeeSwarm::ChaseState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AngryBeeSwarm::ChaseState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AnimatedBee
#include "GlobalNamespace/AnimatedBee.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeePerchPoint
#include "GlobalNamespace/BeePerchPoint.hpp"
// Including type: BeeSwarmManager
#include "GlobalNamespace/BeeSwarmManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<AnimatedBee/TimedDestination> destinationCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedBee::TimedDestination>*& GlobalNamespace::AnimatedBee::dyn_destinationCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_destinationCache");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedBee::TimedDestination>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AnimatedBee/TimedDestination destinationA
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AnimatedBee::TimedDestination& GlobalNamespace::AnimatedBee::dyn_destinationA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_destinationA");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationA"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AnimatedBee::TimedDestination*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AnimatedBee/TimedDestination destinationB
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AnimatedBee::TimedDestination& GlobalNamespace::AnimatedBee::dyn_destinationB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_destinationB");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationB"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AnimatedBee::TimedDestination*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single loopDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimatedBee::dyn_loopDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_loopDuration");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 oldPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::AnimatedBee::dyn_oldPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_oldPosition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::AnimatedBee::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_velocity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.MeshRenderer visual
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::AnimatedBee::dyn_visual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_visual");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "visual"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single oldSyncTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimatedBee::dyn_oldSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_oldSyncTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldSyncTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<BeePerchPoint> route
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BeePerchPoint*>*& GlobalNamespace::AnimatedBee::dyn_route() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_route");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "route"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BeePerchPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Single> holdTimes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& GlobalNamespace::AnimatedBee::dyn_holdTimes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_holdTimes");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdTimes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimatedBee::dyn_speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_speed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxTravelTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimatedBee::dyn_maxTravelTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::dyn_maxTravelTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxTravelTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AnimatedBee.UpdateVisual
void GlobalNamespace::AnimatedBee::UpdateVisual(float syncTime, ::GlobalNamespace::BeeSwarmManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::UpdateVisual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "UpdateVisual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, syncTime, manager);
}
// Autogenerated method: AnimatedBee.GetPositionAndDestinationAtTime
void GlobalNamespace::AnimatedBee::GetPositionAndDestinationAtTime(float syncTime, ByRef<::UnityEngine::Vector3> idealPosition, ByRef<::UnityEngine::Vector3> destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::GetPositionAndDestinationAtTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPositionAndDestinationAtTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, syncTime, byref(idealPosition), byref(destination));
}
// Autogenerated method: AnimatedBee.InitVisual
void GlobalNamespace::AnimatedBee::InitVisual(::UnityEngine::MeshRenderer* prefab, ::GlobalNamespace::BeeSwarmManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::InitVisual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitVisual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, prefab, manager);
}
// Autogenerated method: AnimatedBee.InitRouteTimestamps
void GlobalNamespace::AnimatedBee::InitRouteTimestamps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::InitRouteTimestamps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitRouteTimestamps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AnimatedBee.InitRoute
void GlobalNamespace::AnimatedBee::InitRoute(::System::Collections::Generic::List_1<::GlobalNamespace::BeePerchPoint*>* route, ::System::Collections::Generic::List_1<float>* holdTimes, ::GlobalNamespace::BeeSwarmManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedBee::InitRoute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitRoute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(route), ::il2cpp_utils::ExtractType(holdTimes), ::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, route, holdTimes, manager);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AnimatedButterfly
#include "GlobalNamespace/AnimatedButterfly.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: ButterflySwarmManager
#include "GlobalNamespace/ButterflySwarmManager.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private ShaderHashId _BaseColor
::GlobalNamespace::ShaderHashId GlobalNamespace::AnimatedButterfly::_get__BaseColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::_get__BaseColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ShaderHashId>("", "AnimatedButterfly", "_BaseColor"));
}
// Autogenerated static field setter
// Set static field: static private ShaderHashId _BaseColor
void GlobalNamespace::AnimatedButterfly::_set__BaseColor(::GlobalNamespace::ShaderHashId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::_set__BaseColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimatedButterfly", "_BaseColor", value));
}
// Autogenerated static field getter
// Get static field: static private ShaderHashId _VertexFlapPhaseOffset
::GlobalNamespace::ShaderHashId GlobalNamespace::AnimatedButterfly::_get__VertexFlapPhaseOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::_get__VertexFlapPhaseOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ShaderHashId>("", "AnimatedButterfly", "_VertexFlapPhaseOffset"));
}
// Autogenerated static field setter
// Set static field: static private ShaderHashId _VertexFlapPhaseOffset
void GlobalNamespace::AnimatedButterfly::_set__VertexFlapPhaseOffset(::GlobalNamespace::ShaderHashId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::_set__VertexFlapPhaseOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimatedButterfly", "_VertexFlapPhaseOffset", value));
}
// Autogenerated static field getter
// Get static field: static private ShaderHashId _VertexFlapSpeed
::GlobalNamespace::ShaderHashId GlobalNamespace::AnimatedButterfly::_get__VertexFlapSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::_get__VertexFlapSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ShaderHashId>("", "AnimatedButterfly", "_VertexFlapSpeed"));
}
// Autogenerated static field setter
// Set static field: static private ShaderHashId _VertexFlapSpeed
void GlobalNamespace::AnimatedButterfly::_set__VertexFlapSpeed(::GlobalNamespace::ShaderHashId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::_set__VertexFlapSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimatedButterfly", "_VertexFlapSpeed", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<AnimatedButterfly/TimedDestination> destinationCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedButterfly::TimedDestination>*& GlobalNamespace::AnimatedButterfly::dyn_destinationCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_destinationCache");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedButterfly::TimedDestination>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AnimatedButterfly/TimedDestination destinationA
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AnimatedButterfly::TimedDestination& GlobalNamespace::AnimatedButterfly::dyn_destinationA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_destinationA");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationA"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AnimatedButterfly::TimedDestination*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AnimatedButterfly/TimedDestination destinationB
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AnimatedButterfly::TimedDestination& GlobalNamespace::AnimatedButterfly::dyn_destinationB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_destinationB");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "destinationB"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AnimatedButterfly::TimedDestination*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single loopDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimatedButterfly::dyn_loopDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_loopDuration");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 oldPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::AnimatedButterfly::dyn_oldPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_oldPosition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::AnimatedButterfly::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_velocity");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.MeshRenderer visual
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::AnimatedButterfly::dyn_visual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_visual");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "visual"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::AnimatedButterfly::dyn_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_material");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimatedButterfly::dyn_speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_speed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxTravelTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimatedButterfly::dyn_maxTravelTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_maxTravelTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxTravelTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion travellingLocalRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::AnimatedButterfly::dyn_travellingLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_travellingLocalRotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "travellingLocalRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single baseFlapSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AnimatedButterfly::dyn_baseFlapSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_baseFlapSpeed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "baseFlapSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean wasPerched
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::AnimatedButterfly::dyn_wasPerched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::dyn_wasPerched");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasPerched"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AnimatedButterfly.UpdateVisual
void GlobalNamespace::AnimatedButterfly::UpdateVisual(float syncTime, ::GlobalNamespace::ButterflySwarmManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::UpdateVisual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "UpdateVisual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, syncTime, manager);
}
// Autogenerated method: AnimatedButterfly.GetPositionAndDestinationAtTime
void GlobalNamespace::AnimatedButterfly::GetPositionAndDestinationAtTime(float syncTime, ByRef<::UnityEngine::Vector3> idealPosition, ByRef<::UnityEngine::Vector3> destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::GetPositionAndDestinationAtTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetPositionAndDestinationAtTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, syncTime, byref(idealPosition), byref(destination));
}
// Autogenerated method: AnimatedButterfly.InitVisual
void GlobalNamespace::AnimatedButterfly::InitVisual(::UnityEngine::MeshRenderer* prefab, ::GlobalNamespace::ButterflySwarmManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::InitVisual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitVisual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, prefab, manager);
}
// Autogenerated method: AnimatedButterfly.SetColor
void GlobalNamespace::AnimatedButterfly::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: AnimatedButterfly.SetFlapSpeed
void GlobalNamespace::AnimatedButterfly::SetFlapSpeed(float flapSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::SetFlapSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetFlapSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flapSpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, flapSpeed);
}
// Autogenerated method: AnimatedButterfly.InitRoute
void GlobalNamespace::AnimatedButterfly::InitRoute(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* route, ::System::Collections::Generic::List_1<float>* holdTimes, ::GlobalNamespace::ButterflySwarmManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::InitRoute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitRoute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(route), ::il2cpp_utils::ExtractType(holdTimes), ::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, route, holdTimes, manager);
}
// Autogenerated method: AnimatedButterfly..cctor
void GlobalNamespace::AnimatedButterfly::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimatedButterfly::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AnimatedButterfly", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BeeAvoiderTest
#include "GlobalNamespace/BeeAvoiderTest.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] patrolPoints
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::BeeAvoiderTest::dyn_patrolPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_patrolPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "patrolPoints"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] avoidancePoints
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::BeeAvoiderTest::dyn_avoidancePoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_avoidancePoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "avoidancePoints"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeAvoiderTest::dyn_speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single acceleration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeAvoiderTest::dyn_acceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_acceleration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "acceleration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single instability
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeAvoiderTest::dyn_instability() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_instability");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instability"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single instabilityOffRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeAvoiderTest::dyn_instabilityOffRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_instabilityOffRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instabilityOffRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single drag
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeAvoiderTest::dyn_drag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_drag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single avoidRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeAvoiderTest::dyn_avoidRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_avoidRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "avoidRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single patrolArrivedRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeAvoiderTest::dyn_patrolArrivedRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_patrolArrivedRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "patrolArrivedRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 nextPatrolPoint
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeeAvoiderTest::dyn_nextPatrolPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_nextPatrolPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextPatrolPoint"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BeeAvoiderTest::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::dyn_velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeeAvoiderTest.Update
void GlobalNamespace::BeeAvoiderTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoiderTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BeeAvoidPoint
#include "GlobalNamespace/BeeAvoidPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeeAvoidPoint.Start
void GlobalNamespace::BeeAvoidPoint::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoidPoint::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeeAvoidPoint.OnDestroy
void GlobalNamespace::BeeAvoidPoint::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeAvoidPoint::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BeePerchPoint
#include "GlobalNamespace/BeePerchPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 localPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BeePerchPoint::dyn_localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeePerchPoint::dyn_localPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeePerchPoint.GetPoint
::UnityEngine::Vector3 GlobalNamespace::BeePerchPoint::GetPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeePerchPoint::GetPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BeeSwarmManager
#include "GlobalNamespace/BeeSwarmManager.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: BeePerchPoint
#include "GlobalNamespace/BeePerchPoint.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SRand
#include "GlobalNamespace/SRand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.List`1<UnityEngine.GameObject> avoidPoints
::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GlobalNamespace::BeeSwarmManager::_get_avoidPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::_get_avoidPoints");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>("", "BeeSwarmManager", "avoidPoints"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.List`1<UnityEngine.GameObject> avoidPoints
void GlobalNamespace::BeeSwarmManager::_set_avoidPoints(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::_set_avoidPoints");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeeSwarmManager", "avoidPoints", value));
}
// Autogenerated instance field getter
// Get instance field: private XSceneRef[] flowerSections
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::XSceneRef>& GlobalNamespace::BeeSwarmManager::dyn_flowerSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_flowerSections");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flowerSections"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::XSceneRef>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 loopSizePerBee
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeeSwarmManager::dyn_loopSizePerBee() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_loopSizePerBee");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopSizePerBee"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numBees
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BeeSwarmManager::dyn_numBees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_numBees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numBees"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer beePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::BeeSwarmManager::dyn_beePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_beePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource nearbyBeeBuzz
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::BeeSwarmManager::dyn_nearbyBeeBuzz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_nearbyBeeBuzz");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nearbyBeeBuzz"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource generalBeeBuzz
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::BeeSwarmManager::dyn_generalBeeBuzz() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_generalBeeBuzz");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "generalBeeBuzz"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] flowerSectionsResolved
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::BeeSwarmManager::dyn_flowerSectionsResolved() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_flowerSectionsResolved");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flowerSectionsResolved"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BeePerchPoint <BeeHive>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BeePerchPoint*& GlobalNamespace::BeeSwarmManager::dyn_$BeeHive$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeHive$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeHive>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BeePerchPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeSpeed>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeSpeed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeSpeed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeSpeed>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeMaxTravelTime>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeMaxTravelTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeMaxTravelTime$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeMaxTravelTime>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeAcceleration>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeAcceleration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeAcceleration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeAcceleration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeJitterStrength>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeJitterStrength$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeJitterStrength$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeJitterStrength>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeJitterDamping>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeJitterDamping$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeJitterDamping$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeJitterDamping>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeMaxJitterRadius>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeMaxJitterRadius$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeMaxJitterRadius$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeMaxJitterRadius>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeNearDestinationRadius>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeNearDestinationRadius$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeNearDestinationRadius$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeNearDestinationRadius>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <AvoidPointRadius>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$AvoidPointRadius$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$AvoidPointRadius$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AvoidPointRadius>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeMinFlowerDuration>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeMinFlowerDuration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeMinFlowerDuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeMinFlowerDuration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeMaxFlowerDuration>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$BeeMaxFlowerDuration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$BeeMaxFlowerDuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeMaxFlowerDuration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <GeneralBuzzRange>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BeeSwarmManager::dyn_$GeneralBuzzRange$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_$GeneralBuzzRange$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GeneralBuzzRange>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<AnimatedBee> bees
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedBee>*& GlobalNamespace::BeeSwarmManager::dyn_bees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_bees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bees"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedBee>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform playerCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BeeSwarmManager::dyn_playerCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_playerCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<BeePerchPoint> allPerchPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BeePerchPoint*>*& GlobalNamespace::BeeSwarmManager::dyn_allPerchPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::dyn_allPerchPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allPerchPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BeePerchPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BeeSwarmManager.get_BeeHive
::GlobalNamespace::BeePerchPoint* GlobalNamespace::BeeSwarmManager::get_BeeHive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeHive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeHive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BeePerchPoint*, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeHive
void GlobalNamespace::BeeSwarmManager::set_BeeHive(::GlobalNamespace::BeePerchPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeHive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeHive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeSpeed
float GlobalNamespace::BeeSwarmManager::get_BeeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeSpeed
void GlobalNamespace::BeeSwarmManager::set_BeeSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeMaxTravelTime
float GlobalNamespace::BeeSwarmManager::get_BeeMaxTravelTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeMaxTravelTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeMaxTravelTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeMaxTravelTime
void GlobalNamespace::BeeSwarmManager::set_BeeMaxTravelTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeMaxTravelTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeMaxTravelTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeAcceleration
float GlobalNamespace::BeeSwarmManager::get_BeeAcceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeAcceleration
void GlobalNamespace::BeeSwarmManager::set_BeeAcceleration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeJitterStrength
float GlobalNamespace::BeeSwarmManager::get_BeeJitterStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeJitterStrength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeJitterStrength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeJitterStrength
void GlobalNamespace::BeeSwarmManager::set_BeeJitterStrength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeJitterStrength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeJitterStrength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeJitterDamping
float GlobalNamespace::BeeSwarmManager::get_BeeJitterDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeJitterDamping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeJitterDamping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeJitterDamping
void GlobalNamespace::BeeSwarmManager::set_BeeJitterDamping(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeJitterDamping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeJitterDamping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeMaxJitterRadius
float GlobalNamespace::BeeSwarmManager::get_BeeMaxJitterRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeMaxJitterRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeMaxJitterRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeMaxJitterRadius
void GlobalNamespace::BeeSwarmManager::set_BeeMaxJitterRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeMaxJitterRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeMaxJitterRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeNearDestinationRadius
float GlobalNamespace::BeeSwarmManager::get_BeeNearDestinationRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeNearDestinationRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeNearDestinationRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeNearDestinationRadius
void GlobalNamespace::BeeSwarmManager::set_BeeNearDestinationRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeNearDestinationRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeNearDestinationRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_AvoidPointRadius
float GlobalNamespace::BeeSwarmManager::get_AvoidPointRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_AvoidPointRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AvoidPointRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_AvoidPointRadius
void GlobalNamespace::BeeSwarmManager::set_AvoidPointRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_AvoidPointRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AvoidPointRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeMinFlowerDuration
float GlobalNamespace::BeeSwarmManager::get_BeeMinFlowerDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeMinFlowerDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeMinFlowerDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeMinFlowerDuration
void GlobalNamespace::BeeSwarmManager::set_BeeMinFlowerDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeMinFlowerDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeMinFlowerDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_BeeMaxFlowerDuration
float GlobalNamespace::BeeSwarmManager::get_BeeMaxFlowerDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_BeeMaxFlowerDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeMaxFlowerDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_BeeMaxFlowerDuration
void GlobalNamespace::BeeSwarmManager::set_BeeMaxFlowerDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_BeeMaxFlowerDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeMaxFlowerDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.get_GeneralBuzzRange
float GlobalNamespace::BeeSwarmManager::get_GeneralBuzzRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::get_GeneralBuzzRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GeneralBuzzRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.set_GeneralBuzzRange
void GlobalNamespace::BeeSwarmManager::set_GeneralBuzzRange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::set_GeneralBuzzRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_GeneralBuzzRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeeSwarmManager.Awake
void GlobalNamespace::BeeSwarmManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.Start
void GlobalNamespace::BeeSwarmManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.OnDestroy
void GlobalNamespace::BeeSwarmManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.Update
void GlobalNamespace::BeeSwarmManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.OnSeedChange
void GlobalNamespace::BeeSwarmManager::OnSeedChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::OnSeedChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSeedChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeeSwarmManager.PickPoints
void GlobalNamespace::BeeSwarmManager::PickPoints(int n, ::System::Collections::Generic::List_1<::GlobalNamespace::BeePerchPoint*>* pickBuffer, ::System::Collections::Generic::List_1<::GlobalNamespace::BeePerchPoint*>* allPerchPoints, ByRef<::GlobalNamespace::SRand> rand, ::System::Collections::Generic::List_1<::GlobalNamespace::BeePerchPoint*>* resultBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::PickPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PickPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n), ::il2cpp_utils::ExtractType(pickBuffer), ::il2cpp_utils::ExtractType(allPerchPoints), ::il2cpp_utils::ExtractType(rand), ::il2cpp_utils::ExtractType(resultBuffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, n, pickBuffer, allPerchPoints, byref(rand), resultBuffer);
}
// Autogenerated method: BeeSwarmManager.RegisterAvoidPoint
void GlobalNamespace::BeeSwarmManager::RegisterAvoidPoint(::UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::RegisterAvoidPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeeSwarmManager", "RegisterAvoidPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: BeeSwarmManager.UnregisterAvoidPoint
void GlobalNamespace::BeeSwarmManager::UnregisterAvoidPoint(::UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::UnregisterAvoidPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeeSwarmManager", "UnregisterAvoidPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: BeeSwarmManager..cctor
void GlobalNamespace::BeeSwarmManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeeSwarmManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeeSwarmManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ButterflySwarmManager
#include "GlobalNamespace/ButterflySwarmManager.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: SRand
#include "GlobalNamespace/SRand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private XSceneRef[] perchSections
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::XSceneRef>& GlobalNamespace::ButterflySwarmManager::dyn_perchSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_perchSections");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "perchSections"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::XSceneRef>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 loopSizePerBee
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ButterflySwarmManager::dyn_loopSizePerBee() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_loopSizePerBee");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopSizePerBee"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 numBees
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ButterflySwarmManager::dyn_numBees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_numBees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numBees"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer beePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::ButterflySwarmManager::dyn_beePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_beePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxFlapSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_maxFlapSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_maxFlapSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxFlapSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minFlapSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_minFlapSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_minFlapSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minFlapSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <PerchedFlapSpeed>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$PerchedFlapSpeed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$PerchedFlapSpeed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PerchedFlapSpeed>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <PerchedFlapPhase>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$PerchedFlapPhase$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$PerchedFlapPhase$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PerchedFlapPhase>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeSpeed>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeSpeed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeSpeed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeSpeed>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeMaxTravelTime>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeMaxTravelTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeMaxTravelTime$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeMaxTravelTime>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeAcceleration>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeAcceleration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeAcceleration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeAcceleration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeJitterStrength>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeJitterStrength$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeJitterStrength$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeJitterStrength>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeJitterDamping>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeJitterDamping$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeJitterDamping$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeJitterDamping>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeMaxJitterRadius>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeMaxJitterRadius$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeMaxJitterRadius$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeMaxJitterRadius>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeNearDestinationRadius>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeNearDestinationRadius$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeNearDestinationRadius$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeNearDestinationRadius>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <DestRotationAlignmentSpeed>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$DestRotationAlignmentSpeed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$DestRotationAlignmentSpeed$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<DestRotationAlignmentSpeed>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 <TravellingLocalRotationEuler>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ButterflySwarmManager::dyn_$TravellingLocalRotationEuler$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$TravellingLocalRotationEuler$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TravellingLocalRotationEuler>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion <TravellingLocalRotation>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ButterflySwarmManager::dyn_$TravellingLocalRotation$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$TravellingLocalRotation$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TravellingLocalRotation>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <AvoidPointRadius>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$AvoidPointRadius$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$AvoidPointRadius$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AvoidPointRadius>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeMinFlowerDuration>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeMinFlowerDuration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeMinFlowerDuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeMinFlowerDuration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <BeeMaxFlowerDuration>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ButterflySwarmManager::dyn_$BeeMaxFlowerDuration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeMaxFlowerDuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeMaxFlowerDuration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] <BeeColors>k__BackingField
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& GlobalNamespace::ButterflySwarmManager::dyn_$BeeColors$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_$BeeColors$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BeeColors>k__BackingField"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<AnimatedButterfly> butterflies
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedButterfly>*& GlobalNamespace::ButterflySwarmManager::dyn_butterflies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_butterflies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "butterflies"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::AnimatedButterfly>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.GameObject>> allPerchZones
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>*& GlobalNamespace::ButterflySwarmManager::dyn_allPerchZones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::dyn_allPerchZones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allPerchZones"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ButterflySwarmManager.get_PerchedFlapSpeed
float GlobalNamespace::ButterflySwarmManager::get_PerchedFlapSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_PerchedFlapSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PerchedFlapSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_PerchedFlapSpeed
void GlobalNamespace::ButterflySwarmManager::set_PerchedFlapSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_PerchedFlapSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PerchedFlapSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_PerchedFlapPhase
float GlobalNamespace::ButterflySwarmManager::get_PerchedFlapPhase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_PerchedFlapPhase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PerchedFlapPhase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_PerchedFlapPhase
void GlobalNamespace::ButterflySwarmManager::set_PerchedFlapPhase(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_PerchedFlapPhase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PerchedFlapPhase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeSpeed
float GlobalNamespace::ButterflySwarmManager::get_BeeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeSpeed
void GlobalNamespace::ButterflySwarmManager::set_BeeSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeMaxTravelTime
float GlobalNamespace::ButterflySwarmManager::get_BeeMaxTravelTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeMaxTravelTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeMaxTravelTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeMaxTravelTime
void GlobalNamespace::ButterflySwarmManager::set_BeeMaxTravelTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeMaxTravelTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeMaxTravelTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeAcceleration
float GlobalNamespace::ButterflySwarmManager::get_BeeAcceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeAcceleration
void GlobalNamespace::ButterflySwarmManager::set_BeeAcceleration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeAcceleration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeAcceleration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeJitterStrength
float GlobalNamespace::ButterflySwarmManager::get_BeeJitterStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeJitterStrength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeJitterStrength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeJitterStrength
void GlobalNamespace::ButterflySwarmManager::set_BeeJitterStrength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeJitterStrength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeJitterStrength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeJitterDamping
float GlobalNamespace::ButterflySwarmManager::get_BeeJitterDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeJitterDamping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeJitterDamping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeJitterDamping
void GlobalNamespace::ButterflySwarmManager::set_BeeJitterDamping(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeJitterDamping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeJitterDamping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeMaxJitterRadius
float GlobalNamespace::ButterflySwarmManager::get_BeeMaxJitterRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeMaxJitterRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeMaxJitterRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeMaxJitterRadius
void GlobalNamespace::ButterflySwarmManager::set_BeeMaxJitterRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeMaxJitterRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeMaxJitterRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeNearDestinationRadius
float GlobalNamespace::ButterflySwarmManager::get_BeeNearDestinationRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeNearDestinationRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeNearDestinationRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeNearDestinationRadius
void GlobalNamespace::ButterflySwarmManager::set_BeeNearDestinationRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeNearDestinationRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeNearDestinationRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_DestRotationAlignmentSpeed
float GlobalNamespace::ButterflySwarmManager::get_DestRotationAlignmentSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_DestRotationAlignmentSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DestRotationAlignmentSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_DestRotationAlignmentSpeed
void GlobalNamespace::ButterflySwarmManager::set_DestRotationAlignmentSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_DestRotationAlignmentSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_DestRotationAlignmentSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_TravellingLocalRotationEuler
::UnityEngine::Vector3 GlobalNamespace::ButterflySwarmManager::get_TravellingLocalRotationEuler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_TravellingLocalRotationEuler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TravellingLocalRotationEuler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_TravellingLocalRotationEuler
void GlobalNamespace::ButterflySwarmManager::set_TravellingLocalRotationEuler(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_TravellingLocalRotationEuler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TravellingLocalRotationEuler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_TravellingLocalRotation
::UnityEngine::Quaternion GlobalNamespace::ButterflySwarmManager::get_TravellingLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_TravellingLocalRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TravellingLocalRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_TravellingLocalRotation
void GlobalNamespace::ButterflySwarmManager::set_TravellingLocalRotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_TravellingLocalRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TravellingLocalRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_AvoidPointRadius
float GlobalNamespace::ButterflySwarmManager::get_AvoidPointRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_AvoidPointRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AvoidPointRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_AvoidPointRadius
void GlobalNamespace::ButterflySwarmManager::set_AvoidPointRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_AvoidPointRadius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AvoidPointRadius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeMinFlowerDuration
float GlobalNamespace::ButterflySwarmManager::get_BeeMinFlowerDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeMinFlowerDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeMinFlowerDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeMinFlowerDuration
void GlobalNamespace::ButterflySwarmManager::set_BeeMinFlowerDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeMinFlowerDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeMinFlowerDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeMaxFlowerDuration
float GlobalNamespace::ButterflySwarmManager::get_BeeMaxFlowerDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeMaxFlowerDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeMaxFlowerDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeMaxFlowerDuration
void GlobalNamespace::ButterflySwarmManager::set_BeeMaxFlowerDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeMaxFlowerDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeMaxFlowerDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.get_BeeColors
::ArrayW<::UnityEngine::Color> GlobalNamespace::ButterflySwarmManager::get_BeeColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::get_BeeColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BeeColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Color>, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.set_BeeColors
void GlobalNamespace::ButterflySwarmManager::set_BeeColors(::ArrayW<::UnityEngine::Color> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::set_BeeColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BeeColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ButterflySwarmManager.Awake
void GlobalNamespace::ButterflySwarmManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.Start
void GlobalNamespace::ButterflySwarmManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.OnDestroy
void GlobalNamespace::ButterflySwarmManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.Update
void GlobalNamespace::ButterflySwarmManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.OnSeedChange
void GlobalNamespace::ButterflySwarmManager::OnSeedChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::OnSeedChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSeedChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ButterflySwarmManager.PickPoints
void GlobalNamespace::ButterflySwarmManager::PickPoints(int n, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>* pickBuffer, ByRef<::GlobalNamespace::SRand> rand, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* resultBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ButterflySwarmManager::PickPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PickPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n), ::il2cpp_utils::ExtractType(pickBuffer), ::il2cpp_utils::ExtractType(rand), ::il2cpp_utils::ExtractType(resultBuffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, n, pickBuffer, byref(rand), resultBuffer);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RandomizeWavePhaseOffset
#include "GlobalNamespace/RandomizeWavePhaseOffset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ShaderHashId _VertexWavePhaseOffset
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ShaderHashId& GlobalNamespace::RandomizeWavePhaseOffset::dyn__VertexWavePhaseOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizeWavePhaseOffset::dyn__VertexWavePhaseOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_VertexWavePhaseOffset"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ShaderHashId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minPhaseOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomizeWavePhaseOffset::dyn_minPhaseOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizeWavePhaseOffset::dyn_minPhaseOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minPhaseOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxPhaseOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomizeWavePhaseOffset::dyn_maxPhaseOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizeWavePhaseOffset::dyn_maxPhaseOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxPhaseOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomizeWavePhaseOffset.Start
void GlobalNamespace::RandomizeWavePhaseOffset::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizeWavePhaseOffset::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: D20_ShaderManager
#include "GlobalNamespace/D20_ShaderManager.hpp"
// Including type: D20_ShaderManager/<UpdateVelocityCoroutine>d__6
#include "GlobalNamespace/D20_ShaderManager_-UpdateVelocityCoroutine-d__6.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody rb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::D20_ShaderManager::dyn_rb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::dyn_rb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::D20_ShaderManager::dyn_lastPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::dyn_lastPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single updateInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::D20_ShaderManager::dyn_updateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::dyn_updateInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::D20_ShaderManager::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::dyn_velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::D20_ShaderManager::dyn_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::dyn_material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: D20_ShaderManager.Start
void GlobalNamespace::D20_ShaderManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: D20_ShaderManager.UpdateVelocityCoroutine
::System::Collections::IEnumerator* GlobalNamespace::D20_ShaderManager::UpdateVelocityCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::UpdateVelocityCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVelocityCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: D20_ShaderManager/<UpdateVelocityCoroutine>d__6
#include "GlobalNamespace/D20_ShaderManager_-UpdateVelocityCoroutine-d__6.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public D20_ShaderManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::D20_ShaderManager*& GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::D20_ShaderManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: D20_ShaderManager/<UpdateVelocityCoroutine>d__6.System.IDisposable.Dispose
void GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: D20_ShaderManager/<UpdateVelocityCoroutine>d__6.MoveNext
bool GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: D20_ShaderManager/<UpdateVelocityCoroutine>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: D20_ShaderManager/<UpdateVelocityCoroutine>d__6.System.Collections.IEnumerator.Reset
void GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: D20_ShaderManager/<UpdateVelocityCoroutine>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::D20_ShaderManager::$UpdateVelocityCoroutine$d__6*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MicrophoneCosmetic
#include "GlobalNamespace/MicrophoneCosmetic.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform mouthTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::MicrophoneCosmetic::dyn_mouthTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::dyn_mouthTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mouthTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 mouthProximityRampRange
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::MicrophoneCosmetic::dyn_mouthProximityRampRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::dyn_mouthProximityRampRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mouthProximityRampRange"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::MicrophoneCosmetic::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] zero
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::MicrophoneCosmetic::dyn_zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::dyn_zero");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zero"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MicrophoneCosmetic.Awake
void GlobalNamespace::MicrophoneCosmetic::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MicrophoneCosmetic.OnEnable
void GlobalNamespace::MicrophoneCosmetic::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MicrophoneCosmetic.OnDisable
void GlobalNamespace::MicrophoneCosmetic::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MicrophoneCosmetic.Update
void GlobalNamespace::MicrophoneCosmetic::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MicrophoneCosmetic.OnAudioFilterRead
void GlobalNamespace::MicrophoneCosmetic::OnAudioFilterRead(::ArrayW<float> data, int channels) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MicrophoneCosmetic::OnAudioFilterRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAudioFilterRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channels)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channels);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PhotonViewIDAllocator
#include "GlobalNamespace/PhotonViewIDAllocator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean isStatic
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PhotonViewIDAllocator::dyn_isStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonViewIDAllocator::dyn_isStatic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isStatic"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String pathString
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::PhotonViewIDAllocator::dyn_pathString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonViewIDAllocator::dyn_pathString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pathString"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 order
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PhotonViewIDAllocator::dyn_order() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonViewIDAllocator::dyn_order");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "order"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PhotonViewIDAllocatorManager
#include "GlobalNamespace/PhotonViewIDAllocatorManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ViewsAndAllocator
#include "GlobalNamespace/ViewsAndAllocator.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Photon.Pun.PhotonView> views
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Pun::PhotonView*>*& GlobalNamespace::ViewsAndAllocator::dyn_views() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ViewsAndAllocator::dyn_views");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "views"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Photon::Pun::PhotonView*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ViewsAndAllocator::dyn_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ViewsAndAllocator::dyn_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 order
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ViewsAndAllocator::dyn_order() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ViewsAndAllocator::dyn_order");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "order"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isStatic
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ViewsAndAllocator::dyn_isStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ViewsAndAllocator::dyn_isStatic");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isStatic"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FoundAllocatorsMapped
#include "GlobalNamespace/FoundAllocatorsMapped.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ViewsAndAllocator
#include "GlobalNamespace/ViewsAndAllocator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FoundAllocatorsMapped::dyn_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FoundAllocatorsMapped::dyn_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<ViewsAndAllocator> allocators
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ViewsAndAllocator*>*& GlobalNamespace::FoundAllocatorsMapped::dyn_allocators() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FoundAllocatorsMapped::dyn_allocators");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allocators"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::ViewsAndAllocator*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<FoundAllocatorsMapped> subGroups
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::FoundAllocatorsMapped*>*& GlobalNamespace::FoundAllocatorsMapped::dyn_subGroups() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FoundAllocatorsMapped::dyn_subGroups");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subGroups"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::FoundAllocatorsMapped*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ApplicationQuittingState
#include "GlobalNamespace/ApplicationQuittingState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean <IsQuitting>k__BackingField
bool GlobalNamespace::ApplicationQuittingState::_get_$IsQuitting$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplicationQuittingState::_get_$IsQuitting$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "ApplicationQuittingState", "<IsQuitting>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <IsQuitting>k__BackingField
void GlobalNamespace::ApplicationQuittingState::_set_$IsQuitting$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplicationQuittingState::_set_$IsQuitting$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplicationQuittingState", "<IsQuitting>k__BackingField", value));
}
// Autogenerated method: ApplicationQuittingState.get_IsQuitting
bool GlobalNamespace::ApplicationQuittingState::get_IsQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplicationQuittingState::get_IsQuitting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ApplicationQuittingState", "get_IsQuitting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ApplicationQuittingState.set_IsQuitting
void GlobalNamespace::ApplicationQuittingState::set_IsQuitting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplicationQuittingState::set_IsQuitting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ApplicationQuittingState", "set_IsQuitting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ApplicationQuittingState.Init
void GlobalNamespace::ApplicationQuittingState::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplicationQuittingState::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ApplicationQuittingState", "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ApplicationQuittingState.HandleApplicationQuitting
void GlobalNamespace::ApplicationQuittingState::HandleApplicationQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplicationQuittingState::HandleApplicationQuitting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ApplicationQuittingState", "HandleApplicationQuitting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ApplyMaterialProperty
#include "GlobalNamespace/ApplyMaterialProperty.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: ApplyMaterialProperty/SuportedTypes
#include "GlobalNamespace/ApplyMaterialProperty_SuportedTypes.hpp"
// Including type: ApplyMaterialProperty/CustomMaterialData
#include "GlobalNamespace/ApplyMaterialProperty_CustomMaterialData.hpp"
// Including type: MaterialInstance
#include "GlobalNamespace/MaterialInstance.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ApplyMaterialProperty/ApplyMode mode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ApplyMaterialProperty::ApplyMode& GlobalNamespace::ApplyMaterialProperty::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ApplyMaterialProperty::ApplyMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material targetMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::ApplyMaterialProperty::dyn_targetMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::dyn_targetMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private MaterialInstance _instance
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialInstance*& GlobalNamespace::ApplyMaterialProperty::dyn__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::dyn__instance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instance"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MaterialInstance**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::ApplyMaterialProperty::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<ApplyMaterialProperty/CustomMaterialData> customData
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData*>*& GlobalNamespace::ApplyMaterialProperty::dyn_customData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::dyn_customData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "customData"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean applyOnStart
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ApplyMaterialProperty::dyn_applyOnStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::dyn_applyOnStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "applyOnStart"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock _block
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::ApplyMaterialProperty::dyn__block() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::dyn__block");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_block"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ApplyMaterialProperty.Start
void GlobalNamespace::ApplyMaterialProperty::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ApplyMaterialProperty.Apply
void GlobalNamespace::ApplyMaterialProperty::Apply() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ApplyMaterialProperty.SetColor
void GlobalNamespace::ApplyMaterialProperty::SetColor(::StringW propertyName, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(propertyName), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, propertyName, color);
}
// Autogenerated method: ApplyMaterialProperty.SetFloat
void GlobalNamespace::ApplyMaterialProperty::SetFloat(::StringW propertyName, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(propertyName), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, propertyName, value);
}
// Autogenerated method: ApplyMaterialProperty.GetOrCreateData
::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData* GlobalNamespace::ApplyMaterialProperty::GetOrCreateData(::StringW propertyName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::GetOrCreateData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOrCreateData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(propertyName)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData*, false>(this, ___internal__method, propertyName);
}
// Autogenerated method: ApplyMaterialProperty.ApplyMaterialInstance
void GlobalNamespace::ApplyMaterialProperty::ApplyMaterialInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::ApplyMaterialInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyMaterialInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ApplyMaterialProperty.ApplyMaterialPropertyBlock
void GlobalNamespace::ApplyMaterialProperty::ApplyMaterialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::ApplyMaterialPropertyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyMaterialPropertyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ApplyMaterialProperty/ApplyMode
#include "GlobalNamespace/ApplyMaterialProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ApplyMaterialProperty/ApplyMode MaterialInstance
::GlobalNamespace::ApplyMaterialProperty::ApplyMode GlobalNamespace::ApplyMaterialProperty::ApplyMode::_get_MaterialInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::ApplyMode::_get_MaterialInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ApplyMaterialProperty::ApplyMode>("", "ApplyMaterialProperty/ApplyMode", "MaterialInstance"));
}
// Autogenerated static field setter
// Set static field: static public ApplyMaterialProperty/ApplyMode MaterialInstance
void GlobalNamespace::ApplyMaterialProperty::ApplyMode::_set_MaterialInstance(::GlobalNamespace::ApplyMaterialProperty::ApplyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::ApplyMode::_set_MaterialInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplyMaterialProperty/ApplyMode", "MaterialInstance", value));
}
// Autogenerated static field getter
// Get static field: static public ApplyMaterialProperty/ApplyMode MaterialPropertyBlock
::GlobalNamespace::ApplyMaterialProperty::ApplyMode GlobalNamespace::ApplyMaterialProperty::ApplyMode::_get_MaterialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::ApplyMode::_get_MaterialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ApplyMaterialProperty::ApplyMode>("", "ApplyMaterialProperty/ApplyMode", "MaterialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static public ApplyMaterialProperty/ApplyMode MaterialPropertyBlock
void GlobalNamespace::ApplyMaterialProperty::ApplyMode::_set_MaterialPropertyBlock(::GlobalNamespace::ApplyMaterialProperty::ApplyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::ApplyMode::_set_MaterialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplyMaterialProperty/ApplyMode", "MaterialPropertyBlock", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ApplyMaterialProperty::ApplyMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::ApplyMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ApplyMaterialProperty/SuportedTypes
#include "GlobalNamespace/ApplyMaterialProperty_SuportedTypes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ApplyMaterialProperty/SuportedTypes Color
::GlobalNamespace::ApplyMaterialProperty::SuportedTypes GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Color");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ApplyMaterialProperty::SuportedTypes>("", "ApplyMaterialProperty/SuportedTypes", "Color"));
}
// Autogenerated static field setter
// Set static field: static public ApplyMaterialProperty/SuportedTypes Color
void GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Color(::GlobalNamespace::ApplyMaterialProperty::SuportedTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Color");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplyMaterialProperty/SuportedTypes", "Color", value));
}
// Autogenerated static field getter
// Get static field: static public ApplyMaterialProperty/SuportedTypes Float
::GlobalNamespace::ApplyMaterialProperty::SuportedTypes GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ApplyMaterialProperty::SuportedTypes>("", "ApplyMaterialProperty/SuportedTypes", "Float"));
}
// Autogenerated static field setter
// Set static field: static public ApplyMaterialProperty/SuportedTypes Float
void GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Float(::GlobalNamespace::ApplyMaterialProperty::SuportedTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplyMaterialProperty/SuportedTypes", "Float", value));
}
// Autogenerated static field getter
// Get static field: static public ApplyMaterialProperty/SuportedTypes Vector2
::GlobalNamespace::ApplyMaterialProperty::SuportedTypes GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Vector2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Vector2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ApplyMaterialProperty::SuportedTypes>("", "ApplyMaterialProperty/SuportedTypes", "Vector2"));
}
// Autogenerated static field setter
// Set static field: static public ApplyMaterialProperty/SuportedTypes Vector2
void GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Vector2(::GlobalNamespace::ApplyMaterialProperty::SuportedTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Vector2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplyMaterialProperty/SuportedTypes", "Vector2", value));
}
// Autogenerated static field getter
// Get static field: static public ApplyMaterialProperty/SuportedTypes Vector3
::GlobalNamespace::ApplyMaterialProperty::SuportedTypes GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Vector3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Vector3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ApplyMaterialProperty::SuportedTypes>("", "ApplyMaterialProperty/SuportedTypes", "Vector3"));
}
// Autogenerated static field setter
// Set static field: static public ApplyMaterialProperty/SuportedTypes Vector3
void GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Vector3(::GlobalNamespace::ApplyMaterialProperty::SuportedTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Vector3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplyMaterialProperty/SuportedTypes", "Vector3", value));
}
// Autogenerated static field getter
// Get static field: static public ApplyMaterialProperty/SuportedTypes Vector4
::GlobalNamespace::ApplyMaterialProperty::SuportedTypes GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Vector4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Vector4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ApplyMaterialProperty::SuportedTypes>("", "ApplyMaterialProperty/SuportedTypes", "Vector4"));
}
// Autogenerated static field setter
// Set static field: static public ApplyMaterialProperty/SuportedTypes Vector4
void GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Vector4(::GlobalNamespace::ApplyMaterialProperty::SuportedTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Vector4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplyMaterialProperty/SuportedTypes", "Vector4", value));
}
// Autogenerated static field getter
// Get static field: static public ApplyMaterialProperty/SuportedTypes Texture2D
::GlobalNamespace::ApplyMaterialProperty::SuportedTypes GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Texture2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_get_Texture2D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ApplyMaterialProperty::SuportedTypes>("", "ApplyMaterialProperty/SuportedTypes", "Texture2D"));
}
// Autogenerated static field setter
// Set static field: static public ApplyMaterialProperty/SuportedTypes Texture2D
void GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Texture2D(::GlobalNamespace::ApplyMaterialProperty::SuportedTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::_set_Texture2D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ApplyMaterialProperty/SuportedTypes", "Texture2D", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ApplyMaterialProperty::SuportedTypes::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::SuportedTypes::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ApplyMaterialProperty/CustomMaterialData
#include "GlobalNamespace/ApplyMaterialProperty_CustomMaterialData.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String name
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ApplyMaterialProperty/SuportedTypes dataType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ApplyMaterialProperty::SuportedTypes& GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_dataType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_dataType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dataType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ApplyMaterialProperty::SuportedTypes*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single float
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_float");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "float"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 vector2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_vector2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_vector2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vector2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 vector3
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_vector3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_vector3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vector3"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector4 vector4
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_vector4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_vector4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vector4"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D texture2D
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_texture2D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::dyn_texture2D");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "texture2D"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ApplyMaterialProperty/CustomMaterialData.GetHashCode
int GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ApplyMaterialProperty::CustomMaterialData::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlayerSpeedBasedAudio
#include "GlobalNamespace/PlayerSpeedBasedAudio.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single minVolumeSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlayerSpeedBasedAudio::dyn_minVolumeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_minVolumeSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minVolumeSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fullVolumeSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlayerSpeedBasedAudio::dyn_fullVolumeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_fullVolumeSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fullVolumeSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fadeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlayerSpeedBasedAudio::dyn_fadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_fadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::PlayerSpeedBasedAudio::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private XSceneRef localPlayerVelocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::XSceneRef& GlobalNamespace::PlayerSpeedBasedAudio::dyn_localPlayerVelocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_localPlayerVelocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localPlayerVelocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::XSceneRef*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaVelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& GlobalNamespace::PlayerSpeedBasedAudio::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaVelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single baseVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlayerSpeedBasedAudio::dyn_baseVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_baseVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "baseVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fadeRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlayerSpeedBasedAudio::dyn_fadeRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_fadeRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fadeRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentFadeLevel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlayerSpeedBasedAudio::dyn_currentFadeLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::dyn_currentFadeLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentFadeLevel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayerSpeedBasedAudio.Start
void GlobalNamespace::PlayerSpeedBasedAudio::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpeedBasedAudio.Update
void GlobalNamespace::PlayerSpeedBasedAudio::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSpeedBasedAudio::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaSkin
#include "GlobalNamespace/GorillaSkin.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _faceMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaSkin::dyn__faceMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__faceMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_faceMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _chestMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaSkin::dyn__chestMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__chestMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_chestMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _bodyMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaSkin::dyn__bodyMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__bodyMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bodyMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _scoreboardMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaSkin::dyn__scoreboardMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__scoreboardMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreboardMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Mesh _bodyMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& GlobalNamespace::GorillaSkin::dyn__bodyMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__bodyMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bodyMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Mesh**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _bodyRuntime
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaSkin::dyn__bodyRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__bodyRuntime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bodyRuntime"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _chestRuntime
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaSkin::dyn__chestRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__chestRuntime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_chestRuntime"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _faceRuntime
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaSkin::dyn__faceRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__faceRuntime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_faceRuntime"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material _scoreRuntime
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaSkin::dyn__scoreRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::dyn__scoreRuntime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scoreRuntime"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaSkin.get_bodyMesh
::UnityEngine::Mesh* GlobalNamespace::GorillaSkin::get_bodyMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::get_bodyMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bodyMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkin.get_faceMaterial
::UnityEngine::Material* GlobalNamespace::GorillaSkin::get_faceMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::get_faceMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_faceMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkin.get_bodyMaterial
::UnityEngine::Material* GlobalNamespace::GorillaSkin::get_bodyMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::get_bodyMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bodyMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkin.get_chestMaterial
::UnityEngine::Material* GlobalNamespace::GorillaSkin::get_chestMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::get_chestMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chestMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkin.get_scoreboardMaterial
::UnityEngine::Material* GlobalNamespace::GorillaSkin::get_scoreboardMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::get_scoreboardMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scoreboardMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkin.ApplyToRig
void GlobalNamespace::GorillaSkin::ApplyToRig(::GlobalNamespace::VRRig* rig, ::GlobalNamespace::GorillaSkin* skin, bool useDefaultBodySkin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::ApplyToRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GorillaSkin", "ApplyToRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig), ::il2cpp_utils::ExtractType(skin), ::il2cpp_utils::ExtractType(useDefaultBodySkin)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rig, skin, useDefaultBodySkin);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaSkinCatalog
#include "GlobalNamespace/GorillaSkinCatalog.hpp"
// Including type: GorillaSkin
#include "GlobalNamespace/GorillaSkin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaSkin[] skins
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaSkin*>& GlobalNamespace::GorillaSkinCatalog::dyn_skins() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinCatalog::dyn_skins");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skins"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaSkin*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaSkinToggle
#include "GlobalNamespace/GorillaSkinToggle.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: GorillaSkin
#include "GlobalNamespace/GorillaSkin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VRRig _rig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::GorillaSkinToggle::dyn__rig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::dyn__rig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaSkin _skin
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSkin*& GlobalNamespace::GorillaSkinToggle::dyn__skin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::dyn__skin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_skin"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaSkin**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaSkin _default
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSkin*& GlobalNamespace::GorillaSkinToggle::dyn__default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::dyn__default");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_default"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaSkin**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _applied
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaSkinToggle::dyn__applied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::dyn__applied");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_applied"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaSkinToggle::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GorillaTag.ISpawnable.IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaSkinToggle.get_applied
bool GlobalNamespace::GorillaSkinToggle::get_applied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::get_applied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_applied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkinToggle.GorillaTag.ISpawnable.get_IsSpawned
bool GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::GorillaTag.ISpawnable.get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaSkinToggle*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkinToggle.GorillaTag.ISpawnable.set_IsSpawned
void GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::GorillaTag.ISpawnable.set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaSkinToggle*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GorillaSkinToggle.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaSkinToggle*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkinToggle.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::GorillaSkinToggle::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaSkinToggle*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkinToggle.OnEnable
void GlobalNamespace::GorillaSkinToggle::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkinToggle.OnDisable
void GlobalNamespace::GorillaSkinToggle::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkinToggle.Apply
void GlobalNamespace::GorillaSkinToggle::Apply() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaSkinToggle.Remove
void GlobalNamespace::GorillaSkinToggle::Remove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkinToggle::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GragerHoldable
#include "GlobalNamespace/GragerHoldable.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 LocalCenterOfMass
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GragerHoldable::dyn_LocalCenterOfMass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_LocalCenterOfMass");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LocalCenterOfMass"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 LocalRotationAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GragerHoldable::dyn_LocalRotationAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_LocalRotationAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LocalRotationAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 RotationCorrectionEuler
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GragerHoldable::dyn_RotationCorrectionEuler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_RotationCorrectionEuler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RotationCorrectionEuler"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single drag
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GragerHoldable::dyn_drag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_drag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single gravity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GragerHoldable::dyn_gravity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_gravity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gravity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single localFriction
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GragerHoldable::dyn_localFriction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_localFriction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localFriction"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single distancePerClack
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GragerHoldable::dyn_distancePerClack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_distancePerClack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distancePerClack"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource clackAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GragerHoldable::dyn_clackAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_clackAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clackAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip[] allClacks
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::GragerHoldable::dyn_allClacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_allClacks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allClacks"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single centerOfMassRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GragerHoldable::dyn_centerOfMassRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_centerOfMassRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "centerOfMassRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GragerHoldable::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastWorldPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GragerHoldable::dyn_lastWorldPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_lastWorldPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastWorldPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastClackParentLocalPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GragerHoldable::dyn_lastClackParentLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_lastClackParentLocalPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastClackParentLocalPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion RotationCorrection
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::GragerHoldable::dyn_RotationCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::dyn_RotationCorrection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RotationCorrection"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GragerHoldable.Start
void GlobalNamespace::GragerHoldable::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GragerHoldable.Update
void GlobalNamespace::GragerHoldable::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GragerHoldable::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: IgnoreLocalRotation
#include "GlobalNamespace/IgnoreLocalRotation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IgnoreLocalRotation.LateUpdate
void GlobalNamespace::IgnoreLocalRotation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IgnoreLocalRotation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LongScarfSim
#include "GlobalNamespace/LongScarfSim.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] gameObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::LongScarfSim::dyn_gameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_gameObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single speedThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LongScarfSim::dyn_speedThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_speedThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speedThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single blendAmountPerSecond
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LongScarfSim::dyn_blendAmountPerSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_blendAmountPerSecond");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blendAmountPerSecond"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaVelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& GlobalNamespace::LongScarfSim::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaVelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion[] baseLocalRotations
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::LongScarfSim::dyn_baseLocalRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_baseLocalRotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "baseLocalRotations"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentBlend
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LongScarfSim::dyn_currentBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_currentBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentBlend"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single centerOfMassLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LongScarfSim::dyn_centerOfMassLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_centerOfMassLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "centerOfMassLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single gravityStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LongScarfSim::dyn_gravityStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_gravityStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gravityStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single drag
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LongScarfSim::dyn_drag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_drag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 clampToPlane
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LongScarfSim::dyn_clampToPlane() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_clampToPlane");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clampToPlane"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastCenterPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LongScarfSim::dyn_lastCenterPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_lastCenterPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastCenterPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LongScarfSim::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::dyn_velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LongScarfSim.Start
void GlobalNamespace::LongScarfSim::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LongScarfSim.LateUpdate
void GlobalNamespace::LongScarfSim::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LongScarfSim::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpeedDrivenAnim
#include "GlobalNamespace/SpeedDrivenAnim.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single speed0
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpeedDrivenAnim::dyn_speed0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::dyn_speed0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speed0"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single speed1
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpeedDrivenAnim::dyn_speed1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::dyn_speed1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speed1"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxChangePerSecond
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpeedDrivenAnim::dyn_maxChangePerSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::dyn_maxChangePerSecond");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxChangePerSecond"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String animKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SpeedDrivenAnim::dyn_animKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::dyn_animKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaVelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& GlobalNamespace::SpeedDrivenAnim::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaVelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::SpeedDrivenAnim::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 keyHash
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SpeedDrivenAnim::dyn_keyHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::dyn_keyHash");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "keyHash"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentBlend
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpeedDrivenAnim::dyn_currentBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::dyn_currentBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentBlend"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpeedDrivenAnim.Start
void GlobalNamespace::SpeedDrivenAnim::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpeedDrivenAnim.Update
void GlobalNamespace::SpeedDrivenAnim::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpinRotation
#include "GlobalNamespace/SpinRotation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 rotationPerSecondEuler
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SpinRotation::dyn_rotationPerSecondEuler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::dyn_rotationPerSecondEuler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationPerSecondEuler"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion baseRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SpinRotation::dyn_baseRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::dyn_baseRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "baseRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single baseTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpinRotation::dyn_baseTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::dyn_baseTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "baseTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <TickRunning>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SpinRotation::dyn_$TickRunning$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::dyn_$TickRunning$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TickRunning>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpinRotation.get_TickRunning
bool GlobalNamespace::SpinRotation::get_TickRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::get_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SpinRotation*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SpinRotation.set_TickRunning
void GlobalNamespace::SpinRotation::set_TickRunning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::set_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SpinRotation*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SpinRotation.Tick
void GlobalNamespace::SpinRotation::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::Tick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SpinRotation*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpinRotation.Awake
void GlobalNamespace::SpinRotation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpinRotation.OnEnable
void GlobalNamespace::SpinRotation::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpinRotation.OnDisable
void GlobalNamespace::SpinRotation::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpinRotation::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TasselPhysics
#include "GlobalNamespace/TasselPhysics.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] tasselInstances
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::TasselPhysics::dyn_tasselInstances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::dyn_tasselInstances");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tasselInstances"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 localCenterOfMass
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TasselPhysics::dyn_localCenterOfMass() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::dyn_localCenterOfMass");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localCenterOfMass"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single gravityStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TasselPhysics::dyn_gravityStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::dyn_gravityStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gravityStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single drag
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TasselPhysics::dyn_drag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::dyn_drag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastCenterPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TasselPhysics::dyn_lastCenterPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::dyn_lastCenterPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastCenterPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TasselPhysics::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::dyn_velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single centerOfMassLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TasselPhysics::dyn_centerOfMassLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::dyn_centerOfMassLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "centerOfMassLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TasselPhysics.Awake
void GlobalNamespace::TasselPhysics::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TasselPhysics.Update
void GlobalNamespace::TasselPhysics::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TasselPhysics::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: TriggerOnJump
#include "GlobalNamespace/TriggerOnJump.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: RubberDuckEvents
#include "GlobalNamespace/RubberDuckEvents.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: PhotonMessageInfoWrapped
#include "GlobalNamespace/PhotonMessageInfoWrapped.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single minJumpStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TriggerOnJump::dyn_minJumpStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_minJumpStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minJumpStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minJumpVertical
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TriggerOnJump::dyn_minJumpVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_minJumpVertical");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minJumpVertical"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single cooldownTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TriggerOnJump::dyn_cooldownTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_cooldownTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldownTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Events.UnityEvent onJumping
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::TriggerOnJump::dyn_onJumping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_onJumping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onJumping"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RubberDuckEvents _events
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RubberDuckEvents*& GlobalNamespace::TriggerOnJump::dyn__events() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn__events");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_events"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RubberDuckEvents**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean playerOnGround
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TriggerOnJump::dyn_playerOnGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_playerOnGround");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerOnGround"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minJumpTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TriggerOnJump::dyn_minJumpTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_minJumpTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minJumpTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean waitingForGrounding
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TriggerOnJump::dyn_waitingForGrounding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_waitingForGrounding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waitingForGrounding"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single jumpStartTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TriggerOnJump::dyn_jumpStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_jumpStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jumpStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastActivationTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TriggerOnJump::dyn_lastActivationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_lastActivationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastActivationTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::TriggerOnJump::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <TickRunning>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TriggerOnJump::dyn_$TickRunning$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::dyn_$TickRunning$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TickRunning>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TriggerOnJump.OnEnable
void GlobalNamespace::TriggerOnJump::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TriggerOnJump.OnDisable
void GlobalNamespace::TriggerOnJump::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TriggerOnJump.OnActivate
void GlobalNamespace::TriggerOnJump::OnActivate(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::OnActivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, target, args, info);
}
// Autogenerated method: TriggerOnJump.Tick
void GlobalNamespace::TriggerOnJump::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::Tick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerOnJump*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TriggerOnJump.get_TickRunning
bool GlobalNamespace::TriggerOnJump::get_TickRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::get_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerOnJump*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TriggerOnJump.set_TickRunning
void GlobalNamespace::TriggerOnJump::set_TickRunning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnJump::set_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerOnJump*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TriggerOnSpeed
#include "GlobalNamespace/TriggerOnSpeed.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single speedThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TriggerOnSpeed::dyn_speedThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::dyn_speedThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speedThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Events.UnityEvent onFaster
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::TriggerOnSpeed::dyn_onFaster() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::dyn_onFaster");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onFaster"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Events.UnityEvent onSlower
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::TriggerOnSpeed::dyn_onSlower() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::dyn_onSlower");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onSlower"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaVelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& GlobalNamespace::TriggerOnSpeed::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaVelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean wasFaster
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TriggerOnSpeed::dyn_wasFaster() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::dyn_wasFaster");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasFaster"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <TickRunning>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TriggerOnSpeed::dyn_$TickRunning$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::dyn_$TickRunning$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TickRunning>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TriggerOnSpeed.OnEnable
void GlobalNamespace::TriggerOnSpeed::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TriggerOnSpeed.OnDisable
void GlobalNamespace::TriggerOnSpeed::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TriggerOnSpeed.Tick
void GlobalNamespace::TriggerOnSpeed::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::Tick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerOnSpeed*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TriggerOnSpeed.get_TickRunning
bool GlobalNamespace::TriggerOnSpeed::get_TickRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::get_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerOnSpeed*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TriggerOnSpeed.set_TickRunning
void GlobalNamespace::TriggerOnSpeed::set_TickRunning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerOnSpeed::set_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerOnSpeed*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticIDUtils
#include "GlobalNamespace/CosmeticIDUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CosmeticIDUtils.PlayFabIdToIndexInCategory
int GlobalNamespace::CosmeticIDUtils::PlayFabIdToIndexInCategory(::StringW playFabIdString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticIDUtils::PlayFabIdToIndexInCategory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticIDUtils", "PlayFabIdToIndexInCategory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playFabIdString)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, playFabIdString);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticsLegacyV1Info
#include "GlobalNamespace/CosmeticsLegacyV1Info.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 k_bodyDockPositions_allObjects_length
int GlobalNamespace::CosmeticsLegacyV1Info::_get_k_bodyDockPositions_allObjects_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_get_k_bodyDockPositions_allObjects_length");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CosmeticsLegacyV1Info", "k_bodyDockPositions_allObjects_length"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 k_bodyDockPositions_allObjects_length
void GlobalNamespace::CosmeticsLegacyV1Info::_set_k_bodyDockPositions_allObjects_length(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_set_k_bodyDockPositions_allObjects_length");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsLegacyV1Info", "k_bodyDockPositions_allObjects_length", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_special
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GlobalNamespace::CosmeticsLegacyV1Info::_get_k_special() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_get_k_special");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>("", "CosmeticsLegacyV1Info", "k_special")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_special
void GlobalNamespace::CosmeticsLegacyV1Info::_set_k_special(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_set_k_special");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsLegacyV1Info", "k_special", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_packs
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GlobalNamespace::CosmeticsLegacyV1Info::_get_k_packs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_get_k_packs");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>("", "CosmeticsLegacyV1Info", "k_packs")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_packs
void GlobalNamespace::CosmeticsLegacyV1Info::_set_k_packs(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_set_k_packs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsLegacyV1Info", "k_packs", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_oldPacks
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GlobalNamespace::CosmeticsLegacyV1Info::_get_k_oldPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_get_k_oldPacks");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>("", "CosmeticsLegacyV1Info", "k_oldPacks")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_oldPacks
void GlobalNamespace::CosmeticsLegacyV1Info::_set_k_oldPacks(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_set_k_oldPacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsLegacyV1Info", "k_oldPacks", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_unused
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GlobalNamespace::CosmeticsLegacyV1Info::_get_k_unused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_get_k_unused");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>("", "CosmeticsLegacyV1Info", "k_unused")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_unused
void GlobalNamespace::CosmeticsLegacyV1Info::_set_k_unused(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_set_k_unused");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsLegacyV1Info", "k_unused", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_v1DisplayNames_to_playFabIds
::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GlobalNamespace::CosmeticsLegacyV1Info::_get_k_v1DisplayNames_to_playFabIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_get_k_v1DisplayNames_to_playFabIds");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>("", "CosmeticsLegacyV1Info", "k_v1DisplayNames_to_playFabIds")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> k_v1DisplayNames_to_playFabIds
void GlobalNamespace::CosmeticsLegacyV1Info::_set_k_v1DisplayNames_to_playFabIds(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_set_k_v1DisplayNames_to_playFabIds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsLegacyV1Info", "k_v1DisplayNames_to_playFabIds", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.Int32[]> _k_playFabId_to_bodyDockPositions_allObjects_indexes
::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<int>>* GlobalNamespace::CosmeticsLegacyV1Info::_get__k_playFabId_to_bodyDockPositions_allObjects_indexes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_get__k_playFabId_to_bodyDockPositions_allObjects_indexes");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<int>>*>("", "CosmeticsLegacyV1Info", "_k_playFabId_to_bodyDockPositions_allObjects_indexes")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.Int32[]> _k_playFabId_to_bodyDockPositions_allObjects_indexes
void GlobalNamespace::CosmeticsLegacyV1Info::_set__k_playFabId_to_bodyDockPositions_allObjects_indexes(::System::Collections::Generic::Dictionary_2<::StringW, ::ArrayW<int>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::_set__k_playFabId_to_bodyDockPositions_allObjects_indexes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsLegacyV1Info", "_k_playFabId_to_bodyDockPositions_allObjects_indexes", value));
}
// Autogenerated method: CosmeticsLegacyV1Info.TryGetPlayFabId
bool GlobalNamespace::CosmeticsLegacyV1Info::TryGetPlayFabId(::StringW unityItemId, ::StringW unityDisplayName, ::StringW unityOverrideDisplayName, ByRef<::StringW> playFabId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::TryGetPlayFabId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsLegacyV1Info", "TryGetPlayFabId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unityItemId), ::il2cpp_utils::ExtractType(unityDisplayName), ::il2cpp_utils::ExtractType(unityOverrideDisplayName), ::il2cpp_utils::ExtractIndependentType<::StringW&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, unityItemId, unityDisplayName, unityOverrideDisplayName, byref(playFabId));
}
// Autogenerated method: CosmeticsLegacyV1Info.TryGetPlayFabId
bool GlobalNamespace::CosmeticsLegacyV1Info::TryGetPlayFabId(::StringW unityItemId, ByRef<::StringW> playFabId, bool logErrors) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::TryGetPlayFabId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsLegacyV1Info", "TryGetPlayFabId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unityItemId), ::il2cpp_utils::ExtractIndependentType<::StringW&>(), ::il2cpp_utils::ExtractType(logErrors)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, unityItemId, byref(playFabId), logErrors);
}
// Autogenerated method: CosmeticsLegacyV1Info.TryGetBodyDockAllObjectsIndexes
bool GlobalNamespace::CosmeticsLegacyV1Info::TryGetBodyDockAllObjectsIndexes(::StringW playFabId, ByRef<::ArrayW<int>> bdAllIndexes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::TryGetBodyDockAllObjectsIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsLegacyV1Info", "TryGetBodyDockAllObjectsIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playFabId), ::il2cpp_utils::ExtractIndependentType<::ArrayW<int>&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, playFabId, byref(bdAllIndexes));
}
// Autogenerated method: CosmeticsLegacyV1Info.AddMissingDot
::StringW GlobalNamespace::CosmeticsLegacyV1Info::AddMissingDot(::StringW unityItemId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::AddMissingDot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsLegacyV1Info", "AddMissingDot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unityItemId)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, unityItemId);
}
// Autogenerated method: CosmeticsLegacyV1Info..cctor
void GlobalNamespace::CosmeticsLegacyV1Info::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsLegacyV1Info::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsLegacyV1Info", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticsV2Spawner_Dirty
#include "GlobalNamespace/CosmeticsV2Spawner_Dirty.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: BodyDockPositions
#include "GlobalNamespace/BodyDockPositions.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: SnowballMaker
#include "GlobalNamespace/SnowballMaker.hpp"
// Including type: SnowballThrowable
#include "GlobalNamespace/SnowballThrowable.hpp"
// Including type: GorillaLocomotion.Player
#include "GorillaLocomotion/Player.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private CosmeticsV2Spawner_Dirty _instance
::GlobalNamespace::CosmeticsV2Spawner_Dirty* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::CosmeticsV2Spawner_Dirty*>("", "CosmeticsV2Spawner_Dirty", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private CosmeticsV2Spawner_Dirty _instance
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__instance(::GlobalNamespace::CosmeticsV2Spawner_Dirty* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action OnPostInstantiateAllPrefabs
::System::Action* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_OnPostInstantiateAllPrefabs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_OnPostInstantiateAllPrefabs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action*>("", "CosmeticsV2Spawner_Dirty", "OnPostInstantiateAllPrefabs"));
}
// Autogenerated static field setter
// Set static field: static public System.Action OnPostInstantiateAllPrefabs
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_OnPostInstantiateAllPrefabs(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_OnPostInstantiateAllPrefabs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "OnPostInstantiateAllPrefabs", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action OnPostInstantiateAllPrefabs2
::System::Action* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_OnPostInstantiateAllPrefabs2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_OnPostInstantiateAllPrefabs2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action*>("", "CosmeticsV2Spawner_Dirty", "OnPostInstantiateAllPrefabs2"));
}
// Autogenerated static field setter
// Set static field: static public System.Action OnPostInstantiateAllPrefabs2
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_OnPostInstantiateAllPrefabs2(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_OnPostInstantiateAllPrefabs2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "OnPostInstantiateAllPrefabs2", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean <allPartsInstantiated>k__BackingField
bool GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_$allPartsInstantiated$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_$allPartsInstantiated$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "CosmeticsV2Spawner_Dirty", "<allPartsInstantiated>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <allPartsInstantiated>k__BackingField
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_$allPartsInstantiated$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_$allPartsInstantiated$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "<allPartsInstantiated>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean <completed>k__BackingField
bool GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_$completed$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_$completed$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("", "CosmeticsV2Spawner_Dirty", "<completed>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <completed>k__BackingField
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_$completed$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_$completed$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "<completed>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Transform _gDeactivatedSpawnParent
::UnityEngine::Transform* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gDeactivatedSpawnParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gDeactivatedSpawnParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Transform*>("", "CosmeticsV2Spawner_Dirty", "_gDeactivatedSpawnParent"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Transform _gDeactivatedSpawnParent
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gDeactivatedSpawnParent(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gDeactivatedSpawnParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_gDeactivatedSpawnParent", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _g_loadOpsCountCompleted
int GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__g_loadOpsCountCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__g_loadOpsCountCompleted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CosmeticsV2Spawner_Dirty", "_g_loadOpsCountCompleted"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _g_loadOpsCountCompleted
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__g_loadOpsCountCompleted(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__g_loadOpsCountCompleted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_g_loadOpsCountCompleted", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _k_maxActiveLoadOps
int GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__k_maxActiveLoadOps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__k_maxActiveLoadOps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CosmeticsV2Spawner_Dirty", "_k_maxActiveLoadOps"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _k_maxActiveLoadOps
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__k_maxActiveLoadOps(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__k_maxActiveLoadOps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_k_maxActiveLoadOps", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _k_maxTotalLoadOps
int GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__k_maxTotalLoadOps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__k_maxTotalLoadOps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CosmeticsV2Spawner_Dirty", "_k_maxTotalLoadOps"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _k_maxTotalLoadOps
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__k_maxTotalLoadOps(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__k_maxTotalLoadOps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_k_maxTotalLoadOps", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _k_delayedStatusCheckContextId
int GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__k_delayedStatusCheckContextId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__k_delayedStatusCheckContextId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CosmeticsV2Spawner_Dirty", "_k_delayedStatusCheckContextId"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _k_delayedStatusCheckContextId
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__k_delayedStatusCheckContextId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__k_delayedStatusCheckContextId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_k_delayedStatusCheckContextId", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<CosmeticsV2Spawner_Dirty/LoadOpInfo> _g_loadOpInfos
::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo>* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__g_loadOpInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__g_loadOpInfos");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo>*>("", "CosmeticsV2Spawner_Dirty", "_g_loadOpInfos"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<CosmeticsV2Spawner_Dirty/LoadOpInfo> _g_loadOpInfos
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__g_loadOpInfos(::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__g_loadOpInfos");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_g_loadOpInfos", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject>,System.Int32> _g_loadOp_to_index
::System::Collections::Generic::Dictionary_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>, int>* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__g_loadOp_to_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__g_loadOp_to_index");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>, int>*>("", "CosmeticsV2Spawner_Dirty", "_g_loadOp_to_index")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject>,System.Int32> _g_loadOp_to_index
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__g_loadOp_to_index(::System::Collections::Generic::Dictionary_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__g_loadOp_to_index");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_g_loadOp_to_index", value));
}
// Autogenerated static field getter
// Get static field: static private SnowballMaker _gSnowballMakerLeft
::GlobalNamespace::SnowballMaker* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gSnowballMakerLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gSnowballMakerLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SnowballMaker*>("", "CosmeticsV2Spawner_Dirty", "_gSnowballMakerLeft"));
}
// Autogenerated static field setter
// Set static field: static private SnowballMaker _gSnowballMakerLeft
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gSnowballMakerLeft(::GlobalNamespace::SnowballMaker* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gSnowballMakerLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_gSnowballMakerLeft", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<SnowballThrowable> _gSnowballMakerLeft_throwables
::System::Collections::Generic::List_1<::GlobalNamespace::SnowballThrowable*>* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gSnowballMakerLeft_throwables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gSnowballMakerLeft_throwables");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::SnowballThrowable*>*>("", "CosmeticsV2Spawner_Dirty", "_gSnowballMakerLeft_throwables"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<SnowballThrowable> _gSnowballMakerLeft_throwables
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gSnowballMakerLeft_throwables(::System::Collections::Generic::List_1<::GlobalNamespace::SnowballThrowable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gSnowballMakerLeft_throwables");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_gSnowballMakerLeft_throwables", value));
}
// Autogenerated static field getter
// Get static field: static private SnowballMaker _gSnowballMakerRight
::GlobalNamespace::SnowballMaker* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gSnowballMakerRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gSnowballMakerRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SnowballMaker*>("", "CosmeticsV2Spawner_Dirty", "_gSnowballMakerRight"));
}
// Autogenerated static field setter
// Set static field: static private SnowballMaker _gSnowballMakerRight
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gSnowballMakerRight(::GlobalNamespace::SnowballMaker* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gSnowballMakerRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_gSnowballMakerRight", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<SnowballThrowable> _gSnowballMakerRight_throwables
::System::Collections::Generic::List_1<::GlobalNamespace::SnowballThrowable*>* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gSnowballMakerRight_throwables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gSnowballMakerRight_throwables");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::SnowballThrowable*>*>("", "CosmeticsV2Spawner_Dirty", "_gSnowballMakerRight_throwables"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<SnowballThrowable> _gSnowballMakerRight_throwables
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gSnowballMakerRight_throwables(::System::Collections::Generic::List_1<::GlobalNamespace::SnowballThrowable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gSnowballMakerRight_throwables");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_gSnowballMakerRight_throwables", value));
}
// Autogenerated static field getter
// Get static field: static private GorillaLocomotion.Player g_gorillaPlayer
::GorillaLocomotion::Player* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_g_gorillaPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_g_gorillaPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GorillaLocomotion::Player*>("", "CosmeticsV2Spawner_Dirty", "g_gorillaPlayer"));
}
// Autogenerated static field setter
// Set static field: static private GorillaLocomotion.Player g_gorillaPlayer
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_g_gorillaPlayer(::GorillaLocomotion::Player* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_g_gorillaPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "g_gorillaPlayer", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Transform[] g_allInstantiatedParts
::ArrayW<::UnityEngine::Transform*> GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_g_allInstantiatedParts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_g_allInstantiatedParts");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Transform*>>("", "CosmeticsV2Spawner_Dirty", "g_allInstantiatedParts"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Transform[] g_allInstantiatedParts
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_g_allInstantiatedParts(::ArrayW<::UnityEngine::Transform*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_g_allInstantiatedParts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "g_allInstantiatedParts", value));
}
// Autogenerated static field getter
// Get static field: static private System.Diagnostics.Stopwatch k_stopwatch
::System::Diagnostics::Stopwatch* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_k_stopwatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get_k_stopwatch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Diagnostics::Stopwatch*>("", "CosmeticsV2Spawner_Dirty", "k_stopwatch"));
}
// Autogenerated static field setter
// Set static field: static private System.Diagnostics.Stopwatch k_stopwatch
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_k_stopwatch(::System::Diagnostics::Stopwatch* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set_k_stopwatch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "k_stopwatch", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<CosmeticsV2Spawner_Dirty/VRRigData> _gVRRigDatas
::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData>* GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gVRRigDatas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_get__gVRRigDatas");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData>*>("", "CosmeticsV2Spawner_Dirty", "_gVRRigDatas"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<CosmeticsV2Spawner_Dirty/VRRigData> _gVRRigDatas
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gVRRigDatas(::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_set__gVRRigDatas");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticsV2Spawner_Dirty", "_gVRRigDatas", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _shouldTick
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsV2Spawner_Dirty::dyn__shouldTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::dyn__shouldTick");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shouldTick"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <TickRunning>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsV2Spawner_Dirty::dyn_$TickRunning$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::dyn_$TickRunning$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TickRunning>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.get_allPartsInstantiated
bool GlobalNamespace::CosmeticsV2Spawner_Dirty::get_allPartsInstantiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::get_allPartsInstantiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "get_allPartsInstantiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.set_allPartsInstantiated
void GlobalNamespace::CosmeticsV2Spawner_Dirty::set_allPartsInstantiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::set_allPartsInstantiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "set_allPartsInstantiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.get_completed
bool GlobalNamespace::CosmeticsV2Spawner_Dirty::get_completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::get_completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "get_completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.set_completed
void GlobalNamespace::CosmeticsV2Spawner_Dirty::set_completed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::set_completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "set_completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.get_TickRunning
bool GlobalNamespace::CosmeticsV2Spawner_Dirty::get_TickRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::get_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CosmeticsV2Spawner_Dirty*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.set_TickRunning
void GlobalNamespace::CosmeticsV2Spawner_Dirty::set_TickRunning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::set_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CosmeticsV2Spawner_Dirty*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.ITickSystemTick.Tick
void GlobalNamespace::CosmeticsV2Spawner_Dirty::ITickSystemTick_Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::ITickSystemTick.Tick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CosmeticsV2Spawner_Dirty*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.IDelayedExecListener.OnDelayedAction
void GlobalNamespace::CosmeticsV2Spawner_Dirty::IDelayedExecListener_OnDelayedAction(int contextId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::IDelayedExecListener.OnDelayedAction");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CosmeticsV2Spawner_Dirty*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, contextId);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.StartInstantiatingPrefabs
void GlobalNamespace::CosmeticsV2Spawner_Dirty::StartInstantiatingPrefabs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::StartInstantiatingPrefabs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "StartInstantiatingPrefabs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.AddEachAttachInfoToLoadOpInfosList
void GlobalNamespace::CosmeticsV2Spawner_Dirty::AddEachAttachInfoToLoadOpInfosList(::GorillaTag::CosmeticSystem::CosmeticPart part, int partIndex, ::GorillaTag::CosmeticSystem::CosmeticInfoV2 cosmeticInfo, int vrRigIndex, ByRef<int> partCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::AddEachAttachInfoToLoadOpInfosList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "AddEachAttachInfoToLoadOpInfosList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(part), ::il2cpp_utils::ExtractType(partIndex), ::il2cpp_utils::ExtractType(cosmeticInfo), ::il2cpp_utils::ExtractType(vrRigIndex), ::il2cpp_utils::ExtractType(partCount)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, part, partIndex, cosmeticInfo, vrRigIndex, byref(partCount));
}
// Autogenerated method: CosmeticsV2Spawner_Dirty._Step2_UpdateLoadOpStarting
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_Step2_UpdateLoadOpStarting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_Step2_UpdateLoadOpStarting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "_Step2_UpdateLoadOpStarting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty._Step3_HandleLoadOpCompleted
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_Step3_HandleLoadOpCompleted(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*> loadOp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_Step3_HandleLoadOpCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "_Step3_HandleLoadOpCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loadOp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, loadOp);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty._RetryDownload
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_RetryDownload(int loadOpIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_RetryDownload");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "_RetryDownload", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loadOpIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, loadOpIndex);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty.AddPartToThrowableLists
void GlobalNamespace::CosmeticsV2Spawner_Dirty::AddPartToThrowableLists(::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo loadOpInfo, ::GlobalNamespace::SnowballThrowable* throwable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::AddPartToThrowableLists");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "AddPartToThrowableLists", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loadOpInfo), ::il2cpp_utils::ExtractType(throwable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, loadOpInfo, throwable);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty._Step4_PopulateAllArrays
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_Step4_PopulateAllArrays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_Step4_PopulateAllArrays");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "_Step4_PopulateAllArrays", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty._Step5_InitializeVRRigsAndCosmeticsControllerFinalize
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_Step5_InitializeVRRigsAndCosmeticsControllerFinalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_Step5_InitializeVRRigsAndCosmeticsControllerFinalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", "_Step5_InitializeVRRigsAndCosmeticsControllerFinalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty._DelayedStatusCheck
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_DelayedStatusCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::_DelayedStatusCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_DelayedStatusCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty..cctor
void GlobalNamespace::CosmeticsV2Spawner_Dirty::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticsV2Spawner_Dirty", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticsV2Spawner_Dirty/LoadOpInfo
#include "GlobalNamespace/CosmeticsV2Spawner_Dirty.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean isStarted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_isStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_isStarted");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isStarted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject> loadOp
[[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>& GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_loadOp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_loadOp");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loadOp"))->offset;
  return *reinterpret_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject resultGObj
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_resultGObj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_resultGObj");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resultGObj"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly GorillaTag.CosmeticSystem.CosmeticAttachInfo attachInfo
[[deprecated("Use field access instead!")]] ::GorillaTag::CosmeticSystem::CosmeticAttachInfo& GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_attachInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_attachInfo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachInfo"))->offset;
  return *reinterpret_cast<::GorillaTag::CosmeticSystem::CosmeticAttachInfo*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly GorillaTag.CosmeticSystem.CosmeticPart part
[[deprecated("Use field access instead!")]] ::GorillaTag::CosmeticSystem::CosmeticPart& GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_part() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_part");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "part"))->offset;
  return *reinterpret_cast<::GorillaTag::CosmeticSystem::CosmeticPart*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 partIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_partIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_partIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "partIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly GorillaTag.CosmeticSystem.CosmeticInfoV2 cosmeticInfoV2
[[deprecated("Use field access instead!")]] ::GorillaTag::CosmeticSystem::CosmeticInfoV2& GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_cosmeticInfoV2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_cosmeticInfoV2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmeticInfoV2"))->offset;
  return *reinterpret_cast<::GorillaTag::CosmeticSystem::CosmeticInfoV2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 vrRigIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_vrRigIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::dyn_vrRigIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrRigIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty/LoadOpInfo..ctor
GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::LoadOpInfo(::GorillaTag::CosmeticSystem::CosmeticAttachInfo attachInfo, ::GorillaTag::CosmeticSystem::CosmeticPart part, int partIndex, ::GorillaTag::CosmeticSystem::CosmeticInfoV2 cosmeticInfoV2, int vrRigIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::LoadOpInfo::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attachInfo), ::il2cpp_utils::ExtractType(part), ::il2cpp_utils::ExtractType(partIndex), ::il2cpp_utils::ExtractType(cosmeticInfoV2), ::il2cpp_utils::ExtractType(vrRigIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, attachInfo, part, partIndex, cosmeticInfoV2, vrRigIndex);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticsV2Spawner_Dirty/VRRigData
#include "GlobalNamespace/CosmeticsV2Spawner_Dirty.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BodyDockPositions
#include "GlobalNamespace/BodyDockPositions.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly VRRig vrRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_vrRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_vrRig");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Transform[] boneXforms
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_boneXforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_boneXforms");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "boneXforms"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly BodyDockPositions bdPositionsComp
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositionsComp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositionsComp");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bdPositionsComp"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<UnityEngine.GameObject> vrRig_cosmetics
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_vrRig_cosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_vrRig_cosmetics");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrRig_cosmetics"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<UnityEngine.GameObject> vrRig_override
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_vrRig_override() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_vrRig_override");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrRig_override"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Transform parentOfDeactivatedHoldables
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_parentOfDeactivatedHoldables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_parentOfDeactivatedHoldables");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentOfDeactivatedHoldables"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<TransferrableObject> bdPositions_allObjects
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::TransferrableObject*>*& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositions_allObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositions_allObjects");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bdPositions_allObjects"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::TransferrableObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 bdPositions_allObjects_length
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositions_allObjects_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositions_allObjects_length");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bdPositions_allObjects_length"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<UnityEngine.GameObject> bdPositions_leftHandThrowables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositions_leftHandThrowables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositions_leftHandThrowables");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bdPositions_leftHandThrowables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<UnityEngine.GameObject> bdPositions_rightHandThrowables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositions_rightHandThrowables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::dyn_bdPositions_rightHandThrowables");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bdPositions_rightHandThrowables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticsV2Spawner_Dirty/VRRigData..ctor
GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::VRRigData(::GlobalNamespace::VRRig* vrRig, ::ArrayW<::UnityEngine::Transform*> boneXforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsV2Spawner_Dirty::VRRigData::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrRig), ::il2cpp_utils::ExtractType(boneXforms)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vrRig, boneXforms);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ECosmeticPartType
#include "GlobalNamespace/ECosmeticPartType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ECosmeticPartType Functional
::GlobalNamespace::ECosmeticPartType GlobalNamespace::ECosmeticPartType::_get_Functional() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ECosmeticPartType::_get_Functional");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ECosmeticPartType>("", "ECosmeticPartType", "Functional"));
}
// Autogenerated static field setter
// Set static field: static public ECosmeticPartType Functional
void GlobalNamespace::ECosmeticPartType::_set_Functional(::GlobalNamespace::ECosmeticPartType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ECosmeticPartType::_set_Functional");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ECosmeticPartType", "Functional", value));
}
// Autogenerated static field getter
// Get static field: static public ECosmeticPartType Wardrobe
::GlobalNamespace::ECosmeticPartType GlobalNamespace::ECosmeticPartType::_get_Wardrobe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ECosmeticPartType::_get_Wardrobe");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ECosmeticPartType>("", "ECosmeticPartType", "Wardrobe"));
}
// Autogenerated static field setter
// Set static field: static public ECosmeticPartType Wardrobe
void GlobalNamespace::ECosmeticPartType::_set_Wardrobe(::GlobalNamespace::ECosmeticPartType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ECosmeticPartType::_set_Wardrobe");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ECosmeticPartType", "Wardrobe", value));
}
// Autogenerated static field getter
// Get static field: static public ECosmeticPartType FirstPerson
::GlobalNamespace::ECosmeticPartType GlobalNamespace::ECosmeticPartType::_get_FirstPerson() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ECosmeticPartType::_get_FirstPerson");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ECosmeticPartType>("", "ECosmeticPartType", "FirstPerson"));
}
// Autogenerated static field setter
// Set static field: static public ECosmeticPartType FirstPerson
void GlobalNamespace::ECosmeticPartType::_set_FirstPerson(::GlobalNamespace::ECosmeticPartType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ECosmeticPartType::_set_FirstPerson");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ECosmeticPartType", "FirstPerson", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ECosmeticPartType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ECosmeticPartType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GlobalDeactivatedSpawnRoot
#include "GlobalNamespace/GlobalDeactivatedSpawnRoot.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Transform _xform
::UnityEngine::Transform* GlobalNamespace::GlobalDeactivatedSpawnRoot::_get__xform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GlobalDeactivatedSpawnRoot::_get__xform");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Transform*>("", "GlobalDeactivatedSpawnRoot", "_xform"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Transform _xform
void GlobalNamespace::GlobalDeactivatedSpawnRoot::_set__xform(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GlobalDeactivatedSpawnRoot::_set__xform");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GlobalDeactivatedSpawnRoot", "_xform", value));
}
// Autogenerated method: GlobalDeactivatedSpawnRoot.GetOrCreate
::UnityEngine::Transform* GlobalNamespace::GlobalDeactivatedSpawnRoot::GetOrCreate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GlobalDeactivatedSpawnRoot::GetOrCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GlobalDeactivatedSpawnRoot", "GetOrCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DayCycleTexturesSO
#include "GlobalNamespace/DayCycleTexturesSO.hpp"
// Including type: DayCycleTextureMoment
#include "GlobalNamespace/DayCycleTextureMoment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public DayCycleTextureMoment[] moments
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DayCycleTextureMoment*>& GlobalNamespace::DayCycleTexturesSO::dyn_moments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DayCycleTexturesSO::dyn_moments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "moments"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::DayCycleTextureMoment*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DayCycleTextureMoment
#include "GlobalNamespace/DayCycleTextureMoment.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D sunnyTex
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::DayCycleTextureMoment::dyn_sunnyTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DayCycleTextureMoment::dyn_sunnyTex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sunnyTex"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D cloudyTex
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::DayCycleTextureMoment::dyn_cloudyTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DayCycleTextureMoment::dyn_cloudyTex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cloudyTex"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: IDebugObject
#include "GlobalNamespace/IDebugObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IDebugObject.OnDestroyDebugObject
void GlobalNamespace::IDebugObject::OnDestroyDebugObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDebugObject::OnDestroyDebugObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IDebugObject*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsole
#include "GlobalNamespace/DevConsole.hpp"
// Including type: DevConsole/LogEntry
#include "GlobalNamespace/DevConsole_LogEntry.hpp"
// Including type: DevConsole/DisplayedLogLine
#include "GlobalNamespace/DevConsole_DisplayedLogLine.hpp"
// Including type: DevConsole/MessagePayload
#include "GlobalNamespace/DevConsole_MessagePayload.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: DevConsoleInstance
#include "GlobalNamespace/DevConsoleInstance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private DevConsole _instance
::GlobalNamespace::DevConsole* GlobalNamespace::DevConsole::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::DevConsole*>("", "DevConsole", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private DevConsole _instance
void GlobalNamespace::DevConsole::_set__instance(::GlobalNamespace::DevConsole* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DevConsole", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.String[] tracebackScrubbing
::ArrayW<::StringW> GlobalNamespace::DevConsole::_get_tracebackScrubbing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::_get_tracebackScrubbing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("", "DevConsole", "tracebackScrubbing"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.String[] tracebackScrubbing
void GlobalNamespace::DevConsole::_set_tracebackScrubbing(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::_set_tracebackScrubbing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DevConsole", "tracebackScrubbing", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kLogEntriesCapacityIncrementAmount
int GlobalNamespace::DevConsole::_get_kLogEntriesCapacityIncrementAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::_get_kLogEntriesCapacityIncrementAmount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DevConsole", "kLogEntriesCapacityIncrementAmount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kLogEntriesCapacityIncrementAmount
void GlobalNamespace::DevConsole::_set_kLogEntriesCapacityIncrementAmount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::_set_kLogEntriesCapacityIncrementAmount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DevConsole", "kLogEntriesCapacityIncrementAmount", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip errorSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::DevConsole::dyn_errorSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_errorSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "errorSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::DevConsole::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsole::dyn_maxHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_maxHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<DevConsole/LogEntry> _logEntries
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>*& GlobalNamespace::DevConsole::dyn__logEntries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn__logEntries");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_logEntries"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 targetLogIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsole::dyn_targetLogIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_targetLogIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetLogIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 currentLogIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsole::dyn_currentLogIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_currentLogIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentLogIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isMuted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsole::dyn_isMuted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_isMuted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isMuted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single currentZoomLevel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsole::dyn_currentZoomLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_currentZoomLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentZoomLevel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> disableWhileActive
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::DevConsole::dyn_disableWhileActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_disableWhileActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableWhileActive"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> enableWhileActive
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::DevConsole::dyn_enableWhileActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_enableWhileActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableWhileActive"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 expandAmount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsole::dyn_expandAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_expandAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "expandAmount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 expandedMessageIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsole::dyn_expandedMessageIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_expandedMessageIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "expandedMessageIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canExpand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsole::dyn_canExpand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_canExpand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canExpand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<DevConsole/DisplayedLogLine> logLines
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>*& GlobalNamespace::DevConsole::dyn_logLines() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_logLines");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logLines"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::DisplayedLogLine*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lineStartHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsole::dyn_lineStartHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_lineStartHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineStartHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single textStartHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsole::dyn_textStartHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_textStartHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textStartHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lineStartTextWidth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DevConsole::dyn_lineStartTextWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_lineStartTextWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineStartTextWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double textScale
[[deprecated("Use field access instead!")]] double& GlobalNamespace::DevConsole::dyn_textScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_textScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textScale"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<DevConsoleInstance> instances
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsoleInstance*>*& GlobalNamespace::DevConsole::dyn_instances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::dyn_instances");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instances"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::DevConsoleInstance*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevConsole.get_instance
::GlobalNamespace::DevConsole* GlobalNamespace::DevConsole::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DevConsole", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::DevConsole*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: DevConsole.get_logEntries
::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>* GlobalNamespace::DevConsole::get_logEntries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::get_logEntries");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DevConsole", "get_logEntries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: DevConsole.OnDestroyDebugObject
void GlobalNamespace::DevConsole::OnDestroyDebugObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::OnDestroyDebugObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::DevConsole*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DevConsole.OnEnable
void GlobalNamespace::DevConsole::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DevConsole..cctor
void GlobalNamespace::DevConsole::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DevConsole", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsole/LogEntry
#include "GlobalNamespace/DevConsole_LogEntry.hpp"
// Including type: DevConsole/LogEntry/<>c__DisplayClass10_0
#include "GlobalNamespace/DevConsole_LogEntry_--c__DisplayClass10_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 TotalIndex
int GlobalNamespace::DevConsole::LogEntry::_get_TotalIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::_get_TotalIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DevConsole/LogEntry", "TotalIndex"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 TotalIndex
void GlobalNamespace::DevConsole::LogEntry::_set_TotalIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::_set_TotalIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DevConsole/LogEntry", "TotalIndex", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String _Message
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevConsole::LogEntry::dyn__Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::dyn__Message");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_Message"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.LogType Type
[[deprecated("Use field access instead!")]] ::UnityEngine::LogType& GlobalNamespace::DevConsole::LogEntry::dyn_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::dyn_Type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Type"))->offset;
  return *reinterpret_cast<::UnityEngine::LogType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String Trace
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevConsole::LogEntry::dyn_Trace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::dyn_Trace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Trace"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean forwarded
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsole::LogEntry::dyn_forwarded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::dyn_forwarded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forwarded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 repeatCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsole::LogEntry::dyn_repeatCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::dyn_repeatCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "repeatCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean filtered
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsole::LogEntry::dyn_filtered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::dyn_filtered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "filtered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 index
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsole::LogEntry::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevConsole/LogEntry.get_Message
::StringW GlobalNamespace::DevConsole::LogEntry::get_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::get_Message");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Message", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsole/LogEntry/<>c__DisplayClass10_0
#include "GlobalNamespace/DevConsole_LogEntry_--c__DisplayClass10_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String line
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevConsole::LogEntry::$$c__DisplayClass10_0::dyn_line() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::$$c__DisplayClass10_0::dyn_line");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "line"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevConsole/LogEntry/<>c__DisplayClass10_0.<.ctor>b__0
bool GlobalNamespace::DevConsole::LogEntry::$$c__DisplayClass10_0::$_ctor$b__0(::StringW scrubString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::LogEntry::$$c__DisplayClass10_0::<.ctor>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scrubString)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, scrubString);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsole/DisplayedLogLine
#include "GlobalNamespace/DevConsole_DisplayedLogLine.hpp"
// Including type: GorillaDevButton
#include "GlobalNamespace/GorillaDevButton.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: DevInspector
#include "GlobalNamespace/DevInspector.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton[] buttons
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaDevButton*>& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_buttons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_buttons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttons"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaDevButton*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text lineText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_lineText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_lineText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.RectTransform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 targetMessage
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_targetMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_targetMessage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetMessage"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton maximizeButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_maximizeButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_maximizeButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maximizeButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaDevButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton forwardButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_forwardButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_forwardButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forwardButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaDevButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.SpriteRenderer backdrop
[[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_backdrop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_backdrop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "backdrop"))->offset;
  return *reinterpret_cast<::UnityEngine::SpriteRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean expanded
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_expanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_expanded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "expanded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public DevInspector inspector
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DevInspector*& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_inspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_inspector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inspector"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DevInspector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <data>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& GlobalNamespace::DevConsole::DisplayedLogLine::dyn_$data$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::dyn_$data$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<data>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevConsole/DisplayedLogLine.get_data
::System::Type* GlobalNamespace::DevConsole::DisplayedLogLine::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::get_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: DevConsole/DisplayedLogLine.set_data
void GlobalNamespace::DevConsole::DisplayedLogLine::set_data(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::DisplayedLogLine::set_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsole/MessagePayload
#include "GlobalNamespace/DevConsole_MessagePayload.hpp"
// Including type: DevConsole/MessagePayload/Block
#include "GlobalNamespace/DevConsole_MessagePayload_Block.hpp"
// Including type: DevConsole/MessagePayload/TextBlock
#include "GlobalNamespace/DevConsole_MessagePayload_TextBlock.hpp"
// Including type: DevConsole/MessagePayload/<>c
#include "GlobalNamespace/DevConsole_MessagePayload_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: DevConsole/LogEntry
#include "GlobalNamespace/DevConsole_LogEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public DevConsole/MessagePayload/Block[] blocks
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DevConsole::MessagePayload::Block*>& GlobalNamespace::DevConsole::MessagePayload::dyn_blocks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::dyn_blocks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blocks"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::DevConsole::MessagePayload::Block*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DevConsole/MessagePayload.GeneratePayloads
::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::MessagePayload*>* GlobalNamespace::DevConsole::MessagePayload::GeneratePayloads(::StringW username, ::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::LogEntry*>* entries) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::GeneratePayloads");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DevConsole/MessagePayload", "GeneratePayloads", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(username), ::il2cpp_utils::ExtractType(entries)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::GlobalNamespace::DevConsole::MessagePayload*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, username, entries);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsole/MessagePayload/Block
#include "GlobalNamespace/DevConsole_MessagePayload_Block.hpp"
// Including type: DevConsole/MessagePayload/TextBlock
#include "GlobalNamespace/DevConsole_MessagePayload_TextBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String type
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevConsole::MessagePayload::Block::dyn_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::Block::dyn_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public DevConsole/MessagePayload/TextBlock text
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DevConsole::MessagePayload::TextBlock*& GlobalNamespace::DevConsole::MessagePayload::Block::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::Block::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DevConsole::MessagePayload::TextBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsole/MessagePayload/TextBlock
#include "GlobalNamespace/DevConsole_MessagePayload_TextBlock.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String type
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevConsole::MessagePayload::TextBlock::dyn_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::TextBlock::dyn_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String text
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::DevConsole::MessagePayload::TextBlock::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::TextBlock::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsole/MessagePayload/<>c
#include "GlobalNamespace/DevConsole_MessagePayload_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: DevConsole/LogEntry
#include "GlobalNamespace/DevConsole_LogEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly DevConsole/MessagePayload/<>c <>9
::GlobalNamespace::DevConsole::MessagePayload::$$c* GlobalNamespace::DevConsole::MessagePayload::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::DevConsole::MessagePayload::$$c*>("", "DevConsole/MessagePayload/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly DevConsole/MessagePayload/<>c <>9
void GlobalNamespace::DevConsole::MessagePayload::$$c::_set_$$9(::GlobalNamespace::DevConsole::MessagePayload::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "DevConsole/MessagePayload/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<DevConsole/LogEntry> <>9__3_0
::System::Comparison_1<::GlobalNamespace::DevConsole::LogEntry*>* GlobalNamespace::DevConsole::MessagePayload::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Comparison_1<::GlobalNamespace::DevConsole::LogEntry*>*>("", "DevConsole/MessagePayload/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<DevConsole/LogEntry> <>9__3_0
void GlobalNamespace::DevConsole::MessagePayload::$$c::_set_$$9__3_0(::System::Comparison_1<::GlobalNamespace::DevConsole::LogEntry*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "DevConsole/MessagePayload/<>c", "<>9__3_0", value)));
}
// Autogenerated method: DevConsole/MessagePayload/<>c..cctor
void GlobalNamespace::DevConsole::MessagePayload::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DevConsole/MessagePayload/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: DevConsole/MessagePayload/<>c.<GeneratePayloads>b__3_0
int GlobalNamespace::DevConsole::MessagePayload::$$c::$GeneratePayloads$b__3_0(::GlobalNamespace::DevConsole::LogEntry* e1, ::GlobalNamespace::DevConsole::LogEntry* e2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsole::MessagePayload::$$c::<GeneratePayloads>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GeneratePayloads>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e1), ::il2cpp_utils::ExtractType(e2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, e1, e2);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ConsoleMode
#include "GlobalNamespace/ConsoleMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ConsoleMode Console
::GlobalNamespace::ConsoleMode GlobalNamespace::ConsoleMode::_get_Console() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConsoleMode::_get_Console");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ConsoleMode>("", "ConsoleMode", "Console"));
}
// Autogenerated static field setter
// Set static field: static public ConsoleMode Console
void GlobalNamespace::ConsoleMode::_set_Console(::GlobalNamespace::ConsoleMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConsoleMode::_set_Console");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConsoleMode", "Console", value));
}
// Autogenerated static field getter
// Get static field: static public ConsoleMode Inspector
::GlobalNamespace::ConsoleMode GlobalNamespace::ConsoleMode::_get_Inspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConsoleMode::_get_Inspector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ConsoleMode>("", "ConsoleMode", "Inspector"));
}
// Autogenerated static field setter
// Set static field: static public ConsoleMode Inspector
void GlobalNamespace::ConsoleMode::_set_Inspector(::GlobalNamespace::ConsoleMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConsoleMode::_set_Inspector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConsoleMode", "Inspector", value));
}
// Autogenerated static field getter
// Get static field: static public ConsoleMode ComponentInspector
::GlobalNamespace::ConsoleMode GlobalNamespace::ConsoleMode::_get_ComponentInspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConsoleMode::_get_ComponentInspector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ConsoleMode>("", "ConsoleMode", "ComponentInspector"));
}
// Autogenerated static field setter
// Set static field: static public ConsoleMode ComponentInspector
void GlobalNamespace::ConsoleMode::_set_ComponentInspector(::GlobalNamespace::ConsoleMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConsoleMode::_set_ComponentInspector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConsoleMode", "ComponentInspector", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ConsoleMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ConsoleMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevConsoleHand
#include "GlobalNamespace/DevConsoleHand.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: GorillaDevButton
#include "GlobalNamespace/GorillaDevButton.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: DevInspector
#include "GlobalNamespace/DevInspector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> otherButtonsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::DevConsoleHand::dyn_otherButtonsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_otherButtonsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "otherButtonsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isActuallyEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsoleHand::dyn_isActuallyEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_isActuallyEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isActuallyEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isStillEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsoleHand::dyn_isStillEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_isStillEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isStillEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isLeftHand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DevConsoleHand::dyn_isLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_isLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isLeftHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ConsoleMode mode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ConsoleMode& GlobalNamespace::DevConsoleHand::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ConsoleMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double debugScale
[[deprecated("Use field access instead!")]] double& GlobalNamespace::DevConsoleHand::dyn_debugScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_debugScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugScale"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double inspectorScale
[[deprecated("Use field access instead!")]] double& GlobalNamespace::DevConsoleHand::dyn_inspectorScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_inspectorScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inspectorScale"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double componentInspectorScale
[[deprecated("Use field access instead!")]] double& GlobalNamespace::DevConsoleHand::dyn_componentInspectorScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_componentInspectorScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentInspectorScale"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> consoleButtons
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::DevConsoleHand::dyn_consoleButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_consoleButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "consoleButtons"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> inspectorButtons
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::DevConsoleHand::dyn_inspectorButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_inspectorButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inspectorButtons"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> componentInspectorButtons
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::DevConsoleHand::dyn_componentInspectorButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_componentInspectorButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentInspectorButtons"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton consoleButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& GlobalNamespace::DevConsoleHand::dyn_consoleButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_consoleButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "consoleButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaDevButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton inspectorButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& GlobalNamespace::DevConsoleHand::dyn_inspectorButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_inspectorButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inspectorButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaDevButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton componentInspectorButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& GlobalNamespace::DevConsoleHand::dyn_componentInspectorButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_componentInspectorButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentInspectorButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaDevButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton showNonStarItems
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& GlobalNamespace::DevConsoleHand::dyn_showNonStarItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_showNonStarItems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showNonStarItems"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaDevButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaDevButton showPrivateItems
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaDevButton*& GlobalNamespace::DevConsoleHand::dyn_showPrivateItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_showPrivateItems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showPrivateItems"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaDevButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text componentInspectionText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::DevConsoleHand::dyn_componentInspectionText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_componentInspectionText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentInspectionText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public DevInspector selectedInspector
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DevInspector*& GlobalNamespace::DevConsoleHand::dyn_selectedInspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevConsoleHand::dyn_selectedInspector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "selectedInspector"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DevInspector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
