// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AESHMAC
#include "GlobalNamespace/AESHMAC.hpp"
// Including type: System.Security.Cryptography.RandomNumberGenerator
#include "System/Security/Cryptography/RandomNumberGenerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Security.Cryptography.RandomNumberGenerator gRNG
::System::Security::Cryptography::RandomNumberGenerator* GlobalNamespace::AESHMAC::_get_gRNG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_get_gRNG");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Security::Cryptography::RandomNumberGenerator*>("", "AESHMAC", "gRNG"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Security.Cryptography.RandomNumberGenerator gRNG
void GlobalNamespace::AESHMAC::_set_gRNG(::System::Security::Cryptography::RandomNumberGenerator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_set_gRNG");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AESHMAC", "gRNG", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 BlockBitSize
int GlobalNamespace::AESHMAC::_get_BlockBitSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_get_BlockBitSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AESHMAC", "BlockBitSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 BlockBitSize
void GlobalNamespace::AESHMAC::_set_BlockBitSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_set_BlockBitSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AESHMAC", "BlockBitSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 KeyBitSize
int GlobalNamespace::AESHMAC::_get_KeyBitSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_get_KeyBitSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AESHMAC", "KeyBitSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 KeyBitSize
void GlobalNamespace::AESHMAC::_set_KeyBitSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_set_KeyBitSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AESHMAC", "KeyBitSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 SaltBitSize
int GlobalNamespace::AESHMAC::_get_SaltBitSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_get_SaltBitSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AESHMAC", "SaltBitSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 SaltBitSize
void GlobalNamespace::AESHMAC::_set_SaltBitSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_set_SaltBitSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AESHMAC", "SaltBitSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 Iterations
int GlobalNamespace::AESHMAC::_get_Iterations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_get_Iterations");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AESHMAC", "Iterations"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 Iterations
void GlobalNamespace::AESHMAC::_set_Iterations(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_set_Iterations");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AESHMAC", "Iterations", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MinPasswordLength
int GlobalNamespace::AESHMAC::_get_MinPasswordLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_get_MinPasswordLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AESHMAC", "MinPasswordLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MinPasswordLength
void GlobalNamespace::AESHMAC::_set_MinPasswordLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::_set_MinPasswordLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AESHMAC", "MinPasswordLength", value));
}
// Autogenerated method: AESHMAC.NewKey
::ArrayW<uint8_t> GlobalNamespace::AESHMAC::NewKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::NewKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "NewKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: AESHMAC.SimpleEncrypt
::StringW GlobalNamespace::AESHMAC::SimpleEncrypt(::StringW plaintext, ::ArrayW<uint8_t> key, ::ArrayW<uint8_t> auth, ::ArrayW<uint8_t> salt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::SimpleEncrypt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "SimpleEncrypt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(plaintext), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(auth), ::il2cpp_utils::ExtractType(salt)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, plaintext, key, auth, salt);
}
// Autogenerated method: AESHMAC.SimpleDecrypt
::StringW GlobalNamespace::AESHMAC::SimpleDecrypt(::StringW ciphertext, ::ArrayW<uint8_t> key, ::ArrayW<uint8_t> auth, int saltLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::SimpleDecrypt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "SimpleDecrypt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ciphertext), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(auth), ::il2cpp_utils::ExtractType(saltLength)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ciphertext, key, auth, saltLength);
}
// Autogenerated method: AESHMAC.SimpleEncryptWithKey
::StringW GlobalNamespace::AESHMAC::SimpleEncryptWithKey(::StringW plaintext, ::StringW key, ::ArrayW<uint8_t> salt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::SimpleEncryptWithKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "SimpleEncryptWithKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(plaintext), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(salt)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, plaintext, key, salt);
}
// Autogenerated method: AESHMAC.SimpleDecryptWithKey
::StringW GlobalNamespace::AESHMAC::SimpleDecryptWithKey(::StringW ciphertext, ::StringW key, int saltLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::SimpleDecryptWithKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "SimpleDecryptWithKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ciphertext), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(saltLength)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ciphertext, key, saltLength);
}
// Autogenerated method: AESHMAC.SimpleEncrypt
::ArrayW<uint8_t> GlobalNamespace::AESHMAC::SimpleEncrypt(::ArrayW<uint8_t> plaintext, ::ArrayW<uint8_t> key, ::ArrayW<uint8_t> auth, ::ArrayW<uint8_t> salt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::SimpleEncrypt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "SimpleEncrypt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(plaintext), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(auth), ::il2cpp_utils::ExtractType(salt)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, plaintext, key, auth, salt);
}
// Autogenerated method: AESHMAC.SimpleDecrypt
::ArrayW<uint8_t> GlobalNamespace::AESHMAC::SimpleDecrypt(::ArrayW<uint8_t> ciphertext, ::ArrayW<uint8_t> key, ::ArrayW<uint8_t> auth, int saltLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::SimpleDecrypt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "SimpleDecrypt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ciphertext), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(auth), ::il2cpp_utils::ExtractType(saltLength)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ciphertext, key, auth, saltLength);
}
// Autogenerated method: AESHMAC.SimpleEncryptWithKey
::ArrayW<uint8_t> GlobalNamespace::AESHMAC::SimpleEncryptWithKey(::ArrayW<uint8_t> plaintext, ::StringW key, ::ArrayW<uint8_t> salt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::SimpleEncryptWithKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "SimpleEncryptWithKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(plaintext), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(salt)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, plaintext, key, salt);
}
// Autogenerated method: AESHMAC.SimpleDecryptWithKey
::ArrayW<uint8_t> GlobalNamespace::AESHMAC::SimpleDecryptWithKey(::ArrayW<uint8_t> ciphertext, ::StringW key, int saltLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::SimpleDecryptWithKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "SimpleDecryptWithKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ciphertext), ::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(saltLength)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ciphertext, key, saltLength);
}
// Autogenerated method: AESHMAC.Rfc2898DeriveBytes
::ArrayW<uint8_t> GlobalNamespace::AESHMAC::Rfc2898DeriveBytes(::StringW password, ::ArrayW<uint8_t> salt, int iterations, int numBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::Rfc2898DeriveBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", "Rfc2898DeriveBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(salt), ::il2cpp_utils::ExtractType(iterations), ::il2cpp_utils::ExtractType(numBytes)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, password, salt, iterations, numBytes);
}
// Autogenerated method: AESHMAC..cctor
void GlobalNamespace::AESHMAC::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AESHMAC::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AESHMAC", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AnimationCurves
#include "GlobalNamespace/AnimationCurves.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInQuad
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInQuad"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInQuad
void GlobalNamespace::AnimationCurves::_set_EaseInQuad(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInQuad", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutQuad
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutQuad"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutQuad
void GlobalNamespace::AnimationCurves::_set_EaseOutQuad(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutQuad", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutQuad
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutQuad"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutQuad
void GlobalNamespace::AnimationCurves::_set_EaseInOutQuad(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutQuad", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInCubic
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInCubic"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInCubic
void GlobalNamespace::AnimationCurves::_set_EaseInCubic(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInCubic", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutCubic
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutCubic
void GlobalNamespace::AnimationCurves::_set_EaseOutCubic(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutCubic
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutCubic
void GlobalNamespace::AnimationCurves::_set_EaseInOutCubic(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInQuart
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInQuart"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInQuart
void GlobalNamespace::AnimationCurves::_set_EaseInQuart(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInQuart", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutQuart
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutQuart"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutQuart
void GlobalNamespace::AnimationCurves::_set_EaseOutQuart(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutQuart", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutQuart
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutQuart"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutQuart
void GlobalNamespace::AnimationCurves::_set_EaseInOutQuart(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutQuart", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInQuint
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInQuint"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInQuint
void GlobalNamespace::AnimationCurves::_set_EaseInQuint(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInQuint", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutQuint
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutQuint"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutQuint
void GlobalNamespace::AnimationCurves::_set_EaseOutQuint(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutQuint", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutQuint
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutQuint"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutQuint
void GlobalNamespace::AnimationCurves::_set_EaseInOutQuint(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutQuint", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInSine
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInSine"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInSine
void GlobalNamespace::AnimationCurves::_set_EaseInSine(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInSine", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutSine
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutSine"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutSine
void GlobalNamespace::AnimationCurves::_set_EaseOutSine(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutSine
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutSine"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutSine
void GlobalNamespace::AnimationCurves::_set_EaseInOutSine(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInExpo
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInExpo"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInExpo
void GlobalNamespace::AnimationCurves::_set_EaseInExpo(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInExpo", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutExpo
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutExpo"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutExpo
void GlobalNamespace::AnimationCurves::_set_EaseOutExpo(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutExpo", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutExpo
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutExpo"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutExpo
void GlobalNamespace::AnimationCurves::_set_EaseInOutExpo(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutExpo", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInCirc
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInCirc"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInCirc
void GlobalNamespace::AnimationCurves::_set_EaseInCirc(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInCirc", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutCirc
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutCirc"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutCirc
void GlobalNamespace::AnimationCurves::_set_EaseOutCirc(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutCirc", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutCirc
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutCirc"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutCirc
void GlobalNamespace::AnimationCurves::_set_EaseInOutCirc(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutCirc", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInBounce
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInBounce"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInBounce
void GlobalNamespace::AnimationCurves::_set_EaseInBounce(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInBounce", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutBounce
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutBounce"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutBounce
void GlobalNamespace::AnimationCurves::_set_EaseOutBounce(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutBounce", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutBounce
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutBounce"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutBounce
void GlobalNamespace::AnimationCurves::_set_EaseInOutBounce(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutBounce", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInBack
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInBack"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInBack
void GlobalNamespace::AnimationCurves::_set_EaseInBack(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInBack", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutBack
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutBack"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutBack
void GlobalNamespace::AnimationCurves::_set_EaseOutBack(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutBack", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutBack
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutBack"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutBack
void GlobalNamespace::AnimationCurves::_set_EaseInOutBack(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutBack", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInElastic
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInElastic"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInElastic
void GlobalNamespace::AnimationCurves::_set_EaseInElastic(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInElastic", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseOutElastic
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseOutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseOutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseOutElastic"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseOutElastic
void GlobalNamespace::AnimationCurves::_set_EaseOutElastic(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseOutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseOutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve EaseInOutElastic
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_EaseInOutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_EaseInOutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "EaseInOutElastic"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve EaseInOutElastic
void GlobalNamespace::AnimationCurves::_set_EaseInOutElastic(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_EaseInOutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "EaseInOutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve Spring
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_Spring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_Spring");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "Spring"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve Spring
void GlobalNamespace::AnimationCurves::_set_Spring(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_Spring");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "Spring", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve Linear
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve Linear
void GlobalNamespace::AnimationCurves::_set_Linear(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.AnimationCurve Step
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::_get_Step() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_Step");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::AnimationCurve*>("", "AnimationCurves", "Step"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.AnimationCurve Step
void GlobalNamespace::AnimationCurves::_set_Step(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_Step");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "Step", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<AnimationCurves/EaseType,UnityEngine.AnimationCurve> gEaseTypeToCurve
::System::Collections::Generic::Dictionary_2<::GlobalNamespace::AnimationCurves::EaseType, ::UnityEngine::AnimationCurve*>* GlobalNamespace::AnimationCurves::_get_gEaseTypeToCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_get_gEaseTypeToCurve");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::AnimationCurves::EaseType, ::UnityEngine::AnimationCurve*>*>("", "AnimationCurves", "gEaseTypeToCurve")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<AnimationCurves/EaseType,UnityEngine.AnimationCurve> gEaseTypeToCurve
void GlobalNamespace::AnimationCurves::_set_gEaseTypeToCurve(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::AnimationCurves::EaseType, ::UnityEngine::AnimationCurve*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::_set_gEaseTypeToCurve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves", "gEaseTypeToCurve", value));
}
// Autogenerated method: AnimationCurves..cctor
void GlobalNamespace::AnimationCurves::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AnimationCurves", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: AnimationCurves.GetCurveForEase
::UnityEngine::AnimationCurve* GlobalNamespace::AnimationCurves::GetCurveForEase(::GlobalNamespace::AnimationCurves::EaseType ease) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::GetCurveForEase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AnimationCurves", "GetCurveForEase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ease)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationCurve*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ease);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AnimationCurves/EaseType
#include "GlobalNamespace/AnimationCurves.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInQuad
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInQuad"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInQuad
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInQuad(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInQuad", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutQuad
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutQuad"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutQuad
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutQuad(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutQuad", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutQuad
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutQuad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutQuad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutQuad"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutQuad
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutQuad(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutQuad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutQuad", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInCubic
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInCubic"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInCubic
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInCubic(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInCubic", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutCubic
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutCubic
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutCubic(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutCubic
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutCubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutCubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutCubic"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutCubic
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutCubic(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutCubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutCubic", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInQuart
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInQuart"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInQuart
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInQuart(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInQuart", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutQuart
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutQuart"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutQuart
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutQuart(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutQuart", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutQuart
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutQuart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutQuart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutQuart"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutQuart
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutQuart(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutQuart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutQuart", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInQuint
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInQuint"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInQuint
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInQuint(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInQuint", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutQuint
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutQuint"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutQuint
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutQuint(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutQuint", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutQuint
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutQuint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutQuint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutQuint"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutQuint
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutQuint(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutQuint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutQuint", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInSine
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInSine"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInSine
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInSine(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInSine", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutSine
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutSine"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutSine
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutSine(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutSine
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutSine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutSine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutSine"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutSine
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutSine(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutSine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutSine", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInExpo
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInExpo"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInExpo
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInExpo(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInExpo", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutExpo
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutExpo"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutExpo
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutExpo(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutExpo", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutExpo
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutExpo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutExpo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutExpo"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutExpo
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutExpo(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutExpo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutExpo", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInCirc
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInCirc"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInCirc
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInCirc(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInCirc", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutCirc
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutCirc"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutCirc
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutCirc(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutCirc", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutCirc
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutCirc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutCirc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutCirc"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutCirc
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutCirc(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutCirc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutCirc", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInBounce
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInBounce"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInBounce
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInBounce(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInBounce", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutBounce
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutBounce"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutBounce
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutBounce(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutBounce", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutBounce
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutBounce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutBounce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutBounce"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutBounce
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutBounce(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutBounce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutBounce", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInBack
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInBack"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInBack
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInBack(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInBack", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutBack
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutBack"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutBack
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutBack(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutBack", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutBack
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutBack"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutBack
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutBack(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutBack", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInElastic
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInElastic"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInElastic
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInElastic(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInElastic", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseOutElastic
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseOutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseOutElastic"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseOutElastic
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutElastic(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseOutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseOutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType EaseInOutElastic
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutElastic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_EaseInOutElastic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "EaseInOutElastic"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType EaseInOutElastic
void GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutElastic(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_EaseInOutElastic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "EaseInOutElastic", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType Spring
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_Spring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_Spring");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "Spring"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType Spring
void GlobalNamespace::AnimationCurves::EaseType::_set_Spring(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_Spring");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "Spring", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType Linear
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType Linear
void GlobalNamespace::AnimationCurves::EaseType::_set_Linear(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public AnimationCurves/EaseType Step
::GlobalNamespace::AnimationCurves::EaseType GlobalNamespace::AnimationCurves::EaseType::_get_Step() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_get_Step");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AnimationCurves::EaseType>("", "AnimationCurves/EaseType", "Step"));
}
// Autogenerated static field setter
// Set static field: static public AnimationCurves/EaseType Step
void GlobalNamespace::AnimationCurves::EaseType::_set_Step(::GlobalNamespace::AnimationCurves::EaseType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::_set_Step");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AnimationCurves/EaseType", "Step", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AnimationCurves::EaseType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnimationCurves::EaseType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ContextLog
#include "GlobalNamespace/ContextLog.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CubemapRenderer
#include "GlobalNamespace/CubemapRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DebugReadOnlyAttribute
#include "GlobalNamespace/DebugReadOnlyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DragDropComponentsAttribute
#include "GlobalNamespace/DragDropComponentsAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: EditorOnlyComponent
#include "GlobalNamespace/EditorOnlyComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: EnumUtil
#include "GlobalNamespace/EnumUtil.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: EnumUtilExt
#include "GlobalNamespace/EnumUtilExt.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FrameStamp
#include "GlobalNamespace/FrameStamp.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FrameStamp::dyn__lastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameStamp::dyn__lastFrame");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FrameStamp.get_framesElapsed
int GlobalNamespace::FrameStamp::get_framesElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameStamp::get_framesElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_framesElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: FrameStamp.Now
::GlobalNamespace::FrameStamp GlobalNamespace::FrameStamp::Now() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameStamp::Now");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FrameStamp", "Now", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::FrameStamp, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: FrameStamp.ToString
::StringW GlobalNamespace::FrameStamp::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameStamp::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: FrameStamp.GetHashCode
int GlobalNamespace::FrameStamp::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FrameStamp::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HideAlwaysAttribute
#include "GlobalNamespace/HideAlwaysAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Id128
#include "GlobalNamespace/Id128.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: System.ValueTuple`4
#include "System/ValueTuple_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Id128 Empty
::GlobalNamespace::Id128 GlobalNamespace::Id128::_get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::_get_Empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Id128>("", "Id128", "Empty"));
}
// Autogenerated static field setter
// Set static field: static public readonly Id128 Empty
void GlobalNamespace::Id128::_set_Empty(::GlobalNamespace::Id128 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::_set_Empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Id128", "Empty", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 x
[[deprecated("Use field access instead!")]] int64_t& GlobalNamespace::Id128::dyn_x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::dyn_x");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "x"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 y
[[deprecated("Use field access instead!")]] int64_t& GlobalNamespace::Id128::dyn_y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::dyn_y");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "y"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 a
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Id128::dyn_a() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::dyn_a");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "a"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 b
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Id128::dyn_b() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::dyn_b");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "b"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 c
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Id128::dyn_c() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::dyn_c");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "c"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 d
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Id128::dyn_d() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::dyn_d");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "d"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Guid guid
[[deprecated("Use field access instead!")]] ::System::Guid& GlobalNamespace::Id128::dyn_guid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::dyn_guid");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "guid"))->offset;
  return *reinterpret_cast<::System::Guid*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Hash128 h128
[[deprecated("Use field access instead!")]] ::UnityEngine::Hash128& GlobalNamespace::Id128::dyn_h128() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::dyn_h128");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "h128"))->offset;
  return *reinterpret_cast<::UnityEngine::Hash128*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Id128..ctor
GlobalNamespace::Id128::Id128(int a, int b, int c, int d) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(d)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, a, b, c, d);
}
// Autogenerated method: Id128..ctor
GlobalNamespace::Id128::Id128(int64_t x, int64_t y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, y);
}
// Autogenerated method: Id128..ctor
GlobalNamespace::Id128::Id128(::UnityEngine::Hash128 hash) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hash)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hash);
}
// Autogenerated method: Id128..ctor
GlobalNamespace::Id128::Id128(::System::Guid guid) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(guid)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, guid);
}
// Autogenerated method: Id128..ctor
GlobalNamespace::Id128::Id128(::StringW guid) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(guid)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, guid);
}
// Autogenerated method: Id128..ctor
GlobalNamespace::Id128::Id128(::ArrayW<uint8_t> bytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytes);
}
// Autogenerated method: Id128.ToLongs
::System::ValueTuple_2<int64_t, int64_t> GlobalNamespace::Id128::ToLongs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::ToLongs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToLongs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::ValueTuple_2<int64_t, int64_t>, false>(this, ___internal__method);
}
// Autogenerated method: Id128.ToInts
::System::ValueTuple_4<int, int, int, int> GlobalNamespace::Id128::ToInts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::ToInts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToInts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::ValueTuple_4<int, int, int, int>, false>(this, ___internal__method);
}
// Autogenerated method: Id128.ToByteArray
::ArrayW<uint8_t> GlobalNamespace::Id128::ToByteArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::ToByteArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToByteArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(this, ___internal__method);
}
// Autogenerated method: Id128.Equals
bool GlobalNamespace::Id128::Equals(::GlobalNamespace::Id128 id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::Id128), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, id);
}
// Autogenerated method: Id128.Equals
bool GlobalNamespace::Id128::Equals(::System::Guid g) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::Id128), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, g);
}
// Autogenerated method: Id128.Equals
bool GlobalNamespace::Id128::Equals(::UnityEngine::Hash128 h) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::Id128), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, h);
}
// Autogenerated method: Id128.CompareTo
int GlobalNamespace::Id128::CompareTo(::GlobalNamespace::Id128 id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::CompareTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::Id128), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, id);
}
// Autogenerated method: Id128.CompareTo
int GlobalNamespace::Id128::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::CompareTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated method: Id128.NewId
::GlobalNamespace::Id128 GlobalNamespace::Id128::NewId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::NewId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "NewId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Id128.CalculateMD5
::GlobalNamespace::Id128 GlobalNamespace::Id128::CalculateMD5(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::CalculateMD5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "CalculateMD5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: Id128.CalculateSHV2
::GlobalNamespace::Id128 GlobalNamespace::Id128::CalculateSHV2(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::CalculateSHV2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "CalculateSHV2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: Id128.op_Explicit
GlobalNamespace::Id128::Id128(::StringW& s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: Id128.Equals
bool GlobalNamespace::Id128::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: Id128.ToString
::StringW GlobalNamespace::Id128::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Id128.GetHashCode
int GlobalNamespace::Id128::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Id128.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::Id128& j, const ::System::Guid& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::Id128& j, const ::System::Guid& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Equality
bool GlobalNamespace::operator ==(const ::System::Guid& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Inequality
bool GlobalNamespace::operator !=(const ::System::Guid& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::Id128& j, const ::UnityEngine::Hash128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::Id128& j, const ::UnityEngine::Hash128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Equality
bool GlobalNamespace::operator ==(const ::UnityEngine::Hash128& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_Inequality
bool GlobalNamespace::operator !=(const ::UnityEngine::Hash128& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_LessThan
bool GlobalNamespace::operator <(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_LessThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_LessThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_GreaterThan
bool GlobalNamespace::operator >(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_GreaterThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_GreaterThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_LessThanOrEqual
bool GlobalNamespace::operator <=(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_LessThanOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_LessThanOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated method: Id128.op_GreaterThanOrEqual
bool GlobalNamespace::operator >=(const ::GlobalNamespace::Id128& j, const ::GlobalNamespace::Id128& k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128::op_GreaterThanOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128", "op_GreaterThanOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, j, k);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Id128Ext
#include "GlobalNamespace/Id128Ext.hpp"
// Including type: Id128
#include "GlobalNamespace/Id128.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Id128Ext.ToId128
::GlobalNamespace::Id128 GlobalNamespace::Id128Ext::ToId128(::UnityEngine::Hash128 h) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Id128Ext::ToId128");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Id128Ext", "ToId128", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(h)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, h);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LerpComponent
#include "GlobalNamespace/LerpComponent.hpp"
// Including type: LerpChangedEvent
#include "GlobalNamespace/LerpChangedEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Single _lerp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LerpComponent::dyn__lerp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__lerp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lerp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single _lerpLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LerpComponent::dyn__lerpLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__lerpLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lerpLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected LerpChangedEvent _onLerpChanged
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LerpChangedEvent*& GlobalNamespace::LerpComponent::dyn__onLerpChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__onLerpChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onLerpChanged"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LerpChangedEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _previewInEditor
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LerpComponent::dyn__previewInEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__previewInEditor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previewInEditor"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _previewing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LerpComponent::dyn__previewing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__previewing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_previewing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _cancelPreview
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LerpComponent::dyn__cancelPreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__cancelPreview");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cancelPreview"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _rendering
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LerpComponent::dyn__rendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__rendering");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rendering"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastState
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LerpComponent::dyn__lastState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__lastState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastState"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevLerpFrom
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LerpComponent::dyn__prevLerpFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__prevLerpFrom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevLerpFrom"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevLerpTo
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LerpComponent::dyn__prevLerpTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::dyn__prevLerpTo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevLerpTo"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LerpComponent.get_Lerp
float GlobalNamespace::LerpComponent::get_Lerp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::get_Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.set_Lerp
void GlobalNamespace::LerpComponent::set_Lerp(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::set_Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LerpComponent.get_LerpTime
float GlobalNamespace::LerpComponent::get_LerpTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::get_LerpTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LerpTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.set_LerpTime
void GlobalNamespace::LerpComponent::set_LerpTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::set_LerpTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LerpTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LerpComponent.get_CanRender
bool GlobalNamespace::LerpComponent::get_CanRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::get_CanRender");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LerpComponent*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.OnLerp
void GlobalNamespace::LerpComponent::OnLerp(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::OnLerp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LerpComponent*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated method: LerpComponent.RenderLerp
void GlobalNamespace::LerpComponent::RenderLerp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::RenderLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.GetState
int GlobalNamespace::LerpComponent::GetState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::GetState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LerpComponent*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.Validate
void GlobalNamespace::LerpComponent::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::Validate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LerpComponent*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.OnDrawGizmosSelected
void GlobalNamespace::LerpComponent::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.TryEditorRender
void GlobalNamespace::LerpComponent::TryEditorRender(bool playModeCheck) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::TryEditorRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryEditorRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playModeCheck)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playModeCheck);
}
// Autogenerated method: LerpComponent.LerpToOne
void GlobalNamespace::LerpComponent::LerpToOne() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::LerpToOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpToOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.LerpToZero
void GlobalNamespace::LerpComponent::LerpToZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::LerpToZero");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpToZero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LerpComponent.StartPreview
void GlobalNamespace::LerpComponent::StartPreview(float lerpFrom, float lerpTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpComponent::StartPreview");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartPreview", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lerpFrom), ::il2cpp_utils::ExtractType(lerpTo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpFrom, lerpTo);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LerpChangedEvent
#include "GlobalNamespace/LerpChangedEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LerpScale
#include "GlobalNamespace/LerpScale.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::LerpScale::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpScale::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 start
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LerpScale::dyn_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpScale::dyn_start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "start"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 end
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LerpScale::dyn_end() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpScale::dyn_end");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "end"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 current
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LerpScale::dyn_current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpScale::dyn_current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "current"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve scaleCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::LerpScale::dyn_scaleCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpScale::dyn_scaleCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LerpScale.OnLerp
void GlobalNamespace::LerpScale::OnLerp(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LerpScale::OnLerp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LerpComponent*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MaterialInstance
#include "GlobalNamespace/MaterialInstance.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String instancePostfix
::StringW GlobalNamespace::MaterialInstance::_get_instancePostfix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::_get_instancePostfix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "MaterialInstance", "instancePostfix"));
}
// Autogenerated static field setter
// Set static field: static private System.String instancePostfix
void GlobalNamespace::MaterialInstance::_set_instancePostfix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::_set_instancePostfix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MaterialInstance", "instancePostfix", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer cachedRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::MaterialInstance::dyn_cachedRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::dyn_cachedRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material[] defaultMaterials
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& GlobalNamespace::MaterialInstance::dyn_defaultMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::dyn_defaultMaterials");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultMaterials"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Material*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material[] instanceMaterials
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& GlobalNamespace::MaterialInstance::dyn_instanceMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::dyn_instanceMaterials");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instanceMaterials"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Material*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material[] cachedSharedMaterials
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& GlobalNamespace::MaterialInstance::dyn_cachedSharedMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::dyn_cachedSharedMaterials");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedSharedMaterials"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Material*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialInstance::dyn_initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::dyn_initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean materialsInstanced
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialInstance::dyn_materialsInstanced() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::dyn_materialsInstanced");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "materialsInstanced"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean cacheSharedMaterialsFromRenderer
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::MaterialInstance::dyn_cacheSharedMaterialsFromRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::dyn_cacheSharedMaterialsFromRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cacheSharedMaterialsFromRenderer"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<UnityEngine.Object> materialOwners
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::Object*>*& GlobalNamespace::MaterialInstance::dyn_materialOwners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::dyn_materialOwners");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "materialOwners"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::UnityEngine::Object*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialInstance.AcquireMaterial
::UnityEngine::Material* GlobalNamespace::MaterialInstance::AcquireMaterial(::UnityEngine::Object* owner, bool instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::AcquireMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner), ::il2cpp_utils::ExtractType(instance)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method, owner, instance);
}
// Autogenerated method: MaterialInstance.AcquireMaterials
::ArrayW<::UnityEngine::Material*> GlobalNamespace::MaterialInstance::AcquireMaterials(::UnityEngine::Object* owner, bool instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::AcquireMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner), ::il2cpp_utils::ExtractType(instance)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Material*>, false>(this, ___internal__method, owner, instance);
}
// Autogenerated method: MaterialInstance.ReleaseMaterial
void GlobalNamespace::MaterialInstance::ReleaseMaterial(::UnityEngine::Object* owner, bool autoDestroy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::ReleaseMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner), ::il2cpp_utils::ExtractType(autoDestroy)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, owner, autoDestroy);
}
// Autogenerated method: MaterialInstance.get_Material
::UnityEngine::Material* GlobalNamespace::MaterialInstance::get_Material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::get_Material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.get_Materials
::ArrayW<::UnityEngine::Material*> GlobalNamespace::MaterialInstance::get_Materials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::get_Materials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Materials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Material*>, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.get_CacheSharedMaterialsFromRenderer
bool GlobalNamespace::MaterialInstance::get_CacheSharedMaterialsFromRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::get_CacheSharedMaterialsFromRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CacheSharedMaterialsFromRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.set_CacheSharedMaterialsFromRenderer
void GlobalNamespace::MaterialInstance::set_CacheSharedMaterialsFromRenderer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::set_CacheSharedMaterialsFromRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CacheSharedMaterialsFromRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialInstance.get_CachedRenderer
::UnityEngine::Renderer* GlobalNamespace::MaterialInstance::get_CachedRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::get_CachedRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CachedRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.get_CachedRendererSharedMaterials
::ArrayW<::UnityEngine::Material*> GlobalNamespace::MaterialInstance::get_CachedRendererSharedMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::get_CachedRendererSharedMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CachedRendererSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Material*>, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.set_CachedRendererSharedMaterials
void GlobalNamespace::MaterialInstance::set_CachedRendererSharedMaterials(::ArrayW<::UnityEngine::Material*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::set_CachedRendererSharedMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CachedRendererSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MaterialInstance.Awake
void GlobalNamespace::MaterialInstance::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.OnDestroy
void GlobalNamespace::MaterialInstance::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.RestoreRenderer
void GlobalNamespace::MaterialInstance::RestoreRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::RestoreRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestoreRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.Initialize
void GlobalNamespace::MaterialInstance::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.AcquireInstances
void GlobalNamespace::MaterialInstance::AcquireInstances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::AcquireInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.CreateInstances
void GlobalNamespace::MaterialInstance::CreateInstances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::CreateInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialInstance.MaterialsMatch
bool GlobalNamespace::MaterialInstance::MaterialsMatch(::ArrayW<::UnityEngine::Material*> a, ::ArrayW<::UnityEngine::Material*> b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::MaterialsMatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialInstance", "MaterialsMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: MaterialInstance.InstanceMaterials
::ArrayW<::UnityEngine::Material*> GlobalNamespace::MaterialInstance::InstanceMaterials(::ArrayW<::UnityEngine::Material*> source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::InstanceMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialInstance", "InstanceMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Material*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source);
}
// Autogenerated method: MaterialInstance.DestroyMaterials
void GlobalNamespace::MaterialInstance::DestroyMaterials(::ArrayW<::UnityEngine::Material*> materials) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::DestroyMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialInstance", "DestroyMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materials)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materials);
}
// Autogenerated method: MaterialInstance.IsInstanceMaterial
bool GlobalNamespace::MaterialInstance::IsInstanceMaterial(::UnityEngine::Material* material) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::IsInstanceMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialInstance", "IsInstanceMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(material)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, material);
}
// Autogenerated method: MaterialInstance.HasValidMaterial
bool GlobalNamespace::MaterialInstance::HasValidMaterial(::ArrayW<::UnityEngine::Material*> materials) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::HasValidMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialInstance", "HasValidMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materials)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, materials);
}
// Autogenerated method: MaterialInstance.DestroySafe
void GlobalNamespace::MaterialInstance::DestroySafe(::UnityEngine::Object* toDestroy) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialInstance::DestroySafe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialInstance", "DestroySafe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toDestroy)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, toDestroy);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ObjectToggle
#include "GlobalNamespace/ObjectToggle.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> objectsToToggle
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::ObjectToggle::dyn_objectsToToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectToggle::dyn_objectsToToggle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectsToToggle"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ignoreHierarchyState
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ObjectToggle::dyn__ignoreHierarchyState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectToggle::dyn__ignoreHierarchyState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ignoreHierarchyState"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Boolean> _toggled
[[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& GlobalNamespace::ObjectToggle::dyn__toggled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectToggle::dyn__toggled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_toggled"))->offset;
  return *reinterpret_cast<::System::Nullable_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ObjectToggle.Toggle
void GlobalNamespace::ObjectToggle::Toggle(bool initialState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectToggle::Toggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Toggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initialState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initialState);
}
// Autogenerated method: ObjectToggle.Enable
void GlobalNamespace::ObjectToggle::Enable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectToggle::Enable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObjectToggle.Disable
void GlobalNamespace::ObjectToggle::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectToggle::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: OrientedBounds
#include "GlobalNamespace/OrientedBounds.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly OrientedBounds <Empty>k__BackingField
::GlobalNamespace::OrientedBounds GlobalNamespace::OrientedBounds::_get_$Empty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::_get_$Empty$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OrientedBounds>("", "OrientedBounds", "<Empty>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private readonly OrientedBounds <Empty>k__BackingField
void GlobalNamespace::OrientedBounds::_set_$Empty$k__BackingField(::GlobalNamespace::OrientedBounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::_set_$Empty$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OrientedBounds", "<Empty>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private readonly OrientedBounds <Identity>k__BackingField
::GlobalNamespace::OrientedBounds GlobalNamespace::OrientedBounds::_get_$Identity$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::_get_$Identity$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::OrientedBounds>("", "OrientedBounds", "<Identity>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private readonly OrientedBounds <Identity>k__BackingField
void GlobalNamespace::OrientedBounds::_set_$Identity$k__BackingField(::GlobalNamespace::OrientedBounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::_set_$Identity$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OrientedBounds", "<Identity>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 size
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OrientedBounds::dyn_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::dyn_size");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "size"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 center
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OrientedBounds::dyn_center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::dyn_center");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "center"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OrientedBounds::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::dyn_rotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OrientedBounds.get_Empty
::GlobalNamespace::OrientedBounds GlobalNamespace::OrientedBounds::get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::get_Empty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OrientedBounds", "get_Empty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OrientedBounds, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OrientedBounds.get_Identity
::GlobalNamespace::OrientedBounds GlobalNamespace::OrientedBounds::get_Identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::get_Identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OrientedBounds", "get_Identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OrientedBounds, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OrientedBounds.TRS
::UnityEngine::Matrix4x4 GlobalNamespace::OrientedBounds::TRS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::TRS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TRS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: OrientedBounds..cctor
void GlobalNamespace::OrientedBounds::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBounds::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OrientedBounds", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: OrientedBoundsEditorUtils
#include "GlobalNamespace/OrientedBoundsEditorUtils.hpp"
// Including type: OrientedBounds
#include "GlobalNamespace/OrientedBounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OrientedBoundsEditorUtils.ComputeBounds
::GlobalNamespace::OrientedBounds GlobalNamespace::OrientedBoundsEditorUtils::ComputeBounds(::ArrayW<::UnityEngine::Vector3> points) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrientedBoundsEditorUtils::ComputeBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OrientedBoundsEditorUtils", "ComputeBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OrientedBounds, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, points);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ParticleCollisionListener
#include "GlobalNamespace/ParticleCollisionListener.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem target
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::ParticleCollisionListener::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleCollisionListener::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.ParticleCollisionEvent> _events
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ParticleCollisionEvent>*& GlobalNamespace::ParticleCollisionListener::dyn__events() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleCollisionListener::dyn__events");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_events"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::ParticleCollisionEvent>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ParticleCollisionListener.Awake
void GlobalNamespace::ParticleCollisionListener::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleCollisionListener::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleCollisionListener.OnCollisionEvent
void GlobalNamespace::ParticleCollisionListener::OnCollisionEvent(::UnityEngine::ParticleCollisionEvent ev) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleCollisionListener::OnCollisionEvent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ParticleCollisionListener*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ev);
}
// Autogenerated method: ParticleCollisionListener.OnParticleCollision
void GlobalNamespace::ParticleCollisionListener::OnParticleCollision(::UnityEngine::GameObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleCollisionListener::OnParticleCollision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnParticleCollision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ShaderIds
#include "GlobalNamespace/ShaderIds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _MainTex
int GlobalNamespace::ShaderIds::_get__MainTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderIds::_get__MainTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ShaderIds", "_MainTex"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _MainTex
void GlobalNamespace::ShaderIds::_set__MainTex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderIds::_set__MainTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ShaderIds", "_MainTex", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _EmissionColor
int GlobalNamespace::ShaderIds::_get__EmissionColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderIds::_get__EmissionColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ShaderIds", "_EmissionColor"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _EmissionColor
void GlobalNamespace::ShaderIds::_set__EmissionColor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderIds::_set__EmissionColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ShaderIds", "_EmissionColor", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 _Color
int GlobalNamespace::ShaderIds::_get__Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderIds::_get__Color");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ShaderIds", "_Color"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 _Color
void GlobalNamespace::ShaderIds::_set__Color(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderIds::_set__Color");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ShaderIds", "_Color", value));
}
// Autogenerated method: ShaderIds..cctor
void GlobalNamespace::ShaderIds::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderIds::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ShaderIds", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SRand
#include "GlobalNamespace/SRand.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.UInt32 MAX_PLUS_ONE
uint GlobalNamespace::SRand::_get_MAX_PLUS_ONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::_get_MAX_PLUS_ONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("", "SRand", "MAX_PLUS_ONE"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 MAX_PLUS_ONE
void GlobalNamespace::SRand::_set_MAX_PLUS_ONE(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::_set_MAX_PLUS_ONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SRand", "MAX_PLUS_ONE", value));
}
// Autogenerated static field getter
// Get static field: static private System.Double MAX_AS_DOUBLE
double GlobalNamespace::SRand::_get_MAX_AS_DOUBLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::_get_MAX_AS_DOUBLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("", "SRand", "MAX_AS_DOUBLE"));
}
// Autogenerated static field setter
// Set static field: static private System.Double MAX_AS_DOUBLE
void GlobalNamespace::SRand::_set_MAX_AS_DOUBLE(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::_set_MAX_AS_DOUBLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SRand", "MAX_AS_DOUBLE", value));
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _seed
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::SRand::dyn__seed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::dyn__seed");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_seed"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _state
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::SRand::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::dyn__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SRand..ctor
GlobalNamespace::SRand::SRand(int seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand..ctor
GlobalNamespace::SRand::SRand(uint seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand..ctor
GlobalNamespace::SRand::SRand(int64_t seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand..ctor
GlobalNamespace::SRand::SRand(::System::DateTime seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand..ctor
GlobalNamespace::SRand::SRand(::StringW seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand..ctor
GlobalNamespace::SRand::SRand(::ArrayW<uint8_t> seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand.NextDouble
double GlobalNamespace::SRand::NextDouble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: SRand.NextDouble
double GlobalNamespace::SRand::NextDouble(double max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, max);
}
// Autogenerated method: SRand.NextDouble
double GlobalNamespace::SRand::NextDouble(double min, double max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, min, max);
}
// Autogenerated method: SRand.NextFloat
float GlobalNamespace::SRand::NextFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SRand.NextFloat
float GlobalNamespace::SRand::NextFloat(float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, max);
}
// Autogenerated method: SRand.NextFloat
float GlobalNamespace::SRand::NextFloat(float min, float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, min, max);
}
// Autogenerated method: SRand.NextBool
bool GlobalNamespace::SRand::NextBool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SRand.NextUInt
uint GlobalNamespace::SRand::NextUInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SRand.NextInt
int GlobalNamespace::SRand::NextInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: SRand.NextInt
int GlobalNamespace::SRand::NextInt(int max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, max);
}
// Autogenerated method: SRand.NextInt
int GlobalNamespace::SRand::NextInt(int min, int max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, min, max);
}
// Autogenerated method: SRand.NextIntWithExclusion
int GlobalNamespace::SRand::NextIntWithExclusion(int min, int max, int exclude) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextIntWithExclusion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextIntWithExclusion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max), ::il2cpp_utils::ExtractType(exclude)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, min, max, exclude);
}
// Autogenerated method: SRand.NextIntWithExclusion2
int GlobalNamespace::SRand::NextIntWithExclusion2(int min, int max, int exclude, int exclude2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextIntWithExclusion2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextIntWithExclusion2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max), ::il2cpp_utils::ExtractType(exclude), ::il2cpp_utils::ExtractType(exclude2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, min, max, exclude, exclude2);
}
// Autogenerated method: SRand.NextColor32
::UnityEngine::Color32 GlobalNamespace::SRand::NextColor32() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextColor32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextColor32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color32, false>(this, ___internal__method);
}
// Autogenerated method: SRand.NextColor
::UnityEngine::Color GlobalNamespace::SRand::NextColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: SRand.Reset
void GlobalNamespace::SRand::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SRand.Reset
void GlobalNamespace::SRand::Reset(int seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand.Reset
void GlobalNamespace::SRand::Reset(uint seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand.Reset
void GlobalNamespace::SRand::Reset(int64_t seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand.Reset
void GlobalNamespace::SRand::Reset(::System::DateTime seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand.Reset
void GlobalNamespace::SRand::Reset(::StringW seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand.Reset
void GlobalNamespace::SRand::Reset(::ArrayW<uint8_t> seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, seed);
}
// Autogenerated method: SRand.NextState
uint GlobalNamespace::SRand::NextState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::NextState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "NextState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SRand.Mix
uint GlobalNamespace::SRand::Mix(uint x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::Mix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Mix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method, x);
}
// Autogenerated method: SRand.New
::GlobalNamespace::SRand GlobalNamespace::SRand::New() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::New");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SRand", "New", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SRand, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SRand.op_Explicit
GlobalNamespace::SRand::SRand(int& seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SRand", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SRand, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, seed);
}
// Autogenerated method: SRand.op_Explicit
GlobalNamespace::SRand::SRand(uint& seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SRand", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SRand, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, seed);
}
// Autogenerated method: SRand.op_Explicit
GlobalNamespace::SRand::SRand(int64_t& seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SRand", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SRand, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, seed);
}
// Autogenerated method: SRand.op_Explicit
GlobalNamespace::SRand::SRand(::StringW& seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SRand", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SRand, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, seed);
}
// Autogenerated method: SRand.op_Explicit
GlobalNamespace::SRand::SRand(::ArrayW<uint8_t>& seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SRand", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SRand, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, seed);
}
// Autogenerated method: SRand.op_Explicit
GlobalNamespace::SRand::SRand(::System::DateTime& seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SRand", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SRand, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, seed);
}
// Autogenerated method: SRand.GetHashCode
int GlobalNamespace::SRand::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: SRand.ToString
::StringW GlobalNamespace::SRand::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SRand::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: StateHash
#include "GlobalNamespace/StateHash.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 last
[[deprecated("Use field access instead!")]] int& GlobalNamespace::StateHash::dyn_last() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StateHash::dyn_last");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "last"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 next
[[deprecated("Use field access instead!")]] int& GlobalNamespace::StateHash::dyn_next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StateHash::dyn_next");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "next"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StateHash.Changed
bool GlobalNamespace::StateHash::Changed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StateHash::Changed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Changed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StateHash.GetHashCode
int GlobalNamespace::StateHash::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StateHash::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: StateHash.ToString
::StringW GlobalNamespace::StateHash::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StateHash::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SubEmitterListener
#include "GlobalNamespace/SubEmitterListener.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem target
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::SubEmitterListener::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem subEmitter
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::SubEmitterListener::dyn_subEmitter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn_subEmitter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subEmitter"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 subEmitterIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SubEmitterListener::dyn_subEmitterIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn_subEmitterIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subEmitterIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onSubEmit
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::SubEmitterListener::dyn_onSubEmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn_onSubEmit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onSubEmit"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single intervalScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SubEmitterListener::dyn_intervalScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn_intervalScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "intervalScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single interval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SubEmitterListener::dyn_interval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn_interval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _canListen
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SubEmitterListener::dyn__canListen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn__canListen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_canListen"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _listening
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SubEmitterListener::dyn__listening() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn__listening");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listening"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _listenOnce
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SubEmitterListener::dyn__listenOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn__listenOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listenOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TimeSince _sinceLastEmit
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& GlobalNamespace::SubEmitterListener::dyn__sinceLastEmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::dyn__sinceLastEmit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sinceLastEmit"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeSince*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SubEmitterListener.OnEnable
void GlobalNamespace::SubEmitterListener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SubEmitterListener.OnDisable
void GlobalNamespace::SubEmitterListener::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SubEmitterListener.ListenStart
void GlobalNamespace::SubEmitterListener::ListenStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::ListenStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ListenStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SubEmitterListener.ListenStop
void GlobalNamespace::SubEmitterListener::ListenStop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::ListenStop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ListenStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SubEmitterListener.ListenOnce
void GlobalNamespace::SubEmitterListener::ListenOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::ListenOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ListenOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SubEmitterListener.Update
void GlobalNamespace::SubEmitterListener::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SubEmitterListener.OnSubEmit
void GlobalNamespace::SubEmitterListener::OnSubEmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::OnSubEmit");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubEmitterListener*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SubEmitterListener.Enable
void GlobalNamespace::SubEmitterListener::Enable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::Enable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SubEmitterListener.Disable
void GlobalNamespace::SubEmitterListener::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubEmitterListener::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TimeSince
#include "GlobalNamespace/TimeSince.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Double INT32_MAX
double GlobalNamespace::TimeSince::_get_INT32_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::_get_INT32_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("", "TimeSince", "INT32_MAX"));
}
// Autogenerated static field setter
// Set static field: static private System.Double INT32_MAX
void GlobalNamespace::TimeSince::_set_INT32_MAX(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::_set_INT32_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeSince", "INT32_MAX", value));
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime _dt
[[deprecated("Use field access instead!")]] ::System::DateTime& GlobalNamespace::TimeSince::dyn__dt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::dyn__dt");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dt"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimeSince.get_secondsElapsed
double GlobalNamespace::TimeSince::get_secondsElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::get_secondsElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_secondsElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: TimeSince.get_secondsElapsedFloat
float GlobalNamespace::TimeSince::get_secondsElapsedFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::get_secondsElapsedFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_secondsElapsedFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TimeSince.get_secondsElapsedInt
int GlobalNamespace::TimeSince::get_secondsElapsedInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::get_secondsElapsedInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_secondsElapsedInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TimeSince.get_secondsElapsedUint
uint GlobalNamespace::TimeSince::get_secondsElapsedUint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::get_secondsElapsedUint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_secondsElapsedUint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: TimeSince.get_secondsElapsedLong
int64_t GlobalNamespace::TimeSince::get_secondsElapsedLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::get_secondsElapsedLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_secondsElapsedLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: TimeSince.get_secondsElapsedSpan
::System::TimeSpan GlobalNamespace::TimeSince::get_secondsElapsedSpan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::get_secondsElapsedSpan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_secondsElapsedSpan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: TimeSince..ctor
// ABORTED elsewhere.  GlobalNamespace::TimeSince::TimeSince(::System::DateTime dt)
// Autogenerated method: TimeSince..ctor
GlobalNamespace::TimeSince::TimeSince(int elapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elapsed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, elapsed);
}
// Autogenerated method: TimeSince..ctor
GlobalNamespace::TimeSince::TimeSince(uint elapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elapsed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, elapsed);
}
// Autogenerated method: TimeSince..ctor
GlobalNamespace::TimeSince::TimeSince(float elapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elapsed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, elapsed);
}
// Autogenerated method: TimeSince..ctor
GlobalNamespace::TimeSince::TimeSince(double elapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elapsed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, elapsed);
}
// Autogenerated method: TimeSince..ctor
GlobalNamespace::TimeSince::TimeSince(int64_t elapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elapsed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, elapsed);
}
// Autogenerated method: TimeSince..ctor
GlobalNamespace::TimeSince::TimeSince(::System::TimeSpan elapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elapsed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, elapsed);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(int seconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(uint seconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(float seconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(double seconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(int64_t seconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(::System::TimeSpan seconds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds);
}
// Autogenerated method: TimeSince.Reset
void GlobalNamespace::TimeSince::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(int seconds, bool resetOnElapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(resetOnElapsed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds, resetOnElapsed);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(uint seconds, bool resetOnElapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(resetOnElapsed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds, resetOnElapsed);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(float seconds, bool resetOnElapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(resetOnElapsed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds, resetOnElapsed);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(double seconds, bool resetOnElapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(resetOnElapsed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds, resetOnElapsed);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(int64_t seconds, bool resetOnElapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(resetOnElapsed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds, resetOnElapsed);
}
// Autogenerated method: TimeSince.HasElapsed
bool GlobalNamespace::TimeSince::HasElapsed(::System::TimeSpan seconds, bool resetOnElapsed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::HasElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seconds), ::il2cpp_utils::ExtractType(resetOnElapsed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seconds, resetOnElapsed);
}
// Autogenerated method: TimeSince.Now
::GlobalNamespace::TimeSince GlobalNamespace::TimeSince::Now() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::Now");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeSince", "Now", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TimeSince, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeSince.ToString
::StringW GlobalNamespace::TimeSince::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: TimeSince.GetHashCode
int GlobalNamespace::TimeSince::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeSince::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreementBodyText
#include "GlobalNamespace/LegalAgreementBodyText.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: LegalAgreementBodyText/<UpdateTextFromPlayFabTitleData>d__10
#include "GlobalNamespace/LegalAgreementBodyText_-UpdateTextFromPlayFabTitleData-d__10.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: PlayFab.PlayFabError
#include "PlayFab/PlayFabError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Text textBox
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::LegalAgreementBodyText::dyn_textBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::dyn_textBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textBox"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.TextAsset textAsset
[[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& GlobalNamespace::LegalAgreementBodyText::dyn_textAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::dyn_textAsset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textAsset"))->offset;
  return *reinterpret_cast<::UnityEngine::TextAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RectTransform rectTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& GlobalNamespace::LegalAgreementBodyText::dyn_rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::dyn_rectTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rectTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.UI.Text> textCollection
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>*& GlobalNamespace::LegalAgreementBodyText::dyn_textCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::dyn_textCollection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textCollection"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String cachedText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreementBodyText::dyn_cachedText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::dyn_cachedText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreementBodyText/State state
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreementBodyText::State& GlobalNamespace::LegalAgreementBodyText::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreementBodyText::State*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreementBodyText.Awake
void GlobalNamespace::LegalAgreementBodyText::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreementBodyText.SetText
void GlobalNamespace::LegalAgreementBodyText::SetText(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: LegalAgreementBodyText.ClearText
void GlobalNamespace::LegalAgreementBodyText::ClearText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::ClearText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreementBodyText.UpdateTextFromPlayFabTitleData
::System::Threading::Tasks::Task_1<bool>* GlobalNamespace::LegalAgreementBodyText::UpdateTextFromPlayFabTitleData(::StringW key, ::StringW version) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::UpdateTextFromPlayFabTitleData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTextFromPlayFabTitleData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(version)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, key, version);
}
// Autogenerated method: LegalAgreementBodyText.OnPlayFabError
void GlobalNamespace::LegalAgreementBodyText::OnPlayFabError(::PlayFab::PlayFabError* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::OnPlayFabError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPlayFabError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: LegalAgreementBodyText.OnTitleDataReceived
void GlobalNamespace::LegalAgreementBodyText::OnTitleDataReceived(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::OnTitleDataReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTitleDataReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: LegalAgreementBodyText.get_Height
float GlobalNamespace::LegalAgreementBodyText::get_Height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::get_Height");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Height", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreementBodyText/State
#include "GlobalNamespace/LegalAgreementBodyText.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LegalAgreementBodyText/State Ready
::GlobalNamespace::LegalAgreementBodyText::State GlobalNamespace::LegalAgreementBodyText::State::_get_Ready() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::State::_get_Ready");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegalAgreementBodyText::State>("", "LegalAgreementBodyText/State", "Ready"));
}
// Autogenerated static field setter
// Set static field: static public LegalAgreementBodyText/State Ready
void GlobalNamespace::LegalAgreementBodyText::State::_set_Ready(::GlobalNamespace::LegalAgreementBodyText::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::State::_set_Ready");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegalAgreementBodyText/State", "Ready", value));
}
// Autogenerated static field getter
// Get static field: static public LegalAgreementBodyText/State Loading
::GlobalNamespace::LegalAgreementBodyText::State GlobalNamespace::LegalAgreementBodyText::State::_get_Loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::State::_get_Loading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegalAgreementBodyText::State>("", "LegalAgreementBodyText/State", "Loading"));
}
// Autogenerated static field setter
// Set static field: static public LegalAgreementBodyText/State Loading
void GlobalNamespace::LegalAgreementBodyText::State::_set_Loading(::GlobalNamespace::LegalAgreementBodyText::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::State::_set_Loading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegalAgreementBodyText/State", "Loading", value));
}
// Autogenerated static field getter
// Get static field: static public LegalAgreementBodyText/State Error
::GlobalNamespace::LegalAgreementBodyText::State GlobalNamespace::LegalAgreementBodyText::State::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::State::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegalAgreementBodyText::State>("", "LegalAgreementBodyText/State", "Error"));
}
// Autogenerated static field setter
// Set static field: static public LegalAgreementBodyText/State Error
void GlobalNamespace::LegalAgreementBodyText::State::_set_Error(::GlobalNamespace::LegalAgreementBodyText::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::State::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegalAgreementBodyText/State", "Error", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreementBodyText::State::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::State::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreementBodyText/<UpdateTextFromPlayFabTitleData>d__10
#include "GlobalNamespace/LegalAgreementBodyText_-UpdateTextFromPlayFabTitleData-d__10.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Boolean> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<bool>& GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String key
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_key");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "key"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String version
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_version");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "version"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegalAgreementBodyText <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreementBodyText*& GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreementBodyText**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreementBodyText/<UpdateTextFromPlayFabTitleData>d__10.MoveNext
void GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreementBodyText/<UpdateTextFromPlayFabTitleData>d__10.SetStateMachine
void GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreementBodyText::$UpdateTextFromPlayFabTitleData$d__10), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreementCheck
#include "GlobalNamespace/LegalAgreementCheck.hpp"
// Including type: LegalAgreementTextAsset
#include "GlobalNamespace/LegalAgreementTextAsset.hpp"
// Including type: LegalAgreements
#include "GlobalNamespace/LegalAgreements.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LegalAgreementTextAsset[] agreements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>& GlobalNamespace::LegalAgreementCheck::dyn_agreements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementCheck::dyn_agreements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "agreements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean testAgreement
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegalAgreementCheck::dyn_testAgreement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementCheck::dyn_testAgreement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testAgreement"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreements legalAgreements
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements*& GlobalNamespace::LegalAgreementCheck::dyn_legalAgreements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementCheck::dyn_legalAgreements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "legalAgreements"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreements**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements
#include "GlobalNamespace/LegalAgreements.hpp"
// Including type: LegalAgreements/<>c
#include "GlobalNamespace/LegalAgreements_--c.hpp"
// Including type: LegalAgreements/<>c__DisplayClass26_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass26_0.hpp"
// Including type: LegalAgreements/<>c__DisplayClass27_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass27_0.hpp"
// Including type: LegalAgreements/<>c__DisplayClass28_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass28_0.hpp"
// Including type: LegalAgreements/<FadeBackgroundColor>d__25
#include "GlobalNamespace/LegalAgreements_-FadeBackgroundColor-d__25.hpp"
// Including type: LegalAgreements/<FadeGroup>d__24
#include "GlobalNamespace/LegalAgreements_-FadeGroup-d__24.hpp"
// Including type: LegalAgreements/<GetAcceptedAgreements>d__27
#include "GlobalNamespace/LegalAgreements_-GetAcceptedAgreements-d__27.hpp"
// Including type: LegalAgreements/<GetTitleDataAsync>d__26
#include "GlobalNamespace/LegalAgreements_-GetTitleDataAsync-d__26.hpp"
// Including type: LegalAgreements/<Start>d__20
#include "GlobalNamespace/LegalAgreements_-Start-d__20.hpp"
// Including type: LegalAgreements/<SubmitAcceptedAgreements>d__28
#include "GlobalNamespace/LegalAgreements_-SubmitAcceptedAgreements-d__28.hpp"
// Including type: LegalAgreements/<UpdateText>d__23
#include "GlobalNamespace/LegalAgreements_-UpdateText-d__23.hpp"
// Including type: LegalAgreements/<WaitForAcknowledgement>d__22
#include "GlobalNamespace/LegalAgreements_-WaitForAcknowledgement-d__22.hpp"
// Including type: UnityEngine.UI.ScrollRect
#include "UnityEngine/UI/ScrollRect.hpp"
// Including type: LegalAgreementTextAsset
#include "GlobalNamespace/LegalAgreementTextAsset.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: LegalAgreementBodyText
#include "GlobalNamespace/LegalAgreementBodyText.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.ScrollRect scrollView
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::ScrollRect*& GlobalNamespace::LegalAgreements::dyn_scrollView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_scrollView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scrollView"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::ScrollRect**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single scrollSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::dyn_scrollSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_scrollSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scrollSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single holdTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::dyn_holdTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_holdTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreementTextAsset[] legalAgreementScreens
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>& GlobalNamespace::LegalAgreements::dyn_legalAgreementScreens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_legalAgreementScreens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "legalAgreementScreens"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Text title
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::LegalAgreements::dyn_title() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_title");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "title"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Text acknowledgementPrompt
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::LegalAgreements::dyn_acknowledgementPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_acknowledgementPrompt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "acknowledgementPrompt"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreementBodyText body
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreementBodyText*& GlobalNamespace::LegalAgreements::dyn_body() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_body");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "body"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreementBodyText**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image progressImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::LegalAgreements::dyn_progressImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_progressImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progressImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CanvasGroup canvasGroup
[[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& GlobalNamespace::LegalAgreements::dyn_canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_canvasGroup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canvasGroup"))->offset;
  return *reinterpret_cast<::UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Camera cam
[[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& GlobalNamespace::LegalAgreements::dyn_cam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_cam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cam"))->offset;
  return *reinterpret_cast<::UnityEngine::Camera**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testAgreement
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegalAgreements::dyn_testAgreement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_testAgreement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testAgreement"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testSubmitResult
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegalAgreements::dyn_testSubmitResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_testSubmitResult");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testSubmitResult"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testFaceButtonPress
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegalAgreements::dyn_testFaceButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_testFaceButtonPress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testFaceButtonPress"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 cullingMask
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::dyn_cullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_cullingMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cullingMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject UIParent
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::LegalAgreements::dyn_UIParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_UIParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UIParent"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.InputDevice leftHandDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::LegalAgreements::dyn_leftHandDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_leftHandDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.InputDevice rightHandDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::LegalAgreements::dyn_rightHandDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_rightHandDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color camBackgroundColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LegalAgreements::dyn_camBackgroundColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_camBackgroundColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "camBackgroundColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color originalColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LegalAgreements::dyn_originalColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::dyn_originalColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements.Awake
void GlobalNamespace::LegalAgreements::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements.Start
void GlobalNamespace::LegalAgreements::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements.Update
void GlobalNamespace::LegalAgreements::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements.WaitForAcknowledgement
::System::Threading::Tasks::Task* GlobalNamespace::LegalAgreements::WaitForAcknowledgement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::WaitForAcknowledgement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitForAcknowledgement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements.UpdateText
::System::Threading::Tasks::Task_1<bool>* GlobalNamespace::LegalAgreements::UpdateText(::GlobalNamespace::LegalAgreementTextAsset* asset, ::StringW version) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::UpdateText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset), ::il2cpp_utils::ExtractType(version)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, asset, version);
}
// Autogenerated method: LegalAgreements.FadeGroup
::System::Threading::Tasks::Task* GlobalNamespace::LegalAgreements::FadeGroup(::UnityEngine::CanvasGroup* canvasGroup, float finalAlpha, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::FadeGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canvasGroup), ::il2cpp_utils::ExtractType(finalAlpha), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, canvasGroup, finalAlpha, time);
}
// Autogenerated method: LegalAgreements.FadeBackgroundColor
::System::Threading::Tasks::Task* GlobalNamespace::LegalAgreements::FadeBackgroundColor(::UnityEngine::Color targetColor, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::FadeBackgroundColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeBackgroundColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetColor), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, targetColor, time);
}
// Autogenerated method: LegalAgreements.GetTitleDataAsync
::System::Threading::Tasks::Task_1<::StringW>* GlobalNamespace::LegalAgreements::GetTitleDataAsync(::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::GetTitleDataAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTitleDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::StringW>*, false>(this, ___internal__method, key);
}
// Autogenerated method: LegalAgreements.GetAcceptedAgreements
::System::Threading::Tasks::Task_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>* GlobalNamespace::LegalAgreements::GetAcceptedAgreements(::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*> agreements) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::GetAcceptedAgreements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAcceptedAgreements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(agreements)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>*, false>(this, ___internal__method, agreements);
}
// Autogenerated method: LegalAgreements.SubmitAcceptedAgreements
::System::Threading::Tasks::Task* GlobalNamespace::LegalAgreements::SubmitAcceptedAgreements(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* agreements) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::SubmitAcceptedAgreements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitAcceptedAgreements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(agreements)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method, agreements);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<>c
#include "GlobalNamespace/LegalAgreements_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: LegalAgreementTextAsset
#include "GlobalNamespace/LegalAgreementTextAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly LegalAgreements/<>c <>9
::GlobalNamespace::LegalAgreements::$$c* GlobalNamespace::LegalAgreements::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::LegalAgreements::$$c*>("", "LegalAgreements/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly LegalAgreements/<>c <>9
void GlobalNamespace::LegalAgreements::$$c::_set_$$9(::GlobalNamespace::LegalAgreements::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "LegalAgreements/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<LegalAgreementTextAsset,System.String> <>9__27_0
::System::Func_2<::GlobalNamespace::LegalAgreementTextAsset*, ::StringW>* GlobalNamespace::LegalAgreements::$$c::_get_$$9__27_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c::_get_$$9__27_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::LegalAgreementTextAsset*, ::StringW>*>("", "LegalAgreements/<>c", "<>9__27_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<LegalAgreementTextAsset,System.String> <>9__27_0
void GlobalNamespace::LegalAgreements::$$c::_set_$$9__27_0(::System::Func_2<::GlobalNamespace::LegalAgreementTextAsset*, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c::_set_$$9__27_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "LegalAgreements/<>c", "<>9__27_0", value)));
}
// Autogenerated method: LegalAgreements/<>c..cctor
void GlobalNamespace::LegalAgreements::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LegalAgreements/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LegalAgreements/<>c.<GetAcceptedAgreements>b__27_0
::StringW GlobalNamespace::LegalAgreements::$$c::$GetAcceptedAgreements$b__27_0(::GlobalNamespace::LegalAgreementTextAsset* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c::<GetAcceptedAgreements>b__27_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAcceptedAgreements>b__27_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<>c__DisplayClass26_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass26_0.hpp"
// Including type: PlayFab.PlayFabError
#include "PlayFab/PlayFabError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String result
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::dyn_result() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::dyn_result");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "result"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<>c__DisplayClass26_0.<GetTitleDataAsync>b__0
void GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::$GetTitleDataAsync$b__0(::StringW res) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::<GetTitleDataAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetTitleDataAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(res)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, res);
}
// Autogenerated method: LegalAgreements/<>c__DisplayClass26_0.<GetTitleDataAsync>b__1
void GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::$GetTitleDataAsync$b__1(::PlayFab::PlayFabError* err) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0::<GetTitleDataAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetTitleDataAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(err)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, err);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<>c__DisplayClass27_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass27_0.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: PlayFab.PlayFabError
#include "PlayFab/PlayFabError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,System.String> returnValue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0::dyn_returnValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0::dyn_returnValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "returnValue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<>c__DisplayClass27_0.<GetAcceptedAgreements>b__1
void GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0::$GetAcceptedAgreements$b__1(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0::<GetAcceptedAgreements>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAcceptedAgreements>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: LegalAgreements/<>c__DisplayClass27_0.<GetAcceptedAgreements>b__2
void GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0::$GetAcceptedAgreements$b__2(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0::<GetAcceptedAgreements>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAcceptedAgreements>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<>c__DisplayClass28_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass28_0.hpp"
// Including type: PlayFab.CloudScriptModels.ExecuteFunctionResult
#include "PlayFab/CloudScriptModels/ExecuteFunctionResult.hpp"
// Including type: PlayFab.PlayFabError
#include "PlayFab/PlayFabError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<>c__DisplayClass28_0.<SubmitAcceptedAgreements>b__0
void GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::$SubmitAcceptedAgreements$b__0(::PlayFab::CloudScriptModels::ExecuteFunctionResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::<SubmitAcceptedAgreements>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SubmitAcceptedAgreements>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: LegalAgreements/<>c__DisplayClass28_0.<SubmitAcceptedAgreements>b__1
void GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::$SubmitAcceptedAgreements$b__1(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0::<SubmitAcceptedAgreements>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SubmitAcceptedAgreements>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<FadeBackgroundColor>d__25
#include "GlobalNamespace/LegalAgreements_-FadeBackgroundColor-d__25.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegalAgreements <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements*& GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreements**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single time
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_time");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color targetColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_targetColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_targetColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <t>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$t$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$t$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<t>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color <startColor>5__3
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$startColor$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$startColor$5__3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startColor>5__3"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<FadeBackgroundColor>d__25.MoveNext
void GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements/<FadeBackgroundColor>d__25.SetStateMachine
void GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$FadeBackgroundColor$d__25), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<FadeGroup>d__24
#include "GlobalNamespace/LegalAgreements_-FadeGroup-d__24.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.CanvasGroup canvasGroup
[[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_canvasGroup");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canvasGroup"))->offset;
  return *reinterpret_cast<::UnityEngine::CanvasGroup**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single time
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_time");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single finalAlpha
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_finalAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_finalAlpha");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "finalAlpha"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <t>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$t$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$t$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<t>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <startAlpha>5__3
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$startAlpha$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$startAlpha$5__3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startAlpha>5__3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<FadeGroup>d__24.MoveNext
void GlobalNamespace::LegalAgreements::$FadeGroup$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$FadeGroup$d__24), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements/<FadeGroup>d__24.SetStateMachine
void GlobalNamespace::LegalAgreements::$FadeGroup$d__24::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$FadeGroup$d__24::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$FadeGroup$d__24), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<GetAcceptedAgreements>d__27
#include "GlobalNamespace/LegalAgreements_-GetAcceptedAgreements-d__27.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: LegalAgreementTextAsset
#include "GlobalNamespace/LegalAgreementTextAsset.hpp"
// Including type: LegalAgreements/<>c__DisplayClass27_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass27_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Collections.Generic.Dictionary`2<System.String,System.String>> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>& GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegalAgreementTextAsset[] agreements
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>& GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_agreements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_agreements");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "agreements"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreements/<>c__DisplayClass27_0 <>8__1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0*& GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_$$8__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_$$8__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>8__1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreements::$$c__DisplayClass27_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<GetAcceptedAgreements>d__27.MoveNext
void GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements/<GetAcceptedAgreements>d__27.SetStateMachine
void GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$GetAcceptedAgreements$d__27), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<GetTitleDataAsync>d__26
#include "GlobalNamespace/LegalAgreements_-GetTitleDataAsync-d__26.hpp"
// Including type: LegalAgreements/<>c__DisplayClass26_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass26_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.String> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::StringW>& GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String key
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_key() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_key");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "key"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreements/<>c__DisplayClass26_0 <>8__1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0*& GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_$$8__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_$$8__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>8__1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreements::$$c__DisplayClass26_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<GetTitleDataAsync>d__26.MoveNext
void GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements/<GetTitleDataAsync>d__26.SetStateMachine
void GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$GetTitleDataAsync$d__26), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<Start>d__20
#include "GlobalNamespace/LegalAgreements_-Start-d__20.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: LegalAgreementTextAsset
#include "GlobalNamespace/LegalAgreementTextAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncVoidMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegalAgreements <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements*& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreements**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <versionMismatch>5__2
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$versionMismatch$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$versionMismatch$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<versionMismatch>5__2"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.String,System.String> <agreementResults>5__3
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$agreementResults$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$agreementResults$5__3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<agreementResults>5__3"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<System.Collections.Generic.Dictionary`2<System.String,System.String>> <>u__2
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__2"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreementTextAsset[] <>7__wrap3
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$7__wrap3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$7__wrap3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap3"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LegalAgreementTextAsset*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>7__wrap4
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$7__wrap4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$7__wrap4");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap4"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreementTextAsset <screen>5__6
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreementTextAsset*& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$screen$5__6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$screen$5__6");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<screen>5__6"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreementTextAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <latestVersion>5__7
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$latestVersion$5__7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$latestVersion$5__7");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<latestVersion>5__7"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<System.String> <>u__3
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::StringW>& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__3"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter <>u__4
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__4");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__4"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<System.Boolean> <>u__5
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<bool>& GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::dyn_$$u__5");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__5"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<Start>d__20.MoveNext
void GlobalNamespace::LegalAgreements::$Start$d__20::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$Start$d__20), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements/<Start>d__20.SetStateMachine
void GlobalNamespace::LegalAgreements::$Start$d__20::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$Start$d__20::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$Start$d__20), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<SubmitAcceptedAgreements>d__28
#include "GlobalNamespace/LegalAgreements_-SubmitAcceptedAgreements-d__28.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: LegalAgreements/<>c__DisplayClass28_0
#include "GlobalNamespace/LegalAgreements_--c__DisplayClass28_0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<System.String,System.String> agreements
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_agreements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_agreements");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "agreements"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegalAgreements/<>c__DisplayClass28_0 <>8__1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0*& GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_$$8__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_$$8__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>8__1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreements::$$c__DisplayClass28_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<SubmitAcceptedAgreements>d__28.MoveNext
void GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements/<SubmitAcceptedAgreements>d__28.SetStateMachine
void GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$SubmitAcceptedAgreements$d__28), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<UpdateText>d__23
#include "GlobalNamespace/LegalAgreements_-UpdateText-d__23.hpp"
// Including type: LegalAgreementTextAsset
#include "GlobalNamespace/LegalAgreementTextAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Boolean> <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<bool>& GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegalAgreements <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements*& GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreements**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegalAgreementTextAsset asset
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreementTextAsset*& GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_asset");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "asset"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreementTextAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String version
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_version");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "version"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<System.Boolean> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<bool>& GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$UpdateText$d__23::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<UpdateText>d__23.MoveNext
void GlobalNamespace::LegalAgreements::$UpdateText$d__23::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$UpdateText$d__23::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$UpdateText$d__23), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements/<UpdateText>d__23.SetStateMachine
void GlobalNamespace::LegalAgreements::$UpdateText$d__23::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$UpdateText$d__23::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$UpdateText$d__23), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreements/<WaitForAcknowledgement>d__22
#include "GlobalNamespace/LegalAgreements_-WaitForAcknowledgement-d__22.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegalAgreements <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegalAgreements*& GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegalAgreements**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <progress>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$progress$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$progress$5__2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<progress>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.YieldAwaitable/YieldAwaiter <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter& GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::YieldAwaitable::YieldAwaiter*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegalAgreements/<WaitForAcknowledgement>d__22.MoveNext
void GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegalAgreements/<WaitForAcknowledgement>d__22.SetStateMachine
void GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::LegalAgreements::$WaitForAcknowledgement$d__22), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegalAgreementTextAsset
#include "GlobalNamespace/LegalAgreementTextAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String title
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreementTextAsset::dyn_title() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementTextAsset::dyn_title");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "title"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String playFabKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreementTextAsset::dyn_playFabKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementTextAsset::dyn_playFabKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playFabKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String latestVersionKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreementTextAsset::dyn_latestVersionKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementTextAsset::dyn_latestVersionKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "latestVersionKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String errorMessage
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::LegalAgreementTextAsset::dyn_errorMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegalAgreementTextAsset::dyn_errorMessage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "errorMessage"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LightningManager
#include "GlobalNamespace/LightningManager.hpp"
// Including type: LightningManager/<LightningEffectRunner>d__19
#include "GlobalNamespace/LightningManager_-LightningEffectRunner-d__19.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 lightMapIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightningManager::dyn_lightMapIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_lightMapIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightMapIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minTimeBetweenFlashes
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightningManager::dyn_minTimeBetweenFlashes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_minTimeBetweenFlashes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minTimeBetweenFlashes"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxTimeBetweenFlashes
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightningManager::dyn_maxTimeBetweenFlashes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_maxTimeBetweenFlashes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxTimeBetweenFlashes"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single flashFadeInDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightningManager::dyn_flashFadeInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_flashFadeInDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashFadeInDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single flashHoldDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightningManager::dyn_flashHoldDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_flashHoldDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashHoldDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single flashFadeOutDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightningManager::dyn_flashFadeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_flashFadeOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flashFadeOutDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource lightningAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::LightningManager::dyn_lightningAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_lightningAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightningAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SRand rng
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SRand& GlobalNamespace::LightningManager::dyn_rng() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_rng");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rng"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SRand*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 currentHourlySeed
[[deprecated("Use field access instead!")]] int64_t& GlobalNamespace::LightningManager::dyn_currentHourlySeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_currentHourlySeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentHourlySeed"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Single> lightningTimestampsRealtime
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& GlobalNamespace::LightningManager::dyn_lightningTimestampsRealtime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_lightningTimestampsRealtime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightningTimestampsRealtime"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 nextLightningTimestampIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightningManager::dyn_nextLightningTimestampIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_nextLightningTimestampIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextLightningTimestampIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip regularLightning
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::LightningManager::dyn_regularLightning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_regularLightning");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "regularLightning"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip muffledLightning
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::LightningManager::dyn_muffledLightning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_muffledLightning");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "muffledLightning"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine lightningRunner
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& GlobalNamespace::LightningManager::dyn_lightningRunner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::dyn_lightningRunner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lightningRunner"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightningManager.Start
void GlobalNamespace::LightningManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningManager.OnTimeChanged
void GlobalNamespace::LightningManager::OnTimeChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::OnTimeChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTimeChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningManager.GetHourStart
void GlobalNamespace::LightningManager::GetHourStart(ByRef<int64_t> seed, ByRef<float> timestampRealtime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::GetHourStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHourStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(seed), byref(timestampRealtime));
}
// Autogenerated method: LightningManager.InitializeRng
void GlobalNamespace::LightningManager::InitializeRng() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::InitializeRng");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeRng", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningManager.DoLightningStrike
void GlobalNamespace::LightningManager::DoLightningStrike() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::DoLightningStrike");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoLightningStrike", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningManager.LightningEffectRunner
::System::Collections::IEnumerator* GlobalNamespace::LightningManager::LightningEffectRunner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::LightningEffectRunner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LightningEffectRunner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightningManager/<LightningEffectRunner>d__19
#include "GlobalNamespace/LightningManager_-LightningEffectRunner-d__19.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LightningManager <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightningManager*& GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightningManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightningManager/<LightningEffectRunner>d__19.System.IDisposable.Dispose
void GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningManager/<LightningEffectRunner>d__19.MoveNext
bool GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LightningManager/<LightningEffectRunner>d__19.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LightningManager/<LightningEffectRunner>d__19.System.Collections.IEnumerator.Reset
void GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningManager/<LightningEffectRunner>d__19.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LightningManager::$LightningEffectRunner$d__19*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ForceVolume
#include "GlobalNamespace/ForceVolume.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean scaleWithSize
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ForceVolume::dyn_scaleWithSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_scaleWithSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleWithSize"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single accel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ForceVolume::dyn_accel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_accel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxDepth
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ForceVolume::dyn_maxDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_maxDepth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDepth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ForceVolume::dyn_maxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_maxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disableGrip
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ForceVolume::dyn_disableGrip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_disableGrip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableGrip"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean dampenLateralVelocity
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ForceVolume::dyn_dampenLateralVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_dampenLateralVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dampenLateralVelocity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single dampenXVelPerc
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ForceVolume::dyn_dampenXVelPerc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_dampenXVelPerc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dampenXVelPerc"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single dampenZVelPerc
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ForceVolume::dyn_dampenZVelPerc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_dampenZVelPerc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dampenZVelPerc"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean applyPullToCenterAcceleration
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ForceVolume::dyn_applyPullToCenterAcceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_applyPullToCenterAcceleration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "applyPullToCenterAcceleration"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pullToCenterAccel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ForceVolume::dyn_pullToCenterAccel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_pullToCenterAccel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pullToCenterAccel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pullToCenterMaxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ForceVolume::dyn_pullToCenterMaxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_pullToCenterMaxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pullToCenterMaxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pullTOCenterMinDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ForceVolume::dyn_pullTOCenterMinDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_pullTOCenterMinDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pullTOCenterMinDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider volume
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::ForceVolume::dyn_volume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_volume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volume"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip enterClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ForceVolume::dyn_enterClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_enterClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enterClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip exitClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ForceVolume::dyn_exitClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_exitClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "exitClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip loopClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ForceVolume::dyn_loopClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_loopClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip loopCresendoClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ForceVolume::dyn_loopCresendoClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_loopCresendoClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loopCresendoClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::ForceVolume::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 enterPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ForceVolume::dyn_enterPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_enterPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enterPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ForceVolume/AudioState audioState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ForceVolume::AudioState& GlobalNamespace::ForceVolume::dyn_audioState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::dyn_audioState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ForceVolume::AudioState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ForceVolume.Awake
void GlobalNamespace::ForceVolume::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ForceVolume.LateUpdate
void GlobalNamespace::ForceVolume::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ForceVolume.TriggerFilter
bool GlobalNamespace::ForceVolume::TriggerFilter(::UnityEngine::Collider* other, ByRef<::UnityEngine::Rigidbody*> rb, ByRef<::UnityEngine::Transform*> xf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::TriggerFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Rigidbody*&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Transform*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other, byref(rb), byref(xf));
}
// Autogenerated method: ForceVolume.OnTriggerEnter
void GlobalNamespace::ForceVolume::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: ForceVolume.OnTriggerExit
void GlobalNamespace::ForceVolume::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: ForceVolume.OnTriggerStay
void GlobalNamespace::ForceVolume::OnTriggerStay(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: ForceVolume.OnDrawGizmosSelected
void GlobalNamespace::ForceVolume::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ForceVolume/AudioState
#include "GlobalNamespace/ForceVolume.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ForceVolume/AudioState None
::GlobalNamespace::ForceVolume::AudioState GlobalNamespace::ForceVolume::AudioState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ForceVolume::AudioState>("", "ForceVolume/AudioState", "None"));
}
// Autogenerated static field setter
// Set static field: static public ForceVolume/AudioState None
void GlobalNamespace::ForceVolume::AudioState::_set_None(::GlobalNamespace::ForceVolume::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ForceVolume/AudioState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public ForceVolume/AudioState Enter
::GlobalNamespace::ForceVolume::AudioState GlobalNamespace::ForceVolume::AudioState::_get_Enter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_get_Enter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ForceVolume::AudioState>("", "ForceVolume/AudioState", "Enter"));
}
// Autogenerated static field setter
// Set static field: static public ForceVolume/AudioState Enter
void GlobalNamespace::ForceVolume::AudioState::_set_Enter(::GlobalNamespace::ForceVolume::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_set_Enter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ForceVolume/AudioState", "Enter", value));
}
// Autogenerated static field getter
// Get static field: static public ForceVolume/AudioState Crescendo
::GlobalNamespace::ForceVolume::AudioState GlobalNamespace::ForceVolume::AudioState::_get_Crescendo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_get_Crescendo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ForceVolume::AudioState>("", "ForceVolume/AudioState", "Crescendo"));
}
// Autogenerated static field setter
// Set static field: static public ForceVolume/AudioState Crescendo
void GlobalNamespace::ForceVolume::AudioState::_set_Crescendo(::GlobalNamespace::ForceVolume::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_set_Crescendo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ForceVolume/AudioState", "Crescendo", value));
}
// Autogenerated static field getter
// Get static field: static public ForceVolume/AudioState Loop
::GlobalNamespace::ForceVolume::AudioState GlobalNamespace::ForceVolume::AudioState::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ForceVolume::AudioState>("", "ForceVolume/AudioState", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public ForceVolume/AudioState Loop
void GlobalNamespace::ForceVolume::AudioState::_set_Loop(::GlobalNamespace::ForceVolume::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ForceVolume/AudioState", "Loop", value));
}
// Autogenerated static field getter
// Get static field: static public ForceVolume/AudioState Exit
::GlobalNamespace::ForceVolume::AudioState GlobalNamespace::ForceVolume::AudioState::_get_Exit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_get_Exit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ForceVolume::AudioState>("", "ForceVolume/AudioState", "Exit"));
}
// Autogenerated static field setter
// Set static field: static public ForceVolume/AudioState Exit
void GlobalNamespace::ForceVolume::AudioState::_set_Exit(::GlobalNamespace::ForceVolume::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::_set_Exit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ForceVolume/AudioState", "Exit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ForceVolume::AudioState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ForceVolume::AudioState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaFriendCollider
#include "GlobalNamespace/GorillaFriendCollider.hpp"
// Including type: GorillaFriendCollider/<UpdatePlayersInSphere>d__12
#include "GlobalNamespace/GorillaFriendCollider_-UpdatePlayersInSphere-d__12.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.CapsuleCollider
#include "UnityEngine/CapsuleCollider.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.String> playerIDsCurrentlyTouching
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::GorillaFriendCollider::dyn_playerIDsCurrentlyTouching() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_playerIDsCurrentlyTouching");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerIDsCurrentlyTouching"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.CapsuleCollider thisCapsule
[[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& GlobalNamespace::GorillaFriendCollider::dyn_thisCapsule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_thisCapsule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thisCapsule"))->offset;
  return *reinterpret_cast<::UnityEngine::CapsuleCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] myAllowedMapsToJoin
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::GorillaFriendCollider::dyn_myAllowedMapsToJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_myAllowedMapsToJoin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myAllowedMapsToJoin"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Collider[] overlapColliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::GorillaFriendCollider::dyn_overlapColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_overlapColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlapColliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 tagAndBodyLayerMask
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaFriendCollider::dyn_tagAndBodyLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_tagAndBodyLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tagAndBodyLayerMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single jiggleAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GorillaFriendCollider::dyn_jiggleAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_jiggleAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jiggleAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider otherCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::GorillaFriendCollider::dyn_otherCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_otherCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "otherCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject otherColliderGO
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaFriendCollider::dyn_otherColliderGO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_otherColliderGO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "otherColliderGO"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig collidingRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::GorillaFriendCollider::dyn_collidingRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_collidingRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidingRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 collisions
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaFriendCollider::dyn_collisions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::dyn_collisions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisions"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaFriendCollider.Awake
void GlobalNamespace::GorillaFriendCollider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaFriendCollider.AddUserID
void GlobalNamespace::GorillaFriendCollider::AddUserID(ByRef<::StringW> userID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::AddUserID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddUserID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userID)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(userID));
}
// Autogenerated method: GorillaFriendCollider.UpdatePlayersInSphere
::System::Collections::IEnumerator* GlobalNamespace::GorillaFriendCollider::UpdatePlayersInSphere() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::UpdatePlayersInSphere");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePlayersInSphere", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GorillaFriendCollider/<UpdatePlayersInSphere>d__12
#include "GlobalNamespace/GorillaFriendCollider_-UpdatePlayersInSphere-d__12.hpp"
// Including type: UnityEngine.WaitForSeconds
#include "UnityEngine/WaitForSeconds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaFriendCollider <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaFriendCollider*& GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaFriendCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.WaitForSeconds <wait>5__2
[[deprecated("Use field access instead!")]] ::UnityEngine::WaitForSeconds*& GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::dyn_$wait$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::dyn_$wait$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<wait>5__2"))->offset;
  return *reinterpret_cast<::UnityEngine::WaitForSeconds**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaFriendCollider/<UpdatePlayersInSphere>d__12.System.IDisposable.Dispose
void GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaFriendCollider/<UpdatePlayersInSphere>d__12.MoveNext
bool GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GorillaFriendCollider/<UpdatePlayersInSphere>d__12.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaFriendCollider/<UpdatePlayersInSphere>d__12.System.Collections.IEnumerator.Reset
void GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaFriendCollider/<UpdatePlayersInSphere>d__12.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__12*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaNetworkLeaveTutorialTrigger
#include "GlobalNamespace/GorillaNetworkLeaveTutorialTrigger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GorillaNetworkLeaveTutorialTrigger.OnBoxTriggered
void GlobalNamespace::GorillaNetworkLeaveTutorialTrigger::OnBoxTriggered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkLeaveTutorialTrigger::OnBoxTriggered");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaTriggerBox*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaNetworkPublicTestJoin2
#include "GlobalNamespace/GorillaNetworkPublicTestJoin2.hpp"
// Including type: GorillaNetworkPublicTestJoin2/<GracePeriod>d__17
#include "GlobalNamespace/GorillaNetworkPublicTestJoin2_-GracePeriod-d__17.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: GorillaNetworking.PhotonNetworkController
#include "GorillaNetworking/PhotonNetworkController.hpp"
// Including type: GorillaLevelScreen
#include "GlobalNamespace/GorillaLevelScreen.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] makeSureThisIsDisabled
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_makeSureThisIsDisabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_makeSureThisIsDisabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "makeSureThisIsDisabled"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] makeSureThisIsEnabled
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_makeSureThisIsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_makeSureThisIsEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "makeSureThisIsEnabled"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String gameModeName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_gameModeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_gameModeName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameModeName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.PhotonNetworkController photonNetworkController
[[deprecated("Use field access instead!")]] ::GorillaNetworking::PhotonNetworkController*& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_photonNetworkController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_photonNetworkController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "photonNetworkController"))->offset;
  return *reinterpret_cast<::GorillaNetworking::PhotonNetworkController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String componentTypeToAdd
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_componentTypeToAdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_componentTypeToAdd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentTypeToAdd"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject componentTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_componentTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_componentTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaLevelScreen[] joinScreens
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_joinScreens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_joinScreens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joinScreens"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaLevelScreen*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaLevelScreen[] leaveScreens
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_leaveScreens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_leaveScreens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leaveScreens"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaLevelScreen*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform tosPition
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_tosPition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_tosPition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tosPition"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform othsTosPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_othsTosPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_othsTosPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "othsTosPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Pun.PhotonView fotVew
[[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_fotVew() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_fotVew");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fotVew"))->offset;
  return *reinterpret_cast<::Photon::Pun::PhotonView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 count
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean waiting
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_waiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_waiting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waiting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_lastPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_lastPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig tempRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_tempRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::dyn_tempRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaNetworkPublicTestJoin2.Awake
void GlobalNamespace::GorillaNetworkPublicTestJoin2::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestJoin2.LateUpdate
void GlobalNamespace::GorillaNetworkPublicTestJoin2::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestJoin2.GracePeriod
::System::Collections::IEnumerator* GlobalNamespace::GorillaNetworkPublicTestJoin2::GracePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::GracePeriod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GracePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GorillaNetworkPublicTestJoin2/<GracePeriod>d__17
#include "GlobalNamespace/GorillaNetworkPublicTestJoin2_-GracePeriod-d__17.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworkPublicTestJoin2 <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaNetworkPublicTestJoin2*& GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaNetworkPublicTestJoin2**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaNetworkPublicTestJoin2/<GracePeriod>d__17.System.IDisposable.Dispose
void GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestJoin2/<GracePeriod>d__17.MoveNext
bool GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestJoin2/<GracePeriod>d__17.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestJoin2/<GracePeriod>d__17.System.Collections.IEnumerator.Reset
void GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestJoin2/<GracePeriod>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestJoin2::$GracePeriod$d__17*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaNetworkPublicTestsJoin
#include "GlobalNamespace/GorillaNetworkPublicTestsJoin.hpp"
// Including type: GorillaNetworkPublicTestsJoin/<GracePeriod>d__17
#include "GlobalNamespace/GorillaNetworkPublicTestsJoin_-GracePeriod-d__17.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: GorillaNetworking.PhotonNetworkController
#include "GorillaNetworking/PhotonNetworkController.hpp"
// Including type: GorillaLevelScreen
#include "GlobalNamespace/GorillaLevelScreen.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] makeSureThisIsDisabled
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_makeSureThisIsDisabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_makeSureThisIsDisabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "makeSureThisIsDisabled"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] makeSureThisIsEnabled
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_makeSureThisIsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_makeSureThisIsEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "makeSureThisIsEnabled"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String gameModeName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_gameModeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_gameModeName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameModeName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.PhotonNetworkController photonNetworkController
[[deprecated("Use field access instead!")]] ::GorillaNetworking::PhotonNetworkController*& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_photonNetworkController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_photonNetworkController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "photonNetworkController"))->offset;
  return *reinterpret_cast<::GorillaNetworking::PhotonNetworkController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String componentTypeToAdd
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_componentTypeToAdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_componentTypeToAdd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentTypeToAdd"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject componentTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_componentTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_componentTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "componentTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaLevelScreen[] joinScreens
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_joinScreens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_joinScreens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "joinScreens"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaLevelScreen*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaLevelScreen[] leaveScreens
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_leaveScreens() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_leaveScreens");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leaveScreens"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GorillaLevelScreen*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform tosPition
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_tosPition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_tosPition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tosPition"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform othsTosPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_othsTosPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_othsTosPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "othsTosPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Pun.PhotonView fotVew
[[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_fotVew() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_fotVew");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fotVew"))->offset;
  return *reinterpret_cast<::Photon::Pun::PhotonView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 count
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean waiting
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_waiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_waiting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waiting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_lastPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_lastPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig tempRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_tempRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::dyn_tempRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaNetworkPublicTestsJoin.Awake
void GlobalNamespace::GorillaNetworkPublicTestsJoin::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestsJoin.LateUpdate
void GlobalNamespace::GorillaNetworkPublicTestsJoin::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestsJoin.GracePeriod
::System::Collections::IEnumerator* GlobalNamespace::GorillaNetworkPublicTestsJoin::GracePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::GracePeriod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GracePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GorillaNetworkPublicTestsJoin/<GracePeriod>d__17
#include "GlobalNamespace/GorillaNetworkPublicTestsJoin_-GracePeriod-d__17.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworkPublicTestsJoin <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaNetworkPublicTestsJoin*& GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaNetworkPublicTestsJoin**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaNetworkPublicTestsJoin/<GracePeriod>d__17.System.IDisposable.Dispose
void GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestsJoin/<GracePeriod>d__17.MoveNext
bool GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestsJoin/<GracePeriod>d__17.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestsJoin/<GracePeriod>d__17.System.Collections.IEnumerator.Reset
void GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaNetworkPublicTestsJoin/<GracePeriod>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaNetworkPublicTestsJoin::$GracePeriod$d__17*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MetaAuthenticator
#include "GlobalNamespace/MetaAuthenticator.hpp"
// Including type: MetaAuthenticator/<>c
#include "GlobalNamespace/MetaAuthenticator_--c.hpp"
// Including type: Oculus.Platform.Message
#include "Oculus/Platform/Message.hpp"
// Including type: MothershipError
#include "GlobalNamespace/MothershipError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 maxMetaLoginAttempts
int GlobalNamespace::MetaAuthenticator::_get_maxMetaLoginAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::_get_maxMetaLoginAttempts");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MetaAuthenticator", "maxMetaLoginAttempts"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 maxMetaLoginAttempts
void GlobalNamespace::MetaAuthenticator::_set_maxMetaLoginAttempts(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::_set_maxMetaLoginAttempts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MetaAuthenticator", "maxMetaLoginAttempts", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 metaLoginAttempts
[[deprecated("Use field access instead!")]] int& GlobalNamespace::MetaAuthenticator::dyn_metaLoginAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::dyn_metaLoginAttempts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "metaLoginAttempts"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String oculusId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MetaAuthenticator::dyn_oculusId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::dyn_oculusId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oculusId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MetaAuthenticator.StartMetaLogIn
void GlobalNamespace::MetaAuthenticator::StartMetaLogIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::StartMetaLogIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartMetaLogIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MetaAuthenticator.OculusEntitlementCallback
void GlobalNamespace::MetaAuthenticator::OculusEntitlementCallback(::Oculus::Platform::Message* msg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::OculusEntitlementCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OculusEntitlementCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, msg);
}
// Autogenerated method: MetaAuthenticator.GetOculusUserCallback
void GlobalNamespace::MetaAuthenticator::GetOculusUserCallback(::Oculus::Platform::Message* msg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::GetOculusUserCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOculusUserCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, msg);
}
// Autogenerated method: MetaAuthenticator.GetNonceForMothershipCallback
void GlobalNamespace::MetaAuthenticator::GetNonceForMothershipCallback(::Oculus::Platform::Message* msg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::GetNonceForMothershipCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNonceForMothershipCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(msg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, msg);
}
// Autogenerated method: MetaAuthenticator.MetaLoginFail
void GlobalNamespace::MetaAuthenticator::MetaLoginFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::MetaLoginFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MetaLoginFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MetaAuthenticator.QuitApplication
void GlobalNamespace::MetaAuthenticator::QuitApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::QuitApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QuitApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MetaAuthenticator.<GetNonceForMothershipCallback>b__6_1
void GlobalNamespace::MetaAuthenticator::$GetNonceForMothershipCallback$b__6_1(::GlobalNamespace::MothershipError* Error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::<GetNonceForMothershipCallback>b__6_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetNonceForMothershipCallback>b__6_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, Error);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MetaAuthenticator/<>c
#include "GlobalNamespace/MetaAuthenticator_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: LoginResponse
#include "GlobalNamespace/LoginResponse.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MetaAuthenticator/<>c <>9
::GlobalNamespace::MetaAuthenticator::$$c* GlobalNamespace::MetaAuthenticator::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::MetaAuthenticator::$$c*>("", "MetaAuthenticator/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MetaAuthenticator/<>c <>9
void GlobalNamespace::MetaAuthenticator::$$c::_set_$$9(::GlobalNamespace::MetaAuthenticator::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MetaAuthenticator/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<LoginResponse> <>9__6_0
::System::Action_1<::GlobalNamespace::LoginResponse*>* GlobalNamespace::MetaAuthenticator::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::LoginResponse*>*>("", "MetaAuthenticator/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<LoginResponse> <>9__6_0
void GlobalNamespace::MetaAuthenticator::$$c::_set_$$9__6_0(::System::Action_1<::GlobalNamespace::LoginResponse*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MetaAuthenticator/<>c", "<>9__6_0", value)));
}
// Autogenerated method: MetaAuthenticator/<>c..cctor
void GlobalNamespace::MetaAuthenticator::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MetaAuthenticator/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MetaAuthenticator/<>c.<GetNonceForMothershipCallback>b__6_0
void GlobalNamespace::MetaAuthenticator::$$c::$GetNonceForMothershipCallback$b__6_0(::GlobalNamespace::LoginResponse* LoginResponse) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MetaAuthenticator::$$c::<GetNonceForMothershipCallback>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetNonceForMothershipCallback>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(LoginResponse)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, LoginResponse);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MothershipAuthenticator
#include "GlobalNamespace/MothershipAuthenticator.hpp"
// Including type: MothershipAuthenticator/<>c
#include "GlobalNamespace/MothershipAuthenticator_--c.hpp"
// Including type: MetaAuthenticator
#include "GlobalNamespace/MetaAuthenticator.hpp"
// Including type: GorillaNetworking.GorillaComputer
#include "GorillaNetworking/GorillaComputer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MothershipAuthenticator Instance
::GlobalNamespace::MothershipAuthenticator* GlobalNamespace::MothershipAuthenticator::_get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::_get_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MothershipAuthenticator*>("", "MothershipAuthenticator", "Instance"));
}
// Autogenerated static field setter
// Set static field: static public MothershipAuthenticator Instance
void GlobalNamespace::MothershipAuthenticator::_set_Instance(::GlobalNamespace::MothershipAuthenticator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::_set_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MothershipAuthenticator", "Instance", value));
}
// Autogenerated instance field getter
// Get instance field: public MetaAuthenticator MetaAuthenticator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MetaAuthenticator*& GlobalNamespace::MothershipAuthenticator::dyn_MetaAuthenticator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::dyn_MetaAuthenticator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MetaAuthenticator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MetaAuthenticator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String TestNickname
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MothershipAuthenticator::dyn_TestNickname() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::dyn_TestNickname");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TestNickname"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String TestAccountId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MothershipAuthenticator::dyn_TestAccountId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::dyn_TestAccountId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TestAccountId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String loggedInUserId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::MothershipAuthenticator::dyn_loggedInUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::dyn_loggedInUserId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loggedInUserId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MothershipAuthenticator.get_gorillaComputer
::GorillaNetworking::GorillaComputer* GlobalNamespace::MothershipAuthenticator::get_gorillaComputer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::get_gorillaComputer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gorillaComputer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GorillaNetworking::GorillaComputer*, false>(this, ___internal__method);
}
// Autogenerated method: MothershipAuthenticator.Awake
void GlobalNamespace::MothershipAuthenticator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MothershipAuthenticator.BeginLoginFlow
void GlobalNamespace::MothershipAuthenticator::BeginLoginFlow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::BeginLoginFlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginLoginFlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MothershipAuthenticator.LoginWithInsecure
void GlobalNamespace::MothershipAuthenticator::LoginWithInsecure() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::LoginWithInsecure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoginWithInsecure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MothershipAuthenticator.Update
void GlobalNamespace::MothershipAuthenticator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MothershipAuthenticator.LogInWithSteam
void GlobalNamespace::MothershipAuthenticator::LogInWithSteam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::LogInWithSteam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogInWithSteam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MothershipAuthenticator.<Awake>b__7_0
void GlobalNamespace::MothershipAuthenticator::$Awake$b__7_0(::StringW id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::<Awake>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MothershipAuthenticator/<>c
#include "GlobalNamespace/MothershipAuthenticator_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: LoginResponse
#include "GlobalNamespace/LoginResponse.hpp"
// Including type: MothershipError
#include "GlobalNamespace/MothershipError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MothershipAuthenticator/<>c <>9
::GlobalNamespace::MothershipAuthenticator::$$c* GlobalNamespace::MothershipAuthenticator::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::MothershipAuthenticator::$$c*>("", "MothershipAuthenticator/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MothershipAuthenticator/<>c <>9
void GlobalNamespace::MothershipAuthenticator::$$c::_set_$$9(::GlobalNamespace::MothershipAuthenticator::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MothershipAuthenticator/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<LoginResponse> <>9__9_0
::System::Action_1<::GlobalNamespace::LoginResponse*>* GlobalNamespace::MothershipAuthenticator::$$c::_get_$$9__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::_get_$$9__9_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::LoginResponse*>*>("", "MothershipAuthenticator/<>c", "<>9__9_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<LoginResponse> <>9__9_0
void GlobalNamespace::MothershipAuthenticator::$$c::_set_$$9__9_0(::System::Action_1<::GlobalNamespace::LoginResponse*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::_set_$$9__9_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MothershipAuthenticator/<>c", "<>9__9_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<MothershipError> <>9__9_1
::System::Action_1<::GlobalNamespace::MothershipError*>* GlobalNamespace::MothershipAuthenticator::$$c::_get_$$9__9_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::_get_$$9__9_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::MothershipError*>*>("", "MothershipAuthenticator/<>c", "<>9__9_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<MothershipError> <>9__9_1
void GlobalNamespace::MothershipAuthenticator::$$c::_set_$$9__9_1(::System::Action_1<::GlobalNamespace::MothershipError*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::_set_$$9__9_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MothershipAuthenticator/<>c", "<>9__9_1", value)));
}
// Autogenerated method: MothershipAuthenticator/<>c..cctor
void GlobalNamespace::MothershipAuthenticator::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MothershipAuthenticator/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: MothershipAuthenticator/<>c.<LoginWithInsecure>b__9_0
void GlobalNamespace::MothershipAuthenticator::$$c::$LoginWithInsecure$b__9_0(::GlobalNamespace::LoginResponse* LoginResponse) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::<LoginWithInsecure>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LoginWithInsecure>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(LoginResponse)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, LoginResponse);
}
// Autogenerated method: MothershipAuthenticator/<>c.<LoginWithInsecure>b__9_1
void GlobalNamespace::MothershipAuthenticator::$$c::$LoginWithInsecure$b__9_1(::GlobalNamespace::MothershipError* MothershipError) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipAuthenticator::$$c::<LoginWithInsecure>b__9_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LoginWithInsecure>b__9_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(MothershipError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, MothershipError);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: OwnershipGaurdHandler
#include "GlobalNamespace/OwnershipGaurdHandler.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<Photon.Pun.PhotonView> gaurdedViews
::System::Collections::Generic::HashSet_1<::Photon::Pun::PhotonView*>* GlobalNamespace::OwnershipGaurdHandler::_get_gaurdedViews() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::_get_gaurdedViews");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::Photon::Pun::PhotonView*>*>("", "OwnershipGaurdHandler", "gaurdedViews"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<Photon.Pun.PhotonView> gaurdedViews
void GlobalNamespace::OwnershipGaurdHandler::_set_gaurdedViews(::System::Collections::Generic::HashSet_1<::Photon::Pun::PhotonView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::_set_gaurdedViews");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OwnershipGaurdHandler", "gaurdedViews", value));
}
// Autogenerated static field getter
// Get static field: static private readonly OwnershipGaurdHandler callbackInstance
::GlobalNamespace::OwnershipGaurdHandler* GlobalNamespace::OwnershipGaurdHandler::_get_callbackInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::_get_callbackInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OwnershipGaurdHandler*>("", "OwnershipGaurdHandler", "callbackInstance"));
}
// Autogenerated static field setter
// Set static field: static private readonly OwnershipGaurdHandler callbackInstance
void GlobalNamespace::OwnershipGaurdHandler::_set_callbackInstance(::GlobalNamespace::OwnershipGaurdHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::_set_callbackInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OwnershipGaurdHandler", "callbackInstance", value));
}
// Autogenerated method: OwnershipGaurdHandler..cctor
void GlobalNamespace::OwnershipGaurdHandler::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OwnershipGaurdHandler", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: OwnershipGaurdHandler.RegisterView
void GlobalNamespace::OwnershipGaurdHandler::RegisterView(::Photon::Pun::PhotonView* view) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::RegisterView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OwnershipGaurdHandler", "RegisterView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, view);
}
// Autogenerated method: OwnershipGaurdHandler.RegisterViews
void GlobalNamespace::OwnershipGaurdHandler::RegisterViews(::ArrayW<::Photon::Pun::PhotonView*> photonViews) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::RegisterViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OwnershipGaurdHandler", "RegisterViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(photonViews)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, photonViews);
}
// Autogenerated method: OwnershipGaurdHandler.RemoveView
void GlobalNamespace::OwnershipGaurdHandler::RemoveView(::Photon::Pun::PhotonView* view) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::RemoveView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OwnershipGaurdHandler", "RemoveView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, view);
}
// Autogenerated method: OwnershipGaurdHandler.RemoveViews
void GlobalNamespace::OwnershipGaurdHandler::RemoveViews(::ArrayW<::Photon::Pun::PhotonView*> photonViews) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::RemoveViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OwnershipGaurdHandler", "RemoveViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(photonViews)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, photonViews);
}
// Autogenerated method: OwnershipGaurdHandler.Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransfered
void GlobalNamespace::OwnershipGaurdHandler::Photon_Pun_IPunOwnershipCallbacks_OnOwnershipTransfered(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* previousOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransfered");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OwnershipGaurdHandler*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetView, previousOwner);
}
// Autogenerated method: OwnershipGaurdHandler.Photon.Pun.IPunOwnershipCallbacks.OnOwnershipRequest
void GlobalNamespace::OwnershipGaurdHandler::Photon_Pun_IPunOwnershipCallbacks_OnOwnershipRequest(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* requestingPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::Photon.Pun.IPunOwnershipCallbacks.OnOwnershipRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OwnershipGaurdHandler*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetView, requestingPlayer);
}
// Autogenerated method: OwnershipGaurdHandler.Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransferFailed
void GlobalNamespace::OwnershipGaurdHandler::Photon_Pun_IPunOwnershipCallbacks_OnOwnershipTransferFailed(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* senderOfFailedRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurdHandler::Photon.Pun.IPunOwnershipCallbacks.OnOwnershipTransferFailed");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::OwnershipGaurdHandler*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetView, senderOfFailedRequest);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: OwnershipGaurd
#include "GlobalNamespace/OwnershipGaurd.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Photon.Pun.PhotonView[] photonViews
[[deprecated("Use field access instead!")]] ::ArrayW<::Photon::Pun::PhotonView*>& GlobalNamespace::OwnershipGaurd::dyn_photonViews() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurd::dyn_photonViews");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "photonViews"))->offset;
  return *reinterpret_cast<::ArrayW<::Photon::Pun::PhotonView*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean autoRegisterAll
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OwnershipGaurd::dyn_autoRegisterAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurd::dyn_autoRegisterAll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoRegisterAll"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OwnershipGaurd.Start
void GlobalNamespace::OwnershipGaurd::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurd::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OwnershipGaurd.OnDestroy
void GlobalNamespace::OwnershipGaurd::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwnershipGaurd::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PhotonUserCache
#include "GlobalNamespace/PhotonUserCache.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Photon.Realtime.FriendInfo
#include "Photon/Realtime/FriendInfo.hpp"
// Including type: ExitGames.Client.Photon.Hashtable
#include "ExitGames/Client/Photon/Hashtable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PhotonUserCache.Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IInRoomCallbacks_OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newPlayer);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IMatchmakingCallbacks_OnJoinedRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IMatchmakingCallbacks_OnLeftRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IInRoomCallbacks_OnPlayerLeftRoom(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IMatchmakingCallbacks_OnCreateRoomFailed(int16_t returnCode, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, returnCode, message);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IMatchmakingCallbacks_OnJoinRoomFailed(int16_t returnCode, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, returnCode, message);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IMatchmakingCallbacks_OnCreatedRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IMatchmakingCallbacks.OnPreLeavingRoom
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IMatchmakingCallbacks_OnPreLeavingRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IMatchmakingCallbacks.OnPreLeavingRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 16));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IMatchmakingCallbacks_OnJoinRandomFailed(int16_t returnCode, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 14));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, returnCode, message);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IMatchmakingCallbacks_OnFriendListUpdate(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>* friendList) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, friendList);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IInRoomCallbacks_OnRoomPropertiesUpdate(::ExitGames::Client::Photon::Hashtable* changedProperties) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, changedProperties);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IInRoomCallbacks_OnPlayerPropertiesUpdate(::Photon::Realtime::Player* player, ::ExitGames::Client::Photon::Hashtable* changedProperties) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player, changedProperties);
}
// Autogenerated method: PhotonUserCache.Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched
void GlobalNamespace::PhotonUserCache::Photon_Realtime_IInRoomCallbacks_OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonUserCache::Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonUserCache*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newMasterClient);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PostVRRigPhysicsSynch
#include "GlobalNamespace/PostVRRigPhysicsSynch.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PostVRRigPhysicsSynch.LateUpdate
void GlobalNamespace::PostVRRigPhysicsSynch::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PostVRRigPhysicsSynch::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransformViewTeleportSerializer
#include "GlobalNamespace/TransformViewTeleportSerializer.hpp"
// Including type: Photon.Pun.PhotonTransformView
#include "Photon/Pun/PhotonTransformView.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean willTeleport
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransformViewTeleportSerializer::dyn_willTeleport() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformViewTeleportSerializer::dyn_willTeleport");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "willTeleport"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Pun.PhotonTransformView transformView
[[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonTransformView*& GlobalNamespace::TransformViewTeleportSerializer::dyn_transformView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformViewTeleportSerializer::dyn_transformView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformView"))->offset;
  return *reinterpret_cast<::Photon::Pun::PhotonTransformView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransformViewTeleportSerializer.Start
void GlobalNamespace::TransformViewTeleportSerializer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformViewTeleportSerializer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransformViewTeleportSerializer.SetWillTeleport
void GlobalNamespace::TransformViewTeleportSerializer::SetWillTeleport() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformViewTeleportSerializer::SetWillTeleport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWillTeleport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransformViewTeleportSerializer.OnPhotonSerializeView
void GlobalNamespace::TransformViewTeleportSerializer::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformViewTeleportSerializer::OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransformViewTeleportSerializer*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GliderHoldable
#include "GlobalNamespace/GliderHoldable.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: AverageVector3
#include "GlobalNamespace/AverageVector3.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: GliderHoldable/<ReenableOwnershipRequest>d__169
#include "GlobalNamespace/GliderHoldable_-ReenableOwnershipRequest-d__169.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: RequestableOwnershipGuard
#include "GlobalNamespace/RequestableOwnershipGuard.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single accelAveragingWindow
float GlobalNamespace::GliderHoldable::_get_accelAveragingWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::_get_accelAveragingWindow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GliderHoldable", "accelAveragingWindow"));
}
// Autogenerated static field setter
// Set static field: static private System.Single accelAveragingWindow
void GlobalNamespace::GliderHoldable::_set_accelAveragingWindow(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::_set_accelAveragingWindow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GliderHoldable", "accelAveragingWindow", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 pitchMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_pitchMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pitchMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 rollMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_rollMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rollMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rollMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pitchHalfLife
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_pitchHalfLife() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pitchHalfLife");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchHalfLife"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single yawHalfLife
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_yawHalfLife() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_yawHalfLife");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "yawHalfLife"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rollHalfLife
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_rollHalfLife() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rollHalfLife");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rollHalfLife"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single yawRateFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_yawRateFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_yawRateFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "yawRateFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single yawRateFactorRollOnly
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_yawRateFactorRollOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_yawRateFactorRollOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "yawRateFactorRollOnly"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 pitchVelocityTargetMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_pitchVelocityTargetMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pitchVelocityTargetMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchVelocityTargetMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 pitchVelocityRampTimeMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_pitchVelocityRampTimeMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pitchVelocityRampTimeMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchVelocityRampTimeMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pitchVelocityFollowRateAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_pitchVelocityFollowRateAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pitchVelocityFollowRateAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchVelocityFollowRateAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pitchVelocityFollowRateMagnitude
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_pitchVelocityFollowRateMagnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pitchVelocityFollowRateMagnitude");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchVelocityFollowRateMagnitude"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single yawVelocityFollowRateAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_yawVelocityFollowRateAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_yawVelocityFollowRateAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "yawVelocityFollowRateAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single yawVelocityFollowRateMagnitude
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_yawVelocityFollowRateMagnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_yawVelocityFollowRateMagnitude");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "yawVelocityFollowRateMagnitude"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve liftVsAttack
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::GliderHoldable::dyn_liftVsAttack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_liftVsAttack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "liftVsAttack"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve dragVsAttack
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::GliderHoldable::dyn_dragVsAttack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_dragVsAttack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dragVsAttack"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single attackDragFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_attackDragFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_attackDragFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attackDragFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve dragVsSpeed
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::GliderHoldable::dyn_dragVsSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_dragVsSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dragVsSpeed"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single dragVsSpeedMaxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_dragVsSpeedMaxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_dragVsSpeedMaxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dragVsSpeedMaxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single dragVsSpeedDragFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_dragVsSpeedDragFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_dragVsSpeedDragFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dragVsSpeedDragFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve liftIncreaseVsRoll
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::GliderHoldable::dyn_liftIncreaseVsRoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_liftIncreaseVsRoll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "liftIncreaseVsRoll"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single liftIncreaseVsRollMaxAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_liftIncreaseVsRollMaxAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_liftIncreaseVsRollMaxAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "liftIncreaseVsRollMaxAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single gravityCompensation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_gravityCompensation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_gravityCompensation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gravityCompensation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pullUpLiftBonus
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_pullUpLiftBonus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pullUpLiftBonus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pullUpLiftBonus"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pullUpLiftActivationVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_pullUpLiftActivationVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pullUpLiftActivationVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pullUpLiftActivationVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pullUpLiftActivationAcceleration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_pullUpLiftActivationAcceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pullUpLiftActivationAcceleration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pullUpLiftActivationAcceleration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single riderPosDirectPitchMax
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_riderPosDirectPitchMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_riderPosDirectPitchMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riderPosDirectPitchMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 riderPosRange
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_riderPosRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_riderPosRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riderPosRange"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single riderPosRangeOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_riderPosRangeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_riderPosRangeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riderPosRangeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 riderPosRangeNormalizedDeadzone
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_riderPosRangeNormalizedDeadzone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_riderPosRangeNormalizedDeadzone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riderPosRangeNormalizedDeadzone"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single holdRotationAngleMax
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_holdRotationAngleMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_holdRotationAngleMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdRotationAngleMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single oneHandHoldRotationRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_oneHandHoldRotationRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_oneHandHoldRotationRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oneHandHoldRotationRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 oneHandSimulatedHoldOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_oneHandSimulatedHoldOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_oneHandSimulatedHoldOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oneHandSimulatedHoldOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single oneHandPitchMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_oneHandPitchMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_oneHandPitchMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oneHandPitchMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single twoHandHoldRotationRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_twoHandHoldRotationRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_twoHandHoldRotationRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "twoHandHoldRotationRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean twoHandGliderInversionOnYawInsteadOfRoll
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_twoHandGliderInversionOnYawInsteadOfRoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_twoHandGliderInversionOnYawInsteadOfRoll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "twoHandGliderInversionOnYawInsteadOfRoll"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean setMaxHandSlipDuringFlight
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_setMaxHandSlipDuringFlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_setMaxHandSlipDuringFlight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setMaxHandSlipDuringFlight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxSlipOverrideSpeedThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_maxSlipOverrideSpeedThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_maxSlipOverrideSpeedThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSlipOverrideSpeedThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single subtlePlayerPitchFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerPitchFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single subtlePlayerPitchRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerPitchRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single subtlePlayerRollFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerRollFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single subtlePlayerRollRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerRollRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 subtlePlayerRotationSpeedRampMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_subtlePlayerRotationSpeedRampMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerRotationSpeedRampMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerRotationSpeedRampMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 subtlePlayerRollAccelMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollAccelMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollAccelMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerRollAccelMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 subtlePlayerPitchAccelMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchAccelMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchAccelMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerPitchAccelMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single accelSmoothingFollowRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_accelSmoothingFollowRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_accelSmoothingFollowRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accelSmoothingFollowRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single horizontalAccelSmoothingFollowRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_horizontalAccelSmoothingFollowRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_horizontalAccelSmoothingFollowRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "horizontalAccelSmoothingFollowRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 hapticAccelInputRange
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_hapticAccelInputRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_hapticAccelInputRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticAccelInputRange"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single hapticAccelOutputMax
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_hapticAccelOutputMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_hapticAccelOutputMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticAccelOutputMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 hapticMaxSpeedInputRange
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_hapticMaxSpeedInputRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_hapticMaxSpeedInputRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticMaxSpeedInputRange"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 hapticSpeedInputRange
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_hapticSpeedInputRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_hapticSpeedInputRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticSpeedInputRange"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single hapticSpeedOutputMax
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_hapticSpeedOutputMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_hapticSpeedOutputMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hapticSpeedOutputMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 whistlingAudioSpeedInputRange
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_whistlingAudioSpeedInputRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_whistlingAudioSpeedInputRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whistlingAudioSpeedInputRange"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single audioVolumeMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_audioVolumeMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_audioVolumeMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioVolumeMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single infectedAudioVolumeMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_infectedAudioVolumeMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_infectedAudioVolumeMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "infectedAudioVolumeMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 whooshSpeedThresholdInput
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_whooshSpeedThresholdInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_whooshSpeedThresholdInput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whooshSpeedThresholdInput"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 whooshVolumeOutput
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_whooshVolumeOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_whooshVolumeOutput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whooshVolumeOutput"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single whooshCheckDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_whooshCheckDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_whooshCheckDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whooshCheckDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean extendTagRangeInFlight
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_extendTagRangeInFlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_extendTagRangeInFlight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extendTagRangeInFlight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 tagRangeSpeedInput
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_tagRangeSpeedInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_tagRangeSpeedInput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tagRangeSpeedInput"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 tagRangeOutput
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_tagRangeOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_tagRangeOutput");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tagRangeOutput"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean debugDrawTagRange
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_debugDrawTagRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_debugDrawTagRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugDrawTagRange"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single infectedSpeedIncrease
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_infectedSpeedIncrease() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_infectedSpeedIncrease");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "infectedSpeedIncrease"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer leafMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::GliderHoldable::dyn_leafMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_leafMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leafMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material baseLeafMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GliderHoldable::dyn_baseLeafMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_baseLeafMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "baseLeafMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material infectedLeafMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GliderHoldable::dyn_infectedLeafMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_infectedLeafMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "infectedLeafMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GliderHoldable/CosmeticMaterialOverride[] cosmeticMaterialOverrides
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GliderHoldable::CosmeticMaterialOverride>& GlobalNamespace::GliderHoldable::dyn_cosmeticMaterialOverrides() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_cosmeticMaterialOverrides");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmeticMaterialOverrides"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GliderHoldable::CosmeticMaterialOverride>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single networkSyncFollowRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_networkSyncFollowRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_networkSyncFollowRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "networkSyncFollowRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform maxDistanceRespawnOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GliderHoldable::dyn_maxDistanceRespawnOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_maxDistanceRespawnOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDistanceRespawnOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxDistanceBeforeRespawn
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_maxDistanceBeforeRespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_maxDistanceBeforeRespawn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDistanceBeforeRespawn"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxDroppedTimeToRespawn
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_maxDroppedTimeToRespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_maxDroppedTimeToRespawn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDroppedTimeToRespawn"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single windUprightTorqueMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_windUprightTorqueMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_windUprightTorqueMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "windUprightTorqueMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single gravityUprightTorqueMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_gravityUprightTorqueMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_gravityUprightTorqueMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gravityUprightTorqueMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single fallingGravityReduction
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_fallingGravityReduction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_fallingGravityReduction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fallingGravityReduction"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource calmAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GliderHoldable::dyn_calmAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_calmAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calmAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource activeAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GliderHoldable::dyn_activeAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_activeAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activeAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource whistlingAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GliderHoldable::dyn_whistlingAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_whistlingAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whistlingAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource leftWhooshAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GliderHoldable::dyn_leftWhooshAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_leftWhooshAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftWhooshAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource rightWhooshAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GliderHoldable::dyn_rightWhooshAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rightWhooshAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightWhooshAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private InteractionPoint handle
[[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& GlobalNamespace::GliderHoldable::dyn_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_handle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handle"))->offset;
  return *reinterpret_cast<::GlobalNamespace::InteractionPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RequestableOwnershipGuard ownershipGuard
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RequestableOwnershipGuard*& GlobalNamespace::GliderHoldable::dyn_ownershipGuard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_ownershipGuard");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ownershipGuard"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RequestableOwnershipGuard**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean subtlePlayerPitchActive
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerPitchActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean subtlePlayerRollActive
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerRollActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single subtlePlayerPitch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerPitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single subtlePlayerRoll
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_subtlePlayerRoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerRoll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerRoll"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single subtlePlayerPitchRateExp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchRateExp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerPitchRateExp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerPitchRateExp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single subtlePlayerRollRateExp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollRateExp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_subtlePlayerRollRateExp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subtlePlayerRollRateExp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GliderHoldable/HoldingHand leftHold
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GliderHoldable::HoldingHand& GlobalNamespace::GliderHoldable::dyn_leftHold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_leftHold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHold"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GliderHoldable::HoldingHand*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GliderHoldable/HoldingHand rightHold
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GliderHoldable::HoldingHand& GlobalNamespace::GliderHoldable::dyn_rightHold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rightHold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHold"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GliderHoldable::HoldingHand*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GliderHoldable/SyncedState syncedState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GliderHoldable::SyncedState& GlobalNamespace::GliderHoldable::dyn_syncedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_syncedState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncedState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GliderHoldable::SyncedState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 twoHandRotationOffsetAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_twoHandRotationOffsetAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_twoHandRotationOffsetAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "twoHandRotationOffsetAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single twoHandRotationOffsetAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_twoHandRotationOffsetAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_twoHandRotationOffsetAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "twoHandRotationOffsetAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody rb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::GliderHoldable::dyn_rb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector2 riderPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::GliderHoldable::dyn_riderPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_riderPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riderPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 previousVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_previousVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_previousVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 currentVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_currentVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_currentVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pitch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_pitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single yaw
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_yaw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_yaw");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "yaw"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single roll
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_roll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_roll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "roll"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single pitchVel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_pitchVel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pitchVel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchVel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single yawVel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_yawVel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_yawVel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "yawVel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rollVel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_rollVel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rollVel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rollVel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single oneHandRotationRateExp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_oneHandRotationRateExp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_oneHandRotationRateExp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oneHandRotationRateExp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single twoHandRotationRateExp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_twoHandRotationRateExp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_twoHandRotationRateExp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "twoHandRotationRateExp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion playerFacingRotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::GliderHoldable::dyn_playerFacingRotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_playerFacingRotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerFacingRotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private AverageVector3 accelerationAverage
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AverageVector3*& GlobalNamespace::GliderHoldable::dyn_accelerationAverage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_accelerationAverage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accelerationAverage"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AverageVector3**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single accelerationSmoothed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_accelerationSmoothed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_accelerationSmoothed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accelerationSmoothed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single turnAccelerationSmoothed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_turnAccelerationSmoothed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_turnAccelerationSmoothed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "turnAccelerationSmoothed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single accelSmoothingFollowRateExp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_accelSmoothingFollowRateExp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_accelSmoothingFollowRateExp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accelSmoothingFollowRateExp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single networkSyncFollowRateExp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_networkSyncFollowRateExp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_networkSyncFollowRateExp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "networkSyncFollowRateExp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean pendingOwnershipRequest
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_pendingOwnershipRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_pendingOwnershipRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pendingOwnershipRequest"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 positionLocalToVRRig
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_positionLocalToVRRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_positionLocalToVRRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionLocalToVRRig"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion rotationLocalToVRRig
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::GliderHoldable::dyn_rotationLocalToVRRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rotationLocalToVRRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationLocalToVRRig"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine reenableOwnershipRequestCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& GlobalNamespace::GliderHoldable::dyn_reenableOwnershipRequestCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_reenableOwnershipRequestCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reenableOwnershipRequestCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 spawnPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_spawnPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_spawnPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion spawnRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::GliderHoldable::dyn_spawnRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_spawnRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastHeldTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_lastHeldTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_lastHeldTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastHeldTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<UnityEngine.Vector3> leftHoldPositionLocal
[[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Vector3>& GlobalNamespace::GliderHoldable::dyn_leftHoldPositionLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_leftHoldPositionLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHoldPositionLocal"))->offset;
  return *reinterpret_cast<::System::Nullable_1<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<UnityEngine.Vector3> rightHoldPositionLocal
[[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Vector3>& GlobalNamespace::GliderHoldable::dyn_rightHoldPositionLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rightHoldPositionLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHoldPositionLocal"))->offset;
  return *reinterpret_cast<::System::Nullable_1<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single whooshSoundDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_whooshSoundDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_whooshSoundDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whooshSoundDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single whooshSoundRetriggerThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_whooshSoundRetriggerThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_whooshSoundRetriggerThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whooshSoundRetriggerThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single leftWhooshStartTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_leftWhooshStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_leftWhooshStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftWhooshStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 leftWhooshHitPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_leftWhooshHitPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_leftWhooshHitPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftWhooshHitPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 whooshAudioPositionOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_whooshAudioPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_whooshAudioPositionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whooshAudioPositionOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rightWhooshStartTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_rightWhooshStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rightWhooshStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightWhooshStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 rightWhooshHitPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::dyn_rightWhooshHitPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_rightWhooshHitPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightWhooshHitPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 ridersMaterialOverideIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GliderHoldable::dyn_ridersMaterialOverideIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_ridersMaterialOverideIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ridersMaterialOverideIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 windVolumeForceAppliedFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GliderHoldable::dyn_windVolumeForceAppliedFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_windVolumeForceAppliedFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "windVolumeForceAppliedFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean holdingTwoGliders
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_holdingTwoGliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_holdingTwoGliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdingTwoGliders"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GliderHoldable/GliderState gliderState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GliderHoldable::GliderState& GlobalNamespace::GliderHoldable::dyn_gliderState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_gliderState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gliderState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GliderHoldable::GliderState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single audioLevel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderHoldable::dyn_audioLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_audioLevel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioLevel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 riderId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GliderHoldable::dyn_riderId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_riderId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riderId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig cachedRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::GliderHoldable::dyn_cachedRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_cachedRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean infectedState
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::dyn_infectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::dyn_infectedState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "infectedState"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GliderHoldable.get_OutOfBounds
bool GlobalNamespace::GliderHoldable::get_OutOfBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::get_OutOfBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OutOfBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.Awake
void GlobalNamespace::GliderHoldable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.OnDestroy
void GlobalNamespace::GliderHoldable::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.Respawn
void GlobalNamespace::GliderHoldable::Respawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::Respawn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Respawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.OnGrabAuthority
void GlobalNamespace::GliderHoldable::OnGrabAuthority(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnGrabAuthority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGrabAuthority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointGrabbed), ::il2cpp_utils::ExtractType(grabbingHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: GliderHoldable.FixedUpdate
void GlobalNamespace::GliderHoldable::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.LateUpdate
void GlobalNamespace::GliderHoldable::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.AuthorityUpdate
void GlobalNamespace::GliderHoldable::AuthorityUpdate(float dt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::AuthorityUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthorityUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dt);
}
// Autogenerated method: GliderHoldable.AuthorityUpdateHeld
void GlobalNamespace::GliderHoldable::AuthorityUpdateHeld(float dt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::AuthorityUpdateHeld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthorityUpdateHeld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dt);
}
// Autogenerated method: GliderHoldable.AuthorityUpdateUnheld
void GlobalNamespace::GliderHoldable::AuthorityUpdateUnheld(float dt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::AuthorityUpdateUnheld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AuthorityUpdateUnheld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dt);
}
// Autogenerated method: GliderHoldable.RemoteSyncUpdate
void GlobalNamespace::GliderHoldable::RemoteSyncUpdate(float dt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::RemoteSyncUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoteSyncUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dt);
}
// Autogenerated method: GliderHoldable.getNewHolderRig
::GlobalNamespace::VRRig* GlobalNamespace::GliderHoldable::getNewHolderRig(int riderId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::getNewHolderRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "getNewHolderRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(riderId)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRRig*, false>(this, ___internal__method, riderId);
}
// Autogenerated method: GliderHoldable.ClosestPointInHandle
::UnityEngine::Vector3 GlobalNamespace::GliderHoldable::ClosestPointInHandle(::UnityEngine::Vector3 startingPoint, ::GlobalNamespace::InteractionPoint* interactionPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::ClosestPointInHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClosestPointInHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startingPoint), ::il2cpp_utils::ExtractType(interactionPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, startingPoint, interactionPoint);
}
// Autogenerated method: GliderHoldable.UpdateGliderPosition
void GlobalNamespace::GliderHoldable::UpdateGliderPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::UpdateGliderPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGliderPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.GetHandsVector
::UnityEngine::Vector3 GlobalNamespace::GliderHoldable::GetHandsVector(::UnityEngine::Vector3 leftHandPos, ::UnityEngine::Vector3 rightHandPos, ::UnityEngine::Vector3 headPos, bool flipBasedOnFacingDir) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GetHandsVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHandsVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftHandPos), ::il2cpp_utils::ExtractType(rightHandPos), ::il2cpp_utils::ExtractType(headPos), ::il2cpp_utils::ExtractType(flipBasedOnFacingDir)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, leftHandPos, rightHandPos, headPos, flipBasedOnFacingDir);
}
// Autogenerated method: GliderHoldable.GetHandsOrientationVectors
void GlobalNamespace::GliderHoldable::GetHandsOrientationVectors(::UnityEngine::Vector3 leftHandPos, ::UnityEngine::Vector3 rightHandPos, ::UnityEngine::Transform* head, bool flipBasedOnFacingDir, ByRef<::UnityEngine::Vector3> handsVector, ByRef<::UnityEngine::Vector3> handsUpVector) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GetHandsOrientationVectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHandsOrientationVectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftHandPos), ::il2cpp_utils::ExtractType(rightHandPos), ::il2cpp_utils::ExtractType(head), ::il2cpp_utils::ExtractType(flipBasedOnFacingDir), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, leftHandPos, rightHandPos, head, flipBasedOnFacingDir, byref(handsVector), byref(handsUpVector));
}
// Autogenerated method: GliderHoldable.GetMaterialFromIndex
::UnityEngine::Material* GlobalNamespace::GliderHoldable::GetMaterialFromIndex(uint8_t materialIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GetMaterialFromIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterialFromIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Material*, false>(this, ___internal__method, materialIndex);
}
// Autogenerated method: GliderHoldable.GetRollAngle180Wrapping
float GlobalNamespace::GliderHoldable::GetRollAngle180Wrapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GetRollAngle180Wrapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRollAngle180Wrapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.SignedAngleInPlane
float GlobalNamespace::GliderHoldable::SignedAngleInPlane(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, ::UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::SignedAngleInPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SignedAngleInPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, from, to, normal);
}
// Autogenerated method: GliderHoldable.NormalizeAngle180
float GlobalNamespace::GliderHoldable::NormalizeAngle180(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::NormalizeAngle180");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NormalizeAngle180", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, angle);
}
// Autogenerated method: GliderHoldable.UpdateAudioSource
void GlobalNamespace::GliderHoldable::UpdateAudioSource(::UnityEngine::AudioSource* source, float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::UpdateAudioSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAudioSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(level)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source, level);
}
// Autogenerated method: GliderHoldable.OnTriggerStay
void GlobalNamespace::GliderHoldable::OnTriggerStay(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: GliderHoldable.WindResistanceForceOffset
::UnityEngine::Vector3 GlobalNamespace::GliderHoldable::WindResistanceForceOffset(::UnityEngine::Vector3 upDir, ::UnityEngine::Vector3 windDir) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::WindResistanceForceOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WindResistanceForceOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(upDir), ::il2cpp_utils::ExtractType(windDir)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, upDir, windDir);
}
// Autogenerated method: GliderHoldable.OnPhotonSerializeView
void GlobalNamespace::GliderHoldable::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable*), 61));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: GliderHoldable.ReenableOwnershipRequest
::System::Collections::IEnumerator* GlobalNamespace::GliderHoldable::ReenableOwnershipRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::ReenableOwnershipRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReenableOwnershipRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.OnOwnershipTransferred
void GlobalNamespace::GliderHoldable::OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnOwnershipTransferred");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable*), 62));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toPlayer, fromPlayer);
}
// Autogenerated method: GliderHoldable.OnOwnershipRequest
bool GlobalNamespace::GliderHoldable::OnOwnershipRequest(::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnOwnershipRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable*), 63));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer);
}
// Autogenerated method: GliderHoldable.OnMyOwnerLeft
void GlobalNamespace::GliderHoldable::OnMyOwnerLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnMyOwnerLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable*), 64));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.OnMasterClientAssistedTakeoverRequest
bool GlobalNamespace::GliderHoldable::OnMasterClientAssistedTakeoverRequest(::Photon::Realtime::Player* fromPlayer, ::Photon::Realtime::Player* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnMasterClientAssistedTakeoverRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable*), 65));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer, toPlayer);
}
// Autogenerated method: GliderHoldable.OnMyCreatorLeft
void GlobalNamespace::GliderHoldable::OnMyCreatorLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnMyCreatorLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable*), 66));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.<OnHover>b__139_0
void GlobalNamespace::GliderHoldable::$OnHover$b__139_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::<OnHover>b__139_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnHover>b__139_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.<OnGrab>b__140_0
void GlobalNamespace::GliderHoldable::$OnGrab$b__140_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::<OnGrab>b__140_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnGrab>b__140_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.OnDisable
void GlobalNamespace::GliderHoldable::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.get_TwoHanded
bool GlobalNamespace::GliderHoldable::get_TwoHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::get_TwoHanded");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 56));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable.OnHover
void GlobalNamespace::GliderHoldable::OnHover(::GlobalNamespace::InteractionPoint* pointHovered, ::UnityEngine::GameObject* hoveringHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnHover");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointHovered, hoveringHand);
}
// Autogenerated method: GliderHoldable.OnGrab
void GlobalNamespace::GliderHoldable::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: GliderHoldable.OnRelease
bool GlobalNamespace::GliderHoldable::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GliderHoldable/GliderState
#include "GlobalNamespace/GliderHoldable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GliderHoldable/GliderState LocallyHeld
::GlobalNamespace::GliderHoldable::GliderState GlobalNamespace::GliderHoldable::GliderState::_get_LocallyHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GliderState::_get_LocallyHeld");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GliderHoldable::GliderState>("", "GliderHoldable/GliderState", "LocallyHeld"));
}
// Autogenerated static field setter
// Set static field: static public GliderHoldable/GliderState LocallyHeld
void GlobalNamespace::GliderHoldable::GliderState::_set_LocallyHeld(::GlobalNamespace::GliderHoldable::GliderState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GliderState::_set_LocallyHeld");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GliderHoldable/GliderState", "LocallyHeld", value));
}
// Autogenerated static field getter
// Get static field: static public GliderHoldable/GliderState LocallyDropped
::GlobalNamespace::GliderHoldable::GliderState GlobalNamespace::GliderHoldable::GliderState::_get_LocallyDropped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GliderState::_get_LocallyDropped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GliderHoldable::GliderState>("", "GliderHoldable/GliderState", "LocallyDropped"));
}
// Autogenerated static field setter
// Set static field: static public GliderHoldable/GliderState LocallyDropped
void GlobalNamespace::GliderHoldable::GliderState::_set_LocallyDropped(::GlobalNamespace::GliderHoldable::GliderState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GliderState::_set_LocallyDropped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GliderHoldable/GliderState", "LocallyDropped", value));
}
// Autogenerated static field getter
// Get static field: static public GliderHoldable/GliderState RemoteSyncing
::GlobalNamespace::GliderHoldable::GliderState GlobalNamespace::GliderHoldable::GliderState::_get_RemoteSyncing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GliderState::_get_RemoteSyncing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GliderHoldable::GliderState>("", "GliderHoldable/GliderState", "RemoteSyncing"));
}
// Autogenerated static field setter
// Set static field: static public GliderHoldable/GliderState RemoteSyncing
void GlobalNamespace::GliderHoldable::GliderState::_set_RemoteSyncing(::GlobalNamespace::GliderHoldable::GliderState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GliderState::_set_RemoteSyncing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GliderHoldable/GliderState", "RemoteSyncing", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GliderHoldable::GliderState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::GliderState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GliderHoldable/HoldingHand
#include "GlobalNamespace/GliderHoldable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean active
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::HoldingHand::dyn_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::HoldingHand::dyn_active");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "active"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GliderHoldable::HoldingHand::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::HoldingHand::dyn_transform");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 holdLocalPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::HoldingHand::dyn_holdLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::HoldingHand::dyn_holdLocalPos");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdLocalPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 handleLocalPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::HoldingHand::dyn_handleLocalPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::HoldingHand::dyn_handleLocalPos");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handleLocalPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion localHoldRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::GliderHoldable::HoldingHand::dyn_localHoldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::HoldingHand::dyn_localHoldRotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localHoldRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GliderHoldable/HoldingHand.Activate
void GlobalNamespace::GliderHoldable::HoldingHand::Activate(::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* gliderTransform, ::UnityEngine::Vector3 worldGrabPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::HoldingHand::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handTransform), ::il2cpp_utils::ExtractType(gliderTransform), ::il2cpp_utils::ExtractType(worldGrabPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, handTransform, gliderTransform, worldGrabPoint);
}
// Autogenerated method: GliderHoldable/HoldingHand.Deactivate
void GlobalNamespace::GliderHoldable::HoldingHand::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::HoldingHand::Deactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GliderHoldable/SyncedState
#include "GlobalNamespace/GliderHoldable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 riderId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GliderHoldable::SyncedState::dyn_riderId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::SyncedState::dyn_riderId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "riderId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte materialIndex
[[deprecated("Use field access instead!")]] uint8_t& GlobalNamespace::GliderHoldable::SyncedState::dyn_materialIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::SyncedState::dyn_materialIndex");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "materialIndex"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte audioLevel
[[deprecated("Use field access instead!")]] uint8_t& GlobalNamespace::GliderHoldable::SyncedState::dyn_audioLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::SyncedState::dyn_audioLevel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioLevel"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean tagged
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GliderHoldable::SyncedState::dyn_tagged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::SyncedState::dyn_tagged");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tagged"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderHoldable::SyncedState::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::SyncedState::dyn_position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::GliderHoldable::SyncedState::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::SyncedState::dyn_rotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GliderHoldable/SyncedState.Init
void GlobalNamespace::GliderHoldable::SyncedState::Init(::UnityEngine::Vector3 defaultPosition, ::UnityEngine::Quaternion defaultRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::SyncedState::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultPosition), ::il2cpp_utils::ExtractType(defaultRotation)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, defaultPosition, defaultRotation);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GliderHoldable/<ReenableOwnershipRequest>d__169
#include "GlobalNamespace/GliderHoldable_-ReenableOwnershipRequest-d__169.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GliderHoldable <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GliderHoldable*& GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GliderHoldable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GliderHoldable/<ReenableOwnershipRequest>d__169.System.IDisposable.Dispose
void GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable/<ReenableOwnershipRequest>d__169.MoveNext
bool GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable/<ReenableOwnershipRequest>d__169.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable/<ReenableOwnershipRequest>d__169.System.Collections.IEnumerator.Reset
void GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GliderHoldable/<ReenableOwnershipRequest>d__169.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GliderHoldable::$ReenableOwnershipRequest$d__169*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GliderWindVolume
#include "GlobalNamespace/GliderWindVolume.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single maxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderWindVolume::dyn_maxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderWindVolume::dyn_maxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxAccel
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GliderWindVolume::dyn_maxAccel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderWindVolume::dyn_maxAccel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxAccel"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve speedVsAccelCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::GliderWindVolume::dyn_speedVsAccelCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderWindVolume::dyn_speedVsAccelCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speedVsAccelCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 localWindDirection
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GliderWindVolume::dyn_localWindDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderWindVolume::dyn_localWindDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localWindDirection"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GliderWindVolume.get_WindDirection
::UnityEngine::Vector3 GlobalNamespace::GliderWindVolume::get_WindDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderWindVolume::get_WindDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WindDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: GliderWindVolume.GetAccelFromVelocity
::UnityEngine::Vector3 GlobalNamespace::GliderWindVolume::GetAccelFromVelocity(::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GliderWindVolume::GetAccelFromVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAccelFromVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(velocity)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, velocity);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WaterInteractionEvents
#include "GlobalNamespace/WaterInteractionEvents.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: UnityEngine.SphereCollider
#include "UnityEngine/SphereCollider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: GorillaLocomotion.Swimming.WaterVolume
#include "GorillaLocomotion/Swimming/WaterVolume.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onEnterWater
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::WaterInteractionEvents::dyn_onEnterWater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::dyn_onEnterWater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onEnterWater"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onExitWater
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::WaterInteractionEvents::dyn_onExitWater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::dyn_onExitWater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onExitWater"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SphereCollider waterContactSphere
[[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& GlobalNamespace::WaterInteractionEvents::dyn_waterContactSphere() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::dyn_waterContactSphere");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waterContactSphere"))->offset;
  return *reinterpret_cast<::UnityEngine::SphereCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterVolume> overlappingWaterVolumes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>*& GlobalNamespace::WaterInteractionEvents::dyn_overlappingWaterVolumes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::dyn_overlappingWaterVolumes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlappingWaterVolumes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean inWater
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::WaterInteractionEvents::dyn_inWater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::dyn_inWater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inWater"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WaterInteractionEvents.Update
void GlobalNamespace::WaterInteractionEvents::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaterInteractionEvents.OnTriggerEnter
void GlobalNamespace::WaterInteractionEvents::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: WaterInteractionEvents.OnTriggerExit
void GlobalNamespace::WaterInteractionEvents::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WaterInteractionEvents::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: PhotonEvent
#include "GlobalNamespace/PhotonEvent.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Photon.Realtime.RaiseEventOptions
#include "Photon/Realtime/RaiseEventOptions.hpp"
// Including type: ExitGames.Client.Photon.EventData
#include "ExitGames/Client/Photon/EventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 INVALID_ID
int GlobalNamespace::PhotonEvent::_get_INVALID_ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_get_INVALID_ID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PhotonEvent", "INVALID_ID"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 INVALID_ID
void GlobalNamespace::PhotonEvent::_set_INVALID_ID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_set_INVALID_ID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent", "INVALID_ID", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`2<PhotonEvent,System.Exception> OnError
::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>* GlobalNamespace::PhotonEvent::_get_OnError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_get_OnError");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>*>("", "PhotonEvent", "OnError")));
}
// Autogenerated static field setter
// Set static field: static private System.Action`2<PhotonEvent,System.Exception> OnError
void GlobalNamespace::PhotonEvent::_set_OnError(::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_set_OnError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent", "OnError", value));
}
// Autogenerated static field getter
// Get static field: static public System.Byte PHOTON_EVENT_CODE
uint8_t GlobalNamespace::PhotonEvent::_get_PHOTON_EVENT_CODE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_get_PHOTON_EVENT_CODE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "PhotonEvent", "PHOTON_EVENT_CODE"));
}
// Autogenerated static field setter
// Set static field: static public System.Byte PHOTON_EVENT_CODE
void GlobalNamespace::PhotonEvent::_set_PHOTON_EVENT_CODE(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_set_PHOTON_EVENT_CODE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent", "PHOTON_EVENT_CODE", value));
}
// Autogenerated static field getter
// Get static field: static private readonly Photon.Realtime.RaiseEventOptions gReceiversAll
::Photon::Realtime::RaiseEventOptions* GlobalNamespace::PhotonEvent::_get_gReceiversAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_get_gReceiversAll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Photon::Realtime::RaiseEventOptions*>("", "PhotonEvent", "gReceiversAll"));
}
// Autogenerated static field setter
// Set static field: static private readonly Photon.Realtime.RaiseEventOptions gReceiversAll
void GlobalNamespace::PhotonEvent::_set_gReceiversAll(::Photon::Realtime::RaiseEventOptions* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_set_gReceiversAll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent", "gReceiversAll", value));
}
// Autogenerated static field getter
// Get static field: static private readonly Photon.Realtime.RaiseEventOptions gReceiversOthers
::Photon::Realtime::RaiseEventOptions* GlobalNamespace::PhotonEvent::_get_gReceiversOthers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_get_gReceiversOthers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Photon::Realtime::RaiseEventOptions*>("", "PhotonEvent", "gReceiversOthers"));
}
// Autogenerated static field setter
// Set static field: static private readonly Photon.Realtime.RaiseEventOptions gReceiversOthers
void GlobalNamespace::PhotonEvent::_set_gReceiversOthers(::Photon::Realtime::RaiseEventOptions* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_set_gReceiversOthers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent", "gReceiversOthers", value));
}
// Autogenerated static field getter
// Get static field: static private readonly ExitGames.Client.Photon.SendOptions gSendReliable
::ExitGames::Client::Photon::SendOptions GlobalNamespace::PhotonEvent::_get_gSendReliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_get_gSendReliable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::SendOptions>("", "PhotonEvent", "gSendReliable"));
}
// Autogenerated static field setter
// Set static field: static private readonly ExitGames.Client.Photon.SendOptions gSendReliable
void GlobalNamespace::PhotonEvent::_set_gSendReliable(::ExitGames::Client::Photon::SendOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_set_gSendReliable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent", "gSendReliable", value));
}
// Autogenerated static field getter
// Get static field: static private readonly ExitGames.Client.Photon.SendOptions gSendUnreliable
::ExitGames::Client::Photon::SendOptions GlobalNamespace::PhotonEvent::_get_gSendUnreliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_get_gSendUnreliable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ExitGames::Client::Photon::SendOptions>("", "PhotonEvent", "gSendUnreliable"));
}
// Autogenerated static field setter
// Set static field: static private readonly ExitGames.Client.Photon.SendOptions gSendUnreliable
void GlobalNamespace::PhotonEvent::_set_gSendUnreliable(::ExitGames::Client::Photon::SendOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::_set_gSendUnreliable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent", "gSendUnreliable", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _eventId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PhotonEvent::dyn__eventId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::dyn__eventId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_eventId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _enabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PhotonEvent::dyn__enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::dyn__enabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _reliable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PhotonEvent::dyn__reliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::dyn__reliable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reliable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _failSilent
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PhotonEvent::dyn__failSilent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::dyn__failSilent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_failSilent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PhotonEvent::dyn__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::dyn__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _delegate
[[deprecated("Use field access instead!")]] ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*& GlobalNamespace::PhotonEvent::dyn__delegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::dyn__delegate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_delegate"))->offset;
  return *reinterpret_cast<::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PhotonEvent.get_reliable
bool GlobalNamespace::PhotonEvent::get_reliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::get_reliable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reliable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PhotonEvent.set_reliable
void GlobalNamespace::PhotonEvent::set_reliable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::set_reliable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_reliable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PhotonEvent.get_failSilent
bool GlobalNamespace::PhotonEvent::get_failSilent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::get_failSilent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_failSilent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PhotonEvent.set_failSilent
void GlobalNamespace::PhotonEvent::set_failSilent(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::set_failSilent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_failSilent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PhotonEvent.AddCallback
void GlobalNamespace::PhotonEvent::AddCallback(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::AddCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: PhotonEvent.RemoveCallback
void GlobalNamespace::PhotonEvent::RemoveCallback(::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RemoveCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback);
}
// Autogenerated method: PhotonEvent.Enable
void GlobalNamespace::PhotonEvent::Enable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::Enable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonEvent.Disable
void GlobalNamespace::PhotonEvent::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonEvent.Dispose
void GlobalNamespace::PhotonEvent::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonEvent.add_OnError
void GlobalNamespace::PhotonEvent::add_OnError(::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::add_OnError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonEvent", "add_OnError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: PhotonEvent.remove_OnError
void GlobalNamespace::PhotonEvent::remove_OnError(::System::Action_2<::GlobalNamespace::PhotonEvent*, ::System::Exception*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::remove_OnError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonEvent", "remove_OnError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: PhotonEvent.Photon.Realtime.IOnEventCallback.OnEvent
void GlobalNamespace::PhotonEvent::Photon_Realtime_IOnEventCallback_OnEvent(::ExitGames::Client::Photon::EventData* ev) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::Photon.Realtime.IOnEventCallback.OnEvent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonEvent*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ev);
}
// Autogenerated method: PhotonEvent.InvokeDelegate
void GlobalNamespace::PhotonEvent::InvokeDelegate(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::InvokeDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, target, args, info);
}
// Autogenerated method: PhotonEvent.RaiseLocal
void GlobalNamespace::PhotonEvent::RaiseLocal(::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RaiseLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args);
}
// Autogenerated method: PhotonEvent.RaiseOthers
void GlobalNamespace::PhotonEvent::RaiseOthers(::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseOthers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RaiseOthers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args);
}
// Autogenerated method: PhotonEvent.RaiseAll
void GlobalNamespace::PhotonEvent::RaiseAll(::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RaiseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args);
}
// Autogenerated method: PhotonEvent.Raise
void GlobalNamespace::PhotonEvent::Raise(::GlobalNamespace::PhotonEvent::RaiseMode mode, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::Raise");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mode, args);
}
// Autogenerated method: PhotonEvent.Equals
bool GlobalNamespace::PhotonEvent::Equals(::GlobalNamespace::PhotonEvent* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonEvent*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: PhotonEvent..cctor
void GlobalNamespace::PhotonEvent::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonEvent", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PhotonEvent.Finalize
void GlobalNamespace::PhotonEvent::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::Finalize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonEvent.Equals
bool GlobalNamespace::PhotonEvent::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: PhotonEvent.GetHashCode
int GlobalNamespace::PhotonEvent::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: PhotonEvent.op_Addition
::GlobalNamespace::PhotonEvent* GlobalNamespace::operator+(::GlobalNamespace::PhotonEvent* photonEvent, ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>& callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonEvent", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(photonEvent), ::il2cpp_utils::ExtractType(&callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::PhotonEvent*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, photonEvent, &callback);
}
// Autogenerated method: PhotonEvent.op_Subtraction
::GlobalNamespace::PhotonEvent* GlobalNamespace::operator-(::GlobalNamespace::PhotonEvent* photonEvent, ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>& callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonEvent", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(photonEvent), ::il2cpp_utils::ExtractType(&callback)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::PhotonEvent*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, photonEvent, &callback);
}
// Autogenerated method: PhotonEvent.op_Equality
bool GlobalNamespace::operator ==(::GlobalNamespace::PhotonEvent* x, ::GlobalNamespace::PhotonEvent& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonEvent", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated method: PhotonEvent.op_Inequality
bool GlobalNamespace::operator !=(::GlobalNamespace::PhotonEvent* x, ::GlobalNamespace::PhotonEvent& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonEvent", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PhotonEvent/RaiseMode
#include "GlobalNamespace/PhotonEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PhotonEvent/RaiseMode Local
::GlobalNamespace::PhotonEvent::RaiseMode GlobalNamespace::PhotonEvent::RaiseMode::_get_Local() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseMode::_get_Local");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PhotonEvent::RaiseMode>("", "PhotonEvent/RaiseMode", "Local"));
}
// Autogenerated static field setter
// Set static field: static public PhotonEvent/RaiseMode Local
void GlobalNamespace::PhotonEvent::RaiseMode::_set_Local(::GlobalNamespace::PhotonEvent::RaiseMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseMode::_set_Local");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent/RaiseMode", "Local", value));
}
// Autogenerated static field getter
// Get static field: static public PhotonEvent/RaiseMode RemoteOthers
::GlobalNamespace::PhotonEvent::RaiseMode GlobalNamespace::PhotonEvent::RaiseMode::_get_RemoteOthers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseMode::_get_RemoteOthers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PhotonEvent::RaiseMode>("", "PhotonEvent/RaiseMode", "RemoteOthers"));
}
// Autogenerated static field setter
// Set static field: static public PhotonEvent/RaiseMode RemoteOthers
void GlobalNamespace::PhotonEvent::RaiseMode::_set_RemoteOthers(::GlobalNamespace::PhotonEvent::RaiseMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseMode::_set_RemoteOthers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent/RaiseMode", "RemoteOthers", value));
}
// Autogenerated static field getter
// Get static field: static public PhotonEvent/RaiseMode RemoteAll
::GlobalNamespace::PhotonEvent::RaiseMode GlobalNamespace::PhotonEvent::RaiseMode::_get_RemoteAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseMode::_get_RemoteAll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PhotonEvent::RaiseMode>("", "PhotonEvent/RaiseMode", "RemoteAll"));
}
// Autogenerated static field setter
// Set static field: static public PhotonEvent/RaiseMode RemoteAll
void GlobalNamespace::PhotonEvent::RaiseMode::_set_RemoteAll(::GlobalNamespace::PhotonEvent::RaiseMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseMode::_set_RemoteAll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonEvent/RaiseMode", "RemoteAll", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PhotonEvent::RaiseMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonEvent::RaiseMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: PhotonTag
#include "GlobalNamespace/PhotonTag.hpp"
// Including type: ExitGames.Client.Photon.EventData
#include "ExitGames/Client/Photon/EventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Byte PHOTON_TAG_CODE
uint8_t GlobalNamespace::PhotonTag::_get_PHOTON_TAG_CODE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::_get_PHOTON_TAG_CODE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "PhotonTag", "PHOTON_TAG_CODE"));
}
// Autogenerated static field setter
// Set static field: static public System.Byte PHOTON_TAG_CODE
void GlobalNamespace::PhotonTag::_set_PHOTON_TAG_CODE(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::_set_PHOTON_TAG_CODE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PhotonTag", "PHOTON_TAG_CODE", value));
}
// Autogenerated instance field getter
// Get instance field: private Id128 _tagId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Id128& GlobalNamespace::PhotonTag::dyn__tagId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::dyn__tagId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tagId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Id128*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Id128 _subId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Id128& GlobalNamespace::PhotonTag::dyn__subId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::dyn__subId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Id128*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PhotonTag.get_TagId
::GlobalNamespace::Id128 GlobalNamespace::PhotonTag::get_TagId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::get_TagId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TagId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(this, ___internal__method);
}
// Autogenerated method: PhotonTag.get_SubId
::GlobalNamespace::Id128 GlobalNamespace::PhotonTag::get_SubId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::get_SubId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SubId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(this, ___internal__method);
}
// Autogenerated method: PhotonTag.OnEnable
void GlobalNamespace::PhotonTag::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonTag.OnDisable
void GlobalNamespace::PhotonTag::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonTag.Photon.Realtime.IOnEventCallback.OnEvent
void GlobalNamespace::PhotonTag::Photon_Realtime_IOnEventCallback_OnEvent(::ExitGames::Client::Photon::EventData* ev) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::Photon.Realtime.IOnEventCallback.OnEvent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonTag*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ev);
}
// Autogenerated method: PhotonTag.Reset
void GlobalNamespace::PhotonTag::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonTag.ComputeID
void GlobalNamespace::PhotonTag::ComputeID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::ComputeID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhotonTag.Equals
bool GlobalNamespace::PhotonTag::Equals(::GlobalNamespace::PhotonTag* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PhotonTag*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: PhotonTag.Equals
bool GlobalNamespace::PhotonTag::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Object*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: PhotonTag.GetHashCode
int GlobalNamespace::PhotonTag::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Object*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: PhotonTag.op_Equality
bool GlobalNamespace::operator ==(::GlobalNamespace::PhotonTag* x, ::GlobalNamespace::PhotonTag& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonTag", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated method: PhotonTag.op_Inequality
bool GlobalNamespace::operator !=(::GlobalNamespace::PhotonTag* x, ::GlobalNamespace::PhotonTag& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PhotonTag", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DevPrefs
#include "GlobalNamespace/DevPrefs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CopyMaterialScript
#include "GlobalNamespace/CopyMaterialScript.hpp"
// Including type: UnityEngine.SkinnedMeshRenderer
#include "UnityEngine/SkinnedMeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.SkinnedMeshRenderer sourceToCopyMaterialFrom
[[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& GlobalNamespace::CopyMaterialScript::dyn_sourceToCopyMaterialFrom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CopyMaterialScript::dyn_sourceToCopyMaterialFrom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceToCopyMaterialFrom"))->offset;
  return *reinterpret_cast<::UnityEngine::SkinnedMeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.SkinnedMeshRenderer mySkinnedMeshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& GlobalNamespace::CopyMaterialScript::dyn_mySkinnedMeshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CopyMaterialScript::dyn_mySkinnedMeshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mySkinnedMeshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SkinnedMeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CopyMaterialScript.Start
void GlobalNamespace::CopyMaterialScript::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CopyMaterialScript::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CopyMaterialScript.Update
void GlobalNamespace::CopyMaterialScript::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CopyMaterialScript::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SteamManager
#include "GlobalNamespace/SteamManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamManager.get_Initialized
bool GlobalNamespace::SteamManager::get_Initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamManager::get_Initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SteamManager", "get_Initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CallLimiter
#include "GlobalNamespace/CallLimiter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Single[] callTimeHistory
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::CallLimiter::dyn_callTimeHistory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::dyn_callTimeHistory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callTimeHistory"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 callHistoryLength
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CallLimiter::dyn_callHistoryLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::dyn_callHistoryLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callHistoryLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single timeCooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CallLimiter::dyn_timeCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::dyn_timeCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeCooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single maxLatency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CallLimiter::dyn_maxLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::dyn_maxLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxLatency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 oldTimeIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::CallLimiter::dyn_oldTimeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::dyn_oldTimeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "oldTimeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean blockCall
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CallLimiter::dyn_blockCall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::dyn_blockCall");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blockCall"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Single blockStartTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CallLimiter::dyn_blockStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::dyn_blockStartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blockStartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CallLimiter.CheckCallServerTime
bool GlobalNamespace::CallLimiter::CheckCallServerTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::CheckCallServerTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckCallServerTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time);
}
// Autogenerated method: CallLimiter.CheckCallTime
bool GlobalNamespace::CallLimiter::CheckCallTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::CheckCallTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CallLimiter*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time);
}
// Autogenerated method: CallLimiter.Reset
void GlobalNamespace::CallLimiter::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiter::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CallLimiter*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CallLimiterWithCooldown
#include "GlobalNamespace/CallLimiterWithCooldown.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single spamCoolDown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CallLimiterWithCooldown::dyn_spamCoolDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiterWithCooldown::dyn_spamCoolDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spamCoolDown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CallLimiterWithCooldown.CheckCallTime
bool GlobalNamespace::CallLimiterWithCooldown::CheckCallTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallLimiterWithCooldown::CheckCallTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CallLimiter*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: IFXContext
#include "GlobalNamespace/IFXContext.hpp"
// Including type: FXSystemSettings
#include "GlobalNamespace/FXSystemSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IFXContext.get_settings
::GlobalNamespace::FXSystemSettings* GlobalNamespace::IFXContext::get_settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IFXContext::get_settings");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IFXContext*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::FXSystemSettings*, false>(this, ___internal__method);
}
// Autogenerated method: IFXContext.OnPlayFX
void GlobalNamespace::IFXContext::OnPlayFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IFXContext::OnPlayFX");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IFXContext*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FXSArgs
#include "GlobalNamespace/FXSArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FXSystem
#include "GlobalNamespace/FXSystem.hpp"
// Including type: IFXContextParems`1
#include "GlobalNamespace/IFXContextParems_1.hpp"
// Including type: IFXContext
#include "GlobalNamespace/IFXContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: FXSArgs
#include "GlobalNamespace/FXSArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FXSystem.PlayFXForRig
void GlobalNamespace::FXSystem::PlayFXForRig(::GlobalNamespace::FXType fxType, ::GlobalNamespace::IFXContext* context, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXSystem::PlayFXForRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FXSystem", "PlayFXForRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fxType), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, fxType, context, info);
}
// Autogenerated method: FXSystem.PlayFXForRigValidated
void GlobalNamespace::FXSystem::PlayFXForRigValidated(::System::Collections::Generic::List_1<int>* hashes, ::GlobalNamespace::FXType fxType, ::GlobalNamespace::IFXContext* context, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXSystem::PlayFXForRigValidated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FXSystem", "PlayFXForRigValidated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashes), ::il2cpp_utils::ExtractType(fxType), ::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hashes, fxType, context, info);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FXType
#include "GlobalNamespace/FXType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FXType BalloonPop
::GlobalNamespace::FXType GlobalNamespace::FXType::_get_BalloonPop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_get_BalloonPop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FXType>("", "FXType", "BalloonPop"));
}
// Autogenerated static field setter
// Set static field: static public FXType BalloonPop
void GlobalNamespace::FXType::_set_BalloonPop(::GlobalNamespace::FXType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_set_BalloonPop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FXType", "BalloonPop", value));
}
// Autogenerated static field getter
// Get static field: static public FXType PlayHandTap
::GlobalNamespace::FXType GlobalNamespace::FXType::_get_PlayHandTap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_get_PlayHandTap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FXType>("", "FXType", "PlayHandTap"));
}
// Autogenerated static field setter
// Set static field: static public FXType PlayHandTap
void GlobalNamespace::FXType::_set_PlayHandTap(::GlobalNamespace::FXType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_set_PlayHandTap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FXType", "PlayHandTap", value));
}
// Autogenerated static field getter
// Get static field: static public FXType HWIngredients
::GlobalNamespace::FXType GlobalNamespace::FXType::_get_HWIngredients() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_get_HWIngredients");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FXType>("", "FXType", "HWIngredients"));
}
// Autogenerated static field setter
// Set static field: static public FXType HWIngredients
void GlobalNamespace::FXType::_set_HWIngredients(::GlobalNamespace::FXType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_set_HWIngredients");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FXType", "HWIngredients", value));
}
// Autogenerated static field getter
// Get static field: static public FXType Impact
::GlobalNamespace::FXType GlobalNamespace::FXType::_get_Impact() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_get_Impact");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FXType>("", "FXType", "Impact"));
}
// Autogenerated static field setter
// Set static field: static public FXType Impact
void GlobalNamespace::FXType::_set_Impact(::GlobalNamespace::FXType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_set_Impact");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FXType", "Impact", value));
}
// Autogenerated static field getter
// Get static field: static public FXType Projectile
::GlobalNamespace::FXType GlobalNamespace::FXType::_get_Projectile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_get_Projectile");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FXType>("", "FXType", "Projectile"));
}
// Autogenerated static field setter
// Set static field: static public FXType Projectile
void GlobalNamespace::FXType::_set_Projectile(::GlobalNamespace::FXType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_set_Projectile");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FXType", "Projectile", value));
}
// Autogenerated static field getter
// Get static field: static public FXType Length
::GlobalNamespace::FXType GlobalNamespace::FXType::_get_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_get_Length");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::FXType>("", "FXType", "Length"));
}
// Autogenerated static field setter
// Set static field: static public FXType Length
void GlobalNamespace::FXType::_set_Length(::GlobalNamespace::FXType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::_set_Length");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FXType", "Length", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::FXType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LimiterType
#include "GlobalNamespace/LimiterType.hpp"
// Including type: CallLimiter
#include "GlobalNamespace/CallLimiter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CooldownType
#include "GlobalNamespace/CooldownType.hpp"
// Including type: CallLimiterWithCooldown
#include "GlobalNamespace/CallLimiterWithCooldown.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FXSystemSettings
#include "GlobalNamespace/FXSystemSettings.hpp"
// Including type: LimiterType
#include "GlobalNamespace/LimiterType.hpp"
// Including type: CooldownType
#include "GlobalNamespace/CooldownType.hpp"
// Including type: CallLimitType`1
#include "GlobalNamespace/CallLimitType_1.hpp"
// Including type: CallLimiter
#include "GlobalNamespace/CallLimiter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LimiterType[] callLimits
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LimiterType*>& GlobalNamespace::FXSystemSettings::dyn_callLimits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXSystemSettings::dyn_callLimits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callLimits"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LimiterType*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private CooldownType[] CallLimitsCooldown
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CooldownType*>& GlobalNamespace::FXSystemSettings::dyn_CallLimitsCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXSystemSettings::dyn_CallLimitsCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CallLimitsCooldown"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::CooldownType*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean forLocalRig
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FXSystemSettings::dyn_forLocalRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXSystemSettings::dyn_forLocalRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forLocalRig"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public CallLimitType`1<CallLimiter>[] callSettings
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CallLimitType_1<::GlobalNamespace::CallLimiter*>*>& GlobalNamespace::FXSystemSettings::dyn_callSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXSystemSettings::dyn_callSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callSettings"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::CallLimitType_1<::GlobalNamespace::CallLimiter*>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FXSystemSettings.Awake
void GlobalNamespace::FXSystemSettings::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FXSystemSettings::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BattleRPCs
#include "GlobalNamespace/BattleRPCs.hpp"
// Including type: GameModeSerializer
#include "GlobalNamespace/GameModeSerializer.hpp"
// Including type: GorillaBattleManager
#include "GlobalNamespace/GorillaBattleManager.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: IGorillaSerializeable
#include "GlobalNamespace/IGorillaSerializeable.hpp"
// Including type: GorillaSerializer
#include "GlobalNamespace/GorillaSerializer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GameModeSerializer serializer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GameModeSerializer*& GlobalNamespace::BattleRPCs::dyn_serializer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleRPCs::dyn_serializer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "serializer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GameModeSerializer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaBattleManager battleTarget
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaBattleManager*& GlobalNamespace::BattleRPCs::dyn_battleTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleRPCs::dyn_battleTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "battleTarget"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaBattleManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BattleRPCs.ReportSlingshotHit
void GlobalNamespace::BattleRPCs::ReportSlingshotHit(::Photon::Realtime::Player* taggedPlayer, ::UnityEngine::Vector3 hitLocation, int projectileCount, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleRPCs::ReportSlingshotHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportSlingshotHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(taggedPlayer), ::il2cpp_utils::ExtractType(hitLocation), ::il2cpp_utils::ExtractType(projectileCount), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, taggedPlayer, hitLocation, projectileCount, info);
}
// Autogenerated method: BattleRPCs.SetClassTarget
void GlobalNamespace::BattleRPCs::SetClassTarget(::GlobalNamespace::IGorillaSerializeable* target, ::GlobalNamespace::GorillaSerializer* netHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleRPCs::SetClassTarget");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RPCNetworkBase*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, netHandler);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RPCNetworkBase
#include "GlobalNamespace/RPCNetworkBase.hpp"
// Including type: IGorillaSerializeable
#include "GlobalNamespace/IGorillaSerializeable.hpp"
// Including type: GorillaSerializer
#include "GlobalNamespace/GorillaSerializer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RPCNetworkBase.SetClassTarget
void GlobalNamespace::RPCNetworkBase::SetClassTarget(::GlobalNamespace::IGorillaSerializeable* target, ::GlobalNamespace::GorillaSerializer* netHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RPCNetworkBase::SetClassTarget");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RPCNetworkBase*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, netHandler);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: IDelayedExecListener
#include "GlobalNamespace/IDelayedExecListener.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IDelayedExecListener.OnDelayedAction
void GlobalNamespace::IDelayedExecListener::OnDelayedAction(int contextId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IDelayedExecListener::OnDelayedAction");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IDelayedExecListener*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, contextId);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTDelayedExec
#include "GlobalNamespace/GTDelayedExec.hpp"
// Including type: IDelayedExecListener
#include "GlobalNamespace/IDelayedExecListener.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private GTDelayedExec <instance>k__BackingField
::GlobalNamespace::GTDelayedExec* GlobalNamespace::GTDelayedExec::_get_$instance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::_get_$instance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::GTDelayedExec*>("", "GTDelayedExec", "<instance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private GTDelayedExec <instance>k__BackingField
void GlobalNamespace::GTDelayedExec::_set_$instance$k__BackingField(::GlobalNamespace::GTDelayedExec* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::_set_$instance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDelayedExec", "<instance>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxListeners
int GlobalNamespace::GTDelayedExec::_get_kMaxListeners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::_get_kMaxListeners");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "GTDelayedExec", "kMaxListeners"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxListeners
void GlobalNamespace::GTDelayedExec::_set_kMaxListeners(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::_set_kMaxListeners");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDelayedExec", "kMaxListeners", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Single[] _listenerDelays
::ArrayW<float> GlobalNamespace::GTDelayedExec::_get__listenerDelays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::_get__listenerDelays");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<float>>("", "GTDelayedExec", "_listenerDelays"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Single[] _listenerDelays
void GlobalNamespace::GTDelayedExec::_set__listenerDelays(::ArrayW<float> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::_set__listenerDelays");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDelayedExec", "_listenerDelays", value));
}
// Autogenerated static field getter
// Get static field: static private readonly GTDelayedExec/Listener[] _listeners
::ArrayW<::GlobalNamespace::GTDelayedExec::Listener> GlobalNamespace::GTDelayedExec::_get__listeners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::_get__listeners");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::GlobalNamespace::GTDelayedExec::Listener>>("", "GTDelayedExec", "_listeners"));
}
// Autogenerated static field setter
// Set static field: static private readonly GTDelayedExec/Listener[] _listeners
void GlobalNamespace::GTDelayedExec::_set__listeners(::ArrayW<::GlobalNamespace::GTDelayedExec::Listener> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::_set__listeners");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTDelayedExec", "_listeners", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <listenerCount>k__BackingField
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTDelayedExec::dyn_$listenerCount$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::dyn_$listenerCount$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<listenerCount>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GTDelayedExec::dyn_$ITickSystemTick_TickRunning$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::dyn_$ITickSystemTick_TickRunning$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ITickSystemTick.TickRunning>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GTDelayedExec.get_instance
::GlobalNamespace::GTDelayedExec* GlobalNamespace::GTDelayedExec::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDelayedExec", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GTDelayedExec*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTDelayedExec.set_instance
void GlobalNamespace::GTDelayedExec::set_instance(::GlobalNamespace::GTDelayedExec* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::set_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDelayedExec", "set_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: GTDelayedExec.get_listenerCount
int GlobalNamespace::GTDelayedExec::get_listenerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::get_listenerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_listenerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: GTDelayedExec.set_listenerCount
void GlobalNamespace::GTDelayedExec::set_listenerCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::set_listenerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_listenerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GTDelayedExec.InitializeAfterAssemblies
void GlobalNamespace::GTDelayedExec::InitializeAfterAssemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::InitializeAfterAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDelayedExec", "InitializeAfterAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTDelayedExec.Add
void GlobalNamespace::GTDelayedExec::Add(::GlobalNamespace::IDelayedExecListener* listener, float delay, int contextId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDelayedExec", "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener), ::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(contextId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, listener, delay, contextId);
}
// Autogenerated method: GTDelayedExec.ITickSystemTick.get_TickRunning
bool GlobalNamespace::GTDelayedExec::ITickSystemTick_get_TickRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::ITickSystemTick.get_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTDelayedExec*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GTDelayedExec.ITickSystemTick.set_TickRunning
void GlobalNamespace::GTDelayedExec::ITickSystemTick_set_TickRunning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::ITickSystemTick.set_TickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTDelayedExec*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GTDelayedExec.ITickSystemTick.Tick
void GlobalNamespace::GTDelayedExec::ITickSystemTick_Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::ITickSystemTick.Tick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTDelayedExec*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTDelayedExec..cctor
void GlobalNamespace::GTDelayedExec::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTDelayedExec", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTDelayedExec/Listener
#include "GlobalNamespace/GTDelayedExec.hpp"
// Including type: IDelayedExecListener
#include "GlobalNamespace/IDelayedExecListener.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly IDelayedExecListener listener
[[deprecated("Use field access instead!")]] ::GlobalNamespace::IDelayedExecListener*& GlobalNamespace::GTDelayedExec::Listener::dyn_listener() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::Listener::dyn_listener");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "listener"))->offset;
  return *reinterpret_cast<::GlobalNamespace::IDelayedExecListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 contextId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTDelayedExec::Listener::dyn_contextId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTDelayedExec::Listener::dyn_contextId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "contextId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GTDelayedExec/Listener..ctor
// ABORTED elsewhere.  GlobalNamespace::GTDelayedExec::Listener::Listener(::GlobalNamespace::IDelayedExecListener* listener, int contextId)
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: IUserCosmeticsCallback
#include "GlobalNamespace/IUserCosmeticsCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IUserCosmeticsCallback.OnGetUserCosmetics
bool GlobalNamespace::IUserCosmeticsCallback::OnGetUserCosmetics(::StringW cosmetics) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IUserCosmeticsCallback::OnGetUserCosmetics");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IUserCosmeticsCallback*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, cosmetics);
}
// Autogenerated method: IUserCosmeticsCallback.get_PendingUpdate
bool GlobalNamespace::IUserCosmeticsCallback::get_PendingUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IUserCosmeticsCallback::get_PendingUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IUserCosmeticsCallback*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IUserCosmeticsCallback.set_PendingUpdate
void GlobalNamespace::IUserCosmeticsCallback::set_PendingUpdate(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IUserCosmeticsCallback::set_PendingUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IUserCosmeticsCallback*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlayerCosmeticsSystem
#include "GlobalNamespace/PlayerCosmeticsSystem.hpp"
// Including type: PlayerCosmeticsSystem/<>c
#include "GlobalNamespace/PlayerCosmeticsSystem_--c.hpp"
// Including type: PlayerCosmeticsSystem/<>c__DisplayClass16_0
#include "GlobalNamespace/PlayerCosmeticsSystem_--c__DisplayClass16_0.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: RigContainer
#include "GlobalNamespace/RigContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: IUserCosmeticsCallback
#include "GlobalNamespace/IUserCosmeticsCallback.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: PlayFab.ClientModels.GetSharedGroupDataResult
#include "PlayFab/ClientModels/GetSharedGroupDataResult.hpp"
// Including type: ExitGames.Client.Photon.EventData
#include "ExitGames/Client/Photon/EventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private PlayerCosmeticsSystem instance
::GlobalNamespace::PlayerCosmeticsSystem* GlobalNamespace::PlayerCosmeticsSystem::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PlayerCosmeticsSystem*>("", "PlayerCosmeticsSystem", "instance"));
}
// Autogenerated static field setter
// Set static field: static private PlayerCosmeticsSystem instance
void GlobalNamespace::PlayerCosmeticsSystem::_set_instance(::GlobalNamespace::PlayerCosmeticsSystem* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem", "instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Queue`1<Photon.Realtime.Player> playersToLookUp
::System::Collections::Generic::Queue_1<::Photon::Realtime::Player*>* GlobalNamespace::PlayerCosmeticsSystem::_get_playersToLookUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_get_playersToLookUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::Queue_1<::Photon::Realtime::Player*>*>("", "PlayerCosmeticsSystem", "playersToLookUp"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Queue`1<Photon.Realtime.Player> playersToLookUp
void GlobalNamespace::PlayerCosmeticsSystem::_set_playersToLookUp(::System::Collections::Generic::Queue_1<::Photon::Realtime::Player*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_set_playersToLookUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem", "playersToLookUp", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,IUserCosmeticsCallback> userCosmeticCallback
::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::IUserCosmeticsCallback*>* GlobalNamespace::PlayerCosmeticsSystem::_get_userCosmeticCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_get_userCosmeticCallback");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::IUserCosmeticsCallback*>*>("", "PlayerCosmeticsSystem", "userCosmeticCallback")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,IUserCosmeticsCallback> userCosmeticCallback
void GlobalNamespace::PlayerCosmeticsSystem::_set_userCosmeticCallback(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::IUserCosmeticsCallback*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_set_userCosmeticCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem", "userCosmeticCallback", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> userCosmeticsWaiting
::System::Collections::Generic::Dictionary_2<int, ::StringW>* GlobalNamespace::PlayerCosmeticsSystem::_get_userCosmeticsWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_get_userCosmeticsWaiting");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, ::StringW>*>("", "PlayerCosmeticsSystem", "userCosmeticsWaiting")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> userCosmeticsWaiting
void GlobalNamespace::PlayerCosmeticsSystem::_set_userCosmeticsWaiting(::System::Collections::Generic::Dictionary_2<int, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_set_userCosmeticsWaiting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem", "userCosmeticsWaiting", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.String> playerIDsList
::System::Collections::Generic::List_1<::StringW>* GlobalNamespace::PlayerCosmeticsSystem::_get_playerIDsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_get_playerIDsList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::StringW>*>("", "PlayerCosmeticsSystem", "playerIDsList"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.String> playerIDsList
void GlobalNamespace::PlayerCosmeticsSystem::_set_playerIDsList(::System::Collections::Generic::List_1<::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_set_playerIDsList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem", "playerIDsList", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> playersWaiting
::System::Collections::Generic::HashSet_1<int>* GlobalNamespace::PlayerCosmeticsSystem::_get_playersWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_get_playersWaiting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<int>*>("", "PlayerCosmeticsSystem", "playersWaiting"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> playersWaiting
void GlobalNamespace::PlayerCosmeticsSystem::_set_playersWaiting(::System::Collections::Generic::HashSet_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::_set_playersWaiting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem", "playersWaiting", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ITickSystemPre.PreTickRunning>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlayerCosmeticsSystem::dyn_$ITickSystemPre_PreTickRunning$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::dyn_$ITickSystemPre_PreTickRunning$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ITickSystemPre.PreTickRunning>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single playerLookUpCooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlayerCosmeticsSystem::dyn_playerLookUpCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::dyn_playerLookUpCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerLookUpCooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single startSearchingTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlayerCosmeticsSystem::dyn_startSearchingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::dyn_startSearchingTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startSearchingTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isLookingUp
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlayerCosmeticsSystem::dyn_isLookingUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::dyn_isLookingUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isLookingUp"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String tempCosmetics
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::PlayerCosmeticsSystem::dyn_tempCosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::dyn_tempCosmetics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempCosmetics"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Realtime.Player playerTemp
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::PlayerCosmeticsSystem::dyn_playerTemp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::dyn_playerTemp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerTemp"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RigContainer tempRC
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& GlobalNamespace::PlayerCosmeticsSystem::dyn_tempRC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::dyn_tempRC");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempRC"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RigContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.String> inventory
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::PlayerCosmeticsSystem::dyn_inventory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::dyn_inventory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inventory"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlayerCosmeticsSystem.ITickSystemPre.get_PreTickRunning
bool GlobalNamespace::PlayerCosmeticsSystem::ITickSystemPre_get_PreTickRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::ITickSystemPre.get_PreTickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PlayerCosmeticsSystem*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerCosmeticsSystem.ITickSystemPre.set_PreTickRunning
void GlobalNamespace::PlayerCosmeticsSystem::ITickSystemPre_set_PreTickRunning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::ITickSystemPre.set_PreTickRunning");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PlayerCosmeticsSystem*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayerCosmeticsSystem.Awake
void GlobalNamespace::PlayerCosmeticsSystem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerCosmeticsSystem.Start
void GlobalNamespace::PlayerCosmeticsSystem::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerCosmeticsSystem.OnDestroy
void GlobalNamespace::PlayerCosmeticsSystem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerCosmeticsSystem.LookUpPlayerCosmetics
void GlobalNamespace::PlayerCosmeticsSystem::LookUpPlayerCosmetics(bool wait) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::LookUpPlayerCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookUpPlayerCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(wait)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, wait);
}
// Autogenerated method: PlayerCosmeticsSystem.PreTick
void GlobalNamespace::PlayerCosmeticsSystem::PreTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::PreTick");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PlayerCosmeticsSystem*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayerCosmeticsSystem.NewCosmeticsPath
void GlobalNamespace::PlayerCosmeticsSystem::NewCosmeticsPath(::Photon::Realtime::Player* player, int firstEntryId) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::NewCosmeticsPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NewCosmeticsPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(firstEntryId)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player, firstEntryId);
}
// Autogenerated method: PlayerCosmeticsSystem.OnGetsharedGroupData
void GlobalNamespace::PlayerCosmeticsSystem::OnGetsharedGroupData(::PlayFab::ClientModels::GetSharedGroupDataResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::OnGetsharedGroupData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGetsharedGroupData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: PlayerCosmeticsSystem.OnEvent
void GlobalNamespace::PlayerCosmeticsSystem::OnEvent(::ExitGames::Client::Photon::EventData* evData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::OnEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evData);
}
// Autogenerated method: PlayerCosmeticsSystem.get_nullInstance
bool GlobalNamespace::PlayerCosmeticsSystem::get_nullInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::get_nullInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerCosmeticsSystem", "get_nullInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PlayerCosmeticsSystem.RegisterCosmeticCallback
void GlobalNamespace::PlayerCosmeticsSystem::RegisterCosmeticCallback(int playerID, ::GlobalNamespace::IUserCosmeticsCallback* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::RegisterCosmeticCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerCosmeticsSystem", "RegisterCosmeticCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerID), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, playerID, callback);
}
// Autogenerated method: PlayerCosmeticsSystem.RemoveCosmeticCallback
void GlobalNamespace::PlayerCosmeticsSystem::RemoveCosmeticCallback(int playerID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::RemoveCosmeticCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerCosmeticsSystem", "RemoveCosmeticCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerID)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, playerID);
}
// Autogenerated method: PlayerCosmeticsSystem.UpdatePlayerCosmetics
void GlobalNamespace::PlayerCosmeticsSystem::UpdatePlayerCosmetics(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::UpdatePlayerCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerCosmeticsSystem", "UpdatePlayerCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, player);
}
// Autogenerated method: PlayerCosmeticsSystem.UpdatePlayerCosmetics
void GlobalNamespace::PlayerCosmeticsSystem::UpdatePlayerCosmetics(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* players) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::UpdatePlayerCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerCosmeticsSystem", "UpdatePlayerCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(players)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, players);
}
// Autogenerated method: PlayerCosmeticsSystem.StaticReset
void GlobalNamespace::PlayerCosmeticsSystem::StaticReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::StaticReset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerCosmeticsSystem", "StaticReset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PlayerCosmeticsSystem..cctor
void GlobalNamespace::PlayerCosmeticsSystem::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerCosmeticsSystem", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlayerCosmeticsSystem/<>c
#include "GlobalNamespace/PlayerCosmeticsSystem_--c.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: PlayFab.PlayFabError
#include "PlayFab/PlayFabError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly PlayerCosmeticsSystem/<>c <>9
::GlobalNamespace::PlayerCosmeticsSystem::$$c* GlobalNamespace::PlayerCosmeticsSystem::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::PlayerCosmeticsSystem::$$c*>("", "PlayerCosmeticsSystem/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly PlayerCosmeticsSystem/<>c <>9
void GlobalNamespace::PlayerCosmeticsSystem::$$c::_set_$$9(::GlobalNamespace::PlayerCosmeticsSystem::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<PlayFab.PlayFabError> <>9__15_0
::System::Action_1<::PlayFab::PlayFabError*>* GlobalNamespace::PlayerCosmeticsSystem::$$c::_get_$$9__15_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::_get_$$9__15_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::PlayFab::PlayFabError*>*>("", "PlayerCosmeticsSystem/<>c", "<>9__15_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<PlayFab.PlayFabError> <>9__15_0
void GlobalNamespace::PlayerCosmeticsSystem::$$c::_set_$$9__15_0(::System::Action_1<::PlayFab::PlayFabError*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::_set_$$9__15_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem/<>c", "<>9__15_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<PlayFab.PlayFabError> <>9__16_1
::System::Action_1<::PlayFab::PlayFabError*>* GlobalNamespace::PlayerCosmeticsSystem::$$c::_get_$$9__16_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::_get_$$9__16_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::PlayFab::PlayFabError*>*>("", "PlayerCosmeticsSystem/<>c", "<>9__16_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<PlayFab.PlayFabError> <>9__16_1
void GlobalNamespace::PlayerCosmeticsSystem::$$c::_set_$$9__16_1(::System::Action_1<::PlayFab::PlayFabError*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::_set_$$9__16_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PlayerCosmeticsSystem/<>c", "<>9__16_1", value)));
}
// Autogenerated method: PlayerCosmeticsSystem/<>c..cctor
void GlobalNamespace::PlayerCosmeticsSystem::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayerCosmeticsSystem/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: PlayerCosmeticsSystem/<>c.<PreTick>b__15_0
void GlobalNamespace::PlayerCosmeticsSystem::$$c::$PreTick$b__15_0(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::<PreTick>b__15_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PreTick>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
// Autogenerated method: PlayerCosmeticsSystem/<>c.<NewCosmeticsPath>b__16_1
void GlobalNamespace::PlayerCosmeticsSystem::$$c::$NewCosmeticsPath$b__16_1(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerCosmeticsSystem::$$c::<NewCosmeticsPath>b__16_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<NewCosmeticsPath>b__16_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
