// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TextElementType
#include "TMPro/TextElementType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TextElementType Character
::TMPro::TextElementType TMPro::TextElementType::_get_Character() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TextElementType::_get_Character");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::TextElementType>("TMPro", "TextElementType", "Character"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextElementType Character
void TMPro::TextElementType::_set_Character(::TMPro::TextElementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TextElementType::_set_Character");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextElementType", "Character", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextElementType Sprite
::TMPro::TextElementType TMPro::TextElementType::_get_Sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TextElementType::_get_Sprite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::TextElementType>("TMPro", "TextElementType", "Sprite"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextElementType Sprite
void TMPro::TextElementType::_set_Sprite(::TMPro::TextElementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TextElementType::_set_Sprite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextElementType", "Sprite", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TextElementType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TextElementType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextElement
#include "TMPro/TMP_TextElement.hpp"
// Including type: TMPro.TMP_Asset
#include "TMPro/TMP_Asset.hpp"
// Including type: UnityEngine.TextCore.Glyph
#include "UnityEngine/TextCore/Glyph.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected TMPro.TextElementType m_ElementType
[[deprecated("Use field access instead!")]] ::TMPro::TextElementType& TMPro::TMP_TextElement::dyn_m_ElementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::dyn_m_ElementType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ElementType"))->offset;
  return *reinterpret_cast<::TMPro::TextElementType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.UInt32 m_Unicode
[[deprecated("Use field access instead!")]] uint& TMPro::TMP_TextElement::dyn_m_Unicode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::dyn_m_Unicode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Unicode"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: TMPro.TMP_Asset m_TextAsset
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Asset*& TMPro::TMP_TextElement::dyn_m_TextAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::dyn_m_TextAsset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TextAsset"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Asset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.TextCore.Glyph m_Glyph
[[deprecated("Use field access instead!")]] ::UnityEngine::TextCore::Glyph*& TMPro::TMP_TextElement::dyn_m_Glyph() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::dyn_m_Glyph");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Glyph"))->offset;
  return *reinterpret_cast<::UnityEngine::TextCore::Glyph**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.UInt32 m_GlyphIndex
[[deprecated("Use field access instead!")]] uint& TMPro::TMP_TextElement::dyn_m_GlyphIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::dyn_m_GlyphIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GlyphIndex"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Single m_Scale
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement::dyn_m_Scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::dyn_m_Scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.TMP_TextElement.get_elementType
::TMPro::TextElementType TMPro::TMP_TextElement::get_elementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::get_elementType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_elementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::TMPro::TextElementType, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.get_unicode
uint TMPro::TMP_TextElement::get_unicode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::get_unicode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_unicode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_unicode
void TMPro::TMP_TextElement::set_unicode(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::set_unicode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_unicode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_TextElement.get_textAsset
::TMPro::TMP_Asset* TMPro::TMP_TextElement::get_textAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::get_textAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::TMPro::TMP_Asset*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_textAsset
void TMPro::TMP_TextElement::set_textAsset(::TMPro::TMP_Asset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::set_textAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_textAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_TextElement.get_glyph
::UnityEngine::TextCore::Glyph* TMPro::TMP_TextElement::get_glyph() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::get_glyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::TextCore::Glyph*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_glyph
void TMPro::TMP_TextElement::set_glyph(::UnityEngine::TextCore::Glyph* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::set_glyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_TextElement.get_glyphIndex
uint TMPro::TMP_TextElement::get_glyphIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::get_glyphIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glyphIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_glyphIndex
void TMPro::TMP_TextElement::set_glyphIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::set_glyphIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glyphIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_TextElement.get_scale
float TMPro::TMP_TextElement::get_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::get_scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_scale
void TMPro::TMP_TextElement::set_scale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement::set_scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextElement_Legacy
#include "TMPro/TMP_TextElement_Legacy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 id
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextElement_Legacy::dyn_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single x
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement_Legacy::dyn_x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_x");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "x"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single y
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement_Legacy::dyn_y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "y"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single width
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement_Legacy::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single height
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement_Legacy::dyn_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "height"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single xOffset
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement_Legacy::dyn_xOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_xOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "xOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single yOffset
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement_Legacy::dyn_yOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_yOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "yOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single xAdvance
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement_Legacy::dyn_xAdvance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_xAdvance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "xAdvance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scale
[[deprecated("Use field access instead!")]] float& TMPro::TMP_TextElement_Legacy::dyn_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextElement_Legacy::dyn_scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextInfo
#include "TMPro/TMP_TextInfo.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static UnityEngine.Vector2 k_InfinityVectorPositive
::UnityEngine::Vector2 TMPro::TMP_TextInfo::_get_k_InfinityVectorPositive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::_get_k_InfinityVectorPositive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector2>("TMPro", "TMP_TextInfo", "k_InfinityVectorPositive"));
}
// Autogenerated static field setter
// Set static field: static UnityEngine.Vector2 k_InfinityVectorPositive
void TMPro::TMP_TextInfo::_set_k_InfinityVectorPositive(::UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::_set_k_InfinityVectorPositive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextInfo", "k_InfinityVectorPositive", value));
}
// Autogenerated static field getter
// Get static field: static UnityEngine.Vector2 k_InfinityVectorNegative
::UnityEngine::Vector2 TMPro::TMP_TextInfo::_get_k_InfinityVectorNegative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::_get_k_InfinityVectorNegative");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector2>("TMPro", "TMP_TextInfo", "k_InfinityVectorNegative"));
}
// Autogenerated static field setter
// Set static field: static UnityEngine.Vector2 k_InfinityVectorNegative
void TMPro::TMP_TextInfo::_set_k_InfinityVectorNegative(::UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::_set_k_InfinityVectorNegative");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextInfo", "k_InfinityVectorNegative", value));
}
// Autogenerated instance field getter
// Get instance field: public TMPro.TMP_Text textComponent
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& TMPro::TMP_TextInfo::dyn_textComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_textComponent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textComponent"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 characterCount
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextInfo::dyn_characterCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_characterCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 spriteCount
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextInfo::dyn_spriteCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_spriteCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spriteCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 spaceCount
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextInfo::dyn_spaceCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_spaceCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spaceCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 wordCount
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextInfo::dyn_wordCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_wordCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wordCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 linkCount
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextInfo::dyn_linkCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_linkCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linkCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 lineCount
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextInfo::dyn_lineCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_lineCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 pageCount
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextInfo::dyn_pageCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_pageCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pageCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 materialCount
[[deprecated("Use field access instead!")]] int& TMPro::TMP_TextInfo::dyn_materialCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_materialCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "materialCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TMPro.TMP_CharacterInfo[] characterInfo
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_CharacterInfo>& TMPro::TMP_TextInfo::dyn_characterInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_characterInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterInfo"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TMP_CharacterInfo>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TMPro.TMP_WordInfo[] wordInfo
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_WordInfo>& TMPro::TMP_TextInfo::dyn_wordInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_wordInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wordInfo"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TMP_WordInfo>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TMPro.TMP_LinkInfo[] linkInfo
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_LinkInfo>& TMPro::TMP_TextInfo::dyn_linkInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_linkInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linkInfo"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TMP_LinkInfo>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TMPro.TMP_LineInfo[] lineInfo
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_LineInfo>& TMPro::TMP_TextInfo::dyn_lineInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_lineInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineInfo"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TMP_LineInfo>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TMPro.TMP_PageInfo[] pageInfo
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_PageInfo>& TMPro::TMP_TextInfo::dyn_pageInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_pageInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pageInfo"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TMP_PageInfo>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TMPro.TMP_MeshInfo[] meshInfo
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_MeshInfo>& TMPro::TMP_TextInfo::dyn_meshInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_meshInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "meshInfo"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TMP_MeshInfo>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_MeshInfo[] m_CachedMeshInfo
[[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_MeshInfo>& TMPro::TMP_TextInfo::dyn_m_CachedMeshInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::dyn_m_CachedMeshInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CachedMeshInfo"))->offset;
  return *reinterpret_cast<::ArrayW<::TMPro::TMP_MeshInfo>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.TMP_TextInfo.Clear
void TMPro::TMP_TextInfo::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearAllData
void TMPro::TMP_TextInfo::ClearAllData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::ClearAllData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAllData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearMeshInfo
void TMPro::TMP_TextInfo::ClearMeshInfo(bool updateMesh) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::ClearMeshInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMeshInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateMesh)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, updateMesh);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearAllMeshInfo
void TMPro::TMP_TextInfo::ClearAllMeshInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::ClearAllMeshInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAllMeshInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo.ResetVertexLayout
void TMPro::TMP_TextInfo::ResetVertexLayout(bool isVolumetric) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::ResetVertexLayout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetVertexLayout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isVolumetric)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isVolumetric);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearUnusedVertices
void TMPro::TMP_TextInfo::ClearUnusedVertices(::ArrayW<::TMPro::MaterialReference> materials) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::ClearUnusedVertices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearUnusedVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materials)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, materials);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearLineInfo
void TMPro::TMP_TextInfo::ClearLineInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::ClearLineInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLineInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearPageInfo
void TMPro::TMP_TextInfo::ClearPageInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::ClearPageInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPageInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo.CopyMeshInfoVertexData
::ArrayW<::TMPro::TMP_MeshInfo> TMPro::TMP_TextInfo::CopyMeshInfoVertexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::CopyMeshInfoVertexData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyMeshInfoVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::TMPro::TMP_MeshInfo>, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo..cctor
void TMPro::TMP_TextInfo::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextInfo::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextInfo", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextParsingUtilities
#include "TMPro/TMP_TextParsingUtilities.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly TMPro.TMP_TextParsingUtilities s_Instance
::TMPro::TMP_TextParsingUtilities* TMPro::TMP_TextParsingUtilities::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::TMP_TextParsingUtilities*>("TMPro", "TMP_TextParsingUtilities", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private readonly TMPro.TMP_TextParsingUtilities s_Instance
void TMPro::TMP_TextParsingUtilities::_set_s_Instance(::TMPro::TMP_TextParsingUtilities* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextParsingUtilities", "s_Instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_LookupStringL
::StringW TMPro::TMP_TextParsingUtilities::_get_k_LookupStringL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::_get_k_LookupStringL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("TMPro", "TMP_TextParsingUtilities", "k_LookupStringL"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_LookupStringL
void TMPro::TMP_TextParsingUtilities::_set_k_LookupStringL(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::_set_k_LookupStringL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextParsingUtilities", "k_LookupStringL", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_LookupStringU
::StringW TMPro::TMP_TextParsingUtilities::_get_k_LookupStringU() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::_get_k_LookupStringU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("TMPro", "TMP_TextParsingUtilities", "k_LookupStringU"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_LookupStringU
void TMPro::TMP_TextParsingUtilities::_set_k_LookupStringU(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::_set_k_LookupStringU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextParsingUtilities", "k_LookupStringU", value));
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities..cctor
void TMPro::TMP_TextParsingUtilities::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.get_instance
::TMPro::TMP_TextParsingUtilities* TMPro::TMP_TextParsingUtilities::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::TMPro::TMP_TextParsingUtilities*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.GetHashCode
int TMPro::TMP_TextParsingUtilities::GetHashCode(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::GetHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.GetHashCodeCaseSensitive
int TMPro::TMP_TextParsingUtilities::GetHashCodeCaseSensitive(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::GetHashCodeCaseSensitive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "GetHashCodeCaseSensitive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ToLowerASCIIFast
::Il2CppChar TMPro::TMP_TextParsingUtilities::ToLowerASCIIFast(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::ToLowerASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ToLowerASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ToUpperASCIIFast
::Il2CppChar TMPro::TMP_TextParsingUtilities::ToUpperASCIIFast(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::ToUpperASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ToUpperASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ToUpperASCIIFast
uint TMPro::TMP_TextParsingUtilities::ToUpperASCIIFast(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::ToUpperASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ToUpperASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ToLowerASCIIFast
uint TMPro::TMP_TextParsingUtilities::ToLowerASCIIFast(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::ToLowerASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ToLowerASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.IsHighSurrogate
bool TMPro::TMP_TextParsingUtilities::IsHighSurrogate(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::IsHighSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "IsHighSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.IsLowSurrogate
bool TMPro::TMP_TextParsingUtilities::IsLowSurrogate(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::IsLowSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "IsLowSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ConvertToUTF32
uint TMPro::TMP_TextParsingUtilities::ConvertToUTF32(uint highSurrogate, uint lowSurrogate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextParsingUtilities::ConvertToUTF32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ConvertToUTF32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highSurrogate), ::il2cpp_utils::ExtractType(lowSurrogate)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, highSurrogate, lowSurrogate);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_FontStyleStack
#include "TMPro/TMP_FontStyleStack.hpp"
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte bold
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_bold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_bold");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bold"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte italic
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_italic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_italic");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "italic"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte underline
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_underline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_underline");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "underline"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte strikethrough
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_strikethrough() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_strikethrough");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strikethrough"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte highlight
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_highlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_highlight");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "highlight"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte superscript
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_superscript() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_superscript");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "superscript"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte subscript
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_subscript() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_subscript");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subscript"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte uppercase
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_uppercase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_uppercase");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uppercase"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte lowercase
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_lowercase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_lowercase");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lowercase"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte smallcaps
[[deprecated("Use field access instead!")]] uint8_t& TMPro::TMP_FontStyleStack::dyn_smallcaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::dyn_smallcaps");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "smallcaps"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.TMP_FontStyleStack.Clear
void TMPro::TMP_FontStyleStack::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontStyleStack.Add
uint8_t TMPro::TMP_FontStyleStack::Add(::TMPro::FontStyles style) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method, style);
}
// Autogenerated method: TMPro.TMP_FontStyleStack.Remove
uint8_t TMPro::TMP_FontStyleStack::Remove(::TMPro::FontStyles style) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_FontStyleStack::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method, style);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.CaretPosition
#include "TMPro/CaretPosition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.CaretPosition None
::TMPro::CaretPosition TMPro::CaretPosition::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretPosition::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::CaretPosition>("TMPro", "CaretPosition", "None"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.CaretPosition None
void TMPro::CaretPosition::_set_None(::TMPro::CaretPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretPosition::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "CaretPosition", "None", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.CaretPosition Left
::TMPro::CaretPosition TMPro::CaretPosition::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretPosition::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::CaretPosition>("TMPro", "CaretPosition", "Left"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.CaretPosition Left
void TMPro::CaretPosition::_set_Left(::TMPro::CaretPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretPosition::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "CaretPosition", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.CaretPosition Right
::TMPro::CaretPosition TMPro::CaretPosition::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretPosition::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::CaretPosition>("TMPro", "CaretPosition", "Right"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.CaretPosition Right
void TMPro::CaretPosition::_set_Right(::TMPro::CaretPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretPosition::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "CaretPosition", "Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& TMPro::CaretPosition::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretPosition::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.CaretInfo
#include "TMPro/CaretInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 index
[[deprecated("Use field access instead!")]] int& TMPro::CaretInfo::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretInfo::dyn_index");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TMPro.CaretPosition position
[[deprecated("Use field access instead!")]] ::TMPro::CaretPosition& TMPro::CaretInfo::dyn_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::CaretInfo::dyn_position");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "position"))->offset;
  return *reinterpret_cast<::TMPro::CaretPosition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.CaretInfo..ctor
// ABORTED elsewhere.  TMPro::CaretInfo::CaretInfo(int index, ::TMPro::CaretPosition position)
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextUtilities
#include "TMPro/TMP_TextUtilities.hpp"
// Including type: TMPro.TMP_TextUtilities/LineSegment
#include "TMPro/TMP_TextUtilities_LineSegment.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: TMPro.CaretPosition
#include "TMPro/CaretPosition.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector3[] m_rectWorldCorners
::ArrayW<::UnityEngine::Vector3> TMPro::TMP_TextUtilities::_get_m_rectWorldCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::_get_m_rectWorldCorners");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Vector3>>("TMPro", "TMP_TextUtilities", "m_rectWorldCorners"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector3[] m_rectWorldCorners
void TMPro::TMP_TextUtilities::_set_m_rectWorldCorners(::ArrayW<::UnityEngine::Vector3> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::_set_m_rectWorldCorners");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "m_rectWorldCorners", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_lookupStringL
::StringW TMPro::TMP_TextUtilities::_get_k_lookupStringL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::_get_k_lookupStringL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("TMPro", "TMP_TextUtilities", "k_lookupStringL"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_lookupStringL
void TMPro::TMP_TextUtilities::_set_k_lookupStringL(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::_set_k_lookupStringL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "k_lookupStringL", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_lookupStringU
::StringW TMPro::TMP_TextUtilities::_get_k_lookupStringU() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::_get_k_lookupStringU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("TMPro", "TMP_TextUtilities", "k_lookupStringU"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_lookupStringU
void TMPro::TMP_TextUtilities::_set_k_lookupStringU(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::_set_k_lookupStringU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "k_lookupStringU", value));
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetCursorIndexFromPosition
int TMPro::TMP_TextUtilities::GetCursorIndexFromPosition(::TMPro::TMP_Text* textComponent, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::GetCursorIndexFromPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetCursorIndexFromPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textComponent), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, textComponent, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetCursorIndexFromPosition
int TMPro::TMP_TextUtilities::GetCursorIndexFromPosition(::TMPro::TMP_Text* textComponent, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera, ByRef<::TMPro::CaretPosition> cursor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::GetCursorIndexFromPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetCursorIndexFromPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textComponent), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractIndependentType<::TMPro::CaretPosition&>()})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, textComponent, position, camera, byref(cursor));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestLine
int TMPro::TMP_TextUtilities::FindNearestLine(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindNearestLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestCharacterOnLine
int TMPro::TMP_TextUtilities::FindNearestCharacterOnLine(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, int line, ::UnityEngine::Camera* camera, bool visibleOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindNearestCharacterOnLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestCharacterOnLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(line), ::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractType(visibleOnly)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, line, camera, visibleOnly);
}
// Autogenerated method: TMPro.TMP_TextUtilities.IsIntersectingRectTransform
bool TMPro::TMP_TextUtilities::IsIntersectingRectTransform(::UnityEngine::RectTransform* rectTransform, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::IsIntersectingRectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "IsIntersectingRectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rectTransform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rectTransform, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingCharacter
int TMPro::TMP_TextUtilities::FindIntersectingCharacter(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera, bool visibleOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindIntersectingCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindIntersectingCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractType(visibleOnly)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, camera, visibleOnly);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestCharacter
int TMPro::TMP_TextUtilities::FindNearestCharacter(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera, bool visibleOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindNearestCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractType(visibleOnly)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, camera, visibleOnly);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingWord
int TMPro::TMP_TextUtilities::FindIntersectingWord(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindIntersectingWord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindIntersectingWord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestWord
int TMPro::TMP_TextUtilities::FindNearestWord(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindNearestWord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestWord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingLine
int TMPro::TMP_TextUtilities::FindIntersectingLine(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindIntersectingLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindIntersectingLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingLink
int TMPro::TMP_TextUtilities::FindIntersectingLink(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindIntersectingLink");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindIntersectingLink", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestLink
int TMPro::TMP_TextUtilities::FindNearestLink(::TMPro::TMP_Text* text, ::UnityEngine::Vector3 position, ::UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::FindNearestLink");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestLink", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.PointIntersectRectangle
bool TMPro::TMP_TextUtilities::PointIntersectRectangle(::UnityEngine::Vector3 m, ::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 d) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::PointIntersectRectangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "PointIntersectRectangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, m, a, b, c, d);
}
// Autogenerated method: TMPro.TMP_TextUtilities.ScreenPointToWorldPointInRectangle
bool TMPro::TMP_TextUtilities::ScreenPointToWorldPointInRectangle(::UnityEngine::Transform* transform, ::UnityEngine::Vector2 screenPoint, ::UnityEngine::Camera* cam, ByRef<::UnityEngine::Vector3> worldPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::ScreenPointToWorldPointInRectangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "ScreenPointToWorldPointInRectangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(screenPoint), ::il2cpp_utils::ExtractType(cam), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform, screenPoint, cam, byref(worldPoint));
}
// Autogenerated method: TMPro.TMP_TextUtilities.IntersectLinePlane
bool TMPro::TMP_TextUtilities::IntersectLinePlane(::TMPro::TMP_TextUtilities::LineSegment line, ::UnityEngine::Vector3 point, ::UnityEngine::Vector3 normal, ByRef<::UnityEngine::Vector3> intersectingPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::IntersectLinePlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "IntersectLinePlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(line), ::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, line, point, normal, byref(intersectingPoint));
}
// Autogenerated method: TMPro.TMP_TextUtilities.DistanceToLine
float TMPro::TMP_TextUtilities::DistanceToLine(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::DistanceToLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "DistanceToLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b, point);
}
// Autogenerated method: TMPro.TMP_TextUtilities.ToLowerFast
::Il2CppChar TMPro::TMP_TextUtilities::ToLowerFast(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::ToLowerFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "ToLowerFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextUtilities.ToUpperFast
::Il2CppChar TMPro::TMP_TextUtilities::ToUpperFast(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::ToUpperFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "ToUpperFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextUtilities.ToUpperASCIIFast
uint TMPro::TMP_TextUtilities::ToUpperASCIIFast(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::ToUpperASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "ToUpperASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetHashCode
int TMPro::TMP_TextUtilities::GetHashCode(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::GetHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetSimpleHashCode
int TMPro::TMP_TextUtilities::GetSimpleHashCode(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::GetSimpleHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetSimpleHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetSimpleHashCodeLowercase
uint TMPro::TMP_TextUtilities::GetSimpleHashCodeLowercase(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::GetSimpleHashCodeLowercase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetSimpleHashCodeLowercase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextUtilities.HexToInt
int TMPro::TMP_TextUtilities::HexToInt(::Il2CppChar hex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::HexToInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "HexToInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hex)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hex);
}
// Autogenerated method: TMPro.TMP_TextUtilities.StringHexToInt
int TMPro::TMP_TextUtilities::StringHexToInt(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::StringHexToInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "StringHexToInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextUtilities..cctor
void TMPro::TMP_TextUtilities::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextUtilities/LineSegment
#include "TMPro/TMP_TextUtilities_LineSegment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 Point1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& TMPro::TMP_TextUtilities::LineSegment::dyn_Point1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::LineSegment::dyn_Point1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Point1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 Point2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& TMPro::TMP_TextUtilities::LineSegment::dyn_Point2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_TextUtilities::LineSegment::dyn_Point2");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Point2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.TMP_TextUtilities/LineSegment..ctor
// ABORTED elsewhere.  TMPro::TMP_TextUtilities::LineSegment::LineSegment(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2)
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_UpdateManager
#include "TMPro/TMP_UpdateManager.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private TMPro.TMP_UpdateManager s_Instance
::TMPro::TMP_UpdateManager* TMPro::TMP_UpdateManager::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::TMP_UpdateManager*>("TMPro", "TMP_UpdateManager", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private TMPro.TMP_UpdateManager s_Instance
void TMPro::TMP_UpdateManager::_set_s_Instance(::TMPro::TMP_UpdateManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateManager", "s_Instance", value));
}
// Autogenerated static field getter
// Get static field: static private Unity.Profiling.ProfilerMarker k_RegisterTextObjectForUpdateMarker
::Unity::Profiling::ProfilerMarker TMPro::TMP_UpdateManager::_get_k_RegisterTextObjectForUpdateMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_get_k_RegisterTextObjectForUpdateMarker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Unity::Profiling::ProfilerMarker>("TMPro", "TMP_UpdateManager", "k_RegisterTextObjectForUpdateMarker"));
}
// Autogenerated static field setter
// Set static field: static private Unity.Profiling.ProfilerMarker k_RegisterTextObjectForUpdateMarker
void TMPro::TMP_UpdateManager::_set_k_RegisterTextObjectForUpdateMarker(::Unity::Profiling::ProfilerMarker value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_set_k_RegisterTextObjectForUpdateMarker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateManager", "k_RegisterTextObjectForUpdateMarker", value));
}
// Autogenerated static field getter
// Get static field: static private Unity.Profiling.ProfilerMarker k_RegisterTextElementForGraphicRebuildMarker
::Unity::Profiling::ProfilerMarker TMPro::TMP_UpdateManager::_get_k_RegisterTextElementForGraphicRebuildMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_get_k_RegisterTextElementForGraphicRebuildMarker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Unity::Profiling::ProfilerMarker>("TMPro", "TMP_UpdateManager", "k_RegisterTextElementForGraphicRebuildMarker"));
}
// Autogenerated static field setter
// Set static field: static private Unity.Profiling.ProfilerMarker k_RegisterTextElementForGraphicRebuildMarker
void TMPro::TMP_UpdateManager::_set_k_RegisterTextElementForGraphicRebuildMarker(::Unity::Profiling::ProfilerMarker value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_set_k_RegisterTextElementForGraphicRebuildMarker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateManager", "k_RegisterTextElementForGraphicRebuildMarker", value));
}
// Autogenerated static field getter
// Get static field: static private Unity.Profiling.ProfilerMarker k_RegisterTextElementForCullingUpdateMarker
::Unity::Profiling::ProfilerMarker TMPro::TMP_UpdateManager::_get_k_RegisterTextElementForCullingUpdateMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_get_k_RegisterTextElementForCullingUpdateMarker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Unity::Profiling::ProfilerMarker>("TMPro", "TMP_UpdateManager", "k_RegisterTextElementForCullingUpdateMarker"));
}
// Autogenerated static field setter
// Set static field: static private Unity.Profiling.ProfilerMarker k_RegisterTextElementForCullingUpdateMarker
void TMPro::TMP_UpdateManager::_set_k_RegisterTextElementForCullingUpdateMarker(::Unity::Profiling::ProfilerMarker value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_set_k_RegisterTextElementForCullingUpdateMarker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateManager", "k_RegisterTextElementForCullingUpdateMarker", value));
}
// Autogenerated static field getter
// Get static field: static private Unity.Profiling.ProfilerMarker k_UnregisterTextObjectForUpdateMarker
::Unity::Profiling::ProfilerMarker TMPro::TMP_UpdateManager::_get_k_UnregisterTextObjectForUpdateMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_get_k_UnregisterTextObjectForUpdateMarker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Unity::Profiling::ProfilerMarker>("TMPro", "TMP_UpdateManager", "k_UnregisterTextObjectForUpdateMarker"));
}
// Autogenerated static field setter
// Set static field: static private Unity.Profiling.ProfilerMarker k_UnregisterTextObjectForUpdateMarker
void TMPro::TMP_UpdateManager::_set_k_UnregisterTextObjectForUpdateMarker(::Unity::Profiling::ProfilerMarker value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_set_k_UnregisterTextObjectForUpdateMarker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateManager", "k_UnregisterTextObjectForUpdateMarker", value));
}
// Autogenerated static field getter
// Get static field: static private Unity.Profiling.ProfilerMarker k_UnregisterTextElementForGraphicRebuildMarker
::Unity::Profiling::ProfilerMarker TMPro::TMP_UpdateManager::_get_k_UnregisterTextElementForGraphicRebuildMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_get_k_UnregisterTextElementForGraphicRebuildMarker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Unity::Profiling::ProfilerMarker>("TMPro", "TMP_UpdateManager", "k_UnregisterTextElementForGraphicRebuildMarker"));
}
// Autogenerated static field setter
// Set static field: static private Unity.Profiling.ProfilerMarker k_UnregisterTextElementForGraphicRebuildMarker
void TMPro::TMP_UpdateManager::_set_k_UnregisterTextElementForGraphicRebuildMarker(::Unity::Profiling::ProfilerMarker value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::_set_k_UnregisterTextElementForGraphicRebuildMarker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateManager", "k_UnregisterTextElementForGraphicRebuildMarker", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.Int32> m_LayoutQueueLookup
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& TMPro::TMP_UpdateManager::dyn_m_LayoutQueueLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::dyn_m_LayoutQueueLookup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LayoutQueueLookup"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<TMPro.TMP_Text> m_LayoutRebuildQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::TMPro::TMP_Text*>*& TMPro::TMP_UpdateManager::dyn_m_LayoutRebuildQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::dyn_m_LayoutRebuildQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LayoutRebuildQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::TMPro::TMP_Text*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.Int32> m_GraphicQueueLookup
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& TMPro::TMP_UpdateManager::dyn_m_GraphicQueueLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::dyn_m_GraphicQueueLookup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GraphicQueueLookup"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<TMPro.TMP_Text> m_GraphicRebuildQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::TMPro::TMP_Text*>*& TMPro::TMP_UpdateManager::dyn_m_GraphicRebuildQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::dyn_m_GraphicRebuildQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GraphicRebuildQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::TMPro::TMP_Text*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.Int32> m_InternalUpdateLookup
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& TMPro::TMP_UpdateManager::dyn_m_InternalUpdateLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::dyn_m_InternalUpdateLookup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InternalUpdateLookup"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<TMPro.TMP_Text> m_InternalUpdateQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::TMPro::TMP_Text*>*& TMPro::TMP_UpdateManager::dyn_m_InternalUpdateQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::dyn_m_InternalUpdateQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InternalUpdateQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::TMPro::TMP_Text*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.Int32> m_CullingUpdateLookup
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& TMPro::TMP_UpdateManager::dyn_m_CullingUpdateLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::dyn_m_CullingUpdateLookup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CullingUpdateLookup"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<TMPro.TMP_Text> m_CullingUpdateQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::TMPro::TMP_Text*>*& TMPro::TMP_UpdateManager::dyn_m_CullingUpdateQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::dyn_m_CullingUpdateQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CullingUpdateQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::TMPro::TMP_Text*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.TMP_UpdateManager.get_instance
::TMPro::TMP_UpdateManager* TMPro::TMP_UpdateManager::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::TMPro::TMP_UpdateManager*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateManager.RegisterTextObjectForUpdate
void TMPro::TMP_UpdateManager::RegisterTextObjectForUpdate(::TMPro::TMP_Text* textObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::RegisterTextObjectForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "RegisterTextObjectForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, textObject);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalRegisterTextObjectForUpdate
void TMPro::TMP_UpdateManager::InternalRegisterTextObjectForUpdate(::TMPro::TMP_Text* textObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::InternalRegisterTextObjectForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterTextObjectForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, textObject);
}
// Autogenerated method: TMPro.TMP_UpdateManager.RegisterTextElementForLayoutRebuild
void TMPro::TMP_UpdateManager::RegisterTextElementForLayoutRebuild(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::RegisterTextElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "RegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalRegisterTextElementForLayoutRebuild
void TMPro::TMP_UpdateManager::InternalRegisterTextElementForLayoutRebuild(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::InternalRegisterTextElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.RegisterTextElementForGraphicRebuild
void TMPro::TMP_UpdateManager::RegisterTextElementForGraphicRebuild(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::RegisterTextElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "RegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalRegisterTextElementForGraphicRebuild
void TMPro::TMP_UpdateManager::InternalRegisterTextElementForGraphicRebuild(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::InternalRegisterTextElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.RegisterTextElementForCullingUpdate
void TMPro::TMP_UpdateManager::RegisterTextElementForCullingUpdate(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::RegisterTextElementForCullingUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "RegisterTextElementForCullingUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalRegisterTextElementForCullingUpdate
void TMPro::TMP_UpdateManager::InternalRegisterTextElementForCullingUpdate(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::InternalRegisterTextElementForCullingUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterTextElementForCullingUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.OnCameraPreCull
void TMPro::TMP_UpdateManager::OnCameraPreCull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::OnCameraPreCull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPreCull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateManager.DoRebuilds
void TMPro::TMP_UpdateManager::DoRebuilds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::DoRebuilds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoRebuilds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateManager.UnRegisterTextObjectForUpdate
void TMPro::TMP_UpdateManager::UnRegisterTextObjectForUpdate(::TMPro::TMP_Text* textObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::UnRegisterTextObjectForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "UnRegisterTextObjectForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, textObject);
}
// Autogenerated method: TMPro.TMP_UpdateManager.UnRegisterTextElementForRebuild
void TMPro::TMP_UpdateManager::UnRegisterTextElementForRebuild(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::UnRegisterTextElementForRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "UnRegisterTextElementForRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalUnRegisterTextElementForGraphicRebuild
void TMPro::TMP_UpdateManager::InternalUnRegisterTextElementForGraphicRebuild(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::InternalUnRegisterTextElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalUnRegisterTextElementForLayoutRebuild
void TMPro::TMP_UpdateManager::InternalUnRegisterTextElementForLayoutRebuild(::TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::InternalUnRegisterTextElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalUnRegisterTextObjectForUpdate
void TMPro::TMP_UpdateManager::InternalUnRegisterTextObjectForUpdate(::TMPro::TMP_Text* textObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::InternalUnRegisterTextObjectForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterTextObjectForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, textObject);
}
// Autogenerated method: TMPro.TMP_UpdateManager..cctor
void TMPro::TMP_UpdateManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_UpdateRegistry
#include "TMPro/TMP_UpdateRegistry.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private TMPro.TMP_UpdateRegistry s_Instance
::TMPro::TMP_UpdateRegistry* TMPro::TMP_UpdateRegistry::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::TMP_UpdateRegistry*>("TMPro", "TMP_UpdateRegistry", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private TMPro.TMP_UpdateRegistry s_Instance
void TMPro::TMP_UpdateRegistry::_set_s_Instance(::TMPro::TMP_UpdateRegistry* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateRegistry", "s_Instance", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.UI.ICanvasElement> m_LayoutRebuildQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::ICanvasElement*>*& TMPro::TMP_UpdateRegistry::dyn_m_LayoutRebuildQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::dyn_m_LayoutRebuildQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LayoutRebuildQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::UI::ICanvasElement*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.Int32> m_LayoutQueueLookup
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& TMPro::TMP_UpdateRegistry::dyn_m_LayoutQueueLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::dyn_m_LayoutQueueLookup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_LayoutQueueLookup"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.UI.ICanvasElement> m_GraphicRebuildQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::ICanvasElement*>*& TMPro::TMP_UpdateRegistry::dyn_m_GraphicRebuildQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::dyn_m_GraphicRebuildQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GraphicRebuildQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::UI::ICanvasElement*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<System.Int32> m_GraphicQueueLookup
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& TMPro::TMP_UpdateRegistry::dyn_m_GraphicQueueLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::dyn_m_GraphicQueueLookup");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GraphicQueueLookup"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.get_instance
::TMPro::TMP_UpdateRegistry* TMPro::TMP_UpdateRegistry::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateRegistry", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::TMPro::TMP_UpdateRegistry*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.RegisterCanvasElementForLayoutRebuild
void TMPro::TMP_UpdateRegistry::RegisterCanvasElementForLayoutRebuild(::UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::RegisterCanvasElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateRegistry", "RegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.InternalRegisterCanvasElementForLayoutRebuild
bool TMPro::TMP_UpdateRegistry::InternalRegisterCanvasElementForLayoutRebuild(::UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::InternalRegisterCanvasElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.RegisterCanvasElementForGraphicRebuild
void TMPro::TMP_UpdateRegistry::RegisterCanvasElementForGraphicRebuild(::UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::RegisterCanvasElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateRegistry", "RegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.InternalRegisterCanvasElementForGraphicRebuild
bool TMPro::TMP_UpdateRegistry::InternalRegisterCanvasElementForGraphicRebuild(::UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::InternalRegisterCanvasElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.PerformUpdateForCanvasRendererObjects
void TMPro::TMP_UpdateRegistry::PerformUpdateForCanvasRendererObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::PerformUpdateForCanvasRendererObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformUpdateForCanvasRendererObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.PerformUpdateForMeshRendererObjects
void TMPro::TMP_UpdateRegistry::PerformUpdateForMeshRendererObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::PerformUpdateForMeshRendererObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformUpdateForMeshRendererObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.UnRegisterCanvasElementForRebuild
void TMPro::TMP_UpdateRegistry::UnRegisterCanvasElementForRebuild(::UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::UnRegisterCanvasElementForRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateRegistry", "UnRegisterCanvasElementForRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.InternalUnRegisterCanvasElementForLayoutRebuild
void TMPro::TMP_UpdateRegistry::InternalUnRegisterCanvasElementForLayoutRebuild(::UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::InternalUnRegisterCanvasElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.InternalUnRegisterCanvasElementForGraphicRebuild
void TMPro::TMP_UpdateRegistry::InternalUnRegisterCanvasElementForGraphicRebuild(::UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_UpdateRegistry::InternalUnRegisterCanvasElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.SpriteAssetUtilities.SpriteAssetImportFormats
#include "TMPro/SpriteAssetUtilities/SpriteAssetImportFormats.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats None
::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats>("TMPro.SpriteAssetUtilities", "SpriteAssetImportFormats", "None"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats None
void TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_set_None(::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro.SpriteAssetUtilities", "SpriteAssetImportFormats", "None", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats TexturePackerJsonArray
::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_get_TexturePackerJsonArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_get_TexturePackerJsonArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats>("TMPro.SpriteAssetUtilities", "SpriteAssetImportFormats", "TexturePackerJsonArray"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats TexturePackerJsonArray
void TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_set_TexturePackerJsonArray(::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_set_TexturePackerJsonArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro.SpriteAssetUtilities", "SpriteAssetImportFormats", "TexturePackerJsonArray", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/SpriteFrame
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray_SpriteFrame.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/SpriteSize
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray_SpriteSize.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/Frame
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray_Frame.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/Meta
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray_Meta.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/SpriteDataObject
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray_SpriteDataObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/SpriteFrame
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray_SpriteFrame.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single x
[[deprecated("Use field access instead!")]] float& TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::dyn_x() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::dyn_x");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "x"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single y
[[deprecated("Use field access instead!")]] float& TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::dyn_y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::dyn_y");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "y"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single w
[[deprecated("Use field access instead!")]] float& TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::dyn_w() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::dyn_w");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "w"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single h
[[deprecated("Use field access instead!")]] float& TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::dyn_h() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::dyn_h");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "h"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/SpriteFrame.ToString
::StringW TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteFrame::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/SpriteSize
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray_SpriteSize.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single w
[[deprecated("Use field access instead!")]] float& TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteSize::dyn_w() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteSize::dyn_w");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "w"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single h
[[deprecated("Use field access instead!")]] float& TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteSize::dyn_h() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteSize::dyn_h");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "h"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/SpriteSize.ToString
::StringW TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteSize::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteSize::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/SpriteDataObject
#include "TMPro/SpriteAssetUtilities/TexturePacker_JsonArray_SpriteDataObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/Frame> frames
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::Frame>*& TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteDataObject::dyn_frames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteDataObject::dyn_frames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frames"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::Frame>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TMPro.SpriteAssetUtilities.TexturePacker_JsonArray/Meta meta
[[deprecated("Use field access instead!")]] ::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::Meta& TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteDataObject::dyn_meta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::SpriteDataObject::dyn_meta");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "meta"))->offset;
  return *reinterpret_cast<::TMPro::SpriteAssetUtilities::TexturePacker_JsonArray::Meta*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnitySourceGeneratedAssemblyMonoScriptTypes_v1
#include "GlobalNamespace/UnitySourceGeneratedAssemblyMonoScriptTypes_v1______________________________________________________.hpp"
// Including type: UnitySourceGeneratedAssemblyMonoScriptTypes_v1/MonoScriptData
#include "GlobalNamespace/UnitySourceGeneratedAssemblyMonoScriptTypes_v1_______________________________________________________MonoScriptData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnitySourceGeneratedAssemblyMonoScriptTypes_v1.Get
::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1______________________________________________________::MonoScriptData GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1______________________________________________________::Get() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1______________________________________________________::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnitySourceGeneratedAssemblyMonoScriptTypes_v1", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1______________________________________________________::MonoScriptData, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.ActivationMixerPlayable
#include "UnityEngine/Timeline/ActivationMixerPlayable.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Playables.ScriptPlayable`1
#include "UnityEngine/Playables/ScriptPlayable_1.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.ActivationTrack/PostPlaybackState m_PostPlaybackState
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::ActivationTrack::PostPlaybackState& UnityEngine::Timeline::ActivationMixerPlayable::dyn_m_PostPlaybackState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationMixerPlayable::dyn_m_PostPlaybackState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PostPlaybackState"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::ActivationTrack::PostPlaybackState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_BoundGameObjectInitialStateIsActive
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ActivationMixerPlayable::dyn_m_BoundGameObjectInitialStateIsActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationMixerPlayable::dyn_m_BoundGameObjectInitialStateIsActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BoundGameObjectInitialStateIsActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject m_BoundGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& UnityEngine::Timeline::ActivationMixerPlayable::dyn_m_BoundGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationMixerPlayable::dyn_m_BoundGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BoundGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.Create
::UnityEngine::Playables::ScriptPlayable_1<::UnityEngine::Timeline::ActivationMixerPlayable*> UnityEngine::Timeline::ActivationMixerPlayable::Create(::UnityEngine::Playables::PlayableGraph graph, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationMixerPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ActivationMixerPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::ScriptPlayable_1<::UnityEngine::Timeline::ActivationMixerPlayable*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, graph, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.get_postPlaybackState
::UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationMixerPlayable::get_postPlaybackState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationMixerPlayable::get_postPlaybackState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_postPlaybackState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::ActivationTrack::PostPlaybackState, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.set_postPlaybackState
void UnityEngine::Timeline::ActivationMixerPlayable::set_postPlaybackState(::UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationMixerPlayable::set_postPlaybackState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_postPlaybackState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.OnPlayableDestroy
void UnityEngine::Timeline::ActivationMixerPlayable::OnPlayableDestroy(::UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationMixerPlayable::OnPlayableDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 16));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.ProcessFrame
void UnityEngine::Timeline::ActivationMixerPlayable::ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationMixerPlayable::ProcessFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable, info, playerData);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ActivationPlayableAsset
#include "UnityEngine/Timeline/ActivationPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ActivationPlayableAsset.get_clipCaps
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ActivationPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationPlayableAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ActivationPlayableAsset*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationPlayableAsset.CreatePlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::ActivationPlayableAsset::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ActivationTrack
#include "UnityEngine/Timeline/ActivationTrack.hpp"
// Including type: UnityEngine.Timeline.ActivationMixerPlayable
#include "UnityEngine/Timeline/ActivationMixerPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.ActivationTrack/PostPlaybackState m_PostPlaybackState
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::ActivationTrack::PostPlaybackState& UnityEngine::Timeline::ActivationTrack::dyn_m_PostPlaybackState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::dyn_m_PostPlaybackState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PostPlaybackState"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::ActivationTrack::PostPlaybackState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.ActivationMixerPlayable m_ActivationMixer
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::ActivationMixerPlayable*& UnityEngine::Timeline::ActivationTrack::dyn_m_ActivationMixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::dyn_m_ActivationMixer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActivationMixer"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::ActivationMixerPlayable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.get_postPlaybackState
::UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::get_postPlaybackState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::get_postPlaybackState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_postPlaybackState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::ActivationTrack::PostPlaybackState, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.set_postPlaybackState
void UnityEngine::Timeline::ActivationTrack::set_postPlaybackState(::UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::set_postPlaybackState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_postPlaybackState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.UpdateTrackMode
void UnityEngine::Timeline::ActivationTrack::UpdateTrackMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::UpdateTrackMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTrackMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.CanCompileClips
bool UnityEngine::Timeline::ActivationTrack::CanCompileClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::CanCompileClips");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 33));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.CreateTrackMixer
::UnityEngine::Playables::Playable UnityEngine::Timeline::ActivationTrack::CreateTrackMixer(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::CreateTrackMixer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 24));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.GatherProperties
void UnityEngine::Timeline::ActivationTrack::GatherProperties(::UnityEngine::Playables::PlayableDirector* director, ::UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::GatherProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.OnCreateClip
void UnityEngine::Timeline::ActivationTrack::OnCreateClip(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::OnCreateClip");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ActivationTrack/PostPlaybackState
#include "UnityEngine/Timeline/ActivationTrack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Active
::UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationTrack::PostPlaybackState>("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Active"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Active
void UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Active(::UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Active", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Inactive
::UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Inactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Inactive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationTrack::PostPlaybackState>("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Inactive"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Inactive
void UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Inactive(::UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Inactive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Inactive", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Revert
::UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Revert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Revert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationTrack::PostPlaybackState>("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Revert"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Revert
void UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Revert(::UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Revert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Revert", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState LeaveAsIs
::UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_LeaveAsIs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_LeaveAsIs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationTrack::PostPlaybackState>("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "LeaveAsIs"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState LeaveAsIs
void UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_LeaveAsIs(::UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_LeaveAsIs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "LeaveAsIs", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::ActivationTrack::PostPlaybackState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationTrack::PostPlaybackState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationOutputWeightProcessor
#include "UnityEngine/Timeline/AnimationOutputWeightProcessor.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animations.AnimationPlayableOutput m_Output
[[deprecated("Use field access instead!")]] ::UnityEngine::Animations::AnimationPlayableOutput& UnityEngine::Timeline::AnimationOutputWeightProcessor::dyn_m_Output() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationOutputWeightProcessor::dyn_m_Output");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Output"))->offset;
  return *reinterpret_cast<::UnityEngine::Animations::AnimationPlayableOutput*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animations.AnimationMotionXToDeltaPlayable m_MotionXPlayable
[[deprecated("Use field access instead!")]] ::UnityEngine::Animations::AnimationMotionXToDeltaPlayable& UnityEngine::Timeline::AnimationOutputWeightProcessor::dyn_m_MotionXPlayable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationOutputWeightProcessor::dyn_m_MotionXPlayable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MotionXPlayable"))->offset;
  return *reinterpret_cast<::UnityEngine::Animations::AnimationMotionXToDeltaPlayable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.Timeline.AnimationOutputWeightProcessor/WeightInfo> m_Mixers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::AnimationOutputWeightProcessor::WeightInfo>*& UnityEngine::Timeline::AnimationOutputWeightProcessor::dyn_m_Mixers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationOutputWeightProcessor::dyn_m_Mixers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Mixers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Timeline::AnimationOutputWeightProcessor::WeightInfo>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationOutputWeightProcessor.FindMixers
void UnityEngine::Timeline::AnimationOutputWeightProcessor::FindMixers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationOutputWeightProcessor::FindMixers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMixers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationOutputWeightProcessor.FindMixers
void UnityEngine::Timeline::AnimationOutputWeightProcessor::FindMixers(::UnityEngine::Playables::Playable parent, int port, ::UnityEngine::Playables::Playable node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationOutputWeightProcessor::FindMixers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMixers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parent, port, node);
}
// Autogenerated method: UnityEngine.Timeline.AnimationOutputWeightProcessor.Evaluate
void UnityEngine::Timeline::AnimationOutputWeightProcessor::Evaluate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationOutputWeightProcessor::Evaluate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationOutputWeightProcessor*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset
#include "UnityEngine/Timeline/AnimationPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/Versions
#include "UnityEngine/Timeline/AnimationPlayableAsset_Versions.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/AnimationPlayableAssetUpgrade
#include "UnityEngine/Timeline/AnimationPlayableAsset_AnimationPlayableAssetUpgrade.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45
#include "UnityEngine/Timeline/AnimationPlayableAsset_-get_outputs-d__45.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 k_LatestVersion
int UnityEngine::Timeline::AnimationPlayableAsset::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "AnimationPlayableAsset", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 k_LatestVersion
void UnityEngine::Timeline::AnimationPlayableAsset::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset", "k_LatestVersion", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationClip m_Clip
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Clip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Clip"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_EulerAngles
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_EulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_EulerAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EulerAngles"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_UseTrackMatchFields
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_UseTrackMatchFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_UseTrackMatchFields");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UseTrackMatchFields"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.MatchTargetFields m_MatchTargetFields
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::MatchTargetFields& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_MatchTargetFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_MatchTargetFields");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MatchTargetFields"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::MatchTargetFields*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_RemoveStartOffset
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_RemoveStartOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_RemoveStartOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_RemoveStartOffset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_ApplyFootIK
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_ApplyFootIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_ApplyFootIK");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ApplyFootIK"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.AnimationPlayableAsset/LoopMode m_Loop
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Loop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Loop"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.AppliedOffsetMode <appliedOffsetMode>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AppliedOffsetMode& UnityEngine::Timeline::AnimationPlayableAsset::dyn_$appliedOffsetMode$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_$appliedOffsetMode$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<appliedOffsetMode>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AppliedOffsetMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_Version
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_Rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::dyn_m_Rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_position
::UnityEngine::Vector3 UnityEngine::Timeline::AnimationPlayableAsset::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_position
void UnityEngine::Timeline::AnimationPlayableAsset::set_position(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_rotation
::UnityEngine::Quaternion UnityEngine::Timeline::AnimationPlayableAsset::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_rotation
void UnityEngine::Timeline::AnimationPlayableAsset::set_rotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_eulerAngles
::UnityEngine::Vector3 UnityEngine::Timeline::AnimationPlayableAsset::get_eulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_eulerAngles
void UnityEngine::Timeline::AnimationPlayableAsset::set_eulerAngles(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_useTrackMatchFields
bool UnityEngine::Timeline::AnimationPlayableAsset::get_useTrackMatchFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_useTrackMatchFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useTrackMatchFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_useTrackMatchFields
void UnityEngine::Timeline::AnimationPlayableAsset::set_useTrackMatchFields(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_useTrackMatchFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useTrackMatchFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_matchTargetFields
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::AnimationPlayableAsset::get_matchTargetFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_matchTargetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::MatchTargetFields, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_matchTargetFields
void UnityEngine::Timeline::AnimationPlayableAsset::set_matchTargetFields(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_matchTargetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_removeStartOffset
bool UnityEngine::Timeline::AnimationPlayableAsset::get_removeStartOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_removeStartOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_removeStartOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_removeStartOffset
void UnityEngine::Timeline::AnimationPlayableAsset::set_removeStartOffset(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_removeStartOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_removeStartOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_applyFootIK
bool UnityEngine::Timeline::AnimationPlayableAsset::get_applyFootIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_applyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_applyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_applyFootIK
void UnityEngine::Timeline::AnimationPlayableAsset::set_applyFootIK(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_applyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_applyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_loop
::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::get_loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_loop
void UnityEngine::Timeline::AnimationPlayableAsset::set_loop(::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_hasRootTransforms
bool UnityEngine::Timeline::AnimationPlayableAsset::get_hasRootTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_hasRootTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasRootTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_appliedOffsetMode
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AnimationPlayableAsset::get_appliedOffsetMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_appliedOffsetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_appliedOffsetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::AppliedOffsetMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_appliedOffsetMode
void UnityEngine::Timeline::AnimationPlayableAsset::set_appliedOffsetMode(::UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_appliedOffsetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_appliedOffsetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_clip
::UnityEngine::AnimationClip* UnityEngine::Timeline::AnimationPlayableAsset::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_clip
void UnityEngine::Timeline::AnimationPlayableAsset::set_clip(::UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::set_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.CreatePlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::AnimationClip* clip, ::UnityEngine::Vector3 positionOffset, ::UnityEngine::Vector3 eulerOffset, bool removeStartOffset, ::UnityEngine::Timeline::AppliedOffsetMode mode, bool applyFootIK, ::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode loop) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(eulerOffset), ::il2cpp_utils::ExtractType(removeStartOffset), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(applyFootIK), ::il2cpp_utils::ExtractType(loop)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, graph, clip, positionOffset, eulerOffset, removeStartOffset, mode, applyFootIK, loop);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ShouldApplyOffset
bool UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyOffset(::UnityEngine::Timeline::AppliedOffsetMode mode, ::UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "ShouldApplyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mode, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ShouldApplyScaleRemove
bool UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyScaleRemove(::UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyScaleRemove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "ShouldApplyScaleRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_clipCaps
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::AnimationPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ResetOffsets
void UnityEngine::Timeline::AnimationPlayableAsset::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::ResetOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.GatherProperties
void UnityEngine::Timeline::AnimationPlayableAsset::GatherProperties(::UnityEngine::Playables::PlayableDirector* director, ::UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::GatherProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.HasRootTransforms
bool UnityEngine::Timeline::AnimationPlayableAsset::HasRootTransforms(::UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::HasRootTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "HasRootTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.OnUpgradeFromVersion
void UnityEngine::Timeline::AnimationPlayableAsset::OnUpgradeFromVersion(int oldVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::OnUpgradeFromVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpgradeFromVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldVersion)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, oldVersion);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset..cctor
void UnityEngine::Timeline::AnimationPlayableAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_duration
double UnityEngine::Timeline::AnimationPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 7));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_outputs
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationPlayableAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.CreatePlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/LoopMode
#include "UnityEngine/Timeline/AnimationPlayableAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode UseSourceAsset
::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_UseSourceAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_UseSourceAsset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "UseSourceAsset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode UseSourceAsset
void UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_UseSourceAsset(::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_UseSourceAsset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "UseSourceAsset", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode On
::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_On() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_On");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "On"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode On
void UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_On(::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_On");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "On", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode Off
::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "Off"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode Off
void UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_Off(::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "Off", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/Versions
#include "UnityEngine/Timeline/AnimationPlayableAsset_Versions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/Versions Initial
::UnityEngine::Timeline::AnimationPlayableAsset::Versions UnityEngine::Timeline::AnimationPlayableAsset::Versions::_get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::Versions::_get_Initial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AnimationPlayableAsset::Versions>("UnityEngine.Timeline", "AnimationPlayableAsset/Versions", "Initial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/Versions Initial
void UnityEngine::Timeline::AnimationPlayableAsset::Versions::_set_Initial(::UnityEngine::Timeline::AnimationPlayableAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::Versions::_set_Initial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/Versions", "Initial", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/Versions RotationAsEuler
::UnityEngine::Timeline::AnimationPlayableAsset::Versions UnityEngine::Timeline::AnimationPlayableAsset::Versions::_get_RotationAsEuler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::Versions::_get_RotationAsEuler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AnimationPlayableAsset::Versions>("UnityEngine.Timeline", "AnimationPlayableAsset/Versions", "RotationAsEuler"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/Versions RotationAsEuler
void UnityEngine::Timeline::AnimationPlayableAsset::Versions::_set_RotationAsEuler(::UnityEngine::Timeline::AnimationPlayableAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::Versions::_set_RotationAsEuler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/Versions", "RotationAsEuler", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AnimationPlayableAsset::Versions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::Versions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/AnimationPlayableAssetUpgrade
#include "UnityEngine/Timeline/AnimationPlayableAsset_AnimationPlayableAssetUpgrade.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/AnimationPlayableAssetUpgrade.ConvertRotationToEuler
void UnityEngine::Timeline::AnimationPlayableAsset::AnimationPlayableAssetUpgrade::ConvertRotationToEuler(::UnityEngine::Timeline::AnimationPlayableAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::AnimationPlayableAssetUpgrade::ConvertRotationToEuler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset/AnimationPlayableAssetUpgrade", "ConvertRotationToEuler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, asset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45
#include "UnityEngine/Timeline/AnimationPlayableAsset_-get_outputs-d__45.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableBinding <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableBinding& UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableBinding*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Timeline.AnimationPlayableAsset <>4__this
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AnimationPlayableAsset*& UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AnimationPlayableAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.IDisposable.Dispose
void UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.MoveNext
bool UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
::UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPreviewUpdateCallback
#include "UnityEngine/Timeline/AnimationPreviewUpdateCallback.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Animations.IAnimationWindowPreview
#include "UnityEngine/Animations/IAnimationWindowPreview.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Animations.AnimationPlayableOutput m_Output
[[deprecated("Use field access instead!")]] ::UnityEngine::Animations::AnimationPlayableOutput& UnityEngine::Timeline::AnimationPreviewUpdateCallback::dyn_m_Output() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPreviewUpdateCallback::dyn_m_Output");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Output"))->offset;
  return *reinterpret_cast<::UnityEngine::Animations::AnimationPlayableOutput*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableGraph m_Graph
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableGraph& UnityEngine::Timeline::AnimationPreviewUpdateCallback::dyn_m_Graph() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPreviewUpdateCallback::dyn_m_Graph");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Graph"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableGraph*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Animations.IAnimationWindowPreview> m_PreviewComponents
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Animations::IAnimationWindowPreview*>*& UnityEngine::Timeline::AnimationPreviewUpdateCallback::dyn_m_PreviewComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPreviewUpdateCallback::dyn_m_PreviewComponents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreviewComponents"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Animations::IAnimationWindowPreview*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPreviewUpdateCallback.Evaluate
void UnityEngine::Timeline::AnimationPreviewUpdateCallback::Evaluate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPreviewUpdateCallback::Evaluate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationPreviewUpdateCallback*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPreviewUpdateCallback.FetchPreviewComponents
void UnityEngine::Timeline::AnimationPreviewUpdateCallback::FetchPreviewComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationPreviewUpdateCallback::FetchPreviewComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FetchPreviewComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.MatchTargetFields
#include "UnityEngine/Timeline/MatchTargetFields.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields PositionX
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_PositionX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_get_PositionX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "PositionX"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields PositionX
void UnityEngine::Timeline::MatchTargetFields::_set_PositionX(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_set_PositionX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "PositionX", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields PositionY
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_PositionY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_get_PositionY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "PositionY"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields PositionY
void UnityEngine::Timeline::MatchTargetFields::_set_PositionY(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_set_PositionY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "PositionY", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields PositionZ
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_PositionZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_get_PositionZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "PositionZ"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields PositionZ
void UnityEngine::Timeline::MatchTargetFields::_set_PositionZ(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_set_PositionZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "PositionZ", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields RotationX
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_RotationX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_get_RotationX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "RotationX"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields RotationX
void UnityEngine::Timeline::MatchTargetFields::_set_RotationX(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_set_RotationX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "RotationX", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields RotationY
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_RotationY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_get_RotationY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "RotationY"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields RotationY
void UnityEngine::Timeline::MatchTargetFields::_set_RotationY(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_set_RotationY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "RotationY", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields RotationZ
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_RotationZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_get_RotationZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "RotationZ"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields RotationZ
void UnityEngine::Timeline::MatchTargetFields::_set_RotationZ(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::_set_RotationZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "RotationZ", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::MatchTargetFields::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFields::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackOffset
#include "UnityEngine/Timeline/TrackOffset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackOffset ApplyTransformOffsets
::UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::TrackOffset::_get_ApplyTransformOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackOffset::_get_ApplyTransformOffsets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackOffset>("UnityEngine.Timeline", "TrackOffset", "ApplyTransformOffsets"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackOffset ApplyTransformOffsets
void UnityEngine::Timeline::TrackOffset::_set_ApplyTransformOffsets(::UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackOffset::_set_ApplyTransformOffsets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackOffset", "ApplyTransformOffsets", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackOffset ApplySceneOffsets
::UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::TrackOffset::_get_ApplySceneOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackOffset::_get_ApplySceneOffsets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackOffset>("UnityEngine.Timeline", "TrackOffset", "ApplySceneOffsets"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackOffset ApplySceneOffsets
void UnityEngine::Timeline::TrackOffset::_set_ApplySceneOffsets(::UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackOffset::_set_ApplySceneOffsets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackOffset", "ApplySceneOffsets", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackOffset Auto
::UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::TrackOffset::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackOffset::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackOffset>("UnityEngine.Timeline", "TrackOffset", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackOffset Auto
void UnityEngine::Timeline::TrackOffset::_set_Auto(::UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackOffset::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackOffset", "Auto", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TrackOffset::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackOffset::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AppliedOffsetMode
#include "UnityEngine/Timeline/AppliedOffsetMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode NoRootTransform
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_NoRootTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_get_NoRootTransform");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "NoRootTransform"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode NoRootTransform
void UnityEngine::Timeline::AppliedOffsetMode::_set_NoRootTransform(::UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_set_NoRootTransform");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "NoRootTransform", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode TransformOffset
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_TransformOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_get_TransformOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "TransformOffset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode TransformOffset
void UnityEngine::Timeline::AppliedOffsetMode::_set_TransformOffset(::UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_set_TransformOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "TransformOffset", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffset
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffset
void UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffset(::UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffset", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode TransformOffsetLegacy
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_TransformOffsetLegacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_get_TransformOffsetLegacy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "TransformOffsetLegacy"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode TransformOffsetLegacy
void UnityEngine::Timeline::AppliedOffsetMode::_set_TransformOffsetLegacy(::UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_set_TransformOffsetLegacy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "TransformOffsetLegacy", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetLegacy
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetLegacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetLegacy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetLegacy"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetLegacy
void UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetLegacy(::UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetLegacy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetLegacy", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetEditor
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetEditor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetEditor
void UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetEditor(::UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetEditor", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetLegacyEditor
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetLegacyEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetLegacyEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetLegacyEditor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetLegacyEditor
void UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetLegacyEditor(::UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetLegacyEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetLegacyEditor", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AppliedOffsetMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AppliedOffsetMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.MatchTargetFieldConstants
#include "UnityEngine/Timeline/MatchTargetFieldConstants.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields All
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFieldConstants", "All"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields All
void UnityEngine::Timeline::MatchTargetFieldConstants::_set_All(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFieldConstants", "All", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields None
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFieldConstants", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields None
void UnityEngine::Timeline::MatchTargetFieldConstants::_set_None(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFieldConstants", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields Position
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::_get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::_get_Position");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFieldConstants", "Position"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields Position
void UnityEngine::Timeline::MatchTargetFieldConstants::_set_Position(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::_set_Position");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFieldConstants", "Position", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields Rotation
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::_get_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::_get_Rotation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFieldConstants", "Rotation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields Rotation
void UnityEngine::Timeline::MatchTargetFieldConstants::_set_Rotation(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::_set_Rotation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFieldConstants", "Rotation", value));
}
// Autogenerated method: UnityEngine.Timeline.MatchTargetFieldConstants.HasAny
bool UnityEngine::Timeline::MatchTargetFieldConstants::HasAny(::UnityEngine::Timeline::MatchTargetFields me, ::UnityEngine::Timeline::MatchTargetFields fields) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::HasAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "MatchTargetFieldConstants", "HasAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(me), ::il2cpp_utils::ExtractType(fields)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, me, fields);
}
// Autogenerated method: UnityEngine.Timeline.MatchTargetFieldConstants.Toggle
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::Toggle(::UnityEngine::Timeline::MatchTargetFields me, ::UnityEngine::Timeline::MatchTargetFields flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::Toggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "MatchTargetFieldConstants", "Toggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(me), ::il2cpp_utils::ExtractType(flag)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::MatchTargetFields, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, me, flag);
}
// Autogenerated method: UnityEngine.Timeline.MatchTargetFieldConstants..cctor
void UnityEngine::Timeline::MatchTargetFieldConstants::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MatchTargetFieldConstants::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "MatchTargetFieldConstants", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationTrack
#include "UnityEngine/Timeline/AnimationTrack.hpp"
// Including type: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade
#include "UnityEngine/Timeline/AnimationTrack_AnimationTrackUpgrade.hpp"
// Including type: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49
#include "UnityEngine/Timeline/AnimationTrack_-get_outputs-d__49.hpp"
// Including type: UnityEngine.AvatarMask
#include "UnityEngine/AvatarMask.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Timeline.IntervalTree`1
#include "UnityEngine/Timeline/IntervalTree_1.hpp"
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: UnityEngine.Timeline.AppliedOffsetMode
#include "UnityEngine/Timeline/AppliedOffsetMode.hpp"
// Including type: UnityEngine.Animations.AnimationLayerMixerPlayable
#include "UnityEngine/Animations/AnimationLayerMixerPlayable.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String k_DefaultInfiniteClipName
::StringW UnityEngine::Timeline::AnimationTrack::_get_k_DefaultInfiniteClipName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::_get_k_DefaultInfiniteClipName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("UnityEngine.Timeline", "AnimationTrack", "k_DefaultInfiniteClipName"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_DefaultInfiniteClipName
void UnityEngine::Timeline::AnimationTrack::_set_k_DefaultInfiniteClipName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::_set_k_DefaultInfiniteClipName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "k_DefaultInfiniteClipName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_DefaultRecordableClipName
::StringW UnityEngine::Timeline::AnimationTrack::_get_k_DefaultRecordableClipName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::_get_k_DefaultRecordableClipName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("UnityEngine.Timeline", "AnimationTrack", "k_DefaultRecordableClipName"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_DefaultRecordableClipName
void UnityEngine::Timeline::AnimationTrack::_set_k_DefaultRecordableClipName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::_set_k_DefaultRecordableClipName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "k_DefaultRecordableClipName", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
::System::Collections::Generic::Queue_1<::UnityEngine::Transform*>* UnityEngine::Timeline::AnimationTrack::_get_s_CachedQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::_get_s_CachedQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::Queue_1<::UnityEngine::Transform*>*>("UnityEngine.Timeline", "AnimationTrack", "s_CachedQueue"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
void UnityEngine::Timeline::AnimationTrack::_set_s_CachedQueue(::System::Collections::Generic::Queue_1<::UnityEngine::Transform*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::_set_s_CachedQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "s_CachedQueue", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_InfiniteClipPreExtrapolation
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation& UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipPreExtrapolation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InfiniteClipPreExtrapolation"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_InfiniteClipPostExtrapolation
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation& UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipPostExtrapolation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InfiniteClipPostExtrapolation"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_InfiniteClipOffsetPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipOffsetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipOffsetPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InfiniteClipOffsetPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_InfiniteClipOffsetEulerAngles
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipOffsetEulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipOffsetEulerAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InfiniteClipOffsetEulerAngles"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_InfiniteClipTimeOffset
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InfiniteClipTimeOffset"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_InfiniteClipRemoveOffset
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipRemoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipRemoveOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InfiniteClipRemoveOffset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_InfiniteClipApplyFootIK
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipApplyFootIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClipApplyFootIK");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InfiniteClipApplyFootIK"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.AnimationPlayableAsset/LoopMode mInfiniteClipLoop
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode& UnityEngine::Timeline::AnimationTrack::dyn_mInfiniteClipLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_mInfiniteClipLoop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mInfiniteClipLoop"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.MatchTargetFields m_MatchTargetFields
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::MatchTargetFields& UnityEngine::Timeline::AnimationTrack::dyn_m_MatchTargetFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_MatchTargetFields");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MatchTargetFields"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::MatchTargetFields*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& UnityEngine::Timeline::AnimationTrack::dyn_m_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_Position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_EulerAngles
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& UnityEngine::Timeline::AnimationTrack::dyn_m_EulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_EulerAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EulerAngles"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AvatarMask m_AvatarMask
[[deprecated("Use field access instead!")]] ::UnityEngine::AvatarMask*& UnityEngine::Timeline::AnimationTrack::dyn_m_AvatarMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_AvatarMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AvatarMask"))->offset;
  return *reinterpret_cast<::UnityEngine::AvatarMask**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_ApplyAvatarMask
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::AnimationTrack::dyn_m_ApplyAvatarMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_ApplyAvatarMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ApplyAvatarMask"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TrackOffset m_TrackOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TrackOffset& UnityEngine::Timeline::AnimationTrack::dyn_m_TrackOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_TrackOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TrackOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TrackOffset*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationClip m_InfiniteClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_InfiniteClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InfiniteClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_OpenClipOffsetRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& UnityEngine::Timeline::AnimationTrack::dyn_m_OpenClipOffsetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_OpenClipOffsetRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_OpenClipOffsetRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion m_Rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& UnityEngine::Timeline::AnimationTrack::dyn_m_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_Rotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_ApplyOffsets
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::AnimationTrack::dyn_m_ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::dyn_m_ApplyOffsets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ApplyOffsets"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_position
::UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_position
void UnityEngine::Timeline::AnimationTrack::set_position(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_rotation
::UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_rotation
void UnityEngine::Timeline::AnimationTrack::set_rotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_eulerAngles
::UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_eulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_eulerAngles
void UnityEngine::Timeline::AnimationTrack::set_eulerAngles(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_applyOffsets
bool UnityEngine::Timeline::AnimationTrack::get_applyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_applyOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_applyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_applyOffsets
void UnityEngine::Timeline::AnimationTrack::set_applyOffsets(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_applyOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_applyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_trackOffset
::UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::AnimationTrack::get_trackOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_trackOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_trackOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackOffset, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_trackOffset
void UnityEngine::Timeline::AnimationTrack::set_trackOffset(::UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_trackOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_trackOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_matchTargetFields
::UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::AnimationTrack::get_matchTargetFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_matchTargetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::MatchTargetFields, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_matchTargetFields
void UnityEngine::Timeline::AnimationTrack::set_matchTargetFields(::UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_matchTargetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClip
::UnityEngine::AnimationClip* UnityEngine::Timeline::AnimationTrack::get_infiniteClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClip
void UnityEngine::Timeline::AnimationTrack::set_infiniteClip(::UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipRemoveOffset
bool UnityEngine::Timeline::AnimationTrack::get_infiniteClipRemoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipRemoveOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipRemoveOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipRemoveOffset
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipRemoveOffset(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipRemoveOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipRemoveOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_avatarMask
::UnityEngine::AvatarMask* UnityEngine::Timeline::AnimationTrack::get_avatarMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_avatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_avatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AvatarMask*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_avatarMask
void UnityEngine::Timeline::AnimationTrack::set_avatarMask(::UnityEngine::AvatarMask* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_avatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_avatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_applyAvatarMask
bool UnityEngine::Timeline::AnimationTrack::get_applyAvatarMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_applyAvatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_applyAvatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_applyAvatarMask
void UnityEngine::Timeline::AnimationTrack::set_applyAvatarMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_applyAvatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_applyAvatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_inClipMode
bool UnityEngine::Timeline::AnimationTrack::get_inClipMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_inClipMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inClipMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetPosition
::UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetPosition
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetRotation
::UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetRotation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetRotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetEulerAngles
::UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetEulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetEulerAngles
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetEulerAngles(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipApplyFootIK
bool UnityEngine::Timeline::AnimationTrack::get_infiniteClipApplyFootIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipApplyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipApplyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipApplyFootIK
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipApplyFootIK(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipApplyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipApplyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipTimeOffset
double UnityEngine::Timeline::AnimationTrack::get_infiniteClipTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipTimeOffset
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipTimeOffset(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipPreExtrapolation
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_infiniteClipPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipPreExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipPreExtrapolation(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipPostExtrapolation
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_infiniteClipPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipPostExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipPostExtrapolation(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipLoop
::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationTrack::get_infiniteClipLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_infiniteClipLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipLoop
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipLoop(::UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_infiniteClipLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.ResetOffsets
void UnityEngine::Timeline::AnimationTrack::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::ResetOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateClip
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::AnimationTrack::CreateClip(::UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CreateClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateInfiniteClip
void UnityEngine::Timeline::AnimationTrack::CreateInfiniteClip(::StringW infiniteClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CreateInfiniteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateInfiniteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(infiniteClipName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, infiniteClipName);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateRecordableClip
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::AnimationTrack::CreateRecordableClip(::StringW animClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CreateRecordableClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateRecordableClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animClipName)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, animClipName);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UpdateClipOffsets
void UnityEngine::Timeline::AnimationTrack::UpdateClipOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::UpdateClipOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateClipOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CompileTrackPlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::CompileTrackPlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Timeline::AnimationTrack* track, ::UnityEngine::GameObject* go, ::UnityEngine::Timeline::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree, ::UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CompileTrackPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompileTrackPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(track), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, track, go, tree, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UnityEngine.Timeline.ILayerable.CreateLayerMixer
::UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::UnityEngine_Timeline_ILayerable_CreateLayerMixer(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::UnityEngine.Timeline.ILayerable.CreateLayerMixer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationTrack*), 36));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetDefaultBlendCount
int UnityEngine::Timeline::AnimationTrack::GetDefaultBlendCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::GetDefaultBlendCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultBlendCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AttachDefaultBlend
void UnityEngine::Timeline::AnimationTrack::AttachDefaultBlend(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Animations::AnimationLayerMixerPlayable mixer, bool requireOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::AttachDefaultBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachDefaultBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(mixer), ::il2cpp_utils::ExtractType(requireOffset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, graph, mixer, requireOffset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AttachOffsetPlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::AttachOffsetPlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Playables::Playable playable, ::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::AttachOffsetPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachOffsetPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, playable, pos, rot);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.RequiresMotionXPlayable
bool UnityEngine::Timeline::AnimationTrack::RequiresMotionXPlayable(::UnityEngine::Timeline::AppliedOffsetMode mode, ::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::RequiresMotionXPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequiresMotionXPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, mode, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UsesAbsoluteMotion
bool UnityEngine::Timeline::AnimationTrack::UsesAbsoluteMotion(::UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::UsesAbsoluteMotion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "UsesAbsoluteMotion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.HasController
bool UnityEngine::Timeline::AnimationTrack::HasController(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::HasController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetBinding
::UnityEngine::Animator* UnityEngine::Timeline::AnimationTrack::GetBinding(::UnityEngine::Playables::PlayableDirector* director) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::GetBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Animator*, false>(this, ___internal__method, director);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateGroupMixer
::UnityEngine::Animations::AnimationLayerMixerPlayable UnityEngine::Timeline::AnimationTrack::CreateGroupMixer(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CreateGroupMixer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "CreateGroupMixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Animations::AnimationLayerMixerPlayable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateInfiniteTrackPlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::CreateInfiniteTrackPlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, ::UnityEngine::Timeline::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree, ::UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CreateInfiniteTrackPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateInfiniteTrackPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.ApplyTrackOffset
::UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::ApplyTrackOffset(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Playables::Playable root, ::UnityEngine::GameObject* go, ::UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::ApplyTrackOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTrackOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, root, go, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AssignAnimationClip
void UnityEngine::Timeline::AnimationTrack::AssignAnimationClip(::UnityEngine::Timeline::TimelineClip* clip, ::UnityEngine::AnimationClip* animClip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::AssignAnimationClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignAnimationClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(animClip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip, animClip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetAnimationClips
void UnityEngine::Timeline::AnimationTrack::GetAnimationClips(::System::Collections::Generic::List_1<::UnityEngine::AnimationClip*>* animClips) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::GetAnimationClips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnimationClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animClips)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, animClips);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetOffsetMode
::UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AnimationTrack::GetOffsetMode(::UnityEngine::GameObject* go, bool animatesRootTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::GetOffsetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOffsetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(animatesRootTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::AppliedOffsetMode, false>(this, ___internal__method, go, animatesRootTransform);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.IsRootTransformDisabledByMask
bool UnityEngine::Timeline::AnimationTrack::IsRootTransformDisabledByMask(::UnityEngine::GameObject* gameObject, ::UnityEngine::Transform* genericRootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::IsRootTransformDisabledByMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsRootTransformDisabledByMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(genericRootNode)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, gameObject, genericRootNode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetGenericRootNode
::UnityEngine::Transform* UnityEngine::Timeline::AnimationTrack::GetGenericRootNode(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::GetGenericRootNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGenericRootNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AnimatesRootTransform
bool UnityEngine::Timeline::AnimationTrack::AnimatesRootTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::AnimatesRootTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimatesRootTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.FindInHierarchyBreadthFirst
::UnityEngine::Transform* UnityEngine::Timeline::AnimationTrack::FindInHierarchyBreadthFirst(::UnityEngine::Transform* t, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::FindInHierarchyBreadthFirst");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "FindInHierarchyBreadthFirst", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, name);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetPosition
::UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_openClipOffsetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_openClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipOffsetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetPosition
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_openClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipOffsetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetRotation
::UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_openClipOffsetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_openClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipOffsetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetRotation
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetRotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_openClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipOffsetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetEulerAngles
::UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_openClipOffsetEulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_openClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetEulerAngles
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetEulerAngles(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_openClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipPreExtrapolation
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_openClipPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_openClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipPreExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_openClipPreExtrapolation(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_openClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipPostExtrapolation
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_openClipPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_openClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipPostExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_openClipPostExtrapolation(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::set_openClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CanCompileClips
bool UnityEngine::Timeline::AnimationTrack::CanCompileClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CanCompileClips");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 33));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_outputs
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationTrack::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::get_outputs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.OnCreateClip
void UnityEngine::Timeline::AnimationTrack::OnCreateClip(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::OnCreateClip");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CalculateItemsHash
int UnityEngine::Timeline::AnimationTrack::CalculateItemsHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CalculateItemsHash");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateMixerPlayableGraph
::UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::CreateMixerPlayableGraph(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, ::UnityEngine::Timeline::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::CreateMixerPlayableGraph");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 26));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetEvaluationTime
void UnityEngine::Timeline::AnimationTrack::GetEvaluationTime(ByRef<double> outStart, ByRef<double> outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::GetEvaluationTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 27));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(outStart), byref(outDuration));
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetSequenceTime
void UnityEngine::Timeline::AnimationTrack::GetSequenceTime(ByRef<double> outStart, ByRef<double> outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::GetSequenceTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(outStart), byref(outDuration));
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GatherProperties
void UnityEngine::Timeline::AnimationTrack::GatherProperties(::UnityEngine::Playables::PlayableDirector* director, ::UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::GatherProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.OnUpgradeFromVersion
void UnityEngine::Timeline::AnimationTrack::OnUpgradeFromVersion(int oldVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::OnUpgradeFromVersion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 22));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, oldVersion);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack..cctor
void UnityEngine::Timeline::AnimationTrack::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade
#include "UnityEngine/Timeline/AnimationTrack_AnimationTrackUpgrade.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade.ConvertRotationsToEuler
void UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertRotationsToEuler(::UnityEngine::Timeline::AnimationTrack* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertRotationsToEuler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack/AnimationTrackUpgrade", "ConvertRotationsToEuler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade.ConvertRootMotion
void UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertRootMotion(::UnityEngine::Timeline::AnimationTrack* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertRootMotion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack/AnimationTrackUpgrade", "ConvertRootMotion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade.ConvertInfiniteTrack
void UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertInfiniteTrack(::UnityEngine::Timeline::AnimationTrack* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertInfiniteTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack/AnimationTrackUpgrade", "ConvertInfiniteTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, track);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49
#include "UnityEngine/Timeline/AnimationTrack_-get_outputs-d__49.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableBinding <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableBinding& UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableBinding*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Timeline.AnimationTrack <>4__this
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AnimationTrack*& UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AnimationTrack**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.IDisposable.Dispose
void UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.MoveNext
bool UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
::UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ICurvesOwner
#include "UnityEngine/Timeline/ICurvesOwner.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_curves
::UnityEngine::AnimationClip* UnityEngine::Timeline::ICurvesOwner::get_curves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ICurvesOwner::get_curves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ICurvesOwner*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_hasCurves
bool UnityEngine::Timeline::ICurvesOwner::get_hasCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ICurvesOwner::get_hasCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ICurvesOwner*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_duration
double UnityEngine::Timeline::ICurvesOwner::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ICurvesOwner::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ICurvesOwner*), -1));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.CreateCurves
void UnityEngine::Timeline::ICurvesOwner::CreateCurves(::StringW curvesClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ICurvesOwner::CreateCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ICurvesOwner*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, curvesClipName);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
::StringW UnityEngine::Timeline::ICurvesOwner::get_defaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ICurvesOwner::get_defaultCurvesName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ICurvesOwner*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_asset
::UnityEngine::Object* UnityEngine::Timeline::ICurvesOwner::get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ICurvesOwner::get_asset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ICurvesOwner*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_assetOwner
::UnityEngine::Object* UnityEngine::Timeline::ICurvesOwner::get_assetOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ICurvesOwner::get_assetOwner");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ICurvesOwner*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_targetTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::ICurvesOwner::get_targetTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ICurvesOwner::get_targetTrack");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ICurvesOwner*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.TimelineClip/Versions
#include "UnityEngine/Timeline/TimelineClip_Versions.hpp"
// Including type: UnityEngine.Timeline.TimelineClip/TimelineClipUpgrade
#include "UnityEngine/Timeline/TimelineClip_TimelineClipUpgrade.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_LatestVersion
int UnityEngine::Timeline::TimelineClip::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "TimelineClip", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_LatestVersion
void UnityEngine::Timeline::TimelineClip::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "k_LatestVersion", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Timeline.ClipCaps kDefaultClipCaps
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::TimelineClip::_get_kDefaultClipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_get_kDefaultClipCaps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "TimelineClip", "kDefaultClipCaps"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Timeline.ClipCaps kDefaultClipCaps
void UnityEngine::Timeline::TimelineClip::_set_kDefaultClipCaps(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_set_kDefaultClipCaps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kDefaultClipCaps", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Single kDefaultClipDurationInSeconds
float UnityEngine::Timeline::TimelineClip::_get_kDefaultClipDurationInSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_get_kDefaultClipDurationInSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine.Timeline", "TimelineClip", "kDefaultClipDurationInSeconds"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Single kDefaultClipDurationInSeconds
void UnityEngine::Timeline::TimelineClip::_set_kDefaultClipDurationInSeconds(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_set_kDefaultClipDurationInSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kDefaultClipDurationInSeconds", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Double kTimeScaleMin
double UnityEngine::Timeline::TimelineClip::_get_kTimeScaleMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_get_kTimeScaleMin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineClip", "kTimeScaleMin"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Double kTimeScaleMin
void UnityEngine::Timeline::TimelineClip::_set_kTimeScaleMin(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_set_kTimeScaleMin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kTimeScaleMin", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Double kTimeScaleMax
double UnityEngine::Timeline::TimelineClip::_get_kTimeScaleMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_get_kTimeScaleMax");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineClip", "kTimeScaleMax"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Double kTimeScaleMax
void UnityEngine::Timeline::TimelineClip::_set_kTimeScaleMax(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_set_kTimeScaleMax");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kTimeScaleMax", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.String kDefaultCurvesName
::StringW UnityEngine::Timeline::TimelineClip::_get_kDefaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_get_kDefaultCurvesName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("UnityEngine.Timeline", "TimelineClip", "kDefaultCurvesName"));
}
// Autogenerated static field setter
// Set static field: static readonly System.String kDefaultCurvesName
void UnityEngine::Timeline::TimelineClip::_set_kDefaultCurvesName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_set_kDefaultCurvesName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kDefaultCurvesName", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Double kMinDuration
double UnityEngine::Timeline::TimelineClip::_get_kMinDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_get_kMinDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineClip", "kMinDuration"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Double kMinDuration
void UnityEngine::Timeline::TimelineClip::_set_kMinDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_set_kMinDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kMinDuration", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Double kMaxTimeValue
double UnityEngine::Timeline::TimelineClip::_get_kMaxTimeValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_get_kMaxTimeValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineClip", "kMaxTimeValue"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Double kMaxTimeValue
void UnityEngine::Timeline::TimelineClip::_set_kMaxTimeValue(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::_set_kMaxTimeValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kMaxTimeValue", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_Version
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineClip::dyn_m_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_Version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_Start
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_Start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Start"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_ClipIn
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_ClipIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_ClipIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ClipIn"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Object m_Asset
[[deprecated("Use field access instead!")]] ::UnityEngine::Object*& UnityEngine::Timeline::TimelineClip::dyn_m_Asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_Asset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Asset"))->offset;
  return *reinterpret_cast<::UnityEngine::Object**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_Duration
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_Duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Duration"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_TimeScale
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_TimeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_TimeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TimeScale"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TrackAsset m_ParentTrack
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TrackAsset*& UnityEngine::Timeline::TimelineClip::dyn_m_ParentTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_ParentTrack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ParentTrack"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TrackAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_EaseInDuration
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_EaseInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_EaseInDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EaseInDuration"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_EaseOutDuration
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_EaseOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_EaseOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EaseOutDuration"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_BlendInDuration
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_BlendInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_BlendInDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BlendInDuration"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_BlendOutDuration
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_BlendOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_BlendOutDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BlendOutDuration"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve m_MixInCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& UnityEngine::Timeline::TimelineClip::dyn_m_MixInCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_MixInCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MixInCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve m_MixOutCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& UnityEngine::Timeline::TimelineClip::dyn_m_MixOutCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_MixOutCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MixOutCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip/BlendCurveMode m_BlendInCurveMode
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::BlendCurveMode& UnityEngine::Timeline::TimelineClip::dyn_m_BlendInCurveMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_BlendInCurveMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BlendInCurveMode"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineClip::BlendCurveMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip/BlendCurveMode m_BlendOutCurveMode
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::BlendCurveMode& UnityEngine::Timeline::TimelineClip::dyn_m_BlendOutCurveMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_BlendOutCurveMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_BlendOutCurveMode"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineClip::BlendCurveMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.String> m_ExposedParameterNames
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& UnityEngine::Timeline::TimelineClip::dyn_m_ExposedParameterNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_ExposedParameterNames");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExposedParameterNames"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationClip m_AnimationCurves
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& UnityEngine::Timeline::TimelineClip::dyn_m_AnimationCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_AnimationCurves");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AnimationCurves"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_Recordable
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::TimelineClip::dyn_m_Recordable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_Recordable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Recordable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_PostExtrapolationMode
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation& UnityEngine::Timeline::TimelineClip::dyn_m_PostExtrapolationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_PostExtrapolationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PostExtrapolationMode"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_PreExtrapolationMode
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation& UnityEngine::Timeline::TimelineClip::dyn_m_PreExtrapolationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_PreExtrapolationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreExtrapolationMode"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_PostExtrapolationTime
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_PostExtrapolationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_PostExtrapolationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PostExtrapolationTime"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_PreExtrapolationTime
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineClip::dyn_m_PreExtrapolationTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_PreExtrapolationTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PreExtrapolationTime"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String m_DisplayName
[[deprecated("Use field access instead!")]] ::StringW& UnityEngine::Timeline::TimelineClip::dyn_m_DisplayName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::dyn_m_DisplayName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DisplayName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UpgradeToLatestVersion
void UnityEngine::Timeline::TimelineClip::UpgradeToLatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::UpgradeToLatestVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeToLatestVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasPreExtrapolation
bool UnityEngine::Timeline::TimelineClip::get_hasPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_hasPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasPostExtrapolation
bool UnityEngine::Timeline::TimelineClip::get_hasPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_hasPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_timeScale
double UnityEngine::Timeline::TimelineClip::get_timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_timeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_timeScale
void UnityEngine::Timeline::TimelineClip::set_timeScale(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_timeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_start
double UnityEngine::Timeline::TimelineClip::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_start
void UnityEngine::Timeline::TimelineClip::set_start(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_duration
double UnityEngine::Timeline::TimelineClip::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 6));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_duration
void UnityEngine::Timeline::TimelineClip::set_duration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_end
double UnityEngine::Timeline::TimelineClip::get_end() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_end");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_end", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_clipIn
double UnityEngine::Timeline::TimelineClip::get_clipIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_clipIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_clipIn
void UnityEngine::Timeline::TimelineClip::set_clipIn(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_clipIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clipIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_displayName
::StringW UnityEngine::Timeline::TimelineClip::get_displayName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_displayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_displayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_displayName
void UnityEngine::Timeline::TimelineClip::set_displayName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_displayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_displayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_clipAssetDuration
double UnityEngine::Timeline::TimelineClip::get_clipAssetDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_clipAssetDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipAssetDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_curves
::UnityEngine::AnimationClip* UnityEngine::Timeline::TimelineClip::get_curves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_curves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_curves
void UnityEngine::Timeline::TimelineClip::set_curves(::UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_curves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_curves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
::StringW UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasCurves
bool UnityEngine::Timeline::TimelineClip::get_hasCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_hasCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_asset
::UnityEngine::Object* UnityEngine::Timeline::TimelineClip::get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_asset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_asset
void UnityEngine::Timeline::TimelineClip::set_asset(::UnityEngine::Object* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_asset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.Timeline.ICurvesOwner.get_assetOwner
::UnityEngine::Object* UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_assetOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::UnityEngine.Timeline.ICurvesOwner.get_assetOwner");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.Timeline.ICurvesOwner.get_targetTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_targetTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::UnityEngine.Timeline.ICurvesOwner.get_targetTrack");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 11));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_underlyingAsset
::UnityEngine::Object* UnityEngine::Timeline::TimelineClip::get_underlyingAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_underlyingAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_underlyingAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_underlyingAsset
void UnityEngine::Timeline::TimelineClip::set_underlyingAsset(::UnityEngine::Object* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_underlyingAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_underlyingAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_parentTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineClip::get_parentTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_parentTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_parentTrack
void UnityEngine::Timeline::TimelineClip::set_parentTrack(::UnityEngine::Timeline::TrackAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_parentTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_parentTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.GetParentTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineClip::GetParentTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::GetParentTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.SetParentTrack_Internal
void UnityEngine::Timeline::TimelineClip::SetParentTrack_Internal(::UnityEngine::Timeline::TrackAsset* newParentTrack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::SetParentTrack_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetParentTrack_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newParentTrack)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newParentTrack);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_easeInDuration
double UnityEngine::Timeline::TimelineClip::get_easeInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_easeInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_easeInDuration
void UnityEngine::Timeline::TimelineClip::set_easeInDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_easeInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_easeInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_easeOutDuration
double UnityEngine::Timeline::TimelineClip::get_easeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_easeOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_easeOutDuration
void UnityEngine::Timeline::TimelineClip::set_easeOutDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_easeOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_easeOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_eastOutTime
double UnityEngine::Timeline::TimelineClip::get_eastOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_eastOutTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eastOutTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_easeOutTime
double UnityEngine::Timeline::TimelineClip::get_easeOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_easeOutTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeOutTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_blendInDuration
double UnityEngine::Timeline::TimelineClip::get_blendInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_blendInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blendInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_blendInDuration
void UnityEngine::Timeline::TimelineClip::set_blendInDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_blendInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blendInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_blendOutDuration
double UnityEngine::Timeline::TimelineClip::get_blendOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_blendOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blendOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_blendOutDuration
void UnityEngine::Timeline::TimelineClip::set_blendOutDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_blendOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blendOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_blendInCurveMode
::UnityEngine::Timeline::TimelineClip::BlendCurveMode UnityEngine::Timeline::TimelineClip::get_blendInCurveMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_blendInCurveMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blendInCurveMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip::BlendCurveMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_blendInCurveMode
void UnityEngine::Timeline::TimelineClip::set_blendInCurveMode(::UnityEngine::Timeline::TimelineClip::BlendCurveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_blendInCurveMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blendInCurveMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_blendOutCurveMode
::UnityEngine::Timeline::TimelineClip::BlendCurveMode UnityEngine::Timeline::TimelineClip::get_blendOutCurveMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_blendOutCurveMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blendOutCurveMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip::BlendCurveMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_blendOutCurveMode
void UnityEngine::Timeline::TimelineClip::set_blendOutCurveMode(::UnityEngine::Timeline::TimelineClip::BlendCurveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_blendOutCurveMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blendOutCurveMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasBlendIn
bool UnityEngine::Timeline::TimelineClip::get_hasBlendIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_hasBlendIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasBlendIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasBlendOut
bool UnityEngine::Timeline::TimelineClip::get_hasBlendOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_hasBlendOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasBlendOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixInCurve
::UnityEngine::AnimationCurve* UnityEngine::Timeline::TimelineClip::get_mixInCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_mixInCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixInCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationCurve*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_mixInCurve
void UnityEngine::Timeline::TimelineClip::set_mixInCurve(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_mixInCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mixInCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixInPercentage
float UnityEngine::Timeline::TimelineClip::get_mixInPercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_mixInPercentage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixInPercentage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixInDuration
double UnityEngine::Timeline::TimelineClip::get_mixInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_mixInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixOutCurve
::UnityEngine::AnimationCurve* UnityEngine::Timeline::TimelineClip::get_mixOutCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_mixOutCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixOutCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationCurve*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_mixOutCurve
void UnityEngine::Timeline::TimelineClip::set_mixOutCurve(::UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_mixOutCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mixOutCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixOutTime
double UnityEngine::Timeline::TimelineClip::get_mixOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_mixOutTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixOutTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixOutDuration
double UnityEngine::Timeline::TimelineClip::get_mixOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_mixOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixOutPercentage
float UnityEngine::Timeline::TimelineClip::get_mixOutPercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_mixOutPercentage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixOutPercentage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_recordable
bool UnityEngine::Timeline::TimelineClip::get_recordable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_recordable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_recordable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_recordable
void UnityEngine::Timeline::TimelineClip::set_recordable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_recordable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_recordable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_exposedParameters
::System::Collections::Generic::List_1<::StringW>* UnityEngine::Timeline::TimelineClip::get_exposedParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_exposedParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_exposedParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_clipCaps
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::TimelineClip::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_clipCaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.Hash
int UnityEngine::Timeline::TimelineClip::Hash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::Hash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.EvaluateMixOut
float UnityEngine::Timeline::TimelineClip::EvaluateMixOut(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::EvaluateMixOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateMixOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.EvaluateMixIn
float UnityEngine::Timeline::TimelineClip::EvaluateMixIn(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::EvaluateMixIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateMixIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.GetDefaultMixInCurve
::UnityEngine::AnimationCurve* UnityEngine::Timeline::TimelineClip::GetDefaultMixInCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::GetDefaultMixInCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "GetDefaultMixInCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationCurve*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.GetDefaultMixOutCurve
::UnityEngine::AnimationCurve* UnityEngine::Timeline::TimelineClip::GetDefaultMixOutCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::GetDefaultMixOutCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "GetDefaultMixOutCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationCurve*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.ToLocalTime
double UnityEngine::Timeline::TimelineClip::ToLocalTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ToLocalTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToLocalTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.ToLocalTimeUnbound
double UnityEngine::Timeline::TimelineClip::ToLocalTimeUnbound(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ToLocalTimeUnbound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToLocalTimeUnbound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.FromLocalTimeUnbound
double UnityEngine::Timeline::TimelineClip::FromLocalTimeUnbound(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::FromLocalTimeUnbound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromLocalTimeUnbound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_animationClip
::UnityEngine::AnimationClip* UnityEngine::Timeline::TimelineClip::get_animationClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_animationClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animationClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.SanitizeTimeValue
double UnityEngine::Timeline::TimelineClip::SanitizeTimeValue(double value, double defaultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::SanitizeTimeValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "SanitizeTimeValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(defaultValue)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value, defaultValue);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_postExtrapolationMode
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::get_postExtrapolationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_postExtrapolationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_postExtrapolationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_postExtrapolationMode
void UnityEngine::Timeline::TimelineClip::set_postExtrapolationMode(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_postExtrapolationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_postExtrapolationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_preExtrapolationMode
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::get_preExtrapolationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_preExtrapolationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_preExtrapolationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_preExtrapolationMode
void UnityEngine::Timeline::TimelineClip::set_preExtrapolationMode(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::set_preExtrapolationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_preExtrapolationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.SetPostExtrapolationTime
void UnityEngine::Timeline::TimelineClip::SetPostExtrapolationTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::SetPostExtrapolationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPostExtrapolationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.SetPreExtrapolationTime
void UnityEngine::Timeline::TimelineClip::SetPreExtrapolationTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::SetPreExtrapolationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPreExtrapolationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.IsExtrapolatedTime
bool UnityEngine::Timeline::TimelineClip::IsExtrapolatedTime(double sequenceTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::IsExtrapolatedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsExtrapolatedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceTime)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, sequenceTime);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.IsPreExtrapolatedTime
bool UnityEngine::Timeline::TimelineClip::IsPreExtrapolatedTime(double sequenceTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::IsPreExtrapolatedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPreExtrapolatedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceTime)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, sequenceTime);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.IsPostExtrapolatedTime
bool UnityEngine::Timeline::TimelineClip::IsPostExtrapolatedTime(double sequenceTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::IsPostExtrapolatedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPostExtrapolatedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceTime)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, sequenceTime);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_extrapolatedStart
double UnityEngine::Timeline::TimelineClip::get_extrapolatedStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_extrapolatedStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extrapolatedStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_extrapolatedDuration
double UnityEngine::Timeline::TimelineClip::get_extrapolatedDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::get_extrapolatedDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extrapolatedDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.GetExtrapolatedTime
double UnityEngine::Timeline::TimelineClip::GetExtrapolatedTime(double time, ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation mode, double duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::GetExtrapolatedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "GetExtrapolatedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time, mode, duration);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.CreateCurves
void UnityEngine::Timeline::TimelineClip::CreateCurves(::StringW curvesClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::CreateCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, curvesClipName);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineClip*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.ConformEaseValues
void UnityEngine::Timeline::TimelineClip::ConformEaseValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ConformEaseValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConformEaseValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.CalculateEasingRatio
double UnityEngine::Timeline::TimelineClip::CalculateEasingRatio(double easeIn, double easeOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::CalculateEasingRatio");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "CalculateEasingRatio", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(easeIn), ::il2cpp_utils::ExtractType(easeOut)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, easeIn, easeOut);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UpdateDirty
void UnityEngine::Timeline::TimelineClip::UpdateDirty(double oldValue, double newValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::UpdateDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldValue), ::il2cpp_utils::ExtractType(newValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, oldValue, newValue);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip..cctor
void UnityEngine::Timeline::TimelineClip::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.ToString
::StringW UnityEngine::Timeline::TimelineClip::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClip/Versions
#include "UnityEngine/Timeline/TimelineClip_Versions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/Versions Initial
::UnityEngine::Timeline::TimelineClip::Versions UnityEngine::Timeline::TimelineClip::Versions::_get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::Versions::_get_Initial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::Versions>("UnityEngine.Timeline", "TimelineClip/Versions", "Initial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/Versions Initial
void UnityEngine::Timeline::TimelineClip::Versions::_set_Initial(::UnityEngine::Timeline::TimelineClip::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::Versions::_set_Initial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/Versions", "Initial", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/Versions ClipInFromGlobalToLocal
::UnityEngine::Timeline::TimelineClip::Versions UnityEngine::Timeline::TimelineClip::Versions::_get_ClipInFromGlobalToLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::Versions::_get_ClipInFromGlobalToLocal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::Versions>("UnityEngine.Timeline", "TimelineClip/Versions", "ClipInFromGlobalToLocal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/Versions ClipInFromGlobalToLocal
void UnityEngine::Timeline::TimelineClip::Versions::_set_ClipInFromGlobalToLocal(::UnityEngine::Timeline::TimelineClip::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::Versions::_set_ClipInFromGlobalToLocal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/Versions", "ClipInFromGlobalToLocal", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineClip::Versions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::Versions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClip/TimelineClipUpgrade
#include "UnityEngine/Timeline/TimelineClip_TimelineClipUpgrade.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TimelineClip/TimelineClipUpgrade.UpgradeClipInFromGlobalToLocal
void UnityEngine::Timeline::TimelineClip::TimelineClipUpgrade::UpgradeClipInFromGlobalToLocal(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::TimelineClipUpgrade::UpgradeClipInFromGlobalToLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip/TimelineClipUpgrade", "UpgradeClipInFromGlobalToLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, clip);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClip/ClipExtrapolation
#include "UnityEngine/Timeline/TimelineClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation None
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation None
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_None(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Hold
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Hold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Hold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Hold"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Hold
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Hold(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Hold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Hold", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Loop
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Loop
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Loop(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Loop", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation PingPong
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_PingPong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_PingPong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "PingPong"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation PingPong
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_PingPong(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_PingPong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "PingPong", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Continue
::UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Continue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Continue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Continue"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Continue
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Continue(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Continue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Continue", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineClip::ClipExtrapolation::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::ClipExtrapolation::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClip/BlendCurveMode
#include "UnityEngine/Timeline/TimelineClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Auto
::UnityEngine::Timeline::TimelineClip::BlendCurveMode UnityEngine::Timeline::TimelineClip::BlendCurveMode::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::BlendCurveMode::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::BlendCurveMode>("UnityEngine.Timeline", "TimelineClip/BlendCurveMode", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Auto
void UnityEngine::Timeline::TimelineClip::BlendCurveMode::_set_Auto(::UnityEngine::Timeline::TimelineClip::BlendCurveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::BlendCurveMode::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/BlendCurveMode", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Manual
::UnityEngine::Timeline::TimelineClip::BlendCurveMode UnityEngine::Timeline::TimelineClip::BlendCurveMode::_get_Manual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::BlendCurveMode::_get_Manual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineClip::BlendCurveMode>("UnityEngine.Timeline", "TimelineClip/BlendCurveMode", "Manual"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Manual
void UnityEngine::Timeline::TimelineClip::BlendCurveMode::_set_Manual(::UnityEngine::Timeline::TimelineClip::BlendCurveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::BlendCurveMode::_set_Manual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/BlendCurveMode", "Manual", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineClip::BlendCurveMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::BlendCurveMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset
#include "UnityEngine/Timeline/TimelineAsset.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/Versions
#include "UnityEngine/Timeline/TimelineAsset_Versions.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/TimelineAssetUpgrade
#include "UnityEngine/Timeline/TimelineAsset_TimelineAssetUpgrade.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/MediaType
#include "UnityEngine/Timeline/TimelineAsset_MediaType.hpp"
// Including type: UnityEngine.Timeline.MarkerTrack
#include "UnityEngine/Timeline/MarkerTrack.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/EditorSettings
#include "UnityEngine/Timeline/TimelineAsset_EditorSettings.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27
#include "UnityEngine/Timeline/TimelineAsset_-get_outputs-d__27.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
// Including type: UnityEngine.Timeline.DiscreteTime
#include "UnityEngine/Timeline/DiscreteTime.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_LatestVersion
int UnityEngine::Timeline::TimelineAsset::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "TimelineAsset", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_LatestVersion
void UnityEngine::Timeline::TimelineAsset::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset", "k_LatestVersion", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_Version
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineAsset::dyn_m_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_Version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.ScriptableObject> m_Tracks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>*& UnityEngine::Timeline::TimelineAsset::dyn_m_Tracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_Tracks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Tracks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_FixedDuration
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineAsset::dyn_m_FixedDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_FixedDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FixedDuration"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TrackAsset[] m_CacheOutputTracks
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Timeline::TrackAsset*>& UnityEngine::Timeline::TimelineAsset::dyn_m_CacheOutputTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_CacheOutputTracks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CacheOutputTracks"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Timeline::TrackAsset*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Timeline.TrackAsset> m_CacheRootTracks
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::TrackAsset*>*& UnityEngine::Timeline::TimelineAsset::dyn_m_CacheRootTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_CacheRootTracks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CacheRootTracks"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Timeline::TrackAsset*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TrackAsset[] m_CacheFlattenedTracks
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Timeline::TrackAsset*>& UnityEngine::Timeline::TimelineAsset::dyn_m_CacheFlattenedTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_CacheFlattenedTracks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CacheFlattenedTracks"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Timeline::TrackAsset*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineAsset/EditorSettings m_EditorSettings
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineAsset::EditorSettings*& UnityEngine::Timeline::TimelineAsset::dyn_m_EditorSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_EditorSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EditorSettings"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineAsset::EditorSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineAsset/DurationMode m_DurationMode
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineAsset::DurationMode& UnityEngine::Timeline::TimelineAsset::dyn_m_DurationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_DurationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DurationMode"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineAsset::DurationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.MarkerTrack m_MarkerTrack
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::MarkerTrack*& UnityEngine::Timeline::TimelineAsset::dyn_m_MarkerTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::dyn_m_MarkerTrack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MarkerTrack"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::MarkerTrack**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UpgradeToLatestVersion
void UnityEngine::Timeline::TimelineAsset::UpgradeToLatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::UpgradeToLatestVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeToLatestVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_editorSettings
::UnityEngine::Timeline::TimelineAsset::EditorSettings* UnityEngine::Timeline::TimelineAsset::get_editorSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_editorSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_editorSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineAsset::EditorSettings*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_fixedDuration
double UnityEngine::Timeline::TimelineAsset::get_fixedDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_fixedDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fixedDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.set_fixedDuration
void UnityEngine::Timeline::TimelineAsset::set_fixedDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::set_fixedDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fixedDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_durationMode
::UnityEngine::Timeline::TimelineAsset::DurationMode UnityEngine::Timeline::TimelineAsset::get_durationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_durationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_durationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineAsset::DurationMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.set_durationMode
void UnityEngine::Timeline::TimelineAsset::set_durationMode(::UnityEngine::Timeline::TimelineAsset::DurationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::set_durationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_durationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_clipCaps
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::TimelineAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset*), 11));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_outputTrackCount
int UnityEngine::Timeline::TimelineAsset::get_outputTrackCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_outputTrackCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputTrackCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_rootTrackCount
int UnityEngine::Timeline::TimelineAsset::get_rootTrackCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_rootTrackCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootTrackCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.OnValidate
void UnityEngine::Timeline::TimelineAsset::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetRootTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineAsset::GetRootTrack(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::GetRootTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetRootTracks
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>* UnityEngine::Timeline::TimelineAsset::GetRootTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::GetRootTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetOutputTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineAsset::GetOutputTrack(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::GetOutputTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOutputTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetOutputTracks
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>* UnityEngine::Timeline::TimelineAsset::GetOutputTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::GetOutputTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOutputTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetValidFrameRate
double UnityEngine::Timeline::TimelineAsset::GetValidFrameRate(double frameRate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::GetValidFrameRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineAsset", "GetValidFrameRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameRate)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, frameRate);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UpdateRootTrackCache
void UnityEngine::Timeline::TimelineAsset::UpdateRootTrackCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::UpdateRootTrackCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRootTrackCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UpdateOutputTrackCache
void UnityEngine::Timeline::TimelineAsset::UpdateOutputTrackCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::UpdateOutputTrackCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateOutputTrackCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_flattenedTracks
::ArrayW<::UnityEngine::Timeline::TrackAsset*> UnityEngine::Timeline::TimelineAsset::get_flattenedTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_flattenedTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flattenedTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Timeline::TrackAsset*>, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_markerTrack
::UnityEngine::Timeline::MarkerTrack* UnityEngine::Timeline::TimelineAsset::get_markerTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_markerTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_markerTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::MarkerTrack*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_trackObjects
::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>* UnityEngine::Timeline::TimelineAsset::get_trackObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_trackObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_trackObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.AddTrackInternal
void UnityEngine::Timeline::TimelineAsset::AddTrackInternal(::UnityEngine::Timeline::TrackAsset* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::AddTrackInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTrackInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.RemoveTrack
void UnityEngine::Timeline::TimelineAsset::RemoveTrack(::UnityEngine::Timeline::TrackAsset* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::RemoveTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::TimelineAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::TimelineAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.__internalAwake
void UnityEngine::Timeline::TimelineAsset::__internalAwake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::__internalAwake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__internalAwake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GatherProperties
void UnityEngine::Timeline::TimelineAsset::GatherProperties(::UnityEngine::Playables::PlayableDirector* director, ::UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::GatherProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.CreateMarkerTrack
void UnityEngine::Timeline::TimelineAsset::CreateMarkerTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::CreateMarkerTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMarkerTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.Invalidate
void UnityEngine::Timeline::TimelineAsset::Invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::Invalidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invalidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UpdateFixedDurationWithItemsDuration
void UnityEngine::Timeline::TimelineAsset::UpdateFixedDurationWithItemsDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::UpdateFixedDurationWithItemsDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFixedDurationWithItemsDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.CalculateItemsDuration
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::TimelineAsset::CalculateItemsDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::CalculateItemsDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateItemsDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.AddSubTracksRecursive
void UnityEngine::Timeline::TimelineAsset::AddSubTracksRecursive(::UnityEngine::Timeline::TrackAsset* track, ByRef<::System::Collections::Generic::List_1<::UnityEngine::Timeline::TrackAsset*>*> allTracks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::AddSubTracksRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineAsset", "AddSubTracksRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track), ::il2cpp_utils::ExtractType(allTracks)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, track, byref(allTracks));
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.CreateTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineAsset::CreateTrack(::System::Type* type, ::UnityEngine::Timeline::TrackAsset* parent, ::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::CreateTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method, type, parent, name);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.DeleteClip
bool UnityEngine::Timeline::TimelineAsset::DeleteClip(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DeleteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.DeleteTrack
bool UnityEngine::Timeline::TimelineAsset::DeleteTrack(::UnityEngine::Timeline::TrackAsset* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DeleteTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.MoveLastTrackBefore
void UnityEngine::Timeline::TimelineAsset::MoveLastTrackBefore(::UnityEngine::Timeline::TrackAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MoveLastTrackBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveLastTrackBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, asset);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.AllocateTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineAsset::AllocateTrack(::UnityEngine::Timeline::TrackAsset* trackAssetParent, ::StringW trackName, ::System::Type* trackType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::AllocateTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllocateTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trackAssetParent), ::il2cpp_utils::ExtractType(trackName), ::il2cpp_utils::ExtractType(trackType)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method, trackAssetParent, trackName, trackType);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.DeleteRecordedAnimation
void UnityEngine::Timeline::TimelineAsset::DeleteRecordedAnimation(::UnityEngine::Timeline::TrackAsset* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DeleteRecordedAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteRecordedAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.DeleteRecordedAnimation
void UnityEngine::Timeline::TimelineAsset::DeleteRecordedAnimation(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DeleteRecordedAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteRecordedAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_duration
double UnityEngine::Timeline::TimelineAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 7));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_outputs
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::TimelineAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.CreatePlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::TimelineAsset::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset/Versions
#include "UnityEngine/Timeline/TimelineAsset_Versions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/Versions Initial
::UnityEngine::Timeline::TimelineAsset::Versions UnityEngine::Timeline::TimelineAsset::Versions::_get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::Versions::_get_Initial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::Versions>("UnityEngine.Timeline", "TimelineAsset/Versions", "Initial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/Versions Initial
void UnityEngine::Timeline::TimelineAsset::Versions::_set_Initial(::UnityEngine::Timeline::TimelineAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::Versions::_set_Initial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/Versions", "Initial", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineAsset::Versions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::Versions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset/MediaType
#include "UnityEngine/Timeline/TimelineAsset_MediaType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Animation
::UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_get_Animation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Animation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Animation
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Animation(::UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_set_Animation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Animation", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Audio
::UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Audio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_get_Audio");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Audio"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Audio
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Audio(::UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_set_Audio");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Audio", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Texture
::UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_get_Texture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Texture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Texture
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Texture(::UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_set_Texture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Texture", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Video
::UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Video() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_get_Video");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Video"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Video
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Video(::UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_set_Video");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Video", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Script
::UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Script() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_get_Script");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Script"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Script
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Script(::UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_set_Script");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Script", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Hybrid
::UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Hybrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_get_Hybrid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Hybrid"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Hybrid
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Hybrid(::UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_set_Hybrid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Hybrid", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Group
::UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Group() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_get_Group");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Group"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Group
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Group(::UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::_set_Group");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Group", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineAsset::MediaType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::MediaType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset/DurationMode
#include "UnityEngine/Timeline/TimelineAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode BasedOnClips
::UnityEngine::Timeline::TimelineAsset::DurationMode UnityEngine::Timeline::TimelineAsset::DurationMode::_get_BasedOnClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DurationMode::_get_BasedOnClips");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::DurationMode>("UnityEngine.Timeline", "TimelineAsset/DurationMode", "BasedOnClips"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode BasedOnClips
void UnityEngine::Timeline::TimelineAsset::DurationMode::_set_BasedOnClips(::UnityEngine::Timeline::TimelineAsset::DurationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DurationMode::_set_BasedOnClips");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/DurationMode", "BasedOnClips", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode FixedLength
::UnityEngine::Timeline::TimelineAsset::DurationMode UnityEngine::Timeline::TimelineAsset::DurationMode::_get_FixedLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DurationMode::_get_FixedLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TimelineAsset::DurationMode>("UnityEngine.Timeline", "TimelineAsset/DurationMode", "FixedLength"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode FixedLength
void UnityEngine::Timeline::TimelineAsset::DurationMode::_set_FixedLength(::UnityEngine::Timeline::TimelineAsset::DurationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DurationMode::_set_FixedLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/DurationMode", "FixedLength", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineAsset::DurationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::DurationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset/EditorSettings
#include "UnityEngine/Timeline/TimelineAsset_EditorSettings.hpp"
// Including type: UnityEngine.Timeline.StandardFrameRates
#include "UnityEngine/Timeline/StandardFrameRates.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Double kMinFrameRate
double UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kMinFrameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kMinFrameRate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kMinFrameRate"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Double kMinFrameRate
void UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kMinFrameRate(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kMinFrameRate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kMinFrameRate", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Double kMaxFrameRate
double UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kMaxFrameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kMaxFrameRate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kMaxFrameRate"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Double kMaxFrameRate
void UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kMaxFrameRate(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kMaxFrameRate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kMaxFrameRate", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Double kDefaultFrameRate
double UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kDefaultFrameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kDefaultFrameRate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kDefaultFrameRate"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Double kDefaultFrameRate
void UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kDefaultFrameRate(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kDefaultFrameRate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kDefaultFrameRate", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_Framerate
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::TimelineAsset::EditorSettings::dyn_m_Framerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::dyn_m_Framerate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Framerate"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_ScenePreview
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::TimelineAsset::EditorSettings::dyn_m_ScenePreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::dyn_m_ScenePreview");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScenePreview"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.get_fps
float UnityEngine::Timeline::TimelineAsset::EditorSettings::get_fps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::get_fps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.set_fps
void UnityEngine::Timeline::TimelineAsset::EditorSettings::set_fps(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::set_fps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.get_frameRate
double UnityEngine::Timeline::TimelineAsset::EditorSettings::get_frameRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::get_frameRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_frameRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.set_frameRate
void UnityEngine::Timeline::TimelineAsset::EditorSettings::set_frameRate(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::set_frameRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_frameRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.SetStandardFrameRate
void UnityEngine::Timeline::TimelineAsset::EditorSettings::SetStandardFrameRate(::UnityEngine::Timeline::StandardFrameRates enumValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::SetStandardFrameRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStandardFrameRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enumValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enumValue);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.get_scenePreview
bool UnityEngine::Timeline::TimelineAsset::EditorSettings::get_scenePreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::get_scenePreview");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scenePreview", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.set_scenePreview
void UnityEngine::Timeline::TimelineAsset::EditorSettings::set_scenePreview(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::set_scenePreview");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scenePreview", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings..cctor
void UnityEngine::Timeline::TimelineAsset::EditorSettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::EditorSettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineAsset/EditorSettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27
#include "UnityEngine/Timeline/TimelineAsset_-get_outputs-d__27.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableBinding <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableBinding& UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableBinding*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Timeline.TimelineAsset <>4__this
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineAsset*& UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<UnityEngine.Timeline.TrackAsset> <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Timeline::TrackAsset*>*& UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Timeline::TrackAsset*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<UnityEngine.Playables.PlayableBinding> <>7__wrap2
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>*& UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$7__wrap2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::dyn_$$7__wrap2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap2"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.IDisposable.Dispose
void UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.MoveNext
bool UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.<>m__Finally1
void UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.<>m__Finally2
void UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::$$m__Finally2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::<>m__Finally2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
::UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: UnityEngine.Timeline.TrackAsset/Versions
#include "UnityEngine/Timeline/TrackAsset_Versions.hpp"
// Including type: UnityEngine.Timeline.TrackAsset/TrackAssetUpgrade
#include "UnityEngine/Timeline/TrackAsset_TrackAssetUpgrade.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Timeline.TrackAsset/<>c
#include "UnityEngine/Timeline/TrackAsset_--c.hpp"
// Including type: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65
#include "UnityEngine/Timeline/TrackAsset_-get_outputs-d__65.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Timeline.TrackBindingTypeAttribute
#include "UnityEngine/Timeline/TrackBindingTypeAttribute.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset
#include "UnityEngine/Timeline/TimelineAsset.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Timeline.IMarker
#include "UnityEngine/Timeline/IMarker.hpp"
// Including type: UnityEngine.Timeline.IntervalTree`1
#include "UnityEngine/Timeline/IntervalTree_1.hpp"
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_LatestVersion
int UnityEngine::Timeline::TrackAsset::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "TrackAsset", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_LatestVersion
void UnityEngine::Timeline::TrackAsset::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "k_LatestVersion", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Timeline.TrackAsset/TransientBuildData s_BuildData
::UnityEngine::Timeline::TrackAsset::TransientBuildData UnityEngine::Timeline::TrackAsset::_get_s_BuildData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_get_s_BuildData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackAsset::TransientBuildData>("UnityEngine.Timeline", "TrackAsset", "s_BuildData"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Timeline.TrackAsset/TransientBuildData s_BuildData
void UnityEngine::Timeline::TrackAsset::_set_s_BuildData(::UnityEngine::Timeline::TrackAsset::TransientBuildData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_set_s_BuildData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "s_BuildData", value));
}
// Autogenerated static field getter
// Get static field: static System.String kDefaultCurvesName
::StringW UnityEngine::Timeline::TrackAsset::_get_kDefaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_get_kDefaultCurvesName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("UnityEngine.Timeline", "TrackAsset", "kDefaultCurvesName"));
}
// Autogenerated static field setter
// Set static field: static System.String kDefaultCurvesName
void UnityEngine::Timeline::TrackAsset::_set_kDefaultCurvesName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_set_kDefaultCurvesName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "kDefaultCurvesName", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnClipPlayableCreate
::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* UnityEngine::Timeline::TrackAsset::_get_OnClipPlayableCreate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_get_OnClipPlayableCreate");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>*>("UnityEngine.Timeline", "TrackAsset", "OnClipPlayableCreate")));
}
// Autogenerated static field setter
// Set static field: static private System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnClipPlayableCreate
void UnityEngine::Timeline::TrackAsset::_set_OnClipPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_set_OnClipPlayableCreate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "OnClipPlayableCreate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`3<UnityEngine.Timeline.TrackAsset,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnTrackAnimationPlayableCreate
::System::Action_3<::UnityEngine::Timeline::TrackAsset*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* UnityEngine::Timeline::TrackAsset::_get_OnTrackAnimationPlayableCreate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_get_OnTrackAnimationPlayableCreate");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_3<::UnityEngine::Timeline::TrackAsset*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>*>("UnityEngine.Timeline", "TrackAsset", "OnTrackAnimationPlayableCreate")));
}
// Autogenerated static field setter
// Set static field: static private System.Action`3<UnityEngine.Timeline.TrackAsset,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnTrackAnimationPlayableCreate
void UnityEngine::Timeline::TrackAsset::_set_OnTrackAnimationPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TrackAsset*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_set_OnTrackAnimationPlayableCreate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "OnTrackAnimationPlayableCreate", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Timeline.TrackAsset[] s_EmptyCache
::ArrayW<::UnityEngine::Timeline::TrackAsset*> UnityEngine::Timeline::TrackAsset::_get_s_EmptyCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_get_s_EmptyCache");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Timeline::TrackAsset*>>("UnityEngine.Timeline", "TrackAsset", "s_EmptyCache"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Timeline.TrackAsset[] s_EmptyCache
void UnityEngine::Timeline::TrackAsset::_set_s_EmptyCache(::ArrayW<::UnityEngine::Timeline::TrackAsset*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_set_s_EmptyCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "s_EmptyCache", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Timeline.TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache
::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Timeline::TrackBindingTypeAttribute*>* UnityEngine::Timeline::TrackAsset::_get_s_TrackBindingTypeAttributeCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_get_s_TrackBindingTypeAttributeCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Timeline::TrackBindingTypeAttribute*>*>("UnityEngine.Timeline", "TrackAsset", "s_TrackBindingTypeAttributeCache")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Timeline.TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache
void UnityEngine::Timeline::TrackAsset::_set_s_TrackBindingTypeAttributeCache(::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Timeline::TrackBindingTypeAttribute*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::_set_s_TrackBindingTypeAttributeCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "s_TrackBindingTypeAttributeCache", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_Version
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TrackAsset::dyn_m_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Version");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Version"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.AnimationClip m_AnimClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& UnityEngine::Timeline::TrackAsset::dyn_m_AnimClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_AnimClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AnimClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_Locked
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::TrackAsset::dyn_m_Locked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Locked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Locked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_Muted
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::TrackAsset::dyn_m_Muted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Muted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Muted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String m_CustomPlayableFullTypename
[[deprecated("Use field access instead!")]] ::StringW& UnityEngine::Timeline::TrackAsset::dyn_m_CustomPlayableFullTypename() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_CustomPlayableFullTypename");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CustomPlayableFullTypename"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationClip m_Curves
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& UnityEngine::Timeline::TrackAsset::dyn_m_Curves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Curves");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Curves"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableAsset m_Parent
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableAsset*& UnityEngine::Timeline::TrackAsset::dyn_m_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Parent"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.ScriptableObject> m_Children
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>*& UnityEngine::Timeline::TrackAsset::dyn_m_Children() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Children");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Children"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 m_ItemsHash
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TrackAsset::dyn_m_ItemsHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_ItemsHash");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ItemsHash"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip[] m_ClipsCache
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Timeline::TimelineClip*>& UnityEngine::Timeline::TrackAsset::dyn_m_ClipsCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_ClipsCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ClipsCache"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Timeline::TimelineClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.DiscreteTime m_Start
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::DiscreteTime& UnityEngine::Timeline::TrackAsset::dyn_m_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Start");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Start"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::DiscreteTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.DiscreteTime m_End
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::DiscreteTime& UnityEngine::Timeline::TrackAsset::dyn_m_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_End");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_End"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::DiscreteTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_CacheSorted
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::TrackAsset::dyn_m_CacheSorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_CacheSorted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CacheSorted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Boolean> m_SupportsNotifications
[[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& UnityEngine::Timeline::TrackAsset::dyn_m_SupportsNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_SupportsNotifications");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SupportsNotifications"))->offset;
  return *reinterpret_cast<::System::Nullable_1<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> m_ChildTrackCache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>*& UnityEngine::Timeline::TrackAsset::dyn_m_ChildTrackCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_ChildTrackCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChildTrackCache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal System.Collections.Generic.List`1<UnityEngine.Timeline.TimelineClip> m_Clips
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::TimelineClip*>*& UnityEngine::Timeline::TrackAsset::dyn_m_Clips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Clips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Clips"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Timeline::TimelineClip*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.MarkerList m_Markers
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::MarkerList& UnityEngine::Timeline::TrackAsset::dyn_m_Markers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::dyn_m_Markers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Markers"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::MarkerList*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnBeforeTrackSerialize
void UnityEngine::Timeline::TrackAsset::OnBeforeTrackSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::OnBeforeTrackSerialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnAfterTrackDeserialize
void UnityEngine::Timeline::TrackAsset::OnAfterTrackDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::OnAfterTrackDeserialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 21));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnUpgradeFromVersion
void UnityEngine::Timeline::TrackAsset::OnUpgradeFromVersion(int oldVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::OnUpgradeFromVersion");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 22));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, oldVersion);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UpgradeToLatestVersion
void UnityEngine::Timeline::TrackAsset::UpgradeToLatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UpgradeToLatestVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeToLatestVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.add_OnClipPlayableCreate
void UnityEngine::Timeline::TrackAsset::add_OnClipPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::add_OnClipPlayableCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "add_OnClipPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.remove_OnClipPlayableCreate
void UnityEngine::Timeline::TrackAsset::remove_OnClipPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::remove_OnClipPlayableCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "remove_OnClipPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.add_OnTrackAnimationPlayableCreate
void UnityEngine::Timeline::TrackAsset::add_OnTrackAnimationPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TrackAsset*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::add_OnTrackAnimationPlayableCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "add_OnTrackAnimationPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.remove_OnTrackAnimationPlayableCreate
void UnityEngine::Timeline::TrackAsset::remove_OnTrackAnimationPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TrackAsset*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::remove_OnTrackAnimationPlayableCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "remove_OnTrackAnimationPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_start
double UnityEngine::Timeline::TrackAsset::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_end
double UnityEngine::Timeline::TrackAsset::get_end() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_end");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_end", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_muted
bool UnityEngine::Timeline::TrackAsset::get_muted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_muted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_muted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_muted
void UnityEngine::Timeline::TrackAsset::set_muted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::set_muted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_muted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_mutedInHierarchy
bool UnityEngine::Timeline::TrackAsset::get_mutedInHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_mutedInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mutedInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_timelineAsset
::UnityEngine::Timeline::TimelineAsset* UnityEngine::Timeline::TrackAsset::get_timelineAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_timelineAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timelineAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_parent
::UnityEngine::Playables::PlayableAsset* UnityEngine::Timeline::TrackAsset::get_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_parent
void UnityEngine::Timeline::TrackAsset::set_parent(::UnityEngine::Playables::PlayableAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::set_parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetClips
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TimelineClip*>* UnityEngine::Timeline::TrackAsset::GetClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetClips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TimelineClip*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_clips
::ArrayW<::UnityEngine::Timeline::TimelineClip*> UnityEngine::Timeline::TrackAsset::get_clips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_clips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Timeline::TimelineClip*>, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_isEmpty
bool UnityEngine::Timeline::TrackAsset::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_isEmpty");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 23));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_hasClips
bool UnityEngine::Timeline::TrackAsset::get_hasClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_hasClips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_hasCurves
bool UnityEngine::Timeline::TrackAsset::get_hasCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_hasCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 13));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_isSubTrack
bool UnityEngine::Timeline::TrackAsset::get_isSubTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_isSubTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSubTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetChildTracks
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>* UnityEngine::Timeline::TrackAsset::GetChildTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetChildTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChildTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_customPlayableTypename
::StringW UnityEngine::Timeline::TrackAsset::get_customPlayableTypename() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_customPlayableTypename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_customPlayableTypename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_customPlayableTypename
void UnityEngine::Timeline::TrackAsset::set_customPlayableTypename(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::set_customPlayableTypename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_customPlayableTypename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_curves
::UnityEngine::AnimationClip* UnityEngine::Timeline::TrackAsset::get_curves() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_curves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 12));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_curves
void UnityEngine::Timeline::TrackAsset::set_curves(::UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::set_curves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_curves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
::StringW UnityEngine::Timeline::TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 16));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.Timeline.ICurvesOwner.get_asset
::UnityEngine::Object* UnityEngine::Timeline::TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UnityEngine.Timeline.ICurvesOwner.get_asset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 17));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.Timeline.ICurvesOwner.get_assetOwner
::UnityEngine::Object* UnityEngine::Timeline::TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_assetOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UnityEngine.Timeline.ICurvesOwner.get_assetOwner");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 18));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.Timeline.ICurvesOwner.get_targetTrack
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_targetTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UnityEngine.Timeline.ICurvesOwner.get_targetTrack");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 19));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_subTracksObjects
::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>* UnityEngine::Timeline::TrackAsset::get_subTracksObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_subTracksObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_subTracksObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_locked
bool UnityEngine::Timeline::TrackAsset::get_locked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_locked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_locked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_locked
void UnityEngine::Timeline::TrackAsset::set_locked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::set_locked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_locked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_lockedInHierarchy
bool UnityEngine::Timeline::TrackAsset::get_lockedInHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_lockedInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lockedInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_supportsNotifications
bool UnityEngine::Timeline::TrackAsset::get_supportsNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_supportsNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_supportsNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.__internalAwake
void UnityEngine::Timeline::TrackAsset::__internalAwake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::__internalAwake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__internalAwake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateCurves
void UnityEngine::Timeline::TrackAsset::CreateCurves(::StringW curvesClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateCurves");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, curvesClipName);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateTrackMixer
::UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreateTrackMixer(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateTrackMixer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 24));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateDefaultClip
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateDefaultClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateDefaultClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDefaultClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.DeleteClip
bool UnityEngine::Timeline::TrackAsset::DeleteClip(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::DeleteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateMarker
::UnityEngine::Timeline::IMarker* UnityEngine::Timeline::TrackAsset::CreateMarker(::System::Type* type, double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::IMarker*, false>(this, ___internal__method, type, time);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.DeleteMarker
bool UnityEngine::Timeline::TrackAsset::DeleteMarker(::UnityEngine::Timeline::IMarker* marker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::DeleteMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(marker)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, marker);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetMarkers
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::IMarker*>* UnityEngine::Timeline::TrackAsset::GetMarkers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetMarkers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMarkers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::IMarker*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetMarkerCount
int UnityEngine::Timeline::TrackAsset::GetMarkerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetMarkerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMarkerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetMarker
::UnityEngine::Timeline::IMarker* UnityEngine::Timeline::TrackAsset::GetMarker(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::IMarker*, false>(this, ___internal__method, idx);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateClip
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateClip(::System::Type* requestedType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestedType)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, requestedType);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateAndAddNewClipOfType
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateAndAddNewClipOfType(::System::Type* requestedType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateAndAddNewClipOfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndAddNewClipOfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestedType)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, requestedType);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateClipOfType
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateClipOfType(::System::Type* requestedType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateClipOfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClipOfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestedType)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, requestedType);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateClipFromPlayableAsset
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateClipFromPlayableAsset(::UnityEngine::Playables::IPlayableAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateClipFromPlayableAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClipFromPlayableAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, asset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateClipFromAsset
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateClipFromAsset(::UnityEngine::ScriptableObject* playableAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateClipFromAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClipFromAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playableAsset)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, playableAsset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetMarkersRaw
::System::Collections::Generic::IEnumerable_1<::UnityEngine::ScriptableObject*>* UnityEngine::Timeline::TrackAsset::GetMarkersRaw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetMarkersRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMarkersRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::ScriptableObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ClearMarkers
void UnityEngine::Timeline::TrackAsset::ClearMarkers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::ClearMarkers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMarkers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.AddMarker
void UnityEngine::Timeline::TrackAsset::AddMarker(::UnityEngine::ScriptableObject* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::AddMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.DeleteMarkerRaw
bool UnityEngine::Timeline::TrackAsset::DeleteMarkerRaw(::UnityEngine::ScriptableObject* marker) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::DeleteMarkerRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteMarkerRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(marker)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, marker);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetTimeRangeHash
int UnityEngine::Timeline::TrackAsset::GetTimeRangeHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetTimeRangeHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeRangeHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.AddClip
void UnityEngine::Timeline::TrackAsset::AddClip(::UnityEngine::Timeline::TimelineClip* newClip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::AddClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newClip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newClip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateNotificationsPlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreateNotificationsPlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Playables::Playable mixerPlayable, ::UnityEngine::GameObject* go, ::UnityEngine::Playables::Playable timelinePlayable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateNotificationsPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNotificationsPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(mixerPlayable), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(timelinePlayable)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, mixerPlayable, go, timelinePlayable);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreatePlayableGraph
::UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreatePlayableGraph(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, ::UnityEngine::Timeline::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree, ::UnityEngine::Playables::Playable timelinePlayable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreatePlayableGraph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayableGraph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(timelinePlayable)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree, timelinePlayable);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CompileClips
::UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CompileClips(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, ::System::Collections::Generic::IList_1<::UnityEngine::Timeline::TimelineClip*>* timelineClips, ::UnityEngine::Timeline::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CompileClips");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, timelineClips, tree);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GatherCompilableTracks
void UnityEngine::Timeline::TrackAsset::GatherCompilableTracks(::System::Collections::Generic::IList_1<::UnityEngine::Timeline::TrackAsset*>* tracks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GatherCompilableTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherCompilableTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracks)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tracks);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GatherNotifications
void UnityEngine::Timeline::TrackAsset::GatherNotifications(::System::Collections::Generic::List_1<::UnityEngine::Timeline::IMarker*>* markers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GatherNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(markers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, markers);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateMixerPlayableGraph
::UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreateMixerPlayableGraph(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, ::UnityEngine::Timeline::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateMixerPlayableGraph");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 26));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ConfigureTrackAnimation
void UnityEngine::Timeline::TrackAsset::ConfigureTrackAnimation(::UnityEngine::Timeline::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree, ::UnityEngine::GameObject* go, ::UnityEngine::Playables::Playable blend) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::ConfigureTrackAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfigureTrackAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(blend)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tree, go, blend);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.SortClips
void UnityEngine::Timeline::TrackAsset::SortClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::SortClips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ClearClipsInternal
void UnityEngine::Timeline::TrackAsset::ClearClipsInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::ClearClipsInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearClipsInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ClearSubTracksInternal
void UnityEngine::Timeline::TrackAsset::ClearSubTracksInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::ClearSubTracksInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSubTracksInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnClipMove
void UnityEngine::Timeline::TrackAsset::OnClipMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::OnClipMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnClipMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateNewClipContainerInternal
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateNewClipContainerInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateNewClipContainerInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNewClipContainerInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.AddChild
void UnityEngine::Timeline::TrackAsset::AddChild(::UnityEngine::Timeline::TrackAsset* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::AddChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, child);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.MoveLastTrackBefore
void UnityEngine::Timeline::TrackAsset::MoveLastTrackBefore(::UnityEngine::Timeline::TrackAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::MoveLastTrackBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveLastTrackBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, asset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.RemoveSubTrack
bool UnityEngine::Timeline::TrackAsset::RemoveSubTrack(::UnityEngine::Timeline::TrackAsset* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::RemoveSubTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveSubTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, child);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.RemoveClip
void UnityEngine::Timeline::TrackAsset::RemoveClip(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::RemoveClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetEvaluationTime
void UnityEngine::Timeline::TrackAsset::GetEvaluationTime(ByRef<double> outStart, ByRef<double> outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetEvaluationTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 27));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(outStart), byref(outDuration));
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetSequenceTime
void UnityEngine::Timeline::TrackAsset::GetSequenceTime(ByRef<double> outStart, ByRef<double> outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetSequenceTime");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 28));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(outStart), byref(outDuration));
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GatherProperties
void UnityEngine::Timeline::TrackAsset::GatherProperties(::UnityEngine::Playables::PlayableDirector* director, ::UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GatherProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetGameObjectBinding
::UnityEngine::GameObject* UnityEngine::Timeline::TrackAsset::GetGameObjectBinding(::UnityEngine::Playables::PlayableDirector* director) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetGameObjectBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameObjectBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, director);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ValidateClipType
bool UnityEngine::Timeline::TrackAsset::ValidateClipType(::System::Type* clipType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::ValidateClipType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateClipType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, clipType);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnCreateClip
void UnityEngine::Timeline::TrackAsset::OnCreateClip(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::OnCreateClip");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UpdateDuration
void UnityEngine::Timeline::TrackAsset::UpdateDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UpdateDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CalculateItemsHash
int UnityEngine::Timeline::TrackAsset::CalculateItemsHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CalculateItemsHash");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 31));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreatePlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* gameObject, ::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 32));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, gameObject, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.Invalidate
void UnityEngine::Timeline::TrackAsset::Invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Invalidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invalidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetNotificationDuration
double UnityEngine::Timeline::TrackAsset::GetNotificationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetNotificationDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNotificationDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CanCompileClips
bool UnityEngine::Timeline::TrackAsset::CanCompileClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CanCompileClips");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 33));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CanCreateTrackMixer
bool UnityEngine::Timeline::TrackAsset::CanCreateTrackMixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CanCreateTrackMixer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 34));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.IsCompilable
bool UnityEngine::Timeline::TrackAsset::IsCompilable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::IsCompilable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsCompilable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UpdateChildTrackCache
void UnityEngine::Timeline::TrackAsset::UpdateChildTrackCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::UpdateChildTrackCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateChildTrackCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.Hash
int UnityEngine::Timeline::TrackAsset::Hash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Hash");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 35));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetClipsHash
int UnityEngine::Timeline::TrackAsset::GetClipsHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetClipsHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClipsHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetAnimationClipHash
int UnityEngine::Timeline::TrackAsset::GetAnimationClipHash(::UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::GetAnimationClipHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "GetAnimationClipHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.HasNotifications
bool UnityEngine::Timeline::TrackAsset::HasNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::HasNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CanCompileNotifications
bool UnityEngine::Timeline::TrackAsset::CanCompileNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CanCompileNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCompileNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CanCreateMixerRecursive
bool UnityEngine::Timeline::TrackAsset::CanCreateMixerRecursive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CanCreateMixerRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCreateMixerRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset..cctor
void UnityEngine::Timeline::TrackAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_duration
double UnityEngine::Timeline::TrackAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 7));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_outputs
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::TrackAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreatePlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackAsset/Versions
#include "UnityEngine/Timeline/TrackAsset_Versions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackAsset/Versions Initial
::UnityEngine::Timeline::TrackAsset::Versions UnityEngine::Timeline::TrackAsset::Versions::_get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::_get_Initial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackAsset::Versions>("UnityEngine.Timeline", "TrackAsset/Versions", "Initial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackAsset/Versions Initial
void UnityEngine::Timeline::TrackAsset::Versions::_set_Initial(::UnityEngine::Timeline::TrackAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::_set_Initial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/Versions", "Initial", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackAsset/Versions RotationAsEuler
::UnityEngine::Timeline::TrackAsset::Versions UnityEngine::Timeline::TrackAsset::Versions::_get_RotationAsEuler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::_get_RotationAsEuler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackAsset::Versions>("UnityEngine.Timeline", "TrackAsset/Versions", "RotationAsEuler"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackAsset/Versions RotationAsEuler
void UnityEngine::Timeline::TrackAsset::Versions::_set_RotationAsEuler(::UnityEngine::Timeline::TrackAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::_set_RotationAsEuler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/Versions", "RotationAsEuler", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackAsset/Versions RootMotionUpgrade
::UnityEngine::Timeline::TrackAsset::Versions UnityEngine::Timeline::TrackAsset::Versions::_get_RootMotionUpgrade() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::_get_RootMotionUpgrade");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackAsset::Versions>("UnityEngine.Timeline", "TrackAsset/Versions", "RootMotionUpgrade"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackAsset/Versions RootMotionUpgrade
void UnityEngine::Timeline::TrackAsset::Versions::_set_RootMotionUpgrade(::UnityEngine::Timeline::TrackAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::_set_RootMotionUpgrade");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/Versions", "RootMotionUpgrade", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackAsset/Versions AnimatedTrackProperties
::UnityEngine::Timeline::TrackAsset::Versions UnityEngine::Timeline::TrackAsset::Versions::_get_AnimatedTrackProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::_get_AnimatedTrackProperties");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackAsset::Versions>("UnityEngine.Timeline", "TrackAsset/Versions", "AnimatedTrackProperties"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackAsset/Versions AnimatedTrackProperties
void UnityEngine::Timeline::TrackAsset::Versions::_set_AnimatedTrackProperties(::UnityEngine::Timeline::TrackAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::_set_AnimatedTrackProperties");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/Versions", "AnimatedTrackProperties", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TrackAsset::Versions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::Versions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackAsset/TransientBuildData
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.IMarker
#include "UnityEngine/Timeline/IMarker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Timeline.TrackAsset> trackList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::TrackAsset*>*& UnityEngine::Timeline::TrackAsset::TransientBuildData::dyn_trackList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::TransientBuildData::dyn_trackList");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Timeline::TrackAsset*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Timeline.TimelineClip> clipList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::TimelineClip*>*& UnityEngine::Timeline::TrackAsset::TransientBuildData::dyn_clipList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::TransientBuildData::dyn_clipList");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clipList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Timeline::TimelineClip*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Timeline.IMarker> markerList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::IMarker*>*& UnityEngine::Timeline::TrackAsset::TransientBuildData::dyn_markerList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::TransientBuildData::dyn_markerList");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "markerList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Timeline::IMarker*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/TransientBuildData.Create
::UnityEngine::Timeline::TrackAsset::TransientBuildData UnityEngine::Timeline::TrackAsset::TransientBuildData::Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::TransientBuildData::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset/TransientBuildData", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset::TransientBuildData, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/TransientBuildData.Clear
void UnityEngine::Timeline::TrackAsset::TransientBuildData::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::TransientBuildData::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackAsset/<>c
#include "UnityEngine/Timeline/TrackAsset_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Timeline.TrackAsset/<>c <>9
::UnityEngine::Timeline::TrackAsset::$$c* UnityEngine::Timeline::TrackAsset::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::TrackAsset::$$c*>("UnityEngine.Timeline", "TrackAsset/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Timeline.TrackAsset/<>c <>9
void UnityEngine::Timeline::TrackAsset::$$c::_set_$$9(::UnityEngine::Timeline::TrackAsset::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<UnityEngine.Timeline.TimelineClip> <>9__121_0
::System::Comparison_1<::UnityEngine::Timeline::TimelineClip*>* UnityEngine::Timeline::TrackAsset::$$c::_get_$$9__121_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$$c::_get_$$9__121_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Comparison_1<::UnityEngine::Timeline::TimelineClip*>*>("UnityEngine.Timeline", "TrackAsset/<>c", "<>9__121_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<UnityEngine.Timeline.TimelineClip> <>9__121_0
void UnityEngine::Timeline::TrackAsset::$$c::_set_$$9__121_0(::System::Comparison_1<::UnityEngine::Timeline::TimelineClip*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$$c::_set_$$9__121_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/<>c", "<>9__121_0", value)));
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<>c..cctor
void UnityEngine::Timeline::TrackAsset::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<>c.<SortClips>b__121_0
int UnityEngine::Timeline::TrackAsset::$$c::$SortClips$b__121_0(::UnityEngine::Timeline::TimelineClip* clip1, ::UnityEngine::Timeline::TimelineClip* clip2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$$c::<SortClips>b__121_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortClips>b__121_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip1), ::il2cpp_utils::ExtractType(clip2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, clip1, clip2);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65
#include "UnityEngine/Timeline/TrackAsset_-get_outputs-d__65.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableBinding <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableBinding& UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableBinding*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Timeline.TrackAsset <>4__this
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TrackAsset*& UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TrackAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.IDisposable.Dispose
void UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.MoveNext
bool UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
::UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset::$get_outputs$d__65*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineHelpURLAttribute
#include "UnityEngine/Timeline/TimelineHelpURLAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackColorAttribute
#include "UnityEngine/Timeline/TrackColorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color m_Color
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& UnityEngine::Timeline::TrackColorAttribute::dyn_m_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackColorAttribute::dyn_m_Color");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Color"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.TrackColorAttribute.get_color
::UnityEngine::Color UnityEngine::Timeline::TrackColorAttribute::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackColorAttribute::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AudioClipProperties
#include "UnityEngine/Timeline/AudioClipProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single volume
[[deprecated("Use field access instead!")]] float& UnityEngine::Timeline::AudioClipProperties::dyn_volume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioClipProperties::dyn_volume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AudioMixerProperties
#include "UnityEngine/Timeline/AudioMixerProperties.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single volume
[[deprecated("Use field access instead!")]] float& UnityEngine::Timeline::AudioMixerProperties::dyn_volume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioMixerProperties::dyn_volume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single stereoPan
[[deprecated("Use field access instead!")]] float& UnityEngine::Timeline::AudioMixerProperties::dyn_stereoPan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioMixerProperties::dyn_stereoPan");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stereoPan"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single spatialBlend
[[deprecated("Use field access instead!")]] float& UnityEngine::Timeline::AudioMixerProperties::dyn_spatialBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioMixerProperties::dyn_spatialBlend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spatialBlend"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AudioMixerProperties.PrepareFrame
void UnityEngine::Timeline::AudioMixerProperties::PrepareFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioMixerProperties::PrepareFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 19));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AudioPlayableAsset
#include "UnityEngine/Timeline/AudioPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16
#include "UnityEngine/Timeline/AudioPlayableAsset_-get_outputs-d__16.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Timeline.AudioClipProperties
#include "UnityEngine/Timeline/AudioClipProperties.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip m_Clip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& UnityEngine::Timeline::AudioPlayableAsset::dyn_m_Clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::dyn_m_Clip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Clip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_Loop
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::AudioPlayableAsset::dyn_m_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::dyn_m_Loop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Loop"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_bufferingTime
[[deprecated("Use field access instead!")]] float& UnityEngine::Timeline::AudioPlayableAsset::dyn_m_bufferingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::dyn_m_bufferingTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_bufferingTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.AudioClipProperties m_ClipProperties
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AudioClipProperties*& UnityEngine::Timeline::AudioPlayableAsset::dyn_m_ClipProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::dyn_m_ClipProperties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ClipProperties"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AudioClipProperties**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_bufferingTime
float UnityEngine::Timeline::AudioPlayableAsset::get_bufferingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::get_bufferingTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bufferingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.set_bufferingTime
void UnityEngine::Timeline::AudioPlayableAsset::set_bufferingTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::set_bufferingTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bufferingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_clip
::UnityEngine::AudioClip* UnityEngine::Timeline::AudioPlayableAsset::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.set_clip
void UnityEngine::Timeline::AudioPlayableAsset::set_clip(::UnityEngine::AudioClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::set_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_loop
bool UnityEngine::Timeline::AudioPlayableAsset::get_loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::get_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.set_loop
void UnityEngine::Timeline::AudioPlayableAsset::set_loop(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::set_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_clipCaps
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::AudioPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioPlayableAsset*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_duration
double UnityEngine::Timeline::AudioPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 7));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_outputs
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AudioPlayableAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.CreatePlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::AudioPlayableAsset::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16
#include "UnityEngine/Timeline/AudioPlayableAsset_-get_outputs-d__16.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableBinding <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableBinding& UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableBinding*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Timeline.AudioPlayableAsset <>4__this
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AudioPlayableAsset*& UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AudioPlayableAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.IDisposable.Dispose
void UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.MoveNext
bool UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
::UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AudioTrack
#include "UnityEngine/Timeline/AudioTrack.hpp"
// Including type: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4
#include "UnityEngine/Timeline/AudioTrack_-get_outputs-d__4.hpp"
// Including type: UnityEngine.Timeline.AudioMixerProperties
#include "UnityEngine/Timeline/AudioMixerProperties.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: UnityEngine.Timeline.IntervalTree`1
#include "UnityEngine/Timeline/IntervalTree_1.hpp"
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.AudioMixerProperties m_TrackProperties
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AudioMixerProperties*& UnityEngine::Timeline::AudioTrack::dyn_m_TrackProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::dyn_m_TrackProperties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_TrackProperties"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AudioMixerProperties**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack.CreateClip
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::AudioTrack::CreateClip(::UnityEngine::AudioClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::CreateClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack.OnValidate
void UnityEngine::Timeline::AudioTrack::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack.CompileClips
::UnityEngine::Playables::Playable UnityEngine::Timeline::AudioTrack::CompileClips(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, ::System::Collections::Generic::IList_1<::UnityEngine::Timeline::TimelineClip*>* timelineClips, ::UnityEngine::Timeline::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::CompileClips");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, timelineClips, tree);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack.get_outputs
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AudioTrack::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::get_outputs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4
#include "UnityEngine/Timeline/AudioTrack_-get_outputs-d__4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableBinding <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableBinding& UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableBinding*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Timeline.AudioTrack <>4__this
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::AudioTrack*& UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::AudioTrack**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.IDisposable.Dispose
void UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.MoveNext
bool UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
::UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::AudioTrack::$get_outputs$d__4*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps None
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps None
void UnityEngine::Timeline::ClipCaps::_set_None(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps Looping
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_Looping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_get_Looping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "Looping"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps Looping
void UnityEngine::Timeline::ClipCaps::_set_Looping(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_set_Looping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "Looping", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps Extrapolation
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_Extrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_get_Extrapolation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "Extrapolation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps Extrapolation
void UnityEngine::Timeline::ClipCaps::_set_Extrapolation(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_set_Extrapolation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "Extrapolation", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps ClipIn
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_ClipIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_get_ClipIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "ClipIn"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps ClipIn
void UnityEngine::Timeline::ClipCaps::_set_ClipIn(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_set_ClipIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "ClipIn", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps SpeedMultiplier
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_SpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_get_SpeedMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "SpeedMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps SpeedMultiplier
void UnityEngine::Timeline::ClipCaps::_set_SpeedMultiplier(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_set_SpeedMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "SpeedMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps Blending
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_Blending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_get_Blending");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "Blending"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps Blending
void UnityEngine::Timeline::ClipCaps::_set_Blending(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_set_Blending");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "Blending", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps AutoScale
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_AutoScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_get_AutoScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "AutoScale"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps AutoScale
void UnityEngine::Timeline::ClipCaps::_set_AutoScale(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_set_AutoScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "AutoScale", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps All
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "All"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps All
void UnityEngine::Timeline::ClipCaps::_set_All(::UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::ClipCaps::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ClipCaps::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClipCapsExtensions
#include "UnityEngine/Timeline/TimelineClipCapsExtensions.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsLooping
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsLooping(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsLooping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsLooping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsExtrapolation
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsExtrapolation(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsClipIn
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsClipIn(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsClipIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsClipIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsSpeedMultiplier
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsSpeedMultiplier(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsSpeedMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsSpeedMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsBlending
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsBlending(::UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsBlending");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsBlending", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.HasAll
bool UnityEngine::Timeline::TimelineClipCapsExtensions::HasAll(::UnityEngine::Timeline::ClipCaps caps, ::UnityEngine::Timeline::ClipCaps flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClipCapsExtensions::HasAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "HasAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(caps), ::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, caps, flags);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.HasAny
bool UnityEngine::Timeline::TimelineClipCapsExtensions::HasAny(::UnityEngine::Timeline::ClipCaps caps, ::UnityEngine::Timeline::ClipCaps flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClipCapsExtensions::HasAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "HasAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(caps), ::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, caps, flags);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ControlPlayableAsset
#include "UnityEngine/Timeline/ControlPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39
#include "UnityEngine/Timeline/ControlPlayableAsset_-GetControlableScripts-d__39.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_MaxRandInt
int UnityEngine::Timeline::ControlPlayableAsset::_get_k_MaxRandInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_get_k_MaxRandInt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "ControlPlayableAsset", "k_MaxRandInt"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_MaxRandInt
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_MaxRandInt(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_set_k_MaxRandInt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_MaxRandInt", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Playables.PlayableDirector> k_EmptyDirectorsList
::System::Collections::Generic::List_1<::UnityEngine::Playables::PlayableDirector*>* UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyDirectorsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyDirectorsList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::UnityEngine::Playables::PlayableDirector*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyDirectorsList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Playables.PlayableDirector> k_EmptyDirectorsList
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyDirectorsList(::System::Collections::Generic::List_1<::UnityEngine::Playables::PlayableDirector*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyDirectorsList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyDirectorsList", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.ParticleSystem> k_EmptyParticlesList
::System::Collections::Generic::List_1<::UnityEngine::ParticleSystem*>* UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyParticlesList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyParticlesList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::UnityEngine::ParticleSystem*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyParticlesList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.ParticleSystem> k_EmptyParticlesList
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyParticlesList(::System::Collections::Generic::List_1<::UnityEngine::ParticleSystem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyParticlesList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyParticlesList", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.HashSet`1<UnityEngine.ParticleSystem> s_SubEmitterCollector
::System::Collections::Generic::HashSet_1<::UnityEngine::ParticleSystem*>* UnityEngine::Timeline::ControlPlayableAsset::_get_s_SubEmitterCollector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_get_s_SubEmitterCollector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::UnityEngine::ParticleSystem*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "s_SubEmitterCollector"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.HashSet`1<UnityEngine.ParticleSystem> s_SubEmitterCollector
void UnityEngine::Timeline::ControlPlayableAsset::_set_s_SubEmitterCollector(::System::Collections::Generic::HashSet_1<::UnityEngine::ParticleSystem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_set_s_SubEmitterCollector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "s_SubEmitterCollector", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Playables.PlayableDirector> s_ProcessedDirectors
::System::Collections::Generic::HashSet_1<::UnityEngine::Playables::PlayableDirector*>* UnityEngine::Timeline::ControlPlayableAsset::_get_s_ProcessedDirectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_get_s_ProcessedDirectors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::UnityEngine::Playables::PlayableDirector*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "s_ProcessedDirectors"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Playables.PlayableDirector> s_ProcessedDirectors
void UnityEngine::Timeline::ControlPlayableAsset::_set_s_ProcessedDirectors(::System::Collections::Generic::HashSet_1<::UnityEngine::Playables::PlayableDirector*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_set_s_ProcessedDirectors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "s_ProcessedDirectors", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> s_CreatedPrefabs
::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>* UnityEngine::Timeline::ControlPlayableAsset::_get_s_CreatedPrefabs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_get_s_CreatedPrefabs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "s_CreatedPrefabs"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> s_CreatedPrefabs
void UnityEngine::Timeline::ControlPlayableAsset::_set_s_CreatedPrefabs(::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::_set_s_CreatedPrefabs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "s_CreatedPrefabs", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ExposedReference`1<UnityEngine.GameObject> sourceGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::ExposedReference_1<::UnityEngine::GameObject*>& UnityEngine::Timeline::ControlPlayableAsset::dyn_sourceGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_sourceGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::ExposedReference_1<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject prefabGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& UnityEngine::Timeline::ControlPlayableAsset::dyn_prefabGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_prefabGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prefabGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean updateParticle
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ControlPlayableAsset::dyn_updateParticle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_updateParticle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateParticle"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 particleRandomSeed
[[deprecated("Use field access instead!")]] uint& UnityEngine::Timeline::ControlPlayableAsset::dyn_particleRandomSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_particleRandomSeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleRandomSeed"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean updateDirector
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ControlPlayableAsset::dyn_updateDirector() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_updateDirector");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateDirector"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean updateITimeControl
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ControlPlayableAsset::dyn_updateITimeControl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_updateITimeControl");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateITimeControl"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean searchHierarchy
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ControlPlayableAsset::dyn_searchHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_searchHierarchy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "searchHierarchy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean active
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ControlPlayableAsset::dyn_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_active");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "active"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState postPlayback
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState& UnityEngine::Timeline::ControlPlayableAsset::dyn_postPlayback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_postPlayback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "postPlayback"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.PlayableAsset m_ControlDirectorAsset
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableAsset*& UnityEngine::Timeline::ControlPlayableAsset::dyn_m_ControlDirectorAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_m_ControlDirectorAsset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ControlDirectorAsset"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::PlayableAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_Duration
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::ControlPlayableAsset::dyn_m_Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_m_Duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Duration"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_SupportLoop
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ControlPlayableAsset::dyn_m_SupportLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_m_SupportLoop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SupportLoop"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <controllingDirectors>k__BackingField
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ControlPlayableAsset::dyn_$controllingDirectors$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_$controllingDirectors$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<controllingDirectors>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <controllingParticles>k__BackingField
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ControlPlayableAsset::dyn_$controllingParticles$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::dyn_$controllingParticles$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<controllingParticles>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_controllingDirectors
bool UnityEngine::Timeline::ControlPlayableAsset::get_controllingDirectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::get_controllingDirectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_controllingDirectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.set_controllingDirectors
void UnityEngine::Timeline::ControlPlayableAsset::set_controllingDirectors(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::set_controllingDirectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_controllingDirectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_controllingParticles
bool UnityEngine::Timeline::ControlPlayableAsset::get_controllingParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::get_controllingParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_controllingParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.set_controllingParticles
void UnityEngine::Timeline::ControlPlayableAsset::set_controllingParticles(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::set_controllingParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_controllingParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.OnEnable
void UnityEngine::Timeline::ControlPlayableAsset::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_clipCaps
::UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ControlPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.ConnectPlayablesToMixer
::UnityEngine::Playables::Playable UnityEngine::Timeline::ControlPlayableAsset::ConnectPlayablesToMixer(::UnityEngine::Playables::PlayableGraph graph, ::System::Collections::Generic::List_1<::UnityEngine::Playables::Playable>* playables) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::ConnectPlayablesToMixer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "ConnectPlayablesToMixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(playables)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, graph, playables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.CreateActivationPlayable
void UnityEngine::Timeline::ControlPlayableAsset::CreateActivationPlayable(::UnityEngine::GameObject* root, ::UnityEngine::Playables::PlayableGraph graph, ::System::Collections::Generic::List_1<::UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::CreateActivationPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateActivationPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(outplayables)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, root, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHierarchyAndConnectParticleSystem
void UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectParticleSystem(::System::Collections::Generic::IEnumerable_1<::UnityEngine::ParticleSystem*>* particleSystems, ::UnityEngine::Playables::PlayableGraph graph, ::System::Collections::Generic::List_1<::UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectParticleSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SearchHierarchyAndConnectParticleSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particleSystems), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(outplayables)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, particleSystems, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHierarchyAndConnectDirector
void UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectDirector(::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableDirector*>* directors, ::UnityEngine::Playables::PlayableGraph graph, ::System::Collections::Generic::List_1<::UnityEngine::Playables::Playable>* outplayables, bool disableSelfReferences) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectDirector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SearchHierarchyAndConnectDirector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(directors), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(outplayables), ::il2cpp_utils::ExtractType(disableSelfReferences)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, directors, graph, outplayables, disableSelfReferences);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHierarchyAndConnectControlableScripts
void UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectControlableScripts(::System::Collections::Generic::IEnumerable_1<::UnityEngine::MonoBehaviour*>* controlableScripts, ::UnityEngine::Playables::PlayableGraph graph, ::System::Collections::Generic::List_1<::UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectControlableScripts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "SearchHierarchyAndConnectControlableScripts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controlableScripts), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(outplayables)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controlableScripts, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.ConnectMixerAndPlayable
void UnityEngine::Timeline::ControlPlayableAsset::ConnectMixerAndPlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Playables::Playable mixer, ::UnityEngine::Playables::Playable playable, int portIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::ConnectMixerAndPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "ConnectMixerAndPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(mixer), ::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(portIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, graph, mixer, playable, portIndex);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetControlableScripts
::System::Collections::Generic::IEnumerable_1<::UnityEngine::MonoBehaviour*>* UnityEngine::Timeline::ControlPlayableAsset::GetControlableScripts(::UnityEngine::GameObject* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::GetControlableScripts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "GetControlableScripts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::MonoBehaviour*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, root);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.UpdateDurationAndLoopFlag
void UnityEngine::Timeline::ControlPlayableAsset::UpdateDurationAndLoopFlag(::System::Collections::Generic::IList_1<::UnityEngine::Playables::PlayableDirector*>* directors, ::System::Collections::Generic::IList_1<::UnityEngine::ParticleSystem*>* particleSystems) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::UpdateDurationAndLoopFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDurationAndLoopFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(directors), ::il2cpp_utils::ExtractType(particleSystems)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, directors, particleSystems);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetControllableParticleSystems
::System::Collections::Generic::IList_1<::UnityEngine::ParticleSystem*>* UnityEngine::Timeline::ControlPlayableAsset::GetControllableParticleSystems(::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::GetControllableParticleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllableParticleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IList_1<::UnityEngine::ParticleSystem*>*, false>(this, ___internal__method, go);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetControllableParticleSystems
void UnityEngine::Timeline::ControlPlayableAsset::GetControllableParticleSystems(::UnityEngine::Transform* t, ::System::Collections::Generic::ICollection_1<::UnityEngine::ParticleSystem*>* roots, ::System::Collections::Generic::HashSet_1<::UnityEngine::ParticleSystem*>* subEmitters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::GetControllableParticleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "GetControllableParticleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(roots), ::il2cpp_utils::ExtractType(subEmitters)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, roots, subEmitters);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.CacheSubEmitters
void UnityEngine::Timeline::ControlPlayableAsset::CacheSubEmitters(::UnityEngine::ParticleSystem* ps, ::System::Collections::Generic::HashSet_1<::UnityEngine::ParticleSystem*>* subEmitters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::CacheSubEmitters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "CacheSubEmitters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ps), ::il2cpp_utils::ExtractType(subEmitters)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ps, subEmitters);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GatherProperties
void UnityEngine::Timeline::ControlPlayableAsset::GatherProperties(::UnityEngine::Playables::PlayableDirector* director, ::UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::GatherProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewParticles
void UnityEngine::Timeline::ControlPlayableAsset::PreviewParticles(::UnityEngine::Timeline::IPropertyCollector* driver, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::ParticleSystem*>* particles) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::PreviewParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver), ::il2cpp_utils::ExtractType(particles)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, driver, particles);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewActivation
void UnityEngine::Timeline::ControlPlayableAsset::PreviewActivation(::UnityEngine::Timeline::IPropertyCollector* driver, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::GameObject*>* objects) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::PreviewActivation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewActivation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver), ::il2cpp_utils::ExtractType(objects)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, driver, objects);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewTimeControl
void UnityEngine::Timeline::ControlPlayableAsset::PreviewTimeControl(::UnityEngine::Timeline::IPropertyCollector* driver, ::UnityEngine::Playables::PlayableDirector* director, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::MonoBehaviour*>* scripts) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::PreviewTimeControl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewTimeControl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver), ::il2cpp_utils::ExtractType(director), ::il2cpp_utils::ExtractType(scripts)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, driver, director, scripts);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewDirectors
void UnityEngine::Timeline::ControlPlayableAsset::PreviewDirectors(::UnityEngine::Timeline::IPropertyCollector* driver, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableDirector*>* directors) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::PreviewDirectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewDirectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver), ::il2cpp_utils::ExtractType(directors)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, driver, directors);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset..cctor
void UnityEngine::Timeline::ControlPlayableAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_duration
double UnityEngine::Timeline::ControlPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 7));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.CreatePlayable
::UnityEngine::Playables::Playable UnityEngine::Timeline::ControlPlayableAsset::CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableAsset*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39
#include "UnityEngine/Timeline/ControlPlayableAsset_-GetControlableScripts-d__39.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MonoBehaviour <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::MonoBehaviour*& UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::MonoBehaviour**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject root
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_root");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject <>3__root
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$3__root() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$3__root");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__root"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MonoBehaviour[] <>7__wrap1
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MonoBehaviour*>& UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MonoBehaviour*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>7__wrap2
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$7__wrap2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::dyn_$$7__wrap2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.IDisposable.Dispose
void UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.MoveNext
bool UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39*), 8));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.Generic.IEnumerator<UnityEngine.MonoBehaviour>.get_Current
::UnityEngine::MonoBehaviour* UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_Generic_IEnumerator$UnityEngine_MonoBehaviour$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.Generic.IEnumerator<UnityEngine.MonoBehaviour>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::MonoBehaviour*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.Generic.IEnumerable<UnityEngine.MonoBehaviour>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::MonoBehaviour*>* UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_Generic_IEnumerable$UnityEngine_MonoBehaviour$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.Generic.IEnumerable<UnityEngine.MonoBehaviour>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::MonoBehaviour*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ControlTrack
#include "UnityEngine/Timeline/ControlTrack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.DiscreteTime
#include "UnityEngine/Timeline/DiscreteTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Double k_Tick
double UnityEngine::Timeline::DiscreteTime::_get_k_Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::_get_k_Tick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "DiscreteTime", "k_Tick"));
}
// Autogenerated static field setter
// Set static field: static private System.Double k_Tick
void UnityEngine::Timeline::DiscreteTime::_set_k_Tick(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::_set_k_Tick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "DiscreteTime", "k_Tick", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Timeline.DiscreteTime kMaxTime
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::_get_kMaxTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::_get_kMaxTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::DiscreteTime>("UnityEngine.Timeline", "DiscreteTime", "kMaxTime"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Timeline.DiscreteTime kMaxTime
void UnityEngine::Timeline::DiscreteTime::_set_kMaxTime(::UnityEngine::Timeline::DiscreteTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::_set_kMaxTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "DiscreteTime", "kMaxTime", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int64 m_DiscreteTime
[[deprecated("Use field access instead!")]] int64_t& UnityEngine::Timeline::DiscreteTime::dyn_m_DiscreteTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::dyn_m_DiscreteTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DiscreteTime"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.get_tickValue
double UnityEngine::Timeline::DiscreteTime::get_tickValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::get_tickValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "get_tickValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime..ctor
// ABORTED elsewhere.  UnityEngine::Timeline::DiscreteTime::DiscreteTime(::UnityEngine::Timeline::DiscreteTime time)
// Autogenerated method: UnityEngine.Timeline.DiscreteTime..ctor
// ABORTED elsewhere.  UnityEngine::Timeline::DiscreteTime::DiscreteTime(int64_t time)
// Autogenerated method: UnityEngine.Timeline.DiscreteTime..ctor
UnityEngine::Timeline::DiscreteTime::DiscreteTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime..ctor
UnityEngine::Timeline::DiscreteTime::DiscreteTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime..ctor
UnityEngine::Timeline::DiscreteTime::DiscreteTime(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime..ctor
UnityEngine::Timeline::DiscreteTime::DiscreteTime(int frame, double fps) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frame), ::il2cpp_utils::ExtractType(fps)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frame, fps);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.OneTickBefore
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::OneTickBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::OneTickBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "OneTickBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.OneTickAfter
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::OneTickAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::OneTickAfter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "OneTickAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.GetTick
int64_t UnityEngine::Timeline::DiscreteTime::GetTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::GetTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.FromTicks
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::FromTicks(int64_t ticks) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::FromTicks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "FromTicks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ticks)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ticks);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.CompareTo
int UnityEngine::Timeline::DiscreteTime::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::CompareTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::Timeline::DiscreteTime), 4));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.Equals
bool UnityEngine::Timeline::DiscreteTime::Equals(::UnityEngine::Timeline::DiscreteTime other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.DoubleToDiscreteTime
int64_t UnityEngine::Timeline::DiscreteTime::DoubleToDiscreteTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::DoubleToDiscreteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "DoubleToDiscreteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.FloatToDiscreteTime
int64_t UnityEngine::Timeline::DiscreteTime::FloatToDiscreteTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::FloatToDiscreteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "FloatToDiscreteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.IntToDiscreteTime
int64_t UnityEngine::Timeline::DiscreteTime::IntToDiscreteTime(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::IntToDiscreteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "IntToDiscreteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.ToDouble
double UnityEngine::Timeline::DiscreteTime::ToDouble(int64_t time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::ToDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "ToDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.ToFloat
float UnityEngine::Timeline::DiscreteTime::ToFloat(int64_t time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::ToFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "ToFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::operator double() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::operator float() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
// ABORTED elsewhere.  UnityEngine::Timeline::DiscreteTime::operator int64_t()
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::DiscreteTime(double& time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::DiscreteTime(float& time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::DiscreteTime(int64_t& time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  *this = ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.Min
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::Min(::UnityEngine::Timeline::DiscreteTime lhs, ::UnityEngine::Timeline::DiscreteTime rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.Max
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::Max(::UnityEngine::Timeline::DiscreteTime lhs, ::UnityEngine::Timeline::DiscreteTime rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.SnapToNearestTick
double UnityEngine::Timeline::DiscreteTime::SnapToNearestTick(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::SnapToNearestTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "SnapToNearestTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.SnapToNearestTick
float UnityEngine::Timeline::DiscreteTime::SnapToNearestTick(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::SnapToNearestTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "SnapToNearestTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.GetNearestTick
int64_t UnityEngine::Timeline::DiscreteTime::GetNearestTick(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::GetNearestTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "GetNearestTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime..cctor
void UnityEngine::Timeline::DiscreteTime::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.Equals
bool UnityEngine::Timeline::DiscreteTime::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.ToString
::StringW UnityEngine::Timeline::DiscreteTime::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.GetHashCode
int UnityEngine::Timeline::DiscreteTime::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Equality
bool UnityEngine::Timeline::operator ==(const ::UnityEngine::Timeline::DiscreteTime& lhs, const ::UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Inequality
bool UnityEngine::Timeline::operator !=(const ::UnityEngine::Timeline::DiscreteTime& lhs, const ::UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_GreaterThan
bool UnityEngine::Timeline::operator >(const ::UnityEngine::Timeline::DiscreteTime& lhs, const ::UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_GreaterThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_GreaterThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_LessThan
bool UnityEngine::Timeline::operator <(const ::UnityEngine::Timeline::DiscreteTime& lhs, const ::UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_LessThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_LessThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_LessThanOrEqual
bool UnityEngine::Timeline::operator <=(const ::UnityEngine::Timeline::DiscreteTime& lhs, const ::UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_LessThanOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_LessThanOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_GreaterThanOrEqual
bool UnityEngine::Timeline::operator >=(const ::UnityEngine::Timeline::DiscreteTime& lhs, const ::UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_GreaterThanOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_GreaterThanOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Addition
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::operator+(const ::UnityEngine::Timeline::DiscreteTime& lhs, const ::UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Subtraction
::UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::operator-(const ::UnityEngine::Timeline::DiscreteTime& lhs, const ::UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::DiscreteTime::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.InfiniteRuntimeClip
#include "UnityEngine/Timeline/InfiniteRuntimeClip.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int64 kIntervalEnd
int64_t UnityEngine::Timeline::InfiniteRuntimeClip::_get_kIntervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::_get_kIntervalEnd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("UnityEngine.Timeline", "InfiniteRuntimeClip", "kIntervalEnd"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int64 kIntervalEnd
void UnityEngine::Timeline::InfiniteRuntimeClip::_set_kIntervalEnd(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::_set_kIntervalEnd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "InfiniteRuntimeClip", "kIntervalEnd", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.Playable m_Playable
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::Playable& UnityEngine::Timeline::InfiniteRuntimeClip::dyn_m_Playable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::dyn_m_Playable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Playable"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::Playable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip..cctor
void UnityEngine::Timeline::InfiniteRuntimeClip::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "InfiniteRuntimeClip", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.get_intervalStart
int64_t UnityEngine::Timeline::InfiniteRuntimeClip::get_intervalStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::get_intervalStart");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.get_intervalEnd
int64_t UnityEngine::Timeline::InfiniteRuntimeClip::get_intervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::get_intervalEnd");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 7));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.set_enable
void UnityEngine::Timeline::InfiniteRuntimeClip::set_enable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::set_enable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.EvaluateAt
void UnityEngine::Timeline::InfiniteRuntimeClip::EvaluateAt(double localTime, ::UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::EvaluateAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localTime, frameData);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.DisableAt
void UnityEngine::Timeline::InfiniteRuntimeClip::DisableAt(double localTime, double rootDuration, ::UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::InfiniteRuntimeClip::DisableAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localTime, rootDuration, frameData);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.IInterval
#include "UnityEngine/Timeline/IInterval.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.IInterval.get_intervalStart
int64_t UnityEngine::Timeline::IInterval::get_intervalStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::IInterval::get_intervalStart");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::IInterval*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.IInterval.get_intervalEnd
int64_t UnityEngine::Timeline::IInterval::get_intervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::IInterval::get_intervalEnd");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::IInterval*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.RuntimeClip
#include "UnityEngine/Timeline/RuntimeClip.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip m_Clip
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip*& UnityEngine::Timeline::RuntimeClip::dyn_m_Clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::dyn_m_Clip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Clip"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.Playable m_Playable
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::Playable& UnityEngine::Timeline::RuntimeClip::dyn_m_Playable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::dyn_m_Playable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Playable"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::Playable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.Playable m_ParentMixer
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::Playable& UnityEngine::Timeline::RuntimeClip::dyn_m_ParentMixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::dyn_m_ParentMixer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ParentMixer"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::Playable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.Create
void UnityEngine::Timeline::RuntimeClip::Create(::UnityEngine::Timeline::TimelineClip* clip, ::UnityEngine::Playables::Playable clipPlayable, ::UnityEngine::Playables::Playable parentMixer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(clipPlayable), ::il2cpp_utils::ExtractType(parentMixer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip, clipPlayable, parentMixer);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_clip
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::RuntimeClip::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_mixer
::UnityEngine::Playables::Playable UnityEngine::Timeline::RuntimeClip::get_mixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::get_mixer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_playable
::UnityEngine::Playables::Playable UnityEngine::Timeline::RuntimeClip::get_playable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::get_playable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.SetTime
void UnityEngine::Timeline::RuntimeClip::SetTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::SetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.SetDuration
void UnityEngine::Timeline::RuntimeClip::SetDuration(double duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::SetDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_start
double UnityEngine::Timeline::RuntimeClip::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::get_start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeClipBase*), 11));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_duration
double UnityEngine::Timeline::RuntimeClip::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeClipBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.set_enable
void UnityEngine::Timeline::RuntimeClip::set_enable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::set_enable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.EvaluateAt
void UnityEngine::Timeline::RuntimeClip::EvaluateAt(double localTime, ::UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::EvaluateAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localTime, frameData);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.DisableAt
void UnityEngine::Timeline::RuntimeClip::DisableAt(double localTime, double rootDuration, ::UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClip::DisableAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localTime, rootDuration, frameData);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.RuntimeClipBase
#include "UnityEngine/Timeline/RuntimeClipBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.RuntimeClipBase.get_start
double UnityEngine::Timeline::RuntimeClipBase::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClipBase::get_start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeClipBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClipBase.get_duration
double UnityEngine::Timeline::RuntimeClipBase::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClipBase::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeClipBase*), -1));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClipBase.get_intervalStart
int64_t UnityEngine::Timeline::RuntimeClipBase::get_intervalStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClipBase::get_intervalStart");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 6));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClipBase.get_intervalEnd
int64_t UnityEngine::Timeline::RuntimeClipBase::get_intervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeClipBase::get_intervalEnd");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 7));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <intervalBit>k__BackingField
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::RuntimeElement::dyn_$intervalBit$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeElement::dyn_$intervalBit$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<intervalBit>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.get_intervalStart
int64_t UnityEngine::Timeline::RuntimeElement::get_intervalStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeElement::get_intervalStart");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.get_intervalEnd
int64_t UnityEngine::Timeline::RuntimeElement::get_intervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeElement::get_intervalEnd");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.get_intervalBit
int UnityEngine::Timeline::RuntimeElement::get_intervalBit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeElement::get_intervalBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.set_intervalBit
void UnityEngine::Timeline::RuntimeElement::set_intervalBit(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeElement::set_intervalBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_intervalBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.set_enable
void UnityEngine::Timeline::RuntimeElement::set_enable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeElement::set_enable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.EvaluateAt
void UnityEngine::Timeline::RuntimeElement::EvaluateAt(double localTime, ::UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeElement::EvaluateAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localTime, frameData);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.DisableAt
void UnityEngine::Timeline::RuntimeElement::DisableAt(double localTime, double rootDuration, ::UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::RuntimeElement::DisableAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localTime, rootDuration, frameData);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ScheduleRuntimeClip
#include "UnityEngine/Timeline/ScheduleRuntimeClip.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TimelineClip m_Clip
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip*& UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_Clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_Clip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Clip"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TimelineClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.Playable m_Playable
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::Playable& UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_Playable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_Playable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Playable"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::Playable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Playables.Playable m_ParentMixer
[[deprecated("Use field access instead!")]] ::UnityEngine::Playables::Playable& UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_ParentMixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_ParentMixer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ParentMixer"))->offset;
  return *reinterpret_cast<::UnityEngine::Playables::Playable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_StartDelay
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_StartDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_StartDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StartDelay"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_FinishTail
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_FinishTail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_FinishTail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FinishTail"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_Started
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_Started() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::dyn_m_Started");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Started"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.SetTime
void UnityEngine::Timeline::ScheduleRuntimeClip::SetTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::SetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_clip
::UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::ScheduleRuntimeClip::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_mixer
::UnityEngine::Playables::Playable UnityEngine::Timeline::ScheduleRuntimeClip::get_mixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::get_mixer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_playable
::UnityEngine::Playables::Playable UnityEngine::Timeline::ScheduleRuntimeClip::get_playable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::get_playable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.Create
void UnityEngine::Timeline::ScheduleRuntimeClip::Create(::UnityEngine::Timeline::TimelineClip* clip, ::UnityEngine::Playables::Playable clipPlayable, ::UnityEngine::Playables::Playable parentMixer, double startDelay, double finishTail) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(clipPlayable), ::il2cpp_utils::ExtractType(parentMixer), ::il2cpp_utils::ExtractType(startDelay), ::il2cpp_utils::ExtractType(finishTail)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip, clipPlayable, parentMixer, startDelay, finishTail);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_start
double UnityEngine::Timeline::ScheduleRuntimeClip::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::get_start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeClipBase*), 11));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_duration
double UnityEngine::Timeline::ScheduleRuntimeClip::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::get_duration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeClipBase*), 12));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.set_enable
void UnityEngine::Timeline::ScheduleRuntimeClip::set_enable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::set_enable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.EvaluateAt
void UnityEngine::Timeline::ScheduleRuntimeClip::EvaluateAt(double localTime, ::UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::EvaluateAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localTime, frameData);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.DisableAt
void UnityEngine::Timeline::ScheduleRuntimeClip::DisableAt(double localTime, double rootDuration, ::UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ScheduleRuntimeClip::DisableAt");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::RuntimeElement*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localTime, rootDuration, frameData);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.IMarker
#include "UnityEngine/Timeline/IMarker.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.IMarker.get_time
double UnityEngine::Timeline::IMarker::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::IMarker::get_time");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::IMarker*), -1));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.IMarker.set_time
void UnityEngine::Timeline::IMarker::set_time(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::IMarker::set_time");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::IMarker*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.IMarker.get_parent
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::IMarker::get_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::IMarker::get_parent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::IMarker*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.IMarker.Initialize
void UnityEngine::Timeline::IMarker::Initialize(::UnityEngine::Timeline::TrackAsset* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::IMarker::Initialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::IMarker*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parent);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.INotificationOptionProvider
#include "UnityEngine/Timeline/INotificationOptionProvider.hpp"
// Including type: UnityEngine.Timeline.NotificationFlags
#include "UnityEngine/Timeline/NotificationFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.INotificationOptionProvider.get_flags
::UnityEngine::Timeline::NotificationFlags UnityEngine::Timeline::INotificationOptionProvider::get_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::INotificationOptionProvider::get_flags");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::INotificationOptionProvider*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::NotificationFlags, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.Marker
#include "UnityEngine/Timeline/Marker.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Double m_Time
[[deprecated("Use field access instead!")]] double& UnityEngine::Timeline::Marker::dyn_m_Time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::Marker::dyn_m_Time");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Time"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.TrackAsset <parent>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TrackAsset*& UnityEngine::Timeline::Marker::dyn_$parent$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::Marker::dyn_$parent$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<parent>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::TrackAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.Marker.get_parent
::UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::Marker::get_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::Marker::get_parent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::Marker*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.Marker.set_parent
void UnityEngine::Timeline::Marker::set_parent(::UnityEngine::Timeline::TrackAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::Marker::set_parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.Marker.get_time
double UnityEngine::Timeline::Marker::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::Marker::get_time");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::Marker*), 4));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.Marker.set_time
void UnityEngine::Timeline::Marker::set_time(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::Marker::set_time");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::Marker*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.Marker.UnityEngine.Timeline.IMarker.Initialize
void UnityEngine::Timeline::Marker::UnityEngine_Timeline_IMarker_Initialize(::UnityEngine::Timeline::TrackAsset* parentTrack) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::Marker::UnityEngine.Timeline.IMarker.Initialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::Marker*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parentTrack);
}
// Autogenerated method: UnityEngine.Timeline.Marker.OnInitialize
void UnityEngine::Timeline::Marker::OnInitialize(::UnityEngine::Timeline::TrackAsset* aPent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::Marker::OnInitialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::Marker*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, aPent);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.MarkerList
#include "UnityEngine/Timeline/MarkerList.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Timeline.IMarker
#include "UnityEngine/Timeline/IMarker.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset
#include "UnityEngine/Timeline/TimelineAsset.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.ScriptableObject> m_Objects
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>*& UnityEngine::Timeline::MarkerList::dyn_m_Objects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::dyn_m_Objects");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Objects"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Timeline.IMarker> m_Cache
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::IMarker*>*& UnityEngine::Timeline::MarkerList::dyn_m_Cache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::dyn_m_Cache");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Cache"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Timeline::IMarker*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_CacheDirty
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::MarkerList::dyn_m_CacheDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::dyn_m_CacheDirty");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CacheDirty"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_HasNotifications
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::MarkerList::dyn_m_HasNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::dyn_m_HasNotifications");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HasNotifications"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.get_markers
::System::Collections::Generic::List_1<::UnityEngine::Timeline::IMarker*>* UnityEngine::Timeline::MarkerList::get_markers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::get_markers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_markers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::Timeline::IMarker*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList..ctor
UnityEngine::Timeline::MarkerList::MarkerList(int capacity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, capacity);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Add
void UnityEngine::Timeline::MarkerList::Add(::UnityEngine::ScriptableObject* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Remove
bool UnityEngine::Timeline::MarkerList::Remove(::UnityEngine::Timeline::IMarker* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Remove
bool UnityEngine::Timeline::MarkerList::Remove(::UnityEngine::ScriptableObject* item, ::UnityEngine::Timeline::TimelineAsset* timelineAsset, ::UnityEngine::Playables::PlayableAsset* thingToDirty) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item), ::il2cpp_utils::ExtractType(timelineAsset), ::il2cpp_utils::ExtractType(thingToDirty)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item, timelineAsset, thingToDirty);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Clear
void UnityEngine::Timeline::MarkerList::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Contains
bool UnityEngine::Timeline::MarkerList::Contains(::UnityEngine::ScriptableObject* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.GetMarkers
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::IMarker*>* UnityEngine::Timeline::MarkerList::GetMarkers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::GetMarkers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetMarkers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::IMarker*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.get_Count
int UnityEngine::Timeline::MarkerList::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.get_Item
::UnityEngine::Timeline::IMarker* UnityEngine::Timeline::MarkerList::get_Item(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::IMarker*, false>(this, ___internal__method, idx);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.GetRawMarkerList
::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>* UnityEngine::Timeline::MarkerList::GetRawMarkerList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::GetRawMarkerList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetRawMarkerList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.CreateMarker
::UnityEngine::Timeline::IMarker* UnityEngine::Timeline::MarkerList::CreateMarker(::System::Type* type, double time, ::UnityEngine::Timeline::TrackAsset* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::CreateMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(owner)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::IMarker*, false>(this, ___internal__method, type, time, owner);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.HasNotifications
bool UnityEngine::Timeline::MarkerList::HasNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::HasNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::MarkerList::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::Timeline::MarkerList), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::MarkerList::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::Timeline::MarkerList), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.BuildCache
void UnityEngine::Timeline::MarkerList::BuildCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerList::BuildCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "BuildCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.MarkerTrack
#include "UnityEngine/Timeline/MarkerTrack.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.MarkerTrack.get_outputs
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::MarkerTrack::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::MarkerTrack::get_outputs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.CustomSignalEventDrawer
#include "UnityEngine/Timeline/CustomSignalEventDrawer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.SignalAsset
#include "UnityEngine/Timeline/SignalAsset.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.Timeline.SignalAsset> OnEnableCallback
::System::Action_1<::UnityEngine::Timeline::SignalAsset*>* UnityEngine::Timeline::SignalAsset::_get_OnEnableCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalAsset::_get_OnEnableCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::UnityEngine::Timeline::SignalAsset*>*>("UnityEngine.Timeline", "SignalAsset", "OnEnableCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.Timeline.SignalAsset> OnEnableCallback
void UnityEngine::Timeline::SignalAsset::_set_OnEnableCallback(::System::Action_1<::UnityEngine::Timeline::SignalAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalAsset::_set_OnEnableCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "SignalAsset", "OnEnableCallback", value));
}
// Autogenerated method: UnityEngine.Timeline.SignalAsset.add_OnEnableCallback
void UnityEngine::Timeline::SignalAsset::add_OnEnableCallback(::System::Action_1<::UnityEngine::Timeline::SignalAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalAsset::add_OnEnableCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "SignalAsset", "add_OnEnableCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalAsset.remove_OnEnableCallback
void UnityEngine::Timeline::SignalAsset::remove_OnEnableCallback(::System::Action_1<::UnityEngine::Timeline::SignalAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalAsset::remove_OnEnableCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "SignalAsset", "remove_OnEnableCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalAsset.OnEnable
void UnityEngine::Timeline::SignalAsset::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalAsset::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.SignalEmitter
#include "UnityEngine/Timeline/SignalEmitter.hpp"
// Including type: UnityEngine.Timeline.SignalAsset
#include "UnityEngine/Timeline/SignalAsset.hpp"
// Including type: UnityEngine.PropertyName
#include "UnityEngine/PropertyName.hpp"
// Including type: UnityEngine.Timeline.NotificationFlags
#include "UnityEngine/Timeline/NotificationFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_Retroactive
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::SignalEmitter::dyn_m_Retroactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::dyn_m_Retroactive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Retroactive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_EmitOnce
[[deprecated("Use field access instead!")]] bool& UnityEngine::Timeline::SignalEmitter::dyn_m_EmitOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::dyn_m_EmitOnce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_EmitOnce"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.SignalAsset m_Asset
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::SignalAsset*& UnityEngine::Timeline::SignalEmitter::dyn_m_Asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::dyn_m_Asset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Asset"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::SignalAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.get_retroactive
bool UnityEngine::Timeline::SignalEmitter::get_retroactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::get_retroactive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_retroactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.set_retroactive
void UnityEngine::Timeline::SignalEmitter::set_retroactive(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::set_retroactive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_retroactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.get_emitOnce
bool UnityEngine::Timeline::SignalEmitter::get_emitOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::get_emitOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_emitOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.set_emitOnce
void UnityEngine::Timeline::SignalEmitter::set_emitOnce(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::set_emitOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_emitOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.get_asset
::UnityEngine::Timeline::SignalAsset* UnityEngine::Timeline::SignalEmitter::get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::get_asset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::SignalAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.set_asset
void UnityEngine::Timeline::SignalEmitter::set_asset(::UnityEngine::Timeline::SignalAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::set_asset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.UnityEngine.Playables.INotification.get_id
::UnityEngine::PropertyName UnityEngine::Timeline::SignalEmitter::UnityEngine_Playables_INotification_get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::UnityEngine.Playables.INotification.get_id");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::SignalEmitter*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.UnityEngine.Timeline.INotificationOptionProvider.get_flags
::UnityEngine::Timeline::NotificationFlags UnityEngine::Timeline::SignalEmitter::UnityEngine_Timeline_INotificationOptionProvider_get_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalEmitter::UnityEngine.Timeline.INotificationOptionProvider.get_flags");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::SignalEmitter*), 10));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::NotificationFlags, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.SignalReceiver
#include "UnityEngine/Timeline/SignalReceiver.hpp"
// Including type: UnityEngine.Timeline.SignalReceiver/EventKeyValue
#include "UnityEngine/Timeline/SignalReceiver_EventKeyValue.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
// Including type: UnityEngine.Timeline.SignalAsset
#include "UnityEngine/Timeline/SignalAsset.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.SignalReceiver/EventKeyValue m_Events
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::SignalReceiver::EventKeyValue*& UnityEngine::Timeline::SignalReceiver::dyn_m_Events() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::dyn_m_Events");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Events"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::SignalReceiver::EventKeyValue**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.OnNotify
void UnityEngine::Timeline::SignalReceiver::OnNotify(::UnityEngine::Playables::Playable origin, ::UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::OnNotify");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::SignalReceiver*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, origin, notification, context);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.AddReaction
void UnityEngine::Timeline::SignalReceiver::AddReaction(::UnityEngine::Timeline::SignalAsset* asset, ::UnityEngine::Events::UnityEvent* reaction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::AddReaction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddReaction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset), ::il2cpp_utils::ExtractType(reaction)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, asset, reaction);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.AddEmptyReaction
int UnityEngine::Timeline::SignalReceiver::AddEmptyReaction(::UnityEngine::Events::UnityEvent* reaction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::AddEmptyReaction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEmptyReaction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reaction)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, reaction);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.Remove
void UnityEngine::Timeline::SignalReceiver::Remove(::UnityEngine::Timeline::SignalAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, asset);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.GetRegisteredSignals
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::SignalAsset*>* UnityEngine::Timeline::SignalReceiver::GetRegisteredSignals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::GetRegisteredSignals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRegisteredSignals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::SignalAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.GetReaction
::UnityEngine::Events::UnityEvent* UnityEngine::Timeline::SignalReceiver::GetReaction(::UnityEngine::Timeline::SignalAsset* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::GetReaction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetReaction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Events::UnityEvent*, false>(this, ___internal__method, key);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.Count
int UnityEngine::Timeline::SignalReceiver::Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.ChangeSignalAtIndex
void UnityEngine::Timeline::SignalReceiver::ChangeSignalAtIndex(int idx, ::UnityEngine::Timeline::SignalAsset* newKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::ChangeSignalAtIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeSignalAtIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(newKey)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, newKey);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.RemoveAtIndex
void UnityEngine::Timeline::SignalReceiver::RemoveAtIndex(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::RemoveAtIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAtIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.ChangeReactionAtIndex
void UnityEngine::Timeline::SignalReceiver::ChangeReactionAtIndex(int idx, ::UnityEngine::Events::UnityEvent* reaction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::ChangeReactionAtIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeReactionAtIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(reaction)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, reaction);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.GetReactionAtIndex
::UnityEngine::Events::UnityEvent* UnityEngine::Timeline::SignalReceiver::GetReactionAtIndex(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::GetReactionAtIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetReactionAtIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Events::UnityEvent*, false>(this, ___internal__method, idx);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.GetSignalAssetAtIndex
::UnityEngine::Timeline::SignalAsset* UnityEngine::Timeline::SignalReceiver::GetSignalAssetAtIndex(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::GetSignalAssetAtIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSignalAssetAtIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::SignalAsset*, false>(this, ___internal__method, idx);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver.OnEnable
void UnityEngine::Timeline::SignalReceiver::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.SignalReceiver/EventKeyValue
#include "UnityEngine/Timeline/SignalReceiver_EventKeyValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Timeline.SignalAsset
#include "UnityEngine/Timeline/SignalAsset.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Timeline.SignalAsset> m_Signals
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::SignalAsset*>*& UnityEngine::Timeline::SignalReceiver::EventKeyValue::dyn_m_Signals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::EventKeyValue::dyn_m_Signals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Signals"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Timeline::SignalAsset*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Events.UnityEvent> m_Events
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Events::UnityEvent*>*& UnityEngine::Timeline::SignalReceiver::EventKeyValue::dyn_m_Events() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::EventKeyValue::dyn_m_Events");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Events"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Events::UnityEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver/EventKeyValue.TryGetValue
bool UnityEngine::Timeline::SignalReceiver::EventKeyValue::TryGetValue(::UnityEngine::Timeline::SignalAsset* key, ByRef<::UnityEngine::Events::UnityEvent*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::EventKeyValue::TryGetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Events::UnityEvent*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver/EventKeyValue.Append
void UnityEngine::Timeline::SignalReceiver::EventKeyValue::Append(::UnityEngine::Timeline::SignalAsset* key, ::UnityEngine::Events::UnityEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::EventKeyValue::Append");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver/EventKeyValue.Remove
void UnityEngine::Timeline::SignalReceiver::EventKeyValue::Remove(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::EventKeyValue::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver/EventKeyValue.Remove
void UnityEngine::Timeline::SignalReceiver::EventKeyValue::Remove(::UnityEngine::Timeline::SignalAsset* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::EventKeyValue::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver/EventKeyValue.get_signals
::System::Collections::Generic::List_1<::UnityEngine::Timeline::SignalAsset*>* UnityEngine::Timeline::SignalReceiver::EventKeyValue::get_signals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::EventKeyValue::get_signals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_signals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::Timeline::SignalAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalReceiver/EventKeyValue.get_events
::System::Collections::Generic::List_1<::UnityEngine::Events::UnityEvent*>* UnityEngine::Timeline::SignalReceiver::EventKeyValue::get_events() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::SignalReceiver::EventKeyValue::get_events");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_events", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::Events::UnityEvent*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.SignalTrack
#include "UnityEngine/Timeline/SignalTrack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackAssetExtensions
#include "UnityEngine/Timeline/TrackAssetExtensions.hpp"
// Including type: UnityEngine.Timeline.GroupTrack
#include "UnityEngine/Timeline/GroupTrack.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TrackAssetExtensions.GetGroup
::UnityEngine::Timeline::GroupTrack* UnityEngine::Timeline::TrackAssetExtensions::GetGroup(::UnityEngine::Timeline::TrackAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAssetExtensions::GetGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAssetExtensions", "GetGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::GroupTrack*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, asset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAssetExtensions.SetGroup
void UnityEngine::Timeline::TrackAssetExtensions::SetGroup(::UnityEngine::Timeline::TrackAsset* asset, ::UnityEngine::Timeline::GroupTrack* group) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAssetExtensions::SetGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAssetExtensions", "SetGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset), ::il2cpp_utils::ExtractType(group)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, asset, group);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.GroupTrack
#include "UnityEngine/Timeline/GroupTrack.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.GroupTrack.CanCompileClips
bool UnityEngine::Timeline::GroupTrack::CanCompileClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::GroupTrack::CanCompileClips");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 33));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.GroupTrack.get_outputs
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::GroupTrack::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::GroupTrack::get_outputs");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::TrackAsset*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ILayerable
#include "UnityEngine/Timeline/ILayerable.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ILayerable.CreateLayerMixer
::UnityEngine::Playables::Playable UnityEngine::Timeline::ILayerable::CreateLayerMixer(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ILayerable::CreateLayerMixer");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Timeline::ILayerable*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.ActivationControlPlayable
#include "UnityEngine/Timeline/ActivationControlPlayable.hpp"
// Including type: UnityEngine.Playables.ScriptPlayable`1
#include "UnityEngine/Playables/ScriptPlayable_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject gameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& UnityEngine::Timeline::ActivationControlPlayable::dyn_gameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::dyn_gameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState postPlayback
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState& UnityEngine::Timeline::ActivationControlPlayable::dyn_postPlayback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::dyn_postPlayback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "postPlayback"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Timeline.ActivationControlPlayable/InitialState m_InitialState
[[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::ActivationControlPlayable::InitialState& UnityEngine::Timeline::ActivationControlPlayable::dyn_m_InitialState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::dyn_m_InitialState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_InitialState"))->offset;
  return *reinterpret_cast<::UnityEngine::Timeline::ActivationControlPlayable::InitialState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UnityEngine.Timeline.ActivationControlPlayable.Create
::UnityEngine::Playables::ScriptPlayable_1<::UnityEngine::Timeline::ActivationControlPlayable*> UnityEngine::Timeline::ActivationControlPlayable::Create(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* gameObject, ::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState postPlaybackState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ActivationControlPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(postPlaybackState)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Playables::ScriptPlayable_1<::UnityEngine::Timeline::ActivationControlPlayable*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, graph, gameObject, postPlaybackState);
}
// Autogenerated method: UnityEngine.Timeline.ActivationControlPlayable.OnBehaviourPlay
void UnityEngine::Timeline::ActivationControlPlayable::OnBehaviourPlay(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::OnBehaviourPlay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 17));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Timeline.ActivationControlPlayable.OnBehaviourPause
void UnityEngine::Timeline::ActivationControlPlayable::OnBehaviourPause(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::OnBehaviourPause");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 18));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Timeline.ActivationControlPlayable.ProcessFrame
void UnityEngine::Timeline::ActivationControlPlayable::ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::ProcessFrame");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 20));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable, info, userData);
}
// Autogenerated method: UnityEngine.Timeline.ActivationControlPlayable.OnGraphStart
void UnityEngine::Timeline::ActivationControlPlayable::OnGraphStart(::UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::OnGraphStart");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Timeline.ActivationControlPlayable.OnPlayableDestroy
void UnityEngine::Timeline::ActivationControlPlayable::OnPlayableDestroy(::UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::OnPlayableDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::Playables::PlayableBehaviour*), 16));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState
#include "UnityEngine/Timeline/ActivationControlPlayable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState Active
::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_get_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState>("UnityEngine.Timeline", "ActivationControlPlayable/PostPlaybackState", "Active"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState Active
void UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_set_Active(::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_set_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationControlPlayable/PostPlaybackState", "Active", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState Inactive
::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_get_Inactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_get_Inactive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState>("UnityEngine.Timeline", "ActivationControlPlayable/PostPlaybackState", "Inactive"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState Inactive
void UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_set_Inactive(::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_set_Inactive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationControlPlayable/PostPlaybackState", "Inactive", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState Revert
::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_get_Revert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_get_Revert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState>("UnityEngine.Timeline", "ActivationControlPlayable/PostPlaybackState", "Revert"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationControlPlayable/PostPlaybackState Revert
void UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_set_Revert(::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::_set_Revert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationControlPlayable/PostPlaybackState", "Revert", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::PostPlaybackState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ActivationControlPlayable/InitialState
#include "UnityEngine/Timeline/ActivationControlPlayable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationControlPlayable/InitialState Unset
::UnityEngine::Timeline::ActivationControlPlayable::InitialState UnityEngine::Timeline::ActivationControlPlayable::InitialState::_get_Unset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::InitialState::_get_Unset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationControlPlayable::InitialState>("UnityEngine.Timeline", "ActivationControlPlayable/InitialState", "Unset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationControlPlayable/InitialState Unset
void UnityEngine::Timeline::ActivationControlPlayable::InitialState::_set_Unset(::UnityEngine::Timeline::ActivationControlPlayable::InitialState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::InitialState::_set_Unset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationControlPlayable/InitialState", "Unset", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationControlPlayable/InitialState Active
::UnityEngine::Timeline::ActivationControlPlayable::InitialState UnityEngine::Timeline::ActivationControlPlayable::InitialState::_get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::InitialState::_get_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationControlPlayable::InitialState>("UnityEngine.Timeline", "ActivationControlPlayable/InitialState", "Active"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationControlPlayable/InitialState Active
void UnityEngine::Timeline::ActivationControlPlayable::InitialState::_set_Active(::UnityEngine::Timeline::ActivationControlPlayable::InitialState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::InitialState::_set_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationControlPlayable/InitialState", "Active", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationControlPlayable/InitialState Inactive
::UnityEngine::Timeline::ActivationControlPlayable::InitialState UnityEngine::Timeline::ActivationControlPlayable::InitialState::_get_Inactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::InitialState::_get_Inactive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Timeline::ActivationControlPlayable::InitialState>("UnityEngine.Timeline", "ActivationControlPlayable/InitialState", "Inactive"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationControlPlayable/InitialState Inactive
void UnityEngine::Timeline::ActivationControlPlayable::InitialState::_set_Inactive(::UnityEngine::Timeline::ActivationControlPlayable::InitialState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::InitialState::_set_Inactive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationControlPlayable/InitialState", "Inactive", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& UnityEngine::Timeline::ActivationControlPlayable::InitialState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::ActivationControlPlayable::InitialState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
