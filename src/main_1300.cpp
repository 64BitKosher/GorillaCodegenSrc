// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Bezier
#include "GlobalNamespace/Bezier.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Bezier.GetPoint
::UnityEngine::Vector3 GlobalNamespace::Bezier::GetPoint(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bezier::GetPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Bezier", "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, p1, p2, t);
}
// Autogenerated method: Bezier.GetFirstDerivative
::UnityEngine::Vector3 GlobalNamespace::Bezier::GetFirstDerivative(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bezier::GetFirstDerivative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Bezier", "GetFirstDerivative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, p1, p2, t);
}
// Autogenerated method: Bezier.GetPoint
::UnityEngine::Vector3 GlobalNamespace::Bezier::GetPoint(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bezier::GetPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Bezier", "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, p1, p2, p3, t);
}
// Autogenerated method: Bezier.GetFirstDerivative
::UnityEngine::Vector3 GlobalNamespace::Bezier::GetFirstDerivative(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bezier::GetFirstDerivative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Bezier", "GetFirstDerivative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, p1, p2, p3, t);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BezierControlPointMode
#include "GlobalNamespace/BezierControlPointMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BezierControlPointMode Free
::GlobalNamespace::BezierControlPointMode GlobalNamespace::BezierControlPointMode::_get_Free() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierControlPointMode::_get_Free");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BezierControlPointMode>("", "BezierControlPointMode", "Free"));
}
// Autogenerated static field setter
// Set static field: static public BezierControlPointMode Free
void GlobalNamespace::BezierControlPointMode::_set_Free(::GlobalNamespace::BezierControlPointMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierControlPointMode::_set_Free");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BezierControlPointMode", "Free", value));
}
// Autogenerated static field getter
// Get static field: static public BezierControlPointMode Aligned
::GlobalNamespace::BezierControlPointMode GlobalNamespace::BezierControlPointMode::_get_Aligned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierControlPointMode::_get_Aligned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BezierControlPointMode>("", "BezierControlPointMode", "Aligned"));
}
// Autogenerated static field setter
// Set static field: static public BezierControlPointMode Aligned
void GlobalNamespace::BezierControlPointMode::_set_Aligned(::GlobalNamespace::BezierControlPointMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierControlPointMode::_set_Aligned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BezierControlPointMode", "Aligned", value));
}
// Autogenerated static field getter
// Get static field: static public BezierControlPointMode Mirrored
::GlobalNamespace::BezierControlPointMode GlobalNamespace::BezierControlPointMode::_get_Mirrored() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierControlPointMode::_get_Mirrored");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BezierControlPointMode>("", "BezierControlPointMode", "Mirrored"));
}
// Autogenerated static field setter
// Set static field: static public BezierControlPointMode Mirrored
void GlobalNamespace::BezierControlPointMode::_set_Mirrored(::GlobalNamespace::BezierControlPointMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierControlPointMode::_set_Mirrored");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BezierControlPointMode", "Mirrored", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BezierControlPointMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierControlPointMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BezierCurve
#include "GlobalNamespace/BezierCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3[] points
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::BezierCurve::dyn_points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierCurve::dyn_points");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "points"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BezierCurve.GetPoint
::UnityEngine::Vector3 GlobalNamespace::BezierCurve::GetPoint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierCurve::GetPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierCurve.GetVelocity
::UnityEngine::Vector3 GlobalNamespace::BezierCurve::GetVelocity(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierCurve::GetVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierCurve.GetDirection
::UnityEngine::Vector3 GlobalNamespace::BezierCurve::GetDirection(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierCurve::GetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierCurve.Reset
void GlobalNamespace::BezierCurve::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierCurve::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] points
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::BezierSpline::dyn_points() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::dyn_points");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "points"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BezierControlPointMode[] modes
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BezierControlPointMode>& GlobalNamespace::BezierSpline::dyn_modes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::dyn_modes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modes"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BezierControlPointMode>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean loop
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BezierSpline::dyn_loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::dyn_loop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loop"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _totalArcLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BezierSpline::dyn__totalArcLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::dyn__totalArcLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_totalArcLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] _timesTable
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::BezierSpline::dyn__timesTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::dyn__timesTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timesTable"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] _lengthsTable
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::BezierSpline::dyn__lengthsTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::dyn__lengthsTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lengthsTable"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BezierSpline.Awake
void GlobalNamespace::BezierSpline::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.buildTimesLenghtsTables
void GlobalNamespace::BezierSpline::buildTimesLenghtsTables(int subdivisions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::buildTimesLenghtsTables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "buildTimesLenghtsTables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subdivisions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, subdivisions);
}
// Autogenerated method: BezierSpline.getPathFromTime
float GlobalNamespace::BezierSpline::getPathFromTime(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::getPathFromTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "getPathFromTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSpline.get_Loop
bool GlobalNamespace::BezierSpline::get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::get_Loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.set_Loop
void GlobalNamespace::BezierSpline::set_Loop(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::set_Loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BezierSpline.get_ControlPointCount
int GlobalNamespace::BezierSpline::get_ControlPointCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::get_ControlPointCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ControlPointCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.GetControlPoint
::UnityEngine::Vector3 GlobalNamespace::BezierSpline::GetControlPoint(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::GetControlPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControlPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, index);
}
// Autogenerated method: BezierSpline.SetControlPoint
void GlobalNamespace::BezierSpline::SetControlPoint(int index, ::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::SetControlPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetControlPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, point);
}
// Autogenerated method: BezierSpline.GetControlPointMode
::GlobalNamespace::BezierControlPointMode GlobalNamespace::BezierSpline::GetControlPointMode(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::GetControlPointMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControlPointMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BezierControlPointMode, false>(this, ___internal__method, index);
}
// Autogenerated method: BezierSpline.SetControlPointMode
void GlobalNamespace::BezierSpline::SetControlPointMode(int index, ::GlobalNamespace::BezierControlPointMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::SetControlPointMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetControlPointMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, mode);
}
// Autogenerated method: BezierSpline.EnforceMode
void GlobalNamespace::BezierSpline::EnforceMode(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::EnforceMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnforceMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: BezierSpline.get_CurveCount
int GlobalNamespace::BezierSpline::get_CurveCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::get_CurveCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurveCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.GetPoint
::UnityEngine::Vector3 GlobalNamespace::BezierSpline::GetPoint(float t, bool ConstantVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::GetPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(ConstantVelocity)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t, ConstantVelocity);
}
// Autogenerated method: BezierSpline.GetPoint
::UnityEngine::Vector3 GlobalNamespace::BezierSpline::GetPoint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::GetPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSpline.GetPointLocal
::UnityEngine::Vector3 GlobalNamespace::BezierSpline::GetPointLocal(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::GetPointLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPointLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSpline.GetVelocity
::UnityEngine::Vector3 GlobalNamespace::BezierSpline::GetVelocity(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::GetVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSpline.GetDirection
::UnityEngine::Vector3 GlobalNamespace::BezierSpline::GetDirection(float t, bool ConstantVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::GetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(ConstantVelocity)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t, ConstantVelocity);
}
// Autogenerated method: BezierSpline.GetDirection
::UnityEngine::Vector3 GlobalNamespace::BezierSpline::GetDirection(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::GetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: BezierSpline.AddCurve
void GlobalNamespace::BezierSpline::AddCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::AddCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.RemoveLastCurve
void GlobalNamespace::BezierSpline::RemoveLastCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::RemoveLastCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveLastCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BezierSpline.RemoveCurve
void GlobalNamespace::BezierSpline::RemoveCurve(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::RemoveCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: BezierSpline.Reset
void GlobalNamespace::BezierSpline::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BezierSpline::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CatmullRomSpline
#include "GlobalNamespace/CatmullRomSpline.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] controlPointTransforms
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::CatmullRomSpline::dyn_controlPointTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::dyn_controlPointTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controlPointTransforms"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform debugTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::CatmullRomSpline::dyn_debugTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::dyn_debugTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& GlobalNamespace::CatmullRomSpline::dyn_controlPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::dyn_controlPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controlPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Matrix4x4> controlPointsTransformationMatricies
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>*& GlobalNamespace::CatmullRomSpline::dyn_controlPointsTransformationMatricies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::dyn_controlPointsTransformationMatricies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controlPointsTransformationMatricies"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single testFloat
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CatmullRomSpline::dyn_testFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::dyn_testFloat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testFloat"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CatmullRomSpline.RefreshControlPoints
void GlobalNamespace::CatmullRomSpline::RefreshControlPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::RefreshControlPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshControlPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CatmullRomSpline.Awake
void GlobalNamespace::CatmullRomSpline::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CatmullRomSpline.Evaluate
::UnityEngine::Vector3 GlobalNamespace::CatmullRomSpline::Evaluate(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* controlPoints, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::Evaluate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CatmullRomSpline", "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controlPoints), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controlPoints, t);
}
// Autogenerated method: CatmullRomSpline.Evaluate
::UnityEngine::Vector3 GlobalNamespace::CatmullRomSpline::Evaluate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::Evaluate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: CatmullRomSpline.GetClosestEvaluationOnSpline
float GlobalNamespace::CatmullRomSpline::GetClosestEvaluationOnSpline(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* controlPoints, ::UnityEngine::Vector3 worldPoint, ByRef<::UnityEngine::Vector3> linePoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::GetClosestEvaluationOnSpline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CatmullRomSpline", "GetClosestEvaluationOnSpline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controlPoints), ::il2cpp_utils::ExtractType(worldPoint), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controlPoints, worldPoint, byref(linePoint));
}
// Autogenerated method: CatmullRomSpline.GetClosestEvaluationOnSpline
float GlobalNamespace::CatmullRomSpline::GetClosestEvaluationOnSpline(::UnityEngine::Vector3 worldPoint, ByRef<::UnityEngine::Vector3> linePoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::GetClosestEvaluationOnSpline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestEvaluationOnSpline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPoint), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, worldPoint, byref(linePoint));
}
// Autogenerated method: CatmullRomSpline.GetForwardTangent
::UnityEngine::Vector3 GlobalNamespace::CatmullRomSpline::GetForwardTangent(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* controlPoints, float t, float step) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::GetForwardTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CatmullRomSpline", "GetForwardTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controlPoints), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(step)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controlPoints, t, step);
}
// Autogenerated method: CatmullRomSpline.GetForwardTangent
::UnityEngine::Vector3 GlobalNamespace::CatmullRomSpline::GetForwardTangent(float t, float step) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::GetForwardTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetForwardTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(step)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t, step);
}
// Autogenerated method: CatmullRomSpline.CatmullRom
::UnityEngine::Vector3 GlobalNamespace::CatmullRomSpline::CatmullRom(float t, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::CatmullRom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CatmullRomSpline", "CatmullRom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, p0, p1, p2, p3);
}
// Autogenerated method: CatmullRomSpline.OnDrawGizmosSelected
void GlobalNamespace::CatmullRomSpline::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CatmullRomSpline.CatmullRom
::UnityEngine::Matrix4x4 GlobalNamespace::CatmullRomSpline::CatmullRom(float t, ::UnityEngine::Matrix4x4 p0, ::UnityEngine::Matrix4x4 p1, ::UnityEngine::Matrix4x4 p2, ::UnityEngine::Matrix4x4 p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::CatmullRom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CatmullRomSpline", "CatmullRom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, p0, p1, p2, p3);
}
// Autogenerated method: CatmullRomSpline.Evaluate
::UnityEngine::Matrix4x4 GlobalNamespace::CatmullRomSpline::Evaluate(::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>* controlPoints, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CatmullRomSpline::Evaluate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CatmullRomSpline", "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controlPoints), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, controlPoints, t);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Line
#include "GlobalNamespace/Line.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 p0
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Line::dyn_p0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Line::dyn_p0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "p0"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 p1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Line::dyn_p1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Line::dyn_p1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "p1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LinearSpline
#include "GlobalNamespace/LinearSpline.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] controlPointTransforms
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::LinearSpline::dyn_controlPointTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_controlPointTransforms");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controlPointTransforms"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform debugTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::LinearSpline::dyn_debugTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_debugTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Vector3> controlPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& GlobalNamespace::LinearSpline::dyn_controlPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_controlPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controlPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<System.Single> distances
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& GlobalNamespace::LinearSpline::dyn_distances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_distances");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distances"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<LinearSpline/CurveBoundary> curveBoundaries
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::LinearSpline::CurveBoundary>*& GlobalNamespace::LinearSpline::dyn_curveBoundaries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_curveBoundaries");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curveBoundaries"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::LinearSpline::CurveBoundary>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean roundCorners
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LinearSpline::dyn_roundCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_roundCorners");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "roundCorners"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cornerRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LinearSpline::dyn_cornerRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_cornerRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cornerRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean looping
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LinearSpline::dyn_looping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_looping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "looping"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single testFloat
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LinearSpline::dyn_testFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_testFloat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testFloat"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 gizmoResolution
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LinearSpline::dyn_gizmoResolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_gizmoResolution");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gizmoResolution"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single totalDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LinearSpline::dyn_totalDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::dyn_totalDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "totalDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LinearSpline.RefreshControlPoints
void GlobalNamespace::LinearSpline::RefreshControlPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::RefreshControlPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshControlPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LinearSpline.Awake
void GlobalNamespace::LinearSpline::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LinearSpline.Evaluate
::UnityEngine::Vector3 GlobalNamespace::LinearSpline::Evaluate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::Evaluate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t);
}
// Autogenerated method: LinearSpline.GetForwardTangent
::UnityEngine::Vector3 GlobalNamespace::LinearSpline::GetForwardTangent(float t, float step) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::GetForwardTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetForwardTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(step)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, t, step);
}
// Autogenerated method: LinearSpline.OnDrawGizmosSelected
void GlobalNamespace::LinearSpline::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinearSpline::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SplineDecorator
#include "GlobalNamespace/SplineDecorator.hpp"
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public BezierSpline spline
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BezierSpline*& GlobalNamespace::SplineDecorator::dyn_spline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineDecorator::dyn_spline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spline"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BezierSpline**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 frequency
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SplineDecorator::dyn_frequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineDecorator::dyn_frequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frequency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean lookForward
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SplineDecorator::dyn_lookForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineDecorator::dyn_lookForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookForward"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] items
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::SplineDecorator::dyn_items() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineDecorator::dyn_items");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "items"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SplineDecorator.Awake
void GlobalNamespace::SplineDecorator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineDecorator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SplineWalker
#include "GlobalNamespace/SplineWalker.hpp"
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: LinearSpline
#include "GlobalNamespace/LinearSpline.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public BezierSpline spline
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BezierSpline*& GlobalNamespace::SplineWalker::dyn_spline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_spline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spline"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BezierSpline**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LinearSpline linearSpline
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LinearSpline*& GlobalNamespace::SplineWalker::dyn_linearSpline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_linearSpline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linearSpline"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LinearSpline**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single duration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SplineWalker::dyn_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_duration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean lookForward
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SplineWalker::dyn_lookForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_lookForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookForward"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SplineWalkerMode mode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SplineWalkerMode& GlobalNamespace::SplineWalker::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SplineWalkerMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean walkLinearPath
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SplineWalker::dyn_walkLinearPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_walkLinearPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "walkLinearPath"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useWorldPosition
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SplineWalker::dyn_useWorldPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_useWorldPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useWorldPosition"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single progress
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SplineWalker::dyn_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_progress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "progress"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean goingForward
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SplineWalker::dyn_goingForward() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_goingForward");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "goingForward"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean DoNetworkSync
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SplineWalker::dyn_DoNetworkSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn_DoNetworkSync");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DoNetworkSync"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Pun.PhotonView _view
[[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& GlobalNamespace::SplineWalker::dyn__view() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::dyn__view");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_view"))->offset;
  return *reinterpret_cast<::Photon::Pun::PhotonView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SplineWalker.Awake
void GlobalNamespace::SplineWalker::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SplineWalker.Update
void GlobalNamespace::SplineWalker::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SplineWalker.OnPhotonSerializeView
void GlobalNamespace::SplineWalker::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalker::OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SplineWalker*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SplineWalkerMode
#include "GlobalNamespace/SplineWalkerMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SplineWalkerMode Once
::GlobalNamespace::SplineWalkerMode GlobalNamespace::SplineWalkerMode::_get_Once() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalkerMode::_get_Once");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SplineWalkerMode>("", "SplineWalkerMode", "Once"));
}
// Autogenerated static field setter
// Set static field: static public SplineWalkerMode Once
void GlobalNamespace::SplineWalkerMode::_set_Once(::GlobalNamespace::SplineWalkerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalkerMode::_set_Once");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SplineWalkerMode", "Once", value));
}
// Autogenerated static field getter
// Get static field: static public SplineWalkerMode Loop
::GlobalNamespace::SplineWalkerMode GlobalNamespace::SplineWalkerMode::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalkerMode::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SplineWalkerMode>("", "SplineWalkerMode", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public SplineWalkerMode Loop
void GlobalNamespace::SplineWalkerMode::_set_Loop(::GlobalNamespace::SplineWalkerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalkerMode::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SplineWalkerMode", "Loop", value));
}
// Autogenerated static field getter
// Get static field: static public SplineWalkerMode PingPong
::GlobalNamespace::SplineWalkerMode GlobalNamespace::SplineWalkerMode::_get_PingPong() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalkerMode::_get_PingPong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SplineWalkerMode>("", "SplineWalkerMode", "PingPong"));
}
// Autogenerated static field setter
// Set static field: static public SplineWalkerMode PingPong
void GlobalNamespace::SplineWalkerMode::_set_PingPong(::GlobalNamespace::SplineWalkerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalkerMode::_set_PingPong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SplineWalkerMode", "PingPong", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SplineWalkerMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SplineWalkerMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: StaticHash
#include "GlobalNamespace/StaticHash.hpp"
// Including type: StaticHash/SingleInt32
#include "GlobalNamespace/StaticHash_SingleInt32.hpp"
// Including type: StaticHash/DoubleInt64
#include "GlobalNamespace/StaticHash_DoubleInt64.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, i);
}
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(uint u) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(u)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, u);
}
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, f);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(float f1, float f2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f1), ::il2cpp_utils::ExtractType(f2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, f1, f2);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(float f1, float f2, float f3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f1), ::il2cpp_utils::ExtractType(f2), ::il2cpp_utils::ExtractType(f3)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, f1, f2, f3);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(float f1, float f2, float f3, float f4) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f1), ::il2cpp_utils::ExtractType(f2), ::il2cpp_utils::ExtractType(f3), ::il2cpp_utils::ExtractType(f4)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, f1, f2, f3, f4);
}
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(int64_t l) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, l);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(int64_t l1, int64_t l2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l1), ::il2cpp_utils::ExtractType(l2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, l1, l2);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(int64_t l1, int64_t l2, int64_t l3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l1), ::il2cpp_utils::ExtractType(l2), ::il2cpp_utils::ExtractType(l3)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, l1, l2, l3);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(int64_t l1, int64_t l2, int64_t l3, int64_t l4) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l1), ::il2cpp_utils::ExtractType(l2), ::il2cpp_utils::ExtractType(l3), ::il2cpp_utils::ExtractType(l4)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, l1, l2, l3, l4);
}
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(double d) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, d);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(double d1, double d2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d1), ::il2cpp_utils::ExtractType(d2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, d1, d2);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(double d1, double d2, double d3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d1), ::il2cpp_utils::ExtractType(d2), ::il2cpp_utils::ExtractType(d3)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, d1, d2, d3);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(double d1, double d2, double d3, double d4) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d1), ::il2cpp_utils::ExtractType(d2), ::il2cpp_utils::ExtractType(d3), ::il2cpp_utils::ExtractType(d4)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, d1, d2, d3, d4);
}
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(bool b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, b);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(bool b1, bool b2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b1), ::il2cpp_utils::ExtractType(b2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, b1, b2);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(bool b1, bool b2, bool b3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b1), ::il2cpp_utils::ExtractType(b2), ::il2cpp_utils::ExtractType(b3)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, b1, b2, b3);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(bool b1, bool b2, bool b3, bool b4) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b1), ::il2cpp_utils::ExtractType(b2), ::il2cpp_utils::ExtractType(b3), ::il2cpp_utils::ExtractType(b4)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, b1, b2, b3, b4);
}
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(::System::DateTime dt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dt)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dt);
}
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(::StringW s1, ::StringW s2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s1, s2);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(::StringW s1, ::StringW s2, ::StringW s3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2), ::il2cpp_utils::ExtractType(s3)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s1, s2, s3);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(::StringW s1, ::StringW s2, ::StringW s3, ::StringW s4) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2), ::il2cpp_utils::ExtractType(s3), ::il2cpp_utils::ExtractType(s4)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s1, s2, s3, s4);
}
// Autogenerated method: StaticHash.Calculate
int GlobalNamespace::StaticHash::Calculate(::ArrayW<uint8_t> bytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(int i1, int i2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i1), ::il2cpp_utils::ExtractType(i2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, i1, i2);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(int i1, int i2, int i3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i1), ::il2cpp_utils::ExtractType(i2), ::il2cpp_utils::ExtractType(i3)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, i1, i2, i3);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(int i1, int i2, int i3, int i4) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i1), ::il2cpp_utils::ExtractType(i2), ::il2cpp_utils::ExtractType(i3), ::il2cpp_utils::ExtractType(i4)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, i1, i2, i3, i4);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(::ArrayW<int> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, values);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(::ArrayW<uint> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, values);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(uint u1, uint u2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(u1), ::il2cpp_utils::ExtractType(u2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, u1, u2);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(uint u1, uint u2, uint u3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(u1), ::il2cpp_utils::ExtractType(u2), ::il2cpp_utils::ExtractType(u3)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, u1, u2, u3);
}
// Autogenerated method: StaticHash.Combine
int GlobalNamespace::StaticHash::Combine(uint u1, uint u2, uint u3, uint u4) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(u1), ::il2cpp_utils::ExtractType(u2), ::il2cpp_utils::ExtractType(u3), ::il2cpp_utils::ExtractType(u4)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, u1, u2, u3, u4);
}
// Autogenerated method: StaticHash.ComputeOrderAgnostic
int GlobalNamespace::StaticHash::ComputeOrderAgnostic(::ArrayW<int> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::ComputeOrderAgnostic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "ComputeOrderAgnostic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, values);
}
// Autogenerated method: StaticHash.Mix
void GlobalNamespace::StaticHash::Mix(ByRef<uint> a, ByRef<uint> b, ByRef<uint> c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Mix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Mix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b), byref(c));
}
// Autogenerated method: StaticHash.Finalize
void GlobalNamespace::StaticHash::Finalize(ByRef<uint> a, ByRef<uint> b, ByRef<uint> c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Finalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(a), byref(b), byref(c));
}
// Autogenerated method: StaticHash.Rotate
uint GlobalNamespace::StaticHash::Rotate(uint x, int k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHash::Rotate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHash", "Rotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodRethrow<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, k);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: StaticHashExt
#include "GlobalNamespace/StaticHashExt.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, i);
}
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(uint u) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(u)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, u);
}
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, f);
}
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(int64_t l) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, l);
}
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(double d) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, d);
}
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(bool b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, b);
}
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(::System::DateTime dt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dt)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, dt);
}
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: StaticHashExt.GetStaticHash
int GlobalNamespace::StaticHashExt::GetStaticHash(::ArrayW<uint8_t> bytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StaticHashExt::GetStaticHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StaticHashExt", "GetStaticHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bytes);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: StringUtils
#include "GlobalNamespace/StringUtils.hpp"
// Including type: StringUtils/<>c
#include "GlobalNamespace/StringUtils_--c.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.StringComparison
#include "System/StringComparison.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String kForwardSlash
::StringW GlobalNamespace::StringUtils::_get_kForwardSlash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_get_kForwardSlash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "StringUtils", "kForwardSlash"));
}
// Autogenerated static field setter
// Set static field: static public System.String kForwardSlash
void GlobalNamespace::StringUtils::_set_kForwardSlash(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_set_kForwardSlash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringUtils", "kForwardSlash", value));
}
// Autogenerated static field getter
// Get static field: static public System.String kBackSlash
::StringW GlobalNamespace::StringUtils::_get_kBackSlash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_get_kBackSlash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "StringUtils", "kBackSlash"));
}
// Autogenerated static field setter
// Set static field: static public System.String kBackSlash
void GlobalNamespace::StringUtils::_set_kBackSlash(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_set_kBackSlash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringUtils", "kBackSlash", value));
}
// Autogenerated static field getter
// Get static field: static public System.String kBackTick
::StringW GlobalNamespace::StringUtils::_get_kBackTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_get_kBackTick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "StringUtils", "kBackTick"));
}
// Autogenerated static field setter
// Set static field: static public System.String kBackTick
void GlobalNamespace::StringUtils::_set_kBackTick(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_set_kBackTick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringUtils", "kBackTick", value));
}
// Autogenerated static field getter
// Get static field: static public System.String kMinusDash
::StringW GlobalNamespace::StringUtils::_get_kMinusDash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_get_kMinusDash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "StringUtils", "kMinusDash"));
}
// Autogenerated static field setter
// Set static field: static public System.String kMinusDash
void GlobalNamespace::StringUtils::_set_kMinusDash(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_set_kMinusDash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringUtils", "kMinusDash", value));
}
// Autogenerated static field getter
// Get static field: static public System.String kPeriod
::StringW GlobalNamespace::StringUtils::_get_kPeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_get_kPeriod");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "StringUtils", "kPeriod"));
}
// Autogenerated static field setter
// Set static field: static public System.String kPeriod
void GlobalNamespace::StringUtils::_set_kPeriod(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_set_kPeriod");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringUtils", "kPeriod", value));
}
// Autogenerated static field getter
// Get static field: static public System.String kUnderScore
::StringW GlobalNamespace::StringUtils::_get_kUnderScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_get_kUnderScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "StringUtils", "kUnderScore"));
}
// Autogenerated static field setter
// Set static field: static public System.String kUnderScore
void GlobalNamespace::StringUtils::_set_kUnderScore(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_set_kUnderScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringUtils", "kUnderScore", value));
}
// Autogenerated static field getter
// Get static field: static public System.String kColon
::StringW GlobalNamespace::StringUtils::_get_kColon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_get_kColon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "StringUtils", "kColon"));
}
// Autogenerated static field setter
// Set static field: static public System.String kColon
void GlobalNamespace::StringUtils::_set_kColon(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::_set_kColon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringUtils", "kColon", value));
}
// Autogenerated method: StringUtils.ToAlphaNumeric
::StringW GlobalNamespace::StringUtils::ToAlphaNumeric(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::ToAlphaNumeric");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "ToAlphaNumeric", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: StringUtils.Capitalize
::StringW GlobalNamespace::StringUtils::Capitalize(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::Capitalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "Capitalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: StringUtils.Concat
::StringW GlobalNamespace::StringUtils::Concat(::System::Collections::Generic::IEnumerable_1<::StringW>* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::Concat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "Concat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source);
}
// Autogenerated method: StringUtils.Join
::StringW GlobalNamespace::StringUtils::Join(::System::Collections::Generic::IEnumerable_1<::StringW>* source, ::StringW separator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(separator)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source, separator);
}
// Autogenerated method: StringUtils.Join
::StringW GlobalNamespace::StringUtils::Join(::System::Collections::Generic::IEnumerable_1<::StringW>* source, ::Il2CppChar separator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(separator)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source, separator);
}
// Autogenerated method: StringUtils.RemoveAll
::StringW GlobalNamespace::StringUtils::RemoveAll(::StringW s, ::StringW value, ::System::StringComparison mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::RemoveAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "RemoveAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, value, mode);
}
// Autogenerated method: StringUtils.RemoveAll
::StringW GlobalNamespace::StringUtils::RemoveAll(::StringW s, ::Il2CppChar value, ::System::StringComparison mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::RemoveAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "RemoveAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, value, mode);
}
// Autogenerated method: StringUtils.ToBytesASCII
::ArrayW<uint8_t> GlobalNamespace::StringUtils::ToBytesASCII(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::ToBytesASCII");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "ToBytesASCII", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: StringUtils.ToBytesUTF8
::ArrayW<uint8_t> GlobalNamespace::StringUtils::ToBytesUTF8(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::ToBytesUTF8");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "ToBytesUTF8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: StringUtils.ToBytesUnicode
::ArrayW<uint8_t> GlobalNamespace::StringUtils::ToBytesUnicode(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::ToBytesUnicode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "ToBytesUnicode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: StringUtils.ComputeSHV2
::StringW GlobalNamespace::StringUtils::ComputeSHV2(::StringW s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::ComputeSHV2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "ComputeSHV2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s);
}
// Autogenerated method: StringUtils.ToQueryString
::StringW GlobalNamespace::StringUtils::ToQueryString(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* d) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::ToQueryString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "ToQueryString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, d);
}
// Autogenerated method: StringUtils.Combine
::StringW GlobalNamespace::StringUtils::Combine(::StringW separator, ::ArrayW<::StringW> values) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::Combine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "Combine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, separator, values);
}
// Autogenerated method: StringUtils.ToUpperCamelCase
::StringW GlobalNamespace::StringUtils::ToUpperCamelCase(::StringW input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::ToUpperCamelCase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "ToUpperCamelCase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, input);
}
// Autogenerated method: StringUtils.RemoveStart
::StringW GlobalNamespace::StringUtils::RemoveStart(::StringW s, ::StringW value, ::System::StringComparison comparison) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::RemoveStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "RemoveStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparison)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, value, comparison);
}
// Autogenerated method: StringUtils.RemoveEnd
::StringW GlobalNamespace::StringUtils::RemoveEnd(::StringW s, ::StringW value, ::System::StringComparison comparison) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::RemoveEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "RemoveEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparison)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, value, comparison);
}
// Autogenerated method: StringUtils.RemoveBothEnds
::StringW GlobalNamespace::StringUtils::RemoveBothEnds(::StringW s, ::StringW value, ::System::StringComparison comparison) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::RemoveBothEnds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils", "RemoveBothEnds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparison)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, value, comparison);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: StringUtils/<>c
#include "GlobalNamespace/StringUtils_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly StringUtils/<>c <>9
::GlobalNamespace::StringUtils::$$c* GlobalNamespace::StringUtils::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::StringUtils::$$c*>("", "StringUtils/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly StringUtils/<>c <>9
void GlobalNamespace::StringUtils::$$c::_set_$$9(::GlobalNamespace::StringUtils::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "StringUtils/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<System.String,System.String>,System.String> <>9__18_0
::System::Func_2<::System::Collections::Generic::KeyValuePair_2<::StringW, ::StringW>, ::StringW>* GlobalNamespace::StringUtils::$$c::_get_$$9__18_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::$$c::_get_$$9__18_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Collections::Generic::KeyValuePair_2<::StringW, ::StringW>, ::StringW>*>("", "StringUtils/<>c", "<>9__18_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<System.String,System.String>,System.String> <>9__18_0
void GlobalNamespace::StringUtils::$$c::_set_$$9__18_0(::System::Func_2<::System::Collections::Generic::KeyValuePair_2<::StringW, ::StringW>, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::$$c::_set_$$9__18_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "StringUtils/<>c", "<>9__18_0", value)));
}
// Autogenerated method: StringUtils/<>c..cctor
void GlobalNamespace::StringUtils::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringUtils/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: StringUtils/<>c.<ToQueryString>b__18_0
::StringW GlobalNamespace::StringUtils::$$c::$ToQueryString$b__18_0(::System::Collections::Generic::KeyValuePair_2<::StringW, ::StringW> x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StringUtils::$$c::<ToQueryString>b__18_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToQueryString>b__18_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SaveTextureFileFormat
#include "GlobalNamespace/SaveTextureFileFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SaveTextureFileFormat EXR
::GlobalNamespace::SaveTextureFileFormat GlobalNamespace::SaveTextureFileFormat::_get_EXR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::_get_EXR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SaveTextureFileFormat>("", "SaveTextureFileFormat", "EXR"));
}
// Autogenerated static field setter
// Set static field: static public SaveTextureFileFormat EXR
void GlobalNamespace::SaveTextureFileFormat::_set_EXR(::GlobalNamespace::SaveTextureFileFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::_set_EXR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaveTextureFileFormat", "EXR", value));
}
// Autogenerated static field getter
// Get static field: static public SaveTextureFileFormat JPG
::GlobalNamespace::SaveTextureFileFormat GlobalNamespace::SaveTextureFileFormat::_get_JPG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::_get_JPG");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SaveTextureFileFormat>("", "SaveTextureFileFormat", "JPG"));
}
// Autogenerated static field setter
// Set static field: static public SaveTextureFileFormat JPG
void GlobalNamespace::SaveTextureFileFormat::_set_JPG(::GlobalNamespace::SaveTextureFileFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::_set_JPG");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaveTextureFileFormat", "JPG", value));
}
// Autogenerated static field getter
// Get static field: static public SaveTextureFileFormat PNG
::GlobalNamespace::SaveTextureFileFormat GlobalNamespace::SaveTextureFileFormat::_get_PNG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::_get_PNG");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SaveTextureFileFormat>("", "SaveTextureFileFormat", "PNG"));
}
// Autogenerated static field setter
// Set static field: static public SaveTextureFileFormat PNG
void GlobalNamespace::SaveTextureFileFormat::_set_PNG(::GlobalNamespace::SaveTextureFileFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::_set_PNG");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaveTextureFileFormat", "PNG", value));
}
// Autogenerated static field getter
// Get static field: static public SaveTextureFileFormat TGA
::GlobalNamespace::SaveTextureFileFormat GlobalNamespace::SaveTextureFileFormat::_get_TGA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::_get_TGA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SaveTextureFileFormat>("", "SaveTextureFileFormat", "TGA"));
}
// Autogenerated static field setter
// Set static field: static public SaveTextureFileFormat TGA
void GlobalNamespace::SaveTextureFileFormat::_set_TGA(::GlobalNamespace::SaveTextureFileFormat value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::_set_TGA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaveTextureFileFormat", "TGA", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SaveTextureFileFormat::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SaveTextureFileFormat::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TextureUtils
#include "GlobalNamespace/TextureUtils.hpp"
// Including type: TextureUtils/<>c__DisplayClass2_0
#include "GlobalNamespace/TextureUtils_--c__DisplayClass2_0.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: SaveTextureFileFormat
#include "GlobalNamespace/SaveTextureFileFormat.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TextureUtils.GetTexelSize
::UnityEngine::Vector4 GlobalNamespace::TextureUtils::GetTexelSize(::UnityEngine::Texture* tex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::GetTexelSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TextureUtils", "GetTexelSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tex)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector4, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tex);
}
// Autogenerated method: TextureUtils.CalcAverageColor
::UnityEngine::Color32 GlobalNamespace::TextureUtils::CalcAverageColor(::UnityEngine::Texture2D* tex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::CalcAverageColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TextureUtils", "CalcAverageColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tex)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color32, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tex);
}
// Autogenerated method: TextureUtils.SaveToFile
void GlobalNamespace::TextureUtils::SaveToFile(::UnityEngine::Texture* source, ::StringW filePath, int width, int height, ::GlobalNamespace::SaveTextureFileFormat fileFormat, int jpgQuality, bool asynchronous, ::System::Action_1<bool>* done) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::SaveToFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TextureUtils", "SaveToFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(fileFormat), ::il2cpp_utils::ExtractType(jpgQuality), ::il2cpp_utils::ExtractType(asynchronous), ::il2cpp_utils::ExtractType(done)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, source, filePath, width, height, fileFormat, jpgQuality, asynchronous, done);
}
// Autogenerated method: TextureUtils.CreateCopy
::UnityEngine::Texture2D* GlobalNamespace::TextureUtils::CreateCopy(::UnityEngine::Texture2D* tex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::CreateCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TextureUtils", "CreateCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tex)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, tex);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TextureUtils/<>c__DisplayClass2_0
#include "GlobalNamespace/TextureUtils_--c__DisplayClass2_0.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Rendering.AsyncGPUReadbackRequest
#include "UnityEngine/Rendering/AsyncGPUReadbackRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SaveTextureFileFormat fileFormat
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SaveTextureFileFormat& GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_fileFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_fileFormat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileFormat"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SaveTextureFileFormat*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Unity.Collections.NativeArray`1<System.Byte> narray
[[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint8_t>& GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_narray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_narray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "narray"))->offset;
  return *reinterpret_cast<::Unity::Collections::NativeArray_1<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.RenderTexture resizeRT
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_resizeRT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_resizeRT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resizeRT"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 width
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_width");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "width"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 height
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_height");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "height"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 jpgQuality
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_jpgQuality() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_jpgQuality");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jpgQuality"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String filePath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_filePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_filePath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "filePath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<System.Boolean> done
[[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_done() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::dyn_done");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "done"))->offset;
  return *reinterpret_cast<::System::Action_1<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TextureUtils/<>c__DisplayClass2_0.<SaveToFile>b__0
void GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::$SaveToFile$b__0(::UnityEngine::Rendering::AsyncGPUReadbackRequest request) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0::<SaveToFile>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SaveToFile>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, request);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransformUtils
#include "GlobalNamespace/TransformUtils.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kFwdSlash
::StringW GlobalNamespace::TransformUtils::_get_kFwdSlash() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformUtils::_get_kFwdSlash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "TransformUtils", "kFwdSlash"));
}
// Autogenerated static field setter
// Set static field: static private System.String kFwdSlash
void GlobalNamespace::TransformUtils::_set_kFwdSlash(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformUtils::_set_kFwdSlash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransformUtils", "kFwdSlash", value));
}
// Autogenerated method: TransformUtils.ComputePathHash
::UnityEngine::Hash128 GlobalNamespace::TransformUtils::ComputePathHash(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformUtils::ComputePathHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransformUtils", "ComputePathHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Hash128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: TransformUtils.GetScenePath
::StringW GlobalNamespace::TransformUtils::GetScenePath(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformUtils::GetScenePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransformUtils", "GetScenePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated method: TransformUtils.GetScenePathReverse
::StringW GlobalNamespace::TransformUtils::GetScenePathReverse(::UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformUtils::GetScenePathReverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransformUtils", "GetScenePathReverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TriggerEventNotifier
#include "GlobalNamespace/TriggerEventNotifier.hpp"
// Including type: TriggerEventNotifier/TriggerEvent
#include "GlobalNamespace/TriggerEventNotifier_TriggerEvent.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TriggerEventNotifier/TriggerEvent TriggerEnterEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TriggerEventNotifier::TriggerEvent*& GlobalNamespace::TriggerEventNotifier::dyn_TriggerEnterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::dyn_TriggerEnterEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TriggerEnterEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TriggerEventNotifier::TriggerEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TriggerEventNotifier/TriggerEvent TriggerExitEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TriggerEventNotifier::TriggerEvent*& GlobalNamespace::TriggerEventNotifier::dyn_TriggerExitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::dyn_TriggerExitEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TriggerExitEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TriggerEventNotifier::TriggerEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 maskIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TriggerEventNotifier::dyn_maskIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::dyn_maskIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maskIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TriggerEventNotifier.add_TriggerEnterEvent
void GlobalNamespace::TriggerEventNotifier::add_TriggerEnterEvent(::GlobalNamespace::TriggerEventNotifier::TriggerEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::add_TriggerEnterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_TriggerEnterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TriggerEventNotifier.remove_TriggerEnterEvent
void GlobalNamespace::TriggerEventNotifier::remove_TriggerEnterEvent(::GlobalNamespace::TriggerEventNotifier::TriggerEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::remove_TriggerEnterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_TriggerEnterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TriggerEventNotifier.add_TriggerExitEvent
void GlobalNamespace::TriggerEventNotifier::add_TriggerExitEvent(::GlobalNamespace::TriggerEventNotifier::TriggerEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::add_TriggerExitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_TriggerExitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TriggerEventNotifier.remove_TriggerExitEvent
void GlobalNamespace::TriggerEventNotifier::remove_TriggerExitEvent(::GlobalNamespace::TriggerEventNotifier::TriggerEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::remove_TriggerExitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_TriggerExitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TriggerEventNotifier.OnTriggerEnter
void GlobalNamespace::TriggerEventNotifier::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: TriggerEventNotifier.OnTriggerExit
void GlobalNamespace::TriggerEventNotifier::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: TriggerEventNotifier/TriggerEvent
#include "GlobalNamespace/TriggerEventNotifier_TriggerEvent.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TriggerEventNotifier/TriggerEvent.Invoke
void GlobalNamespace::TriggerEventNotifier::TriggerEvent::Invoke(::GlobalNamespace::TriggerEventNotifier* notifier, ::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::TriggerEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, notifier, collider);
}
// Autogenerated method: TriggerEventNotifier/TriggerEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::TriggerEventNotifier::TriggerEvent::BeginInvoke(::GlobalNamespace::TriggerEventNotifier* notifier, ::UnityEngine::Collider* collider, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::TriggerEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, notifier, collider, callback, object);
}
// Autogenerated method: TriggerEventNotifier/TriggerEvent.EndInvoke
void GlobalNamespace::TriggerEventNotifier::TriggerEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TriggerEventNotifier::TriggerEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TriggerEventNotifier::TriggerEvent*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UIMatchRotation
#include "GlobalNamespace/UIMatchRotation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform referenceTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::UIMatchRotation::dyn_referenceTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::dyn_referenceTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "referenceTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single threshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::UIMatchRotation::dyn_threshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::dyn_threshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "threshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lerpSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::UIMatchRotation::dyn_lerpSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::dyn_lerpSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UIMatchRotation/State state
[[deprecated("Use field access instead!")]] ::GlobalNamespace::UIMatchRotation::State& GlobalNamespace::UIMatchRotation::dyn_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::dyn_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<::GlobalNamespace::UIMatchRotation::State*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UIMatchRotation.Start
void GlobalNamespace::UIMatchRotation::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIMatchRotation.Update
void GlobalNamespace::UIMatchRotation::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIMatchRotation.x0z
::UnityEngine::Vector3 GlobalNamespace::UIMatchRotation::x0z(::UnityEngine::Vector3 vector) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::x0z");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "x0z", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, vector);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UIMatchRotation/State
#include "GlobalNamespace/UIMatchRotation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UIMatchRotation/State Ready
::GlobalNamespace::UIMatchRotation::State GlobalNamespace::UIMatchRotation::State::_get_Ready() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::State::_get_Ready");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UIMatchRotation::State>("", "UIMatchRotation/State", "Ready"));
}
// Autogenerated static field setter
// Set static field: static public UIMatchRotation/State Ready
void GlobalNamespace::UIMatchRotation::State::_set_Ready(::GlobalNamespace::UIMatchRotation::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::State::_set_Ready");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UIMatchRotation/State", "Ready", value));
}
// Autogenerated static field getter
// Get static field: static public UIMatchRotation/State Rotating
::GlobalNamespace::UIMatchRotation::State GlobalNamespace::UIMatchRotation::State::_get_Rotating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::State::_get_Rotating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UIMatchRotation::State>("", "UIMatchRotation/State", "Rotating"));
}
// Autogenerated static field setter
// Set static field: static public UIMatchRotation/State Rotating
void GlobalNamespace::UIMatchRotation::State::_set_Rotating(::GlobalNamespace::UIMatchRotation::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::State::_set_Rotating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UIMatchRotation/State", "Rotating", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::UIMatchRotation::State::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UIMatchRotation::State::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityEngineUtils
#include "GlobalNamespace/UnityEngineUtils.hpp"
// Including type: UnityEngine.Hash128
#include "UnityEngine/Hash128.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Id128
#include "GlobalNamespace/Id128.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngineUtils.QuantizedHash128
::UnityEngine::Hash128 GlobalNamespace::UnityEngineUtils::QuantizedHash128(::UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityEngineUtils::QuantizedHash128");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityEngineUtils", "QuantizedHash128", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Hash128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, m);
}
// Autogenerated method: UnityEngineUtils.QuantizedHash128
::UnityEngine::Hash128 GlobalNamespace::UnityEngineUtils::QuantizedHash128(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityEngineUtils::QuantizedHash128");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityEngineUtils", "QuantizedHash128", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Hash128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: UnityEngineUtils.QuantizedId128
::GlobalNamespace::Id128 GlobalNamespace::UnityEngineUtils::QuantizedId128(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityEngineUtils::QuantizedId128");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityEngineUtils", "QuantizedId128", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: UnityEngineUtils.QuantizedId128
::GlobalNamespace::Id128 GlobalNamespace::UnityEngineUtils::QuantizedId128(::UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityEngineUtils::QuantizedId128");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityEngineUtils", "QuantizedId128", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, m);
}
// Autogenerated method: UnityEngineUtils.QuantizedId128
::GlobalNamespace::Id128 GlobalNamespace::UnityEngineUtils::QuantizedId128(::UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityEngineUtils::QuantizedId128");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityEngineUtils", "QuantizedId128", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::Id128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, q);
}
// Autogenerated method: UnityEngineUtils.ToVector
::UnityEngine::Vector4 GlobalNamespace::UnityEngineUtils::ToVector(::UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityEngineUtils::ToVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityEngineUtils", "ToVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector4, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, q);
}
// Autogenerated method: UnityEngineUtils.CopyTo
void GlobalNamespace::UnityEngineUtils::CopyTo(::UnityEngine::Quaternion q, ::UnityEngine::Vector4 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityEngineUtils::CopyTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityEngineUtils", "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractType(v)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, q, v);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityObjectUtils
#include "GlobalNamespace/UnityObjectUtils.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityObjectUtils.AsNull
::UnityEngine::Object* GlobalNamespace::UnityObjectUtils::AsNull(::UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityObjectUtils::AsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityObjectUtils", "AsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Object*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: UnityObjectUtils.SafeDestroy
void GlobalNamespace::UnityObjectUtils::SafeDestroy(::UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityObjectUtils::SafeDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityObjectUtils", "SafeDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: IPreDisable
#include "GlobalNamespace/IPreDisable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IPreDisable.PreDisable
void GlobalNamespace::IPreDisable::PreDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IPreDisable::PreDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IPreDisable*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Utils
#include "GlobalNamespace/Utils.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IPreDisable
#include "GlobalNamespace/IPreDisable.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: NetPlayer
#include "GlobalNamespace/NetPlayer.hpp"
// Including type: Photon.Realtime.Room
#include "Photon/Realtime/Room.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<IPreDisable> tempDisableCallbacks
::System::Collections::Generic::List_1<::GlobalNamespace::IPreDisable*>* GlobalNamespace::Utils::_get_tempDisableCallbacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::_get_tempDisableCallbacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::IPreDisable*>*>("", "Utils", "tempDisableCallbacks"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<IPreDisable> tempDisableCallbacks
void GlobalNamespace::Utils::_set_tempDisableCallbacks(::System::Collections::Generic::List_1<::GlobalNamespace::IPreDisable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::_set_tempDisableCallbacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Utils", "tempDisableCallbacks", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 tempListcount
int GlobalNamespace::Utils::_get_tempListcount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::_get_tempListcount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Utils", "tempListcount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 tempListcount
void GlobalNamespace::Utils::_set_tempListcount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::_set_tempListcount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Utils", "tempListcount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Text.StringBuilder reusableSB
::System::Text::StringBuilder* GlobalNamespace::Utils::_get_reusableSB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::_get_reusableSB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::StringBuilder*>("", "Utils", "reusableSB"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.StringBuilder reusableSB
void GlobalNamespace::Utils::_set_reusableSB(::System::Text::StringBuilder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::_set_reusableSB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Utils", "reusableSB", value));
}
// Autogenerated method: Utils.Disable
void GlobalNamespace::Utils::Disable(::UnityEngine::GameObject* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, target);
}
// Autogenerated method: Utils.InRoom
bool GlobalNamespace::Utils::InRoom(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::InRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", "InRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, player);
}
// Autogenerated method: Utils.InRoom
bool GlobalNamespace::Utils::InRoom(::GlobalNamespace::NetPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::InRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", "InRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, player);
}
// Autogenerated method: Utils.PlayerInRoom
bool GlobalNamespace::Utils::PlayerInRoom(int actorNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::PlayerInRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", "PlayerInRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actorNumber)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, actorNumber);
}
// Autogenerated method: Utils.PlayerInRoom
bool GlobalNamespace::Utils::PlayerInRoom(int actorNumer, ByRef<::Photon::Realtime::Player*> photonPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::PlayerInRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", "PlayerInRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actorNumer), ::il2cpp_utils::ExtractIndependentType<::Photon::Realtime::Player*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, actorNumer, byref(photonPlayer));
}
// Autogenerated method: Utils.ToStringStripped
::StringW GlobalNamespace::Utils::ToStringStripped(::Photon::Realtime::Room* room) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::ToStringStripped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", "ToStringStripped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(room)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, room);
}
// Autogenerated method: Utils.StaticLoad
void GlobalNamespace::Utils::StaticLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::StaticLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", "StaticLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Utils.LoadCosmeticBundles
void GlobalNamespace::Utils::LoadCosmeticBundles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::LoadCosmeticBundles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", "LoadCosmeticBundles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Utils..cctor
void GlobalNamespace::Utils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Utils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Utils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpawnManager
#include "GlobalNamespace/SpawnManager.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpawnManager.ChildrenXfs
::ArrayW<::UnityEngine::Transform*> GlobalNamespace::SpawnManager::ChildrenXfs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnManager::ChildrenXfs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChildrenXfs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::Transform*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpawnPoint
#include "GlobalNamespace/SpawnPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GTZone startZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::SpawnPoint::dyn_startZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnPoint::dyn_startZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single startSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SpawnPoint::dyn_startSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnPoint::dyn_startSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AssetContentAPI
#include "GlobalNamespace/AssetContentAPI.hpp"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String bundleName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::AssetContentAPI::dyn_bundleName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssetContentAPI::dyn_bundleName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bundleName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LazyLoadReference`1<UnityEngine.TextAsset> bundleFile
[[deprecated("Use field access instead!")]] ::UnityEngine::LazyLoadReference_1<::UnityEngine::TextAsset*>& GlobalNamespace::AssetContentAPI::dyn_bundleFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssetContentAPI::dyn_bundleFile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bundleFile"))->offset;
  return *reinterpret_cast<::UnityEngine::LazyLoadReference_1<::UnityEngine::TextAsset*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Object[] assets
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Object*>& GlobalNamespace::AssetContentAPI::dyn_assets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AssetContentAPI::dyn_assets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assets"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Object*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GTScene
#include "GlobalNamespace/GTScene.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String _alias
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GTScene::dyn__alias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::dyn__alias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alias"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _name
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GTScene::dyn__name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::dyn__name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GTScene::dyn__path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::dyn__path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _guid
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GTScene::dyn__guid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::dyn__guid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_guid"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _buildIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTScene::dyn__buildIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::dyn__buildIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buildIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _includeInBuild
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GTScene::dyn__includeInBuild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::dyn__includeInBuild");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_includeInBuild"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GTScene.get_alias
::StringW GlobalNamespace::GTScene::get_alias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::get_alias");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alias", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.get_name
::StringW GlobalNamespace::GTScene::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.get_path
::StringW GlobalNamespace::GTScene::get_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::get_path");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_path", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.get_guid
::StringW GlobalNamespace::GTScene::get_guid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::get_guid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_guid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.get_buildIndex
int GlobalNamespace::GTScene::get_buildIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::get_buildIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buildIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.get_includeInBuild
bool GlobalNamespace::GTScene::get_includeInBuild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::get_includeInBuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_includeInBuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.get_isLoaded
bool GlobalNamespace::GTScene::get_isLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::get_isLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.get_hasAlias
bool GlobalNamespace::GTScene::get_hasAlias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::get_hasAlias");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasAlias", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.Equals
bool GlobalNamespace::GTScene::Equals(::GlobalNamespace::GTScene* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GTScene*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: GTScene.LoadAsync
void GlobalNamespace::GTScene::LoadAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::LoadAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.UnloadAsync
void GlobalNamespace::GTScene::UnloadAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::UnloadAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnloadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.FromAsset
::GlobalNamespace::GTScene* GlobalNamespace::GTScene::FromAsset(::Il2CppObject* sceneAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::FromAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTScene", "FromAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneAsset)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GTScene*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sceneAsset);
}
// Autogenerated method: GTScene.From
::GlobalNamespace::GTScene* GlobalNamespace::GTScene::From(::Il2CppObject* editorBuildSettingsScene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::From");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTScene", "From", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(editorBuildSettingsScene)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GTScene*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, editorBuildSettingsScene);
}
// Autogenerated method: GTScene.GetHashCode
int GlobalNamespace::GTScene::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.ToString
::StringW GlobalNamespace::GTScene::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: GTScene.Equals
bool GlobalNamespace::GTScene::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: GTScene.op_Equality
bool GlobalNamespace::operator ==(::GlobalNamespace::GTScene* x, ::GlobalNamespace::GTScene& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTScene", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated method: GTScene.op_Inequality
bool GlobalNamespace::operator !=(::GlobalNamespace::GTScene* x, ::GlobalNamespace::GTScene& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTScene::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTScene", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTSceneUtils
#include "GlobalNamespace/GTSceneUtils.hpp"
// Including type: GTScene
#include "GlobalNamespace/GTScene.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GTSceneUtils.AddToBuild
void GlobalNamespace::GTSceneUtils::AddToBuild(::GlobalNamespace::GTScene* scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSceneUtils::AddToBuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTSceneUtils", "AddToBuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, scene);
}
// Autogenerated method: GTSceneUtils.Equals
bool GlobalNamespace::GTSceneUtils::Equals(::GlobalNamespace::GTScene* x, ::UnityEngine::SceneManagement::Scene y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSceneUtils::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTSceneUtils", "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: GTSceneUtils.ScenesInBuild
::ArrayW<::GlobalNamespace::GTScene*> GlobalNamespace::GTSceneUtils::ScenesInBuild() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSceneUtils::ScenesInBuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTSceneUtils", "ScenesInBuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::GTScene*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: GTSceneUtils.SyncBuildScenes
void GlobalNamespace::GTSceneUtils::SyncBuildScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSceneUtils::SyncBuildScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GTSceneUtils", "SyncBuildScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTSubScene
#include "GlobalNamespace/GTSubScene.hpp"
// Including type: GTScene
#include "GlobalNamespace/GTScene.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GTScene[] scenes
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GTScene*>& GlobalNamespace::GTSubScene::dyn_scenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubScene::dyn_scenes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenes"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::GTScene*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GTSubScene.SwitchToScene
void GlobalNamespace::GTSubScene::SwitchToScene(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubScene::SwitchToScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: GTSubScene.SwitchToScene
void GlobalNamespace::GTSubScene::SwitchToScene(::GlobalNamespace::GTScene* scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubScene::SwitchToScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchToScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scene);
}
// Autogenerated method: GTSubScene.LoadAll
void GlobalNamespace::GTSubScene::LoadAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubScene::LoadAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GTSubScene.UnloadAll
void GlobalNamespace::GTSubScene::UnloadAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTSubScene::UnloadAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnloadAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DragDropScenesAttribute
#include "GlobalNamespace/DragDropScenesAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: InvalidType
#include "GlobalNamespace/InvalidType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type _self
[[deprecated("Use field access instead!")]] ::System::Type*& GlobalNamespace::InvalidType::dyn__self() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InvalidType::dyn__self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_self"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InvalidType.get_Name
::StringW GlobalNamespace::InvalidType::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InvalidType::get_Name");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ProxyType*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: InvalidType.get_FullName
::StringW GlobalNamespace::InvalidType::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InvalidType::get_FullName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ProxyType*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: InvalidType.get_AssemblyQualifiedName
::StringW GlobalNamespace::InvalidType::get_AssemblyQualifiedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InvalidType::get_AssemblyQualifiedName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ProxyType*), 28));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ProxyType
#include "GlobalNamespace/ProxyType.hpp"
// Including type: InvalidType
#include "GlobalNamespace/InvalidType.hpp"
// Including type: System.Reflection.Module
#include "System/Reflection/Module.hpp"
// Including type: System.Reflection.TypeAttributes
#include "System/Reflection/TypeAttributes.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Reflection.Binder
#include "System/Reflection/Binder.hpp"
// Including type: System.Reflection.CallingConventions
#include "System/Reflection/CallingConventions.hpp"
// Including type: System.Reflection.EventInfo
#include "System/Reflection/EventInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Globalization.CultureInfo
#include "System/Globalization/CultureInfo.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String kPrefix
::StringW GlobalNamespace::ProxyType::_get_kPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::_get_kPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "ProxyType", "kPrefix"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String kPrefix
void GlobalNamespace::ProxyType::_set_kPrefix(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::_set_kPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ProxyType", "kPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private InvalidType kInvalidType
::GlobalNamespace::InvalidType* GlobalNamespace::ProxyType::_get_kInvalidType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::_get_kInvalidType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::InvalidType*>("", "ProxyType", "kInvalidType"));
}
// Autogenerated static field setter
// Set static field: static private InvalidType kInvalidType
void GlobalNamespace::ProxyType::_set_kInvalidType(::GlobalNamespace::InvalidType* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::_set_kInvalidType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ProxyType", "kInvalidType", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Type _self
[[deprecated("Use field access instead!")]] ::System::Type*& GlobalNamespace::ProxyType::dyn__self() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::dyn__self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_self"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _typeName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ProxyType::dyn__typeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::dyn__typeName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_typeName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ProxyType.Parse
::GlobalNamespace::ProxyType* GlobalNamespace::ProxyType::Parse(::StringW input) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::Parse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ProxyType", "Parse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ProxyType*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, input);
}
// Autogenerated method: ProxyType..cctor
void GlobalNamespace::ProxyType::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ProxyType", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ProxyType.get_Name
::StringW GlobalNamespace::ProxyType::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_Name");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Reflection::MemberInfo*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.get_FullName
::StringW GlobalNamespace::ProxyType::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_FullName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.ToString
::StringW GlobalNamespace::ProxyType::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.GetCustomAttributes
::ArrayW<::Il2CppObject*> GlobalNamespace::ProxyType::GetCustomAttributes(bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Reflection::MemberInfo*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Il2CppObject*>, false>(this, ___internal__method, inherit);
}
// Autogenerated method: ProxyType.GetCustomAttributes
::ArrayW<::Il2CppObject*> GlobalNamespace::ProxyType::GetCustomAttributes(::System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetCustomAttributes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Reflection::MemberInfo*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::Il2CppObject*>, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: ProxyType.IsDefined
bool GlobalNamespace::ProxyType::IsDefined(::System::Type* attributeType, bool inherit) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::IsDefined");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Reflection::MemberInfo*), 12));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, attributeType, inherit);
}
// Autogenerated method: ProxyType.get_Module
::System::Reflection::Module* GlobalNamespace::ProxyType::get_Module() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_Module");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 31));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::Module*, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.get_Namespace
::StringW GlobalNamespace::ProxyType::get_Namespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_Namespace");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 27));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.GetAttributeFlagsImpl
::System::Reflection::TypeAttributes GlobalNamespace::ProxyType::GetAttributeFlagsImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetAttributeFlagsImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 58));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::TypeAttributes, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.GetConstructorImpl
::System::Reflection::ConstructorInfo* GlobalNamespace::ProxyType::GetConstructorImpl(::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::Binder* binder, ::System::Reflection::CallingConventions callConvention, ::ArrayW<::System::Type*> types, ::ArrayW<::System::Reflection::ParameterModifier> modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetConstructorImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 83));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::ConstructorInfo*, false>(this, ___internal__method, bindingAttr, binder, callConvention, types, modifiers);
}
// Autogenerated method: ProxyType.GetConstructors
::ArrayW<::System::Reflection::ConstructorInfo*> GlobalNamespace::ProxyType::GetConstructors(::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetConstructors");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 85));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::ConstructorInfo*>, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: ProxyType.GetElementType
::System::Type* GlobalNamespace::ProxyType::GetElementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetElementType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 49));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.GetEvent
::System::Reflection::EventInfo* GlobalNamespace::ProxyType::GetEvent(::StringW name, ::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetEvent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 87));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::EventInfo*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: ProxyType.GetEvents
::ArrayW<::System::Reflection::EventInfo*> GlobalNamespace::ProxyType::GetEvents(::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 88));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::EventInfo*>, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: ProxyType.GetField
::System::Reflection::FieldInfo* GlobalNamespace::ProxyType::GetField(::StringW name, ::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetField");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 90));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::FieldInfo*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: ProxyType.GetFields
::ArrayW<::System::Reflection::FieldInfo*> GlobalNamespace::ProxyType::GetFields(::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetFields");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 92));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::FieldInfo*>, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: ProxyType.GetMembers
::ArrayW<::System::Reflection::MemberInfo*> GlobalNamespace::ProxyType::GetMembers(::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetMembers");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 96));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::MemberInfo*>, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: ProxyType.GetMethodImpl
::System::Reflection::MethodInfo* GlobalNamespace::ProxyType::GetMethodImpl(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::Binder* binder, ::System::Reflection::CallingConventions callConvention, ::ArrayW<::System::Type*> types, ::ArrayW<::System::Reflection::ParameterModifier> modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetMethodImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 103));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(this, ___internal__method, name, bindingAttr, binder, callConvention, types, modifiers);
}
// Autogenerated method: ProxyType.GetMethods
::ArrayW<::System::Reflection::MethodInfo*> GlobalNamespace::ProxyType::GetMethods(::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetMethods");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 105));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::MethodInfo*>, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: ProxyType.GetProperties
::ArrayW<::System::Reflection::PropertyInfo*> GlobalNamespace::ProxyType::GetProperties(::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetProperties");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 116));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::PropertyInfo*>, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: ProxyType.InvokeMember
::Il2CppObject* GlobalNamespace::ProxyType::InvokeMember(::StringW name, ::System::Reflection::BindingFlags invokeAttr, ::System::Reflection::Binder* binder, ::Il2CppObject* target, ::ArrayW<::Il2CppObject*> args, ::ArrayW<::System::Reflection::ParameterModifier> modifiers, ::System::Globalization::CultureInfo* culture, ::ArrayW<::StringW> namedParameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::InvokeMember");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 121));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
}
// Autogenerated method: ProxyType.get_UnderlyingSystemType
::System::Type* GlobalNamespace::ProxyType::get_UnderlyingSystemType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_UnderlyingSystemType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 33));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.IsArrayImpl
bool GlobalNamespace::ProxyType::IsArrayImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::IsArrayImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 35));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.IsByRefImpl
bool GlobalNamespace::ProxyType::IsByRefImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::IsByRefImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 37));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.IsCOMObjectImpl
bool GlobalNamespace::ProxyType::IsCOMObjectImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::IsCOMObjectImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 68));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.IsPointerImpl
bool GlobalNamespace::ProxyType::IsPointerImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::IsPointerImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 39));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.IsPrimitiveImpl
bool GlobalNamespace::ProxyType::IsPrimitiveImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::IsPrimitiveImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 76));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.get_Assembly
::System::Reflection::Assembly* GlobalNamespace::ProxyType::get_Assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_Assembly");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 30));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::Assembly*, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.get_AssemblyQualifiedName
::StringW GlobalNamespace::ProxyType::get_AssemblyQualifiedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_AssemblyQualifiedName");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 28));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.get_BaseType
::System::Type* GlobalNamespace::ProxyType::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_BaseType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 120));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.get_GUID
::System::Guid GlobalNamespace::ProxyType::get_GUID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::get_GUID");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 119));
  return ::il2cpp_utils::RunMethodRethrow<::System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.GetPropertyImpl
::System::Reflection::PropertyInfo* GlobalNamespace::ProxyType::GetPropertyImpl(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::Binder* binder, ::System::Type* returnType, ::ArrayW<::System::Type*> types, ::ArrayW<::System::Reflection::ParameterModifier> modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetPropertyImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 114));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::PropertyInfo*, false>(this, ___internal__method, name, bindingAttr, binder, returnType, types, modifiers);
}
// Autogenerated method: ProxyType.HasElementTypeImpl
bool GlobalNamespace::ProxyType::HasElementTypeImpl() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::HasElementTypeImpl");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 48));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ProxyType.GetNestedType
::System::Type* GlobalNamespace::ProxyType::GetNestedType(::StringW name, ::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetNestedType");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 106));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, name, bindingAttr);
}
// Autogenerated method: ProxyType.GetNestedTypes
::ArrayW<::System::Type*> GlobalNamespace::ProxyType::GetNestedTypes(::System::Reflection::BindingFlags bindingAttr) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetNestedTypes");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 107));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(this, ___internal__method, bindingAttr);
}
// Autogenerated method: ProxyType.GetInterface
::System::Type* GlobalNamespace::ProxyType::GetInterface(::StringW name, bool ignoreCase) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetInterface");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 123));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, name, ignoreCase);
}
// Autogenerated method: ProxyType.GetInterfaces
::ArrayW<::System::Type*> GlobalNamespace::ProxyType::GetInterfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProxyType::GetInterfaces");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Type*), 124));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SceneObject
#include "GlobalNamespace/SceneObject.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 classID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SceneObject::dyn_classID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::dyn_classID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "classID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt64 fileID
[[deprecated("Use field access instead!")]] uint64_t& GlobalNamespace::SceneObject::dyn_fileID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::dyn_fileID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fileID"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String typeString
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SceneObject::dyn_typeString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::dyn_typeString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "typeString"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String json
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SceneObject::dyn_json() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::dyn_json");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "json"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SceneObject.GetObjectType
::System::Type* GlobalNamespace::SceneObject::GetObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::GetObjectType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: SceneObject.Equals
bool GlobalNamespace::SceneObject::Equals(::GlobalNamespace::SceneObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SceneObject*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: SceneObject.Equals
bool GlobalNamespace::SceneObject::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: SceneObject.GetHashCode
int GlobalNamespace::SceneObject::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: SceneObject.op_Equality
bool GlobalNamespace::operator ==(::GlobalNamespace::SceneObject* x, ::GlobalNamespace::SceneObject& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneObject", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated method: SceneObject.op_Inequality
bool GlobalNamespace::operator !=(::GlobalNamespace::SceneObject* x, ::GlobalNamespace::SceneObject& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneObject::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SceneObject", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnityYaml
#include "GlobalNamespace/UnityYaml.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Reflection.Assembly EngineAssembly
::System::Reflection::Assembly* GlobalNamespace::UnityYaml::_get_EngineAssembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityYaml::_get_EngineAssembly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Reflection::Assembly*>("", "UnityYaml", "EngineAssembly"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Reflection.Assembly EngineAssembly
void GlobalNamespace::UnityYaml::_set_EngineAssembly(::System::Reflection::Assembly* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityYaml::_set_EngineAssembly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityYaml", "EngineAssembly", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Reflection.Assembly TerrainAssembly
::System::Reflection::Assembly* GlobalNamespace::UnityYaml::_get_TerrainAssembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityYaml::_get_TerrainAssembly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Reflection::Assembly*>("", "UnityYaml", "TerrainAssembly"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Reflection.Assembly TerrainAssembly
void GlobalNamespace::UnityYaml::_set_TerrainAssembly(::System::Reflection::Assembly* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityYaml::_set_TerrainAssembly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityYaml", "TerrainAssembly", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Type> ClassIDToType
::System::Collections::Generic::Dictionary_2<int, ::System::Type*>* GlobalNamespace::UnityYaml::_get_ClassIDToType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityYaml::_get_ClassIDToType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<int, ::System::Type*>*>("", "UnityYaml", "ClassIDToType")));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Type> ClassIDToType
void GlobalNamespace::UnityYaml::_set_ClassIDToType(::System::Collections::Generic::Dictionary_2<int, ::System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityYaml::_set_ClassIDToType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnityYaml", "ClassIDToType", value));
}
// Autogenerated method: UnityYaml..cctor
void GlobalNamespace::UnityYaml::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityYaml::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityYaml", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Firework
#include "GlobalNamespace/Firework.hpp"
// Including type: Firework/<>c
#include "GlobalNamespace/Firework_--c.hpp"
// Including type: FireworksController
#include "GlobalNamespace/FireworksController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private FireworksController _controller
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FireworksController*& GlobalNamespace::Firework::dyn__controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn__controller");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_controller"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FireworksController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform origin
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Firework::dyn_origin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_origin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "origin"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Firework::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color colorOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::Firework::dyn_colorOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_colorOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color colorTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::Firework::dyn_colorTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_colorTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource sourceOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::Firework::dyn_sourceOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_sourceOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource sourceTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::Firework::dyn_sourceTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_sourceTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem trail
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::Firework::dyn_trail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_trail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trail"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem[] explosions
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::Firework::dyn_explosions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_explosions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "explosions"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean doTrail
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Firework::dyn_doTrail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_doTrail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doTrail"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean doTrailAudio
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Firework::dyn_doTrailAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_doTrailAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doTrailAudio"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean doExplosion
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Firework::dyn_doExplosion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::dyn_doExplosion");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doExplosion"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Firework.Launch
void GlobalNamespace::Firework::Launch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::Launch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Launch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Firework.OnValidate
void GlobalNamespace::Firework::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Firework.OnDrawGizmos
void GlobalNamespace::Firework::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Firework.OnDrawGizmosSelected
void GlobalNamespace::Firework::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Firework/<>c
#include "GlobalNamespace/Firework_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Firework/<>c <>9
::GlobalNamespace::Firework::$$c* GlobalNamespace::Firework::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::Firework::$$c*>("", "Firework/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Firework/<>c <>9
void GlobalNamespace::Firework::$$c::_set_$$9(::GlobalNamespace::Firework::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "Firework/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Firework,System.Boolean> <>9__13_0
::System::Func_2<::GlobalNamespace::Firework*, bool>* GlobalNamespace::Firework::$$c::_get_$$9__13_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::$$c::_get_$$9__13_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::Firework*, bool>*>("", "Firework/<>c", "<>9__13_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Firework,System.Boolean> <>9__13_0
void GlobalNamespace::Firework::$$c::_set_$$9__13_0(::System::Func_2<::GlobalNamespace::Firework*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::$$c::_set_$$9__13_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "Firework/<>c", "<>9__13_0", value)));
}
// Autogenerated method: Firework/<>c..cctor
void GlobalNamespace::Firework::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Firework/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Firework/<>c.<OnValidate>b__13_0
bool GlobalNamespace::Firework::$$c::$OnValidate$b__13_0(::GlobalNamespace::Firework* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Firework::$$c::<OnValidate>b__13_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnValidate>b__13_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FireworksController
#include "GlobalNamespace/FireworksController.hpp"
// Including type: TimeOfDayEvent
#include "GlobalNamespace/TimeOfDayEvent.hpp"
// Including type: Firework
#include "GlobalNamespace/Firework.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Firework[] fireworks
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::Firework*>& GlobalNamespace::FireworksController::dyn_fireworks() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_fireworks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fireworks"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::Firework*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] whistles
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::FireworksController::dyn_whistles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_whistles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whistles"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] bursts
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::FireworksController::dyn_bursts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_bursts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bursts"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single whistleVolumeMin
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworksController::dyn_whistleVolumeMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_whistleVolumeMin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whistleVolumeMin"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single whistleVolumeMax
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworksController::dyn_whistleVolumeMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_whistleVolumeMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "whistleVolumeMax"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minWhistleDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FireworksController::dyn_minWhistleDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_minWhistleDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minWhistleDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _lastWhistle
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::FireworksController::dyn__lastWhistle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__lastWhistle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWhistle"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _lastBurst
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::FireworksController::dyn__lastBurst() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__lastBurst");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastBurst"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Firework[] _launchOrder
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::Firework*>& GlobalNamespace::FireworksController::dyn__launchOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__launchOrder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_launchOrder"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::Firework*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SRand _rnd
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SRand& GlobalNamespace::FireworksController::dyn__rnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__rnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rnd"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SRand*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FireworksController/ExplosionEvent[] _explosionQueue
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::FireworksController::ExplosionEvent>& GlobalNamespace::FireworksController::dyn__explosionQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__explosionQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_explosionQueue"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::FireworksController::ExplosionEvent>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TimeSince _timeSinceLastWhistle
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& GlobalNamespace::FireworksController::dyn__timeSinceLastWhistle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__timeSinceLastWhistle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeSinceLastWhistle"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeSince*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String seed
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FireworksController::dyn_seed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_seed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seed"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 roundNumVolleys
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::FireworksController::dyn_roundNumVolleys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_roundNumVolleys");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "roundNumVolleys"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.UInt32 roundLength
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::FireworksController::dyn_roundLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn_roundLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "roundLength"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TimeOfDayEvent _fireworksEvent
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeOfDayEvent*& GlobalNamespace::FireworksController::dyn__fireworksEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::dyn__fireworksEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fireworksEvent"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeOfDayEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FireworksController.Awake
void GlobalNamespace::FireworksController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.LaunchVolley
void GlobalNamespace::FireworksController::LaunchVolley() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::LaunchVolley");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchVolley", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.LaunchVolleyRound
void GlobalNamespace::FireworksController::LaunchVolleyRound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::LaunchVolleyRound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchVolleyRound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.Launch
void GlobalNamespace::FireworksController::Launch(::GlobalNamespace::Firework* fw) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::Launch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Launch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fw)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fw);
}
// Autogenerated method: FireworksController.PostExplosionEvent
void GlobalNamespace::FireworksController::PostExplosionEvent(::GlobalNamespace::FireworksController::ExplosionEvent ev) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::PostExplosionEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostExplosionEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ev)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ev);
}
// Autogenerated method: FireworksController.Update
void GlobalNamespace::FireworksController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.ProcessEvents
void GlobalNamespace::FireworksController::ProcessEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::ProcessEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.DoExplosion
void GlobalNamespace::FireworksController::DoExplosion(::GlobalNamespace::FireworksController::ExplosionEvent ev) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::DoExplosion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoExplosion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ev)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ev);
}
// Autogenerated method: FireworksController.RenderGizmo
void GlobalNamespace::FireworksController::RenderGizmo(::GlobalNamespace::Firework* fw, ::UnityEngine::Color c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireworksController::RenderGizmo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderGizmo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fw), ::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fw, c);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TimeOfDayEvent
#include "GlobalNamespace/TimeOfDayEvent.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: BetterDayNightManager
#include "GlobalNamespace/BetterDayNightManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single _timeStart
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayEvent::dyn__timeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn__timeStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeStart"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeEnd
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayEvent::dyn__timeEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn__timeEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeEnd"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _currentTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayEvent::dyn__currentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn__currentTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _ongoing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TimeOfDayEvent::dyn__ongoing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn__ongoing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ongoing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onEventStart
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::TimeOfDayEvent::dyn_onEventStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn_onEventStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onEventStart"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onEventStop
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::TimeOfDayEvent::dyn_onEventStop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn_onEventStop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onEventStop"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double _currentSeconds
[[deprecated("Use field access instead!")]] double& GlobalNamespace::TimeOfDayEvent::dyn__currentSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn__currentSeconds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentSeconds"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double _totalSecondsInRange
[[deprecated("Use field access instead!")]] double& GlobalNamespace::TimeOfDayEvent::dyn__totalSecondsInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn__totalSecondsInRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_totalSecondsInRange"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _elapsed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TimeOfDayEvent::dyn__elapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn__elapsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elapsed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BetterDayNightManager _dayNightManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BetterDayNightManager*& GlobalNamespace::TimeOfDayEvent::dyn__dayNightManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::dyn__dayNightManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dayNightManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BetterDayNightManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TimeOfDayEvent.get_currentTime
float GlobalNamespace::TimeOfDayEvent::get_currentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::get_currentTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayEvent.get_timeStart
float GlobalNamespace::TimeOfDayEvent::get_timeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::get_timeStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayEvent.set_timeStart
void GlobalNamespace::TimeOfDayEvent::set_timeStart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::set_timeStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TimeOfDayEvent.get_timeEnd
float GlobalNamespace::TimeOfDayEvent::get_timeEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::get_timeEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayEvent.set_timeEnd
void GlobalNamespace::TimeOfDayEvent::set_timeEnd(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::set_timeEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TimeOfDayEvent.get_isOngoing
bool GlobalNamespace::TimeOfDayEvent::get_isOngoing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::get_isOngoing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOngoing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayEvent.Start
void GlobalNamespace::TimeOfDayEvent::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayEvent.Update
void GlobalNamespace::TimeOfDayEvent::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayEvent.UpdateTime
void GlobalNamespace::TimeOfDayEvent::UpdateTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::UpdateTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayEvent.StartEvent
void GlobalNamespace::TimeOfDayEvent::StartEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::StartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeOfDayEvent.StopEvent
void GlobalNamespace::TimeOfDayEvent::StopEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TimeOfDayEvent::StopEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SurfaceImpactFX
#include "GlobalNamespace/SurfaceImpactFX.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem particleFX
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::SurfaceImpactFX::dyn_particleFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SurfaceImpactFX::dyn_particleFX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFX"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single startingGravityModifier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SurfaceImpactFX::dyn_startingGravityModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SurfaceImpactFX::dyn_startingGravityModifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingGravityModifier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SurfaceImpactFX::dyn_startingScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SurfaceImpactFX::dyn_startingScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/MainModule fxMainModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& GlobalNamespace::SurfaceImpactFX::dyn_fxMainModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SurfaceImpactFX::dyn_fxMainModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fxMainModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MainModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SurfaceImpactFX.Awake
void GlobalNamespace::SurfaceImpactFX::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SurfaceImpactFX::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SurfaceImpactFX.SetScale
void GlobalNamespace::SurfaceImpactFX::SetScale(float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SurfaceImpactFX::SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GrowUntilCollision
#include "GlobalNamespace/GrowUntilCollision.hpp"
// Including type: LightningDispatcherEvent
#include "GlobalNamespace/LightningDispatcherEvent.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single maxSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GrowUntilCollision::dyn_maxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_maxSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single growthRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GrowUntilCollision::dyn_growthRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_growthRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "growthRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GrowUntilCollision::dyn_initialRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_initialRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minRetriggerTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GrowUntilCollision::dyn_minRetriggerTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_minRetriggerTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minRetriggerTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightningDispatcherEvent colliderFound
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightningDispatcherEvent*& GlobalNamespace::GrowUntilCollision::dyn_colliderFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_colliderFound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderFound"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightningDispatcherEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GrowUntilCollision::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GrowUntilCollision::dyn_maxVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_maxVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxPitch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GrowUntilCollision::dyn_maxPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_maxPitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxPitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeSinceTrigger
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GrowUntilCollision::dyn_timeSinceTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::dyn_timeSinceTrigger");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeSinceTrigger"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GrowUntilCollision.Start
void GlobalNamespace::GrowUntilCollision::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GrowUntilCollision.zero
void GlobalNamespace::GrowUntilCollision::zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::zero");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "zero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GrowUntilCollision.OnTriggerEnter
void GlobalNamespace::GrowUntilCollision::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: GrowUntilCollision.OnTriggerExit
void GlobalNamespace::GrowUntilCollision::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: GrowUntilCollision.OnCollisionEnter
void GlobalNamespace::GrowUntilCollision::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: GrowUntilCollision.OnCollisionExit
void GlobalNamespace::GrowUntilCollision::OnCollisionExit(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::OnCollisionExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: GrowUntilCollision.tryToTrigger
void GlobalNamespace::GrowUntilCollision::tryToTrigger(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::tryToTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "tryToTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: GrowUntilCollision.Update
void GlobalNamespace::GrowUntilCollision::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrowUntilCollision::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LightningDispatcher
#include "GlobalNamespace/LightningDispatcher.hpp"
// Including type: LightningDispatcher/DispatchLightningEvent
#include "GlobalNamespace/LightningDispatcher_DispatchLightningEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private LightningDispatcher/DispatchLightningEvent RequestLightningStrike
::GlobalNamespace::LightningDispatcher::DispatchLightningEvent* GlobalNamespace::LightningDispatcher::_get_RequestLightningStrike() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::_get_RequestLightningStrike");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LightningDispatcher::DispatchLightningEvent*>("", "LightningDispatcher", "RequestLightningStrike"));
}
// Autogenerated static field setter
// Set static field: static private LightningDispatcher/DispatchLightningEvent RequestLightningStrike
void GlobalNamespace::LightningDispatcher::_set_RequestLightningStrike(::GlobalNamespace::LightningDispatcher::DispatchLightningEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::_set_RequestLightningStrike");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightningDispatcher", "RequestLightningStrike", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single beamWidthCM
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightningDispatcher::dyn_beamWidthCM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::dyn_beamWidthCM");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beamWidthCM"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single soundVolumeMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LightningDispatcher::dyn_soundVolumeMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::dyn_soundVolumeMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "soundVolumeMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightningDispatcher.add_RequestLightningStrike
void GlobalNamespace::LightningDispatcher::add_RequestLightningStrike(::GlobalNamespace::LightningDispatcher::DispatchLightningEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::add_RequestLightningStrike");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LightningDispatcher", "add_RequestLightningStrike", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: LightningDispatcher.remove_RequestLightningStrike
void GlobalNamespace::LightningDispatcher::remove_RequestLightningStrike(::GlobalNamespace::LightningDispatcher::DispatchLightningEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::remove_RequestLightningStrike");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LightningDispatcher", "remove_RequestLightningStrike", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: LightningDispatcher.DispatchLightning
void GlobalNamespace::LightningDispatcher::DispatchLightning(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::DispatchLightning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DispatchLightning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p1, p2);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightningDispatcher/DispatchLightningEvent
#include "GlobalNamespace/LightningDispatcher_DispatchLightningEvent.hpp"
// Including type: LightningStrike
#include "GlobalNamespace/LightningStrike.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightningDispatcher/DispatchLightningEvent.Invoke
::GlobalNamespace::LightningStrike* GlobalNamespace::LightningDispatcher::DispatchLightningEvent::Invoke(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::DispatchLightningEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LightningDispatcher::DispatchLightningEvent*), 13));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightningStrike*, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: LightningDispatcher/DispatchLightningEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::LightningDispatcher::DispatchLightningEvent::BeginInvoke(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::DispatchLightningEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LightningDispatcher::DispatchLightningEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, p1, p2, callback, object);
}
// Autogenerated method: LightningDispatcher/DispatchLightningEvent.EndInvoke
::GlobalNamespace::LightningStrike* GlobalNamespace::LightningDispatcher::DispatchLightningEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningDispatcher::DispatchLightningEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LightningDispatcher::DispatchLightningEvent*), 15));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightningStrike*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LightningDispatcherEvent
#include "GlobalNamespace/LightningDispatcherEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LightningGenerator
#include "GlobalNamespace/LightningGenerator.hpp"
// Including type: LightningStrike
#include "GlobalNamespace/LightningStrike.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.UInt32 maxConcurrentStrikes
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::LightningGenerator::dyn_maxConcurrentStrikes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningGenerator::dyn_maxConcurrentStrikes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxConcurrentStrikes"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightningStrike prototype
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightningStrike*& GlobalNamespace::LightningGenerator::dyn_prototype() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningGenerator::dyn_prototype");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prototype"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightningStrike**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightningStrike[] strikes
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightningStrike*>& GlobalNamespace::LightningGenerator::dyn_strikes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningGenerator::dyn_strikes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strikes"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::LightningStrike*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 index
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LightningGenerator::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningGenerator::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightningGenerator.Awake
void GlobalNamespace::LightningGenerator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningGenerator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningGenerator.OnEnable
void GlobalNamespace::LightningGenerator::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningGenerator::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningGenerator.OnDisable
void GlobalNamespace::LightningGenerator::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningGenerator::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningGenerator.LightningDispatcher_RequestLightningStrike
::GlobalNamespace::LightningStrike* GlobalNamespace::LightningGenerator::LightningDispatcher_RequestLightningStrike(::UnityEngine::Vector3 t1, ::UnityEngine::Vector3 t2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningGenerator::LightningDispatcher_RequestLightningStrike");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LightningDispatcher_RequestLightningStrike", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t1), ::il2cpp_utils::ExtractType(t2)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LightningStrike*, false>(this, ___internal__method, t1, t2);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LightningStrike
#include "GlobalNamespace/LightningStrike.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SRand rand
::GlobalNamespace::SRand GlobalNamespace::LightningStrike::_get_rand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::_get_rand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SRand>("", "LightningStrike", "rand"));
}
// Autogenerated static field setter
// Set static field: static private SRand rand
void GlobalNamespace::LightningStrike::_set_rand(::GlobalNamespace::SRand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::_set_rand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightningStrike", "rand", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem ps
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::LightningStrike::dyn_ps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::dyn_ps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ps"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/MainModule psMain
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& GlobalNamespace::LightningStrike::dyn_psMain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::dyn_psMain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "psMain"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MainModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/ShapeModule psShape
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::ShapeModule& GlobalNamespace::LightningStrike::dyn_psShape() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::dyn_psShape");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "psShape"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::ShapeModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/TrailModule psTrails
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::TrailModule& GlobalNamespace::LightningStrike::dyn_psTrails() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::dyn_psTrails");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "psTrails"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::TrailModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::LightningStrike::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LightningStrike.Initialize
void GlobalNamespace::LightningStrike::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightningStrike.Play
void GlobalNamespace::LightningStrike::Play(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, float beamWidthMultiplier, float audioVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(beamWidthMultiplier), ::il2cpp_utils::ExtractType(audioVolume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p1, p2, beamWidthMultiplier, audioVolume);
}
// Autogenerated method: LightningStrike..cctor
void GlobalNamespace::LightningStrike::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightningStrike::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LightningStrike", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RandomLocalColliders
#include "GlobalNamespace/RandomLocalColliders.hpp"
// Including type: LightningDispatcherEvent
#include "GlobalNamespace/LightningDispatcherEvent.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SRand rand
::GlobalNamespace::SRand GlobalNamespace::RandomLocalColliders::_get_rand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::_get_rand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SRand>("", "RandomLocalColliders", "rand"));
}
// Autogenerated static field setter
// Set static field: static private SRand rand
void GlobalNamespace::RandomLocalColliders::_set_rand(::GlobalNamespace::SRand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::_set_rand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RandomLocalColliders", "rand", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single minseekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomLocalColliders::dyn_minseekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::dyn_minseekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minseekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxseekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomLocalColliders::dyn_maxseekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::dyn_maxseekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxseekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minRadias
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomLocalColliders::dyn_minRadias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::dyn_minRadias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minRadias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxRadias
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomLocalColliders::dyn_maxRadias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::dyn_maxRadias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxRadias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightningDispatcherEvent colliderFound
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightningDispatcherEvent*& GlobalNamespace::RandomLocalColliders::dyn_colliderFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::dyn_colliderFound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderFound"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightningDispatcherEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Collider> colliders
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& GlobalNamespace::RandomLocalColliders::dyn_colliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::dyn_colliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliders"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Collider*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeSinceSeek
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomLocalColliders::dyn_timeSinceSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::dyn_timeSinceSeek");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeSinceSeek"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single seekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RandomLocalColliders::dyn_seekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::dyn_seekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RandomLocalColliders.Start
void GlobalNamespace::RandomLocalColliders::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomLocalColliders.Update
void GlobalNamespace::RandomLocalColliders::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomLocalColliders.seek
void GlobalNamespace::RandomLocalColliders::seek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::seek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomLocalColliders..cctor
void GlobalNamespace::RandomLocalColliders::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomLocalColliders::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RandomLocalColliders", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ReportForwardHit
#include "GlobalNamespace/ReportForwardHit.hpp"
// Including type: LightningDispatcherEvent
#include "GlobalNamespace/LightningDispatcherEvent.hpp"
// Including type: NetSynchrony.RandomDispatcher
#include "NetSynchrony/RandomDispatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SRand rand
::GlobalNamespace::SRand GlobalNamespace::ReportForwardHit::_get_rand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::_get_rand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SRand>("", "ReportForwardHit", "rand"));
}
// Autogenerated static field setter
// Set static field: static private SRand rand
void GlobalNamespace::ReportForwardHit::_set_rand(::GlobalNamespace::SRand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::_set_rand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ReportForwardHit", "rand", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single minseekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportForwardHit::dyn_minseekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::dyn_minseekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minseekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxseekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportForwardHit::dyn_maxseekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::dyn_maxseekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxseekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxRadias
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportForwardHit::dyn_maxRadias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::dyn_maxRadias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxRadias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightningDispatcherEvent colliderFound
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightningDispatcherEvent*& GlobalNamespace::ReportForwardHit::dyn_colliderFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::dyn_colliderFound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderFound"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightningDispatcherEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NetSynchrony.RandomDispatcher nsRand
[[deprecated("Use field access instead!")]] ::NetSynchrony::RandomDispatcher*& GlobalNamespace::ReportForwardHit::dyn_nsRand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::dyn_nsRand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nsRand"))->offset;
  return *reinterpret_cast<::NetSynchrony::RandomDispatcher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeSinceSeek
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportForwardHit::dyn_timeSinceSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::dyn_timeSinceSeek");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeSinceSeek"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single seekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportForwardHit::dyn_seekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::dyn_seekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean seekOnEnable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ReportForwardHit::dyn_seekOnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::dyn_seekOnEnable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seekOnEnable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ReportForwardHit.Start
void GlobalNamespace::ReportForwardHit::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportForwardHit.OnEnable
void GlobalNamespace::ReportForwardHit::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportForwardHit.OnDisable
void GlobalNamespace::ReportForwardHit::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportForwardHit.NsRand_Dispatch
void GlobalNamespace::ReportForwardHit::NsRand_Dispatch(::NetSynchrony::RandomDispatcher* randomDispatcher) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::NsRand_Dispatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NsRand_Dispatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(randomDispatcher)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, randomDispatcher);
}
// Autogenerated method: ReportForwardHit.Update
void GlobalNamespace::ReportForwardHit::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportForwardHit.seek
void GlobalNamespace::ReportForwardHit::seek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::seek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportForwardHit..cctor
void GlobalNamespace::ReportForwardHit::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportForwardHit::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ReportForwardHit", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ReportTargetHit
#include "GlobalNamespace/ReportTargetHit.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: LightningDispatcherEvent
#include "GlobalNamespace/LightningDispatcherEvent.hpp"
// Including type: NetSynchrony.RandomDispatcher
#include "NetSynchrony/RandomDispatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SRand rand
::GlobalNamespace::SRand GlobalNamespace::ReportTargetHit::_get_rand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::_get_rand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SRand>("", "ReportTargetHit", "rand"));
}
// Autogenerated static field setter
// Set static field: static private SRand rand
void GlobalNamespace::ReportTargetHit::_set_rand(::GlobalNamespace::SRand value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::_set_rand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ReportTargetHit", "rand", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single minseekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportTargetHit::dyn_minseekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::dyn_minseekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minseekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxseekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportTargetHit::dyn_maxseekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::dyn_maxseekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxseekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform[] targets
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::ReportTargetHit::dyn_targets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::dyn_targets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targets"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LightningDispatcherEvent colliderFound
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LightningDispatcherEvent*& GlobalNamespace::ReportTargetHit::dyn_colliderFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::dyn_colliderFound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliderFound"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LightningDispatcherEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeSinceSeek
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportTargetHit::dyn_timeSinceSeek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::dyn_timeSinceSeek");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeSinceSeek"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single seekFreq
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ReportTargetHit::dyn_seekFreq() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::dyn_seekFreq");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seekFreq"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private NetSynchrony.RandomDispatcher nsRand
[[deprecated("Use field access instead!")]] ::NetSynchrony::RandomDispatcher*& GlobalNamespace::ReportTargetHit::dyn_nsRand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::dyn_nsRand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nsRand"))->offset;
  return *reinterpret_cast<::NetSynchrony::RandomDispatcher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ReportTargetHit.Start
void GlobalNamespace::ReportTargetHit::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportTargetHit.OnEnable
void GlobalNamespace::ReportTargetHit::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportTargetHit.OnDisable
void GlobalNamespace::ReportTargetHit::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportTargetHit.NsRand_Dispatch
void GlobalNamespace::ReportTargetHit::NsRand_Dispatch(::NetSynchrony::RandomDispatcher* randomDispatcher) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::NsRand_Dispatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NsRand_Dispatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(randomDispatcher)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, randomDispatcher);
}
// Autogenerated method: ReportTargetHit.Update
void GlobalNamespace::ReportTargetHit::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportTargetHit.seek
void GlobalNamespace::ReportTargetHit::seek() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::seek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "seek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ReportTargetHit..cctor
void GlobalNamespace::ReportTargetHit::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReportTargetHit::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ReportTargetHit", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThrowableBug
#include "GlobalNamespace/ThrowableBug.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: ThrowableBugBeacon
#include "GlobalNamespace/ThrowableBugBeacon.hpp"
// Including type: ThrowableBugReliableState
#include "GlobalNamespace/ThrowableBugReliableState.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ThrowableBugReliableState reliableState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBugReliableState*& GlobalNamespace::ThrowableBug::dyn_reliableState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_reliableState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reliableState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThrowableBugReliableState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single slowingDownProgress
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_slowingDownProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_slowingDownProgress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slowingDownProgress"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single startingSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_startingSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_startingSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bobingSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_bobingSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_bobingSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bobingSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bobMagnintude
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_bobMagnintude() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_bobMagnintude");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bobMagnintude"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean shouldRandomizeFrequency
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ThrowableBug::dyn_shouldRandomizeFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_shouldRandomizeFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shouldRandomizeFrequency"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minRandFrequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_minRandFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_minRandFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minRandFrequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxRandFrequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_maxRandFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_maxRandFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxRandFrequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bobingFrequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_bobingFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_bobingFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bobingFrequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bobingState
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_bobingState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_bobingState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bobingState"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single thrownYVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_thrownYVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_thrownYVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thrownYVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single collisionHitRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_collisionHitRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_collisionHitRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionHitRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask collisionCheckMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::ThrowableBug::dyn_collisionCheckMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_collisionCheckMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionCheckMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 thrownVeloicity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ThrowableBug::dyn_thrownVeloicity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_thrownVeloicity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thrownVeloicity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 targetVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ThrowableBug::dyn_targetVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_targetVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion bugRotationalVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ThrowableBug::dyn_bugRotationalVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_bugRotationalVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bugRotationalVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit[] rayCastNonAllocColliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& GlobalNamespace::ThrowableBug::dyn_rayCastNonAllocColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_rayCastNonAllocColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rayCastNonAllocColliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RaycastHit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit[] rayCastNonAllocColliders2
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& GlobalNamespace::ThrowableBug::dyn_rayCastNonAllocColliders2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_rayCastNonAllocColliders2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rayCastNonAllocColliders2"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RaycastHit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig followingRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::ThrowableBug::dyn_followingRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_followingRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "followingRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isTooHighTravelingDown
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ThrowableBug::dyn_isTooHighTravelingDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_isTooHighTravelingDown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isTooHighTravelingDown"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single descentSlerp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_descentSlerp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_descentSlerp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "descentSlerp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single ascentSlerp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_ascentSlerp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_ascentSlerp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ascentSlerp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxNaturalSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_maxNaturalSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_maxNaturalSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxNaturalSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single slowdownAcceleration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_slowdownAcceleration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_slowdownAcceleration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slowdownAcceleration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maximumHeightOffOfTheGroundBeforeStartingDescent
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_maximumHeightOffOfTheGroundBeforeStartingDescent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_maximumHeightOffOfTheGroundBeforeStartingDescent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maximumHeightOffOfTheGroundBeforeStartingDescent"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minimumHeightOffOfTheGroundBeforeStoppingDescent
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_minimumHeightOffOfTheGroundBeforeStoppingDescent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_minimumHeightOffOfTheGroundBeforeStoppingDescent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minimumHeightOffOfTheGroundBeforeStoppingDescent"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single descentRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_descentRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_descentRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "descentRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single descentSlerpRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_descentSlerpRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_descentSlerpRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "descentSlerpRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minimumHeightOffOfTheGroundBeforeStartingAscent
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_minimumHeightOffOfTheGroundBeforeStartingAscent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_minimumHeightOffOfTheGroundBeforeStartingAscent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minimumHeightOffOfTheGroundBeforeStartingAscent"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maximumHeightOffOfTheGroundBeforeStoppingAscent
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_maximumHeightOffOfTheGroundBeforeStoppingAscent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_maximumHeightOffOfTheGroundBeforeStoppingAscent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maximumHeightOffOfTheGroundBeforeStoppingAscent"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single ascentRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_ascentRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_ascentRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ascentRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single ascentSlerpRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_ascentSlerpRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_ascentSlerpRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ascentSlerpRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isTooLowTravelingUp
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ThrowableBug::dyn_isTooLowTravelingUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_isTooLowTravelingUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isTooLowTravelingUp"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Animator animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& GlobalNamespace::ThrowableBug::dyn_animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip grabBugAudioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ThrowableBug::dyn_grabBugAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_grabBugAudioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabBugAudioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip releaseBugAudioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ThrowableBug::dyn_releaseBugAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_releaseBugAudioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "releaseBugAudioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip flyingBugAudioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::ThrowableBug::dyn_flyingBugAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_flyingBugAudioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flyingBugAudioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::ThrowableBug::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single bobbingDefaultFrequency
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_bobbingDefaultFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_bobbingDefaultFrequency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bobbingDefaultFrequency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 updateMultiplier
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ThrowableBug::dyn_updateMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_updateMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "updateMultiplier"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThrowableBug/AudioState currentAudioState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBug::AudioState& GlobalNamespace::ThrowableBug::dyn_currentAudioState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_currentAudioState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAudioState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThrowableBug::AudioState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single speedMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBug::dyn_speedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_speedMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speedMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThrowableBug/BugName bugName
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBug::BugName& GlobalNamespace::ThrowableBug::dyn_bugName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_bugName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bugName"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThrowableBug::BugName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform lockedTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::ThrowableBug::dyn_lockedTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_lockedTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lockedTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean locked
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ThrowableBug::dyn_locked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::dyn_locked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "locked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThrowableBug.isValid
bool GlobalNamespace::ThrowableBug::isValid(::GlobalNamespace::ThrowableBugBeacon* tbb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tbb)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, tbb);
}
// Autogenerated method: ThrowableBug.ThrowableBugBeacon_OnCall
void GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnCall(::GlobalNamespace::ThrowableBugBeacon* tbb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnCall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowableBugBeacon_OnCall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tbb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tbb);
}
// Autogenerated method: ThrowableBug.ThrowableBugBeacon_OnLock
void GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnLock(::GlobalNamespace::ThrowableBugBeacon* tbb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowableBugBeacon_OnLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tbb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tbb);
}
// Autogenerated method: ThrowableBug.ThrowableBugBeacon_OnDismiss
void GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnDismiss(::GlobalNamespace::ThrowableBugBeacon* tbb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnDismiss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowableBugBeacon_OnDismiss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tbb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tbb);
}
// Autogenerated method: ThrowableBug.ThrowableBugBeacon_OnUnlock
void GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnUnlock(::GlobalNamespace::ThrowableBugBeacon* tbb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnUnlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowableBugBeacon_OnUnlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tbb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tbb);
}
// Autogenerated method: ThrowableBug.ThrowableBugBeacon_OnChangeSpeedMultiplier
void GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnChangeSpeedMultiplier(::GlobalNamespace::ThrowableBugBeacon* tbb, float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::ThrowableBugBeacon_OnChangeSpeedMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowableBugBeacon_OnChangeSpeedMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tbb), ::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tbb, f);
}
// Autogenerated method: ThrowableBug.RandomizeBobingFrequency
float GlobalNamespace::ThrowableBug::RandomizeBobingFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::RandomizeBobingFrequency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RandomizeBobingFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBug.OnCollisionEnter
void GlobalNamespace::ThrowableBug::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: ThrowableBug.Update
void GlobalNamespace::ThrowableBug::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBug.Start
void GlobalNamespace::ThrowableBug::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBug.OnEnable
void GlobalNamespace::ThrowableBug::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBug.OnDisable
void GlobalNamespace::ThrowableBug::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBug.ShouldBeKinematic
bool GlobalNamespace::ThrowableBug::ShouldBeKinematic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::ShouldBeKinematic");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 80));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBug.LateUpdateShared
void GlobalNamespace::ThrowableBug::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBug.LateUpdateLocal
void GlobalNamespace::ThrowableBug::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBug.OnRelease
bool GlobalNamespace::ThrowableBug::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThrowableBug/BugName
#include "GlobalNamespace/ThrowableBug.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ThrowableBug/BugName NONE
::GlobalNamespace::ThrowableBug::BugName GlobalNamespace::ThrowableBug::BugName::_get_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::BugName::_get_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBug::BugName>("", "ThrowableBug/BugName", "NONE"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBug/BugName NONE
void GlobalNamespace::ThrowableBug::BugName::_set_NONE(::GlobalNamespace::ThrowableBug::BugName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::BugName::_set_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBug/BugName", "NONE", value));
}
// Autogenerated static field getter
// Get static field: static public ThrowableBug/BugName DougTheBug
::GlobalNamespace::ThrowableBug::BugName GlobalNamespace::ThrowableBug::BugName::_get_DougTheBug() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::BugName::_get_DougTheBug");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBug::BugName>("", "ThrowableBug/BugName", "DougTheBug"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBug/BugName DougTheBug
void GlobalNamespace::ThrowableBug::BugName::_set_DougTheBug(::GlobalNamespace::ThrowableBug::BugName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::BugName::_set_DougTheBug");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBug/BugName", "DougTheBug", value));
}
// Autogenerated static field getter
// Get static field: static public ThrowableBug/BugName MattTheBat
::GlobalNamespace::ThrowableBug::BugName GlobalNamespace::ThrowableBug::BugName::_get_MattTheBat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::BugName::_get_MattTheBat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBug::BugName>("", "ThrowableBug/BugName", "MattTheBat"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBug/BugName MattTheBat
void GlobalNamespace::ThrowableBug::BugName::_set_MattTheBat(::GlobalNamespace::ThrowableBug::BugName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::BugName::_set_MattTheBat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBug/BugName", "MattTheBat", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ThrowableBug::BugName::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::BugName::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThrowableBug/AudioState
#include "GlobalNamespace/ThrowableBug.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ThrowableBug/AudioState JustGrabbed
::GlobalNamespace::ThrowableBug::AudioState GlobalNamespace::ThrowableBug::AudioState::_get_JustGrabbed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::_get_JustGrabbed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBug::AudioState>("", "ThrowableBug/AudioState", "JustGrabbed"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBug/AudioState JustGrabbed
void GlobalNamespace::ThrowableBug::AudioState::_set_JustGrabbed(::GlobalNamespace::ThrowableBug::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::_set_JustGrabbed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBug/AudioState", "JustGrabbed", value));
}
// Autogenerated static field getter
// Get static field: static public ThrowableBug/AudioState ContinuallyGrabbed
::GlobalNamespace::ThrowableBug::AudioState GlobalNamespace::ThrowableBug::AudioState::_get_ContinuallyGrabbed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::_get_ContinuallyGrabbed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBug::AudioState>("", "ThrowableBug/AudioState", "ContinuallyGrabbed"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBug/AudioState ContinuallyGrabbed
void GlobalNamespace::ThrowableBug::AudioState::_set_ContinuallyGrabbed(::GlobalNamespace::ThrowableBug::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::_set_ContinuallyGrabbed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBug/AudioState", "ContinuallyGrabbed", value));
}
// Autogenerated static field getter
// Get static field: static public ThrowableBug/AudioState JustReleased
::GlobalNamespace::ThrowableBug::AudioState GlobalNamespace::ThrowableBug::AudioState::_get_JustReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::_get_JustReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBug::AudioState>("", "ThrowableBug/AudioState", "JustReleased"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBug/AudioState JustReleased
void GlobalNamespace::ThrowableBug::AudioState::_set_JustReleased(::GlobalNamespace::ThrowableBug::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::_set_JustReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBug/AudioState", "JustReleased", value));
}
// Autogenerated static field getter
// Get static field: static public ThrowableBug/AudioState NotHeld
::GlobalNamespace::ThrowableBug::AudioState GlobalNamespace::ThrowableBug::AudioState::_get_NotHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::_get_NotHeld");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBug::AudioState>("", "ThrowableBug/AudioState", "NotHeld"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBug/AudioState NotHeld
void GlobalNamespace::ThrowableBug::AudioState::_set_NotHeld(::GlobalNamespace::ThrowableBug::AudioState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::_set_NotHeld");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBug/AudioState", "NotHeld", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ThrowableBug::AudioState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBug::AudioState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThrowableBugBeacon
#include "GlobalNamespace/ThrowableBugBeacon.hpp"
// Including type: ThrowableBugBeacon/ThrowableBugBeaconEvent
#include "GlobalNamespace/ThrowableBugBeacon_ThrowableBugBeaconEvent.hpp"
// Including type: ThrowableBugBeacon/ThrowableBugBeaconFloatEvent
#include "GlobalNamespace/ThrowableBugBeacon_ThrowableBugBeaconFloatEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnCall
::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* GlobalNamespace::ThrowableBugBeacon::_get_OnCall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_get_OnCall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*>("", "ThrowableBugBeacon", "OnCall"));
}
// Autogenerated static field setter
// Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnCall
void GlobalNamespace::ThrowableBugBeacon::_set_OnCall(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_set_OnCall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBugBeacon", "OnCall", value));
}
// Autogenerated static field getter
// Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnDismiss
::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* GlobalNamespace::ThrowableBugBeacon::_get_OnDismiss() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_get_OnDismiss");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*>("", "ThrowableBugBeacon", "OnDismiss"));
}
// Autogenerated static field setter
// Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnDismiss
void GlobalNamespace::ThrowableBugBeacon::_set_OnDismiss(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_set_OnDismiss");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBugBeacon", "OnDismiss", value));
}
// Autogenerated static field getter
// Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnLock
::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* GlobalNamespace::ThrowableBugBeacon::_get_OnLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_get_OnLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*>("", "ThrowableBugBeacon", "OnLock"));
}
// Autogenerated static field setter
// Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnLock
void GlobalNamespace::ThrowableBugBeacon::_set_OnLock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_set_OnLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBugBeacon", "OnLock", value));
}
// Autogenerated static field getter
// Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnUnlock
::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* GlobalNamespace::ThrowableBugBeacon::_get_OnUnlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_get_OnUnlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*>("", "ThrowableBugBeacon", "OnUnlock"));
}
// Autogenerated static field setter
// Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconEvent OnUnlock
void GlobalNamespace::ThrowableBugBeacon::_set_OnUnlock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_set_OnUnlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBugBeacon", "OnUnlock", value));
}
// Autogenerated static field getter
// Get static field: static private ThrowableBugBeacon/ThrowableBugBeaconFloatEvent OnChangeSpeedMultiplier
::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent* GlobalNamespace::ThrowableBugBeacon::_get_OnChangeSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_get_OnChangeSpeedMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent*>("", "ThrowableBugBeacon", "OnChangeSpeedMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private ThrowableBugBeacon/ThrowableBugBeaconFloatEvent OnChangeSpeedMultiplier
void GlobalNamespace::ThrowableBugBeacon::_set_OnChangeSpeedMultiplier(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::_set_OnChangeSpeedMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBugBeacon", "OnChangeSpeedMultiplier", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Single range
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBugBeacon::dyn_range() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::dyn_range");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "range"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThrowableBug/BugName bugName
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBug::BugName& GlobalNamespace::ThrowableBugBeacon::dyn_bugName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::dyn_bugName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bugName"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThrowableBug::BugName*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThrowableBugBeacon.add_OnCall
void GlobalNamespace::ThrowableBugBeacon::add_OnCall(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::add_OnCall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "add_OnCall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.remove_OnCall
void GlobalNamespace::ThrowableBugBeacon::remove_OnCall(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::remove_OnCall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "remove_OnCall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.add_OnDismiss
void GlobalNamespace::ThrowableBugBeacon::add_OnDismiss(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::add_OnDismiss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "add_OnDismiss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.remove_OnDismiss
void GlobalNamespace::ThrowableBugBeacon::remove_OnDismiss(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::remove_OnDismiss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "remove_OnDismiss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.add_OnLock
void GlobalNamespace::ThrowableBugBeacon::add_OnLock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::add_OnLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "add_OnLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.remove_OnLock
void GlobalNamespace::ThrowableBugBeacon::remove_OnLock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::remove_OnLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "remove_OnLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.add_OnUnlock
void GlobalNamespace::ThrowableBugBeacon::add_OnUnlock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::add_OnUnlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "add_OnUnlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.remove_OnUnlock
void GlobalNamespace::ThrowableBugBeacon::remove_OnUnlock(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::remove_OnUnlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "remove_OnUnlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.add_OnChangeSpeedMultiplier
void GlobalNamespace::ThrowableBugBeacon::add_OnChangeSpeedMultiplier(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::add_OnChangeSpeedMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "add_OnChangeSpeedMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.remove_OnChangeSpeedMultiplier
void GlobalNamespace::ThrowableBugBeacon::remove_OnChangeSpeedMultiplier(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::remove_OnChangeSpeedMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ThrowableBugBeacon", "remove_OnChangeSpeedMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: ThrowableBugBeacon.get_BugName
::GlobalNamespace::ThrowableBug::BugName GlobalNamespace::ThrowableBugBeacon::get_BugName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::get_BugName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BugName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ThrowableBug::BugName, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeacon.get_Range
float GlobalNamespace::ThrowableBugBeacon::get_Range() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::get_Range");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Range", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeacon.Call
void GlobalNamespace::ThrowableBugBeacon::Call() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::Call");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Call", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeacon.Dismiss
void GlobalNamespace::ThrowableBugBeacon::Dismiss() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::Dismiss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dismiss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeacon.Lock
void GlobalNamespace::ThrowableBugBeacon::Lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::Lock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Lock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeacon.Unlock
void GlobalNamespace::ThrowableBugBeacon::Unlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::Unlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeacon.ChangeSpeedMultiplier
void GlobalNamespace::ThrowableBugBeacon::ChangeSpeedMultiplier(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::ChangeSpeedMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeSpeedMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, f);
}
// Autogenerated method: ThrowableBugBeacon.OnDisable
void GlobalNamespace::ThrowableBugBeacon::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ThrowableBugBeacon/ThrowableBugBeaconEvent
#include "GlobalNamespace/ThrowableBugBeacon_ThrowableBugBeaconEvent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ThrowableBugBeacon/ThrowableBugBeaconEvent.Invoke
void GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent::Invoke(::GlobalNamespace::ThrowableBugBeacon* tbb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tbb);
}
// Autogenerated method: ThrowableBugBeacon/ThrowableBugBeaconEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent::BeginInvoke(::GlobalNamespace::ThrowableBugBeacon* tbb, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, tbb, callback, object);
}
// Autogenerated method: ThrowableBugBeacon/ThrowableBugBeaconEvent.EndInvoke
void GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconEvent*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ThrowableBugBeacon/ThrowableBugBeaconFloatEvent
#include "GlobalNamespace/ThrowableBugBeacon_ThrowableBugBeaconFloatEvent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ThrowableBugBeacon/ThrowableBugBeaconFloatEvent.Invoke
void GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent::Invoke(::GlobalNamespace::ThrowableBugBeacon* tbb, float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tbb, f);
}
// Autogenerated method: ThrowableBugBeacon/ThrowableBugBeaconFloatEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent::BeginInvoke(::GlobalNamespace::ThrowableBugBeacon* tbb, float f, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, tbb, f, callback, object);
}
// Autogenerated method: ThrowableBugBeacon/ThrowableBugBeaconFloatEvent.EndInvoke
void GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeacon::ThrowableBugBeaconFloatEvent*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThrowableBugBeaconActivation
#include "GlobalNamespace/ThrowableBugBeaconActivation.hpp"
// Including type: ThrowableBugBeacon
#include "GlobalNamespace/ThrowableBugBeacon.hpp"
// Including type: ThrowableBugBeaconActivation/<SendSignals>d__9
#include "GlobalNamespace/ThrowableBugBeaconActivation_-SendSignals-d__9.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single minCallTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBugBeaconActivation::dyn_minCallTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::dyn_minCallTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minCallTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxCallTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableBugBeaconActivation::dyn_maxCallTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::dyn_maxCallTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxCallTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 signalCount
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::ThrowableBugBeaconActivation::dyn_signalCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::dyn_signalCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "signalCount"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThrowableBugBeaconActivation/ActivationMode mode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode& GlobalNamespace::ThrowableBugBeaconActivation::dyn_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::dyn_mode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ThrowableBugBeacon tbb
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBugBeacon*& GlobalNamespace::ThrowableBugBeaconActivation::dyn_tbb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::dyn_tbb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tbb"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThrowableBugBeacon**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThrowableBugBeaconActivation.Awake
void GlobalNamespace::ThrowableBugBeaconActivation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeaconActivation.OnEnable
void GlobalNamespace::ThrowableBugBeaconActivation::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeaconActivation.OnDisable
void GlobalNamespace::ThrowableBugBeaconActivation::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeaconActivation.SendSignals
::System::Collections::IEnumerator* GlobalNamespace::ThrowableBugBeaconActivation::SendSignals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::SendSignals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendSignals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThrowableBugBeaconActivation/ActivationMode
#include "GlobalNamespace/ThrowableBugBeaconActivation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ThrowableBugBeaconActivation/ActivationMode CALL
::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_get_CALL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_get_CALL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode>("", "ThrowableBugBeaconActivation/ActivationMode", "CALL"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBugBeaconActivation/ActivationMode CALL
void GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_set_CALL(::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_set_CALL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBugBeaconActivation/ActivationMode", "CALL", value));
}
// Autogenerated static field getter
// Get static field: static public ThrowableBugBeaconActivation/ActivationMode DISMISS
::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_get_DISMISS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_get_DISMISS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode>("", "ThrowableBugBeaconActivation/ActivationMode", "DISMISS"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBugBeaconActivation/ActivationMode DISMISS
void GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_set_DISMISS(::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_set_DISMISS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBugBeaconActivation/ActivationMode", "DISMISS", value));
}
// Autogenerated static field getter
// Get static field: static public ThrowableBugBeaconActivation/ActivationMode LOCK
::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_get_LOCK() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_get_LOCK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode>("", "ThrowableBugBeaconActivation/ActivationMode", "LOCK"));
}
// Autogenerated static field setter
// Set static field: static public ThrowableBugBeaconActivation/ActivationMode LOCK
void GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_set_LOCK(::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::_set_LOCK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ThrowableBugBeaconActivation/ActivationMode", "LOCK", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ThrowableBugBeaconActivation/<SendSignals>d__9
#include "GlobalNamespace/ThrowableBugBeaconActivation_-SendSignals-d__9.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ThrowableBugBeaconActivation <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBugBeaconActivation*& GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThrowableBugBeaconActivation**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 <count>5__2
[[deprecated("Use field access instead!")]] uint& GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::dyn_$count$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::dyn_$count$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<count>5__2"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThrowableBugBeaconActivation/<SendSignals>d__9.System.IDisposable.Dispose
void GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeaconActivation/<SendSignals>d__9.MoveNext
bool GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeaconActivation/<SendSignals>d__9.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeaconActivation/<SendSignals>d__9.System.Collections.IEnumerator.Reset
void GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugBeaconActivation/<SendSignals>d__9.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThrowableBugReliableState
#include "GlobalNamespace/ThrowableBugReliableState.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 travelingDirection
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ThrowableBugReliableState::dyn_travelingDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugReliableState::dyn_travelingDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "travelingDirection"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThrowableBugReliableState.OnPhotonSerializeView
void GlobalNamespace::ThrowableBugReliableState::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugReliableState::OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugReliableState*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: ThrowableBugReliableState.OnOwnershipTransferred
void GlobalNamespace::ThrowableBugReliableState::OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugReliableState::OnOwnershipTransferred");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugReliableState*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toPlayer, fromPlayer);
}
// Autogenerated method: ThrowableBugReliableState.OnOwnershipRequest
bool GlobalNamespace::ThrowableBugReliableState::OnOwnershipRequest(::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugReliableState::OnOwnershipRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugReliableState*), 5));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer);
}
// Autogenerated method: ThrowableBugReliableState.OnMyOwnerLeft
void GlobalNamespace::ThrowableBugReliableState::OnMyOwnerLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugReliableState::OnMyOwnerLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugReliableState*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableBugReliableState.OnMasterClientAssistedTakeoverRequest
bool GlobalNamespace::ThrowableBugReliableState::OnMasterClientAssistedTakeoverRequest(::Photon::Realtime::Player* fromPlayer, ::Photon::Realtime::Player* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugReliableState::OnMasterClientAssistedTakeoverRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugReliableState*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer, toPlayer);
}
// Autogenerated method: ThrowableBugReliableState.OnMyCreatorLeft
void GlobalNamespace::ThrowableBugReliableState::OnMyCreatorLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugReliableState::OnMyCreatorLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableBugReliableState*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ThrowableSetDressing
#include "GlobalNamespace/ThrowableSetDressing.hpp"
// Including type: ThrowableSetDressing/<RespawnTimerCoroutine>d__19
#include "GlobalNamespace/ThrowableSetDressing_-RespawnTimerCoroutine-d__19.hpp"
// Including type: MagicIngredientType
#include "GlobalNamespace/MagicIngredientType.hpp"
// Including type: UnityEngine.CapsuleCollider
#include "UnityEngine/CapsuleCollider.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single respawnTimerDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableSetDressing::dyn_respawnTimerDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::dyn_respawnTimerDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "respawnTimerDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <inInitialPose>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ThrowableSetDressing::dyn_$inInitialPose$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::dyn_$inInitialPose$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<inInitialPose>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public MagicIngredientType IngredientTypeSO
[[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicIngredientType*& GlobalNamespace::ThrowableSetDressing::dyn_IngredientTypeSO() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::dyn_IngredientTypeSO");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IngredientTypeSO"))->offset;
  return *reinterpret_cast<::GlobalNamespace::MagicIngredientType**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _respawnTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableSetDressing::dyn__respawnTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::dyn__respawnTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_respawnTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CapsuleCollider capsuleCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& GlobalNamespace::ThrowableSetDressing::dyn_capsuleCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::dyn_capsuleCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "capsuleCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::CapsuleCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 respawnAtPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ThrowableSetDressing::dyn_respawnAtPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::dyn_respawnAtPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "respawnAtPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion respawnAtRot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ThrowableSetDressing::dyn_respawnAtRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::dyn_respawnAtRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "respawnAtRot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine respawnTimer
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& GlobalNamespace::ThrowableSetDressing::dyn_respawnTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::dyn_respawnTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "respawnTimer"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThrowableSetDressing.get_inInitialPose
bool GlobalNamespace::ThrowableSetDressing::get_inInitialPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::get_inInitialPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inInitialPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing.set_inInitialPose
void GlobalNamespace::ThrowableSetDressing::set_inInitialPose(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::set_inInitialPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_inInitialPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ThrowableSetDressing.StopRespawnTimer
void GlobalNamespace::ThrowableSetDressing::StopRespawnTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::StopRespawnTimer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopRespawnTimer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing.SetWillTeleport
void GlobalNamespace::ThrowableSetDressing::SetWillTeleport() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::SetWillTeleport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWillTeleport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing.StartRespawnTimer
void GlobalNamespace::ThrowableSetDressing::StartRespawnTimer(float overrideTimer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::StartRespawnTimer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartRespawnTimer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overrideTimer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, overrideTimer);
}
// Autogenerated method: ThrowableSetDressing.RespawnTimerCoroutine
::System::Collections::IEnumerator* GlobalNamespace::ThrowableSetDressing::RespawnTimerCoroutine(float timerDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::RespawnTimerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RespawnTimerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timerDuration)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, timerDuration);
}
// Autogenerated method: ThrowableSetDressing.ShouldBeKinematic
bool GlobalNamespace::ThrowableSetDressing::ShouldBeKinematic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::ShouldBeKinematic");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 80));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing.Start
void GlobalNamespace::ThrowableSetDressing::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing.OnGrab
void GlobalNamespace::ThrowableSetDressing::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: ThrowableSetDressing.OnRelease
bool GlobalNamespace::ThrowableSetDressing::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: ThrowableSetDressing.DropItem
void GlobalNamespace::ThrowableSetDressing::DropItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::DropItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 85));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ThrowableSetDressing/<RespawnTimerCoroutine>d__19
#include "GlobalNamespace/ThrowableSetDressing_-RespawnTimerCoroutine-d__19.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single timerDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::dyn_timerDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::dyn_timerDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timerDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ThrowableSetDressing <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableSetDressing*& GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ThrowableSetDressing**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ThrowableSetDressing/<RespawnTimerCoroutine>d__19.System.IDisposable.Dispose
void GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing/<RespawnTimerCoroutine>d__19.MoveNext
bool GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing/<RespawnTimerCoroutine>d__19.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing/<RespawnTimerCoroutine>d__19.System.Collections.IEnumerator.Reset
void GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThrowableSetDressing/<RespawnTimerCoroutine>d__19.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ThrowableSetDressing::$RespawnTimerCoroutine$d__19*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTShaderTransparencyMode
#include "GlobalNamespace/GTShaderTransparencyMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTShaderTransparencyMode Opaque
::GlobalNamespace::GTShaderTransparencyMode GlobalNamespace::GTShaderTransparencyMode::_get_Opaque() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_get_Opaque");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderTransparencyMode>("", "GTShaderTransparencyMode", "Opaque"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderTransparencyMode Opaque
void GlobalNamespace::GTShaderTransparencyMode::_set_Opaque(::GlobalNamespace::GTShaderTransparencyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_set_Opaque");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderTransparencyMode", "Opaque", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderTransparencyMode AlphaTest
::GlobalNamespace::GTShaderTransparencyMode GlobalNamespace::GTShaderTransparencyMode::_get_AlphaTest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_get_AlphaTest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderTransparencyMode>("", "GTShaderTransparencyMode", "AlphaTest"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderTransparencyMode AlphaTest
void GlobalNamespace::GTShaderTransparencyMode::_set_AlphaTest(::GlobalNamespace::GTShaderTransparencyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_set_AlphaTest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderTransparencyMode", "AlphaTest", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderTransparencyMode Transparent
::GlobalNamespace::GTShaderTransparencyMode GlobalNamespace::GTShaderTransparencyMode::_get_Transparent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_get_Transparent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderTransparencyMode>("", "GTShaderTransparencyMode", "Transparent"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderTransparencyMode Transparent
void GlobalNamespace::GTShaderTransparencyMode::_set_Transparent(::GlobalNamespace::GTShaderTransparencyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_set_Transparent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderTransparencyMode", "Transparent", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderTransparencyMode Premultiplied
::GlobalNamespace::GTShaderTransparencyMode GlobalNamespace::GTShaderTransparencyMode::_get_Premultiplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_get_Premultiplied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderTransparencyMode>("", "GTShaderTransparencyMode", "Premultiplied"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderTransparencyMode Premultiplied
void GlobalNamespace::GTShaderTransparencyMode::_set_Premultiplied(::GlobalNamespace::GTShaderTransparencyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_set_Premultiplied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderTransparencyMode", "Premultiplied", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderTransparencyMode Add
::GlobalNamespace::GTShaderTransparencyMode GlobalNamespace::GTShaderTransparencyMode::_get_Add() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_get_Add");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderTransparencyMode>("", "GTShaderTransparencyMode", "Add"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderTransparencyMode Add
void GlobalNamespace::GTShaderTransparencyMode::_set_Add(::GlobalNamespace::GTShaderTransparencyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_set_Add");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderTransparencyMode", "Add", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderTransparencyMode Multiply
::GlobalNamespace::GTShaderTransparencyMode GlobalNamespace::GTShaderTransparencyMode::_get_Multiply() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_get_Multiply");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderTransparencyMode>("", "GTShaderTransparencyMode", "Multiply"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderTransparencyMode Multiply
void GlobalNamespace::GTShaderTransparencyMode::_set_Multiply(::GlobalNamespace::GTShaderTransparencyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_set_Multiply");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderTransparencyMode", "Multiply", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderTransparencyMode DitherBlueLive
::GlobalNamespace::GTShaderTransparencyMode GlobalNamespace::GTShaderTransparencyMode::_get_DitherBlueLive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_get_DitherBlueLive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderTransparencyMode>("", "GTShaderTransparencyMode", "DitherBlueLive"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderTransparencyMode DitherBlueLive
void GlobalNamespace::GTShaderTransparencyMode::_set_DitherBlueLive(::GlobalNamespace::GTShaderTransparencyMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::_set_DitherBlueLive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderTransparencyMode", "DitherBlueLive", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTShaderTransparencyMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderTransparencyMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTBlendMode
#include "GlobalNamespace/GTBlendMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTBlendMode Normal
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode Normal
void GlobalNamespace::GTBlendMode::_set_Normal(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode Darken
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_Darken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_Darken");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "Darken"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode Darken
void GlobalNamespace::GTBlendMode::_set_Darken(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_Darken");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "Darken", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode Multiply
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_Multiply() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_Multiply");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "Multiply"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode Multiply
void GlobalNamespace::GTBlendMode::_set_Multiply(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_Multiply");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "Multiply", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode ColorBurn
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_ColorBurn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_ColorBurn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "ColorBurn"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode ColorBurn
void GlobalNamespace::GTBlendMode::_set_ColorBurn(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_ColorBurn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "ColorBurn", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode LinearBurn
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_LinearBurn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_LinearBurn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "LinearBurn"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode LinearBurn
void GlobalNamespace::GTBlendMode::_set_LinearBurn(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_LinearBurn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "LinearBurn", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode Lighten
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_Lighten() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_Lighten");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "Lighten"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode Lighten
void GlobalNamespace::GTBlendMode::_set_Lighten(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_Lighten");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "Lighten", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode Screen
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_Screen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_Screen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "Screen"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode Screen
void GlobalNamespace::GTBlendMode::_set_Screen(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_Screen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "Screen", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode ColorDodge
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_ColorDodge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_ColorDodge");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "ColorDodge"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode ColorDodge
void GlobalNamespace::GTBlendMode::_set_ColorDodge(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_ColorDodge");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "ColorDodge", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode LinearDodge
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_LinearDodge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_LinearDodge");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "LinearDodge"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode LinearDodge
void GlobalNamespace::GTBlendMode::_set_LinearDodge(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_LinearDodge");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "LinearDodge", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode Overlay
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_Overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_Overlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "Overlay"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode Overlay
void GlobalNamespace::GTBlendMode::_set_Overlay(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_Overlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "Overlay", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode SoftLight
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_SoftLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_SoftLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "SoftLight"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode SoftLight
void GlobalNamespace::GTBlendMode::_set_SoftLight(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_SoftLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "SoftLight", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode HardLight
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_HardLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_HardLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "HardLight"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode HardLight
void GlobalNamespace::GTBlendMode::_set_HardLight(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_HardLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "HardLight", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode VividLight
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_VividLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_VividLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "VividLight"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode VividLight
void GlobalNamespace::GTBlendMode::_set_VividLight(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_VividLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "VividLight", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode LinearLight
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_LinearLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_LinearLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "LinearLight"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode LinearLight
void GlobalNamespace::GTBlendMode::_set_LinearLight(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_LinearLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "LinearLight", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode PinLight
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_PinLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_PinLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "PinLight"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode PinLight
void GlobalNamespace::GTBlendMode::_set_PinLight(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_PinLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "PinLight", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode Difference
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_Difference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_Difference");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "Difference"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode Difference
void GlobalNamespace::GTBlendMode::_set_Difference(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_Difference");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "Difference", value));
}
// Autogenerated static field getter
// Get static field: static public GTBlendMode Exclusion
::GlobalNamespace::GTBlendMode GlobalNamespace::GTBlendMode::_get_Exclusion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_get_Exclusion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTBlendMode>("", "GTBlendMode", "Exclusion"));
}
// Autogenerated static field setter
// Set static field: static public GTBlendMode Exclusion
void GlobalNamespace::GTBlendMode::_set_Exclusion(::GlobalNamespace::GTBlendMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::_set_Exclusion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTBlendMode", "Exclusion", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTBlendMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTBlendMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTShaderLightingType
#include "GlobalNamespace/GTShaderLightingType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTShaderLightingType Unlit
::GlobalNamespace::GTShaderLightingType GlobalNamespace::GTShaderLightingType::_get_Unlit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderLightingType::_get_Unlit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderLightingType>("", "GTShaderLightingType", "Unlit"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderLightingType Unlit
void GlobalNamespace::GTShaderLightingType::_set_Unlit(::GlobalNamespace::GTShaderLightingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderLightingType::_set_Unlit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderLightingType", "Unlit", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderLightingType Lightmapped
::GlobalNamespace::GTShaderLightingType GlobalNamespace::GTShaderLightingType::_get_Lightmapped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderLightingType::_get_Lightmapped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderLightingType>("", "GTShaderLightingType", "Lightmapped"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderLightingType Lightmapped
void GlobalNamespace::GTShaderLightingType::_set_Lightmapped(::GlobalNamespace::GTShaderLightingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderLightingType::_set_Lightmapped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderLightingType", "Lightmapped", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderLightingType Specular
::GlobalNamespace::GTShaderLightingType GlobalNamespace::GTShaderLightingType::_get_Specular() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderLightingType::_get_Specular");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderLightingType>("", "GTShaderLightingType", "Specular"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderLightingType Specular
void GlobalNamespace::GTShaderLightingType::_set_Specular(::GlobalNamespace::GTShaderLightingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderLightingType::_set_Specular");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderLightingType", "Specular", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTShaderLightingType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderLightingType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTShaderColorSource
#include "GlobalNamespace/GTShaderColorSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTShaderColorSource Color
::GlobalNamespace::GTShaderColorSource GlobalNamespace::GTShaderColorSource::_get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderColorSource::_get_Color");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderColorSource>("", "GTShaderColorSource", "Color"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderColorSource Color
void GlobalNamespace::GTShaderColorSource::_set_Color(::GlobalNamespace::GTShaderColorSource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderColorSource::_set_Color");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderColorSource", "Color", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderColorSource Texture
::GlobalNamespace::GTShaderColorSource GlobalNamespace::GTShaderColorSource::_get_Texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderColorSource::_get_Texture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderColorSource>("", "GTShaderColorSource", "Texture"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderColorSource Texture
void GlobalNamespace::GTShaderColorSource::_set_Texture(::GlobalNamespace::GTShaderColorSource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderColorSource::_set_Texture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderColorSource", "Texture", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderColorSource TextureAsMask
::GlobalNamespace::GTShaderColorSource GlobalNamespace::GTShaderColorSource::_get_TextureAsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderColorSource::_get_TextureAsMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderColorSource>("", "GTShaderColorSource", "TextureAsMask"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderColorSource TextureAsMask
void GlobalNamespace::GTShaderColorSource::_set_TextureAsMask(::GlobalNamespace::GTShaderColorSource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderColorSource::_set_TextureAsMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderColorSource", "TextureAsMask", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTShaderColorSource::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderColorSource::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GTShaderUVSource
#include "GlobalNamespace/GTShaderUVSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GTShaderUVSource UV0
::GlobalNamespace::GTShaderUVSource GlobalNamespace::GTShaderUVSource::_get_UV0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderUVSource::_get_UV0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderUVSource>("", "GTShaderUVSource", "UV0"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderUVSource UV0
void GlobalNamespace::GTShaderUVSource::_set_UV0(::GlobalNamespace::GTShaderUVSource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderUVSource::_set_UV0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderUVSource", "UV0", value));
}
// Autogenerated static field getter
// Get static field: static public GTShaderUVSource WorldPlanarY
::GlobalNamespace::GTShaderUVSource GlobalNamespace::GTShaderUVSource::_get_WorldPlanarY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderUVSource::_get_WorldPlanarY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GTShaderUVSource>("", "GTShaderUVSource", "WorldPlanarY"));
}
// Autogenerated static field setter
// Set static field: static public GTShaderUVSource WorldPlanarY
void GlobalNamespace::GTShaderUVSource::_set_WorldPlanarY(::GlobalNamespace::GTShaderUVSource value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderUVSource::_set_WorldPlanarY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GTShaderUVSource", "WorldPlanarY", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GTShaderUVSource::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GTShaderUVSource::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MaterialMapping
#include "GlobalNamespace/MaterialMapping.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String path
::StringW GlobalNamespace::MaterialMapping::_get_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::_get_path");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "MaterialMapping", "path"));
}
// Autogenerated static field setter
// Set static field: static private System.String path
void GlobalNamespace::MaterialMapping::_set_path(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::_set_path");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MaterialMapping", "path", value));
}
// Autogenerated static field getter
// Get static field: static public System.String materialDirectory
::StringW GlobalNamespace::MaterialMapping::_get_materialDirectory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::_get_materialDirectory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("", "MaterialMapping", "materialDirectory"));
}
// Autogenerated static field setter
// Set static field: static public System.String materialDirectory
void GlobalNamespace::MaterialMapping::_set_materialDirectory(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::_set_materialDirectory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MaterialMapping", "materialDirectory", value));
}
// Autogenerated static field getter
// Get static field: static private MaterialMapping instance
::GlobalNamespace::MaterialMapping* GlobalNamespace::MaterialMapping::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::MaterialMapping*>("", "MaterialMapping", "instance"));
}
// Autogenerated static field setter
// Set static field: static private MaterialMapping instance
void GlobalNamespace::MaterialMapping::_set_instance(::GlobalNamespace::MaterialMapping* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MaterialMapping", "instance", value));
}
// Autogenerated instance field getter
// Get instance field: public ShaderGroup[] map
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ShaderGroup>& GlobalNamespace::MaterialMapping::dyn_map() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::dyn_map");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "map"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ShaderGroup>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material mirrorMat
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::MaterialMapping::dyn_mirrorMat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::dyn_mirrorMat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mirrorMat"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.RenderTexture mirrorTexture
[[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& GlobalNamespace::MaterialMapping::dyn_mirrorTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::dyn_mirrorTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mirrorTexture"))->offset;
  return *reinterpret_cast<::UnityEngine::RenderTexture**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MaterialMapping.CleanUpData
void GlobalNamespace::MaterialMapping::CleanUpData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::CleanUpData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanUpData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MaterialMapping..cctor
void GlobalNamespace::MaterialMapping::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialMapping::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MaterialMapping", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ShaderGroup
#include "GlobalNamespace/ShaderGroup.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::ShaderGroup::dyn_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderGroup::dyn_material");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Shader originalShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::ShaderGroup::dyn_originalShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderGroup::dyn_originalShader");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Shader gameplayShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::ShaderGroup::dyn_gameplayShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderGroup::dyn_gameplayShader");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameplayShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Shader bakingShader
[[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& GlobalNamespace::ShaderGroup::dyn_bakingShader() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShaderGroup::dyn_bakingShader");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bakingShader"))->offset;
  return *reinterpret_cast<::UnityEngine::Shader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ShaderGroup..ctor
// ABORTED elsewhere.  GlobalNamespace::ShaderGroup::ShaderGroup(::UnityEngine::Material* material, ::UnityEngine::Shader* original, ::UnityEngine::Shader* gameplay, ::UnityEngine::Shader* baking)
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VoiceLoudnessReactor
#include "GlobalNamespace/VoiceLoudnessReactor.hpp"
// Including type: GorillaSpeakerLoudness
#include "GlobalNamespace/GorillaSpeakerLoudness.hpp"
// Including type: VoiceLoudnessReactorBlendShapeTarget
#include "GlobalNamespace/VoiceLoudnessReactorBlendShapeTarget.hpp"
// Including type: VoiceLoudnessReactorTransformTarget
#include "GlobalNamespace/VoiceLoudnessReactorTransformTarget.hpp"
// Including type: VoiceLoudnessReactorTransformRotationTarget
#include "GlobalNamespace/VoiceLoudnessReactorTransformRotationTarget.hpp"
// Including type: VoiceLoudnessReactorParticleSystemTarget
#include "GlobalNamespace/VoiceLoudnessReactorParticleSystemTarget.hpp"
// Including type: VoiceLoudnessReactorGameObjectEnableTarget
#include "GlobalNamespace/VoiceLoudnessReactorGameObjectEnableTarget.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GorillaSpeakerLoudness loudness
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSpeakerLoudness*& GlobalNamespace::VoiceLoudnessReactor::dyn_loudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::dyn_loudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loudness"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaSpeakerLoudness**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VoiceLoudnessReactorBlendShapeTarget[] blendShapeTargets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget*>& GlobalNamespace::VoiceLoudnessReactor::dyn_blendShapeTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::dyn_blendShapeTargets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blendShapeTargets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VoiceLoudnessReactorTransformTarget[] transformPositionTargets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*>& GlobalNamespace::VoiceLoudnessReactor::dyn_transformPositionTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::dyn_transformPositionTargets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformPositionTargets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VoiceLoudnessReactorTransformRotationTarget[] transformRotationTargets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget*>& GlobalNamespace::VoiceLoudnessReactor::dyn_transformRotationTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::dyn_transformRotationTargets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformRotationTargets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VoiceLoudnessReactorTransformTarget[] transformScaleTargets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*>& GlobalNamespace::VoiceLoudnessReactor::dyn_transformScaleTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::dyn_transformScaleTargets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformScaleTargets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::VoiceLoudnessReactorTransformTarget*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VoiceLoudnessReactorParticleSystemTarget[] particleTargets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*>& GlobalNamespace::VoiceLoudnessReactor::dyn_particleTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::dyn_particleTargets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleTargets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VoiceLoudnessReactorGameObjectEnableTarget[] gameObjectEnableTargets
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget*>& GlobalNamespace::VoiceLoudnessReactor::dyn_gameObjectEnableTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::dyn_gameObjectEnableTargets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObjectEnableTargets"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VoiceLoudnessReactor.Start
void GlobalNamespace::VoiceLoudnessReactor::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VoiceLoudnessReactor.OnEnable
void GlobalNamespace::VoiceLoudnessReactor::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VoiceLoudnessReactor.Update
void GlobalNamespace::VoiceLoudnessReactor::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactor::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VoiceLoudnessReactorBlendShapeTarget
#include "GlobalNamespace/VoiceLoudnessReactorBlendShapeTarget.hpp"
// Including type: UnityEngine.SkinnedMeshRenderer
#include "UnityEngine/SkinnedMeshRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.SkinnedMeshRenderer SkinnedMeshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_SkinnedMeshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_SkinnedMeshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SkinnedMeshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SkinnedMeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 BlendShapeIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_BlendShapeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_BlendShapeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BlendShapeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_minValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_minValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_maxValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UseSmoothedLoudness
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_UseSmoothedLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorBlendShapeTarget::dyn_UseSmoothedLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UseSmoothedLoudness"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VoiceLoudnessReactorTransformTarget
#include "GlobalNamespace/VoiceLoudnessReactorTransformTarget.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 initial
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_initial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initial"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 Max
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_Max");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Max"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Scale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_Scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_Scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UseSmoothedLoudness
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_UseSmoothedLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformTarget::dyn_UseSmoothedLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UseSmoothedLoudness"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VoiceLoudnessReactorTransformTarget.get_Initial
::UnityEngine::Vector3 GlobalNamespace::VoiceLoudnessReactorTransformTarget::get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformTarget::get_Initial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Initial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VoiceLoudnessReactorTransformTarget.set_Initial
void GlobalNamespace::VoiceLoudnessReactorTransformTarget::set_Initial(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformTarget::set_Initial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Initial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VoiceLoudnessReactorTransformRotationTarget
#include "GlobalNamespace/VoiceLoudnessReactorTransformRotationTarget.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion initial
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_initial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initial"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion Max
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_Max");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Max"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Scale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_Scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_Scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UseSmoothedLoudness
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_UseSmoothedLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::dyn_UseSmoothedLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UseSmoothedLoudness"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VoiceLoudnessReactorTransformRotationTarget.get_Initial
::UnityEngine::Quaternion GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::get_Initial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Initial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: VoiceLoudnessReactorTransformRotationTarget.set_Initial
void GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::set_Initial(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorTransformRotationTarget::set_Initial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Initial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VoiceLoudnessReactorParticleSystemTarget
#include "GlobalNamespace/VoiceLoudnessReactorParticleSystemTarget.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem particleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_particleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_particleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UseSmoothedLoudness
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_UseSmoothedLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_UseSmoothedLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UseSmoothedLoudness"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Scale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_Scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_Scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_initialSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_initialSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialRate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_initialRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_initialRate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialRate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialSize
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_initialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_initialSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve speed
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speed"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve rate
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_rate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_rate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rate"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve size
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "size"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem/MainModule Main
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::MainModule& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_Main() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_Main");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Main"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::MainModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem/EmissionModule Emission
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_Emission() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::dyn_Emission");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Emission"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VoiceLoudnessReactorParticleSystemTarget.get_InitialSpeed
float GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InitialSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VoiceLoudnessReactorParticleSystemTarget.set_InitialSpeed
void GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InitialSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VoiceLoudnessReactorParticleSystemTarget.get_InitialRate
float GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InitialRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VoiceLoudnessReactorParticleSystemTarget.set_InitialRate
void GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialRate(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InitialRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VoiceLoudnessReactorParticleSystemTarget.get_InitialSize
float GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::get_InitialSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InitialSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VoiceLoudnessReactorParticleSystemTarget.set_InitialSize
void GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorParticleSystemTarget::set_InitialSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InitialSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VoiceLoudnessReactorGameObjectEnableTarget
#include "GlobalNamespace/VoiceLoudnessReactorGameObjectEnableTarget.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject GameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_GameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_GameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "GameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Threshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_Threshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_Threshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Threshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean TurnOnAtThreshhold
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_TurnOnAtThreshhold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_TurnOnAtThreshhold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TurnOnAtThreshhold"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UseSmoothedLoudness
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_UseSmoothedLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_UseSmoothedLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UseSmoothedLoudness"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Scale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_Scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VoiceLoudnessReactorGameObjectEnableTarget::dyn_Scale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Scale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BoundsCalcs
#include "GlobalNamespace/BoundsCalcs.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.MeshFilter[] singleMesh
::ArrayW<::UnityEngine::MeshFilter*> GlobalNamespace::BoundsCalcs::_get_singleMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::_get_singleMesh");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::MeshFilter*>>("", "BoundsCalcs", "singleMesh"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MeshFilter[] singleMesh
void GlobalNamespace::BoundsCalcs::_set_singleMesh(::ArrayW<::UnityEngine::MeshFilter*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::_set_singleMesh");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BoundsCalcs", "singleMesh", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.MeshFilter[] optionalTargets
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshFilter*>& GlobalNamespace::BoundsCalcs::dyn_optionalTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::dyn_optionalTargets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "optionalTargets"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::MeshFilter*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useRootMeshOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BoundsCalcs::dyn_useRootMeshOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::dyn_useRootMeshOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useRootMeshOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<BoundsInfo> elements
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BoundsInfo>*& GlobalNamespace::BoundsCalcs::dyn_elements() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::dyn_elements");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elements"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BoundsInfo>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BoundsInfo composite
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BoundsInfo& GlobalNamespace::BoundsCalcs::dyn_composite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::dyn_composite");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "composite"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BoundsInfo*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private StateHash _state
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StateHash& GlobalNamespace::BoundsCalcs::dyn__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::dyn__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_state"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StateHash*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BoundsCalcs.Compute
void GlobalNamespace::BoundsCalcs::Compute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::Compute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BoundsCalcs..cctor
void GlobalNamespace::BoundsCalcs::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsCalcs::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BoundsCalcs", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BoundsInfo
#include "GlobalNamespace/BoundsInfo.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 center
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BoundsInfo::dyn_center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_center");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "center"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 size
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BoundsInfo::dyn_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_size");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "size"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion rotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::BoundsInfo::dyn_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_rotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 scale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BoundsInfo::dyn_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_scale");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single inflate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BoundsInfo::dyn_inflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_inflate");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inflate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 centerAA
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BoundsInfo::dyn_centerAA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_centerAA");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "centerAA"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 sizeAA
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BoundsInfo::dyn_sizeAA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_sizeAA");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sizeAA"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 scaleAA
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BoundsInfo::dyn_scaleAA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_scaleAA");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleAA"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single inflateAA
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BoundsInfo::dyn_inflateAA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::dyn_inflateAA");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inflateAA"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BoundsInfo.get_sizeComputed
::UnityEngine::Vector3 GlobalNamespace::BoundsInfo::get_sizeComputed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::get_sizeComputed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_sizeComputed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: BoundsInfo.get_sizeComputedAA
::UnityEngine::Vector3 GlobalNamespace::BoundsInfo::get_sizeComputedAA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::get_sizeComputedAA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_sizeComputedAA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: BoundsInfo.ComputeBounds
::GlobalNamespace::BoundsInfo GlobalNamespace::BoundsInfo::ComputeBounds(::ArrayW<::UnityEngine::Vector3> vertices) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::ComputeBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BoundsInfo", "ComputeBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertices)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BoundsInfo, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vertices);
}
// Autogenerated method: BoundsInfo.CreateBoxCollider
::UnityEngine::BoxCollider* GlobalNamespace::BoundsInfo::CreateBoxCollider(::GlobalNamespace::BoundsInfo bounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::CreateBoxCollider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BoundsInfo", "CreateBoxCollider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bounds)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::BoxCollider*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bounds);
}
// Autogenerated method: BoundsInfo.CreateBoxColliderAA
::UnityEngine::BoxCollider* GlobalNamespace::BoundsInfo::CreateBoxColliderAA(::GlobalNamespace::BoundsInfo bounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BoundsInfo::CreateBoxColliderAA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BoundsInfo", "CreateBoxColliderAA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bounds)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::BoxCollider*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bounds);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneDef
#include "GlobalNamespace/ZoneDef.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GTZone zoneId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::ZoneDef::dyn_zoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_zoneId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zoneId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GTSubZone subZoneId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTSubZone& GlobalNamespace::ZoneDef::dyn_subZoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_subZoneId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subZoneId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTSubZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GroupJoinZone groupZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& GlobalNamespace::ZoneDef::dyn_groupZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_groupZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "groupZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GroupJoinZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GroupJoinZone excludeGroupZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& GlobalNamespace::ZoneDef::dyn_excludeGroupZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_excludeGroupZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "excludeGroupZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GroupJoinZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean trackEnter
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneDef::dyn_trackEnter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_trackEnter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackEnter"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean trackExit
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneDef::dyn_trackExit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_trackExit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackExit"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean trackStay
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneDef::dyn_trackStay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_trackStay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackStay"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 priority
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ZoneDef::dyn_priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.BoxCollider[] colliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoxCollider*>& GlobalNamespace::ZoneDef::dyn_colliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_colliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::BoxCollider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ZoneNode[] nodes
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneNode>& GlobalNamespace::ZoneDef::dyn_nodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_nodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nodes"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ZoneNode>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Bounds bounds
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& GlobalNamespace::ZoneDef::dyn_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_bounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bounds"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ZoneDef[] zoneOverlaps
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneDef*>& GlobalNamespace::ZoneDef::dyn_zoneOverlaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneDef::dyn_zoneOverlaps");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zoneOverlaps"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ZoneDef*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneEntity
#include "GlobalNamespace/ZoneEntity.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.SphereCollider
#include "UnityEngine/SphereCollider.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: GTZoneEventType
#include "GlobalNamespace/GTZoneEventType.hpp"
// Including type: ZoneDef
#include "GlobalNamespace/ZoneDef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<System.Int32> _entityID
[[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& GlobalNamespace::ZoneEntity::dyn__entityID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn__entityID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entityID"))->offset;
  return *reinterpret_cast<::System::Nullable_1<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _entityTag
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ZoneEntity::dyn__entityTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn__entityTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entityTag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _emitTelemetry
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneEntity::dyn__emitTelemetry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn__emitTelemetry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_emitTelemetry"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _zoneStayEventInterval
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ZoneEntity::dyn__zoneStayEventInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn__zoneStayEventInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zoneStayEventInterval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig _entityRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::ZoneEntity::dyn__entityRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn__entityRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entityRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SphereCollider _collider
[[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& GlobalNamespace::ZoneEntity::dyn__collider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn__collider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_collider"))->offset;
  return *reinterpret_cast<::UnityEngine::SphereCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody _rigidbody
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::ZoneEntity::dyn__rigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn__rigidbody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rigidbody"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GTZone currentZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::ZoneEntity::dyn_currentZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_currentZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GTSubZone currentSubZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTSubZone& GlobalNamespace::ZoneEntity::dyn_currentSubZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_currentSubZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentSubZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTSubZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GroupJoinZone currentGroupZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& GlobalNamespace::ZoneEntity::dyn_currentGroupZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_currentGroupZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentGroupZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GroupJoinZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GroupJoinZone previousGroupZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& GlobalNamespace::ZoneEntity::dyn_previousGroupZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_previousGroupZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousGroupZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GroupJoinZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GroupJoinZone currentExcludeGroupZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GroupJoinZone& GlobalNamespace::ZoneEntity::dyn_currentExcludeGroupZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_currentExcludeGroupZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentExcludeGroupZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GroupJoinZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.HashSet`1<UnityEngine.BoxCollider> insideBoxes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::BoxCollider*>*& GlobalNamespace::ZoneEntity::dyn_insideBoxes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_insideBoxes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "insideBoxes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::UnityEngine::BoxCollider*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 currentZonePriority
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ZoneEntity::dyn_currentZonePriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_currentZonePriority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentZonePriority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single groupZoneClearAtTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ZoneEntity::dyn_groupZoneClearAtTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_groupZoneClearAtTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "groupZoneClearAtTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single groupZoneClearInterval
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ZoneEntity::dyn_groupZoneClearInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_groupZoneClearInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "groupZoneClearInterval"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ZoneNode currentNode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneNode& GlobalNamespace::ZoneEntity::dyn_currentNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_currentNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentNode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ZoneNode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ZoneNode lastEnteredNode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneNode& GlobalNamespace::ZoneEntity::dyn_lastEnteredNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_lastEnteredNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastEnteredNode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ZoneNode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ZoneNode lastExitedNode
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneNode& GlobalNamespace::ZoneEntity::dyn_lastExitedNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_lastExitedNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastExitedNode"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ZoneNode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TimeSince sinceZoneEntered
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& GlobalNamespace::ZoneEntity::dyn_sinceZoneEntered() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_sinceZoneEntered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sinceZoneEntered"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeSince*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TimeSince gLastStayPoll
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& GlobalNamespace::ZoneEntity::dyn_gLastStayPoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::dyn_gLastStayPoll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gLastStayPoll"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeSince*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneEntity.get_entityTag
::StringW GlobalNamespace::ZoneEntity::get_entityTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::get_entityTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_entityTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ZoneEntity.get_entityID
int GlobalNamespace::ZoneEntity::get_entityID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::get_entityID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_entityID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ZoneEntity.get_entityRig
::GlobalNamespace::VRRig* GlobalNamespace::ZoneEntity::get_entityRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::get_entityRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_entityRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRRig*, false>(this, ___internal__method);
}
// Autogenerated method: ZoneEntity.get_collider
::UnityEngine::SphereCollider* GlobalNamespace::ZoneEntity::get_collider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::get_collider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_collider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::SphereCollider*, false>(this, ___internal__method);
}
// Autogenerated method: ZoneEntity.get_GroupZone
::GlobalNamespace::GroupJoinZone GlobalNamespace::ZoneEntity::get_GroupZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::get_GroupZone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GroupZone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::GroupJoinZone, false>(this, ___internal__method);
}
// Autogenerated method: ZoneEntity.OnEnable
void GlobalNamespace::ZoneEntity::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ZoneEntity*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneEntity.OnDisable
void GlobalNamespace::ZoneEntity::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ZoneEntity*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneEntity.OnTriggerEnter
void GlobalNamespace::ZoneEntity::OnTriggerEnter(::UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::OnTriggerEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ZoneEntity*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: ZoneEntity.OnTriggerExit
void GlobalNamespace::ZoneEntity::OnTriggerExit(::UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::OnTriggerExit");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ZoneEntity*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: ZoneEntity.OnTriggerStay
void GlobalNamespace::ZoneEntity::OnTriggerStay(::UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::OnTriggerStay");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ZoneEntity*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: ZoneEntity.OnZoneTrigger
void GlobalNamespace::ZoneEntity::OnZoneTrigger(::GlobalNamespace::GTZoneEventType zoneEvent, ::UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::OnZoneTrigger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ZoneEntity*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, zoneEvent, c);
}
// Autogenerated method: ZoneEntity.OnZoneTrigger
void GlobalNamespace::ZoneEntity::OnZoneTrigger(::GlobalNamespace::GTZoneEventType zoneEvent, ::GlobalNamespace::ZoneDef* zone, ::UnityEngine::BoxCollider* box) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneEntity::OnZoneTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnZoneTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zoneEvent), ::il2cpp_utils::ExtractType(zone), ::il2cpp_utils::ExtractType(box)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, zoneEvent, zone, box);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ZoneGraph
#include "GlobalNamespace/ZoneGraph.hpp"
// Including type: ZoneDef
#include "GlobalNamespace/ZoneDef.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ZoneEntity
#include "GlobalNamespace/ZoneEntity.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private ZoneGraph gGraph
::GlobalNamespace::ZoneGraph* GlobalNamespace::ZoneGraph::_get_gGraph() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::_get_gGraph");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ZoneGraph*>("", "ZoneGraph", "gGraph"));
}
// Autogenerated static field setter
// Set static field: static private ZoneGraph gGraph
void GlobalNamespace::ZoneGraph::_set_gGraph(::GlobalNamespace::ZoneGraph* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::_set_gGraph");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ZoneGraph", "gGraph", value));
}
// Autogenerated instance field getter
// Get instance field: private ZoneDef[] _zoneDefs
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneDef*>& GlobalNamespace::ZoneGraph::dyn__zoneDefs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::dyn__zoneDefs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_zoneDefs"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ZoneDef*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.BoxCollider[] _colliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoxCollider*>& GlobalNamespace::ZoneGraph::dyn__colliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::dyn__colliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::BoxCollider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ZoneNode[] _nodes
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ZoneNode>& GlobalNamespace::ZoneGraph::dyn__nodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::dyn__nodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodes"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ZoneNode>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<UnityEngine.BoxCollider,ZoneDef> _colliderToZoneDef
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneDef*>*& GlobalNamespace::ZoneGraph::dyn__colliderToZoneDef() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::dyn__colliderToZoneDef");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colliderToZoneDef"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneDef*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<UnityEngine.BoxCollider,ZoneNode> _colliderToNode
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneNode>*& GlobalNamespace::ZoneGraph::dyn__colliderToNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::dyn__colliderToNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colliderToNode"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::BoxCollider*, ::GlobalNamespace::ZoneNode>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<ZoneEntity> _entityList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ZoneEntity*>*& GlobalNamespace::ZoneGraph::dyn__entityList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::dyn__entityList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_entityList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::ZoneEntity*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneGraph.Instance
::GlobalNamespace::ZoneGraph* GlobalNamespace::ZoneGraph::Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneGraph", "Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ZoneGraph*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ZoneGraph.ColliderToZoneDef
::GlobalNamespace::ZoneDef* GlobalNamespace::ZoneGraph::ColliderToZoneDef(::UnityEngine::BoxCollider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::ColliderToZoneDef");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneGraph", "ColliderToZoneDef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ZoneDef*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, collider);
}
// Autogenerated method: ZoneGraph.ColliderToNode
::GlobalNamespace::ZoneNode GlobalNamespace::ZoneGraph::ColliderToNode(::UnityEngine::BoxCollider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::ColliderToNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneGraph", "ColliderToNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ZoneNode, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, collider);
}
// Autogenerated method: ZoneGraph.Awake
void GlobalNamespace::ZoneGraph::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ZoneGraph.CompileColliderMaps
void GlobalNamespace::ZoneGraph::CompileColliderMaps(::ArrayW<::GlobalNamespace::ZoneDef*> zones) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::CompileColliderMaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompileColliderMaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zones)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, zones);
}
// Autogenerated method: ZoneGraph.Compare
int GlobalNamespace::ZoneGraph::Compare(::GlobalNamespace::ZoneDef* x, ::GlobalNamespace::ZoneDef* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::Compare");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneGraph", "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: ZoneGraph.Register
void GlobalNamespace::ZoneGraph::Register(::GlobalNamespace::ZoneEntity* entity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneGraph", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, entity);
}
// Autogenerated method: ZoneGraph.Unregister
void GlobalNamespace::ZoneGraph::Unregister(::GlobalNamespace::ZoneEntity* entity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneGraph::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneGraph", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(entity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, entity);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ZoneKey
#include "GlobalNamespace/ZoneKey.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly ZoneKey Null
::GlobalNamespace::ZoneKey GlobalNamespace::ZoneKey::_get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::_get_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ZoneKey>("", "ZoneKey", "Null"));
}
// Autogenerated static field setter
// Set static field: static public readonly ZoneKey Null
void GlobalNamespace::ZoneKey::_set_Null(::GlobalNamespace::ZoneKey value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::_set_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ZoneKey", "Null", value));
}
// Autogenerated instance field getter
// Get instance field: public GTZone zoneId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::ZoneKey::dyn_zoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::dyn_zoneId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zoneId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GTSubZone subZoneId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTSubZone& GlobalNamespace::ZoneKey::dyn_subZoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::dyn_subZoneId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subZoneId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTSubZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneKey.get_intValue
int GlobalNamespace::ZoneKey::get_intValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::get_intValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_intValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ZoneKey.get_zoneName
::StringW GlobalNamespace::ZoneKey::get_zoneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::get_zoneName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_zoneName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ZoneKey.get_subZoneName
::StringW GlobalNamespace::ZoneKey::get_subZoneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::get_subZoneName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_subZoneName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ZoneKey..ctor
// ABORTED elsewhere.  GlobalNamespace::ZoneKey::ZoneKey(::GlobalNamespace::GTZone zone, ::GlobalNamespace::GTSubZone subZone)
// Autogenerated method: ZoneKey.GetKey
::GlobalNamespace::ZoneKey GlobalNamespace::ZoneKey::GetKey(::GlobalNamespace::GTZone zone, ::GlobalNamespace::GTSubZone subZone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::GetKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "GetKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zone), ::il2cpp_utils::ExtractType(subZone)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ZoneKey, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zone, subZone);
}
// Autogenerated method: ZoneKey.ToIntValue
int GlobalNamespace::ZoneKey::ToIntValue(::GlobalNamespace::GTZone zone, ::GlobalNamespace::GTSubZone subZone) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::ToIntValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "ToIntValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zone), ::il2cpp_utils::ExtractType(subZone)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, zone, subZone);
}
// Autogenerated method: ZoneKey.Equals
bool GlobalNamespace::ZoneKey::Equals(::GlobalNamespace::ZoneKey other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::ZoneKey), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: ZoneKey.CompareTo
int GlobalNamespace::ZoneKey::CompareTo(::GlobalNamespace::ZoneKey other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::CompareTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::ZoneKey), 5));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, other);
}
// Autogenerated method: ZoneKey.CompareTo
int GlobalNamespace::ZoneKey::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::CompareTo");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::ZoneKey), 6));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated method: ZoneKey.op_Explicit
GlobalNamespace::ZoneKey::operator int() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ZoneKey..cctor
void GlobalNamespace::ZoneKey::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ZoneKey.GetHashCode
int GlobalNamespace::ZoneKey::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ZoneKey.ToString
::StringW GlobalNamespace::ZoneKey::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ZoneKey.Equals
bool GlobalNamespace::ZoneKey::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: ZoneKey.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: ZoneKey.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: ZoneKey.op_LessThan
bool GlobalNamespace::operator <(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::op_LessThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "op_LessThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: ZoneKey.op_GreaterThan
bool GlobalNamespace::operator >(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::op_GreaterThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "op_GreaterThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: ZoneKey.op_LessThanOrEqual
bool GlobalNamespace::operator <=(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::op_LessThanOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "op_LessThanOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: ZoneKey.op_GreaterThanOrEqual
bool GlobalNamespace::operator >=(const ::GlobalNamespace::ZoneKey& x, const ::GlobalNamespace::ZoneKey& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneKey::op_GreaterThanOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneKey", "op_GreaterThanOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ZoneNode
#include "GlobalNamespace/ZoneNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly ZoneNode <Null>k__BackingField
::GlobalNamespace::ZoneNode GlobalNamespace::ZoneNode::_get_$Null$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::_get_$Null$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::ZoneNode>("", "ZoneNode", "<Null>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private readonly ZoneNode <Null>k__BackingField
void GlobalNamespace::ZoneNode::_set_$Null$k__BackingField(::GlobalNamespace::ZoneNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::_set_$Null$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ZoneNode", "<Null>k__BackingField", value));
}
// Autogenerated instance field getter
// Get instance field: public GTZone zoneId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTZone& GlobalNamespace::ZoneNode::dyn_zoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::dyn_zoneId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zoneId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GTSubZone subZoneId
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GTSubZone& GlobalNamespace::ZoneNode::dyn_subZoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::dyn_subZoneId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subZoneId"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GTSubZone*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 center
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ZoneNode::dyn_center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::dyn_center");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "center"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 size
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ZoneNode::dyn_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::dyn_size");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "size"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion orientation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ZoneNode::dyn_orientation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::dyn_orientation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orientation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Bounds AABB
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& GlobalNamespace::ZoneNode::dyn_AABB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::dyn_AABB");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AABB"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isValid
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ZoneNode::dyn_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::dyn_isValid");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ZoneNode.get_Null
::GlobalNamespace::ZoneNode GlobalNamespace::ZoneNode::get_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::get_Null");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneNode", "get_Null", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::ZoneNode, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ZoneNode.get_zoneKey
int GlobalNamespace::ZoneNode::get_zoneKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::get_zoneKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_zoneKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ZoneNode.ContainsPoint
bool GlobalNamespace::ZoneNode::ContainsPoint(::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::ContainsPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ContainsPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, point);
}
// Autogenerated method: ZoneNode.SphereOverlap
int GlobalNamespace::ZoneNode::SphereOverlap(::UnityEngine::Vector3 position, float radius) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::SphereOverlap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SphereOverlap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(radius)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, position, radius);
}
// Autogenerated method: ZoneNode.Equals
bool GlobalNamespace::ZoneNode::Equals(::GlobalNamespace::ZoneNode other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::GlobalNamespace::ZoneNode), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: ZoneNode..cctor
void GlobalNamespace::ZoneNode::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneNode", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ZoneNode.ToString
::StringW GlobalNamespace::ZoneNode::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: ZoneNode.GetHashCode
int GlobalNamespace::ZoneNode::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ZoneNode.Equals
bool GlobalNamespace::ZoneNode::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: ZoneNode.op_Equality
bool GlobalNamespace::operator ==(const ::GlobalNamespace::ZoneNode& x, const ::GlobalNamespace::ZoneNode& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneNode", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: ZoneNode.op_Inequality
bool GlobalNamespace::operator !=(const ::GlobalNamespace::ZoneNode& x, const ::GlobalNamespace::ZoneNode& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ZoneNode::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ZoneNode", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x, y);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnitySourceGeneratedAssemblyMonoScriptTypes_v1
#include "GlobalNamespace/UnitySourceGeneratedAssemblyMonoScriptTypes_v1_.hpp"
// Including type: UnitySourceGeneratedAssemblyMonoScriptTypes_v1/MonoScriptData
#include "GlobalNamespace/UnitySourceGeneratedAssemblyMonoScriptTypes_v1__MonoScriptData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnitySourceGeneratedAssemblyMonoScriptTypes_v1.Get
::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1_::MonoScriptData GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1_::Get() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1_::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnitySourceGeneratedAssemblyMonoScriptTypes_v1", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1_::MonoScriptData, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PublicKeyConvert.PEMKeyLoader
#include "PublicKeyConvert/PEMKeyLoader.hpp"
// Including type: System.Security.Cryptography.RSACryptoServiceProvider
#include "System/Security/Cryptography/RSACryptoServiceProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte[] SeqOID
::ArrayW<uint8_t> PublicKeyConvert::PEMKeyLoader::_get_SeqOID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PublicKeyConvert::PEMKeyLoader::_get_SeqOID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint8_t>>("PublicKeyConvert", "PEMKeyLoader", "SeqOID"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] SeqOID
void PublicKeyConvert::PEMKeyLoader::_set_SeqOID(::ArrayW<uint8_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PublicKeyConvert::PEMKeyLoader::_set_SeqOID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("PublicKeyConvert", "PEMKeyLoader", "SeqOID", value));
}
// Autogenerated method: PublicKeyConvert.PEMKeyLoader.CompareBytearrays
bool PublicKeyConvert::PEMKeyLoader::CompareBytearrays(::ArrayW<uint8_t> a, ::ArrayW<uint8_t> b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PublicKeyConvert::PEMKeyLoader::CompareBytearrays");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("PublicKeyConvert", "PEMKeyLoader", "CompareBytearrays", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: PublicKeyConvert.PEMKeyLoader.CryptoServiceProviderFromPublicKeyInfo
::System::Security::Cryptography::RSACryptoServiceProvider* PublicKeyConvert::PEMKeyLoader::CryptoServiceProviderFromPublicKeyInfo(::ArrayW<uint8_t> x509key) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PublicKeyConvert::PEMKeyLoader::CryptoServiceProviderFromPublicKeyInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("PublicKeyConvert", "PEMKeyLoader", "CryptoServiceProviderFromPublicKeyInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x509key)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Security::Cryptography::RSACryptoServiceProvider*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, x509key);
}
// Autogenerated method: PublicKeyConvert.PEMKeyLoader.CryptoServiceProviderFromPublicKeyInfo
::System::Security::Cryptography::RSACryptoServiceProvider* PublicKeyConvert::PEMKeyLoader::CryptoServiceProviderFromPublicKeyInfo(::StringW base64EncodedKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("::PublicKeyConvert::PEMKeyLoader::CryptoServiceProviderFromPublicKeyInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("PublicKeyConvert", "PEMKeyLoader", "CryptoServiceProviderFromPublicKeyInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(base64EncodedKey)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Security::Cryptography::RSACryptoServiceProvider*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, base64EncodedKey);
}
// Autogenerated method: PublicKeyConvert.PEMKeyLoader..cctor
void PublicKeyConvert::PEMKeyLoader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::PublicKeyConvert::PEMKeyLoader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("PublicKeyConvert", "PEMKeyLoader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Viveport.MainThreadDispatcher
#include "Viveport/MainThreadDispatcher.hpp"
// Including type: Viveport.MainThreadDispatcher/<>c__DisplayClass6_0
#include "Viveport/MainThreadDispatcher_--c__DisplayClass6_0.hpp"
// Including type: Viveport.MainThreadDispatcher/<ActionWrapper>d__12
#include "Viveport/MainThreadDispatcher_-ActionWrapper-d__12.hpp"
// Including type: Viveport.MainThreadDispatcher/<ActionWrapper>d__13`1
#include "Viveport/MainThreadDispatcher_-ActionWrapper-d__13_1.hpp"
// Including type: Viveport.MainThreadDispatcher/<ActionWrapper>d__14`2
#include "Viveport/MainThreadDispatcher_-ActionWrapper-d__14_2.hpp"
// Including type: Viveport.MainThreadDispatcher/<ActionWrapper>d__15`3
#include "Viveport/MainThreadDispatcher_-ActionWrapper-d__15_3.hpp"
// Including type: Viveport.MainThreadDispatcher/<ActionWrapper>d__16`4
#include "Viveport/MainThreadDispatcher_-ActionWrapper-d__16_4.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Queue`1<System.Action> actions
::System::Collections::Generic::Queue_1<::System::Action*>* Viveport::MainThreadDispatcher::_get_actions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::_get_actions");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::Queue_1<::System::Action*>*>("Viveport", "MainThreadDispatcher", "actions"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Queue`1<System.Action> actions
void Viveport::MainThreadDispatcher::_set_actions(::System::Collections::Generic::Queue_1<::System::Action*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::_set_actions");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "MainThreadDispatcher", "actions", value));
}
// Autogenerated static field getter
// Get static field: static private Viveport.MainThreadDispatcher instance
::Viveport::MainThreadDispatcher* Viveport::MainThreadDispatcher::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::MainThreadDispatcher*>("Viveport", "MainThreadDispatcher", "instance"));
}
// Autogenerated static field setter
// Set static field: static private Viveport.MainThreadDispatcher instance
void Viveport::MainThreadDispatcher::_set_instance(::Viveport::MainThreadDispatcher* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "MainThreadDispatcher", "instance", value));
}
// Autogenerated method: Viveport.MainThreadDispatcher.Awake
void Viveport::MainThreadDispatcher::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Viveport.MainThreadDispatcher.Update
void Viveport::MainThreadDispatcher::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Viveport.MainThreadDispatcher.Instance
::Viveport::MainThreadDispatcher* Viveport::MainThreadDispatcher::Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Viveport", "MainThreadDispatcher", "Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Viveport::MainThreadDispatcher*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Viveport.MainThreadDispatcher.OnDestroy
void Viveport::MainThreadDispatcher::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Viveport.MainThreadDispatcher.Enqueue
void Viveport::MainThreadDispatcher::Enqueue(::System::Collections::IEnumerator* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: Viveport.MainThreadDispatcher.Enqueue
void Viveport::MainThreadDispatcher::Enqueue(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: Viveport.MainThreadDispatcher.ActionWrapper
::System::Collections::IEnumerator* Viveport::MainThreadDispatcher::ActionWrapper(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::ActionWrapper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionWrapper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method, action);
}
// Autogenerated method: Viveport.MainThreadDispatcher..cctor
void Viveport::MainThreadDispatcher::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Viveport", "MainThreadDispatcher", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Viveport.MainThreadDispatcher/<>c__DisplayClass6_0
#include "Viveport/MainThreadDispatcher_--c__DisplayClass6_0.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Viveport.MainThreadDispatcher <>4__this
[[deprecated("Use field access instead!")]] ::Viveport::MainThreadDispatcher*& Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Viveport::MainThreadDispatcher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.IEnumerator action
[[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Collections::IEnumerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Viveport.MainThreadDispatcher/<>c__DisplayClass6_0.<Enqueue>b__0
void Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::$Enqueue$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::<Enqueue>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Enqueue>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Viveport.MainThreadDispatcher/<ActionWrapper>d__12
#include "Viveport/MainThreadDispatcher_-ActionWrapper-d__12.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Viveport::MainThreadDispatcher::$ActionWrapper$d__12::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$ActionWrapper$d__12::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Viveport::MainThreadDispatcher::$ActionWrapper$d__12::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$ActionWrapper$d__12::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action action
[[deprecated("Use field access instead!")]] ::System::Action*& Viveport::MainThreadDispatcher::$ActionWrapper$d__12::dyn_action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$ActionWrapper$d__12::dyn_action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "action"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Viveport.MainThreadDispatcher/<ActionWrapper>d__12.System.IDisposable.Dispose
void Viveport::MainThreadDispatcher::$ActionWrapper$d__12::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$ActionWrapper$d__12::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Viveport::MainThreadDispatcher::$ActionWrapper$d__12*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Viveport.MainThreadDispatcher/<ActionWrapper>d__12.MoveNext
bool Viveport::MainThreadDispatcher::$ActionWrapper$d__12::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$ActionWrapper$d__12::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Viveport::MainThreadDispatcher::$ActionWrapper$d__12*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Viveport.MainThreadDispatcher/<ActionWrapper>d__12.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* Viveport::MainThreadDispatcher::$ActionWrapper$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$ActionWrapper$d__12::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Viveport::MainThreadDispatcher::$ActionWrapper$d__12*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Viveport.MainThreadDispatcher/<ActionWrapper>d__12.System.Collections.IEnumerator.Reset
void Viveport::MainThreadDispatcher::$ActionWrapper$d__12::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$ActionWrapper$d__12::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Viveport::MainThreadDispatcher::$ActionWrapper$d__12*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Viveport.MainThreadDispatcher/<ActionWrapper>d__12.System.Collections.IEnumerator.get_Current
::Il2CppObject* Viveport::MainThreadDispatcher::$ActionWrapper$d__12::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$ActionWrapper$d__12::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Viveport::MainThreadDispatcher::$ActionWrapper$d__12*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Viveport.Locale
#include "Viveport/Locale.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Viveport.Locale US
::Viveport::Locale Viveport::Locale::_get_US() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_get_US");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::Locale>("Viveport", "Locale", "US"));
}
// Autogenerated static field setter
// Set static field: static public Viveport.Locale US
void Viveport::Locale::_set_US(::Viveport::Locale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_set_US");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "Locale", "US", value));
}
// Autogenerated static field getter
// Get static field: static public Viveport.Locale DE
::Viveport::Locale Viveport::Locale::_get_DE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_get_DE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::Locale>("Viveport", "Locale", "DE"));
}
// Autogenerated static field setter
// Set static field: static public Viveport.Locale DE
void Viveport::Locale::_set_DE(::Viveport::Locale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_set_DE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "Locale", "DE", value));
}
// Autogenerated static field getter
// Get static field: static public Viveport.Locale JP
::Viveport::Locale Viveport::Locale::_get_JP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_get_JP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::Locale>("Viveport", "Locale", "JP"));
}
// Autogenerated static field setter
// Set static field: static public Viveport.Locale JP
void Viveport::Locale::_set_JP(::Viveport::Locale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_set_JP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "Locale", "JP", value));
}
// Autogenerated static field getter
// Get static field: static public Viveport.Locale KR
::Viveport::Locale Viveport::Locale::_get_KR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_get_KR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::Locale>("Viveport", "Locale", "KR"));
}
// Autogenerated static field setter
// Set static field: static public Viveport.Locale KR
void Viveport::Locale::_set_KR(::Viveport::Locale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_set_KR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "Locale", "KR", value));
}
// Autogenerated static field getter
// Get static field: static public Viveport.Locale RU
::Viveport::Locale Viveport::Locale::_get_RU() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_get_RU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::Locale>("Viveport", "Locale", "RU"));
}
// Autogenerated static field setter
// Set static field: static public Viveport.Locale RU
void Viveport::Locale::_set_RU(::Viveport::Locale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_set_RU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "Locale", "RU", value));
}
// Autogenerated static field getter
// Get static field: static public Viveport.Locale CN
::Viveport::Locale Viveport::Locale::_get_CN() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_get_CN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::Locale>("Viveport", "Locale", "CN"));
}
// Autogenerated static field setter
// Set static field: static public Viveport.Locale CN
void Viveport::Locale::_set_CN(::Viveport::Locale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_set_CN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "Locale", "CN", value));
}
// Autogenerated static field getter
// Get static field: static public Viveport.Locale TW
::Viveport::Locale Viveport::Locale::_get_TW() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_get_TW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::Locale>("Viveport", "Locale", "TW"));
}
// Autogenerated static field setter
// Set static field: static public Viveport.Locale TW
void Viveport::Locale::_set_TW(::Viveport::Locale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_set_TW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "Locale", "TW", value));
}
// Autogenerated static field getter
// Get static field: static public Viveport.Locale FR
::Viveport::Locale Viveport::Locale::_get_FR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_get_FR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Viveport::Locale>("Viveport", "Locale", "FR"));
}
// Autogenerated static field setter
// Set static field: static public Viveport.Locale FR
void Viveport::Locale::_set_FR(::Viveport::Locale value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::_set_FR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Viveport", "Locale", "FR", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Viveport::Locale::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Locale::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Viveport.StatusCallback
#include "Viveport/StatusCallback.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Viveport.StatusCallback.Invoke
void Viveport::StatusCallback::Invoke(int nResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::StatusCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Viveport::StatusCallback*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nResult);
}
// Autogenerated method: Viveport.StatusCallback.BeginInvoke
::System::IAsyncResult* Viveport::StatusCallback::BeginInvoke(int nResult, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::StatusCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Viveport::StatusCallback*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, nResult, callback, object);
}
// Autogenerated method: Viveport.StatusCallback.EndInvoke
void Viveport::StatusCallback::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::StatusCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Viveport::StatusCallback*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
