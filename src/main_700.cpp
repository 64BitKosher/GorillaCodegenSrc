// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: EdibleHoldable
#include "GlobalNamespace/EdibleHoldable.hpp"
// Including type: GorillaTag.IResettableItem
#include "GorillaTag/IResettableItem.hpp"
// Including type: EdibleHoldable/BiteEvent
#include "GlobalNamespace/EdibleHoldable_BiteEvent.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] eatSounds
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::EdibleHoldable::dyn_eatSounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_eatSounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eatSounds"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] edibleMeshObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::EdibleHoldable::dyn_edibleMeshObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_edibleMeshObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "edibleMeshObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EdibleHoldable/BiteEvent onBiteView
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EdibleHoldable::BiteEvent*& GlobalNamespace::EdibleHoldable::dyn_onBiteView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_onBiteView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onBiteView"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EdibleHoldable::BiteEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EdibleHoldable/BiteEvent onBiteWorld
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EdibleHoldable::BiteEvent*& GlobalNamespace::EdibleHoldable::dyn_onBiteWorld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_onBiteWorld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onBiteWorld"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EdibleHoldable::BiteEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lastEatTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EdibleHoldable::dyn_lastEatTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_lastEatTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastEatTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lastFullyEatenTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EdibleHoldable::dyn_lastFullyEatenTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_lastFullyEatenTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastFullyEatenTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single eatMinimumCooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EdibleHoldable::dyn_eatMinimumCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_eatMinimumCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eatMinimumCooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single respawnTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EdibleHoldable::dyn_respawnTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_respawnTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "respawnTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single biteDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EdibleHoldable::dyn_biteDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_biteDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "biteDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 biteOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::EdibleHoldable::dyn_biteOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_biteOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "biteOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform biteSpot
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::EdibleHoldable::dyn_biteSpot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_biteSpot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "biteSpot"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean inBiteZone
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EdibleHoldable::dyn_inBiteZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_inBiteZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inBiteZone"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource eatSoundSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::EdibleHoldable::dyn_eatSoundSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_eatSoundSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "eatSoundSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private EdibleHoldable/EdibleHoldableStates previousEdibleState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EdibleHoldable::EdibleHoldableStates& GlobalNamespace::EdibleHoldable::dyn_previousEdibleState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_previousEdibleState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousEdibleState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EdibleHoldable::EdibleHoldableStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTag.IResettableItem[] iResettableItems
[[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::IResettableItem*>& GlobalNamespace::EdibleHoldable::dyn_iResettableItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::dyn_iResettableItems");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iResettableItems"))->offset;
  return *reinterpret_cast<::ArrayW<::GorillaTag::IResettableItem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EdibleHoldable.OnEdibleHoldableStateChange
void GlobalNamespace::EdibleHoldable::OnEdibleHoldableStateChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::OnEdibleHoldableStateChange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::EdibleHoldable*), 104));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.Start
void GlobalNamespace::EdibleHoldable::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.OnGrab
void GlobalNamespace::EdibleHoldable::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: EdibleHoldable.OnActivate
void GlobalNamespace::EdibleHoldable::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.OnEnable
void GlobalNamespace::EdibleHoldable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.OnDisable
void GlobalNamespace::EdibleHoldable::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.ResetToDefaultState
void GlobalNamespace::EdibleHoldable::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.OnRelease
bool GlobalNamespace::EdibleHoldable::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: EdibleHoldable.LateUpdateLocal
void GlobalNamespace::EdibleHoldable::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.LateUpdateShared
void GlobalNamespace::EdibleHoldable::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.CanActivate
bool GlobalNamespace::EdibleHoldable::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 96));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EdibleHoldable.CanDeactivate
bool GlobalNamespace::EdibleHoldable::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 97));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: EdibleHoldable/EdibleHoldableStates
#include "GlobalNamespace/EdibleHoldable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public EdibleHoldable/EdibleHoldableStates EatingState0
::GlobalNamespace::EdibleHoldable::EdibleHoldableStates GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_get_EatingState0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_get_EatingState0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EdibleHoldable::EdibleHoldableStates>("", "EdibleHoldable/EdibleHoldableStates", "EatingState0"));
}
// Autogenerated static field setter
// Set static field: static public EdibleHoldable/EdibleHoldableStates EatingState0
void GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_set_EatingState0(::GlobalNamespace::EdibleHoldable::EdibleHoldableStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_set_EatingState0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EdibleHoldable/EdibleHoldableStates", "EatingState0", value));
}
// Autogenerated static field getter
// Get static field: static public EdibleHoldable/EdibleHoldableStates EatingState1
::GlobalNamespace::EdibleHoldable::EdibleHoldableStates GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_get_EatingState1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_get_EatingState1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EdibleHoldable::EdibleHoldableStates>("", "EdibleHoldable/EdibleHoldableStates", "EatingState1"));
}
// Autogenerated static field setter
// Set static field: static public EdibleHoldable/EdibleHoldableStates EatingState1
void GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_set_EatingState1(::GlobalNamespace::EdibleHoldable::EdibleHoldableStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_set_EatingState1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EdibleHoldable/EdibleHoldableStates", "EatingState1", value));
}
// Autogenerated static field getter
// Get static field: static public EdibleHoldable/EdibleHoldableStates EatingState2
::GlobalNamespace::EdibleHoldable::EdibleHoldableStates GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_get_EatingState2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_get_EatingState2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EdibleHoldable::EdibleHoldableStates>("", "EdibleHoldable/EdibleHoldableStates", "EatingState2"));
}
// Autogenerated static field setter
// Set static field: static public EdibleHoldable/EdibleHoldableStates EatingState2
void GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_set_EatingState2(::GlobalNamespace::EdibleHoldable::EdibleHoldableStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_set_EatingState2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EdibleHoldable/EdibleHoldableStates", "EatingState2", value));
}
// Autogenerated static field getter
// Get static field: static public EdibleHoldable/EdibleHoldableStates EatingState3
::GlobalNamespace::EdibleHoldable::EdibleHoldableStates GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_get_EatingState3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_get_EatingState3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EdibleHoldable::EdibleHoldableStates>("", "EdibleHoldable/EdibleHoldableStates", "EatingState3"));
}
// Autogenerated static field setter
// Set static field: static public EdibleHoldable/EdibleHoldableStates EatingState3
void GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_set_EatingState3(::GlobalNamespace::EdibleHoldable::EdibleHoldableStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::_set_EatingState3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EdibleHoldable/EdibleHoldableStates", "EatingState3", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EdibleHoldable::EdibleHoldableStates::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EdibleHoldable::EdibleHoldableStates::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: EdibleHoldable/BiteEvent
#include "GlobalNamespace/EdibleHoldable_BiteEvent.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GeodeItem
#include "GlobalNamespace/GeodeItem.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: GorillaVelocityEstimator
#include "GlobalNamespace/GorillaVelocityEstimator.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject effectsGameObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GeodeItem::dyn_effectsGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_effectsGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectsGameObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask collisionLayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::GeodeItem::dyn_collisionLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_collisionLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionLayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaVelocityEstimator velocityEstimator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& GlobalNamespace::GeodeItem::dyn_velocityEstimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_velocityEstimator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityEstimator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaVelocityEstimator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single cooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GeodeItem::dyn_cooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_cooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minHitVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GeodeItem::dyn_minHitVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_minHitVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minHitVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject geodeFullMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GeodeItem::dyn_geodeFullMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_geodeFullMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "geodeFullMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] geodeCrackedMeshes
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::GeodeItem::dyn_geodeCrackedMeshes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_geodeCrackedMeshes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "geodeCrackedMeshes"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rayCastMaxDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GeodeItem::dyn_rayCastMaxDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_rayCastMaxDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rayCastMaxDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single sphereRayRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GeodeItem::dyn_sphereRayRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_sphereRayRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sphereRayRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single cooldownRemaining
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GeodeItem::dyn_cooldownRemaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_cooldownRemaining");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cooldownRemaining"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hitLastFrame
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GeodeItem::dyn_hitLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_hitLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitLastFrame"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GeodeItem::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasEffectsGameObject
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GeodeItem::dyn_hasEffectsGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_hasEffectsGameObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasEffectsGameObject"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean effectsHaveBeenPlayed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GeodeItem::dyn_effectsHaveBeenPlayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_effectsHaveBeenPlayed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "effectsHaveBeenPlayed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit hit
[[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& GlobalNamespace::GeodeItem::dyn_hit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_hit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hit"))->offset;
  return *reinterpret_cast<::UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit[] collidersHit
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& GlobalNamespace::GeodeItem::dyn_collidersHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_collidersHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidersHit"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RaycastHit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TransferrableObject/ItemStates currentItemState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& GlobalNamespace::GeodeItem::dyn_currentItemState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_currentItemState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentItemState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::ItemStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TransferrableObject/ItemStates prevItemState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& GlobalNamespace::GeodeItem::dyn_prevItemState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_prevItemState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevItemState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::ItemStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 index
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GeodeItem::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GeodeItem.InitToDefault
void GlobalNamespace::GeodeItem::InitToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::InitToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GeodeItem.OnItemStateChanged
void GlobalNamespace::GeodeItem::OnItemStateChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::OnItemStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnItemStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GeodeItem.RandomPickCrackedGeode
int GlobalNamespace::GeodeItem::RandomPickCrackedGeode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::RandomPickCrackedGeode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RandomPickCrackedGeode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: GeodeItem.OnSpawn
void GlobalNamespace::GeodeItem::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GeodeItem.Start
void GlobalNamespace::GeodeItem::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GeodeItem.ResetToDefaultState
void GlobalNamespace::GeodeItem::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GeodeItem.OnRelease
bool GlobalNamespace::GeodeItem::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: GeodeItem.LateUpdateLocal
void GlobalNamespace::GeodeItem::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GeodeItem.LateUpdateShared
void GlobalNamespace::GeodeItem::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GeodeItem::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HitChecker
#include "GlobalNamespace/HitChecker.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: GorillaTriggerColliderHandIndicator
#include "GlobalNamespace/GorillaTriggerColliderHandIndicator.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HitChecker.CheckHandHit
void GlobalNamespace::HitChecker::CheckHandHit(ByRef<int> collidersHitCount, ::UnityEngine::LayerMask layerMask, float sphereRadius, ByRef<::UnityEngine::RaycastHit> nullHit, ByRef<::ArrayW<::UnityEngine::RaycastHit>> raycastHits, ByRef<::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*> raycastHitList, ByRef<::UnityEngine::Vector3> spherecastSweep, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*> handIndicator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitChecker::CheckHandHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HitChecker", "CheckHandHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collidersHitCount), ::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(sphereRadius), ::il2cpp_utils::ExtractType(nullHit), ::il2cpp_utils::ExtractType(raycastHits), ::il2cpp_utils::ExtractType(raycastHitList), ::il2cpp_utils::ExtractType(spherecastSweep), ::il2cpp_utils::ExtractType(handIndicator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(collidersHitCount), layerMask, sphereRadius, byref(nullHit), byref(raycastHits), byref(raycastHitList), byref(spherecastSweep), byref(handIndicator));
}
// Autogenerated method: HitChecker.CheckHandIn
bool GlobalNamespace::HitChecker::CheckHandIn(ByRef<bool> anyHit, ByRef<::ArrayW<::UnityEngine::Collider*>> colliderHit, float sphereRadius, int layerMask, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*> handIndicator, ByRef<::System::Collections::Generic::List_1<::UnityEngine::Collider*>*> collidersToBeIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitChecker::CheckHandIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HitChecker", "CheckHandIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anyHit), ::il2cpp_utils::ExtractType(colliderHit), ::il2cpp_utils::ExtractType(sphereRadius), ::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(handIndicator), ::il2cpp_utils::ExtractType(collidersToBeIn)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(anyHit), byref(colliderHit), sphereRadius, layerMask, byref(handIndicator), byref(collidersToBeIn));
}
// Autogenerated method: HitChecker.RayCastHitCompare
int GlobalNamespace::HitChecker::RayCastHitCompare(::UnityEngine::RaycastHit a, ::UnityEngine::RaycastHit b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitChecker::RayCastHitCompare");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HitChecker", "RayCastHitCompare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HoldableHandle
#include "GlobalNamespace/HoldableHandle.hpp"
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
// Including type: UnityEngine.CapsuleCollider
#include "UnityEngine/CapsuleCollider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private HoldableObject holdable
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HoldableObject*& GlobalNamespace::HoldableHandle::dyn_holdable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableHandle::dyn_holdable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdable"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HoldableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.CapsuleCollider handleCapsuleTrigger
[[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& GlobalNamespace::HoldableHandle::dyn_handleCapsuleTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableHandle::dyn_handleCapsuleTrigger");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handleCapsuleTrigger"))->offset;
  return *reinterpret_cast<::UnityEngine::CapsuleCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoldableHandle.get_Capsule
::UnityEngine::CapsuleCollider* GlobalNamespace::HoldableHandle::get_Capsule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableHandle::get_Capsule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Capsule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::CapsuleCollider*, false>(this, ___internal__method);
}
// Autogenerated method: HoldableHandle.get_Holdable
::GlobalNamespace::HoldableObject* GlobalNamespace::HoldableHandle::get_Holdable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableHandle::get_Holdable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Holdable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::HoldableObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoldableObject.get_TwoHanded
bool GlobalNamespace::HoldableObject::get_TwoHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableObject::get_TwoHanded");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 56));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoldableObject.OnHover
void GlobalNamespace::HoldableObject::OnHover(::GlobalNamespace::InteractionPoint* pointHovered, ::UnityEngine::GameObject* hoveringHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableObject::OnHover");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointHovered, hoveringHand);
}
// Autogenerated method: HoldableObject.OnGrab
void GlobalNamespace::HoldableObject::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableObject::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: HoldableObject.OnRelease
bool GlobalNamespace::HoldableObject::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableObject::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: HoldableObject.DropItemCleanup
void GlobalNamespace::HoldableObject::DropItemCleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableObject::DropItemCleanup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 60));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegacyTransferrableObject
#include "GlobalNamespace/LegacyTransferrableObject.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: EquipmentInteractor
#include "GlobalNamespace/EquipmentInteractor.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: VRRigAnchorOverrides
#include "GlobalNamespace/VRRigAnchorOverrides.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kPositionStateCount
int GlobalNamespace::LegacyTransferrableObject::_get_kPositionStateCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::_get_kPositionStateCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LegacyTransferrableObject", "kPositionStateCount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kPositionStateCount
void GlobalNamespace::LegacyTransferrableObject::_set_kPositionStateCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::_set_kPositionStateCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyTransferrableObject", "kPositionStateCount", value));
}
// Autogenerated instance field getter
// Get instance field: protected EquipmentInteractor interactor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EquipmentInteractor*& GlobalNamespace::LegacyTransferrableObject::dyn_interactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_interactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interactor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EquipmentInteractor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::LegacyTransferrableObject::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig myOnlineRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::LegacyTransferrableObject::dyn_myOnlineRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_myOnlineRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myOnlineRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean latched
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_latched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_latched");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "latched"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single indexTrigger
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyTransferrableObject::dyn_indexTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_indexTrigger");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indexTrigger"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testActivate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_testActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_testActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testActivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testDeactivate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_testDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_testDeactivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testDeactivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single myThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyTransferrableObject::dyn_myThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_myThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hysterisis
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyTransferrableObject::dyn_hysterisis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_hysterisis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hysterisis"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean flipOnXForLeftHand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_flipOnXForLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_flipOnXForLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipOnXForLeftHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean flipOnYForLeftHand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_flipOnYForLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_flipOnYForLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipOnYForLeftHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean flipOnXForLeftArm
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_flipOnXForLeftArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_flipOnXForLeftArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipOnXForLeftArm"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableStealing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_disableStealing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_disableStealing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableStealing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TransferrableObject/PositionState initState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::LegacyTransferrableObject::dyn_initState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_initState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/ItemStates itemState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& GlobalNamespace::LegacyTransferrableObject::dyn_itemState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_itemState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::ItemStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions/DropPositions storedZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& GlobalNamespace::LegacyTransferrableObject::dyn_storedZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_storedZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "storedZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions::DropPositions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected TransferrableObject/PositionState previousState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::LegacyTransferrableObject::dyn_previousState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_previousState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/PositionState currentState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::LegacyTransferrableObject::dyn_currentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_currentState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions/DropPositions dockPositions
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& GlobalNamespace::LegacyTransferrableObject::dyn_dockPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_dockPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dockPositions"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions::DropPositions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig targetRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::LegacyTransferrableObject::dyn_targetRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_targetRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions targetDock
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& GlobalNamespace::LegacyTransferrableObject::dyn_targetDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_targetDock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetDock"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRigAnchorOverrides anchorOverrides
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigAnchorOverrides*& GlobalNamespace::LegacyTransferrableObject::dyn_anchorOverrides() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_anchorOverrides");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchorOverrides"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRigAnchorOverrides**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canAutoGrabLeft
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_canAutoGrabLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_canAutoGrabLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canAutoGrabLeft"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canAutoGrabRight
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_canAutoGrabRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_canAutoGrabRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canAutoGrabRight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 objectIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegacyTransferrableObject::dyn_objectIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_objectIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform anchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::LegacyTransferrableObject::dyn_anchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_anchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InteractionPoint gripInteractor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& GlobalNamespace::LegacyTransferrableObject::dyn_gripInteractor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_gripInteractor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripInteractor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::InteractionPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform grabAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::LegacyTransferrableObject::dyn_grabAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_grabAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 myIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegacyTransferrableObject::dyn_myIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_myIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileHeld
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::LegacyTransferrableObject::dyn_gameObjectsActiveOnlyWhileHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_gameObjectsActiveOnlyWhileHeld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObjectsActiveOnlyWhileHeld"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject worldShareableInstance
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::LegacyTransferrableObject::dyn_worldShareableInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_worldShareableInstance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "worldShareableInstance"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single interpTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyTransferrableObject::dyn_interpTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_interpTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single interpDt
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyTransferrableObject::dyn_interpDt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_interpDt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpDt"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 interpStartPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LegacyTransferrableObject::dyn_interpStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_interpStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpStartPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion interpStartRot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::LegacyTransferrableObject::dyn_interpStartRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_interpStartRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpStartRot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 enabledOnFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegacyTransferrableObject::dyn_enabledOnFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_enabledOnFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enabledOnFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 initOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LegacyTransferrableObject::dyn_initOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_initOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion initRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::LegacyTransferrableObject::dyn_initRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_initRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canDrop
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_canDrop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_canDrop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canDrop"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean shareable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_shareable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_shareable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shareable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean detatchOnGrab
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_detatchOnGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_detatchOnGrab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "detatchOnGrab"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean wasHover
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_wasHover() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_wasHover");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasHover"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isHover
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_isHover() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_isHover");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isHover"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disableItem
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyTransferrableObject::dyn_disableItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_disableItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableItem"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegacyTransferrableObject/InterpolateState interpState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegacyTransferrableObject::InterpolateState& GlobalNamespace::LegacyTransferrableObject::dyn_interpState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::dyn_interpState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegacyTransferrableObject::InterpolateState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegacyTransferrableObject.Awake
void GlobalNamespace::LegacyTransferrableObject::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 61));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.Start
void GlobalNamespace::LegacyTransferrableObject::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 62));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.SpawnShareableObject
void GlobalNamespace::LegacyTransferrableObject::SpawnShareableObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::SpawnShareableObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnShareableObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.SetWorldShareableItem
void GlobalNamespace::LegacyTransferrableObject::SetWorldShareableItem(::UnityEngine::GameObject* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::SetWorldShareableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorldShareableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
}
// Autogenerated method: LegacyTransferrableObject.OnWorldShareableItemSpawn
void GlobalNamespace::LegacyTransferrableObject::OnWorldShareableItemSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnWorldShareableItemSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 63));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnWorldShareableItemDeallocated
void GlobalNamespace::LegacyTransferrableObject::OnWorldShareableItemDeallocated(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnWorldShareableItemDeallocated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 64));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: LegacyTransferrableObject.LateUpdate
void GlobalNamespace::LegacyTransferrableObject::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::LateUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 65));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.DefaultAnchor
::UnityEngine::Transform* GlobalNamespace::LegacyTransferrableObject::DefaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::DefaultAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.GetAnchor
::UnityEngine::Transform* GlobalNamespace::LegacyTransferrableObject::GetAnchor(::GlobalNamespace::TransferrableObject::PositionState pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::GetAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, pos);
}
// Autogenerated method: LegacyTransferrableObject.Attached
bool GlobalNamespace::LegacyTransferrableObject::Attached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::Attached");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Attached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.UpdateFollowXform
void GlobalNamespace::LegacyTransferrableObject::UpdateFollowXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::UpdateFollowXform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFollowXform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.DropItem
void GlobalNamespace::LegacyTransferrableObject::DropItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::DropItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DropItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.LateUpdateShared
void GlobalNamespace::LegacyTransferrableObject::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 66));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.ResetXf
void GlobalNamespace::LegacyTransferrableObject::ResetXf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::ResetXf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetXf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.ReDock
void GlobalNamespace::LegacyTransferrableObject::ReDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::ReDock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReDock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.HandleLocalInput
void GlobalNamespace::LegacyTransferrableObject::HandleLocalInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::HandleLocalInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLocalInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.LateUpdateLocal
void GlobalNamespace::LegacyTransferrableObject::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 67));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.LateUpdateReplicated
void GlobalNamespace::LegacyTransferrableObject::LateUpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::LateUpdateReplicated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 68));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.ResetToDefaultState
void GlobalNamespace::LegacyTransferrableObject::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 69));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnHover
void GlobalNamespace::LegacyTransferrableObject::OnHover(::GlobalNamespace::InteractionPoint* pointHovered, ::UnityEngine::GameObject* hoveringHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnHover");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 70));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointHovered, hoveringHand);
}
// Autogenerated method: LegacyTransferrableObject.ActivateItemFX
void GlobalNamespace::LegacyTransferrableObject::ActivateItemFX(float hapticStrength, float hapticDuration, int soundIndex, float soundVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::ActivateItemFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateItemFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hapticStrength), ::il2cpp_utils::ExtractType(hapticDuration), ::il2cpp_utils::ExtractType(soundIndex), ::il2cpp_utils::ExtractType(soundVolume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hapticStrength, hapticDuration, soundIndex, soundVolume);
}
// Autogenerated method: LegacyTransferrableObject.PlayNote
void GlobalNamespace::LegacyTransferrableObject::PlayNote(int note, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::PlayNote");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 71));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, note, volume);
}
// Autogenerated method: LegacyTransferrableObject.AutoGrabTrue
bool GlobalNamespace::LegacyTransferrableObject::AutoGrabTrue(bool leftGrabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::AutoGrabTrue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 72));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, leftGrabbingHand);
}
// Autogenerated method: LegacyTransferrableObject.CanActivate
bool GlobalNamespace::LegacyTransferrableObject::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 73));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.CanDeactivate
bool GlobalNamespace::LegacyTransferrableObject::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 74));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnActivate
void GlobalNamespace::LegacyTransferrableObject::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnDeactivate
void GlobalNamespace::LegacyTransferrableObject::OnDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 76));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.IsMyItem
bool GlobalNamespace::LegacyTransferrableObject::IsMyItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::IsMyItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 77));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.IsHeld
bool GlobalNamespace::LegacyTransferrableObject::IsHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::IsHeld");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 78));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.InHand
bool GlobalNamespace::LegacyTransferrableObject::InHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::InHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.Dropped
bool GlobalNamespace::LegacyTransferrableObject::Dropped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::Dropped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dropped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.InLeftHand
bool GlobalNamespace::LegacyTransferrableObject::InLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::InLeftHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InLeftHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.InRightHand
bool GlobalNamespace::LegacyTransferrableObject::InRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::InRightHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InRightHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnChest
bool GlobalNamespace::LegacyTransferrableObject::OnChest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnChest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnChest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnShoulder
bool GlobalNamespace::LegacyTransferrableObject::OnShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnShoulder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnShoulder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OwningPlayer
::Photon::Realtime::Player* GlobalNamespace::LegacyTransferrableObject::OwningPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OwningPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OwningPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Photon::Realtime::Player*, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnEnable
void GlobalNamespace::LegacyTransferrableObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnDisable
void GlobalNamespace::LegacyTransferrableObject::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnJoinedRoom
void GlobalNamespace::LegacyTransferrableObject::OnJoinedRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnJoinedRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnLeftRoom
void GlobalNamespace::LegacyTransferrableObject::OnLeftRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyTransferrableObject.OnPlayerLeftRoom
void GlobalNamespace::LegacyTransferrableObject::OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnPlayerLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 44));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, otherPlayer);
}
// Autogenerated method: LegacyTransferrableObject.OnGrab
void GlobalNamespace::LegacyTransferrableObject::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: LegacyTransferrableObject.OnRelease
bool GlobalNamespace::LegacyTransferrableObject::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: LegacyTransferrableObject.DropItemCleanup
void GlobalNamespace::LegacyTransferrableObject::DropItemCleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::DropItemCleanup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 60));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegacyTransferrableObject/InterpolateState
#include "GlobalNamespace/LegacyTransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LegacyTransferrableObject/InterpolateState None
::GlobalNamespace::LegacyTransferrableObject::InterpolateState GlobalNamespace::LegacyTransferrableObject::InterpolateState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::InterpolateState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegacyTransferrableObject::InterpolateState>("", "LegacyTransferrableObject/InterpolateState", "None"));
}
// Autogenerated static field setter
// Set static field: static public LegacyTransferrableObject/InterpolateState None
void GlobalNamespace::LegacyTransferrableObject::InterpolateState::_set_None(::GlobalNamespace::LegacyTransferrableObject::InterpolateState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::InterpolateState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyTransferrableObject/InterpolateState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LegacyTransferrableObject/InterpolateState Interpolating
::GlobalNamespace::LegacyTransferrableObject::InterpolateState GlobalNamespace::LegacyTransferrableObject::InterpolateState::_get_Interpolating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::InterpolateState::_get_Interpolating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegacyTransferrableObject::InterpolateState>("", "LegacyTransferrableObject/InterpolateState", "Interpolating"));
}
// Autogenerated static field setter
// Set static field: static public LegacyTransferrableObject/InterpolateState Interpolating
void GlobalNamespace::LegacyTransferrableObject::InterpolateState::_set_Interpolating(::GlobalNamespace::LegacyTransferrableObject::InterpolateState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::InterpolateState::_set_Interpolating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyTransferrableObject/InterpolateState", "Interpolating", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegacyTransferrableObject::InterpolateState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyTransferrableObject::InterpolateState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ManipulatableLever
#include "GlobalNamespace/ManipulatableLever.hpp"
// Including type: ManipulatableLever/LeverNotch
#include "GlobalNamespace/ManipulatableLever_LeverNotch.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single breakDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableLever::dyn_breakDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::dyn_breakDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "breakDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform leverGrip
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::ManipulatableLever::dyn_leverGrip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::dyn_leverGrip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leverGrip"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableLever::dyn_maxAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::dyn_maxAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableLever::dyn_minAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::dyn_minAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private ManipulatableLever/LeverNotch[] notches
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ManipulatableLever::LeverNotch*>& GlobalNamespace::ManipulatableLever::dyn_notches() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::dyn_notches");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "notches"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::ManipulatableLever::LeverNotch*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 localSpace
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::ManipulatableLever::dyn_localSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::dyn_localSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localSpace"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ManipulatableLever.Awake
void GlobalNamespace::ManipulatableLever::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableLever.SetValue
void GlobalNamespace::ManipulatableLever::SetValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::SetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ManipulatableLever.SetNotch
void GlobalNamespace::ManipulatableLever::SetNotch(int notchValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::SetNotch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNotch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notchValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, notchValue);
}
// Autogenerated method: ManipulatableLever.GetValue
float GlobalNamespace::ManipulatableLever::GetValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableLever.GetNotch
int GlobalNamespace::ManipulatableLever::GetNotch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::GetNotch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNotch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableLever.ShouldHandDetach
bool GlobalNamespace::ManipulatableLever::ShouldHandDetach(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::ShouldHandDetach");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 63));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: ManipulatableLever.OnHeldUpdate
void GlobalNamespace::ManipulatableLever::OnHeldUpdate(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::OnHeldUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 64));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ManipulatableLever/LeverNotch
#include "GlobalNamespace/ManipulatableLever_LeverNotch.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single minAngleValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableLever::LeverNotch::dyn_minAngleValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::LeverNotch::dyn_minAngleValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minAngleValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxAngleValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableLever::LeverNotch::dyn_maxAngleValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::LeverNotch::dyn_maxAngleValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxAngleValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value
[[deprecated("Use field access instead!")]] int& GlobalNamespace::ManipulatableLever::LeverNotch::dyn_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableLever::LeverNotch::dyn_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ManipulatableObject
#include "GlobalNamespace/ManipulatableObject.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected System.Boolean isHeld
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ManipulatableObject::dyn_isHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::dyn_isHeld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isHeld"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject holdingHand
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::ManipulatableObject::dyn_holdingHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::dyn_holdingHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdingHand"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ManipulatableObject.OnStartManipulation
void GlobalNamespace::ManipulatableObject::OnStartManipulation(::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::OnStartManipulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 61));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grabbingHand);
}
// Autogenerated method: ManipulatableObject.OnStopManipulation
void GlobalNamespace::ManipulatableObject::OnStopManipulation(::UnityEngine::GameObject* releasingHand, ::UnityEngine::Vector3 releaseVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::OnStopManipulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 62));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, releasingHand, releaseVelocity);
}
// Autogenerated method: ManipulatableObject.ShouldHandDetach
bool GlobalNamespace::ManipulatableObject::ShouldHandDetach(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::ShouldHandDetach");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 63));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: ManipulatableObject.OnHeldUpdate
void GlobalNamespace::ManipulatableObject::OnHeldUpdate(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::OnHeldUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 64));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: ManipulatableObject.OnReleasedUpdate
void GlobalNamespace::ManipulatableObject::OnReleasedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::OnReleasedUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 65));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableObject.LateUpdate
void GlobalNamespace::ManipulatableObject::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::LateUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 66));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableObject.OnHover
void GlobalNamespace::ManipulatableObject::OnHover(::GlobalNamespace::InteractionPoint* pointHovered, ::UnityEngine::GameObject* hoveringHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::OnHover");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointHovered, hoveringHand);
}
// Autogenerated method: ManipulatableObject.OnGrab
void GlobalNamespace::ManipulatableObject::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: ManipulatableObject.OnRelease
bool GlobalNamespace::ManipulatableObject::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: ManipulatableObject.DropItemCleanup
void GlobalNamespace::ManipulatableObject::DropItemCleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableObject::DropItemCleanup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 60));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TestManipulatableCube
#include "GlobalNamespace/TestManipulatableCube.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single breakDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableCube::dyn_breakDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_breakDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "breakDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxXOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableCube::dyn_maxXOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_maxXOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxXOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minXOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableCube::dyn_minXOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_minXOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minXOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxYOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableCube::dyn_maxYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_maxYOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxYOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minYOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableCube::dyn_minYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_minYOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minYOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxZOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableCube::dyn_maxZOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_maxZOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxZOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minZOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableCube::dyn_minZOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_minZOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minZOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean applyReleaseVelocity
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TestManipulatableCube::dyn_applyReleaseVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_applyReleaseVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "applyReleaseVelocity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single releaseDrag
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableCube::dyn_releaseDrag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_releaseDrag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "releaseDrag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 localSpace
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::TestManipulatableCube::dyn_localSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_localSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localSpace"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startingPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TestManipulatableCube::dyn_startingPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_startingPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TestManipulatableCube::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::dyn_velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TestManipulatableCube.Awake
void GlobalNamespace::TestManipulatableCube::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TestManipulatableCube.GetLocalSpace
::UnityEngine::Matrix4x4 GlobalNamespace::TestManipulatableCube::GetLocalSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::GetLocalSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLocalSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: TestManipulatableCube.SetCubeToSpecificPosition
void GlobalNamespace::TestManipulatableCube::SetCubeToSpecificPosition(::UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::SetCubeToSpecificPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCubeToSpecificPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: TestManipulatableCube.SetCubeToSpecificPosition
void GlobalNamespace::TestManipulatableCube::SetCubeToSpecificPosition(float x, float y, float z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::SetCubeToSpecificPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCubeToSpecificPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, y, z);
}
// Autogenerated method: TestManipulatableCube.OnStartManipulation
void GlobalNamespace::TestManipulatableCube::OnStartManipulation(::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::OnStartManipulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 61));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grabbingHand);
}
// Autogenerated method: TestManipulatableCube.OnStopManipulation
void GlobalNamespace::TestManipulatableCube::OnStopManipulation(::UnityEngine::GameObject* releasingHand, ::UnityEngine::Vector3 releaseVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::OnStopManipulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 62));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, releasingHand, releaseVelocity);
}
// Autogenerated method: TestManipulatableCube.ShouldHandDetach
bool GlobalNamespace::TestManipulatableCube::ShouldHandDetach(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::ShouldHandDetach");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 63));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: TestManipulatableCube.OnHeldUpdate
void GlobalNamespace::TestManipulatableCube::OnHeldUpdate(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::OnHeldUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 64));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: TestManipulatableCube.OnReleasedUpdate
void GlobalNamespace::TestManipulatableCube::OnReleasedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableCube::OnReleasedUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 65));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TestManipulatableSpinner
#include "GlobalNamespace/TestManipulatableSpinner.hpp"
// Including type: ManipulatableSpinner
#include "GlobalNamespace/ManipulatableSpinner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ManipulatableSpinner spinner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ManipulatableSpinner*& GlobalNamespace::TestManipulatableSpinner::dyn_spinner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinner::dyn_spinner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spinner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ManipulatableSpinner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableSpinner::dyn_rotationScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinner::dyn_rotationScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TestManipulatableSpinner.Start
void GlobalNamespace::TestManipulatableSpinner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TestManipulatableSpinner.LateUpdate
void GlobalNamespace::TestManipulatableSpinner::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinner::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TestManipulatableSpinnerIcons
#include "GlobalNamespace/TestManipulatableSpinnerIcons.hpp"
// Including type: ManipulatableSpinner
#include "GlobalNamespace/ManipulatableSpinner.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ManipulatableSpinner spinner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ManipulatableSpinner*& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_spinner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_spinner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spinner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ManipulatableSpinner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_rotationScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_rotationScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 rollerElementCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_rollerElementCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_rollerElementCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rollerElementCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject rollerElementTemplate
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_rollerElementTemplate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_rollerElementTemplate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rollerElementTemplate"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject iconCanvas
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_iconCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_iconCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iconCanvas"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject iconElementTemplate
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_iconElementTemplate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_iconElementTemplate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iconElementTemplate"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single iconOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_iconOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_iconOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iconOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rollerElementAngle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_rollerElementAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_rollerElementAngle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rollerElementAngle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.UI.Text> visibleIcons
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>*& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_visibleIcons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_visibleIcons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "visibleIcons"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::UI::Text*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentRotation
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_currentRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_currentRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentRotation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 scrollableCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_scrollableCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_scrollableCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scrollableCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 selectedIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TestManipulatableSpinnerIcons::dyn_selectedIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::dyn_selectedIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "selectedIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TestManipulatableSpinnerIcons.Awake
void GlobalNamespace::TestManipulatableSpinnerIcons::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TestManipulatableSpinnerIcons.LateUpdate
void GlobalNamespace::TestManipulatableSpinnerIcons::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TestManipulatableSpinnerIcons.GenerateRollers
void GlobalNamespace::TestManipulatableSpinnerIcons::GenerateRollers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::GenerateRollers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateRollers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TestManipulatableSpinnerIcons.UpdateSelectedIndex
void GlobalNamespace::TestManipulatableSpinnerIcons::UpdateSelectedIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::UpdateSelectedIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSelectedIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TestManipulatableSpinnerIcons.UpdateRollers
void GlobalNamespace::TestManipulatableSpinnerIcons::UpdateRollers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestManipulatableSpinnerIcons::UpdateRollers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRollers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ManipulatableSlider
#include "GlobalNamespace/ManipulatableSlider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single breakDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSlider::dyn_breakDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_breakDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "breakDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxXOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSlider::dyn_maxXOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_maxXOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxXOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minXOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSlider::dyn_minXOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_minXOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minXOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxYOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSlider::dyn_maxYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_maxYOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxYOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minYOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSlider::dyn_minYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_minYOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minYOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxZOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSlider::dyn_maxZOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_maxZOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxZOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minZOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSlider::dyn_minZOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_minZOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minZOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean applyReleaseVelocity
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ManipulatableSlider::dyn_applyReleaseVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_applyReleaseVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "applyReleaseVelocity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single releaseDrag
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSlider::dyn_releaseDrag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_releaseDrag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "releaseDrag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 localSpace
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::ManipulatableSlider::dyn_localSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_localSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localSpace"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startingPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ManipulatableSlider::dyn_startingPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_startingPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::ManipulatableSlider::dyn_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::dyn_velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ManipulatableSlider.Awake
void GlobalNamespace::ManipulatableSlider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableSlider.SetProgress
void GlobalNamespace::ManipulatableSlider::SetProgress(float x, float y, float z) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::SetProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, y, z);
}
// Autogenerated method: ManipulatableSlider.GetProgressX
float GlobalNamespace::ManipulatableSlider::GetProgressX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::GetProgressX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProgressX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableSlider.GetProgressY
float GlobalNamespace::ManipulatableSlider::GetProgressY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::GetProgressY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProgressY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableSlider.GetProgressZ
float GlobalNamespace::ManipulatableSlider::GetProgressZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::GetProgressZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProgressZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableSlider.OnStartManipulation
void GlobalNamespace::ManipulatableSlider::OnStartManipulation(::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::OnStartManipulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 61));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grabbingHand);
}
// Autogenerated method: ManipulatableSlider.OnStopManipulation
void GlobalNamespace::ManipulatableSlider::OnStopManipulation(::UnityEngine::GameObject* releasingHand, ::UnityEngine::Vector3 releaseVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::OnStopManipulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 62));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, releasingHand, releaseVelocity);
}
// Autogenerated method: ManipulatableSlider.ShouldHandDetach
bool GlobalNamespace::ManipulatableSlider::ShouldHandDetach(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::ShouldHandDetach");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 63));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: ManipulatableSlider.OnHeldUpdate
void GlobalNamespace::ManipulatableSlider::OnHeldUpdate(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::OnHeldUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 64));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: ManipulatableSlider.OnReleasedUpdate
void GlobalNamespace::ManipulatableSlider::OnReleasedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSlider::OnReleasedUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 65));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ManipulatableSpinner
#include "GlobalNamespace/ManipulatableSpinner.hpp"
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single breakDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSpinner::dyn_breakDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_breakDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "breakDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean applyReleaseVelocity
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ManipulatableSpinner::dyn_applyReleaseVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_applyReleaseVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "applyReleaseVelocity"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single releaseDrag
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSpinner::dyn_releaseDrag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_releaseDrag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "releaseDrag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lowSpeedThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSpinner::dyn_lowSpeedThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_lowSpeedThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lowSpeedThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lowSpeedDrag
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSpinner::dyn_lowSpeedDrag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_lowSpeedDrag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lowSpeedDrag"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BezierSpline spline
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BezierSpline*& GlobalNamespace::ManipulatableSpinner::dyn_spline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_spline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spline"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BezierSpline**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single previousHandT
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSpinner::dyn_previousHandT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_previousHandT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousHandT"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentHandT
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSpinner::dyn_currentHandT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_currentHandT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentHandT"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single tVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSpinner::dyn_tVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_tVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <angle>k__BackingField
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ManipulatableSpinner::dyn_$angle$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::dyn_$angle$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<angle>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ManipulatableSpinner.get_angle
float GlobalNamespace::ManipulatableSpinner::get_angle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::get_angle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_angle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableSpinner.set_angle
void GlobalNamespace::ManipulatableSpinner::set_angle(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::set_angle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_angle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ManipulatableSpinner.Awake
void GlobalNamespace::ManipulatableSpinner::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ManipulatableSpinner.FindPositionOnSpline
float GlobalNamespace::ManipulatableSpinner::FindPositionOnSpline(::UnityEngine::Vector3 grabPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::FindPositionOnSpline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindPositionOnSpline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grabPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, grabPoint);
}
// Autogenerated method: ManipulatableSpinner.SetAngle
void GlobalNamespace::ManipulatableSpinner::SetAngle(float newAngle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::SetAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newAngle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newAngle);
}
// Autogenerated method: ManipulatableSpinner.SetVelocity
void GlobalNamespace::ManipulatableSpinner::SetVelocity(float newVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::SetVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newVelocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newVelocity);
}
// Autogenerated method: ManipulatableSpinner.OnStartManipulation
void GlobalNamespace::ManipulatableSpinner::OnStartManipulation(::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::OnStartManipulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 61));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, grabbingHand);
}
// Autogenerated method: ManipulatableSpinner.OnStopManipulation
void GlobalNamespace::ManipulatableSpinner::OnStopManipulation(::UnityEngine::GameObject* releasingHand, ::UnityEngine::Vector3 releaseVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::OnStopManipulation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 62));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, releasingHand, releaseVelocity);
}
// Autogenerated method: ManipulatableSpinner.ShouldHandDetach
bool GlobalNamespace::ManipulatableSpinner::ShouldHandDetach(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::ShouldHandDetach");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 63));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hand);
}
// Autogenerated method: ManipulatableSpinner.OnHeldUpdate
void GlobalNamespace::ManipulatableSpinner::OnHeldUpdate(::UnityEngine::GameObject* hand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::OnHeldUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 64));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hand);
}
// Autogenerated method: ManipulatableSpinner.OnReleasedUpdate
void GlobalNamespace::ManipulatableSpinner::OnReleasedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ManipulatableSpinner::OnReleasedUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ManipulatableObject*), 65));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: OneStringGuitar
#include "GlobalNamespace/OneStringGuitar.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: GorillaTriggerColliderHandIndicator
#include "GlobalNamespace/GorillaTriggerColliderHandIndicator.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 chestOffsetLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_chestOffsetLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_chestOffsetLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestOffsetLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 chestOffsetRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_chestOffsetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_chestOffsetRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestOffsetRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion holdingOffsetRotationLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OneStringGuitar::dyn_holdingOffsetRotationLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_holdingOffsetRotationLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdingOffsetRotationLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion holdingOffsetRotationRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OneStringGuitar::dyn_holdingOffsetRotationRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_holdingOffsetRotationRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "holdingOffsetRotationRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion chestRotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OneStringGuitar::dyn_chestRotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_chestRotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestRotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider currentChestCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::OneStringGuitar::dyn_currentChestCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_currentChestCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentChestCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider chestColliderLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::OneStringGuitar::dyn_chestColliderLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_chestColliderLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestColliderLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider chestColliderRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::OneStringGuitar::dyn_chestColliderRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_chestColliderRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestColliderRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lerpValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_lerpValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_lerpValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::OneStringGuitar::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform parentHand
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OneStringGuitar::dyn_parentHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_parentHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentHand"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform parentHandLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OneStringGuitar::dyn_parentHandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_parentHandLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentHandLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform parentHandRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OneStringGuitar::dyn_parentHandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_parentHandRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentHandRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single unsnapDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_unsnapDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_unsnapDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "unsnapDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single snapDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_snapDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_snapDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "snapDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startPositionLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_startPositionLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_startPositionLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPositionLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion startQuatLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OneStringGuitar::dyn_startQuatLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_startQuatLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startQuatLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 reverseGripPositionLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_reverseGripPositionLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_reverseGripPositionLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reverseGripPositionLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion reverseGripQuatLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OneStringGuitar::dyn_reverseGripQuatLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_reverseGripQuatLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reverseGripQuatLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startPositionRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_startPositionRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_startPositionRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPositionRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion startQuatRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OneStringGuitar::dyn_startQuatRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_startQuatRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startQuatRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 reverseGripPositionRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_reverseGripPositionRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_reverseGripPositionRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reverseGripPositionRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion reverseGripQuatRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::OneStringGuitar::dyn_reverseGripQuatRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_reverseGripQuatRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reverseGripQuatRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single angleLerpSnap
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_angleLerpSnap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_angleLerpSnap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angleLerpSnap"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single vectorLerpSnap
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_vectorLerpSnap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_vectorLerpSnap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vectorLerpSnap"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean angleSnapped
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OneStringGuitar::dyn_angleSnapped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_angleSnapped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angleSnapped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean positionSnapped
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OneStringGuitar::dyn_positionSnapped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_positionSnapped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionSnapped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform chestTouch
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OneStringGuitar::dyn_chestTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_chestTouch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestTouch"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 collidersHitCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OneStringGuitar::dyn_collidersHitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_collidersHitCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidersHitCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider[] collidersHit
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::OneStringGuitar::dyn_collidersHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_collidersHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidersHit"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit[] raycastHits
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& GlobalNamespace::OneStringGuitar::dyn_raycastHits() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_raycastHits");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "raycastHits"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RaycastHit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.RaycastHit> raycastHitList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*& GlobalNamespace::OneStringGuitar::dyn_raycastHitList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_raycastHitList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "raycastHitList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit nullHit
[[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& GlobalNamespace::OneStringGuitar::dyn_nullHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_nullHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nullHit"))->offset;
  return *reinterpret_cast<::UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider[] collidersToBeIn
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::OneStringGuitar::dyn_collidersToBeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_collidersToBeIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidersToBeIn"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask interactableMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::OneStringGuitar::dyn_interactableMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_interactableMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interactableMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 currentFretIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OneStringGuitar::dyn_currentFretIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_currentFretIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentFretIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 lastFretIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OneStringGuitar::dyn_lastFretIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_lastFretIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastFretIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider[] frets
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::OneStringGuitar::dyn_frets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_frets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frets"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Collider> fretsList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& GlobalNamespace::OneStringGuitar::dyn_fretsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_fretsList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fretsList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Collider*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] audioClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::OneStringGuitar::dyn_audioClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_audioClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTriggerColliderHandIndicator leftHandIndicator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& GlobalNamespace::OneStringGuitar::dyn_leftHandIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_leftHandIndicator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandIndicator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaTriggerColliderHandIndicator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTriggerColliderHandIndicator rightHandIndicator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& GlobalNamespace::OneStringGuitar::dyn_rightHandIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_rightHandIndicator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandIndicator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaTriggerColliderHandIndicator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTriggerColliderHandIndicator fretHandIndicator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& GlobalNamespace::OneStringGuitar::dyn_fretHandIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_fretHandIndicator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fretHandIndicator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaTriggerColliderHandIndicator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTriggerColliderHandIndicator strumHandIndicator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& GlobalNamespace::OneStringGuitar::dyn_strumHandIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_strumHandIndicator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strumHandIndicator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaTriggerColliderHandIndicator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single sphereRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_sphereRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_sphereRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sphereRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean anyHit
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OneStringGuitar::dyn_anyHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_anyHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anyHit"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean handIn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OneStringGuitar::dyn_handIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_handIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handIn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 spherecastSweep
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_spherecastSweep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_spherecastSweep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spherecastSweep"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider strumCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::OneStringGuitar::dyn_strumCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_strumCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strumCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_maxVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_maxVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_minVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_minVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_maxVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_maxVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Collider> strumList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& GlobalNamespace::OneStringGuitar::dyn_strumList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_strumList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "strumList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Collider*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 selfInstrumentIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OneStringGuitar::dyn_selfInstrumentIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_selfInstrumentIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "selfInstrumentIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private OneStringGuitar/GuitarStates lastState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::OneStringGuitar::GuitarStates& GlobalNamespace::OneStringGuitar::dyn_lastState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_lastState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::OneStringGuitar::GuitarStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startingLeftChestOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_startingLeftChestOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_startingLeftChestOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingLeftChestOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startingRightChestOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::OneStringGuitar::dyn_startingRightChestOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_startingRightChestOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingRightChestOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single startingUnsnapDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OneStringGuitar::dyn_startingUnsnapDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::dyn_startingUnsnapDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingUnsnapDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OneStringGuitar._GetChestColliderByPath
::UnityEngine::Collider* GlobalNamespace::OneStringGuitar::_GetChestColliderByPath(::GlobalNamespace::VRRig* vrRig, ::StringW chestColliderLeftPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::_GetChestColliderByPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_GetChestColliderByPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vrRig), ::il2cpp_utils::ExtractType(chestColliderLeftPath)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Collider*, false>(this, ___internal__method, vrRig, chestColliderLeftPath);
}
// Autogenerated method: OneStringGuitar.Unsnap
bool GlobalNamespace::OneStringGuitar::Unsnap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::Unsnap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unsnap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.CheckFretFinger
void GlobalNamespace::OneStringGuitar::CheckFretFinger(::UnityEngine::Transform* finger) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::CheckFretFinger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckFretFinger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finger)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, finger);
}
// Autogenerated method: OneStringGuitar.UpdateNonPlayingPosition
void GlobalNamespace::OneStringGuitar::UpdateNonPlayingPosition(::UnityEngine::Vector3 positionTarget, ::UnityEngine::Quaternion rotationTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::UpdateNonPlayingPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateNonPlayingPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionTarget), ::il2cpp_utils::ExtractType(rotationTarget)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, positionTarget, rotationTarget);
}
// Autogenerated method: OneStringGuitar.GenerateVectorOffsetLeft
void GlobalNamespace::OneStringGuitar::GenerateVectorOffsetLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GenerateVectorOffsetLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateVectorOffsetLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.GenerateVectorOffsetRight
void GlobalNamespace::OneStringGuitar::GenerateVectorOffsetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GenerateVectorOffsetRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateVectorOffsetRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.GenerateReverseGripOffsetLeft
void GlobalNamespace::OneStringGuitar::GenerateReverseGripOffsetLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GenerateReverseGripOffsetLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateReverseGripOffsetLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.GenerateClubOffsetLeft
void GlobalNamespace::OneStringGuitar::GenerateClubOffsetLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GenerateClubOffsetLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateClubOffsetLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.GenerateReverseGripOffsetRight
void GlobalNamespace::OneStringGuitar::GenerateReverseGripOffsetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GenerateReverseGripOffsetRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateReverseGripOffsetRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.GenerateClubOffsetRight
void GlobalNamespace::OneStringGuitar::GenerateClubOffsetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GenerateClubOffsetRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateClubOffsetRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.TestClubPositionRight
void GlobalNamespace::OneStringGuitar::TestClubPositionRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::TestClubPositionRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestClubPositionRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.TestReverseGripPositionRight
void GlobalNamespace::OneStringGuitar::TestReverseGripPositionRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::TestReverseGripPositionRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestReverseGripPositionRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.TestPlayingPositionRight
void GlobalNamespace::OneStringGuitar::TestPlayingPositionRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::TestPlayingPositionRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestPlayingPositionRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.GetDefaultTransformationMatrix
::UnityEngine::Matrix4x4 GlobalNamespace::OneStringGuitar::GetDefaultTransformationMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GetDefaultTransformationMatrix");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 79));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.OnSpawn
void GlobalNamespace::OneStringGuitar::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.OnEnable
void GlobalNamespace::OneStringGuitar::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.OnDisable
void GlobalNamespace::OneStringGuitar::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.OnRelease
bool GlobalNamespace::OneStringGuitar::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: OneStringGuitar.LateUpdateShared
void GlobalNamespace::OneStringGuitar::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.PlayNote
void GlobalNamespace::OneStringGuitar::PlayNote(int note, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::PlayNote");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 94));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, note, volume);
}
// Autogenerated method: OneStringGuitar.CanDeactivate
bool GlobalNamespace::OneStringGuitar::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 97));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.CanActivate
bool GlobalNamespace::OneStringGuitar::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 96));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OneStringGuitar.OnActivate
void GlobalNamespace::OneStringGuitar::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: OneStringGuitar/GuitarStates
#include "GlobalNamespace/OneStringGuitar.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OneStringGuitar/GuitarStates Club
::GlobalNamespace::OneStringGuitar::GuitarStates GlobalNamespace::OneStringGuitar::GuitarStates::_get_Club() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GuitarStates::_get_Club");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OneStringGuitar::GuitarStates>("", "OneStringGuitar/GuitarStates", "Club"));
}
// Autogenerated static field setter
// Set static field: static public OneStringGuitar/GuitarStates Club
void GlobalNamespace::OneStringGuitar::GuitarStates::_set_Club(::GlobalNamespace::OneStringGuitar::GuitarStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GuitarStates::_set_Club");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OneStringGuitar/GuitarStates", "Club", value));
}
// Autogenerated static field getter
// Get static field: static public OneStringGuitar/GuitarStates HeldReverseGrip
::GlobalNamespace::OneStringGuitar::GuitarStates GlobalNamespace::OneStringGuitar::GuitarStates::_get_HeldReverseGrip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GuitarStates::_get_HeldReverseGrip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OneStringGuitar::GuitarStates>("", "OneStringGuitar/GuitarStates", "HeldReverseGrip"));
}
// Autogenerated static field setter
// Set static field: static public OneStringGuitar/GuitarStates HeldReverseGrip
void GlobalNamespace::OneStringGuitar::GuitarStates::_set_HeldReverseGrip(::GlobalNamespace::OneStringGuitar::GuitarStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GuitarStates::_set_HeldReverseGrip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OneStringGuitar/GuitarStates", "HeldReverseGrip", value));
}
// Autogenerated static field getter
// Get static field: static public OneStringGuitar/GuitarStates Playing
::GlobalNamespace::OneStringGuitar::GuitarStates GlobalNamespace::OneStringGuitar::GuitarStates::_get_Playing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GuitarStates::_get_Playing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::OneStringGuitar::GuitarStates>("", "OneStringGuitar/GuitarStates", "Playing"));
}
// Autogenerated static field setter
// Set static field: static public OneStringGuitar/GuitarStates Playing
void GlobalNamespace::OneStringGuitar::GuitarStates::_set_Playing(::GlobalNamespace::OneStringGuitar::GuitarStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GuitarStates::_set_Playing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OneStringGuitar/GuitarStates", "Playing", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::OneStringGuitar::GuitarStates::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::GuitarStates::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: OverridePaperDoll
#include "GlobalNamespace/OverridePaperDoll.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject rightSideOverride
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::OverridePaperDoll::dyn_rightSideOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OverridePaperDoll::dyn_rightSideOverride");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightSideOverride"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean replacesHeadMesh
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::OverridePaperDoll::dyn_replacesHeadMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OverridePaperDoll::dyn_replacesHeadMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "replacesHeadMesh"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: OwlLook
#include "GlobalNamespace/OwlLook.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform head
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OwlLook::dyn_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform lookTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OwlLook::dyn_lookTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_lookTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform neck
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::OwlLook::dyn_neck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_neck");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "neck"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lookRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OwlLook::dyn_lookRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_lookRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider[] overlapColliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::OwlLook::dyn_overlapColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_overlapColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlapColliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<VRRig> rigs
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>*& GlobalNamespace::OwlLook::dyn_rigs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_rigs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigs"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask layerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::OwlLook::dyn_layerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_layerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OwlLook::dyn_rotSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_rotSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lookAtAngleDegrees
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OwlLook::dyn_lookAtAngleDegrees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_lookAtAngleDegrees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookAtAngleDegrees"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxNeckY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OwlLook::dyn_maxNeckY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_maxNeckY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxNeckY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minNeckY
[[deprecated("Use field access instead!")]] float& GlobalNamespace::OwlLook::dyn_minNeckY() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_minNeckY");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minNeckY"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::OwlLook::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: OwlLook.Awake
void GlobalNamespace::OwlLook::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OwlLook.LateUpdate
void GlobalNamespace::OwlLook::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OwlLook::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlantableObject
#include "GlobalNamespace/PlantableObject.hpp"
// Including type: PlantableObject/<>c__DisplayClass41_0
#include "GlobalNamespace/PlantableObject_--c__DisplayClass41_0.hpp"
// Including type: PlantablePoint
#include "GlobalNamespace/PlantablePoint.hpp"
// Including type: UnityEngine.SkinnedMeshRenderer
#include "UnityEngine/SkinnedMeshRenderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public PlantablePoint point
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlantablePoint*& GlobalNamespace::PlantableObject::dyn_point() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_point");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "point"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlantablePoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single respawnAfterDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlantableObject::dyn_respawnAfterDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_respawnAfterDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "respawnAfterDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single respawnAtTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PlantableObject::dyn_respawnAtTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_respawnAtTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "respawnAtTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.SkinnedMeshRenderer flagRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& GlobalNamespace::PlantableObject::dyn_flagRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_flagRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flagRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SkinnedMeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 colorRShaderPropID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PlantableObject::dyn_colorRShaderPropID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_colorRShaderPropID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorRShaderPropID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 colorGShaderPropID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PlantableObject::dyn_colorGShaderPropID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_colorGShaderPropID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorGShaderPropID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 colorBShaderPropID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PlantableObject::dyn_colorBShaderPropID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_colorBShaderPropID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorBShaderPropID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock materialPropertyBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::PlantableObject::dyn_materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_materialPropertyBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "materialPropertyBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _colorR
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::PlantableObject::dyn__colorR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn__colorR");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorR"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color _colorG
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::PlantableObject::dyn__colorG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn__colorG");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colorG"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <planted>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PlantableObject::dyn_$planted$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_$planted$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<planted>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform flagTip
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PlantableObject::dyn_flagTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_flagTip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flagTip"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlantableObject/AppliedColors[] dippedColors
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::PlantableObject::AppliedColors>& GlobalNamespace::PlantableObject::dyn_dippedColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_dippedColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dippedColors"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::PlantableObject::AppliedColors>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 currentDipIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PlantableObject::dyn_currentDipIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::dyn_currentDipIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentDipIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlantableObject.AssureShaderStuff
void GlobalNamespace::PlantableObject::AssureShaderStuff() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AssureShaderStuff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssureShaderStuff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.get_colorR
::UnityEngine::Color GlobalNamespace::PlantableObject::get_colorR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::get_colorR");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorR", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.set_colorR
void GlobalNamespace::PlantableObject::set_colorR(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::set_colorR");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colorR", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlantableObject.get_colorG
::UnityEngine::Color GlobalNamespace::PlantableObject::get_colorG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::get_colorG");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorG", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.set_colorG
void GlobalNamespace::PlantableObject::set_colorG(::UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::set_colorG");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colorG", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlantableObject.get_planted
bool GlobalNamespace::PlantableObject::get_planted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::get_planted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_planted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.set_planted
void GlobalNamespace::PlantableObject::set_planted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::set_planted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_planted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlantableObject.SetPlanted
void GlobalNamespace::PlantableObject::SetPlanted(bool newPlanted) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::SetPlanted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlanted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newPlanted)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newPlanted);
}
// Autogenerated method: PlantableObject.AddRed
void GlobalNamespace::PlantableObject::AddRed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AddRed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.AddGreen
void GlobalNamespace::PlantableObject::AddGreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AddGreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddGreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.AddBlue
void GlobalNamespace::PlantableObject::AddBlue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AddBlue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBlue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.AddBlack
void GlobalNamespace::PlantableObject::AddBlack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AddBlack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBlack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.AddColor
void GlobalNamespace::PlantableObject::AddColor(::GlobalNamespace::PlantableObject::AppliedColors color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AddColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: PlantableObject.ClearColors
void GlobalNamespace::PlantableObject::ClearColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::ClearColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.CalculateOutputColor
::UnityEngine::Color GlobalNamespace::PlantableObject::CalculateOutputColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::CalculateOutputColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateOutputColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.UpdateDisplayedDippedColor
void GlobalNamespace::PlantableObject::UpdateDisplayedDippedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::UpdateDisplayedDippedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDisplayedDippedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.Awake
void GlobalNamespace::PlantableObject::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 72));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.OnSpawn
void GlobalNamespace::PlantableObject::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.DropItem
void GlobalNamespace::PlantableObject::DropItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::DropItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 85));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.LateUpdateLocal
void GlobalNamespace::PlantableObject::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.LateUpdateShared
void GlobalNamespace::PlantableObject::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.OnGrab
void GlobalNamespace::PlantableObject::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: PlantableObject.ShouldBeKinematic
bool GlobalNamespace::PlantableObject::ShouldBeKinematic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::ShouldBeKinematic");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 80));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject.OnOwnershipTransferred
void GlobalNamespace::PlantableObject::OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::OnOwnershipTransferred");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 103));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toPlayer, fromPlayer);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlantableObject/AppliedColors
#include "GlobalNamespace/PlantableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PlantableObject/AppliedColors None
::GlobalNamespace::PlantableObject::AppliedColors GlobalNamespace::PlantableObject::AppliedColors::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PlantableObject::AppliedColors>("", "PlantableObject/AppliedColors", "None"));
}
// Autogenerated static field setter
// Set static field: static public PlantableObject/AppliedColors None
void GlobalNamespace::PlantableObject::AppliedColors::_set_None(::GlobalNamespace::PlantableObject::AppliedColors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlantableObject/AppliedColors", "None", value));
}
// Autogenerated static field getter
// Get static field: static public PlantableObject/AppliedColors Red
::GlobalNamespace::PlantableObject::AppliedColors GlobalNamespace::PlantableObject::AppliedColors::_get_Red() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_get_Red");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PlantableObject::AppliedColors>("", "PlantableObject/AppliedColors", "Red"));
}
// Autogenerated static field setter
// Set static field: static public PlantableObject/AppliedColors Red
void GlobalNamespace::PlantableObject::AppliedColors::_set_Red(::GlobalNamespace::PlantableObject::AppliedColors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_set_Red");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlantableObject/AppliedColors", "Red", value));
}
// Autogenerated static field getter
// Get static field: static public PlantableObject/AppliedColors Green
::GlobalNamespace::PlantableObject::AppliedColors GlobalNamespace::PlantableObject::AppliedColors::_get_Green() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_get_Green");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PlantableObject::AppliedColors>("", "PlantableObject/AppliedColors", "Green"));
}
// Autogenerated static field setter
// Set static field: static public PlantableObject/AppliedColors Green
void GlobalNamespace::PlantableObject::AppliedColors::_set_Green(::GlobalNamespace::PlantableObject::AppliedColors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_set_Green");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlantableObject/AppliedColors", "Green", value));
}
// Autogenerated static field getter
// Get static field: static public PlantableObject/AppliedColors Blue
::GlobalNamespace::PlantableObject::AppliedColors GlobalNamespace::PlantableObject::AppliedColors::_get_Blue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_get_Blue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PlantableObject::AppliedColors>("", "PlantableObject/AppliedColors", "Blue"));
}
// Autogenerated static field setter
// Set static field: static public PlantableObject/AppliedColors Blue
void GlobalNamespace::PlantableObject::AppliedColors::_set_Blue(::GlobalNamespace::PlantableObject::AppliedColors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_set_Blue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlantableObject/AppliedColors", "Blue", value));
}
// Autogenerated static field getter
// Get static field: static public PlantableObject/AppliedColors Black
::GlobalNamespace::PlantableObject::AppliedColors GlobalNamespace::PlantableObject::AppliedColors::_get_Black() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_get_Black");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PlantableObject::AppliedColors>("", "PlantableObject/AppliedColors", "Black"));
}
// Autogenerated static field setter
// Set static field: static public PlantableObject/AppliedColors Black
void GlobalNamespace::PlantableObject::AppliedColors::_set_Black(::GlobalNamespace::PlantableObject::AppliedColors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::_set_Black");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlantableObject/AppliedColors", "Black", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PlantableObject::AppliedColors::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::AppliedColors::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PlantableObject/<>c__DisplayClass41_0
#include "GlobalNamespace/PlantableObject_--c__DisplayClass41_0.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player toPlayer
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::dyn_toPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::dyn_toPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "toPlayer"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PlantableObject <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PlantableObject*& GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PlantableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`1<UnityEngine.Color> <>9__1
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::dyn_$$9__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::dyn_$$9__1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>9__1"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PlantableObject/<>c__DisplayClass41_0.<OnOwnershipTransferred>b__0
void GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::$OnOwnershipTransferred$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::<OnOwnershipTransferred>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnOwnershipTransferred>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlantableObject/<>c__DisplayClass41_0.<OnOwnershipTransferred>b__1
void GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::$OnOwnershipTransferred$b__1(::UnityEngine::Color color1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlantableObject::$$c__DisplayClass41_0::<OnOwnershipTransferred>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnOwnershipTransferred>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color1);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableBall
#include "GlobalNamespace/TransferrableBall.hpp"
// Including type: TransferrableBall/<>c
#include "GlobalNamespace/TransferrableBall_--c.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: SoundBankPlayer
#include "GlobalNamespace/SoundBankPlayer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: GorillaLocomotion.Climbing.GorillaHandClimber
#include "GorillaLocomotion/Climbing/GorillaHandClimber.hpp"
// Including type: UnityEngine.SphereCollider
#include "UnityEngine/SphereCollider.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single ballRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_ballRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_ballRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ballRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single depenetrationSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_depenetrationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_depenetrationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "depenetrationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hitSpeedThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_hitSpeedThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSpeedThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSpeedThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxHitSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_maxHitSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_maxHitSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxHitSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 hitSpeedToHitMultiplierMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::TransferrableBall::dyn_hitSpeedToHitMultiplierMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSpeedToHitMultiplierMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSpeedToHitMultiplierMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve hitMultiplierCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::TransferrableBall::dyn_hitMultiplierCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitMultiplierCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitMultiplierCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hitTorqueMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_hitTorqueMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitTorqueMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitTorqueMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single reflectOffHandAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_reflectOffHandAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_reflectOffHandAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reflectOffHandAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minHitSpeedThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_minHitSpeedThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_minHitSpeedThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minHitSpeedThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single surfaceGripDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_surfaceGripDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_surfaceGripDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "surfaceGripDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 reflectOffHandSpeedInputMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::TransferrableBall::dyn_reflectOffHandSpeedInputMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_reflectOffHandSpeedInputMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reflectOffHandSpeedInputMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 reflectOffHandAmountOutputMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::TransferrableBall::dyn_reflectOffHandAmountOutputMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_reflectOffHandAmountOutputMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reflectOffHandAmountOutputMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SoundBankPlayer hitSoundBank
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& GlobalNamespace::TransferrableBall::dyn_hitSoundBank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSoundBank");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSoundBank"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundBankPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 hitSpeedToAudioMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::TransferrableBall::dyn_hitSpeedToAudioMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSpeedToAudioMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSpeedToAudioMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single handHitAudioMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_handHitAudioMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_handHitAudioMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handHitAudioMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 hitSoundPitchMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::TransferrableBall::dyn_hitSoundPitchMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSoundPitchMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSoundPitchMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 hitSoundVolumeMinMax
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::TransferrableBall::dyn_hitSoundVolumeMinMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSoundVolumeMinMax");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSoundVolumeMinMax"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean allowHeadButting
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableBall::dyn_allowHeadButting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_allowHeadButting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowHeadButting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single headButtRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_headButtRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_headButtRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headButtRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single headButtHitMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_headButtHitMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_headButtHitMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headButtHitMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single gravityCounterAmount
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_gravityCounterAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_gravityCounterAmount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gravityCounterAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean debugDraw
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableBall::dyn_debugDraw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_debugDraw");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugDraw"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<GorillaLocomotion.Climbing.GorillaHandClimber,System.Int32> handClimberMap
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GorillaLocomotion::Climbing::GorillaHandClimber*, int>*& GlobalNamespace::TransferrableBall::dyn_handClimberMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_handClimberMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handClimberMap"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GorillaLocomotion::Climbing::GorillaHandClimber*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SphereCollider playerHeadCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& GlobalNamespace::TransferrableBall::dyn_playerHeadCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_playerHeadCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerHeadCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::SphereCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ContactPoint[] collisionContacts
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ContactPoint>& GlobalNamespace::TransferrableBall::dyn_collisionContacts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_collisionContacts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionContacts"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ContactPoint>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 collisionContactsCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableBall::dyn_collisionContactsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_collisionContactsCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionContactsCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single handRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_handRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_handRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single depenetrationBias
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_depenetrationBias() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_depenetrationBias");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "depenetrationBias"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean leftHandOverlapping
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableBall::dyn_leftHandOverlapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_leftHandOverlapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandOverlapping"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean rightHandOverlapping
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableBall::dyn_rightHandOverlapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_rightHandOverlapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandOverlapping"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean headOverlapping
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableBall::dyn_headOverlapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_headOverlapping");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headOverlapping"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean onGround
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableBall::dyn_onGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_onGround");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onGround"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ContactPoint groundContact
[[deprecated("Use field access instead!")]] ::UnityEngine::ContactPoint& GlobalNamespace::TransferrableBall::dyn_groundContact() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_groundContact");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "groundContact"))->offset;
  return *reinterpret_cast<::UnityEngine::ContactPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean applyFrictionHolding
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableBall::dyn_applyFrictionHolding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_applyFrictionHolding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "applyFrictionHolding"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 frictionHoldLocalPosLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TransferrableBall::dyn_frictionHoldLocalPosLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_frictionHoldLocalPosLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frictionHoldLocalPosLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion frictionHoldLocalRotLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::TransferrableBall::dyn_frictionHoldLocalRotLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_frictionHoldLocalRotLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frictionHoldLocalRotLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 frictionHoldLocalPosRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TransferrableBall::dyn_frictionHoldLocalPosRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_frictionHoldLocalPosRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frictionHoldLocalPosRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion frictionHoldLocalRotRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::TransferrableBall::dyn_frictionHoldLocalRotRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_frictionHoldLocalRotRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frictionHoldLocalRotRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single hitSoundSpamLastHitTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_hitSoundSpamLastHitTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSoundSpamLastHitTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSoundSpamLastHitTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 hitSoundSpamCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableBall::dyn_hitSoundSpamCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSoundSpamCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSoundSpamCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 hitSoundSpamLimit
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableBall::dyn_hitSoundSpamLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSoundSpamLimit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSoundSpamLimit"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single hitSoundSpamCooldownResetTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableBall::dyn_hitSoundSpamCooldownResetTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_hitSoundSpamCooldownResetTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitSoundSpamCooldownResetTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String gorillaHeadTriggerTag
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TransferrableBall::dyn_gorillaHeadTriggerTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::dyn_gorillaHeadTriggerTag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gorillaHeadTriggerTag"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransferrableBall.TakeOwnershipAndEnablePhysics
void GlobalNamespace::TransferrableBall::TakeOwnershipAndEnablePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::TakeOwnershipAndEnablePhysics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TakeOwnershipAndEnablePhysics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableBall.CheckCollisionWithHand
bool GlobalNamespace::TransferrableBall::CheckCollisionWithHand(::UnityEngine::Vector3 handCenter, ::UnityEngine::Quaternion handRotation, ::UnityEngine::Vector3 palmForward, ByRef<::UnityEngine::Vector3> hitPoint, ByRef<::UnityEngine::Vector3> hitNormal, ByRef<float> penetrationDist) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::CheckCollisionWithHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckCollisionWithHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handCenter), ::il2cpp_utils::ExtractType(handRotation), ::il2cpp_utils::ExtractType(palmForward), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, handCenter, handRotation, palmForward, byref(hitPoint), byref(hitNormal), byref(penetrationDist));
}
// Autogenerated method: TransferrableBall.CheckCollisionWithHead
bool GlobalNamespace::TransferrableBall::CheckCollisionWithHead(::UnityEngine::SphereCollider* headCollider, ByRef<::UnityEngine::Vector3> hitPoint, ByRef<::UnityEngine::Vector3> hitNormal, ByRef<float> penetrationDist) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::CheckCollisionWithHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckCollisionWithHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headCollider), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, headCollider, byref(hitPoint), byref(hitNormal), byref(penetrationDist));
}
// Autogenerated method: TransferrableBall.ApplyHit
bool GlobalNamespace::TransferrableBall::ApplyHit(::UnityEngine::Vector3 hitPoint, ::UnityEngine::Vector3 hitDir, float hitSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::ApplyHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hitPoint), ::il2cpp_utils::ExtractType(hitDir), ::il2cpp_utils::ExtractType(hitSpeed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, hitPoint, hitDir, hitSpeed);
}
// Autogenerated method: TransferrableBall.PlayHitSound
void GlobalNamespace::TransferrableBall::PlayHitSound(float hitSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::PlayHitSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayHitSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hitSpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hitSpeed);
}
// Autogenerated method: TransferrableBall.FixedUpdate
void GlobalNamespace::TransferrableBall::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableBall.OnTriggerEnter
void GlobalNamespace::TransferrableBall::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: TransferrableBall.OnTriggerExit
void GlobalNamespace::TransferrableBall::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: TransferrableBall.OnCollisionEnter
void GlobalNamespace::TransferrableBall::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: TransferrableBall.OnCollisionStay
void GlobalNamespace::TransferrableBall::OnCollisionStay(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::OnCollisionStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: TransferrableBall.LateUpdate
void GlobalNamespace::TransferrableBall::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::LateUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 84));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableBall/<>c
#include "GlobalNamespace/TransferrableBall_--c.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly TransferrableBall/<>c <>9
::GlobalNamespace::TransferrableBall::$$c* GlobalNamespace::TransferrableBall::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableBall::$$c*>("", "TransferrableBall/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly TransferrableBall/<>c <>9
void GlobalNamespace::TransferrableBall::$$c::_set_$$9(::GlobalNamespace::TransferrableBall::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TransferrableBall/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__44_0
::System::Action* GlobalNamespace::TransferrableBall::$$c::_get_$$9__44_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::$$c::_get_$$9__44_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "TransferrableBall/<>c", "<>9__44_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__44_0
void GlobalNamespace::TransferrableBall::$$c::_set_$$9__44_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::$$c::_set_$$9__44_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TransferrableBall/<>c", "<>9__44_0", value)));
}
// Autogenerated method: TransferrableBall/<>c..cctor
void GlobalNamespace::TransferrableBall::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableBall/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TransferrableBall/<>c.<TakeOwnershipAndEnablePhysics>b__44_0
void GlobalNamespace::TransferrableBall::$$c::$TakeOwnershipAndEnablePhysics$b__44_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableBall::$$c::<TakeOwnershipAndEnablePhysics>b__44_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TakeOwnershipAndEnablePhysics>b__44_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AdvancedItemState
#include "GlobalNamespace/AdvancedItemState.hpp"
// Including type: AdvancedItemState/PreData
#include "GlobalNamespace/AdvancedItemState_PreData.hpp"
// Including type: AdvancedItemState/PointType
#include "GlobalNamespace/AdvancedItemState_PointType.hpp"
// Including type: System.ValueTuple`4
#include "System/ValueTuple_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 _encodedValue
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AdvancedItemState::dyn__encodedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::dyn__encodedValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_encodedValue"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2 angleVectorWhereUpIsStandard
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& GlobalNamespace::AdvancedItemState::dyn_angleVectorWhereUpIsStandard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::dyn_angleVectorWhereUpIsStandard");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angleVectorWhereUpIsStandard"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion deltaRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::AdvancedItemState::dyn_deltaRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::dyn_deltaRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "deltaRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 index
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AdvancedItemState::dyn_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::dyn_index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AdvancedItemState/PreData preData
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AdvancedItemState::PreData*& GlobalNamespace::AdvancedItemState::dyn_preData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::dyn_preData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "preData"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AdvancedItemState::PreData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LimitAxis limitAxis
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LimitAxis& GlobalNamespace::AdvancedItemState::dyn_limitAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::dyn_limitAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "limitAxis"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LimitAxis*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean reverseGrip
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::AdvancedItemState::dyn_reverseGrip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::dyn_reverseGrip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reverseGrip"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single angle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AdvancedItemState::dyn_angle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::dyn_angle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: AdvancedItemState.Encode
void GlobalNamespace::AdvancedItemState::Encode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::Encode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Encode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AdvancedItemState.Decode
void GlobalNamespace::AdvancedItemState::Decode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::Decode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Decode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AdvancedItemState.GetQuaternion
::UnityEngine::Quaternion GlobalNamespace::AdvancedItemState::GetQuaternion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::GetQuaternion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetQuaternion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: AdvancedItemState.DecodeAdvancedItemState
::System::ValueTuple_4<int, float, float, float> GlobalNamespace::AdvancedItemState::DecodeAdvancedItemState(int encodedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::DecodeAdvancedItemState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecodeAdvancedItemState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(encodedValue)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::ValueTuple_4<int, float, float, float>, false>(this, ___internal__method, encodedValue);
}
// Autogenerated method: AdvancedItemState.get_EncodedDeltaRotation
float GlobalNamespace::AdvancedItemState::get_EncodedDeltaRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::get_EncodedDeltaRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EncodedDeltaRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AdvancedItemState.GetEncodedDeltaRotation
float GlobalNamespace::AdvancedItemState::GetEncodedDeltaRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::GetEncodedDeltaRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEncodedDeltaRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AdvancedItemState.DecodeDeltaRotation
void GlobalNamespace::AdvancedItemState::DecodeDeltaRotation(float encodedDelta, bool isFlipped) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::DecodeDeltaRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecodeDeltaRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(encodedDelta), ::il2cpp_utils::ExtractType(isFlipped)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, encodedDelta, isFlipped);
}
// Autogenerated method: AdvancedItemState.EncodeData
int GlobalNamespace::AdvancedItemState::EncodeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::EncodeData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EncodeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: AdvancedItemState.DecodeData
::GlobalNamespace::AdvancedItemState* GlobalNamespace::AdvancedItemState::DecodeData(int encoded) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::DecodeData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecodeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(encoded)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::AdvancedItemState*, false>(this, ___internal__method, encoded);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AdvancedItemState/PreData
#include "GlobalNamespace/AdvancedItemState_PreData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single distAlongLine
[[deprecated("Use field access instead!")]] float& GlobalNamespace::AdvancedItemState::PreData::dyn_distAlongLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::PreData::dyn_distAlongLine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distAlongLine"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AdvancedItemState/PointType pointType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AdvancedItemState::PointType& GlobalNamespace::AdvancedItemState::PreData::dyn_pointType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::PreData::dyn_pointType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pointType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AdvancedItemState::PointType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: AdvancedItemState/PointType
#include "GlobalNamespace/AdvancedItemState_PointType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AdvancedItemState/PointType Standard
::GlobalNamespace::AdvancedItemState::PointType GlobalNamespace::AdvancedItemState::PointType::_get_Standard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::PointType::_get_Standard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AdvancedItemState::PointType>("", "AdvancedItemState/PointType", "Standard"));
}
// Autogenerated static field setter
// Set static field: static public AdvancedItemState/PointType Standard
void GlobalNamespace::AdvancedItemState::PointType::_set_Standard(::GlobalNamespace::AdvancedItemState::PointType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::PointType::_set_Standard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdvancedItemState/PointType", "Standard", value));
}
// Autogenerated static field getter
// Get static field: static public AdvancedItemState/PointType DistanceBased
::GlobalNamespace::AdvancedItemState::PointType GlobalNamespace::AdvancedItemState::PointType::_get_DistanceBased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::PointType::_get_DistanceBased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::AdvancedItemState::PointType>("", "AdvancedItemState/PointType", "DistanceBased"));
}
// Autogenerated static field setter
// Set static field: static public AdvancedItemState/PointType DistanceBased
void GlobalNamespace::AdvancedItemState::PointType::_set_DistanceBased(::GlobalNamespace::AdvancedItemState::PointType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::PointType::_set_DistanceBased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdvancedItemState/PointType", "DistanceBased", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::AdvancedItemState::PointType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AdvancedItemState::PointType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GrabPointType
#include "GlobalNamespace/GrabPointType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GrabPointType SinglePoint
::GlobalNamespace::GrabPointType GlobalNamespace::GrabPointType::_get_SinglePoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabPointType::_get_SinglePoint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GrabPointType>("", "GrabPointType", "SinglePoint"));
}
// Autogenerated static field setter
// Set static field: static public GrabPointType SinglePoint
void GlobalNamespace::GrabPointType::_set_SinglePoint(::GlobalNamespace::GrabPointType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabPointType::_set_SinglePoint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GrabPointType", "SinglePoint", value));
}
// Autogenerated static field getter
// Get static field: static public GrabPointType Line
::GlobalNamespace::GrabPointType GlobalNamespace::GrabPointType::_get_Line() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabPointType::_get_Line");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GrabPointType>("", "GrabPointType", "Line"));
}
// Autogenerated static field setter
// Set static field: static public GrabPointType Line
void GlobalNamespace::GrabPointType::_set_Line(::GlobalNamespace::GrabPointType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabPointType::_set_Line");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GrabPointType", "Line", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GrabPointType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabPointType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LimitAxis
#include "GlobalNamespace/LimitAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LimitAxis NoMovement
::GlobalNamespace::LimitAxis GlobalNamespace::LimitAxis::_get_NoMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::_get_NoMovement");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LimitAxis>("", "LimitAxis", "NoMovement"));
}
// Autogenerated static field setter
// Set static field: static public LimitAxis NoMovement
void GlobalNamespace::LimitAxis::_set_NoMovement(::GlobalNamespace::LimitAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::_set_NoMovement");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LimitAxis", "NoMovement", value));
}
// Autogenerated static field getter
// Get static field: static public LimitAxis YAxis
::GlobalNamespace::LimitAxis GlobalNamespace::LimitAxis::_get_YAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::_get_YAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LimitAxis>("", "LimitAxis", "YAxis"));
}
// Autogenerated static field setter
// Set static field: static public LimitAxis YAxis
void GlobalNamespace::LimitAxis::_set_YAxis(::GlobalNamespace::LimitAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::_set_YAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LimitAxis", "YAxis", value));
}
// Autogenerated static field getter
// Get static field: static public LimitAxis XAxis
::GlobalNamespace::LimitAxis GlobalNamespace::LimitAxis::_get_XAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::_get_XAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LimitAxis>("", "LimitAxis", "XAxis"));
}
// Autogenerated static field setter
// Set static field: static public LimitAxis XAxis
void GlobalNamespace::LimitAxis::_set_XAxis(::GlobalNamespace::LimitAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::_set_XAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LimitAxis", "XAxis", value));
}
// Autogenerated static field getter
// Get static field: static public LimitAxis ZAxis
::GlobalNamespace::LimitAxis GlobalNamespace::LimitAxis::_get_ZAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::_get_ZAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LimitAxis>("", "LimitAxis", "ZAxis"));
}
// Autogenerated static field setter
// Set static field: static public LimitAxis ZAxis
void GlobalNamespace::LimitAxis::_set_ZAxis(::GlobalNamespace::LimitAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::_set_ZAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LimitAxis", "ZAxis", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LimitAxis::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LimitAxis::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SubGrabPoint
#include "GlobalNamespace/SubGrabPoint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SlotTransformOverride
#include "GlobalNamespace/SlotTransformOverride.hpp"
// Including type: AdvancedItemState/PreData
#include "GlobalNamespace/AdvancedItemState_PreData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform gripPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SubGrabPoint::dyn_gripPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_gripPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LimitAxis limitAxis
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LimitAxis& GlobalNamespace::SubGrabPoint::dyn_limitAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_limitAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "limitAxis"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LimitAxis*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean allowReverseGrip
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SubGrabPoint::dyn_allowReverseGrip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_allowReverseGrip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowReverseGrip"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 gripPoint_AdvOriginLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SubGrabPoint::dyn_gripPoint_AdvOriginLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_gripPoint_AdvOriginLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripPoint_AdvOriginLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 gripPointOffset_AdvOriginLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SubGrabPoint::dyn_gripPointOffset_AdvOriginLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_gripPointOffset_AdvOriginLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripPointOffset_AdvOriginLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion gripRotation_AdvOriginLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SubGrabPoint::dyn_gripRotation_AdvOriginLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_gripRotation_AdvOriginLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripRotation_AdvOriginLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion advAnchor_ParentAnchorLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SubGrabPoint::dyn_advAnchor_ParentAnchorLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_advAnchor_ParentAnchorLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "advAnchor_ParentAnchorLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion gripRotation_ParentAnchorLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::SubGrabPoint::dyn_gripRotation_ParentAnchorLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_gripRotation_ParentAnchorLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripRotation_ParentAnchorLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 gripPointLocalToAdvOriginLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::SubGrabPoint::dyn_gripPointLocalToAdvOriginLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::dyn_gripPointLocalToAdvOriginLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripPointLocalToAdvOriginLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SubGrabPoint.GetTransformation_GripPointLocalToAdvOriginLocal
::UnityEngine::Matrix4x4 GlobalNamespace::SubGrabPoint::GetTransformation_GripPointLocalToAdvOriginLocal(::GlobalNamespace::AdvancedItemState::PreData* advancedItemState, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::GetTransformation_GripPointLocalToAdvOriginLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method, advancedItemState, slotTransformOverride);
}
// Autogenerated method: SubGrabPoint.GetRotationRelativeToObjectAnchor
::UnityEngine::Quaternion GlobalNamespace::SubGrabPoint::GetRotationRelativeToObjectAnchor(::GlobalNamespace::AdvancedItemState* advancedItemState, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::GetRotationRelativeToObjectAnchor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, advancedItemState, slotTransformOverride);
}
// Autogenerated method: SubGrabPoint.GetGrabPositionRelativeToGrabPointOrigin
::UnityEngine::Vector3 GlobalNamespace::SubGrabPoint::GetGrabPositionRelativeToGrabPointOrigin(::GlobalNamespace::AdvancedItemState* advancedItemState, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::GetGrabPositionRelativeToGrabPointOrigin");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, advancedItemState, slotTransformOverride);
}
// Autogenerated method: SubGrabPoint.InitializePoints
void GlobalNamespace::SubGrabPoint::InitializePoints(::UnityEngine::Transform* anchor, ::UnityEngine::Transform* grabPointAnchor, ::UnityEngine::Transform* advancedGrabPointOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::InitializePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, anchor, grabPointAnchor, advancedGrabPointOrigin);
}
// Autogenerated method: SubGrabPoint.GetPositionOnObject
::UnityEngine::Vector3 GlobalNamespace::SubGrabPoint::GetPositionOnObject(::UnityEngine::Transform* transferableObject, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::GetPositionOnObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPositionOnObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transferableObject), ::il2cpp_utils::ExtractType(slotTransformOverride)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, transferableObject, slotTransformOverride);
}
// Autogenerated method: SubGrabPoint.GetTransformFromPositionState
::UnityEngine::Matrix4x4 GlobalNamespace::SubGrabPoint::GetTransformFromPositionState(::GlobalNamespace::AdvancedItemState* advancedItemState, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride, ::UnityEngine::Transform* targetDockXf) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::GetTransformFromPositionState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 8));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method, advancedItemState, slotTransformOverride, targetDockXf);
}
// Autogenerated method: SubGrabPoint.GetAdvancedItemStateFromHand
::GlobalNamespace::AdvancedItemState* GlobalNamespace::SubGrabPoint::GetAdvancedItemStateFromHand(::UnityEngine::Transform* objectTransform, ::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* targetDock, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::GetAdvancedItemStateFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAdvancedItemStateFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(objectTransform), ::il2cpp_utils::ExtractType(handTransform), ::il2cpp_utils::ExtractType(targetDock), ::il2cpp_utils::ExtractType(slotTransformOverride)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::AdvancedItemState*, false>(this, ___internal__method, objectTransform, handTransform, targetDock, slotTransformOverride);
}
// Autogenerated method: SubGrabPoint.GetPreData
::GlobalNamespace::AdvancedItemState::PreData* GlobalNamespace::SubGrabPoint::GetPreData(::UnityEngine::Transform* objectTransform, ::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* targetDock, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::GetPreData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::AdvancedItemState::PreData*, false>(this, ___internal__method, objectTransform, handTransform, targetDock, slotTransformOverride);
}
// Autogenerated method: SubGrabPoint.EvaluateScore
float GlobalNamespace::SubGrabPoint::EvaluateScore(::UnityEngine::Transform* objectTransform, ::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* targetDock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubGrabPoint::EvaluateScore");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 10));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, objectTransform, handTransform, targetDock);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SubLineGrabPoint
#include "GlobalNamespace/SubLineGrabPoint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SlotTransformOverride
#include "GlobalNamespace/SlotTransformOverride.hpp"
// Including type: AdvancedItemState/PreData
#include "GlobalNamespace/AdvancedItemState_PreData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform startPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SubLineGrabPoint::dyn_startPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::dyn_startPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform endPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SubLineGrabPoint::dyn_endPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::dyn_endPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startPointRelativeToGrabPointOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SubLineGrabPoint::dyn_startPointRelativeToGrabPointOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::dyn_startPointRelativeToGrabPointOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPointRelativeToGrabPointOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 endPointRelativeToGrabPointOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SubLineGrabPoint::dyn_endPointRelativeToGrabPointOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::dyn_endPointRelativeToGrabPointOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endPointRelativeToGrabPointOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 startPointRelativeTransformToGrabPointOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::SubLineGrabPoint::dyn_startPointRelativeTransformToGrabPointOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::dyn_startPointRelativeTransformToGrabPointOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPointRelativeTransformToGrabPointOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 endPointRelativeTransformToGrabPointOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::SubLineGrabPoint::dyn_endPointRelativeTransformToGrabPointOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::dyn_endPointRelativeTransformToGrabPointOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endPointRelativeTransformToGrabPointOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SubLineGrabPoint.<GetPreData>g__FindNearestFractionOnLine|8_0
float GlobalNamespace::SubLineGrabPoint::$GetPreData$g__FindNearestFractionOnLine_8_0(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end, ::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::<GetPreData>g__FindNearestFractionOnLine|8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SubLineGrabPoint", "<GetPreData>g__FindNearestFractionOnLine|8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, origin, end, point);
}
// Autogenerated method: SubLineGrabPoint.<EvaluateScore>g__FindNearestFractionOnLine|9_0
float GlobalNamespace::SubLineGrabPoint::$EvaluateScore$g__FindNearestFractionOnLine_9_0(::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 end, ::UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::<EvaluateScore>g__FindNearestFractionOnLine|9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SubLineGrabPoint", "<EvaluateScore>g__FindNearestFractionOnLine|9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, origin, end, point);
}
// Autogenerated method: SubLineGrabPoint.GetTransformation_GripPointLocalToAdvOriginLocal
::UnityEngine::Matrix4x4 GlobalNamespace::SubLineGrabPoint::GetTransformation_GripPointLocalToAdvOriginLocal(::GlobalNamespace::AdvancedItemState::PreData* advancedItemState, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::GetTransformation_GripPointLocalToAdvOriginLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method, advancedItemState, slotTransformOverride);
}
// Autogenerated method: SubLineGrabPoint.InitializePoints
void GlobalNamespace::SubLineGrabPoint::InitializePoints(::UnityEngine::Transform* anchor, ::UnityEngine::Transform* grabPointAnchor, ::UnityEngine::Transform* advancedGrabPointOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::InitializePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, anchor, grabPointAnchor, advancedGrabPointOrigin);
}
// Autogenerated method: SubLineGrabPoint.GetPreData
::GlobalNamespace::AdvancedItemState::PreData* GlobalNamespace::SubLineGrabPoint::GetPreData(::UnityEngine::Transform* objectTransform, ::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* targetDock, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::GetPreData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::AdvancedItemState::PreData*, false>(this, ___internal__method, objectTransform, handTransform, targetDock, slotTransformOverride);
}
// Autogenerated method: SubLineGrabPoint.EvaluateScore
float GlobalNamespace::SubLineGrabPoint::EvaluateScore(::UnityEngine::Transform* objectTransform, ::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* targetDock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubLineGrabPoint::EvaluateScore");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubGrabPoint*), 10));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, objectTransform, handTransform, targetDock);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SubSplineGrabPoint
#include "GlobalNamespace/SubSplineGrabPoint.hpp"
// Including type: CatmullRomSpline
#include "GlobalNamespace/CatmullRomSpline.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SlotTransformOverride
#include "GlobalNamespace/SlotTransformOverride.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: AdvancedItemState/PreData
#include "GlobalNamespace/AdvancedItemState_PreData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public CatmullRomSpline spline
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CatmullRomSpline*& GlobalNamespace::SubSplineGrabPoint::dyn_spline() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubSplineGrabPoint::dyn_spline");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spline"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CatmullRomSpline**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Vector3> controlPointsRelativeToGrabOrigin
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& GlobalNamespace::SubSplineGrabPoint::dyn_controlPointsRelativeToGrabOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubSplineGrabPoint::dyn_controlPointsRelativeToGrabOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controlPointsRelativeToGrabOrigin"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Matrix4x4> controlPointsTransformsRelativeToGrabOrigin
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>*& GlobalNamespace::SubSplineGrabPoint::dyn_controlPointsTransformsRelativeToGrabOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubSplineGrabPoint::dyn_controlPointsTransformsRelativeToGrabOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controlPointsTransformsRelativeToGrabOrigin"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Matrix4x4>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SubSplineGrabPoint.GetTransformation_GripPointLocalToAdvOriginLocal
::UnityEngine::Matrix4x4 GlobalNamespace::SubSplineGrabPoint::GetTransformation_GripPointLocalToAdvOriginLocal(::GlobalNamespace::AdvancedItemState::PreData* advancedItemState, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubSplineGrabPoint::GetTransformation_GripPointLocalToAdvOriginLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubLineGrabPoint*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method, advancedItemState, slotTransformOverride);
}
// Autogenerated method: SubSplineGrabPoint.InitializePoints
void GlobalNamespace::SubSplineGrabPoint::InitializePoints(::UnityEngine::Transform* anchor, ::UnityEngine::Transform* grabPointAnchor, ::UnityEngine::Transform* advancedGrabPointOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubSplineGrabPoint::InitializePoints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubLineGrabPoint*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, anchor, grabPointAnchor, advancedGrabPointOrigin);
}
// Autogenerated method: SubSplineGrabPoint.GetPreData
::GlobalNamespace::AdvancedItemState::PreData* GlobalNamespace::SubSplineGrabPoint::GetPreData(::UnityEngine::Transform* objectTransform, ::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* targetDock, ::GlobalNamespace::SlotTransformOverride* slotTransformOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubSplineGrabPoint::GetPreData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubLineGrabPoint*), 9));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::AdvancedItemState::PreData*, false>(this, ___internal__method, objectTransform, handTransform, targetDock, slotTransformOverride);
}
// Autogenerated method: SubSplineGrabPoint.EvaluateScore
float GlobalNamespace::SubSplineGrabPoint::EvaluateScore(::UnityEngine::Transform* objectTransform, ::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* targetDock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubSplineGrabPoint::EvaluateScore");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubLineGrabPoint*), 10));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, objectTransform, handTransform, targetDock);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlotTransformOverride
#include "GlobalNamespace/SlotTransformOverride.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SubGrabPoint
#include "GlobalNamespace/SubGrabPoint.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: TransferrableObjectGripPosition
#include "GlobalNamespace/TransferrableObjectGripPosition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform overrideTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SlotTransformOverride::dyn_overrideTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_overrideTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overrideTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String overrideTransform_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SlotTransformOverride::dyn_overrideTransform_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_overrideTransform_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overrideTransform_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/PositionState positionState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::SlotTransformOverride::dyn_positionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_positionState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean useAdvancedGrab
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SlotTransformOverride::dyn_useAdvancedGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_useAdvancedGrab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useAdvancedGrab"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 overrideTransformMatrix
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::SlotTransformOverride::dyn_overrideTransformMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_overrideTransformMatrix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overrideTransformMatrix"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform advancedGrabPointAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SlotTransformOverride::dyn_advancedGrabPointAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_advancedGrabPointAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "advancedGrabPointAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform advancedGrabPointOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SlotTransformOverride::dyn_advancedGrabPointOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_advancedGrabPointOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "advancedGrabPointOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<SubGrabPoint> multiPoints
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SubGrabPoint*>*& GlobalNamespace::SlotTransformOverride::dyn_multiPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_multiPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "multiPoints"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::SubGrabPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 AdvOriginLocalToParentAnchorLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::SlotTransformOverride::dyn_AdvOriginLocalToParentAnchorLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_AdvOriginLocalToParentAnchorLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AdvOriginLocalToParentAnchorLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Matrix4x4 AdvAnchorLocalToAdvOriginLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::SlotTransformOverride::dyn_AdvAnchorLocalToAdvOriginLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::dyn_AdvAnchorLocalToAdvOriginLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AdvAnchorLocalToAdvOriginLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SlotTransformOverride.Initialize
void GlobalNamespace::SlotTransformOverride::Initialize(::UnityEngine::Component* component, ::UnityEngine::Transform* anchor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(anchor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, component, anchor);
}
// Autogenerated method: SlotTransformOverride.AddLineButton
void GlobalNamespace::SlotTransformOverride::AddLineButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::AddLineButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLineButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlotTransformOverride.AddSubGrabPoint
void GlobalNamespace::SlotTransformOverride::AddSubGrabPoint(::GlobalNamespace::TransferrableObjectGripPosition* togp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::AddSubGrabPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddSubGrabPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(togp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, togp);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableItemSlotTransformOverride
#include "GlobalNamespace/TransferrableItemSlotTransformOverride.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SlotTransformOverride
#include "GlobalNamespace/SlotTransformOverride.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: TransferrableObjectGripPosition
#include "GlobalNamespace/TransferrableObjectGripPosition.hpp"
// Including type: AdvancedItemState
#include "GlobalNamespace/AdvancedItemState.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Action`1<TransferrableObject> OnBringUpWindow
::System::Action_1<::GlobalNamespace::TransferrableObject*>* GlobalNamespace::TransferrableItemSlotTransformOverride::_get_OnBringUpWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::_get_OnBringUpWindow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<::GlobalNamespace::TransferrableObject*>*>("", "TransferrableItemSlotTransformOverride", "OnBringUpWindow"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<TransferrableObject> OnBringUpWindow
void GlobalNamespace::TransferrableItemSlotTransformOverride::_set_OnBringUpWindow(::System::Action_1<::GlobalNamespace::TransferrableObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::_set_OnBringUpWindow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableItemSlotTransformOverride", "OnBringUpWindow", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<SlotTransformOverride> transformOverridesDeprecated
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SlotTransformOverride*>*& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_transformOverridesDeprecated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_transformOverridesDeprecated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformOverridesDeprecated"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::SlotTransformOverride*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<SlotTransformOverride> transformOverrides
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SlotTransformOverride*>*& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_transformOverrides() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_transformOverrides");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformOverrides"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::SlotTransformOverride*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/PositionState lastPosition
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_lastPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_lastPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPosition"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject followingTransferrableObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_followingTransferrableObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_followingTransferrableObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "followingTransferrableObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SlotTransformOverride defaultPosition
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SlotTransformOverride*& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_defaultPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_defaultPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultPosition"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SlotTransformOverride**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform defaultTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_defaultTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_defaultTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform anchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_anchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_anchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GorillaTag.ISpawnable.IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<TransferrableObject/PositionState,UnityEngine.Transform> transformFromPosition
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::TransferrableObject::PositionState, ::UnityEngine::Transform*>*& GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_transformFromPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::dyn_transformFromPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformFromPosition"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::TransferrableObject::PositionState, ::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.GorillaTag.ISpawnable.get_IsSpawned
bool GlobalNamespace::TransferrableItemSlotTransformOverride::GorillaTag_ISpawnable_get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::GorillaTag.ISpawnable.get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableItemSlotTransformOverride*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.GorillaTag.ISpawnable.set_IsSpawned
void GlobalNamespace::TransferrableItemSlotTransformOverride::GorillaTag_ISpawnable_set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::GorillaTag.ISpawnable.set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableItemSlotTransformOverride*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::TransferrableItemSlotTransformOverride::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableItemSlotTransformOverride*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::TransferrableItemSlotTransformOverride::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableItemSlotTransformOverride*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.AddGripPosition
void GlobalNamespace::TransferrableItemSlotTransformOverride::AddGripPosition(::GlobalNamespace::TransferrableObject::PositionState state, ::GlobalNamespace::TransferrableObjectGripPosition* togp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::AddGripPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddGripPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(togp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state, togp);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.Update
void GlobalNamespace::TransferrableItemSlotTransformOverride::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.Awake
void GlobalNamespace::TransferrableItemSlotTransformOverride::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.GenerateTransformFromPositionState
void GlobalNamespace::TransferrableItemSlotTransformOverride::GenerateTransformFromPositionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::GenerateTransformFromPositionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTransformFromPositionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.GetTransformFromPositionState
::UnityEngine::Transform* GlobalNamespace::TransferrableItemSlotTransformOverride::GetTransformFromPositionState(::GlobalNamespace::TransferrableObject::PositionState currentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::GetTransformFromPositionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransformFromPositionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentState)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, currentState);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.GetTransformFromPositionState
bool GlobalNamespace::TransferrableItemSlotTransformOverride::GetTransformFromPositionState(::GlobalNamespace::TransferrableObject::PositionState currentState, ::GlobalNamespace::AdvancedItemState* advancedItemState, ::UnityEngine::Transform* targetDockXf, ByRef<::UnityEngine::Matrix4x4> matrix4X4) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::GetTransformFromPositionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransformFromPositionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentState), ::il2cpp_utils::ExtractType(advancedItemState), ::il2cpp_utils::ExtractType(targetDockXf), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Matrix4x4&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, currentState, advancedItemState, targetDockXf, byref(matrix4X4));
}
// Autogenerated method: TransferrableItemSlotTransformOverride.GetAdvancedItemStateFromHand
::GlobalNamespace::AdvancedItemState* GlobalNamespace::TransferrableItemSlotTransformOverride::GetAdvancedItemStateFromHand(::GlobalNamespace::TransferrableObject::PositionState currentState, ::UnityEngine::Transform* handTransform, ::UnityEngine::Transform* targetDock) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::GetAdvancedItemStateFromHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAdvancedItemStateFromHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentState), ::il2cpp_utils::ExtractType(handTransform), ::il2cpp_utils::ExtractType(targetDock)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::AdvancedItemState*, false>(this, ___internal__method, currentState, handTransform, targetDock);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.Edit
void GlobalNamespace::TransferrableItemSlotTransformOverride::Edit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::Edit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Edit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableItemSlotTransformOverride.<Update>b__14_0
bool GlobalNamespace::TransferrableItemSlotTransformOverride::$Update$b__14_0(::GlobalNamespace::SlotTransformOverride* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableItemSlotTransformOverride::<Update>b__14_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Update>b__14_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: AdvancedItemState
#include "GlobalNamespace/AdvancedItemState.hpp"
// Including type: BodyDockPositions
#include "GlobalNamespace/BodyDockPositions.hpp"
// Including type: VRRigAnchorOverrides
#include "GlobalNamespace/VRRigAnchorOverrides.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: TransferrableObject/<>c
#include "GlobalNamespace/TransferrableObject_--c.hpp"
// Including type: TransferrableObject/<>c__DisplayClass125_0
#include "GlobalNamespace/TransferrableObject_--c__DisplayClass125_0.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: TransferrableItemSlotTransformOverride
#include "GlobalNamespace/TransferrableItemSlotTransformOverride.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Including type: WorldShareableItem
#include "GlobalNamespace/WorldShareableItem.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: Sirenix.OdinInspector.SelfValidationResult
#include "Sirenix/OdinInspector/SelfValidationResult.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector3 handPoseRightReferencePoint
::UnityEngine::Vector3 GlobalNamespace::TransferrableObject::_get_handPoseRightReferencePoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_get_handPoseRightReferencePoint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "TransferrableObject", "handPoseRightReferencePoint"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector3 handPoseRightReferencePoint
void GlobalNamespace::TransferrableObject::_set_handPoseRightReferencePoint(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_set_handPoseRightReferencePoint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject", "handPoseRightReferencePoint", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Quaternion handPoseRightReferenceRotation
::UnityEngine::Quaternion GlobalNamespace::TransferrableObject::_get_handPoseRightReferenceRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_get_handPoseRightReferenceRotation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Quaternion>("", "TransferrableObject", "handPoseRightReferenceRotation"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Quaternion handPoseRightReferenceRotation
void GlobalNamespace::TransferrableObject::_set_handPoseRightReferenceRotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_set_handPoseRightReferenceRotation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject", "handPoseRightReferenceRotation", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector3 handPoseLeftReferencePoint
::UnityEngine::Vector3 GlobalNamespace::TransferrableObject::_get_handPoseLeftReferencePoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_get_handPoseLeftReferencePoint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Vector3>("", "TransferrableObject", "handPoseLeftReferencePoint"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector3 handPoseLeftReferencePoint
void GlobalNamespace::TransferrableObject::_set_handPoseLeftReferencePoint(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_set_handPoseLeftReferencePoint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject", "handPoseLeftReferencePoint", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Quaternion handPoseLeftReferenceRotation
::UnityEngine::Quaternion GlobalNamespace::TransferrableObject::_get_handPoseLeftReferenceRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_get_handPoseLeftReferenceRotation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Quaternion>("", "TransferrableObject", "handPoseLeftReferenceRotation"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Quaternion handPoseLeftReferenceRotation
void GlobalNamespace::TransferrableObject::_set_handPoseLeftReferenceRotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_set_handPoseLeftReferenceRotation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject", "handPoseLeftReferenceRotation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kPositionStateCount
int GlobalNamespace::TransferrableObject::_get_kPositionStateCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_get_kPositionStateCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "TransferrableObject", "kPositionStateCount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kPositionStateCount
void GlobalNamespace::TransferrableObject::_set_kPositionStateCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::_set_kPositionStateCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject", "kPositionStateCount", value));
}
// Autogenerated instance field getter
// Get instance field: private VRRig _myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::TransferrableObject::dyn__myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn__myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isMyRigValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_$isMyRigValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_$isMyRigValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isMyRigValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig _myOnlineRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::TransferrableObject::dyn__myOnlineRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn__myOnlineRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_myOnlineRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isMyOnlineRigValid>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_$isMyOnlineRigValid$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_$isMyOnlineRigValid$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isMyOnlineRigValid>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean latched
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_latched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_latched");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "latched"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single indexTrigger
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableObject::dyn_indexTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_indexTrigger");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indexTrigger"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testActivate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_testActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_testActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testActivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testDeactivate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_testDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_testDeactivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testDeactivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single myThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableObject::dyn_myThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_myThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single hysterisis
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableObject::dyn_hysterisis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_hysterisis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hysterisis"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean flipOnXForLeftHand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_flipOnXForLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_flipOnXForLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipOnXForLeftHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean flipOnYForLeftHand
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_flipOnYForLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_flipOnYForLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipOnYForLeftHand"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean flipOnXForLeftArm
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_flipOnXForLeftArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_flipOnXForLeftArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flipOnXForLeftArm"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableStealing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_disableStealing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_disableStealing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableStealing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean allowPlayerStealing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_allowPlayerStealing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_allowPlayerStealing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowPlayerStealing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TransferrableObject/PositionState initState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::TransferrableObject::dyn_initState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_initState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/ItemStates itemState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& GlobalNamespace::TransferrableObject::dyn_itemState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_itemState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::ItemStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions/DropPositions storedZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& GlobalNamespace::TransferrableObject::dyn_storedZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_storedZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "storedZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions::DropPositions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected TransferrableObject/PositionState previousState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::TransferrableObject::dyn_previousState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_previousState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/PositionState currentState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::TransferrableObject::dyn_currentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_currentState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions/DropPositions dockPositions
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& GlobalNamespace::TransferrableObject::dyn_dockPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_dockPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dockPositions"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions::DropPositions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public AdvancedItemState advancedGrabState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::AdvancedItemState*& GlobalNamespace::TransferrableObject::dyn_advancedGrabState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_advancedGrabState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "advancedGrabState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::AdvancedItemState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig targetRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::TransferrableObject::dyn_targetRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_targetRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean targetRigSet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_targetRigSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_targetRigSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetRigSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/GrabType useGrabType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::GrabType& GlobalNamespace::TransferrableObject::dyn_useGrabType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_useGrabType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "useGrabType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::GrabType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig ownerRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::TransferrableObject::dyn_ownerRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_ownerRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ownerRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions targetDock
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& GlobalNamespace::TransferrableObject::dyn_targetDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_targetDock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetDock"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRigAnchorOverrides anchorOverrides
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigAnchorOverrides*& GlobalNamespace::TransferrableObject::dyn_anchorOverrides() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_anchorOverrides");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchorOverrides"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRigAnchorOverrides**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canAutoGrabLeft
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_canAutoGrabLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_canAutoGrabLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canAutoGrabLeft"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canAutoGrabRight
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_canAutoGrabRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_canAutoGrabRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canAutoGrabRight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 objectIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableObject::dyn_objectIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_objectIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform anchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableObject::dyn_anchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_anchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InteractionPoint gripInteractor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& GlobalNamespace::TransferrableObject::dyn_gripInteractor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_gripInteractor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripInteractor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::InteractionPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform grabAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableObject::dyn_grabAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_grabAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform handPoseLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableObject::dyn_handPoseLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_handPoseLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handPoseLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform handPoseRight
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableObject::dyn_handPoseRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_handPoseRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handPoseRight"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isGrabAnchorSet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_isGrabAnchorSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_isGrabAnchorSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isGrabAnchorSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableItemSlotTransformOverride transferrableItemSlotTransformOverride
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableItemSlotTransformOverride*& GlobalNamespace::TransferrableObject::dyn_transferrableItemSlotTransformOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_transferrableItemSlotTransformOverride");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transferrableItemSlotTransformOverride"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableItemSlotTransformOverride**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 myIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableObject::dyn_myIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_myIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileHeld
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::TransferrableObject::dyn_gameObjectsActiveOnlyWhileHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_gameObjectsActiveOnlyWhileHeld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObjectsActiveOnlyWhileHeld"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] gameObjectsActiveOnlyWhileDocked
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::TransferrableObject::dyn_gameObjectsActiveOnlyWhileDocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_gameObjectsActiveOnlyWhileDocked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObjectsActiveOnlyWhileDocked"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Behaviour[] behavioursEnabledOnlyWhileHeld
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Behaviour*>& GlobalNamespace::TransferrableObject::dyn_behavioursEnabledOnlyWhileHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_behavioursEnabledOnlyWhileHeld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "behavioursEnabledOnlyWhileHeld"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Behaviour*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Behaviour[] behavioursEnabledOnlyWhileDocked
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Behaviour*>& GlobalNamespace::TransferrableObject::dyn_behavioursEnabledOnlyWhileDocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_behavioursEnabledOnlyWhileDocked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "behavioursEnabledOnlyWhileDocked"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Behaviour*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected internal WorldShareableItem worldShareableInstance
[[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem*& GlobalNamespace::TransferrableObject::dyn_worldShareableInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_worldShareableInstance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "worldShareableInstance"))->offset;
  return *reinterpret_cast<::GlobalNamespace::WorldShareableItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single interpTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableObject::dyn_interpTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_interpTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single interpDt
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableObject::dyn_interpDt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_interpDt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpDt"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 interpStartPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TransferrableObject::dyn_interpStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_interpStartPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpStartPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion interpStartRot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::TransferrableObject::dyn_interpStartRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_interpStartRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpStartRot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Int32 enabledOnFrame
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableObject::dyn_enabledOnFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_enabledOnFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enabledOnFrame"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Vector3 initOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TransferrableObject::dyn_initOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_initOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Quaternion initRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::TransferrableObject::dyn_initRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_initRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 initMatrix
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::TransferrableObject::dyn_initMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_initMatrix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initMatrix"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 leftHandMatrix
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::TransferrableObject::dyn_leftHandMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_leftHandMatrix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandMatrix"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 rightHandMatrix
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::TransferrableObject::dyn_rightHandMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_rightHandMatrix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandMatrix"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean positionInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_positionInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_positionInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isSceneObject
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_isSceneObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_isSceneObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isSceneObject"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rigidbody rigidbodyInstance
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::TransferrableObject::dyn_rigidbodyInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_rigidbodyInstance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigidbodyInstance"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isRigidbodySet>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_$isRigidbodySet$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_$isRigidbodySet$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isRigidbodySet>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean canDrop
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_canDrop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_canDrop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canDrop"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean allowReparenting
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_allowReparenting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_allowReparenting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowReparenting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean shareable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_shareable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_shareable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shareable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean detatchOnGrab
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_detatchOnGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_detatchOnGrab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "detatchOnGrab"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean allowWorldSharableInstance
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_allowWorldSharableInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_allowWorldSharableInstance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allowWorldSharableInstance"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform originPoint
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableObject::dyn_originPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_originPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originPoint"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxDistanceFromOriginBeforeRespawn
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableObject::dyn_maxDistanceFromOriginBeforeRespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_maxDistanceFromOriginBeforeRespawn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDistanceFromOriginBeforeRespawn"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip resetPositionAudioClip
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::TransferrableObject::dyn_resetPositionAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_resetPositionAudioClip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resetPositionAudioClip"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxDistanceFromTargetPlayerBeforeRespawn
[[deprecated("Use field access instead!")]] float& GlobalNamespace::TransferrableObject::dyn_maxDistanceFromTargetPlayerBeforeRespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_maxDistanceFromTargetPlayerBeforeRespawn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDistanceFromTargetPlayerBeforeRespawn"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean wasHover
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_wasHover() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_wasHover");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasHover"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isHover
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_isHover() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_isHover");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isHover"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disableItem
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_disableItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_disableItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableItem"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean loaded
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_loaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_loaded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "loaded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean ClearLocalPositionOnReset
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_ClearLocalPositionOnReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_ClearLocalPositionOnReset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ClearLocalPositionOnReset"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/InterpolateState interpState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::InterpolateState& GlobalNamespace::TransferrableObject::dyn_interpState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_interpState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interpState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::InterpolateState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean startInterpolation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_startInterpolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_startInterpolation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startInterpolation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform InitialDockObject
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableObject::dyn_InitialDockObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_InitialDockObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InitialDockObject"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioSrc
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::TransferrableObject::dyn_audioSrc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_audioSrc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSrc"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isListeningFor_OnPostInstantiateAllPrefabs2
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn__isListeningFor_OnPostInstantiateAllPrefabs2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn__isListeningFor_OnPostInstantiateAllPrefabs2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isListeningFor_OnPostInstantiateAllPrefabs2"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_$IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_$IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Transform _defaultAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransferrableObject::dyn__defaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn__defaultAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_defaultAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean _isDefaultAnchorSet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn__isDefaultAnchorSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn__isDefaultAnchorSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isDefaultAnchorSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<UnityEngine.Matrix4x4> transferrableItemSlotTransformOverrideCachedMatrix
[[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Matrix4x4>& GlobalNamespace::TransferrableObject::dyn_transferrableItemSlotTransformOverrideCachedMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_transferrableItemSlotTransformOverrideCachedMatrix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transferrableItemSlotTransformOverrideCachedMatrix"))->offset;
  return *reinterpret_cast<::System::Nullable_1<::UnityEngine::Matrix4x4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean transferrableItemSlotTransformOverrideApplicable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TransferrableObject::dyn_transferrableItemSlotTransformOverrideApplicable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::dyn_transferrableItemSlotTransformOverrideApplicable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transferrableItemSlotTransformOverrideApplicable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransferrableObject.FixTransformOverride
void GlobalNamespace::TransferrableObject::FixTransformOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::FixTransformOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransformOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.Validate
void GlobalNamespace::TransferrableObject::Validate(::Sirenix::OdinInspector::SelfValidationResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::Validate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 71));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: TransferrableObject.get_myRig
::GlobalNamespace::VRRig* GlobalNamespace::TransferrableObject::get_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::get_myRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_myRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRRig*, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.set_myRig
void GlobalNamespace::TransferrableObject::set_myRig(::GlobalNamespace::VRRig* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::set_myRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_myRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransferrableObject.get_isMyRigValid
bool GlobalNamespace::TransferrableObject::get_isMyRigValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::get_isMyRigValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyRigValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.set_isMyRigValid
void GlobalNamespace::TransferrableObject::set_isMyRigValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::set_isMyRigValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isMyRigValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransferrableObject.get_myOnlineRig
::GlobalNamespace::VRRig* GlobalNamespace::TransferrableObject::get_myOnlineRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::get_myOnlineRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_myOnlineRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRRig*, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.set_myOnlineRig
void GlobalNamespace::TransferrableObject::set_myOnlineRig(::GlobalNamespace::VRRig* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::set_myOnlineRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_myOnlineRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransferrableObject.get_isMyOnlineRigValid
bool GlobalNamespace::TransferrableObject::get_isMyOnlineRigValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::get_isMyOnlineRigValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyOnlineRigValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.set_isMyOnlineRigValid
void GlobalNamespace::TransferrableObject::set_isMyOnlineRigValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::set_isMyOnlineRigValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isMyOnlineRigValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransferrableObject.SetTargetRig
void GlobalNamespace::TransferrableObject::SetTargetRig(::GlobalNamespace::VRRig* rig) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::SetTargetRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTargetRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig);
}
// Autogenerated method: TransferrableObject.get_IsLocalOwnedWorldShareable
bool GlobalNamespace::TransferrableObject::get_IsLocalOwnedWorldShareable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::get_IsLocalOwnedWorldShareable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsLocalOwnedWorldShareable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.WorldShareableRequestOwnership
void GlobalNamespace::TransferrableObject::WorldShareableRequestOwnership() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::WorldShareableRequestOwnership");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WorldShareableRequestOwnership", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.get_isRigidbodySet
bool GlobalNamespace::TransferrableObject::get_isRigidbodySet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::get_isRigidbodySet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRigidbodySet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.set_isRigidbodySet
void GlobalNamespace::TransferrableObject::set_isRigidbodySet(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::set_isRigidbodySet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isRigidbodySet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransferrableObject.Awake
void GlobalNamespace::TransferrableObject::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 72));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.get_IsSpawned
bool GlobalNamespace::TransferrableObject::get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 67));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.set_IsSpawned
void GlobalNamespace::TransferrableObject::set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 68));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransferrableObject.OnSpawn
void GlobalNamespace::TransferrableObject::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnDespawn
void GlobalNamespace::TransferrableObject::OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 74));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.SetInitMatrix
void GlobalNamespace::TransferrableObject::SetInitMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::SetInitMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInitMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.Start
void GlobalNamespace::TransferrableObject::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject
void GlobalNamespace::TransferrableObject::OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnEnable_AfterAllCosmeticsSpawnedOrIsSceneObject");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 76));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnDestroy
void GlobalNamespace::TransferrableObject::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 77));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.CleanupDisable
void GlobalNamespace::TransferrableObject::CleanupDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::CleanupDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CleanupDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.PreDisable
void GlobalNamespace::TransferrableObject::PreDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PreDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 78));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.GetDefaultTransformationMatrix
::UnityEngine::Matrix4x4 GlobalNamespace::TransferrableObject::GetDefaultTransformationMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GetDefaultTransformationMatrix");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 79));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Matrix4x4, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.ShouldBeKinematic
bool GlobalNamespace::TransferrableObject::ShouldBeKinematic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ShouldBeKinematic");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 80));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.SpawnShareableObject
void GlobalNamespace::TransferrableObject::SpawnShareableObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::SpawnShareableObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnShareableObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.SpawnTransferableObjectViews
void GlobalNamespace::TransferrableObject::SpawnTransferableObjectViews() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::SpawnTransferableObjectViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnTransferableObjectViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.IsLocalObject
bool GlobalNamespace::TransferrableObject::IsLocalObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::IsLocalObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsLocalObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.SetWorldShareableItem
void GlobalNamespace::TransferrableObject::SetWorldShareableItem(::GlobalNamespace::WorldShareableItem* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::SetWorldShareableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorldShareableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
}
// Autogenerated method: TransferrableObject.OnWorldShareableItemSpawn
void GlobalNamespace::TransferrableObject::OnWorldShareableItemSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnWorldShareableItemSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 81));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.PlayDestroyedOrDisabledEffect
void GlobalNamespace::TransferrableObject::PlayDestroyedOrDisabledEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PlayDestroyedOrDisabledEffect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 82));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnItemDestroyedOrDisabled
void GlobalNamespace::TransferrableObject::OnItemDestroyedOrDisabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnItemDestroyedOrDisabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 83));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.LateUpdate
void GlobalNamespace::TransferrableObject::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::LateUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 84));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.DefaultAnchor
::UnityEngine::Transform* GlobalNamespace::TransferrableObject::DefaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::DefaultAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.GetAnchor
::UnityEngine::Transform* GlobalNamespace::TransferrableObject::GetAnchor(::GlobalNamespace::TransferrableObject::PositionState pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GetAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, pos);
}
// Autogenerated method: TransferrableObject.Attached
bool GlobalNamespace::TransferrableObject::Attached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::Attached");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Attached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.GetTargetStorageZone
::UnityEngine::Transform* GlobalNamespace::TransferrableObject::GetTargetStorageZone(::GlobalNamespace::BodyDockPositions::DropPositions state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GetTargetStorageZone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetStorageZone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, state);
}
// Autogenerated method: TransferrableObject.GetTargetDock
::UnityEngine::Transform* GlobalNamespace::TransferrableObject::GetTargetDock(::GlobalNamespace::TransferrableObject::PositionState state, ::GlobalNamespace::VRRig* rig) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GetTargetDock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableObject", "GetTargetDock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(rig)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, state, rig);
}
// Autogenerated method: TransferrableObject.UpdateFollowXform
void GlobalNamespace::TransferrableObject::UpdateFollowXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::UpdateFollowXform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFollowXform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.DropItem
void GlobalNamespace::TransferrableObject::DropItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::DropItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 85));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.LateUpdateShared
void GlobalNamespace::TransferrableObject::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.ResetToHome
void GlobalNamespace::TransferrableObject::ResetToHome() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ResetToHome");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 87));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.ResetXf
void GlobalNamespace::TransferrableObject::ResetXf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ResetXf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetXf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.ReDock
void GlobalNamespace::TransferrableObject::ReDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ReDock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReDock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.HandleLocalInput
void GlobalNamespace::TransferrableObject::HandleLocalInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::HandleLocalInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLocalInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.LocalMyObjectValidation
void GlobalNamespace::TransferrableObject::LocalMyObjectValidation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::LocalMyObjectValidation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 88));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.LocalPersistanceValidation
void GlobalNamespace::TransferrableObject::LocalPersistanceValidation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::LocalPersistanceValidation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 89));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.ObjectBeingTaken
void GlobalNamespace::TransferrableObject::ObjectBeingTaken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ObjectBeingTaken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ObjectBeingTaken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.LateUpdateLocal
void GlobalNamespace::TransferrableObject::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.LateUpdateReplicatedSceneObject
void GlobalNamespace::TransferrableObject::LateUpdateReplicatedSceneObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::LateUpdateReplicatedSceneObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdateReplicatedSceneObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.LateUpdateReplicated
void GlobalNamespace::TransferrableObject::LateUpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::LateUpdateReplicated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 91));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.ResetToDefaultState
void GlobalNamespace::TransferrableObject::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.SetupMatrixForFreeGrab
void GlobalNamespace::TransferrableObject::SetupMatrixForFreeGrab(::UnityEngine::Vector3 worldPosition, ::UnityEngine::Quaternion worldRotation, ::UnityEngine::Transform* attachPoint, bool leftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::SetupMatrixForFreeGrab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupMatrixForFreeGrab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPosition), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(attachPoint), ::il2cpp_utils::ExtractType(leftHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldPosition, worldRotation, attachPoint, leftHand);
}
// Autogenerated method: TransferrableObject.SetupHandMatrix
void GlobalNamespace::TransferrableObject::SetupHandMatrix(::UnityEngine::Vector3 leftHandPos, ::UnityEngine::Quaternion leftHandRot, ::UnityEngine::Vector3 rightHandPos, ::UnityEngine::Quaternion rightHandRot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::SetupHandMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupHandMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftHandPos), ::il2cpp_utils::ExtractType(leftHandRot), ::il2cpp_utils::ExtractType(rightHandPos), ::il2cpp_utils::ExtractType(rightHandRot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, leftHandPos, leftHandRot, rightHandPos, rightHandRot);
}
// Autogenerated method: TransferrableObject.OnHandMatrixUpdate
void GlobalNamespace::TransferrableObject::OnHandMatrixUpdate(::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation, bool leftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnHandMatrixUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 93));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localPosition, localRotation, leftHand);
}
// Autogenerated method: TransferrableObject.ActivateItemFX
void GlobalNamespace::TransferrableObject::ActivateItemFX(float hapticStrength, float hapticDuration, int soundIndex, float soundVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ActivateItemFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateItemFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hapticStrength), ::il2cpp_utils::ExtractType(hapticDuration), ::il2cpp_utils::ExtractType(soundIndex), ::il2cpp_utils::ExtractType(soundVolume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hapticStrength, hapticDuration, soundIndex, soundVolume);
}
// Autogenerated method: TransferrableObject.PlayNote
void GlobalNamespace::TransferrableObject::PlayNote(int note, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PlayNote");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 94));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, note, volume);
}
// Autogenerated method: TransferrableObject.AutoGrabTrue
bool GlobalNamespace::TransferrableObject::AutoGrabTrue(bool leftGrabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::AutoGrabTrue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 95));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, leftGrabbingHand);
}
// Autogenerated method: TransferrableObject.CanActivate
bool GlobalNamespace::TransferrableObject::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 96));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.CanDeactivate
bool GlobalNamespace::TransferrableObject::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 97));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnActivate
void GlobalNamespace::TransferrableObject::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnDeactivate
void GlobalNamespace::TransferrableObject::OnDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 99));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.IsMyItem
bool GlobalNamespace::TransferrableObject::IsMyItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::IsMyItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 100));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.IsHeld
bool GlobalNamespace::TransferrableObject::IsHeld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::IsHeld");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 101));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.IsGrabbable
bool GlobalNamespace::TransferrableObject::IsGrabbable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::IsGrabbable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 102));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.InHand
bool GlobalNamespace::TransferrableObject::InHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::InHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.Dropped
bool GlobalNamespace::TransferrableObject::Dropped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::Dropped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dropped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.InLeftHand
bool GlobalNamespace::TransferrableObject::InLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::InLeftHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InLeftHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.InRightHand
bool GlobalNamespace::TransferrableObject::InRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::InRightHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InRightHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnChest
bool GlobalNamespace::TransferrableObject::OnChest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnChest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnChest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnShoulder
bool GlobalNamespace::TransferrableObject::OnShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnShoulder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnShoulder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OwningPlayer
::Photon::Realtime::Player* GlobalNamespace::TransferrableObject::OwningPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OwningPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OwningPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Photon::Realtime::Player*, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnOwnershipTransferred
void GlobalNamespace::TransferrableObject::OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnOwnershipTransferred");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 103));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toPlayer, fromPlayer);
}
// Autogenerated method: TransferrableObject.OnOwnershipRequest
bool GlobalNamespace::TransferrableObject::OnOwnershipRequest(::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnOwnershipRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 62));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer);
}
// Autogenerated method: TransferrableObject.OnMasterClientAssistedTakeoverRequest
bool GlobalNamespace::TransferrableObject::OnMasterClientAssistedTakeoverRequest(::Photon::Realtime::Player* fromPlayer, ::Photon::Realtime::Player* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnMasterClientAssistedTakeoverRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 64));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer, toPlayer);
}
// Autogenerated method: TransferrableObject.OnMyOwnerLeft
void GlobalNamespace::TransferrableObject::OnMyOwnerLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnMyOwnerLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 63));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnMyCreatorLeft
void GlobalNamespace::TransferrableObject::OnMyCreatorLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnMyCreatorLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 65));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject..cctor
void GlobalNamespace::TransferrableObject::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableObject", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TransferrableObject.OnEnable
void GlobalNamespace::TransferrableObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnDisable
void GlobalNamespace::TransferrableObject::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnJoinedRoom
void GlobalNamespace::TransferrableObject::OnJoinedRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnJoinedRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnLeftRoom
void GlobalNamespace::TransferrableObject::OnLeftRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnPlayerLeftRoom
void GlobalNamespace::TransferrableObject::OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnPlayerLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 44));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, otherPlayer);
}
// Autogenerated method: TransferrableObject.OnGrab
void GlobalNamespace::TransferrableObject::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: TransferrableObject.OnRelease
bool GlobalNamespace::TransferrableObject::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: TransferrableObject.DropItemCleanup
void GlobalNamespace::TransferrableObject::DropItemCleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::DropItemCleanup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 60));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject.OnHover
void GlobalNamespace::TransferrableObject::OnHover(::GlobalNamespace::InteractionPoint* pointHovered, ::UnityEngine::GameObject* hoveringHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::OnHover");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointHovered, hoveringHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObject/ItemStates
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TransferrableObject/ItemStates State0
::GlobalNamespace::TransferrableObject::ItemStates GlobalNamespace::TransferrableObject::ItemStates::_get_State0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_get_State0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::ItemStates>("", "TransferrableObject/ItemStates", "State0"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/ItemStates State0
void GlobalNamespace::TransferrableObject::ItemStates::_set_State0(::GlobalNamespace::TransferrableObject::ItemStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_set_State0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/ItemStates", "State0", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/ItemStates State1
::GlobalNamespace::TransferrableObject::ItemStates GlobalNamespace::TransferrableObject::ItemStates::_get_State1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_get_State1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::ItemStates>("", "TransferrableObject/ItemStates", "State1"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/ItemStates State1
void GlobalNamespace::TransferrableObject::ItemStates::_set_State1(::GlobalNamespace::TransferrableObject::ItemStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_set_State1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/ItemStates", "State1", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/ItemStates State2
::GlobalNamespace::TransferrableObject::ItemStates GlobalNamespace::TransferrableObject::ItemStates::_get_State2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_get_State2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::ItemStates>("", "TransferrableObject/ItemStates", "State2"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/ItemStates State2
void GlobalNamespace::TransferrableObject::ItemStates::_set_State2(::GlobalNamespace::TransferrableObject::ItemStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_set_State2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/ItemStates", "State2", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/ItemStates State3
::GlobalNamespace::TransferrableObject::ItemStates GlobalNamespace::TransferrableObject::ItemStates::_get_State3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_get_State3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::ItemStates>("", "TransferrableObject/ItemStates", "State3"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/ItemStates State3
void GlobalNamespace::TransferrableObject::ItemStates::_set_State3(::GlobalNamespace::TransferrableObject::ItemStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_set_State3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/ItemStates", "State3", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/ItemStates State4
::GlobalNamespace::TransferrableObject::ItemStates GlobalNamespace::TransferrableObject::ItemStates::_get_State4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_get_State4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::ItemStates>("", "TransferrableObject/ItemStates", "State4"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/ItemStates State4
void GlobalNamespace::TransferrableObject::ItemStates::_set_State4(::GlobalNamespace::TransferrableObject::ItemStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::_set_State4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/ItemStates", "State4", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableObject::ItemStates::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::ItemStates::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObject/GrabType
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TransferrableObject/GrabType Default
::GlobalNamespace::TransferrableObject::GrabType GlobalNamespace::TransferrableObject::GrabType::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GrabType::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::GrabType>("", "TransferrableObject/GrabType", "Default"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/GrabType Default
void GlobalNamespace::TransferrableObject::GrabType::_set_Default(::GlobalNamespace::TransferrableObject::GrabType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GrabType::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/GrabType", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/GrabType Free
::GlobalNamespace::TransferrableObject::GrabType GlobalNamespace::TransferrableObject::GrabType::_get_Free() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GrabType::_get_Free");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::GrabType>("", "TransferrableObject/GrabType", "Free"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/GrabType Free
void GlobalNamespace::TransferrableObject::GrabType::_set_Free(::GlobalNamespace::TransferrableObject::GrabType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GrabType::_set_Free");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/GrabType", "Free", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableObject::GrabType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::GrabType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState OnLeftArm
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_OnLeftArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_OnLeftArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "OnLeftArm"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState OnLeftArm
void GlobalNamespace::TransferrableObject::PositionState::_set_OnLeftArm(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_OnLeftArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "OnLeftArm", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState OnRightArm
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_OnRightArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_OnRightArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "OnRightArm"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState OnRightArm
void GlobalNamespace::TransferrableObject::PositionState::_set_OnRightArm(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_OnRightArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "OnRightArm", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState InLeftHand
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_InLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_InLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "InLeftHand"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState InLeftHand
void GlobalNamespace::TransferrableObject::PositionState::_set_InLeftHand(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_InLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "InLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState InRightHand
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_InRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_InRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "InRightHand"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState InRightHand
void GlobalNamespace::TransferrableObject::PositionState::_set_InRightHand(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_InRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "InRightHand", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState OnChest
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_OnChest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_OnChest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "OnChest"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState OnChest
void GlobalNamespace::TransferrableObject::PositionState::_set_OnChest(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_OnChest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "OnChest", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState OnLeftShoulder
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_OnLeftShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_OnLeftShoulder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "OnLeftShoulder"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState OnLeftShoulder
void GlobalNamespace::TransferrableObject::PositionState::_set_OnLeftShoulder(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_OnLeftShoulder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "OnLeftShoulder", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState OnRightShoulder
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_OnRightShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_OnRightShoulder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "OnRightShoulder"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState OnRightShoulder
void GlobalNamespace::TransferrableObject::PositionState::_set_OnRightShoulder(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_OnRightShoulder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "OnRightShoulder", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState Dropped
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_Dropped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_Dropped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "Dropped"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState Dropped
void GlobalNamespace::TransferrableObject::PositionState::_set_Dropped(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_Dropped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "Dropped", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/PositionState None
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::TransferrableObject::PositionState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::PositionState>("", "TransferrableObject/PositionState", "None"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/PositionState None
void GlobalNamespace::TransferrableObject::PositionState::_set_None(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/PositionState", "None", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableObject::PositionState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::PositionState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObject/InterpolateState
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TransferrableObject/InterpolateState None
::GlobalNamespace::TransferrableObject::InterpolateState GlobalNamespace::TransferrableObject::InterpolateState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::InterpolateState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::InterpolateState>("", "TransferrableObject/InterpolateState", "None"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/InterpolateState None
void GlobalNamespace::TransferrableObject::InterpolateState::_set_None(::GlobalNamespace::TransferrableObject::InterpolateState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::InterpolateState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/InterpolateState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public TransferrableObject/InterpolateState Interpolating
::GlobalNamespace::TransferrableObject::InterpolateState GlobalNamespace::TransferrableObject::InterpolateState::_get_Interpolating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::InterpolateState::_get_Interpolating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::InterpolateState>("", "TransferrableObject/InterpolateState", "Interpolating"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObject/InterpolateState Interpolating
void GlobalNamespace::TransferrableObject::InterpolateState::_set_Interpolating(::GlobalNamespace::TransferrableObject::InterpolateState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::InterpolateState::_set_Interpolating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObject/InterpolateState", "Interpolating", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TransferrableObject::InterpolateState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::InterpolateState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObject/<>c
#include "GlobalNamespace/TransferrableObject_--c.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly TransferrableObject/<>c <>9
::GlobalNamespace::TransferrableObject::$$c* GlobalNamespace::TransferrableObject::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObject::$$c*>("", "TransferrableObject/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly TransferrableObject/<>c <>9
void GlobalNamespace::TransferrableObject::$$c::_set_$$9(::GlobalNamespace::TransferrableObject::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TransferrableObject/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__72_0
::System::Action* GlobalNamespace::TransferrableObject::$$c::_get_$$9__72_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_get_$$9__72_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "TransferrableObject/<>c", "<>9__72_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__72_0
void GlobalNamespace::TransferrableObject::$$c::_set_$$9__72_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_set_$$9__72_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TransferrableObject/<>c", "<>9__72_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__118_0
::System::Action* GlobalNamespace::TransferrableObject::$$c::_get_$$9__118_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_get_$$9__118_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "TransferrableObject/<>c", "<>9__118_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__118_0
void GlobalNamespace::TransferrableObject::$$c::_set_$$9__118_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_set_$$9__118_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TransferrableObject/<>c", "<>9__118_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__157_0
::System::Action* GlobalNamespace::TransferrableObject::$$c::_get_$$9__157_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_get_$$9__157_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "TransferrableObject/<>c", "<>9__157_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__157_0
void GlobalNamespace::TransferrableObject::$$c::_set_$$9__157_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_set_$$9__157_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TransferrableObject/<>c", "<>9__157_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__158_0
::System::Action* GlobalNamespace::TransferrableObject::$$c::_get_$$9__158_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_get_$$9__158_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "TransferrableObject/<>c", "<>9__158_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__158_0
void GlobalNamespace::TransferrableObject::$$c::_set_$$9__158_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::_set_$$9__158_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "TransferrableObject/<>c", "<>9__158_0", value)));
}
// Autogenerated method: TransferrableObject/<>c..cctor
void GlobalNamespace::TransferrableObject::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableObject/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TransferrableObject/<>c.<WorldShareableRequestOwnership>b__72_0
void GlobalNamespace::TransferrableObject::$$c::$WorldShareableRequestOwnership$b__72_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::<WorldShareableRequestOwnership>b__72_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WorldShareableRequestOwnership>b__72_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject/<>c.<OnDisable>b__118_0
void GlobalNamespace::TransferrableObject::$$c::$OnDisable$b__118_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::<OnDisable>b__118_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnDisable>b__118_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject/<>c.<ResetToDefaultState>b__157_0
void GlobalNamespace::TransferrableObject::$$c::$ResetToDefaultState$b__157_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::<ResetToDefaultState>b__157_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ResetToDefaultState>b__157_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObject/<>c.<OnGrab>b__158_0
void GlobalNamespace::TransferrableObject::$$c::$OnGrab$b__158_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c::<OnGrab>b__158_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnGrab>b__158_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObject/<>c__DisplayClass125_0
#include "GlobalNamespace/TransferrableObject_--c__DisplayClass125_0.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public TransferrableObject <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player owner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::dyn_owner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::dyn_owner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "owner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransferrableObject/<>c__DisplayClass125_0.<SpawnTransferableObjectViews>b__0
void GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::$SpawnTransferableObjectViews$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObject::$$c__DisplayClass125_0::<SpawnTransferableObjectViews>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SpawnTransferableObjectViews>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObjectGripPosition
#include "GlobalNamespace/TransferrableObjectGripPosition.hpp"
// Including type: TransferrableItemSlotTransformOverride
#include "GlobalNamespace/TransferrableItemSlotTransformOverride.hpp"
// Including type: SubGrabPoint
#include "GlobalNamespace/SubGrabPoint.hpp"
// Including type: SlotTransformOverride
#include "GlobalNamespace/SlotTransformOverride.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TransferrableItemSlotTransformOverride parentObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableItemSlotTransformOverride*& GlobalNamespace::TransferrableObjectGripPosition::dyn_parentObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectGripPosition::dyn_parentObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableItemSlotTransformOverride**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TransferrableObject/PositionState attachmentType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::TransferrableObjectGripPosition::dyn_attachmentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectGripPosition::dyn_attachmentType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attachmentType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransferrableObjectGripPosition.Awake
void GlobalNamespace::TransferrableObjectGripPosition::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectGripPosition::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObjectGripPosition.CreateSubGrabPoint
::GlobalNamespace::SubGrabPoint* GlobalNamespace::TransferrableObjectGripPosition::CreateSubGrabPoint(::GlobalNamespace::SlotTransformOverride* overrideContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectGripPosition::CreateSubGrabPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubGrabPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overrideContainer)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::SubGrabPoint*, false>(this, ___internal__method, overrideContainer);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransferrableObjectManager
#include "GlobalNamespace/TransferrableObjectManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TransferrableObjectManager instance
::GlobalNamespace::TransferrableObjectManager* GlobalNamespace::TransferrableObjectManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TransferrableObjectManager*>("", "TransferrableObjectManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public TransferrableObjectManager instance
void GlobalNamespace::TransferrableObjectManager::_set_instance(::GlobalNamespace::TransferrableObjectManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObjectManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::TransferrableObjectManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "TransferrableObjectManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::TransferrableObjectManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObjectManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.List`1<TransferrableObject> transObs
::System::Collections::Generic::List_1<::GlobalNamespace::TransferrableObject*>* GlobalNamespace::TransferrableObjectManager::_get_transObs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::_get_transObs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::TransferrableObject*>*>("", "TransferrableObjectManager", "transObs"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.List`1<TransferrableObject> transObs
void GlobalNamespace::TransferrableObjectManager::_set_transObs(::System::Collections::Generic::List_1<::GlobalNamespace::TransferrableObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::_set_transObs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TransferrableObjectManager", "transObs", value));
}
// Autogenerated method: TransferrableObjectManager.Awake
void GlobalNamespace::TransferrableObjectManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObjectManager.OnDestroy
void GlobalNamespace::TransferrableObjectManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObjectManager.LateUpdate
void GlobalNamespace::TransferrableObjectManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransferrableObjectManager.CreateManager
void GlobalNamespace::TransferrableObjectManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableObjectManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: TransferrableObjectManager.SetInstance
void GlobalNamespace::TransferrableObjectManager::SetInstance(::GlobalNamespace::TransferrableObjectManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableObjectManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: TransferrableObjectManager.Register
void GlobalNamespace::TransferrableObjectManager::Register(::GlobalNamespace::TransferrableObject* transOb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableObjectManager", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transOb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transOb);
}
// Autogenerated method: TransferrableObjectManager.Unregister
void GlobalNamespace::TransferrableObjectManager::Unregister(::GlobalNamespace::TransferrableObject* transOb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableObjectManager", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transOb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transOb);
}
// Autogenerated method: TransferrableObjectManager..cctor
void GlobalNamespace::TransferrableObjectManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransferrableObjectManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransferrableObjectManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UmbrellaItem
#include "GlobalNamespace/UmbrellaItem.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform[] umbrellaBones
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::UmbrellaItem::dyn_umbrellaBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_umbrellaBones");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "umbrellaBones"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] startingAngles
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::UmbrellaItem::dyn_startingAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_startingAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngles"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] endingAngles
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::UmbrellaItem::dyn_endingAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_endingAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endingAngles"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UmbrellaItem umbrellaToCopy
[[deprecated("Use field access instead!")]] ::GlobalNamespace::UmbrellaItem*& GlobalNamespace::UmbrellaItem::dyn_umbrellaToCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_umbrellaToCopy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "umbrellaToCopy"))->offset;
  return *reinterpret_cast<::GlobalNamespace::UmbrellaItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lerpValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::UmbrellaItem::dyn_lerpValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_lerpValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider umbrellaRainDestroyTrigger
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::UmbrellaItem::dyn_umbrellaRainDestroyTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_umbrellaRainDestroyTrigger");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "umbrellaRainDestroyTrigger"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] gameObjectsActivatedOnOpen
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::UmbrellaItem::dyn_gameObjectsActivatedOnOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_gameObjectsActivatedOnOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameObjectsActivatedOnOpen"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem[] particlesEmitOnOpen
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& GlobalNamespace::UmbrellaItem::dyn_particlesEmitOnOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_particlesEmitOnOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particlesEmitOnOpen"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SoundIdOpen
[[deprecated("Use field access instead!")]] int& GlobalNamespace::UmbrellaItem::dyn_SoundIdOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_SoundIdOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SoundIdOpen"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SoundIdClose
[[deprecated("Use field access instead!")]] int& GlobalNamespace::UmbrellaItem::dyn_SoundIdClose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_SoundIdClose");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SoundIdClose"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UmbrellaItem/UmbrellaStates previousUmbrellaState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::UmbrellaItem::UmbrellaStates& GlobalNamespace::UmbrellaItem::dyn_previousUmbrellaState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::dyn_previousUmbrellaState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousUmbrellaState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::UmbrellaItem::UmbrellaStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UmbrellaItem.OnUmbrellaStateChanged
void GlobalNamespace::UmbrellaItem::OnUmbrellaStateChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::OnUmbrellaStateChanged");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::UmbrellaItem*), 104));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.UpdateAngles
void GlobalNamespace::UmbrellaItem::UpdateAngles(::ArrayW<::UnityEngine::Quaternion> toAngles, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::UpdateAngles");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::UmbrellaItem*), 105));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toAngles, t);
}
// Autogenerated method: UmbrellaItem.GenerateAngles
void GlobalNamespace::UmbrellaItem::GenerateAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::GenerateAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.Start
void GlobalNamespace::UmbrellaItem::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.OnActivate
void GlobalNamespace::UmbrellaItem::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.OnEnable
void GlobalNamespace::UmbrellaItem::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.OnDisable
void GlobalNamespace::UmbrellaItem::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.ResetToDefaultState
void GlobalNamespace::UmbrellaItem::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.OnRelease
bool GlobalNamespace::UmbrellaItem::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: UmbrellaItem.LateUpdateShared
void GlobalNamespace::UmbrellaItem::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.CanActivate
bool GlobalNamespace::UmbrellaItem::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 96));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UmbrellaItem.CanDeactivate
bool GlobalNamespace::UmbrellaItem::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 97));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UmbrellaItem/UmbrellaStates
#include "GlobalNamespace/UmbrellaItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UmbrellaItem/UmbrellaStates UmbrellaOpen
::GlobalNamespace::UmbrellaItem::UmbrellaStates GlobalNamespace::UmbrellaItem::UmbrellaStates::_get_UmbrellaOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::UmbrellaStates::_get_UmbrellaOpen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UmbrellaItem::UmbrellaStates>("", "UmbrellaItem/UmbrellaStates", "UmbrellaOpen"));
}
// Autogenerated static field setter
// Set static field: static public UmbrellaItem/UmbrellaStates UmbrellaOpen
void GlobalNamespace::UmbrellaItem::UmbrellaStates::_set_UmbrellaOpen(::GlobalNamespace::UmbrellaItem::UmbrellaStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::UmbrellaStates::_set_UmbrellaOpen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UmbrellaItem/UmbrellaStates", "UmbrellaOpen", value));
}
// Autogenerated static field getter
// Get static field: static public UmbrellaItem/UmbrellaStates UmbrellaClosed
::GlobalNamespace::UmbrellaItem::UmbrellaStates GlobalNamespace::UmbrellaItem::UmbrellaStates::_get_UmbrellaClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::UmbrellaStates::_get_UmbrellaClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::UmbrellaItem::UmbrellaStates>("", "UmbrellaItem/UmbrellaStates", "UmbrellaClosed"));
}
// Autogenerated static field setter
// Set static field: static public UmbrellaItem/UmbrellaStates UmbrellaClosed
void GlobalNamespace::UmbrellaItem::UmbrellaStates::_set_UmbrellaClosed(::GlobalNamespace::UmbrellaItem::UmbrellaStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::UmbrellaStates::_set_UmbrellaClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UmbrellaItem/UmbrellaStates", "UmbrellaClosed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::UmbrellaItem::UmbrellaStates::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::UmbrellaStates::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRRigAnchorOverrides
#include "GlobalNamespace/VRRigAnchorOverrides.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: GorillaNetworking.CosmeticsController/CosmeticSlots
#include "GorillaNetworking/CosmeticsController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: UnityEngine.Transform nameDefaultAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_nameDefaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_nameDefaultAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nameDefaultAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.Transform nameTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_nameTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_nameTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nameTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.Transform chestDefaultTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_chestDefaultTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_chestDefaultTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestDefaultTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.Transform huntComputer
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_huntComputer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_huntComputer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "huntComputer"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.Transform huntComputerDefaultAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_huntComputerDefaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_huntComputerDefaultAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "huntComputerDefaultAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform huntDefaultTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_huntDefaultTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_huntDefaultTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "huntDefaultTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Transform builderResizeButton
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_builderResizeButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_builderResizeButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "builderResizeButton"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.Transform builderResizeButtonDefaultAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_builderResizeButtonDefaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_builderResizeButtonDefaultAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "builderResizeButtonDefaultAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform builderResizeButtonDefaultTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_builderResizeButtonDefaultTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_builderResizeButtonDefaultTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "builderResizeButtonDefaultTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Transform[] overrideAnchors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& GlobalNamespace::VRRigAnchorOverrides::dyn_overrideAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_overrideAnchors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overrideAnchors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Transform*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject nameLastObjectToAttach
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::VRRigAnchorOverrides::dyn_nameLastObjectToAttach() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_nameLastObjectToAttach");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nameLastObjectToAttach"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform currentBadgeTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_currentBadgeTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_currentBadgeTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentBadgeTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 badgeDefaultPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRigAnchorOverrides::dyn_badgeDefaultPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_badgeDefaultPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "badgeDefaultPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion badgeDefaultRot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::VRRigAnchorOverrides::dyn_badgeDefaultRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_badgeDefaultRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "badgeDefaultRot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] badgeAnchors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::VRRigAnchorOverrides::dyn_badgeAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_badgeAnchors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "badgeAnchors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject[] nameAnchors
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::VRRigAnchorOverrides::dyn_nameAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_nameAnchors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nameAnchors"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform friendshipBraceletLeftDefaultAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_friendshipBraceletLeftDefaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_friendshipBraceletLeftDefaultAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletLeftDefaultAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform friendshipBraceletLeftAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_friendshipBraceletLeftAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_friendshipBraceletLeftAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletLeftAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform friendshipBraceletRightDefaultAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_friendshipBraceletRightDefaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_friendshipBraceletRightDefaultAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletRightDefaultAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform friendshipBraceletRightAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRigAnchorOverrides::dyn_friendshipBraceletRightAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::dyn_friendshipBraceletRightAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletRightAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRRigAnchorOverrides.get_CurrentBadgeTransform
::UnityEngine::Transform* GlobalNamespace::VRRigAnchorOverrides::get_CurrentBadgeTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::get_CurrentBadgeTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentBadgeTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.set_CurrentBadgeTransform
void GlobalNamespace::VRRigAnchorOverrides::set_CurrentBadgeTransform(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::set_CurrentBadgeTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentBadgeTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRigAnchorOverrides.get_HuntDefaultAnchor
::UnityEngine::Transform* GlobalNamespace::VRRigAnchorOverrides::get_HuntDefaultAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::get_HuntDefaultAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HuntDefaultAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.get_HuntComputer
::UnityEngine::Transform* GlobalNamespace::VRRigAnchorOverrides::get_HuntComputer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::get_HuntComputer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HuntComputer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.get_BuilderWatchAnchor
::UnityEngine::Transform* GlobalNamespace::VRRigAnchorOverrides::get_BuilderWatchAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::get_BuilderWatchAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BuilderWatchAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.get_BuilderWatch
::UnityEngine::Transform* GlobalNamespace::VRRigAnchorOverrides::get_BuilderWatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::get_BuilderWatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BuilderWatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.Awake
void GlobalNamespace::VRRigAnchorOverrides::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.OnEnable
void GlobalNamespace::VRRigAnchorOverrides::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.MapPositionToIndex
int GlobalNamespace::VRRigAnchorOverrides::MapPositionToIndex(::GlobalNamespace::TransferrableObject::PositionState pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::MapPositionToIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapPositionToIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, pos);
}
// Autogenerated method: VRRigAnchorOverrides.OverrideAnchor
void GlobalNamespace::VRRigAnchorOverrides::OverrideAnchor(::GlobalNamespace::TransferrableObject::PositionState pos, ::UnityEngine::Transform* anchor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::OverrideAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OverrideAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(anchor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, anchor);
}
// Autogenerated method: VRRigAnchorOverrides.AnchorOverride
::UnityEngine::Transform* GlobalNamespace::VRRigAnchorOverrides::AnchorOverride(::GlobalNamespace::TransferrableObject::PositionState pos, ::UnityEngine::Transform* fallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::AnchorOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnchorOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(fallback)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, pos, fallback);
}
// Autogenerated method: VRRigAnchorOverrides.UpdateNameAnchor
void GlobalNamespace::VRRigAnchorOverrides::UpdateNameAnchor(::UnityEngine::GameObject* nameAnchor, ::GorillaNetworking::CosmeticsController::CosmeticSlots slot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::UpdateNameAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateNameAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameAnchor), ::il2cpp_utils::ExtractType(slot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nameAnchor, slot);
}
// Autogenerated method: VRRigAnchorOverrides.UpdateName
void GlobalNamespace::VRRigAnchorOverrides::UpdateName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::UpdateName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.UpdateBadgeAnchor
void GlobalNamespace::VRRigAnchorOverrides::UpdateBadgeAnchor(::UnityEngine::GameObject* badgeAnchor, ::GorillaNetworking::CosmeticsController::CosmeticSlots slot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::UpdateBadgeAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBadgeAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(badgeAnchor), ::il2cpp_utils::ExtractType(slot)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, badgeAnchor, slot);
}
// Autogenerated method: VRRigAnchorOverrides.UpdateBadge
void GlobalNamespace::VRRigAnchorOverrides::UpdateBadge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::UpdateBadge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBadge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRigAnchorOverrides.ResetBadge
void GlobalNamespace::VRRigAnchorOverrides::ResetBadge() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigAnchorOverrides::ResetBadge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetBadge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: YorickLook
#include "GlobalNamespace/YorickLook.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftEye
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::YorickLook::dyn_leftEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_leftEye");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftEye"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightEye
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::YorickLook::dyn_rightEye() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_rightEye");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightEye"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform lookTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::YorickLook::dyn_lookTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_lookTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lookRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::YorickLook::dyn_lookRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_lookRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider[] overlapColliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::YorickLook::dyn_overlapColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_overlapColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlapColliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<VRRig> rigs
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>*& GlobalNamespace::YorickLook::dyn_rigs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_rigs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigs"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::VRRig*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask layerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::YorickLook::dyn_layerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_layerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::YorickLook::dyn_rotSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_rotSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lookAtAngleDegrees
[[deprecated("Use field access instead!")]] float& GlobalNamespace::YorickLook::dyn_lookAtAngleDegrees() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::dyn_lookAtAngleDegrees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lookAtAngleDegrees"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: YorickLook.Awake
void GlobalNamespace::YorickLook::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: YorickLook.LateUpdate
void GlobalNamespace::YorickLook::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::YorickLook::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PurchaseCurrencyButton
#include "GlobalNamespace/PurchaseCurrencyButton.hpp"
// Including type: PurchaseCurrencyButton/<ButtonColorUpdate>d__3
#include "GlobalNamespace/PurchaseCurrencyButton_-ButtonColorUpdate-d__3.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String purchaseCurrencySize
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::PurchaseCurrencyButton::dyn_purchaseCurrencySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::dyn_purchaseCurrencySize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "purchaseCurrencySize"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single buttonFadeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PurchaseCurrencyButton::dyn_buttonFadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::dyn_buttonFadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonFadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PurchaseCurrencyButton.ButtonColorUpdate
::System::Collections::IEnumerator* GlobalNamespace::PurchaseCurrencyButton::ButtonColorUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::ButtonColorUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ButtonColorUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseCurrencyButton.ButtonActivation
void GlobalNamespace::PurchaseCurrencyButton::ButtonActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::ButtonActivation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: PurchaseCurrencyButton/<ButtonColorUpdate>d__3
#include "GlobalNamespace/PurchaseCurrencyButton_-ButtonColorUpdate-d__3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PurchaseCurrencyButton <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PurchaseCurrencyButton*& GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PurchaseCurrencyButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PurchaseCurrencyButton/<ButtonColorUpdate>d__3.System.IDisposable.Dispose
void GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseCurrencyButton/<ButtonColorUpdate>d__3.MoveNext
bool GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseCurrencyButton/<ButtonColorUpdate>d__3.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseCurrencyButton/<ButtonColorUpdate>d__3.System.Collections.IEnumerator.Reset
void GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseCurrencyButton/<ButtonColorUpdate>d__3.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseCurrencyButton::$ButtonColorUpdate$d__3*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PurchaseItemButton
#include "GlobalNamespace/PurchaseItemButton.hpp"
// Including type: PurchaseItemButton/<ButtonColorUpdate>d__2
#include "GlobalNamespace/PurchaseItemButton_-ButtonColorUpdate-d__2.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String buttonSide
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::PurchaseItemButton::dyn_buttonSide() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::dyn_buttonSide");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonSide"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PurchaseItemButton.ButtonColorUpdate
::System::Collections::IEnumerator* GlobalNamespace::PurchaseItemButton::ButtonColorUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::ButtonColorUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ButtonColorUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseItemButton.ButtonActivationWithHand
void GlobalNamespace::PurchaseItemButton::ButtonActivationWithHand(bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::ButtonActivationWithHand");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeftHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: PurchaseItemButton/<ButtonColorUpdate>d__2
#include "GlobalNamespace/PurchaseItemButton_-ButtonColorUpdate-d__2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PurchaseItemButton <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PurchaseItemButton*& GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PurchaseItemButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PurchaseItemButton/<ButtonColorUpdate>d__2.System.IDisposable.Dispose
void GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseItemButton/<ButtonColorUpdate>d__2.MoveNext
bool GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseItemButton/<ButtonColorUpdate>d__2.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseItemButton/<ButtonColorUpdate>d__2.System.Collections.IEnumerator.Reset
void GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PurchaseItemButton/<ButtonColorUpdate>d__2.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PurchaseItemButton::$ButtonColorUpdate$d__2*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ShoppingCart
#include "GlobalNamespace/ShoppingCart.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ShoppingCart instance
::GlobalNamespace::ShoppingCart* GlobalNamespace::ShoppingCart::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShoppingCart::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ShoppingCart*>("", "ShoppingCart", "instance"));
}
// Autogenerated static field setter
// Set static field: static public ShoppingCart instance
void GlobalNamespace::ShoppingCart::_set_instance(::GlobalNamespace::ShoppingCart* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShoppingCart::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ShoppingCart", "instance", value));
}
// Autogenerated method: ShoppingCart.Awake
void GlobalNamespace::ShoppingCart::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShoppingCart::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShoppingCart.Start
void GlobalNamespace::ShoppingCart::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShoppingCart::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShoppingCart.Update
void GlobalNamespace::ShoppingCart::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShoppingCart::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SmoothLoop
#include "GlobalNamespace/SmoothLoop.hpp"
// Including type: SmoothLoop/<DelayedStart>d__6
#include "GlobalNamespace/SmoothLoop_-DelayedStart-d__6.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource source
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::SmoothLoop::dyn_source() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::dyn_source");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "source"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single delay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SmoothLoop::dyn_delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::dyn_delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean randomStart
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SmoothLoop::dyn_randomStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::dyn_randomStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "randomStart"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SmoothLoop.Start
void GlobalNamespace::SmoothLoop::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothLoop.Update
void GlobalNamespace::SmoothLoop::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothLoop.OnEnable
void GlobalNamespace::SmoothLoop::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothLoop.DelayedStart
::System::Collections::IEnumerator* GlobalNamespace::SmoothLoop::DelayedStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::DelayedStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DelayedStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SmoothLoop/<DelayedStart>d__6
#include "GlobalNamespace/SmoothLoop_-DelayedStart-d__6.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SmoothLoop::$DelayedStart$d__6::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::$DelayedStart$d__6::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::SmoothLoop::$DelayedStart$d__6::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::$DelayedStart$d__6::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SmoothLoop <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SmoothLoop*& GlobalNamespace::SmoothLoop::$DelayedStart$d__6::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::$DelayedStart$d__6::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SmoothLoop**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SmoothLoop/<DelayedStart>d__6.System.IDisposable.Dispose
void GlobalNamespace::SmoothLoop::$DelayedStart$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::$DelayedStart$d__6::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SmoothLoop::$DelayedStart$d__6*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothLoop/<DelayedStart>d__6.MoveNext
bool GlobalNamespace::SmoothLoop::$DelayedStart$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::$DelayedStart$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SmoothLoop::$DelayedStart$d__6*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SmoothLoop/<DelayedStart>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SmoothLoop::$DelayedStart$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::$DelayedStart$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SmoothLoop::$DelayedStart$d__6*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SmoothLoop/<DelayedStart>d__6.System.Collections.IEnumerator.Reset
void GlobalNamespace::SmoothLoop::$DelayedStart$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::$DelayedStart$d__6::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SmoothLoop::$DelayedStart$d__6*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SmoothLoop/<DelayedStart>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SmoothLoop::$DelayedStart$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothLoop::$DelayedStart$d__6::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SmoothLoop::$DelayedStart$d__6*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TryOnBundleButton
#include "GlobalNamespace/TryOnBundleButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 buttonIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TryOnBundleButton::dyn_buttonIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundleButton::dyn_buttonIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String playfabBundleID
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundleButton::dyn_playfabBundleID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundleButton::dyn_playfabBundleID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playfabBundleID"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TryOnBundleButton.ButtonActivationWithHand
void GlobalNamespace::TryOnBundleButton::ButtonActivationWithHand(bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundleButton::ButtonActivationWithHand");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeftHand);
}
// Autogenerated method: TryOnBundleButton.UpdateColor
void GlobalNamespace::TryOnBundleButton::UpdateColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundleButton::UpdateColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TryOnBundlesStand
#include "GlobalNamespace/TryOnBundlesStand.hpp"
// Including type: TryOnBundleButton
#include "GlobalNamespace/TryOnBundleButton.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: TryOnPurchaseButton
#include "GlobalNamespace/TryOnPurchaseButton.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: GorillaNetworking.Store.StoreBundle
#include "GorillaNetworking/Store/StoreBundle.hpp"
// Including type: PlayFab.PlayFabError
#include "PlayFab/PlayFabError.hpp"
// Including type: GorillaNetworking.Store.StoreBundleData
#include "GorillaNetworking/Store/StoreBundleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TryOnBundleButton[] TryOnBundleButtons
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TryOnBundleButton*>& GlobalNamespace::TryOnBundlesStand::dyn_TryOnBundleButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_TryOnBundleButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TryOnBundleButtons"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TryOnBundleButton*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image[] BundleIcons
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UI::Image*>& GlobalNamespace::TryOnBundlesStand::dyn_BundleIcons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_BundleIcons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BundleIcons"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::UI::Image*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 SelectedButtonIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TryOnBundlesStand::dyn_SelectedButtonIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_SelectedButtonIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SelectedButtonIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TryOnPurchaseButton purchaseButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TryOnPurchaseButton*& GlobalNamespace::TryOnBundlesStand::dyn_purchaseButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_purchaseButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "purchaseButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TryOnPurchaseButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Image selectedBundleImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::TryOnBundlesStand::dyn_selectedBundleImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_selectedBundleImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "selectedBundleImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text computerScreenText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::TryOnBundlesStand::dyn_computerScreenText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_computerScreenText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "computerScreenText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String ComputerDefaultTextTitleDataKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_ComputerDefaultTextTitleDataKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_ComputerDefaultTextTitleDataKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ComputerDefaultTextTitleDataKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String ComputerDefaultTextTitleDataValue
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_ComputerDefaultTextTitleDataValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_ComputerDefaultTextTitleDataValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ComputerDefaultTextTitleDataValue"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String ComputerAlreadyOwnTextTitleDataKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_ComputerAlreadyOwnTextTitleDataKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_ComputerAlreadyOwnTextTitleDataKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ComputerAlreadyOwnTextTitleDataKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String ComputerAlreadyOwnTextTitleDataValue
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_ComputerAlreadyOwnTextTitleDataValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_ComputerAlreadyOwnTextTitleDataValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ComputerAlreadyOwnTextTitleDataValue"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String PurchaseButtonDefaultTextTitleDataKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_PurchaseButtonDefaultTextTitleDataKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_PurchaseButtonDefaultTextTitleDataKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PurchaseButtonDefaultTextTitleDataKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String PurchaseButtonDefaultTextTitleDataValue
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_PurchaseButtonDefaultTextTitleDataValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_PurchaseButtonDefaultTextTitleDataValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PurchaseButtonDefaultTextTitleDataValue"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String PurchaseButtonAlreadyOwnTextTitleDataKey
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_PurchaseButtonAlreadyOwnTextTitleDataKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_PurchaseButtonAlreadyOwnTextTitleDataKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PurchaseButtonAlreadyOwnTextTitleDataKey"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String PurchaseButtonAlreadyOwnTextTitleDataValue
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_PurchaseButtonAlreadyOwnTextTitleDataValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_PurchaseButtonAlreadyOwnTextTitleDataValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PurchaseButtonAlreadyOwnTextTitleDataValue"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean bError
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TryOnBundlesStand::dyn_bError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_bError");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bError"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String computerScreeErrorText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnBundlesStand::dyn_computerScreeErrorText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_computerScreeErrorText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "computerScreeErrorText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<GorillaNetworking.Store.StoreBundle> storeBundles
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaNetworking::Store::StoreBundle*>*& GlobalNamespace::TryOnBundlesStand::dyn_storeBundles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::dyn_storeBundles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "storeBundles"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GorillaNetworking::Store::StoreBundle*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TryOnBundlesStand.get_SelectedBundlePlayFabID
::StringW GlobalNamespace::TryOnBundlesStand::get_SelectedBundlePlayFabID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::get_SelectedBundlePlayFabID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SelectedBundlePlayFabID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: TryOnBundlesStand.CleanUpTitleDataValues
::StringW GlobalNamespace::TryOnBundlesStand::CleanUpTitleDataValues(::StringW titleDataResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::CleanUpTitleDataValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TryOnBundlesStand", "CleanUpTitleDataValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(titleDataResult)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, titleDataResult);
}
// Autogenerated method: TryOnBundlesStand.InitalizeButtons
void GlobalNamespace::TryOnBundlesStand::InitalizeButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::InitalizeButtons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitalizeButtons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnBundlesStand.Start
void GlobalNamespace::TryOnBundlesStand::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnBundlesStand.OnComputerDefaultTextTitleDataSuccess
void GlobalNamespace::TryOnBundlesStand::OnComputerDefaultTextTitleDataSuccess(::StringW data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::OnComputerDefaultTextTitleDataSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnComputerDefaultTextTitleDataSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: TryOnBundlesStand.OnComputerDefaultTextTitleDataFailure
void GlobalNamespace::TryOnBundlesStand::OnComputerDefaultTextTitleDataFailure(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::OnComputerDefaultTextTitleDataFailure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnComputerDefaultTextTitleDataFailure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
// Autogenerated method: TryOnBundlesStand.OnComputerAlreadyOwnTextTitleDataSuccess
void GlobalNamespace::TryOnBundlesStand::OnComputerAlreadyOwnTextTitleDataSuccess(::StringW data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::OnComputerAlreadyOwnTextTitleDataSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnComputerAlreadyOwnTextTitleDataSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: TryOnBundlesStand.OnComputerAlreadyOwnTextTitleDataFailure
void GlobalNamespace::TryOnBundlesStand::OnComputerAlreadyOwnTextTitleDataFailure(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::OnComputerAlreadyOwnTextTitleDataFailure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnComputerAlreadyOwnTextTitleDataFailure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
// Autogenerated method: TryOnBundlesStand.OnPurchaseButtonDefaultTextTitleDataSuccess
void GlobalNamespace::TryOnBundlesStand::OnPurchaseButtonDefaultTextTitleDataSuccess(::StringW data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::OnPurchaseButtonDefaultTextTitleDataSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPurchaseButtonDefaultTextTitleDataSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: TryOnBundlesStand.OnPurchaseButtonDefaultTextTitleDataFailure
void GlobalNamespace::TryOnBundlesStand::OnPurchaseButtonDefaultTextTitleDataFailure(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::OnPurchaseButtonDefaultTextTitleDataFailure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPurchaseButtonDefaultTextTitleDataFailure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
// Autogenerated method: TryOnBundlesStand.OnPurchaseButtonAlreadyOwnTextTitleDataSuccess
void GlobalNamespace::TryOnBundlesStand::OnPurchaseButtonAlreadyOwnTextTitleDataSuccess(::StringW data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::OnPurchaseButtonAlreadyOwnTextTitleDataSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPurchaseButtonAlreadyOwnTextTitleDataSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: TryOnBundlesStand.OnPurchaseButtonAlreadyOwnTextTitleDataFailure
void GlobalNamespace::TryOnBundlesStand::OnPurchaseButtonAlreadyOwnTextTitleDataFailure(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::OnPurchaseButtonAlreadyOwnTextTitleDataFailure");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPurchaseButtonAlreadyOwnTextTitleDataFailure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
// Autogenerated method: TryOnBundlesStand.ClearSelectedBundle
void GlobalNamespace::TryOnBundlesStand::ClearSelectedBundle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::ClearSelectedBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelectedBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnBundlesStand.RemoveBundle
void GlobalNamespace::TryOnBundlesStand::RemoveBundle(::StringW BundleID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::RemoveBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(BundleID)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, BundleID);
}
// Autogenerated method: TryOnBundlesStand.TryOnBundle
void GlobalNamespace::TryOnBundlesStand::TryOnBundle(::StringW BundleID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::TryOnBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryOnBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(BundleID)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, BundleID);
}
// Autogenerated method: TryOnBundlesStand.PressTryOnBundleButton
void GlobalNamespace::TryOnBundlesStand::PressTryOnBundleButton(::GlobalNamespace::TryOnBundleButton* pressedTryOnBundleButton, bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::PressTryOnBundleButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PressTryOnBundleButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pressedTryOnBundleButton), ::il2cpp_utils::ExtractType(isLeftHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pressedTryOnBundleButton, isLeftHand);
}
// Autogenerated method: TryOnBundlesStand.GetComputerScreenText
::StringW GlobalNamespace::TryOnBundlesStand::GetComputerScreenText(::StringW playfabBundleID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::GetComputerScreenText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComputerScreenText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playfabBundleID)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, playfabBundleID);
}
// Autogenerated method: TryOnBundlesStand.GetPurchaseButtonText
::StringW GlobalNamespace::TryOnBundlesStand::GetPurchaseButtonText(::StringW playfabBundleID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::GetPurchaseButtonText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPurchaseButtonText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playfabBundleID)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, playfabBundleID);
}
// Autogenerated method: TryOnBundlesStand.PurchaseButtonPressed
void GlobalNamespace::TryOnBundlesStand::PurchaseButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::PurchaseButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PurchaseButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnBundlesStand.AlreadyOwnCheck
void GlobalNamespace::TryOnBundlesStand::AlreadyOwnCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::AlreadyOwnCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AlreadyOwnCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnBundlesStand.GetTryOnButtons
void GlobalNamespace::TryOnBundlesStand::GetTryOnButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::GetTryOnButtons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTryOnButtons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnBundlesStand.UpdateBundles
void GlobalNamespace::TryOnBundlesStand::UpdateBundles(::ArrayW<::GorillaNetworking::Store::StoreBundleData*> Bundles) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::UpdateBundles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBundles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Bundles)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, Bundles);
}
// Autogenerated method: TryOnBundlesStand.GetBundleComputerErrorText
::StringW GlobalNamespace::TryOnBundlesStand::GetBundleComputerErrorText(::StringW PlayFabID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::GetBundleComputerErrorText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBundleComputerErrorText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(PlayFabID)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, PlayFabID);
}
// Autogenerated method: TryOnBundlesStand.ErrorCompleting
void GlobalNamespace::TryOnBundlesStand::ErrorCompleting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnBundlesStand::ErrorCompleting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ErrorCompleting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TryOnPurchaseButton
#include "GlobalNamespace/TryOnPurchaseButton.hpp"
// Including type: TryOnPurchaseButton/<ButtonColorUpdate>d__7
#include "GlobalNamespace/TryOnPurchaseButton_-ButtonColorUpdate-d__7.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean bError
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::TryOnPurchaseButton::dyn_bError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::dyn_bError");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bError"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String ErrorText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnPurchaseButton::dyn_ErrorText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::dyn_ErrorText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ErrorText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String AlreadyOwnText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::TryOnPurchaseButton::dyn_AlreadyOwnText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::dyn_AlreadyOwnText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AlreadyOwnText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TryOnPurchaseButton.Update
void GlobalNamespace::TryOnPurchaseButton::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton.AlreadyOwn
void GlobalNamespace::TryOnPurchaseButton::AlreadyOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::AlreadyOwn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AlreadyOwn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton.ResetButton
void GlobalNamespace::TryOnPurchaseButton::ResetButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::ResetButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton.ButtonColorUpdate
::System::Collections::IEnumerator* GlobalNamespace::TryOnPurchaseButton::ButtonColorUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::ButtonColorUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ButtonColorUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton.ErrorHappened
void GlobalNamespace::TryOnPurchaseButton::ErrorHappened() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::ErrorHappened");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ErrorHappened", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton.ButtonActivation
void GlobalNamespace::TryOnPurchaseButton::ButtonActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::ButtonActivation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: TryOnPurchaseButton/<ButtonColorUpdate>d__7
#include "GlobalNamespace/TryOnPurchaseButton_-ButtonColorUpdate-d__7.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TryOnPurchaseButton <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TryOnPurchaseButton*& GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TryOnPurchaseButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TryOnPurchaseButton/<ButtonColorUpdate>d__7.System.IDisposable.Dispose
void GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton/<ButtonColorUpdate>d__7.MoveNext
bool GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton/<ButtonColorUpdate>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton/<ButtonColorUpdate>d__7.System.Collections.IEnumerator.Reset
void GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TryOnPurchaseButton/<ButtonColorUpdate>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TryOnPurchaseButton::$ButtonColorUpdate$d__7*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticButton
#include "GlobalNamespace/CosmeticButton.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 pressedOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CosmeticButton::dyn_pressedOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticButton::dyn_pressedOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pressedOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Material disabledMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::CosmeticButton::dyn_disabledMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticButton::dyn_disabledMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disabledMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 disabledOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CosmeticButton::dyn_disabledOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticButton::dyn_disabledOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disabledOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startingPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::CosmeticButton::dyn_startingPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticButton::dyn_startingPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticButton.Awake
void GlobalNamespace::CosmeticButton::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticButton::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticButton.UpdatePosition
void GlobalNamespace::CosmeticButton::UpdatePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticButton::UpdatePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticButton.UpdateColor
void GlobalNamespace::CosmeticButton::UpdateColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticButton::UpdateColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticCategoryButton
#include "GlobalNamespace/CosmeticCategoryButton.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image equippedIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::CosmeticCategoryButton::dyn_equippedIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticCategoryButton::dyn_equippedIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "equippedIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image equippedLeftIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::CosmeticCategoryButton::dyn_equippedLeftIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticCategoryButton::dyn_equippedLeftIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "equippedLeftIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.UI.Image equippedRightIcon
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::CosmeticCategoryButton::dyn_equippedRightIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticCategoryButton::dyn_equippedRightIcon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "equippedRightIcon"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticCategoryButton.SetIcon
void GlobalNamespace::CosmeticCategoryButton::SetIcon(::UnityEngine::Sprite* sprite) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticCategoryButton::SetIcon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIcon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sprite)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sprite);
}
// Autogenerated method: CosmeticCategoryButton.SetDualIcon
void GlobalNamespace::CosmeticCategoryButton::SetDualIcon(::UnityEngine::Sprite* leftSprite, ::UnityEngine::Sprite* rightSprite) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticCategoryButton::SetDualIcon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDualIcon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftSprite), ::il2cpp_utils::ExtractType(rightSprite)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, leftSprite, rightSprite);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticWardrobe
#include "GlobalNamespace/CosmeticWardrobe.hpp"
// Including type: CosmeticWardrobe/CosmeticWardrobeSelection
#include "GlobalNamespace/CosmeticWardrobe_CosmeticWardrobeSelection.hpp"
// Including type: CosmeticWardrobe/CosmeticWardrobeCategory
#include "GlobalNamespace/CosmeticWardrobe_CosmeticWardrobeCategory.hpp"
// Including type: HeadModel
#include "GlobalNamespace/HeadModel.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 selectedCategoryIndex
int GlobalNamespace::CosmeticWardrobe::_get_selectedCategoryIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_get_selectedCategoryIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CosmeticWardrobe", "selectedCategoryIndex"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 selectedCategoryIndex
void GlobalNamespace::CosmeticWardrobe::_set_selectedCategoryIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_set_selectedCategoryIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticWardrobe", "selectedCategoryIndex", value));
}
// Autogenerated static field getter
// Get static field: static private GorillaNetworking.CosmeticsController/CosmeticCategory selectedCategory
::GorillaNetworking::CosmeticsController::CosmeticCategory GlobalNamespace::CosmeticWardrobe::_get_selectedCategory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_get_selectedCategory");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GorillaNetworking::CosmeticsController::CosmeticCategory>("", "CosmeticWardrobe", "selectedCategory"));
}
// Autogenerated static field setter
// Set static field: static private GorillaNetworking.CosmeticsController/CosmeticCategory selectedCategory
void GlobalNamespace::CosmeticWardrobe::_set_selectedCategory(::GorillaNetworking::CosmeticsController::CosmeticCategory value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_set_selectedCategory");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticWardrobe", "selectedCategory", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 startingDisplayIndex
int GlobalNamespace::CosmeticWardrobe::_get_startingDisplayIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_get_startingDisplayIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CosmeticWardrobe", "startingDisplayIndex"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 startingDisplayIndex
void GlobalNamespace::CosmeticWardrobe::_set_startingDisplayIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_set_startingDisplayIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticWardrobe", "startingDisplayIndex", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action OnWardrobeUpdateCategories
::System::Action* GlobalNamespace::CosmeticWardrobe::_get_OnWardrobeUpdateCategories() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_get_OnWardrobeUpdateCategories");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action*>("", "CosmeticWardrobe", "OnWardrobeUpdateCategories"));
}
// Autogenerated static field setter
// Set static field: static private System.Action OnWardrobeUpdateCategories
void GlobalNamespace::CosmeticWardrobe::_set_OnWardrobeUpdateCategories(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_set_OnWardrobeUpdateCategories");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticWardrobe", "OnWardrobeUpdateCategories", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action OnWardrobeUpdateDisplays
::System::Action* GlobalNamespace::CosmeticWardrobe::_get_OnWardrobeUpdateDisplays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_get_OnWardrobeUpdateDisplays");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action*>("", "CosmeticWardrobe", "OnWardrobeUpdateDisplays"));
}
// Autogenerated static field setter
// Set static field: static private System.Action OnWardrobeUpdateDisplays
void GlobalNamespace::CosmeticWardrobe::_set_OnWardrobeUpdateDisplays(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::_set_OnWardrobeUpdateDisplays");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticWardrobe", "OnWardrobeUpdateDisplays", value));
}
// Autogenerated instance field getter
// Get instance field: private CosmeticWardrobe/CosmeticWardrobeSelection[] cosmeticCollectionDisplays
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection*>& GlobalNamespace::CosmeticWardrobe::dyn_cosmeticCollectionDisplays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::dyn_cosmeticCollectionDisplays");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmeticCollectionDisplays"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private CosmeticWardrobe/CosmeticWardrobeCategory[] cosmeticCategoryButtons
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory*>& GlobalNamespace::CosmeticWardrobe::dyn_cosmeticCategoryButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::dyn_cosmeticCategoryButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmeticCategoryButtons"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HeadModel currentEquippedDisplay
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadModel*& GlobalNamespace::CosmeticWardrobe::dyn_currentEquippedDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::dyn_currentEquippedDisplay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentEquippedDisplay"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HeadModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaPressableButton nextSelection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPressableButton*& GlobalNamespace::CosmeticWardrobe::dyn_nextSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::dyn_nextSelection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextSelection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaPressableButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaPressableButton prevSelection
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPressableButton*& GlobalNamespace::CosmeticWardrobe::dyn_prevSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::dyn_prevSelection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevSelection"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaPressableButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticWardrobe.Start
void GlobalNamespace::CosmeticWardrobe::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticWardrobe.OnDestroy
void GlobalNamespace::CosmeticWardrobe::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticWardrobe.HandlePressedNextSelection
void GlobalNamespace::CosmeticWardrobe::HandlePressedNextSelection(::GlobalNamespace::GorillaPressableButton* button, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::HandlePressedNextSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePressedNextSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, button, isLeft);
}
// Autogenerated method: CosmeticWardrobe.HandlePressedPrevSelection
void GlobalNamespace::CosmeticWardrobe::HandlePressedPrevSelection(::GlobalNamespace::GorillaPressableButton* button, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::HandlePressedPrevSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePressedPrevSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, button, isLeft);
}
// Autogenerated method: CosmeticWardrobe.HandlePressedSelectCosmeticButton
void GlobalNamespace::CosmeticWardrobe::HandlePressedSelectCosmeticButton(::GlobalNamespace::GorillaPressableButton* button, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::HandlePressedSelectCosmeticButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePressedSelectCosmeticButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, button, isLeft);
}
// Autogenerated method: CosmeticWardrobe.HandleChangeCategory
void GlobalNamespace::CosmeticWardrobe::HandleChangeCategory(::GlobalNamespace::GorillaPressableButton* button, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::HandleChangeCategory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleChangeCategory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button), ::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, button, isLeft);
}
// Autogenerated method: CosmeticWardrobe.HandleCosmeticsUpdated
void GlobalNamespace::CosmeticWardrobe::HandleCosmeticsUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::HandleCosmeticsUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCosmeticsUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticWardrobe.HandleLocalColorChanged
void GlobalNamespace::CosmeticWardrobe::HandleLocalColorChanged(::UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::HandleLocalColorChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLocalColorChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newColor);
}
// Autogenerated method: CosmeticWardrobe.UpdateCosmeticDisplays
void GlobalNamespace::CosmeticWardrobe::UpdateCosmeticDisplays() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::UpdateCosmeticDisplays");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCosmeticDisplays", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticWardrobe.UpdateCategoryButtons
void GlobalNamespace::CosmeticWardrobe::UpdateCategoryButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::UpdateCategoryButtons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCategoryButtons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticWardrobe..cctor
void GlobalNamespace::CosmeticWardrobe::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticWardrobe", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticWardrobe/CosmeticWardrobeSelection
#include "GlobalNamespace/CosmeticWardrobe_CosmeticWardrobeSelection.hpp"
// Including type: HeadModel
#include "GlobalNamespace/HeadModel.hpp"
// Including type: CosmeticButton
#include "GlobalNamespace/CosmeticButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public HeadModel displayHead
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadModel*& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection::dyn_displayHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection::dyn_displayHead");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "displayHead"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HeadModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public CosmeticButton selectButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CosmeticButton*& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection::dyn_selectButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection::dyn_selectButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "selectButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CosmeticButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticItem currentCosmeticItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection::dyn_currentCosmeticItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeSelection::dyn_currentCosmeticItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentCosmeticItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticWardrobe/CosmeticWardrobeCategory
#include "GlobalNamespace/CosmeticWardrobe_CosmeticWardrobeCategory.hpp"
// Including type: CosmeticCategoryButton
#include "GlobalNamespace/CosmeticCategoryButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public CosmeticCategoryButton button
[[deprecated("Use field access instead!")]] ::GlobalNamespace::CosmeticCategoryButton*& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "button"))->offset;
  return *reinterpret_cast<::GlobalNamespace::CosmeticCategoryButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticCategory category
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticCategory& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_category() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_category");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "category"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticCategory*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticSlots slot1
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSlots& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_slot1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_slot1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slot1"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticSlots*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticSlots slot2
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSlots& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_slot2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_slot2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slot2"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticSlots*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticItem slot1RemovedItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_slot1RemovedItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_slot1RemovedItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slot1RemovedItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticItem slot2RemovedItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_slot2RemovedItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobe::CosmeticWardrobeCategory::dyn_slot2RemovedItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slot2RemovedItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticWardrobeProximityDetector
#include "GlobalNamespace/CosmeticWardrobeProximityDetector.hpp"
// Including type: UnityEngine.SphereCollider
#include "UnityEngine/SphereCollider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<UnityEngine.SphereCollider> wardrobeNearbyDetection
::System::Collections::Generic::List_1<::UnityEngine::SphereCollider*>* GlobalNamespace::CosmeticWardrobeProximityDetector::_get_wardrobeNearbyDetection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::_get_wardrobeNearbyDetection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::UnityEngine::SphereCollider*>*>("", "CosmeticWardrobeProximityDetector", "wardrobeNearbyDetection"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<UnityEngine.SphereCollider> wardrobeNearbyDetection
void GlobalNamespace::CosmeticWardrobeProximityDetector::_set_wardrobeNearbyDetection(::System::Collections::Generic::List_1<::UnityEngine::SphereCollider*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::_set_wardrobeNearbyDetection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticWardrobeProximityDetector", "wardrobeNearbyDetection", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Collider[] overlapColliders
::ArrayW<::UnityEngine::Collider*> GlobalNamespace::CosmeticWardrobeProximityDetector::_get_overlapColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::_get_overlapColliders");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::Collider*>>("", "CosmeticWardrobeProximityDetector", "overlapColliders"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Collider[] overlapColliders
void GlobalNamespace::CosmeticWardrobeProximityDetector::_set_overlapColliders(::ArrayW<::UnityEngine::Collider*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::_set_overlapColliders");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticWardrobeProximityDetector", "overlapColliders", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SphereCollider wardrobeNearbyCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& GlobalNamespace::CosmeticWardrobeProximityDetector::dyn_wardrobeNearbyCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::dyn_wardrobeNearbyCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wardrobeNearbyCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::SphereCollider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticWardrobeProximityDetector.OnEnable
void GlobalNamespace::CosmeticWardrobeProximityDetector::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticWardrobeProximityDetector.OnDisable
void GlobalNamespace::CosmeticWardrobeProximityDetector::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticWardrobeProximityDetector.IsUserNearWardrobe
bool GlobalNamespace::CosmeticWardrobeProximityDetector::IsUserNearWardrobe(::StringW userID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::IsUserNearWardrobe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticWardrobeProximityDetector", "IsUserNearWardrobe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userID)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, userID);
}
// Autogenerated method: CosmeticWardrobeProximityDetector..cctor
void GlobalNamespace::CosmeticWardrobeProximityDetector::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticWardrobeProximityDetector::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticWardrobeProximityDetector", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GrabbingColorPicker
#include "GlobalNamespace/GrabbingColorPicker.hpp"
// Including type: PushableSlider
#include "GlobalNamespace/PushableSlider.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private PushableSlider R_PushSlider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PushableSlider*& GlobalNamespace::GrabbingColorPicker::dyn_R_PushSlider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_R_PushSlider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "R_PushSlider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PushableSlider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PushableSlider G_PushSlider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PushableSlider*& GlobalNamespace::GrabbingColorPicker::dyn_G_PushSlider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_G_PushSlider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "G_PushSlider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PushableSlider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PushableSlider B_PushSlider
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PushableSlider*& GlobalNamespace::GrabbingColorPicker::dyn_B_PushSlider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_B_PushSlider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "B_PushSlider"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PushableSlider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource R_SliderAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GrabbingColorPicker::dyn_R_SliderAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_R_SliderAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "R_SliderAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource G_SliderAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GrabbingColorPicker::dyn_G_SliderAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_G_SliderAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "G_SliderAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource B_SliderAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GrabbingColorPicker::dyn_B_SliderAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_B_SliderAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "B_SliderAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI textR
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::GrabbingColorPicker::dyn_textR() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_textR");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textR"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI textG
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::GrabbingColorPicker::dyn_textG() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_textG");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textG"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TextMeshProUGUI textB
[[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& GlobalNamespace::GrabbingColorPicker::dyn_textB() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_textB");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textB"))->offset;
  return *reinterpret_cast<::TMPro::TextMeshProUGUI**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject ColorSwatch
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GrabbingColorPicker::dyn_ColorSwatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_ColorSwatch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ColorSwatch"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 Segment1
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GrabbingColorPicker::dyn_Segment1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_Segment1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Segment1"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 Segment2
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GrabbingColorPicker::dyn_Segment2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_Segment2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Segment2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 Segment3
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GrabbingColorPicker::dyn_Segment3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_Segment3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Segment3"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasUpdated
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GrabbingColorPicker::dyn_hasUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::dyn_hasUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasUpdated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GrabbingColorPicker.Start
void GlobalNamespace::GrabbingColorPicker::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GrabbingColorPicker.OnDestroy
void GlobalNamespace::GrabbingColorPicker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GrabbingColorPicker.Update
void GlobalNamespace::GrabbingColorPicker::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GrabbingColorPicker.SetSliderColors
void GlobalNamespace::GrabbingColorPicker::SetSliderColors(float r, float g, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::SetSliderColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSliderColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r), ::il2cpp_utils::ExtractType(g), ::il2cpp_utils::ExtractType(b)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, r, g, b);
}
// Autogenerated method: GrabbingColorPicker.HandleLocalColorChanged
void GlobalNamespace::GrabbingColorPicker::HandleLocalColorChanged(::UnityEngine::Color newColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::HandleLocalColorChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLocalColorChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newColor);
}
// Autogenerated method: GrabbingColorPicker.UpdateDisplay
void GlobalNamespace::GrabbingColorPicker::UpdateDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GrabbingColorPicker::UpdateDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PushableSlider
#include "GlobalNamespace/PushableSlider.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single farPushDist
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PushableSlider::dyn_farPushDist() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::dyn_farPushDist");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "farPushDist"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxXOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PushableSlider::dyn_maxXOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::dyn_maxXOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxXOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minXOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PushableSlider::dyn_minXOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::dyn_minXOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minXOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Matrix4x4 localSpace
[[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& GlobalNamespace::PushableSlider::dyn_localSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::dyn_localSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localSpace"))->offset;
  return *reinterpret_cast<::UnityEngine::Matrix4x4*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 startingPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PushableSlider::dyn_startingPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::dyn_startingPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PushableSlider.Awake
void GlobalNamespace::PushableSlider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PushableSlider.OnTriggerStay
void GlobalNamespace::PushableSlider::OnTriggerStay(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: PushableSlider.SetProgress
void GlobalNamespace::PushableSlider::SetProgress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::SetProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PushableSlider.GetProgress
float GlobalNamespace::PushableSlider::GetProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PushableSlider::GetProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RotatableSurface
#include "GlobalNamespace/RotatableSurface.hpp"
// Including type: ManipulatableSpinner
#include "GlobalNamespace/ManipulatableSpinner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ManipulatableSpinner spinner
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ManipulatableSpinner*& GlobalNamespace::RotatableSurface::dyn_spinner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotatableSurface::dyn_spinner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spinner"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ManipulatableSpinner**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RotatableSurface::dyn_rotationScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotatableSurface::dyn_rotationScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RotatableSurface.LateUpdate
void GlobalNamespace::RotatableSurface::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotatableSurface::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WardrobeFunctionButton
#include "GlobalNamespace/WardrobeFunctionButton.hpp"
// Including type: WardrobeFunctionButton/<ButtonColorUpdate>d__4
#include "GlobalNamespace/WardrobeFunctionButton_-ButtonColorUpdate-d__4.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String function
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::WardrobeFunctionButton::dyn_function() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::dyn_function");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "function"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single buttonFadeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::WardrobeFunctionButton::dyn_buttonFadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::dyn_buttonFadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonFadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WardrobeFunctionButton.ButtonColorUpdate
::System::Collections::IEnumerator* GlobalNamespace::WardrobeFunctionButton::ButtonColorUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::ButtonColorUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ButtonColorUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: WardrobeFunctionButton.ButtonActivation
void GlobalNamespace::WardrobeFunctionButton::ButtonActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::ButtonActivation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WardrobeFunctionButton.UpdateColor
void GlobalNamespace::WardrobeFunctionButton::UpdateColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::UpdateColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: WardrobeFunctionButton/<ButtonColorUpdate>d__4
#include "GlobalNamespace/WardrobeFunctionButton_-ButtonColorUpdate-d__4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public WardrobeFunctionButton <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::WardrobeFunctionButton*& GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::WardrobeFunctionButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WardrobeFunctionButton/<ButtonColorUpdate>d__4.System.IDisposable.Dispose
void GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WardrobeFunctionButton/<ButtonColorUpdate>d__4.MoveNext
bool GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: WardrobeFunctionButton/<ButtonColorUpdate>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: WardrobeFunctionButton/<ButtonColorUpdate>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WardrobeFunctionButton/<ButtonColorUpdate>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WardrobeFunctionButton::$ButtonColorUpdate$d__4*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WardrobeInstance
#include "GlobalNamespace/WardrobeInstance.hpp"
// Including type: WardrobeItemButton
#include "GlobalNamespace/WardrobeItemButton.hpp"
// Including type: HeadModel
#include "GlobalNamespace/HeadModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public WardrobeItemButton[] wardrobeItemButtons
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::WardrobeItemButton*>& GlobalNamespace::WardrobeInstance::dyn_wardrobeItemButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeInstance::dyn_wardrobeItemButtons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wardrobeItemButtons"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::WardrobeItemButton*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HeadModel selfDoll
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadModel*& GlobalNamespace::WardrobeInstance::dyn_selfDoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeInstance::dyn_selfDoll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "selfDoll"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HeadModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WardrobeInstance.Start
void GlobalNamespace::WardrobeInstance::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeInstance::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WardrobeInstance.OnDestroy
void GlobalNamespace::WardrobeInstance::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeInstance::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WardrobeItemButton
#include "GlobalNamespace/WardrobeItemButton.hpp"
// Including type: HeadModel
#include "GlobalNamespace/HeadModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public HeadModel controlledModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadModel*& GlobalNamespace::WardrobeItemButton::dyn_controlledModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeItemButton::dyn_controlledModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "controlledModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HeadModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticItem currentCosmeticItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::WardrobeItemButton::dyn_currentCosmeticItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeItemButton::dyn_currentCosmeticItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentCosmeticItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WardrobeItemButton.ButtonActivationWithHand
void GlobalNamespace::WardrobeItemButton::ButtonActivationWithHand(bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeItemButton::ButtonActivationWithHand");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeftHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BubbleGumEvents
#include "GlobalNamespace/BubbleGumEvents.hpp"
// Including type: BubbleGumEvents/EdibleState
#include "GlobalNamespace/BubbleGumEvents_EdibleState.hpp"
// Including type: BubbleGumEvents/<>c
#include "GlobalNamespace/BubbleGumEvents_--c.hpp"
// Including type: EdibleHoldable
#include "GlobalNamespace/EdibleHoldable.hpp"
// Including type: GumBubble
#include "GlobalNamespace/GumBubble.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,GumBubble> gTargetCache
::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::GlobalNamespace::GumBubble*>* GlobalNamespace::BubbleGumEvents::_get_gTargetCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::_get_gTargetCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::GlobalNamespace::GumBubble*>*>("", "BubbleGumEvents", "gTargetCache")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,GumBubble> gTargetCache
void GlobalNamespace::BubbleGumEvents::_set_gTargetCache(::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::GlobalNamespace::GumBubble*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::_set_gTargetCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BubbleGumEvents", "gTargetCache", value));
}
// Autogenerated instance field getter
// Get instance field: private EdibleHoldable _edible
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EdibleHoldable*& GlobalNamespace::BubbleGumEvents::dyn__edible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::dyn__edible");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_edible"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EdibleHoldable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GumBubble _bubble
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GumBubble*& GlobalNamespace::BubbleGumEvents::dyn__bubble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::dyn__bubble");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bubble"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GumBubble**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BubbleGumEvents.OnEnable
void GlobalNamespace::BubbleGumEvents::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BubbleGumEvents.OnDisable
void GlobalNamespace::BubbleGumEvents::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BubbleGumEvents.OnBiteView
void GlobalNamespace::BubbleGumEvents::OnBiteView(::GlobalNamespace::VRRig* rig, int nextState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::OnBiteView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBiteView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig), ::il2cpp_utils::ExtractType(nextState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig, nextState);
}
// Autogenerated method: BubbleGumEvents.OnBiteWorld
void GlobalNamespace::BubbleGumEvents::OnBiteWorld(::GlobalNamespace::VRRig* rig, int nextState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::OnBiteWorld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBiteWorld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig), ::il2cpp_utils::ExtractType(nextState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig, nextState);
}
// Autogenerated method: BubbleGumEvents.OnBite
void GlobalNamespace::BubbleGumEvents::OnBite(::GlobalNamespace::VRRig* rig, int nextState, bool isViewRig) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::OnBite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig), ::il2cpp_utils::ExtractType(nextState), ::il2cpp_utils::ExtractType(isViewRig)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig, nextState, isViewRig);
}
// Autogenerated method: BubbleGumEvents..cctor
void GlobalNamespace::BubbleGumEvents::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BubbleGumEvents", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BubbleGumEvents/EdibleState
#include "GlobalNamespace/BubbleGumEvents_EdibleState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BubbleGumEvents/EdibleState A
::GlobalNamespace::BubbleGumEvents::EdibleState GlobalNamespace::BubbleGumEvents::EdibleState::_get_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::_get_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BubbleGumEvents::EdibleState>("", "BubbleGumEvents/EdibleState", "A"));
}
// Autogenerated static field setter
// Set static field: static public BubbleGumEvents/EdibleState A
void GlobalNamespace::BubbleGumEvents::EdibleState::_set_A(::GlobalNamespace::BubbleGumEvents::EdibleState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::_set_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BubbleGumEvents/EdibleState", "A", value));
}
// Autogenerated static field getter
// Get static field: static public BubbleGumEvents/EdibleState B
::GlobalNamespace::BubbleGumEvents::EdibleState GlobalNamespace::BubbleGumEvents::EdibleState::_get_B() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::_get_B");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BubbleGumEvents::EdibleState>("", "BubbleGumEvents/EdibleState", "B"));
}
// Autogenerated static field setter
// Set static field: static public BubbleGumEvents/EdibleState B
void GlobalNamespace::BubbleGumEvents::EdibleState::_set_B(::GlobalNamespace::BubbleGumEvents::EdibleState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::_set_B");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BubbleGumEvents/EdibleState", "B", value));
}
// Autogenerated static field getter
// Get static field: static public BubbleGumEvents/EdibleState C
::GlobalNamespace::BubbleGumEvents::EdibleState GlobalNamespace::BubbleGumEvents::EdibleState::_get_C() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::_get_C");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BubbleGumEvents::EdibleState>("", "BubbleGumEvents/EdibleState", "C"));
}
// Autogenerated static field setter
// Set static field: static public BubbleGumEvents/EdibleState C
void GlobalNamespace::BubbleGumEvents::EdibleState::_set_C(::GlobalNamespace::BubbleGumEvents::EdibleState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::_set_C");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BubbleGumEvents/EdibleState", "C", value));
}
// Autogenerated static field getter
// Get static field: static public BubbleGumEvents/EdibleState D
::GlobalNamespace::BubbleGumEvents::EdibleState GlobalNamespace::BubbleGumEvents::EdibleState::_get_D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::_get_D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BubbleGumEvents::EdibleState>("", "BubbleGumEvents/EdibleState", "D"));
}
// Autogenerated static field setter
// Set static field: static public BubbleGumEvents/EdibleState D
void GlobalNamespace::BubbleGumEvents::EdibleState::_set_D(::GlobalNamespace::BubbleGumEvents::EdibleState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::_set_D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BubbleGumEvents/EdibleState", "D", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BubbleGumEvents::EdibleState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::EdibleState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BubbleGumEvents/<>c
#include "GlobalNamespace/BubbleGumEvents_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: GumBubble
#include "GlobalNamespace/GumBubble.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BubbleGumEvents/<>c <>9
::GlobalNamespace::BubbleGumEvents::$$c* GlobalNamespace::BubbleGumEvents::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::BubbleGumEvents::$$c*>("", "BubbleGumEvents/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BubbleGumEvents/<>c <>9
void GlobalNamespace::BubbleGumEvents::$$c::_set_$$9(::GlobalNamespace::BubbleGumEvents::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BubbleGumEvents/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<GumBubble,System.Boolean> <>9__7_0
::System::Func_2<::GlobalNamespace::GumBubble*, bool>* GlobalNamespace::BubbleGumEvents::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::GumBubble*, bool>*>("", "BubbleGumEvents/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<GumBubble,System.Boolean> <>9__7_0
void GlobalNamespace::BubbleGumEvents::$$c::_set_$$9__7_0(::System::Func_2<::GlobalNamespace::GumBubble*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BubbleGumEvents/<>c", "<>9__7_0", value)));
}
// Autogenerated method: BubbleGumEvents/<>c..cctor
void GlobalNamespace::BubbleGumEvents::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BubbleGumEvents/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BubbleGumEvents/<>c.<OnBite>b__7_0
bool GlobalNamespace::BubbleGumEvents::$$c::$OnBite$b__7_0(::GlobalNamespace::GumBubble* g) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BubbleGumEvents::$$c::<OnBite>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnBite>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(g)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, g);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GumBubble
#include "GlobalNamespace/GumBubble.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform target
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::GumBubble::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 targetScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GumBubble::dyn_targetScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn_targetScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AnimationCurve _lerpCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::GumBubble::dyn__lerpCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn__lerpCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lerpCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::GumBubble::dyn_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn_audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _sfxInflate
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::GumBubble::dyn__sfxInflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn__sfxInflate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sfxInflate"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _sfxPop
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::GumBubble::dyn__sfxPop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn__sfxPop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sfxPop"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _delayInflate
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GumBubble::dyn__delayInflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn__delayInflate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_delayInflate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _delayPop
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GumBubble::dyn__delayPop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn__delayPop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_delayPop"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _animating
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GumBubble::dyn__animating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn__animating");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animating"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onPop
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::GumBubble::dyn_onPop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn_onPop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onPop"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onInflate
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::GumBubble::dyn_onInflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn_onInflate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onInflate"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _done
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GumBubble::dyn__done() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn__done");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_done"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TimeSince _sinceInflate
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& GlobalNamespace::GumBubble::dyn__sinceInflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::dyn__sinceInflate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sinceInflate"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeSince*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GumBubble.Awake
void GlobalNamespace::GumBubble::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GumBubble.InflateDelayed
void GlobalNamespace::GumBubble::InflateDelayed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::InflateDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InflateDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GumBubble.InflateDelayed
void GlobalNamespace::GumBubble::InflateDelayed(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::InflateDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InflateDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delay);
}
// Autogenerated method: GumBubble.Inflate
void GlobalNamespace::GumBubble::Inflate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::Inflate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Inflate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GumBubble.Pop
void GlobalNamespace::GumBubble::Pop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::Pop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GumBubble.Update
void GlobalNamespace::GumBubble::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GumBubble.OnLerp
void GlobalNamespace::GumBubble::OnLerp(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GumBubble::OnLerp");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LerpComponent*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HotPepperEvents
#include "GlobalNamespace/HotPepperEvents.hpp"
// Including type: HotPepperEvents/EdibleState
#include "GlobalNamespace/HotPepperEvents_EdibleState.hpp"
// Including type: EdibleHoldable
#include "GlobalNamespace/EdibleHoldable.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private EdibleHoldable _pepper
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EdibleHoldable*& GlobalNamespace::HotPepperEvents::dyn__pepper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::dyn__pepper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pepper"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EdibleHoldable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HotPepperEvents.OnEnable
void GlobalNamespace::HotPepperEvents::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HotPepperEvents.OnDisable
void GlobalNamespace::HotPepperEvents::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HotPepperEvents.OnBiteView
void GlobalNamespace::HotPepperEvents::OnBiteView(::GlobalNamespace::VRRig* rig, int nextState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::OnBiteView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBiteView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig), ::il2cpp_utils::ExtractType(nextState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig, nextState);
}
// Autogenerated method: HotPepperEvents.OnBiteWorld
void GlobalNamespace::HotPepperEvents::OnBiteWorld(::GlobalNamespace::VRRig* rig, int nextState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::OnBiteWorld");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBiteWorld", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig), ::il2cpp_utils::ExtractType(nextState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig, nextState);
}
// Autogenerated method: HotPepperEvents.OnBite
void GlobalNamespace::HotPepperEvents::OnBite(::GlobalNamespace::VRRig* rig, int nextState, bool isViewRig) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::OnBite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig), ::il2cpp_utils::ExtractType(nextState), ::il2cpp_utils::ExtractType(isViewRig)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig, nextState, isViewRig);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HotPepperEvents/EdibleState
#include "GlobalNamespace/HotPepperEvents_EdibleState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HotPepperEvents/EdibleState A
::GlobalNamespace::HotPepperEvents::EdibleState GlobalNamespace::HotPepperEvents::EdibleState::_get_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::_get_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::HotPepperEvents::EdibleState>("", "HotPepperEvents/EdibleState", "A"));
}
// Autogenerated static field setter
// Set static field: static public HotPepperEvents/EdibleState A
void GlobalNamespace::HotPepperEvents::EdibleState::_set_A(::GlobalNamespace::HotPepperEvents::EdibleState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::_set_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HotPepperEvents/EdibleState", "A", value));
}
// Autogenerated static field getter
// Get static field: static public HotPepperEvents/EdibleState B
::GlobalNamespace::HotPepperEvents::EdibleState GlobalNamespace::HotPepperEvents::EdibleState::_get_B() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::_get_B");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::HotPepperEvents::EdibleState>("", "HotPepperEvents/EdibleState", "B"));
}
// Autogenerated static field setter
// Set static field: static public HotPepperEvents/EdibleState B
void GlobalNamespace::HotPepperEvents::EdibleState::_set_B(::GlobalNamespace::HotPepperEvents::EdibleState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::_set_B");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HotPepperEvents/EdibleState", "B", value));
}
// Autogenerated static field getter
// Get static field: static public HotPepperEvents/EdibleState C
::GlobalNamespace::HotPepperEvents::EdibleState GlobalNamespace::HotPepperEvents::EdibleState::_get_C() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::_get_C");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::HotPepperEvents::EdibleState>("", "HotPepperEvents/EdibleState", "C"));
}
// Autogenerated static field setter
// Set static field: static public HotPepperEvents/EdibleState C
void GlobalNamespace::HotPepperEvents::EdibleState::_set_C(::GlobalNamespace::HotPepperEvents::EdibleState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::_set_C");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HotPepperEvents/EdibleState", "C", value));
}
// Autogenerated static field getter
// Get static field: static public HotPepperEvents/EdibleState D
::GlobalNamespace::HotPepperEvents::EdibleState GlobalNamespace::HotPepperEvents::EdibleState::_get_D() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::_get_D");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::HotPepperEvents::EdibleState>("", "HotPepperEvents/EdibleState", "D"));
}
// Autogenerated static field setter
// Set static field: static public HotPepperEvents/EdibleState D
void GlobalNamespace::HotPepperEvents::EdibleState::_set_D(::GlobalNamespace::HotPepperEvents::EdibleState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::_set_D");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HotPepperEvents/EdibleState", "D", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HotPepperEvents::EdibleState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperEvents::EdibleState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HotPepperFace
#include "GlobalNamespace/HotPepperFace.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _faceMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::HotPepperFace::dyn__faceMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::dyn__faceMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_faceMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem _fireFX
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::HotPepperFace::dyn__fireFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::dyn__fireFX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fireFX"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource _flameSpeaker
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::HotPepperFace::dyn__flameSpeaker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::dyn__flameSpeaker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flameSpeaker"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource _breathSpeaker
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::HotPepperFace::dyn__breathSpeaker() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::dyn__breathSpeaker");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_breathSpeaker"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _effectLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HotPepperFace::dyn__effectLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::dyn__effectLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_effectLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _thermalSourceVolume
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::HotPepperFace::dyn__thermalSourceVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::dyn__thermalSourceVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thermalSourceVolume"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HotPepperFace.PlayFX
void GlobalNamespace::HotPepperFace::PlayFX(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::PlayFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delay);
}
// Autogenerated method: HotPepperFace.PlayFX
void GlobalNamespace::HotPepperFace::PlayFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::PlayFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HotPepperFace.StopFX
void GlobalNamespace::HotPepperFace::StopFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HotPepperFace::StopFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PaperPlaneProjectile
#include "GlobalNamespace/PaperPlaneProjectile.hpp"
// Including type: PaperPlaneProjectile/PaperPlaneHit
#include "GlobalNamespace/PaperPlaneProjectile_PaperPlaneHit.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: GorillaTag.Reactions.SpawnWorldEffects
#include "GorillaTag/Reactions/SpawnWorldEffects.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single speedScaleRatio
float GlobalNamespace::PaperPlaneProjectile::_get_speedScaleRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::_get_speedScaleRatio");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PaperPlaneProjectile", "speedScaleRatio"));
}
// Autogenerated static field setter
// Set static field: static private System.Single speedScaleRatio
void GlobalNamespace::PaperPlaneProjectile::_set_speedScaleRatio(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::_set_speedScaleRatio");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PaperPlaneProjectile", "speedScaleRatio", value));
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PaperPlaneProjectile::dyn_startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_startPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 endPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PaperPlaneProjectile::dyn_endPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_endPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single flyTimeOut
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn_flyTimeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_flyTimeOut");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flyTimeOut"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private PaperPlaneProjectile/PaperPlaneHit OnHit
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit*& GlobalNamespace::PaperPlaneProjectile::dyn_OnHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_OnHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnHit"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single curveTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn_curveTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_curveTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curveTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 curveDirection
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PaperPlaneProjectile::dyn_curveDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_curveDirection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curveDirection"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single curveDistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn_curveDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_curveDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curveDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _timeElapsed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn__timeElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn__timeElapsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeElapsed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _speed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn__speed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn__speed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_speed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _direction
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PaperPlaneProjectile::dyn__direction() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn__direction");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_direction"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _stopped
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PaperPlaneProjectile::dyn__stopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn__stopped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stopped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _tCached
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PaperPlaneProjectile::dyn__tCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn__tCached");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tCached"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTag.Reactions.SpawnWorldEffects spawnWorldEffects
[[deprecated("Use field access instead!")]] ::GorillaTag::Reactions::SpawnWorldEffects*& GlobalNamespace::PaperPlaneProjectile::dyn_spawnWorldEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_spawnWorldEffects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnWorldEffects"))->offset;
  return *reinterpret_cast<::GorillaTag::Reactions::SpawnWorldEffects**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 nextPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PaperPlaneProjectile::dyn_nextPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_nextPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit[] results
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& GlobalNamespace::PaperPlaneProjectile::dyn_results() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_results");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "results"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RaycastHit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxFlightTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn_maxFlightTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_maxFlightTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxFlightTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minFlightTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn_minFlightTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_minFlightTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minFlightTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maxSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn_maxSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_maxSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn_minSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_minSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean enableRotation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::PaperPlaneProjectile::dyn_enableRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_enableRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableRotation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject flyingObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::PaperPlaneProjectile::dyn_flyingObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_flyingObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flyingObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject crashingObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::PaperPlaneProjectile::dyn_crashingObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_crashingObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "crashingObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask layerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::PaperPlaneProjectile::dyn_layerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_layerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "layerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::PaperPlaneProjectile::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single scaleFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneProjectile::dyn_scaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::dyn_scaleFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PaperPlaneProjectile.add_OnHit
void GlobalNamespace::PaperPlaneProjectile::add_OnHit(::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::add_OnHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PaperPlaneProjectile.remove_OnHit
void GlobalNamespace::PaperPlaneProjectile::remove_OnHit(::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::remove_OnHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PaperPlaneProjectile.get_transform
::UnityEngine::Transform* GlobalNamespace::PaperPlaneProjectile::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneProjectile.get_MyRig
::GlobalNamespace::VRRig* GlobalNamespace::PaperPlaneProjectile::get_MyRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::get_MyRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MyRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRRig*, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneProjectile.Awake
void GlobalNamespace::PaperPlaneProjectile::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneProjectile.Start
void GlobalNamespace::PaperPlaneProjectile::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneProjectile.ResetProjectile
void GlobalNamespace::PaperPlaneProjectile::ResetProjectile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::ResetProjectile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetProjectile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneProjectile.Launch
void GlobalNamespace::PaperPlaneProjectile::Launch(::UnityEngine::Vector3 startPos, ::UnityEngine::Quaternion startRot, ::UnityEngine::Vector3 vel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::Launch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Launch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(startRot), ::il2cpp_utils::ExtractType(vel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, startPos, startRot, vel);
}
// Autogenerated method: PaperPlaneProjectile.Update
void GlobalNamespace::PaperPlaneProjectile::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneProjectile.SetVRRig
void GlobalNamespace::PaperPlaneProjectile::SetVRRig(::GlobalNamespace::VRRig* rig) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::SetVRRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVRRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: PaperPlaneProjectile/PaperPlaneHit
#include "GlobalNamespace/PaperPlaneProjectile_PaperPlaneHit.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PaperPlaneProjectile/PaperPlaneHit.Invoke
void GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit::Invoke(::UnityEngine::Vector3 endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: PaperPlaneProjectile/PaperPlaneHit.BeginInvoke
::System::IAsyncResult* GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit::BeginInvoke(::UnityEngine::Vector3 endPoint, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, endPoint, callback, object);
}
// Autogenerated method: PaperPlaneProjectile/PaperPlaneHit.EndInvoke
void GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::PaperPlaneProjectile::PaperPlaneHit*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: PaperPlaneThrowable
#include "GlobalNamespace/PaperPlaneThrowable.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: PhotonEvent
#include "GlobalNamespace/PhotonEvent.hpp"
// Including type: PhotonMessageInfoWrapped
#include "GlobalNamespace/PhotonMessageInfoWrapped.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Camera _playerView
::UnityEngine::Camera* GlobalNamespace::PaperPlaneThrowable::_get__playerView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::_get__playerView");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::UnityEngine::Camera*>("", "PaperPlaneThrowable", "_playerView"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Camera _playerView
void GlobalNamespace::PaperPlaneThrowable::_set__playerView(::UnityEngine::Camera* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::_set__playerView");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PaperPlaneThrowable", "_playerView", value));
}
// Autogenerated static field getter
// Get static field: static private PhotonEvent gLaunchRPC
::GlobalNamespace::PhotonEvent* GlobalNamespace::PaperPlaneThrowable::_get_gLaunchRPC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::_get_gLaunchRPC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PhotonEvent*>("", "PaperPlaneThrowable", "gLaunchRPC"));
}
// Autogenerated static field setter
// Set static field: static private PhotonEvent gLaunchRPC
void GlobalNamespace::PaperPlaneThrowable::_set_gLaunchRPC(::GlobalNamespace::PhotonEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::_set_gLaunchRPC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PaperPlaneThrowable", "gLaunchRPC", value));
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::PaperPlaneThrowable::dyn__renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::dyn__renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject _projectilePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::PaperPlaneThrowable::dyn__projectilePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::dyn__projectilePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_projectilePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minThrowSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::PaperPlaneThrowable::dyn_minThrowSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::dyn_minThrowSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minThrowSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _lastWorldPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PaperPlaneThrowable::dyn__lastWorldPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::dyn__lastWorldPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWorldPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _lastWorldRot
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::PaperPlaneThrowable::dyn__lastWorldRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::dyn__lastWorldRot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastWorldRot"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _itemWorldVel
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PaperPlaneThrowable::dyn__itemWorldVel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::dyn__itemWorldVel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_itemWorldVel"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _itemWorldAngVel
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::PaperPlaneThrowable::dyn__itemWorldAngVel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::dyn__itemWorldAngVel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_itemWorldAngVel"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PaperPlaneThrowable.OnLaunchRPC
void GlobalNamespace::PaperPlaneThrowable::OnLaunchRPC(int sender, int receiver, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::OnLaunchRPC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnLaunchRPC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(receiver), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, receiver, args, info);
}
// Autogenerated method: PaperPlaneThrowable.FetchViewID
int GlobalNamespace::PaperPlaneThrowable::FetchViewID(::GlobalNamespace::PaperPlaneThrowable* ppt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::FetchViewID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PaperPlaneThrowable", "FetchViewID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ppt)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ppt);
}
// Autogenerated method: PaperPlaneThrowable.LaunchProjectile
void GlobalNamespace::PaperPlaneThrowable::LaunchProjectile(::UnityEngine::Vector3 launchPos, ::UnityEngine::Quaternion launchRot, ::UnityEngine::Vector3 releaseVel) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::LaunchProjectile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchProjectile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(launchPos), ::il2cpp_utils::ExtractType(launchRot), ::il2cpp_utils::ExtractType(releaseVel)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, launchPos, launchRot, releaseVel);
}
// Autogenerated method: PaperPlaneThrowable.OnProjectileHit
void GlobalNamespace::PaperPlaneThrowable::OnProjectileHit(::UnityEngine::Vector3 endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::OnProjectileHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnProjectileHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, endPoint);
}
// Autogenerated method: PaperPlaneThrowable.CalcAngularVelocity
::UnityEngine::Vector3 GlobalNamespace::PaperPlaneThrowable::CalcAngularVelocity(::UnityEngine::Quaternion from, ::UnityEngine::Quaternion to, float dt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::CalcAngularVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PaperPlaneThrowable", "CalcAngularVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(dt)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, from, to, dt);
}
// Autogenerated method: PaperPlaneThrowable.OnEnable
void GlobalNamespace::PaperPlaneThrowable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneThrowable.OnDisable
void GlobalNamespace::PaperPlaneThrowable::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneThrowable.Start
void GlobalNamespace::PaperPlaneThrowable::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneThrowable.OnGrab
void GlobalNamespace::PaperPlaneThrowable::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: PaperPlaneThrowable.OnRelease
bool GlobalNamespace::PaperPlaneThrowable::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: PaperPlaneThrowable.LateUpdateLocal
void GlobalNamespace::PaperPlaneThrowable::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PaperPlaneThrowable.DropItem
void GlobalNamespace::PaperPlaneThrowable::DropItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PaperPlaneThrowable::DropItem");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 85));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SpitballEvents
#include "GlobalNamespace/SpitballEvents.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource _audioSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::SpitballEvents::dyn__audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpitballEvents::dyn__audioSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_audioSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip _sfxHit
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& GlobalNamespace::SpitballEvents::dyn__sfxHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpitballEvents::dyn__sfxHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sfxHit"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioClip**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SpitballEvents.OnSubEmit
void GlobalNamespace::SpitballEvents::OnSubEmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpitballEvents::OnSubEmit");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SubEmitterListener*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: StopwatchCosmetic
#include "GlobalNamespace/StopwatchCosmetic.hpp"
// Including type: StopwatchFace
#include "GlobalNamespace/StopwatchFace.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: PhotonEvent
#include "GlobalNamespace/PhotonEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private PhotonEvent gWatchToggleRPC
::GlobalNamespace::PhotonEvent* GlobalNamespace::StopwatchCosmetic::_get_gWatchToggleRPC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::_get_gWatchToggleRPC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PhotonEvent*>("", "StopwatchCosmetic", "gWatchToggleRPC"));
}
// Autogenerated static field setter
// Set static field: static private PhotonEvent gWatchToggleRPC
void GlobalNamespace::StopwatchCosmetic::_set_gWatchToggleRPC(::GlobalNamespace::PhotonEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::_set_gWatchToggleRPC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StopwatchCosmetic", "gWatchToggleRPC", value));
}
// Autogenerated static field getter
// Get static field: static private PhotonEvent gWatchResetRPC
::GlobalNamespace::PhotonEvent* GlobalNamespace::StopwatchCosmetic::_get_gWatchResetRPC() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::_get_gWatchResetRPC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::PhotonEvent*>("", "StopwatchCosmetic", "gWatchResetRPC"));
}
// Autogenerated static field setter
// Set static field: static private PhotonEvent gWatchResetRPC
void GlobalNamespace::StopwatchCosmetic::_set_gWatchResetRPC(::GlobalNamespace::PhotonEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::_set_gWatchResetRPC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StopwatchCosmetic", "gWatchResetRPC", value));
}
// Autogenerated instance field getter
// Get instance field: private StopwatchFace _watchFace
[[deprecated("Use field access instead!")]] ::GlobalNamespace::StopwatchFace*& GlobalNamespace::StopwatchCosmetic::dyn__watchFace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn__watchFace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_watchFace"))->offset;
  return *reinterpret_cast<::GlobalNamespace::StopwatchFace**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isActivating
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::StopwatchCosmetic::dyn__isActivating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn__isActivating");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isActivating"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _activeTimeElapsed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::StopwatchCosmetic::dyn__activeTimeElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn__activeTimeElapsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeTimeElapsed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _activated
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::StopwatchCosmetic::dyn__activated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn__activated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activated"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _photonID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::StopwatchCosmetic::dyn__photonID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn__photonID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_photonID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _watchToggle
[[deprecated("Use field access instead!")]] ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*& GlobalNamespace::StopwatchCosmetic::dyn__watchToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn__watchToggle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_watchToggle"))->offset;
  return *reinterpret_cast<::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`4<System.Int32,System.Int32,System.Object[],PhotonMessageInfoWrapped> _watchReset
[[deprecated("Use field access instead!")]] ::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>*& GlobalNamespace::StopwatchCosmetic::dyn__watchReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn__watchReset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_watchReset"))->offset;
  return *reinterpret_cast<::System::Action_4<int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableActivation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::StopwatchCosmetic::dyn_disableActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn_disableActivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableActivation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableDeactivation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::StopwatchCosmetic::dyn_disableDeactivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::dyn_disableDeactivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableDeactivation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: StopwatchCosmetic.get_isActivating
bool GlobalNamespace::StopwatchCosmetic::get_isActivating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::get_isActivating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActivating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.get_activeTimeElapsed
float GlobalNamespace::StopwatchCosmetic::get_activeTimeElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::get_activeTimeElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeTimeElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.OnWatchToggle
void GlobalNamespace::StopwatchCosmetic::OnWatchToggle(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::OnWatchToggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWatchToggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, target, args, info);
}
// Autogenerated method: StopwatchCosmetic.OnWatchReset
void GlobalNamespace::StopwatchCosmetic::OnWatchReset(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::OnWatchReset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWatchReset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, target, args, info);
}
// Autogenerated method: StopwatchCosmetic.FetchMyViewID
bool GlobalNamespace::StopwatchCosmetic::FetchMyViewID(ByRef<int> viewID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::FetchMyViewID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FetchMyViewID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(viewID));
}
// Autogenerated method: StopwatchCosmetic.PollActivated
bool GlobalNamespace::StopwatchCosmetic::PollActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::PollActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.Awake
void GlobalNamespace::StopwatchCosmetic::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 72));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.OnEnable
void GlobalNamespace::StopwatchCosmetic::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.OnDisable
void GlobalNamespace::StopwatchCosmetic::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.LateUpdate
void GlobalNamespace::StopwatchCosmetic::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::LateUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 84));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.OnActivate
void GlobalNamespace::StopwatchCosmetic::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.OnDeactivate
void GlobalNamespace::StopwatchCosmetic::OnDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::OnDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 99));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.CanActivate
bool GlobalNamespace::StopwatchCosmetic::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 96));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StopwatchCosmetic.CanDeactivate
bool GlobalNamespace::StopwatchCosmetic::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StopwatchCosmetic::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 97));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Bubbler
#include "GlobalNamespace/Bubbler.hpp"
// Including type: Bubbler/BubblerState
#include "GlobalNamespace/Bubbler_BubblerState.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean _worksInWater
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Bubbler::dyn__worksInWater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn__worksInWater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worksInWater"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem bubbleParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::Bubbler::dyn_bubbleParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_bubbleParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bubbleParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/Particle[] bubbleParticleArray
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::Particle>& GlobalNamespace::Bubbler::dyn_bubbleParticleArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_bubbleParticleArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bubbleParticleArray"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem::Particle>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource bubblerAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::Bubbler::dyn_bubblerAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_bubblerAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bubblerAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource popBubbleAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::Bubbler::dyn_popBubbleAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_popBubbleAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "popBubbleAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.UInt32> currentParticles
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<uint>*& GlobalNamespace::Bubbler::dyn_currentParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_currentParticles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentParticles"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<uint>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Vector3> particleInfoDict
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>*& GlobalNamespace::Bubbler::dyn_particleInfoDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_particleInfoDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleInfoDict"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 outPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::Bubbler::dyn_outPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_outPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean allBubblesPopped
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Bubbler::dyn_allBubblesPopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_allBubblesPopped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "allBubblesPopped"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableActivation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Bubbler::dyn_disableActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_disableActivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableActivation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableDeactivation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Bubbler::dyn_disableDeactivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_disableDeactivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableDeactivation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single rotationSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Bubbler::dyn_rotationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_rotationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject fan
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::Bubbler::dyn_fan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_fan");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fan"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single ongoingStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Bubbler::dyn_ongoingStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_ongoingStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ongoingStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single triggerStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Bubbler::dyn_triggerStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_triggerStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggerStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialTriggerPull
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Bubbler::dyn_initialTriggerPull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_initialTriggerPull");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialTriggerPull"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialTriggerDuration
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Bubbler::dyn_initialTriggerDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_initialTriggerDuration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialTriggerDuration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasBubblerAudio
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Bubbler::dyn_hasBubblerAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_hasBubblerAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasBubblerAudio"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasPopBubbleAudio
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Bubbler::dyn_hasPopBubbleAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_hasPopBubbleAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasPopBubbleAudio"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Behaviour[] behavioursToEnableWhenTriggerPressed
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Behaviour*>& GlobalNamespace::Bubbler::dyn_behavioursToEnableWhenTriggerPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_behavioursToEnableWhenTriggerPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "behavioursToEnableWhenTriggerPressed"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Behaviour*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasParticleSystem
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Bubbler::dyn_hasParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_hasParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasParticleSystem"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasFan
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Bubbler::dyn_hasFan() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::dyn_hasFan");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasFan"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Bubbler.InitToDefault
void GlobalNamespace::Bubbler::InitToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::InitToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.OnSpawn
void GlobalNamespace::Bubbler::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.OnEnable
void GlobalNamespace::Bubbler::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.OnDisable
void GlobalNamespace::Bubbler::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.ResetToDefaultState
void GlobalNamespace::Bubbler::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.LateUpdateLocal
void GlobalNamespace::Bubbler::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.LateUpdateShared
void GlobalNamespace::Bubbler::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.OnActivate
void GlobalNamespace::Bubbler::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.OnDeactivate
void GlobalNamespace::Bubbler::OnDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::OnDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 99));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.CanActivate
bool GlobalNamespace::Bubbler::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 96));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Bubbler.CanDeactivate
bool GlobalNamespace::Bubbler::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 97));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Bubbler/BubblerState
#include "GlobalNamespace/Bubbler_BubblerState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Bubbler/BubblerState None
::GlobalNamespace::Bubbler::BubblerState GlobalNamespace::Bubbler::BubblerState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::BubblerState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Bubbler::BubblerState>("", "Bubbler/BubblerState", "None"));
}
// Autogenerated static field setter
// Set static field: static public Bubbler/BubblerState None
void GlobalNamespace::Bubbler::BubblerState::_set_None(::GlobalNamespace::Bubbler::BubblerState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::BubblerState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Bubbler/BubblerState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Bubbler/BubblerState Bubbling
::GlobalNamespace::Bubbler::BubblerState GlobalNamespace::Bubbler::BubblerState::_get_Bubbling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::BubblerState::_get_Bubbling");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Bubbler::BubblerState>("", "Bubbler/BubblerState", "Bubbling"));
}
// Autogenerated static field setter
// Set static field: static public Bubbler/BubblerState Bubbling
void GlobalNamespace::Bubbler::BubblerState::_set_Bubbling(::GlobalNamespace::Bubbler::BubblerState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::BubblerState::_set_Bubbling");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Bubbler/BubblerState", "Bubbling", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Bubbler::BubblerState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Bubbler::BubblerState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: KinematicWhenTargetInactive
#include "GlobalNamespace/KinematicWhenTargetInactive.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rigidbody[] rigidBodies
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rigidbody*>& GlobalNamespace::KinematicWhenTargetInactive::dyn_rigidBodies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KinematicWhenTargetInactive::dyn_rigidBodies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigidBodies"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Rigidbody*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject target
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::KinematicWhenTargetInactive::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KinematicWhenTargetInactive::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: KinematicWhenTargetInactive.LateUpdate
void GlobalNamespace::KinematicWhenTargetInactive::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KinematicWhenTargetInactive::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: MonkeCandle
#include "GlobalNamespace/MonkeCandle.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/Particle[] fxParticleArray
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::Particle>& GlobalNamespace::MonkeCandle::dyn_fxParticleArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::dyn_fxParticleArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fxParticleArray"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::ParticleSystem::Particle>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource movingFxAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::MonkeCandle::dyn_movingFxAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::dyn_movingFxAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "movingFxAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource fxExplodeAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::MonkeCandle::dyn_fxExplodeAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::dyn_fxExplodeAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fxExplodeAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.UInt32> currentParticles
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<uint>*& GlobalNamespace::MonkeCandle::dyn_currentParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::dyn_currentParticles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentParticles"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<uint>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.Vector3> particleInfoDict
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>*& GlobalNamespace::MonkeCandle::dyn_particleInfoDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::dyn_particleInfoDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleInfoDict"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<uint, ::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 outPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::MonkeCandle::dyn_outPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::dyn_outPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: MonkeCandle.Start
void GlobalNamespace::MonkeCandle::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MonkeCandle.LateUpdate
void GlobalNamespace::MonkeCandle::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonkeCandle::LateUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::RubberDuck*), 84));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: RubberDuck
#include "GlobalNamespace/RubberDuck.hpp"
// Including type: UnityEngine.SkinnedMeshRenderer
#include "UnityEngine/SkinnedMeshRenderer.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RubberDuckEvents
#include "GlobalNamespace/RubberDuckEvents.hpp"
// Including type: SoundEffects
#include "GlobalNamespace/SoundEffects.hpp"
// Including type: PhotonMessageInfoWrapped
#include "GlobalNamespace/PhotonMessageInfoWrapped.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableActivation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RubberDuck::dyn_disableActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_disableActivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableActivation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableDeactivation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RubberDuck::dyn_disableDeactivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_disableDeactivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableDeactivation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SkinnedMeshRenderer skinRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& GlobalNamespace::RubberDuck::dyn_skinRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_skinRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skinRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::SkinnedMeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single blendShapeMaxWeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RubberDuck::dyn_blendShapeMaxWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_blendShapeMaxWeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blendShapeMaxWeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 tempHandPos
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RubberDuck::dyn_tempHandPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_tempHandPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempHandPos"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 squeezeSound
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RubberDuck::dyn_squeezeSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_squeezeSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "squeezeSound"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 squeezeReleaseSound
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RubberDuck::dyn_squeezeReleaseSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_squeezeReleaseSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "squeezeReleaseSound"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single squeezeStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RubberDuck::dyn_squeezeStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_squeezeStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "squeezeStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single releaseStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RubberDuck::dyn_releaseStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_releaseStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "releaseStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem particleFX
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::RubberDuck::dyn_particleFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_particleFX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFX"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single particleFXEmissionIdle
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RubberDuck::dyn_particleFXEmissionIdle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_particleFXEmissionIdle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFXEmissionIdle"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single particleFXEmissionSqueeze
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RubberDuck::dyn_particleFXEmissionSqueeze() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_particleFXEmissionSqueeze");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFXEmissionSqueeze"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve particleFXEmissionCooldownCurve
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& GlobalNamespace::RubberDuck::dyn_particleFXEmissionCooldownCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_particleFXEmissionCooldownCurve");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleFXEmissionCooldownCurve"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasSkinRenderer
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RubberDuck::dyn_hasSkinRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_hasSkinRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasSkinRenderer"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ParticleSystem/EmissionModule pFXEmissionModule
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& GlobalNamespace::RubberDuck::dyn_pFXEmissionModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_pFXEmissionModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pFXEmissionModule"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem::EmissionModule*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasParticleFX
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RubberDuck::dyn_hasParticleFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_hasParticleFX");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasParticleFX"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single squeezeTimeElapsed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::RubberDuck::dyn_squeezeTimeElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn_squeezeTimeElapsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "squeezeTimeElapsed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private RubberDuckEvents _events
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RubberDuckEvents*& GlobalNamespace::RubberDuck::dyn__events() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn__events");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_events"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RubberDuckEvents**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _raiseActivate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RubberDuck::dyn__raiseActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn__raiseActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raiseActivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _raiseDeactivate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RubberDuck::dyn__raiseDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn__raiseDeactivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raiseDeactivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SoundEffects _sfxActivate
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundEffects*& GlobalNamespace::RubberDuck::dyn__sfxActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn__sfxActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sfxActivate"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SoundEffects**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _fxActive
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::RubberDuck::dyn__fxActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::dyn__fxActive");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fxActive"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RubberDuck.get_fxActive
bool GlobalNamespace::RubberDuck::get_fxActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::get_fxActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fxActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.set_fxActive
void GlobalNamespace::RubberDuck::set_fxActive(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::set_fxActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fxActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RubberDuck.OnSqueezeActivate
void GlobalNamespace::RubberDuck::OnSqueezeActivate(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::OnSqueezeActivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSqueezeActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, target, args, info);
}
// Autogenerated method: RubberDuck.SqueezeActivateLocal
void GlobalNamespace::RubberDuck::SqueezeActivateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::SqueezeActivateLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SqueezeActivateLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.OnSqueezeDeactivate
void GlobalNamespace::RubberDuck::OnSqueezeDeactivate(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::OnSqueezeDeactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSqueezeDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, target, args, info);
}
// Autogenerated method: RubberDuck.SqueezeDeactivateLocal
void GlobalNamespace::RubberDuck::SqueezeDeactivateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::SqueezeDeactivateLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SqueezeDeactivateLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.PlayParticleFX
void GlobalNamespace::RubberDuck::PlayParticleFX(float rate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::PlayParticleFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayParticleFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rate)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rate);
}
// Autogenerated method: RubberDuck.OnSpawn
void GlobalNamespace::RubberDuck::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.OnEnable
void GlobalNamespace::RubberDuck::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.OnDisable
void GlobalNamespace::RubberDuck::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.LateUpdate
void GlobalNamespace::RubberDuck::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::LateUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 84));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.OnActivate
void GlobalNamespace::RubberDuck::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.OnDeactivate
void GlobalNamespace::RubberDuck::OnDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::OnDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 99));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.CanActivate
bool GlobalNamespace::RubberDuck::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 96));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuck.CanDeactivate
bool GlobalNamespace::RubberDuck::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuck::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 97));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: RubberDuckEvents
#include "GlobalNamespace/RubberDuckEvents.hpp"
// Including type: PhotonEvent
#include "GlobalNamespace/PhotonEvent.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 PlayerId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::RubberDuckEvents::dyn_PlayerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::dyn_PlayerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PlayerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String PlayerIdString
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::RubberDuckEvents::dyn_PlayerIdString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::dyn_PlayerIdString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PlayerIdString"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PhotonEvent Activate
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PhotonEvent*& GlobalNamespace::RubberDuckEvents::dyn_Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::dyn_Activate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Activate"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PhotonEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PhotonEvent Deactivate
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PhotonEvent*& GlobalNamespace::RubberDuckEvents::dyn_Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::dyn_Deactivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Deactivate"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PhotonEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: RubberDuckEvents.Init
void GlobalNamespace::RubberDuckEvents::Init(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: RubberDuckEvents.OnEnable
void GlobalNamespace::RubberDuckEvents::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuckEvents.OnDisable
void GlobalNamespace::RubberDuckEvents::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuckEvents.OnDestroy
void GlobalNamespace::RubberDuckEvents::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RubberDuckEvents.Dispose
void GlobalNamespace::RubberDuckEvents::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RubberDuckEvents::Dispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SoundEffects
#include "GlobalNamespace/SoundEffects.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource source
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::SoundEffects::dyn_source() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn_source");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "source"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.AudioClip> audioClips
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::AudioClip*>*& GlobalNamespace::SoundEffects::dyn_audioClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn_audioClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioClips"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::AudioClip*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String seed
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::SoundEffects::dyn_seed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn_seed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "seed"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean distinct
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SoundEffects::dyn_distinct() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn_distinct");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "distinct"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _minDelay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SoundEffects::dyn__minDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn__minDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SRand _rnd
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SRand& GlobalNamespace::SoundEffects::dyn__rnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn__rnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rnd"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SRand*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastClipIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SoundEffects::dyn__lastClipIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn__lastClipIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastClipIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double _lastClipLength
[[deprecated("Use field access instead!")]] double& GlobalNamespace::SoundEffects::dyn__lastClipLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn__lastClipLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastClipLength"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TimeSince _lastClipElapsedTime
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeSince& GlobalNamespace::SoundEffects::dyn__lastClipElapsedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::dyn__lastClipElapsedTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastClipElapsedTime"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TimeSince*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SoundEffects.get_isPlaying
bool GlobalNamespace::SoundEffects::get_isPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::get_isPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SoundEffects.Clear
void GlobalNamespace::SoundEffects::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SoundEffects.Stop
void GlobalNamespace::SoundEffects::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SoundEffects.PlayNext
void GlobalNamespace::SoundEffects::PlayNext(float delayMin, float delayMax, float volMin, float volMax) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::PlayNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delayMin), ::il2cpp_utils::ExtractType(delayMax), ::il2cpp_utils::ExtractType(volMin), ::il2cpp_utils::ExtractType(volMax)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delayMin, delayMax, volMin, volMax);
}
// Autogenerated method: SoundEffects.PlayNext
void GlobalNamespace::SoundEffects::PlayNext(float delay, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::PlayNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay), ::il2cpp_utils::ExtractType(volume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delay, volume);
}
// Autogenerated method: SoundEffects.OnValidate
void GlobalNamespace::SoundEffects::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SoundEffects::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: UseableObject
#include "GlobalNamespace/UseableObject.hpp"
// Including type: UseableObjectEvents
#include "GlobalNamespace/UseableObjectEvents.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: PhotonMessageInfoWrapped
#include "GlobalNamespace/PhotonMessageInfoWrapped.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableActivation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::UseableObject::dyn_disableActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn_disableActivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableActivation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableDeactivation
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::UseableObject::dyn_disableDeactivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn_disableDeactivation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableDeactivation"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UseableObjectEvents _events
[[deprecated("Use field access instead!")]] ::GlobalNamespace::UseableObjectEvents*& GlobalNamespace::UseableObject::dyn__events() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn__events");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_events"))->offset;
  return *reinterpret_cast<::GlobalNamespace::UseableObjectEvents**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _raiseActivate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::UseableObject::dyn__raiseActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn__raiseActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raiseActivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _raiseDeactivate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::UseableObject::dyn__raiseDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn__raiseDeactivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_raiseDeactivate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime _lastActivate
[[deprecated("Use field access instead!")]] ::System::DateTime& GlobalNamespace::UseableObject::dyn__lastActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn__lastActivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastActivate"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.DateTime _lastDeactivate
[[deprecated("Use field access instead!")]] ::System::DateTime& GlobalNamespace::UseableObject::dyn__lastDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn__lastDeactivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastDeactivate"))->offset;
  return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isMidUse
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::UseableObject::dyn__isMidUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn__isMidUse");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isMidUse"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _useTimeElapsed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::UseableObject::dyn__useTimeElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn__useTimeElapsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_useTimeElapsed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _justUsed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::UseableObject::dyn__justUsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn__justUsed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_justUsed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 tempHandPos
[[deprecated("Use field access instead!")]] int& GlobalNamespace::UseableObject::dyn_tempHandPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn_tempHandPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempHandPos"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onActivateLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::UseableObject::dyn_onActivateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn_onActivateLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onActivateLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Events.UnityEvent onDeactivateLocal
[[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& GlobalNamespace::UseableObject::dyn_onDeactivateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::dyn_onDeactivateLocal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onDeactivateLocal"))->offset;
  return *reinterpret_cast<::UnityEngine::Events::UnityEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UseableObject.get_isMidUse
bool GlobalNamespace::UseableObject::get_isMidUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::get_isMidUse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMidUse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.get_useTimeElapsed
float GlobalNamespace::UseableObject::get_useTimeElapsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::get_useTimeElapsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useTimeElapsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.get_justUsed
bool GlobalNamespace::UseableObject::get_justUsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::get_justUsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_justUsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.OnObjectActivated
void GlobalNamespace::UseableObject::OnObjectActivated(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::OnObjectActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnObjectActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, target, args, info);
}
// Autogenerated method: UseableObject.OnObjectDeactivated
void GlobalNamespace::UseableObject::OnObjectDeactivated(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::OnObjectDeactivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnObjectDeactivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, target, args, info);
}
// Autogenerated method: UseableObject.Awake
void GlobalNamespace::UseableObject::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 72));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.OnEnable
void GlobalNamespace::UseableObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.OnDisable
void GlobalNamespace::UseableObject::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.LateUpdate
void GlobalNamespace::UseableObject::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::LateUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 84));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.OnActivate
void GlobalNamespace::UseableObject::OnActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::OnActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 98));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.OnDeactivate
void GlobalNamespace::UseableObject::OnDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::OnDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 99));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.CanActivate
bool GlobalNamespace::UseableObject::CanActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::CanActivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 96));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UseableObject.CanDeactivate
bool GlobalNamespace::UseableObject::CanDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObject::CanDeactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 97));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UseableObjectEvents
#include "GlobalNamespace/UseableObjectEvents.hpp"
// Including type: PhotonEvent
#include "GlobalNamespace/PhotonEvent.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String PlayerIdString
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::UseableObjectEvents::dyn_PlayerIdString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::dyn_PlayerIdString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PlayerIdString"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 PlayerId
[[deprecated("Use field access instead!")]] int& GlobalNamespace::UseableObjectEvents::dyn_PlayerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::dyn_PlayerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PlayerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PhotonEvent Activate
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PhotonEvent*& GlobalNamespace::UseableObjectEvents::dyn_Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::dyn_Activate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Activate"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PhotonEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public PhotonEvent Deactivate
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PhotonEvent*& GlobalNamespace::UseableObjectEvents::dyn_Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::dyn_Deactivate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Deactivate"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PhotonEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: UseableObjectEvents.Init
void GlobalNamespace::UseableObjectEvents::Init(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: UseableObjectEvents.OnEnable
void GlobalNamespace::UseableObjectEvents::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObjectEvents.OnDisable
void GlobalNamespace::UseableObjectEvents::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObjectEvents.OnDestroy
void GlobalNamespace::UseableObjectEvents::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UseableObjectEvents.DisposeEvents
void GlobalNamespace::UseableObjectEvents::DisposeEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UseableObjectEvents::DisposeEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisposeEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DebugSpawnPointChanger
#include "GlobalNamespace/DebugSpawnPointChanger.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: GorillaGeoHideShowTrigger
#include "GlobalNamespace/GorillaGeoHideShowTrigger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private DebugSpawnPointChanger/GeoTriggersGroup[] levelTriggers
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DebugSpawnPointChanger::GeoTriggersGroup>& GlobalNamespace::DebugSpawnPointChanger::dyn_levelTriggers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::dyn_levelTriggers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelTriggers"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::DebugSpawnPointChanger::GeoTriggersGroup>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastLocationIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DebugSpawnPointChanger::dyn_lastLocationIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::dyn_lastLocationIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastLocationIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DebugSpawnPointChanger.AttachSpawnPoint
void GlobalNamespace::DebugSpawnPointChanger::AttachSpawnPoint(::GlobalNamespace::VRRig* rig, ::ArrayW<::UnityEngine::Transform*> spawnPts, int locationIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::AttachSpawnPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachSpawnPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rig), ::il2cpp_utils::ExtractType(spawnPts), ::il2cpp_utils::ExtractType(locationIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rig, spawnPts, locationIndex);
}
// Autogenerated method: DebugSpawnPointChanger.ChangePoint
void GlobalNamespace::DebugSpawnPointChanger::ChangePoint(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::ChangePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: DebugSpawnPointChanger.GetPlausibleJumpLocation
::System::Collections::Generic::List_1<::StringW>* GlobalNamespace::DebugSpawnPointChanger::GetPlausibleJumpLocation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::GetPlausibleJumpLocation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlausibleJumpLocation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::StringW>*, false>(this, ___internal__method);
}
// Autogenerated method: DebugSpawnPointChanger.JumpTo
void GlobalNamespace::DebugSpawnPointChanger::JumpTo(int canJumpIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::JumpTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canJumpIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, canJumpIndex);
}
// Autogenerated method: DebugSpawnPointChanger.SetLastLocation
void GlobalNamespace::DebugSpawnPointChanger::SetLastLocation(::StringW levelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::SetLastLocation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLastLocation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, levelName);
}
// Autogenerated method: DebugSpawnPointChanger.<GetPlausibleJumpLocation>b__5_0
::StringW GlobalNamespace::DebugSpawnPointChanger::$GetPlausibleJumpLocation$b__5_0(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugSpawnPointChanger::<GetPlausibleJumpLocation>b__5_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetPlausibleJumpLocation>b__5_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DebugUIConstants
#include "GlobalNamespace/DebugUIConstants.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.String[] PlayfabIDs
::ArrayW<::StringW> GlobalNamespace::DebugUIConstants::_get_PlayfabIDs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::_get_PlayfabIDs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("", "DebugUIConstants", "PlayfabIDs"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.String[] PlayfabIDs
void GlobalNamespace::DebugUIConstants::_set_PlayfabIDs(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::_set_PlayfabIDs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DebugUIConstants", "PlayfabIDs", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.String[] RoomIDs
::ArrayW<::StringW> GlobalNamespace::DebugUIConstants::_get_RoomIDs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::_get_RoomIDs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("", "DebugUIConstants", "RoomIDs"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.String[] RoomIDs
void GlobalNamespace::DebugUIConstants::_set_RoomIDs(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::_set_RoomIDs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DebugUIConstants", "RoomIDs", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.String[] GameModes
::ArrayW<::StringW> GlobalNamespace::DebugUIConstants::_get_GameModes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::_get_GameModes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("", "DebugUIConstants", "GameModes"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.String[] GameModes
void GlobalNamespace::DebugUIConstants::_set_GameModes(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::_set_GameModes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DebugUIConstants", "GameModes", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.String[] PlayerNames
::ArrayW<::StringW> GlobalNamespace::DebugUIConstants::_get_PlayerNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::_get_PlayerNames");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("", "DebugUIConstants", "PlayerNames"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.String[] PlayerNames
void GlobalNamespace::DebugUIConstants::_set_PlayerNames(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::_set_PlayerNames");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DebugUIConstants", "PlayerNames", value));
}
// Autogenerated method: DebugUIConstants..cctor
void GlobalNamespace::DebugUIConstants::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIConstants::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DebugUIConstants", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaDebugUI
#include "GlobalNamespace/GorillaDebugUI.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: TMPro.TMP_Dropdown
#include "TMPro/TMP_Dropdown.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Single Delay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GorillaDebugUI::dyn_Delay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_Delay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Delay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject parentCanvas
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaDebugUI::dyn_parentCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_parentCanvas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentCanvas"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject rayInteractorLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaDebugUI::dyn_rayInteractorLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_rayInteractorLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rayInteractorLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject rayInteractorRight
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaDebugUI::dyn_rayInteractorRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_rayInteractorRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rayInteractorRight"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Dropdown playfabIdDropdown
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& GlobalNamespace::GorillaDebugUI::dyn_playfabIdDropdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_playfabIdDropdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playfabIdDropdown"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Dropdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Dropdown roomIdDropdown
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& GlobalNamespace::GorillaDebugUI::dyn_roomIdDropdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_roomIdDropdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "roomIdDropdown"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Dropdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Dropdown locationDropdown
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& GlobalNamespace::GorillaDebugUI::dyn_locationDropdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_locationDropdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "locationDropdown"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Dropdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Dropdown playerNameDropdown
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& GlobalNamespace::GorillaDebugUI::dyn_playerNameDropdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_playerNameDropdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerNameDropdown"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Dropdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Dropdown gameModeDropdown
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& GlobalNamespace::GorillaDebugUI::dyn_gameModeDropdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_gameModeDropdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameModeDropdown"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Dropdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Dropdown timeOfDayDropdown
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Dropdown*& GlobalNamespace::GorillaDebugUI::dyn_timeOfDayDropdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_timeOfDayDropdown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeOfDayDropdown"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Dropdown**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Text networkStateTextBox
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& GlobalNamespace::GorillaDebugUI::dyn_networkStateTextBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_networkStateTextBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "networkStateTextBox"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Text gameModeTextBox
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& GlobalNamespace::GorillaDebugUI::dyn_gameModeTextBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_gameModeTextBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameModeTextBox"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Text currentRoomTextBox
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& GlobalNamespace::GorillaDebugUI::dyn_currentRoomTextBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_currentRoomTextBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentRoomTextBox"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Text playerCountTextBox
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& GlobalNamespace::GorillaDebugUI::dyn_playerCountTextBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_playerCountTextBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerCountTextBox"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Text roomVisibilityTextBox
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& GlobalNamespace::GorillaDebugUI::dyn_roomVisibilityTextBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_roomVisibilityTextBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "roomVisibilityTextBox"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Text timeMultiplierTextBox
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& GlobalNamespace::GorillaDebugUI::dyn_timeMultiplierTextBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_timeMultiplierTextBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeMultiplierTextBox"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TMPro.TMP_Text versionTextBox
[[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& GlobalNamespace::GorillaDebugUI::dyn_versionTextBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDebugUI::dyn_versionTextBox");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "versionTextBox"))->offset;
  return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FacePlayer
#include "GlobalNamespace/FacePlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FacePlayer.LateUpdate
void GlobalNamespace::FacePlayer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FacePlayer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
