// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaMetaReport
#include "GlobalNamespace/GorillaMetaReport.hpp"
// Including type: GorillaMetaReport/<Submitted>d__17
#include "GlobalNamespace/GorillaMetaReport_-Submitted-d__17.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: GorillaReportButton
#include "GlobalNamespace/GorillaReportButton.hpp"
// Including type: GorillaScoreBoard
#include "GlobalNamespace/GorillaScoreBoard.hpp"
// Including type: GorillaLocomotion.Player
#include "GorillaLocomotion/Player.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Oculus.Platform.Models.PlatformInitialize
#include "Oculus/Platform/Models/PlatformInitialize.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject occluder
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaMetaReport::dyn_occluder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_occluder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "occluder"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject reportScoreboard
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaMetaReport::dyn_reportScoreboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_reportScoreboard");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reportScoreboard"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject ReportText
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaMetaReport::dyn_ReportText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_ReportText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReportText"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask visibleLayers
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::GorillaMetaReport::dyn_visibleLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_visibleLayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "visibleLayers"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaReportButton closeButton
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaReportButton*& GlobalNamespace::GorillaMetaReport::dyn_closeButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_closeButton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closeButton"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaReportButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject leftHandObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaMetaReport::dyn_leftHandObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_leftHandObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject rightHandObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::GorillaMetaReport::dyn_rightHandObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_rightHandObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 playerLocalScreenPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::GorillaMetaReport::dyn_playerLocalScreenPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_playerLocalScreenPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerLocalScreenPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single blockButtonsUntilTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GorillaMetaReport::dyn_blockButtonsUntilTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_blockButtonsUntilTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blockButtonsUntilTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaScoreBoard currentScoreboard
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaScoreBoard*& GlobalNamespace::GorillaMetaReport::dyn_currentScoreboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_currentScoreboard");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentScoreboard"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaScoreBoard**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 savedCullingLayers
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaMetaReport::dyn_savedCullingLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_savedCullingLayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "savedCullingLayers"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testPress
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaMetaReport::dyn_testPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_testPress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testPress"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isMoving
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaMetaReport::dyn_isMoving() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_isMoving");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isMoving"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single movementTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GorillaMetaReport::dyn_movementTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::dyn_movementTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "movementTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaMetaReport.get_localPlayer
::GorillaLocomotion::Player* GlobalNamespace::GorillaMetaReport::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::get_localPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GorillaLocomotion::Player*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.Start
void GlobalNamespace::GorillaMetaReport::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.OnDisable
void GlobalNamespace::GorillaMetaReport::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.OnReportButtonIntentNotif
void GlobalNamespace::GorillaMetaReport::OnReportButtonIntentNotif(::Oculus::Platform::Message_1<::StringW>* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::OnReportButtonIntentNotif");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReportButtonIntentNotif", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: GorillaMetaReport.Submitted
::System::Collections::IEnumerator* GlobalNamespace::GorillaMetaReport::Submitted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::Submitted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Submitted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.DuplicateScoreboard
void GlobalNamespace::GorillaMetaReport::DuplicateScoreboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::DuplicateScoreboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DuplicateScoreboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.ToggleLevelVisibility
void GlobalNamespace::GorillaMetaReport::ToggleLevelVisibility(bool state) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::ToggleLevelVisibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleLevelVisibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: GorillaMetaReport.Teardown
void GlobalNamespace::GorillaMetaReport::Teardown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::Teardown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Teardown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.CheckReportSubmit
void GlobalNamespace::GorillaMetaReport::CheckReportSubmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::CheckReportSubmit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckReportSubmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.GetIdealScreenPositionRotation
void GlobalNamespace::GorillaMetaReport::GetIdealScreenPositionRotation(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<::UnityEngine::Vector3> scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::GetIdealScreenPositionRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIdealScreenPositionRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(position), byref(rotation), byref(scale));
}
// Autogenerated method: GorillaMetaReport.StartOverlay
void GlobalNamespace::GorillaMetaReport::StartOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::StartOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.CheckDistance
void GlobalNamespace::GorillaMetaReport::CheckDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::CheckDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.Update
void GlobalNamespace::GorillaMetaReport::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport.<Start>b__14_0
void GlobalNamespace::GorillaMetaReport::$Start$b__14_0(::Oculus::Platform::Message_1<::Oculus::Platform::Models::PlatformInitialize*>* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::<Start>b__14_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__14_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: GorillaMetaReport/<Submitted>d__17
#include "GlobalNamespace/GorillaMetaReport_-Submitted-d__17.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaMetaReport::$Submitted$d__17::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::$Submitted$d__17::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::GorillaMetaReport::$Submitted$d__17::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::$Submitted$d__17::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaMetaReport <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaMetaReport*& GlobalNamespace::GorillaMetaReport::$Submitted$d__17::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::$Submitted$d__17::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaMetaReport**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaMetaReport/<Submitted>d__17.System.IDisposable.Dispose
void GlobalNamespace::GorillaMetaReport::$Submitted$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::$Submitted$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaMetaReport::$Submitted$d__17*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport/<Submitted>d__17.MoveNext
bool GlobalNamespace::GorillaMetaReport::$Submitted$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::$Submitted$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaMetaReport::$Submitted$d__17*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport/<Submitted>d__17.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GorillaMetaReport::$Submitted$d__17::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::$Submitted$d__17::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaMetaReport::$Submitted$d__17*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport/<Submitted>d__17.System.Collections.IEnumerator.Reset
void GlobalNamespace::GorillaMetaReport::$Submitted$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::$Submitted$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaMetaReport::$Submitted$d__17*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GorillaMetaReport/<Submitted>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GorillaMetaReport::$Submitted$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaMetaReport::$Submitted$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaMetaReport::$Submitted$d__17*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaReportButton
#include "GlobalNamespace/GorillaReportButton.hpp"
// Including type: GorillaPlayerScoreboardLine
#include "GlobalNamespace/GorillaPlayerScoreboardLine.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaReportButton/MetaReportReason metaReportType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaReportButton::MetaReportReason& GlobalNamespace::GorillaReportButton::dyn_metaReportType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_metaReportType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "metaReportType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaReportButton::MetaReportReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaPlayerLineButton/ButtonType buttonType
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPlayerLineButton::ButtonType& GlobalNamespace::GorillaReportButton::dyn_buttonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_buttonType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonType"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaPlayerLineButton::ButtonType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaPlayerScoreboardLine parentLine
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPlayerScoreboardLine*& GlobalNamespace::GorillaReportButton::dyn_parentLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_parentLine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentLine"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaPlayerScoreboardLine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isOn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaReportButton::dyn_isOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_isOn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isOn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material offMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaReportButton::dyn_offMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_offMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material onMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::GorillaReportButton::dyn_onMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_onMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String offText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GorillaReportButton::dyn_offText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_offText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "offText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String onText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::GorillaReportButton::dyn_onText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_onText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text myText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::GorillaReportButton::dyn_myText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_myText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single debounceTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GorillaReportButton::dyn_debounceTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_debounceTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debounceTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single touchTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::GorillaReportButton::dyn_touchTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_touchTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "touchTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean testPress
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaReportButton::dyn_testPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_testPress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testPress"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean selected
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::GorillaReportButton::dyn_selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::dyn_selected");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "selected"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: GorillaReportButton.AssignParentLine
void GlobalNamespace::GorillaReportButton::AssignParentLine(::GlobalNamespace::GorillaPlayerScoreboardLine* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::AssignParentLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignParentLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parent);
}
// Autogenerated method: GorillaReportButton.OnTriggerEnter
void GlobalNamespace::GorillaReportButton::OnTriggerEnter(::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collider);
}
// Autogenerated method: GorillaReportButton.OnTriggerExit
void GlobalNamespace::GorillaReportButton::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: GorillaReportButton.UpdateColor
void GlobalNamespace::GorillaReportButton::UpdateColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::UpdateColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: GorillaReportButton/MetaReportReason
#include "GlobalNamespace/GorillaReportButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GorillaReportButton/MetaReportReason HateSpeech
::GlobalNamespace::GorillaReportButton::MetaReportReason GlobalNamespace::GorillaReportButton::MetaReportReason::_get_HateSpeech() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_get_HateSpeech");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaReportButton::MetaReportReason>("", "GorillaReportButton/MetaReportReason", "HateSpeech"));
}
// Autogenerated static field setter
// Set static field: static public GorillaReportButton/MetaReportReason HateSpeech
void GlobalNamespace::GorillaReportButton::MetaReportReason::_set_HateSpeech(::GlobalNamespace::GorillaReportButton::MetaReportReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_set_HateSpeech");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaReportButton/MetaReportReason", "HateSpeech", value));
}
// Autogenerated static field getter
// Get static field: static public GorillaReportButton/MetaReportReason Cheating
::GlobalNamespace::GorillaReportButton::MetaReportReason GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Cheating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Cheating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaReportButton::MetaReportReason>("", "GorillaReportButton/MetaReportReason", "Cheating"));
}
// Autogenerated static field setter
// Set static field: static public GorillaReportButton/MetaReportReason Cheating
void GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Cheating(::GlobalNamespace::GorillaReportButton::MetaReportReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Cheating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaReportButton/MetaReportReason", "Cheating", value));
}
// Autogenerated static field getter
// Get static field: static public GorillaReportButton/MetaReportReason Toxicity
::GlobalNamespace::GorillaReportButton::MetaReportReason GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Toxicity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Toxicity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaReportButton::MetaReportReason>("", "GorillaReportButton/MetaReportReason", "Toxicity"));
}
// Autogenerated static field setter
// Set static field: static public GorillaReportButton/MetaReportReason Toxicity
void GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Toxicity(::GlobalNamespace::GorillaReportButton::MetaReportReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Toxicity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaReportButton/MetaReportReason", "Toxicity", value));
}
// Autogenerated static field getter
// Get static field: static public GorillaReportButton/MetaReportReason Bullying
::GlobalNamespace::GorillaReportButton::MetaReportReason GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Bullying() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Bullying");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaReportButton::MetaReportReason>("", "GorillaReportButton/MetaReportReason", "Bullying"));
}
// Autogenerated static field setter
// Set static field: static public GorillaReportButton/MetaReportReason Bullying
void GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Bullying(::GlobalNamespace::GorillaReportButton::MetaReportReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Bullying");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaReportButton/MetaReportReason", "Bullying", value));
}
// Autogenerated static field getter
// Get static field: static public GorillaReportButton/MetaReportReason Doxing
::GlobalNamespace::GorillaReportButton::MetaReportReason GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Doxing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Doxing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaReportButton::MetaReportReason>("", "GorillaReportButton/MetaReportReason", "Doxing"));
}
// Autogenerated static field setter
// Set static field: static public GorillaReportButton/MetaReportReason Doxing
void GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Doxing(::GlobalNamespace::GorillaReportButton::MetaReportReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Doxing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaReportButton/MetaReportReason", "Doxing", value));
}
// Autogenerated static field getter
// Get static field: static public GorillaReportButton/MetaReportReason Impersonation
::GlobalNamespace::GorillaReportButton::MetaReportReason GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Impersonation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Impersonation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaReportButton::MetaReportReason>("", "GorillaReportButton/MetaReportReason", "Impersonation"));
}
// Autogenerated static field setter
// Set static field: static public GorillaReportButton/MetaReportReason Impersonation
void GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Impersonation(::GlobalNamespace::GorillaReportButton::MetaReportReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Impersonation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaReportButton/MetaReportReason", "Impersonation", value));
}
// Autogenerated static field getter
// Get static field: static public GorillaReportButton/MetaReportReason Submit
::GlobalNamespace::GorillaReportButton::MetaReportReason GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Submit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Submit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaReportButton::MetaReportReason>("", "GorillaReportButton/MetaReportReason", "Submit"));
}
// Autogenerated static field setter
// Set static field: static public GorillaReportButton/MetaReportReason Submit
void GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Submit(::GlobalNamespace::GorillaReportButton::MetaReportReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Submit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaReportButton/MetaReportReason", "Submit", value));
}
// Autogenerated static field getter
// Get static field: static public GorillaReportButton/MetaReportReason Cancel
::GlobalNamespace::GorillaReportButton::MetaReportReason GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_get_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::GorillaReportButton::MetaReportReason>("", "GorillaReportButton/MetaReportReason", "Cancel"));
}
// Autogenerated static field setter
// Set static field: static public GorillaReportButton/MetaReportReason Cancel
void GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Cancel(::GlobalNamespace::GorillaReportButton::MetaReportReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::_set_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GorillaReportButton/MetaReportReason", "Cancel", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::GorillaReportButton::MetaReportReason::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaReportButton::MetaReportReason::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BalloonDynamics
#include "GlobalNamespace/BalloonDynamics.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody rb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::BalloonDynamics::dyn_rb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_rb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider balloonCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::BalloonDynamics::dyn_balloonCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_balloonCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Bounds bounds
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& GlobalNamespace::BalloonDynamics::dyn_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_bounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bounds"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bouyancyForce
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_bouyancyForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_bouyancyForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bouyancyForce"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bouyancyMinHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_bouyancyMinHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_bouyancyMinHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bouyancyMinHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bouyancyMaxHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_bouyancyMaxHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_bouyancyMaxHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bouyancyMaxHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single bouyancyActualHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_bouyancyActualHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_bouyancyActualHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bouyancyActualHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single varianceMaxheight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_varianceMaxheight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_varianceMaxheight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "varianceMaxheight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single airResistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_airResistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_airResistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "airResistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject knot
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::BalloonDynamics::dyn_knot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_knot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "knot"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody knotRb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::BalloonDynamics::dyn_knotRb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_knotRb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "knotRb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform grabPt
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BalloonDynamics::dyn_grabPt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_grabPt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabPt"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform grabPtInitParent
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BalloonDynamics::dyn_grabPtInitParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_grabPtInitParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabPtInitParent"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single stringLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_stringLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_stringLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stringLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single stringStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_stringStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_stringStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stringStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single stringStretch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_stringStretch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_stringStretch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stringStretch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maximumVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_maximumVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_maximumVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maximumVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single upRightTorque
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_upRightTorque() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_upRightTorque");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "upRightTorque"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean enableDynamics
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BalloonDynamics::dyn_enableDynamics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_enableDynamics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableDynamics"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean enableDistanceConstraints
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BalloonDynamics::dyn_enableDistanceConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_enableDistanceConstraints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableDistanceConstraints"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single balloonScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_balloonScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_balloonScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bopSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonDynamics::dyn_bopSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::dyn_bopSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bopSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BalloonDynamics.Awake
void GlobalNamespace::BalloonDynamics::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.Start
void GlobalNamespace::BalloonDynamics::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.ReParent
void GlobalNamespace::BalloonDynamics::ReParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ReParent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonDynamics*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.ApplyBouyancyForce
void GlobalNamespace::BalloonDynamics::ApplyBouyancyForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ApplyBouyancyForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyBouyancyForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.ApplyUpRightForce
void GlobalNamespace::BalloonDynamics::ApplyUpRightForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ApplyUpRightForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyUpRightForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.ApplyAirResistance
void GlobalNamespace::BalloonDynamics::ApplyAirResistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ApplyAirResistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyAirResistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.ApplyDistanceConstraint
void GlobalNamespace::BalloonDynamics::ApplyDistanceConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ApplyDistanceConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyDistanceConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.EnableDynamics
void GlobalNamespace::BalloonDynamics::EnableDynamics(bool enable, bool kinematic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::EnableDynamics");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonDynamics*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable, kinematic);
}
// Autogenerated method: BalloonDynamics.EnableDistanceConstraints
void GlobalNamespace::BalloonDynamics::EnableDistanceConstraints(bool enable, float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::EnableDistanceConstraints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonDynamics*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable, scale);
}
// Autogenerated method: BalloonDynamics.get_ColliderEnabled
bool GlobalNamespace::BalloonDynamics::get_ColliderEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::get_ColliderEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ColliderEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.FixedUpdate
void GlobalNamespace::BalloonDynamics::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.ITetheredObjectBehavior.DbgClear
void GlobalNamespace::BalloonDynamics::ITetheredObjectBehavior_DbgClear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ITetheredObjectBehavior.DbgClear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonDynamics*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.ITetheredObjectBehavior.IsEnabled
bool GlobalNamespace::BalloonDynamics::ITetheredObjectBehavior_IsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ITetheredObjectBehavior.IsEnabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonDynamics*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BalloonDynamics.ITetheredObjectBehavior.TriggerEnter
void GlobalNamespace::BalloonDynamics::ITetheredObjectBehavior_TriggerEnter(::UnityEngine::Collider* other, ByRef<::UnityEngine::Vector3> force, ByRef<::UnityEngine::Vector3> collisionPt, ByRef<bool> transferOwnership) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ITetheredObjectBehavior.TriggerEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonDynamics*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other, byref(force), byref(collisionPt), byref(transferOwnership));
}
// Autogenerated method: BalloonDynamics.ReturnStep
bool GlobalNamespace::BalloonDynamics::ReturnStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonDynamics::ReturnStep");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonDynamics*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BalloonHoldable
#include "GlobalNamespace/BalloonHoldable.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: BalloonHoldable/<>c
#include "GlobalNamespace/BalloonHoldable_--c.hpp"
// Including type: ITetheredObjectBehavior
#include "GlobalNamespace/ITetheredObjectBehavior.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: GorillaLocomotion.Swimming.WaterVolume
#include "GorillaLocomotion/Swimming/WaterVolume.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: FXSystemSettings
#include "GlobalNamespace/FXSystemSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ITetheredObjectBehavior balloonDynamics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ITetheredObjectBehavior*& GlobalNamespace::BalloonHoldable::dyn_balloonDynamics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_balloonDynamics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonDynamics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ITetheredObjectBehavior**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::BalloonHoldable::dyn_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer lineRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::BalloonHoldable::dyn_lineRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_lineRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody rb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::BalloonHoldable::dyn_rb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_rb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Realtime.Player originalOwner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::BalloonHoldable::dyn_originalOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_originalOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalOwner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject balloonPopFXPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::BalloonHoldable::dyn_balloonPopFXPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_balloonPopFXPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonPopFXPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color balloonPopFXColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BalloonHoldable::dyn_balloonPopFXColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_balloonPopFXColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonPopFXColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonHoldable::dyn_timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_timer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scaleTimerLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonHoldable::dyn_scaleTimerLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_scaleTimerLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleTimerLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single poppedTimerLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonHoldable::dyn_poppedTimerLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_poppedTimerLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "poppedTimerLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single beginScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonHoldable::dyn_beginScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_beginScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beginScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bopSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonHoldable::dyn_bopSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_bopSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bopSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 localScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BalloonHoldable::dyn_localScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_localScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource balloonBopSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::BalloonHoldable::dyn_balloonBopSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_balloonBopSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonBopSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource balloonInflatSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::BalloonHoldable::dyn_balloonInflatSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_balloonInflatSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonInflatSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 forceAppliedAsRemote
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BalloonHoldable::dyn_forceAppliedAsRemote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_forceAppliedAsRemote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forceAppliedAsRemote"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 collisionPtAsRemote
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::BalloonHoldable::dyn_collisionPtAsRemote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_collisionPtAsRemote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionPtAsRemote"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaLocomotion.Swimming.WaterVolume waterVolume
[[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& GlobalNamespace::BalloonHoldable::dyn_waterVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_waterVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waterVolume"))->offset;
  return *reinterpret_cast<::GorillaLocomotion::Swimming::WaterVolume**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BalloonHoldable/BalloonStates balloonState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BalloonHoldable::BalloonStates& GlobalNamespace::BalloonHoldable::dyn_balloonState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_balloonState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BalloonHoldable::BalloonStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single returnTimer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonHoldable::dyn_returnTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_returnTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "returnTimer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lastOwnershipRequest
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BalloonHoldable::dyn_lastOwnershipRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_lastOwnershipRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastOwnershipRequest"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disableCollisionHandling
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BalloonHoldable::dyn_disableCollisionHandling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_disableCollisionHandling");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableCollisionHandling"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean disableRelease
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BalloonHoldable::dyn_disableRelease() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::dyn_disableRelease");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableRelease"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BalloonHoldable.ShouldSimulate
bool GlobalNamespace::BalloonHoldable::ShouldSimulate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::ShouldSimulate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldSimulate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.PlayPopBalloonFX
void GlobalNamespace::BalloonHoldable::PlayPopBalloonFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::PlayPopBalloonFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayPopBalloonFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.EnableDynamics
void GlobalNamespace::BalloonHoldable::EnableDynamics(bool enable, bool forceKinematicOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::EnableDynamics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableDynamics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enable), ::il2cpp_utils::ExtractType(forceKinematicOn)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable, forceKinematicOn);
}
// Autogenerated method: BalloonHoldable.PopBalloon
void GlobalNamespace::BalloonHoldable::PopBalloon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::PopBalloon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopBalloon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.PopBalloonRemote
void GlobalNamespace::BalloonHoldable::PopBalloonRemote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::PopBalloonRemote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopBalloonRemote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnOwnerChangeCb
void GlobalNamespace::BalloonHoldable::OnOwnerChangeCb(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* prevOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnOwnerChangeCb");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnOwnerChangeCb", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newOwner), ::il2cpp_utils::ExtractType(prevOwner)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, prevOwner);
}
// Autogenerated method: BalloonHoldable.OwnerPopBalloon
void GlobalNamespace::BalloonHoldable::OwnerPopBalloon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OwnerPopBalloon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OwnerPopBalloon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.RunLocalPopSM
void GlobalNamespace::BalloonHoldable::RunLocalPopSM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::RunLocalPopSM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunLocalPopSM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.Grab
void GlobalNamespace::BalloonHoldable::Grab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::Grab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Grab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.Release
void GlobalNamespace::BalloonHoldable::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnTriggerEnter
void GlobalNamespace::BalloonHoldable::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: BalloonHoldable.OnCollisionEnter
void GlobalNamespace::BalloonHoldable::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: BalloonHoldable.IFXContext.get_settings
::GlobalNamespace::FXSystemSettings* GlobalNamespace::BalloonHoldable::IFXContext_get_settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::IFXContext.get_settings");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonHoldable*), 104));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::FXSystemSettings*, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.IFXContext.OnPlayFX
void GlobalNamespace::BalloonHoldable::IFXContext_OnPlayFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::IFXContext.OnPlayFX");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BalloonHoldable*), 105));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnSpawn
void GlobalNamespace::BalloonHoldable::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.Start
void GlobalNamespace::BalloonHoldable::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 75));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnEnable
void GlobalNamespace::BalloonHoldable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnJoinedRoom
void GlobalNamespace::BalloonHoldable::OnJoinedRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnJoinedRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnDisable
void GlobalNamespace::BalloonHoldable::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.PreDisable
void GlobalNamespace::BalloonHoldable::PreDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::PreDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 78));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.ResetToDefaultState
void GlobalNamespace::BalloonHoldable::ResetToDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::ResetToDefaultState");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 92));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnWorldShareableItemSpawn
void GlobalNamespace::BalloonHoldable::OnWorldShareableItemSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnWorldShareableItemSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 81));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.ResetToHome
void GlobalNamespace::BalloonHoldable::ResetToHome() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::ResetToHome");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 87));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.PlayDestroyedOrDisabledEffect
void GlobalNamespace::BalloonHoldable::PlayDestroyedOrDisabledEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::PlayDestroyedOrDisabledEffect");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 82));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnItemDestroyedOrDisabled
void GlobalNamespace::BalloonHoldable::OnItemDestroyedOrDisabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnItemDestroyedOrDisabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 83));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.OnOwnershipTransferred
void GlobalNamespace::BalloonHoldable::OnOwnershipTransferred(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* prevOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::OnOwnershipTransferred");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 103));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, prevOwner);
}
// Autogenerated method: BalloonHoldable.LateUpdateShared
void GlobalNamespace::BalloonHoldable::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonHoldable.LateUpdateReplicated
void GlobalNamespace::BalloonHoldable::LateUpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::LateUpdateReplicated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 91));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BalloonHoldable/BalloonStates
#include "GlobalNamespace/BalloonHoldable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BalloonHoldable/BalloonStates Normal
::GlobalNamespace::BalloonHoldable::BalloonStates GlobalNamespace::BalloonHoldable::BalloonStates::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BalloonHoldable::BalloonStates>("", "BalloonHoldable/BalloonStates", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public BalloonHoldable/BalloonStates Normal
void GlobalNamespace::BalloonHoldable::BalloonStates::_set_Normal(::GlobalNamespace::BalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BalloonHoldable/BalloonStates", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public BalloonHoldable/BalloonStates Pop
::GlobalNamespace::BalloonHoldable::BalloonStates GlobalNamespace::BalloonHoldable::BalloonStates::_get_Pop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_get_Pop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BalloonHoldable::BalloonStates>("", "BalloonHoldable/BalloonStates", "Pop"));
}
// Autogenerated static field setter
// Set static field: static public BalloonHoldable/BalloonStates Pop
void GlobalNamespace::BalloonHoldable::BalloonStates::_set_Pop(::GlobalNamespace::BalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_set_Pop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BalloonHoldable/BalloonStates", "Pop", value));
}
// Autogenerated static field getter
// Get static field: static public BalloonHoldable/BalloonStates Waiting
::GlobalNamespace::BalloonHoldable::BalloonStates GlobalNamespace::BalloonHoldable::BalloonStates::_get_Waiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_get_Waiting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BalloonHoldable::BalloonStates>("", "BalloonHoldable/BalloonStates", "Waiting"));
}
// Autogenerated static field setter
// Set static field: static public BalloonHoldable/BalloonStates Waiting
void GlobalNamespace::BalloonHoldable::BalloonStates::_set_Waiting(::GlobalNamespace::BalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_set_Waiting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BalloonHoldable/BalloonStates", "Waiting", value));
}
// Autogenerated static field getter
// Get static field: static public BalloonHoldable/BalloonStates WaitForOwnershipTransfer
::GlobalNamespace::BalloonHoldable::BalloonStates GlobalNamespace::BalloonHoldable::BalloonStates::_get_WaitForOwnershipTransfer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_get_WaitForOwnershipTransfer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BalloonHoldable::BalloonStates>("", "BalloonHoldable/BalloonStates", "WaitForOwnershipTransfer"));
}
// Autogenerated static field setter
// Set static field: static public BalloonHoldable/BalloonStates WaitForOwnershipTransfer
void GlobalNamespace::BalloonHoldable::BalloonStates::_set_WaitForOwnershipTransfer(::GlobalNamespace::BalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_set_WaitForOwnershipTransfer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BalloonHoldable/BalloonStates", "WaitForOwnershipTransfer", value));
}
// Autogenerated static field getter
// Get static field: static public BalloonHoldable/BalloonStates WaitForReDock
::GlobalNamespace::BalloonHoldable::BalloonStates GlobalNamespace::BalloonHoldable::BalloonStates::_get_WaitForReDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_get_WaitForReDock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BalloonHoldable::BalloonStates>("", "BalloonHoldable/BalloonStates", "WaitForReDock"));
}
// Autogenerated static field setter
// Set static field: static public BalloonHoldable/BalloonStates WaitForReDock
void GlobalNamespace::BalloonHoldable::BalloonStates::_set_WaitForReDock(::GlobalNamespace::BalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_set_WaitForReDock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BalloonHoldable/BalloonStates", "WaitForReDock", value));
}
// Autogenerated static field getter
// Get static field: static public BalloonHoldable/BalloonStates Refilling
::GlobalNamespace::BalloonHoldable::BalloonStates GlobalNamespace::BalloonHoldable::BalloonStates::_get_Refilling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_get_Refilling");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BalloonHoldable::BalloonStates>("", "BalloonHoldable/BalloonStates", "Refilling"));
}
// Autogenerated static field setter
// Set static field: static public BalloonHoldable/BalloonStates Refilling
void GlobalNamespace::BalloonHoldable::BalloonStates::_set_Refilling(::GlobalNamespace::BalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_set_Refilling");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BalloonHoldable/BalloonStates", "Refilling", value));
}
// Autogenerated static field getter
// Get static field: static public BalloonHoldable/BalloonStates Returning
::GlobalNamespace::BalloonHoldable::BalloonStates GlobalNamespace::BalloonHoldable::BalloonStates::_get_Returning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_get_Returning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BalloonHoldable::BalloonStates>("", "BalloonHoldable/BalloonStates", "Returning"));
}
// Autogenerated static field setter
// Set static field: static public BalloonHoldable/BalloonStates Returning
void GlobalNamespace::BalloonHoldable::BalloonStates::_set_Returning(::GlobalNamespace::BalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::_set_Returning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BalloonHoldable/BalloonStates", "Returning", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BalloonHoldable::BalloonStates::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::BalloonStates::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BalloonHoldable/<>c
#include "GlobalNamespace/BalloonHoldable_--c.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BalloonHoldable/<>c <>9
::GlobalNamespace::BalloonHoldable::$$c* GlobalNamespace::BalloonHoldable::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::BalloonHoldable::$$c*>("", "BalloonHoldable/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BalloonHoldable/<>c <>9
void GlobalNamespace::BalloonHoldable::$$c::_set_$$9(::GlobalNamespace::BalloonHoldable::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BalloonHoldable/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action <>9__48_0
::System::Action* GlobalNamespace::BalloonHoldable::$$c::_get_$$9__48_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::$$c::_get_$$9__48_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>("", "BalloonHoldable/<>c", "<>9__48_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action <>9__48_0
void GlobalNamespace::BalloonHoldable::$$c::_set_$$9__48_0(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::$$c::_set_$$9__48_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BalloonHoldable/<>c", "<>9__48_0", value)));
}
// Autogenerated method: BalloonHoldable/<>c..cctor
void GlobalNamespace::BalloonHoldable::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BalloonHoldable/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BalloonHoldable/<>c.<OnTriggerEnter>b__48_0
void GlobalNamespace::BalloonHoldable::$$c::$OnTriggerEnter$b__48_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonHoldable::$$c::<OnTriggerEnter>b__48_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnTriggerEnter>b__48_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BalloonString
#include "GlobalNamespace/BalloonString.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform startPositionXf
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BalloonString::dyn_startPositionXf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::dyn_startPositionXf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startPositionXf"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform endPositionXf
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BalloonString::dyn_endPositionXf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::dyn_endPositionXf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endPositionXf"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& GlobalNamespace::BalloonString::dyn_vertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::dyn_vertices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vertices"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 numSegments
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BalloonString::dyn_numSegments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::dyn_numSegments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numSegments"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean endPositionFixed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BalloonString::dyn_endPositionFixed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::dyn_endPositionFixed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "endPositionFixed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer lineRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::BalloonString::dyn_lineRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::dyn_lineRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BalloonString.Awake
void GlobalNamespace::BalloonString::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonString.UpdateDynamics
void GlobalNamespace::BalloonString::UpdateDynamics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::UpdateDynamics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDynamics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonString.UpdateRenderPositions
void GlobalNamespace::BalloonString::UpdateRenderPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::UpdateRenderPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRenderPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BalloonString.LateUpdate
void GlobalNamespace::BalloonString::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BalloonString::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BattleBalloons
#include "GlobalNamespace/BattleBalloons.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: GorillaBattleManager
#include "GlobalNamespace/GorillaBattleManager.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::BattleBalloons::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] balloons
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::BattleBalloons::dyn_balloons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_balloons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloons"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color orangeColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BattleBalloons::dyn_orangeColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_orangeColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orangeColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color blueColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BattleBalloons::dyn_blueColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_blueColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blueColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color defaultColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BattleBalloons::dyn_defaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_defaultColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color lastColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BattleBalloons::dyn_lastColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_lastColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject balloonPopFXPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::BattleBalloons::dyn_balloonPopFXPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_balloonPopFXPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonPopFXPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaBattleManager bMgr
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaBattleManager*& GlobalNamespace::BattleBalloons::dyn_bMgr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_bMgr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bMgr"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaBattleManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player myPlayer
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::BattleBalloons::dyn_myPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_myPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myPlayer"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 colorShaderPropID
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BattleBalloons::dyn_colorShaderPropID() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_colorShaderPropID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorShaderPropID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock matPropBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::BattleBalloons::dyn_matPropBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_matPropBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "matPropBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean[] balloonsCachedActiveState
[[deprecated("Use field access instead!")]] ::ArrayW<bool>& GlobalNamespace::BattleBalloons::dyn_balloonsCachedActiveState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_balloonsCachedActiveState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonsCachedActiveState"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer[] renderers
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& GlobalNamespace::BattleBalloons::dyn_renderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_renderers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderers"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Renderer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color teamColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::BattleBalloons::dyn_teamColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::dyn_teamColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teamColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BattleBalloons.Awake
void GlobalNamespace::BattleBalloons::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BattleBalloons.OnEnable
void GlobalNamespace::BattleBalloons::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BattleBalloons.LateUpdate
void GlobalNamespace::BattleBalloons::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BattleBalloons.PopBalloon
void GlobalNamespace::BattleBalloons::PopBalloon(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::PopBalloon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopBalloon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, i);
}
// Autogenerated method: BattleBalloons.UpdateBalloonColors
void GlobalNamespace::BattleBalloons::UpdateBalloonColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BattleBalloons::UpdateBalloonColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBalloonColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
// Including type: BodyDockPositions
#include "GlobalNamespace/BodyDockPositions.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions forBodyDock
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& GlobalNamespace::DropZone::dyn_forBodyDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DropZone::dyn_forBodyDock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forBodyDock"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions/DropPositions dropPosition
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions::DropPositions& GlobalNamespace::DropZone::dyn_dropPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DropZone::dyn_dropPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dropPosition"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions::DropPositions*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform anchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::DropZone::dyn_anchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DropZone::dyn_anchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: EquipmentInteractor
#include "GlobalNamespace/EquipmentInteractor.hpp"
// Including type: BuilderPieceInteractor
#include "GlobalNamespace/BuilderPieceInteractor.hpp"
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
// Including type: GorillaLocomotion.Climbing.GorillaHandClimber
#include "GorillaLocomotion/Climbing/GorillaHandClimber.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: BuilderPiece
#include "GlobalNamespace/BuilderPiece.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public EquipmentInteractor instance
::GlobalNamespace::EquipmentInteractor* GlobalNamespace::EquipmentInteractor::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::EquipmentInteractor*>("", "EquipmentInteractor", "instance"));
}
// Autogenerated static field setter
// Set static field: static public EquipmentInteractor instance
void GlobalNamespace::EquipmentInteractor::_set_instance(::GlobalNamespace::EquipmentInteractor* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EquipmentInteractor", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::EquipmentInteractor::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "EquipmentInteractor", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::EquipmentInteractor::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EquipmentInteractor", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.RaycastHit[] tempHitResults
::ArrayW<::UnityEngine::RaycastHit> GlobalNamespace::EquipmentInteractor::_get_tempHitResults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::_get_tempHitResults");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::UnityEngine::RaycastHit>>("", "EquipmentInteractor", "tempHitResults"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.RaycastHit[] tempHitResults
void GlobalNamespace::EquipmentInteractor::_set_tempHitResults(::ArrayW<::UnityEngine::RaycastHit> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::_set_tempHitResults");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EquipmentInteractor", "tempHitResults", value));
}
// Autogenerated instance field getter
// Get instance field: public BuilderPieceInteractor builderPieceInteractor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BuilderPieceInteractor*& GlobalNamespace::EquipmentInteractor::dyn_builderPieceInteractor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_builderPieceInteractor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "builderPieceInteractor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BuilderPieceInteractor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HoldableObject leftHandHeldEquipment
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HoldableObject*& GlobalNamespace::EquipmentInteractor::dyn_leftHandHeldEquipment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_leftHandHeldEquipment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandHeldEquipment"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HoldableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HoldableObject rightHandHeldEquipment
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HoldableObject*& GlobalNamespace::EquipmentInteractor::dyn_rightHandHeldEquipment() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_rightHandHeldEquipment");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandHeldEquipment"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HoldableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftHandTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::EquipmentInteractor::dyn_leftHandTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_leftHandTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightHandTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::EquipmentInteractor::dyn_rightHandTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_rightHandTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform chestTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::EquipmentInteractor::dyn_chestTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_chestTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftArmTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::EquipmentInteractor::dyn_leftArmTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_leftArmTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftArmTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightArmTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::EquipmentInteractor::dyn_rightArmTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_rightArmTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightArmTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject rightHand
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::EquipmentInteractor::dyn_rightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_rightHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHand"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject leftHand
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::EquipmentInteractor::dyn_leftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_leftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHand"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean leftHandSet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_leftHandSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_leftHandSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean rightHandSet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_rightHandSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_rightHandSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandSet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.XR.InputDevice leftHandDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::EquipmentInteractor::dyn_leftHandDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_leftHandDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.XR.InputDevice rightHandDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::EquipmentInteractor::dyn_rightHandDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_rightHandDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<InteractionPoint> overlapInteractionPointsLeft
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>*& GlobalNamespace::EquipmentInteractor::dyn_overlapInteractionPointsLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_overlapInteractionPointsLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlapInteractionPointsLeft"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<InteractionPoint> overlapInteractionPointsRight
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>*& GlobalNamespace::EquipmentInteractor::dyn_overlapInteractionPointsRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_overlapInteractionPointsRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overlapInteractionPointsRight"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesLeft
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::EquipmentInteractor::dyn_collisionDisabledPiecesLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_collisionDisabledPiecesLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionDisabledPiecesLeft"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.GameObject> collisionDisabledPiecesRight
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& GlobalNamespace::EquipmentInteractor::dyn_collisionDisabledPiecesRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_collisionDisabledPiecesRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionDisabledPiecesRight"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 gorillaInteractableLayerMask
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EquipmentInteractor::dyn_gorillaInteractableLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_gorillaInteractableLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gorillaInteractableLayerMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single grabRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EquipmentInteractor::dyn_grabRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_grabRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single grabThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EquipmentInteractor::dyn_grabThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_grabThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single grabHysteresis
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EquipmentInteractor::dyn_grabHysteresis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_grabHysteresis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabHysteresis"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean wasLeftGrabPressed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_wasLeftGrabPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_wasLeftGrabPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasLeftGrabPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean wasRightGrabPressed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_wasRightGrabPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_wasRightGrabPressed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasRightGrabPressed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isLeftGrabbing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_isLeftGrabbing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_isLeftGrabbing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isLeftGrabbing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isRightGrabbing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_isRightGrabbing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_isRightGrabbing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isRightGrabbing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean justReleased
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_justReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_justReleased");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "justReleased"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean justGrabbed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_justGrabbed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_justGrabbed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "justGrabbed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableLeftGrab
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_disableLeftGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_disableLeftGrab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableLeftGrab"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableRightGrab
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_disableRightGrab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_disableRightGrab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableRightGrab"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean autoGrabLeft
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_autoGrabLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_autoGrabLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoGrabLeft"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean autoGrabRight
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::EquipmentInteractor::dyn_autoGrabRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_autoGrabRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "autoGrabRight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single grabValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EquipmentInteractor::dyn_grabValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_grabValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single tempValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::EquipmentInteractor::dyn_tempValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_tempValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private InteractionPoint tempPoint
[[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& GlobalNamespace::EquipmentInteractor::dyn_tempPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_tempPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempPoint"))->offset;
  return *reinterpret_cast<::GlobalNamespace::InteractionPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private DropZone tempZone
[[deprecated("Use field access instead!")]] ::GlobalNamespace::DropZone*& GlobalNamespace::EquipmentInteractor::dyn_tempZone() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_tempZone");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempZone"))->offset;
  return *reinterpret_cast<::GlobalNamespace::DropZone**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaLocomotion.Climbing.GorillaHandClimber leftClimber
[[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaHandClimber*& GlobalNamespace::EquipmentInteractor::dyn_leftClimber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_leftClimber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftClimber"))->offset;
  return *reinterpret_cast<::GorillaLocomotion::Climbing::GorillaHandClimber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaLocomotion.Climbing.GorillaHandClimber rightClimber
[[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaHandClimber*& GlobalNamespace::EquipmentInteractor::dyn_rightClimber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::dyn_rightClimber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightClimber"))->offset;
  return *reinterpret_cast<::GorillaLocomotion::Climbing::GorillaHandClimber**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EquipmentInteractor.Awake
void GlobalNamespace::EquipmentInteractor::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EquipmentInteractor.OnDestroy
void GlobalNamespace::EquipmentInteractor::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EquipmentInteractor.ReleaseRightHand
void GlobalNamespace::EquipmentInteractor::ReleaseRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::ReleaseRightHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseRightHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EquipmentInteractor.ReleaseLeftHand
void GlobalNamespace::EquipmentInteractor::ReleaseLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::ReleaseLeftHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseLeftHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EquipmentInteractor.ForceStopClimbing
void GlobalNamespace::EquipmentInteractor::ForceStopClimbing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::ForceStopClimbing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceStopClimbing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EquipmentInteractor.GetIsHolding
bool GlobalNamespace::EquipmentInteractor::GetIsHolding(::UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::GetIsHolding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIsHolding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, node);
}
// Autogenerated method: EquipmentInteractor.LateUpdate
void GlobalNamespace::EquipmentInteractor::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EquipmentInteractor.FireHandInteractions
void GlobalNamespace::EquipmentInteractor::FireHandInteractions(::UnityEngine::GameObject* interactingHand, bool isLeftHand, ::GlobalNamespace::BuilderPiece* pieceInHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::FireHandInteractions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireHandInteractions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactingHand), ::il2cpp_utils::ExtractType(isLeftHand), ::il2cpp_utils::ExtractType(pieceInHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, interactingHand, isLeftHand, pieceInHand);
}
// Autogenerated method: EquipmentInteractor.UpdateHandEquipment
void GlobalNamespace::EquipmentInteractor::UpdateHandEquipment(::GlobalNamespace::HoldableObject* newEquipment, bool forLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::UpdateHandEquipment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHandEquipment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newEquipment), ::il2cpp_utils::ExtractType(forLeftHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newEquipment, forLeftHand);
}
// Autogenerated method: EquipmentInteractor.CheckInputValue
void GlobalNamespace::EquipmentInteractor::CheckInputValue(bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::CheckInputValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckInputValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeftHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeftHand);
}
// Autogenerated method: EquipmentInteractor.ForceDropEquipment
void GlobalNamespace::EquipmentInteractor::ForceDropEquipment(::GlobalNamespace::HoldableObject* equipment) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::ForceDropEquipment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceDropEquipment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(equipment)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, equipment);
}
// Autogenerated method: EquipmentInteractor.ForceDropManipulatableObject
void GlobalNamespace::EquipmentInteractor::ForceDropManipulatableObject(::GlobalNamespace::HoldableObject* manipulatableObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::ForceDropManipulatableObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceDropManipulatableObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manipulatableObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, manipulatableObject);
}
// Autogenerated method: EquipmentInteractor..cctor
void GlobalNamespace::EquipmentInteractor::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EquipmentInteractor::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EquipmentInteractor", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HitTargetNetworkState
#include "GlobalNamespace/HitTargetNetworkState.hpp"
// Including type: HitTargetNetworkState/<TestPressCheck>d__11
#include "GlobalNamespace/HitTargetNetworkState_-TestPressCheck-d__11.hpp"
// Including type: GorillaTag.WatchableIntSO
#include "GorillaTag/WatchableIntSO.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: SlingshotProjectile
#include "GlobalNamespace/SlingshotProjectile.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: Photon.Realtime.DisconnectCause
#include "Photon/Realtime/DisconnectCause.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GorillaTag.WatchableIntSO networkedScore
[[deprecated("Use field access instead!")]] ::GorillaTag::WatchableIntSO*& GlobalNamespace::HitTargetNetworkState::dyn_networkedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::dyn_networkedScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "networkedScore"))->offset;
  return *reinterpret_cast<::GorillaTag::WatchableIntSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 hitCooldownTime
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetNetworkState::dyn_hitCooldownTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::dyn_hitCooldownTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitCooldownTime"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean testPress
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HitTargetNetworkState::dyn_testPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::dyn_testPress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testPress"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioClip[] audioClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::HitTargetNetworkState::dyn_audioClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::dyn_audioClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.AudioSource audioPlayer
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::HitTargetNetworkState::dyn_audioPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::dyn_audioPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioPlayer"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nextHittableTimestamp
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HitTargetNetworkState::dyn_nextHittableTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::dyn_nextHittableTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nextHittableTimestamp"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HitTargetNetworkState.Awake
void GlobalNamespace::HitTargetNetworkState::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState.SetInitialState
void GlobalNamespace::HitTargetNetworkState::SetInitialState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::SetInitialState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInitialState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState.TestPressCheck
::System::Collections::IEnumerator* GlobalNamespace::HitTargetNetworkState::TestPressCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::TestPressCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestPressCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState.ProjectileHitReciever
void GlobalNamespace::HitTargetNetworkState::ProjectileHitReciever(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::ProjectileHitReciever");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProjectileHitReciever", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(projectile), ::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collision);
}
// Autogenerated method: HitTargetNetworkState.TargetHit
void GlobalNamespace::HitTargetNetworkState::TargetHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::TargetHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TargetHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState.OnPhotonSerializeView
void GlobalNamespace::HitTargetNetworkState::OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetNetworkState*), 56));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: HitTargetNetworkState.PlayAudio
void GlobalNamespace::HitTargetNetworkState::PlayAudio(int oldScore, int newScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::PlayAudio");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayAudio", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldScore), ::il2cpp_utils::ExtractType(newScore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, oldScore, newScore);
}
// Autogenerated method: HitTargetNetworkState.OnDisconnected
void GlobalNamespace::HitTargetNetworkState::OnDisconnected(::Photon::Realtime::DisconnectCause cause) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::OnDisconnected");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 39));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cause);
}
// Autogenerated method: HitTargetNetworkState.OnLeftRoom
void GlobalNamespace::HitTargetNetworkState::OnLeftRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::OnLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState.OnEnable
void GlobalNamespace::HitTargetNetworkState::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HitTargetNetworkState/<TestPressCheck>d__11
#include "GlobalNamespace/HitTargetNetworkState_-TestPressCheck-d__11.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HitTargetNetworkState <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HitTargetNetworkState*& GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HitTargetNetworkState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HitTargetNetworkState/<TestPressCheck>d__11.System.IDisposable.Dispose
void GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState/<TestPressCheck>d__11.MoveNext
bool GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState/<TestPressCheck>d__11.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState/<TestPressCheck>d__11.System.Collections.IEnumerator.Reset
void GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetNetworkState/<TestPressCheck>d__11.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetNetworkState::$TestPressCheck$d__11*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HitTargetScoreDisplay
#include "GlobalNamespace/HitTargetScoreDisplay.hpp"
// Including type: HitTargetScoreDisplay/<RotatingCo>d__19
#include "GlobalNamespace/HitTargetScoreDisplay_-RotatingCo-d__19.hpp"
// Including type: GorillaTag.WatchableIntSO
#include "GorillaTag/WatchableIntSO.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private GorillaTag.WatchableIntSO networkedScore
[[deprecated("Use field access instead!")]] ::GorillaTag::WatchableIntSO*& GlobalNamespace::HitTargetScoreDisplay::dyn_networkedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_networkedScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "networkedScore"))->offset;
  return *reinterpret_cast<::GorillaTag::WatchableIntSO**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 currentScore
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::dyn_currentScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_currentScore");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentScore"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 tensOld
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::dyn_tensOld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_tensOld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tensOld"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 hundredsOld
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::dyn_hundredsOld() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_hundredsOld");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hundredsOld"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single rotateTimeTotal
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HitTargetScoreDisplay::dyn_rotateTimeTotal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_rotateTimeTotal");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotateTimeTotal"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 shaderPropID_MainTex_ST
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::dyn_shaderPropID_MainTex_ST() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_shaderPropID_MainTex_ST");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shaderPropID_MainTex_ST"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock matPropBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::HitTargetScoreDisplay::dyn_matPropBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_matPropBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "matPropBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Vector4[] numberSheet
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& GlobalNamespace::HitTargetScoreDisplay::dyn_numberSheet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_numberSheet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "numberSheet"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector4>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 rotateSpeed
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::dyn_rotateSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_rotateSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rotateSpeed"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform singlesCard
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::HitTargetScoreDisplay::dyn_singlesCard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_singlesCard");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "singlesCard"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform tensCard
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::HitTargetScoreDisplay::dyn_tensCard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_tensCard");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tensCard"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform hundredsCard
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::HitTargetScoreDisplay::dyn_hundredsCard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_hundredsCard");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hundredsCard"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer singlesRend
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::HitTargetScoreDisplay::dyn_singlesRend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_singlesRend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "singlesRend"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer tensRend
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::HitTargetScoreDisplay::dyn_tensRend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_tensRend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tensRend"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer hundredsRend
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::HitTargetScoreDisplay::dyn_hundredsRend() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_hundredsRend");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hundredsRend"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Coroutine currentRotationCoroutine
[[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& GlobalNamespace::HitTargetScoreDisplay::dyn_currentRotationCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::dyn_currentRotationCoroutine");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentRotationCoroutine"))->offset;
  return *reinterpret_cast<::UnityEngine::Coroutine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HitTargetScoreDisplay.Awake
void GlobalNamespace::HitTargetScoreDisplay::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetScoreDisplay.OnDestroy
void GlobalNamespace::HitTargetScoreDisplay::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetScoreDisplay.ResetRotation
void GlobalNamespace::HitTargetScoreDisplay::ResetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::ResetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetScoreDisplay.RotatingCo
::System::Collections::IEnumerator* GlobalNamespace::HitTargetScoreDisplay::RotatingCo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::RotatingCo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotatingCo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetScoreDisplay.OnScoreChanged
void GlobalNamespace::HitTargetScoreDisplay::OnScoreChanged(int newScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::OnScoreChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnScoreChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newScore)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newScore);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: HitTargetScoreDisplay/<RotatingCo>d__19
#include "GlobalNamespace/HitTargetScoreDisplay_-RotatingCo-d__19.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HitTargetScoreDisplay <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HitTargetScoreDisplay*& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HitTargetScoreDisplay**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single <timeElapsedSinceHit>5__2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$timeElapsedSinceHit$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$timeElapsedSinceHit$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<timeElapsedSinceHit>5__2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <singlesPlace>5__3
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$singlesPlace$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$singlesPlace$5__3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<singlesPlace>5__3"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <tensPlace>5__4
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$tensPlace$5__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$tensPlace$5__4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<tensPlace>5__4"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <tensChange>5__5
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$tensChange$5__5() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$tensChange$5__5");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<tensChange>5__5"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <hundredsPlace>5__6
[[deprecated("Use field access instead!")]] int& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$hundredsPlace$5__6() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$hundredsPlace$5__6");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<hundredsPlace>5__6"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <hundredsChange>5__7
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$hundredsChange$5__7() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$hundredsChange$5__7");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<hundredsChange>5__7"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <digitsChange>5__8
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$digitsChange$5__8() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::dyn_$digitsChange$5__8");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<digitsChange>5__8"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HitTargetScoreDisplay/<RotatingCo>d__19.System.IDisposable.Dispose
void GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetScoreDisplay/<RotatingCo>d__19.MoveNext
bool GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetScoreDisplay/<RotatingCo>d__19.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetScoreDisplay/<RotatingCo>d__19.System.Collections.IEnumerator.Reset
void GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HitTargetScoreDisplay/<RotatingCo>d__19.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HitTargetScoreDisplay::$RotatingCo$d__19*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: HoldableObject
#include "GlobalNamespace/HoldableObject.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: EquipmentInteractor
#include "GlobalNamespace/EquipmentInteractor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private HoldableObject parentHoldable
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HoldableObject*& GlobalNamespace::InteractionPoint::dyn_parentHoldable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_parentHoldable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentHoldable"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HoldableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ignoreLeftHand>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InteractionPoint::dyn_$ignoreLeftHand$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_$ignoreLeftHand$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ignoreLeftHand>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ignoreRightHand>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InteractionPoint::dyn_$ignoreRightHand$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_$ignoreRightHand$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ignoreRightHand>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isNonSpawnedObject
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InteractionPoint::dyn_isNonSpawnedObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_isNonSpawnedObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isNonSpawnedObject"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider myCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::InteractionPoint::dyn_myCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_myCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EquipmentInteractor interactor
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EquipmentInteractor*& GlobalNamespace::InteractionPoint::dyn_interactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_interactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interactor"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EquipmentInteractor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean wasInLeft
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InteractionPoint::dyn_wasInLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_wasInLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasInLeft"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean wasInRight
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InteractionPoint::dyn_wasInRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_wasInRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wasInRight"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean forLocalPlayer
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InteractionPoint::dyn_forLocalPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_forLocalPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forLocalPlayer"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::InteractionPoint::dyn_$IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::dyn_$IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: InteractionPoint.get_ignoreLeftHand
bool GlobalNamespace::InteractionPoint::get_ignoreLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::get_ignoreLeftHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ignoreLeftHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.set_ignoreLeftHand
void GlobalNamespace::InteractionPoint::set_ignoreLeftHand(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::set_ignoreLeftHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ignoreLeftHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InteractionPoint.get_ignoreRightHand
bool GlobalNamespace::InteractionPoint::get_ignoreRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::get_ignoreRightHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ignoreRightHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.set_ignoreRightHand
void GlobalNamespace::InteractionPoint::set_ignoreRightHand(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::set_ignoreRightHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ignoreRightHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InteractionPoint.get_Holdable
::GlobalNamespace::HoldableObject* GlobalNamespace::InteractionPoint::get_Holdable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::get_Holdable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Holdable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::HoldableObject*, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.get_IsSpawned
bool GlobalNamespace::InteractionPoint::get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::InteractionPoint*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.set_IsSpawned
void GlobalNamespace::InteractionPoint::set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::InteractionPoint*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InteractionPoint.OnSpawn
void GlobalNamespace::InteractionPoint::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::InteractionPoint*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.OnDespawn
void GlobalNamespace::InteractionPoint::OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::InteractionPoint*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.Awake
void GlobalNamespace::InteractionPoint::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.OnEnable
void GlobalNamespace::InteractionPoint::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.OnDisable
void GlobalNamespace::InteractionPoint::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPoint.LateUpdate
void GlobalNamespace::InteractionPoint::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPoint::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: InteractionPointManager
#include "GlobalNamespace/InteractionPointManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public InteractionPointManager instance
::GlobalNamespace::InteractionPointManager* GlobalNamespace::InteractionPointManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::InteractionPointManager*>("", "InteractionPointManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public InteractionPointManager instance
void GlobalNamespace::InteractionPointManager::_set_instance(::GlobalNamespace::InteractionPointManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "InteractionPointManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::InteractionPointManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "InteractionPointManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::InteractionPointManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "InteractionPointManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.List`1<InteractionPoint> interactionPoints
::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>* GlobalNamespace::InteractionPointManager::_get_interactionPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::_get_interactionPoints");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>*>("", "InteractionPointManager", "interactionPoints"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.List`1<InteractionPoint> interactionPoints
void GlobalNamespace::InteractionPointManager::_set_interactionPoints(::System::Collections::Generic::List_1<::GlobalNamespace::InteractionPoint*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::_set_interactionPoints");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "InteractionPointManager", "interactionPoints", value));
}
// Autogenerated method: InteractionPointManager.Awake
void GlobalNamespace::InteractionPointManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPointManager.OnDestroy
void GlobalNamespace::InteractionPointManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPointManager.LateUpdate
void GlobalNamespace::InteractionPointManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: InteractionPointManager.CreateManager
void GlobalNamespace::InteractionPointManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "InteractionPointManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: InteractionPointManager.SetInstance
void GlobalNamespace::InteractionPointManager::SetInstance(::GlobalNamespace::InteractionPointManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "InteractionPointManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: InteractionPointManager.Register
void GlobalNamespace::InteractionPointManager::Register(::GlobalNamespace::InteractionPoint* interactionPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "InteractionPointManager", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactionPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, interactionPoint);
}
// Autogenerated method: InteractionPointManager.Unregister
void GlobalNamespace::InteractionPointManager::Unregister(::GlobalNamespace::InteractionPoint* interactionPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "InteractionPointManager", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactionPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, interactionPoint);
}
// Autogenerated method: InteractionPointManager..cctor
void GlobalNamespace::InteractionPointManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InteractionPointManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "InteractionPointManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ITetheredObjectBehavior
#include "GlobalNamespace/ITetheredObjectBehavior.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ITetheredObjectBehavior.DbgClear
void GlobalNamespace::ITetheredObjectBehavior::DbgClear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ITetheredObjectBehavior::DbgClear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ITetheredObjectBehavior*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ITetheredObjectBehavior.EnableDistanceConstraints
void GlobalNamespace::ITetheredObjectBehavior::EnableDistanceConstraints(bool v, float playerScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ITetheredObjectBehavior::EnableDistanceConstraints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ITetheredObjectBehavior*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, v, playerScale);
}
// Autogenerated method: ITetheredObjectBehavior.EnableDynamics
void GlobalNamespace::ITetheredObjectBehavior::EnableDynamics(bool enable, bool kinematic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ITetheredObjectBehavior::EnableDynamics");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ITetheredObjectBehavior*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable, kinematic);
}
// Autogenerated method: ITetheredObjectBehavior.IsEnabled
bool GlobalNamespace::ITetheredObjectBehavior::IsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ITetheredObjectBehavior::IsEnabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ITetheredObjectBehavior*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ITetheredObjectBehavior.ReParent
void GlobalNamespace::ITetheredObjectBehavior::ReParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ITetheredObjectBehavior::ReParent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ITetheredObjectBehavior*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ITetheredObjectBehavior.ReturnStep
bool GlobalNamespace::ITetheredObjectBehavior::ReturnStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ITetheredObjectBehavior::ReturnStep");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ITetheredObjectBehavior*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ITetheredObjectBehavior.TriggerEnter
void GlobalNamespace::ITetheredObjectBehavior::TriggerEnter(::UnityEngine::Collider* other, ByRef<::UnityEngine::Vector3> force, ByRef<::UnityEngine::Vector3> collisionPt, ByRef<bool> transferOwnership) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ITetheredObjectBehavior::TriggerEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ITetheredObjectBehavior*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other, byref(force), byref(collisionPt), byref(transferOwnership));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: KiteDynamics
#include "GlobalNamespace/KiteDynamics.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody rb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::KiteDynamics::dyn_rb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_rb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider balloonCollider
[[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& GlobalNamespace::KiteDynamics::dyn_balloonCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_balloonCollider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonCollider"))->offset;
  return *reinterpret_cast<::UnityEngine::Collider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Bounds bounds
[[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& GlobalNamespace::KiteDynamics::dyn_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_bounds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bounds"))->offset;
  return *reinterpret_cast<::UnityEngine::Bounds*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single bouyancyForce
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_bouyancyForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_bouyancyForce");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bouyancyForce"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single bouyancyMinHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_bouyancyMinHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_bouyancyMinHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bouyancyMinHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single bouyancyMaxHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_bouyancyMaxHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_bouyancyMaxHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bouyancyMaxHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single bouyancyActualHeight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_bouyancyActualHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_bouyancyActualHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bouyancyActualHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single varianceMaxheight
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_varianceMaxheight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_varianceMaxheight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "varianceMaxheight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single airResistance
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_airResistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_airResistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "airResistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject knot
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::KiteDynamics::dyn_knot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_knot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "knot"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody knotRb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::KiteDynamics::dyn_knotRb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_knotRb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "knotRb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform grabPt
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::KiteDynamics::dyn_grabPt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_grabPt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabPt"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform grabPtInitParent
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::KiteDynamics::dyn_grabPtInitParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_grabPtInitParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabPtInitParent"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single stringLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_stringLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_stringLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stringLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single stringStrength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_stringStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_stringStrength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stringStrength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single stringStretch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_stringStretch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_stringStretch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stringStretch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single maximumVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_maximumVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_maximumVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maximumVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single upRightTorque
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_upRightTorque() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_upRightTorque");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "upRightTorque"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean enableDynamics
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::KiteDynamics::dyn_enableDynamics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_enableDynamics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableDynamics"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean held
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::KiteDynamics::dyn_held() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_held");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "held"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single balloonScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_balloonScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_balloonScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single bopSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_bopSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_bopSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bopSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 grabPtPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::KiteDynamics::dyn_grabPtPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_grabPtPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabPtPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion ctrlRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::KiteDynamics::dyn_ctrlRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_ctrlRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ctrlRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single returnSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::KiteDynamics::dyn_returnSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::dyn_returnSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "returnSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: KiteDynamics.Awake
void GlobalNamespace::KiteDynamics::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KiteDynamics.Start
void GlobalNamespace::KiteDynamics::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KiteDynamics.ReParent
void GlobalNamespace::KiteDynamics::ReParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::ReParent");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::KiteDynamics*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KiteDynamics.EnableDynamics
void GlobalNamespace::KiteDynamics::EnableDynamics(bool enable, bool kinematic) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::EnableDynamics");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::KiteDynamics*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable, kinematic);
}
// Autogenerated method: KiteDynamics.EnableDistanceConstraints
void GlobalNamespace::KiteDynamics::EnableDistanceConstraints(bool enable, float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::EnableDistanceConstraints");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::KiteDynamics*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable, scale);
}
// Autogenerated method: KiteDynamics.get_ColliderEnabled
bool GlobalNamespace::KiteDynamics::get_ColliderEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::get_ColliderEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ColliderEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: KiteDynamics.FixedUpdate
void GlobalNamespace::KiteDynamics::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KiteDynamics.ITetheredObjectBehavior.DbgClear
void GlobalNamespace::KiteDynamics::ITetheredObjectBehavior_DbgClear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::ITetheredObjectBehavior.DbgClear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::KiteDynamics*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KiteDynamics.ITetheredObjectBehavior.IsEnabled
bool GlobalNamespace::KiteDynamics::ITetheredObjectBehavior_IsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::ITetheredObjectBehavior.IsEnabled");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::KiteDynamics*), 7));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: KiteDynamics.ITetheredObjectBehavior.TriggerEnter
void GlobalNamespace::KiteDynamics::ITetheredObjectBehavior_TriggerEnter(::UnityEngine::Collider* other, ByRef<::UnityEngine::Vector3> force, ByRef<::UnityEngine::Vector3> collisionPt, ByRef<bool> transferOwnership) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::ITetheredObjectBehavior.TriggerEnter");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::KiteDynamics*), 10));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other, byref(force), byref(collisionPt), byref(transferOwnership));
}
// Autogenerated method: KiteDynamics.ReturnStep
bool GlobalNamespace::KiteDynamics::ReturnStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::KiteDynamics::ReturnStep");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::KiteDynamics*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegacyBalloonHoldable
#include "GlobalNamespace/LegacyBalloonHoldable.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: BalloonDynamics
#include "GlobalNamespace/BalloonDynamics.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private BalloonDynamics balloonDynamics
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BalloonDynamics*& GlobalNamespace::LegacyBalloonHoldable::dyn_balloonDynamics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_balloonDynamics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonDynamics"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BalloonDynamics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer mesh
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::LegacyBalloonHoldable::dyn_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_mesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mesh"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LineRenderer lineRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::LegacyBalloonHoldable::dyn_lineRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_lineRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody rb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::LegacyBalloonHoldable::dyn_rb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_rb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Realtime.Player originalOwner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::LegacyBalloonHoldable::dyn_originalOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_originalOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "originalOwner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject balloonPopFXPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::LegacyBalloonHoldable::dyn_balloonPopFXPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_balloonPopFXPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonPopFXPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color balloonPopFXColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::LegacyBalloonHoldable::dyn_balloonPopFXColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_balloonPopFXColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonPopFXColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyBalloonHoldable::dyn_timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_timer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scaleTimerLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyBalloonHoldable::dyn_scaleTimerLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_scaleTimerLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleTimerLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single poppedTimerLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyBalloonHoldable::dyn_poppedTimerLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_poppedTimerLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "poppedTimerLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single beginScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyBalloonHoldable::dyn_beginScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_beginScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "beginScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bopSpeed
[[deprecated("Use field access instead!")]] float& GlobalNamespace::LegacyBalloonHoldable::dyn_bopSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_bopSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bopSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 localScale
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LegacyBalloonHoldable::dyn_localScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_localScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localScale"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource balloonBopSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::LegacyBalloonHoldable::dyn_balloonBopSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_balloonBopSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonBopSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource balloonInflatSource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::LegacyBalloonHoldable::dyn_balloonInflatSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_balloonInflatSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonInflatSource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 forceAppliedAsRemote
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LegacyBalloonHoldable::dyn_forceAppliedAsRemote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_forceAppliedAsRemote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forceAppliedAsRemote"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 collisionPtAsRemote
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::LegacyBalloonHoldable::dyn_collisionPtAsRemote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_collisionPtAsRemote");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collisionPtAsRemote"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegacyBalloonHoldable/BalloonStates balloonState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegacyBalloonHoldable::BalloonStates& GlobalNamespace::LegacyBalloonHoldable::dyn_balloonState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::dyn_balloonState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "balloonState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegacyBalloonHoldable::BalloonStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegacyBalloonHoldable.ShouldSimulate
bool GlobalNamespace::LegacyBalloonHoldable::ShouldSimulate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::ShouldSimulate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldSimulate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.PlayPopBalloonFX
void GlobalNamespace::LegacyBalloonHoldable::PlayPopBalloonFX() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::PlayPopBalloonFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayPopBalloonFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.EnableDynamics
void GlobalNamespace::LegacyBalloonHoldable::EnableDynamics(bool enable, bool forceKinematicOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::EnableDynamics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableDynamics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enable), ::il2cpp_utils::ExtractType(forceKinematicOn)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable, forceKinematicOn);
}
// Autogenerated method: LegacyBalloonHoldable.PopBalloon
void GlobalNamespace::LegacyBalloonHoldable::PopBalloon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::PopBalloon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopBalloon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.PopBalloonRemote
void GlobalNamespace::LegacyBalloonHoldable::PopBalloonRemote() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::PopBalloonRemote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopBalloonRemote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.OnOwnerChangeCb
void GlobalNamespace::LegacyBalloonHoldable::OnOwnerChangeCb(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* prevOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::OnOwnerChangeCb");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnOwnerChangeCb", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newOwner), ::il2cpp_utils::ExtractType(prevOwner)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, prevOwner);
}
// Autogenerated method: LegacyBalloonHoldable.OwnerPopBalloon
void GlobalNamespace::LegacyBalloonHoldable::OwnerPopBalloon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::OwnerPopBalloon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OwnerPopBalloon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.RunLocalPopSM
void GlobalNamespace::LegacyBalloonHoldable::RunLocalPopSM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::RunLocalPopSM");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunLocalPopSM", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.Grab
void GlobalNamespace::LegacyBalloonHoldable::Grab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::Grab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Grab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.Release
void GlobalNamespace::LegacyBalloonHoldable::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::Release");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.OnTriggerEnter
void GlobalNamespace::LegacyBalloonHoldable::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: LegacyBalloonHoldable.OnCollisionEnter
void GlobalNamespace::LegacyBalloonHoldable::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: LegacyBalloonHoldable.Awake
void GlobalNamespace::LegacyBalloonHoldable::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 61));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.Start
void GlobalNamespace::LegacyBalloonHoldable::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 62));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.OnEnable
void GlobalNamespace::LegacyBalloonHoldable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.OnDisable
void GlobalNamespace::LegacyBalloonHoldable::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.OnWorldShareableItemSpawn
void GlobalNamespace::LegacyBalloonHoldable::OnWorldShareableItemSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::OnWorldShareableItemSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 63));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.OnWorldShareableItemDeallocated
void GlobalNamespace::LegacyBalloonHoldable::OnWorldShareableItemDeallocated(::Photon::Realtime::Player* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::OnWorldShareableItemDeallocated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 64));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: LegacyBalloonHoldable.LateUpdateShared
void GlobalNamespace::LegacyBalloonHoldable::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 66));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyBalloonHoldable.LateUpdateReplicated
void GlobalNamespace::LegacyBalloonHoldable::LateUpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::LateUpdateReplicated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyTransferrableObject*), 68));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegacyBalloonHoldable/BalloonStates
#include "GlobalNamespace/LegacyBalloonHoldable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LegacyBalloonHoldable/BalloonStates Normal
::GlobalNamespace::LegacyBalloonHoldable::BalloonStates GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegacyBalloonHoldable::BalloonStates>("", "LegacyBalloonHoldable/BalloonStates", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public LegacyBalloonHoldable/BalloonStates Normal
void GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_Normal(::GlobalNamespace::LegacyBalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyBalloonHoldable/BalloonStates", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public LegacyBalloonHoldable/BalloonStates Pop
::GlobalNamespace::LegacyBalloonHoldable::BalloonStates GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_Pop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_Pop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegacyBalloonHoldable::BalloonStates>("", "LegacyBalloonHoldable/BalloonStates", "Pop"));
}
// Autogenerated static field setter
// Set static field: static public LegacyBalloonHoldable/BalloonStates Pop
void GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_Pop(::GlobalNamespace::LegacyBalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_Pop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyBalloonHoldable/BalloonStates", "Pop", value));
}
// Autogenerated static field getter
// Get static field: static public LegacyBalloonHoldable/BalloonStates Waiting
::GlobalNamespace::LegacyBalloonHoldable::BalloonStates GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_Waiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_Waiting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegacyBalloonHoldable::BalloonStates>("", "LegacyBalloonHoldable/BalloonStates", "Waiting"));
}
// Autogenerated static field setter
// Set static field: static public LegacyBalloonHoldable/BalloonStates Waiting
void GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_Waiting(::GlobalNamespace::LegacyBalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_Waiting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyBalloonHoldable/BalloonStates", "Waiting", value));
}
// Autogenerated static field getter
// Get static field: static public LegacyBalloonHoldable/BalloonStates WaitForOwnershipTransfer
::GlobalNamespace::LegacyBalloonHoldable::BalloonStates GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_WaitForOwnershipTransfer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_WaitForOwnershipTransfer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegacyBalloonHoldable::BalloonStates>("", "LegacyBalloonHoldable/BalloonStates", "WaitForOwnershipTransfer"));
}
// Autogenerated static field setter
// Set static field: static public LegacyBalloonHoldable/BalloonStates WaitForOwnershipTransfer
void GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_WaitForOwnershipTransfer(::GlobalNamespace::LegacyBalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_WaitForOwnershipTransfer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyBalloonHoldable/BalloonStates", "WaitForOwnershipTransfer", value));
}
// Autogenerated static field getter
// Get static field: static public LegacyBalloonHoldable/BalloonStates WaitForReDock
::GlobalNamespace::LegacyBalloonHoldable::BalloonStates GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_WaitForReDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_WaitForReDock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegacyBalloonHoldable::BalloonStates>("", "LegacyBalloonHoldable/BalloonStates", "WaitForReDock"));
}
// Autogenerated static field setter
// Set static field: static public LegacyBalloonHoldable/BalloonStates WaitForReDock
void GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_WaitForReDock(::GlobalNamespace::LegacyBalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_WaitForReDock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyBalloonHoldable/BalloonStates", "WaitForReDock", value));
}
// Autogenerated static field getter
// Get static field: static public LegacyBalloonHoldable/BalloonStates Refilling
::GlobalNamespace::LegacyBalloonHoldable::BalloonStates GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_Refilling() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_get_Refilling");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::LegacyBalloonHoldable::BalloonStates>("", "LegacyBalloonHoldable/BalloonStates", "Refilling"));
}
// Autogenerated static field setter
// Set static field: static public LegacyBalloonHoldable/BalloonStates Refilling
void GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_Refilling(::GlobalNamespace::LegacyBalloonHoldable::BalloonStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::_set_Refilling");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LegacyBalloonHoldable/BalloonStates", "Refilling", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegacyBalloonHoldable::BalloonStates::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyBalloonHoldable::BalloonStates::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegacyWorldTargetItem
#include "GlobalNamespace/LegacyWorldTargetItem.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player owner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::LegacyWorldTargetItem::dyn_owner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldTargetItem::dyn_owner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "owner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 itemIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::LegacyWorldTargetItem::dyn_itemIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldTargetItem::dyn_itemIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegacyWorldTargetItem.IsValid
bool GlobalNamespace::LegacyWorldTargetItem::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldTargetItem::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldTargetItem.Invalidate
void GlobalNamespace::LegacyWorldTargetItem::Invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldTargetItem::Invalidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invalidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: LegacyWorldShareableItem
#include "GlobalNamespace/LegacyWorldShareableItem.hpp"
// Including type: LegacyWorldShareableItem/Delegate
#include "GlobalNamespace/LegacyWorldShareableItem_Delegate.hpp"
// Including type: LegacyWorldShareableItem/OnOwnerChangeDelegate
#include "GlobalNamespace/LegacyWorldShareableItem_OnOwnerChangeDelegate.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: LegacyWorldTargetItem
#include "GlobalNamespace/LegacyWorldTargetItem.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean validShareable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyWorldShareableItem::dyn_validShareable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::dyn_validShareable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "validShareable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Pun.PhotonView view
[[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& GlobalNamespace::LegacyWorldShareableItem::dyn_view() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::dyn_view");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "view"))->offset;
  return *reinterpret_cast<::Photon::Pun::PhotonView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform targetXf
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::LegacyWorldShareableItem::dyn_targetXf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::dyn_targetXf");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetXf"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegacyWorldTargetItem prevTarget
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegacyWorldTargetItem*& GlobalNamespace::LegacyWorldShareableItem::dyn_prevTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::dyn_prevTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevTarget"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegacyWorldTargetItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LegacyWorldTargetItem target
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegacyWorldTargetItem*& GlobalNamespace::LegacyWorldShareableItem::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegacyWorldTargetItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegacyWorldShareableItem/Delegate rpcCallBack
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegacyWorldShareableItem::Delegate*& GlobalNamespace::LegacyWorldShareableItem::dyn_rpcCallBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::dyn_rpcCallBack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rpcCallBack"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegacyWorldShareableItem::Delegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LegacyWorldShareableItem/OnOwnerChangeDelegate onOwnerChangeCb
[[deprecated("Use field access instead!")]] ::GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate*& GlobalNamespace::LegacyWorldShareableItem::dyn_onOwnerChangeCb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::dyn_onOwnerChangeCb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onOwnerChangeCb"))->offset;
  return *reinterpret_cast<::GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean enableRemoteSync
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::LegacyWorldShareableItem::dyn_enableRemoteSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::dyn_enableRemoteSync");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableRemoteSync"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LegacyWorldShareableItem.get_Target
::GlobalNamespace::LegacyWorldTargetItem* GlobalNamespace::LegacyWorldShareableItem::get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::get_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::LegacyWorldTargetItem*, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldShareableItem.Start
void GlobalNamespace::LegacyWorldShareableItem::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldShareableItem.OnPhotonInstantiate
void GlobalNamespace::LegacyWorldShareableItem::OnPhotonInstantiate(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::OnPhotonInstantiate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem*), 56));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated method: LegacyWorldShareableItem.Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange
void GlobalNamespace::LegacyWorldShareableItem::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, previousOwner);
}
// Autogenerated method: LegacyWorldShareableItem.get_EnableRemoteSync
bool GlobalNamespace::LegacyWorldShareableItem::get_EnableRemoteSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::get_EnableRemoteSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EnableRemoteSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldShareableItem.set_EnableRemoteSync
void GlobalNamespace::LegacyWorldShareableItem::set_EnableRemoteSync(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::set_EnableRemoteSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EnableRemoteSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LegacyWorldShareableItem.Update
void GlobalNamespace::LegacyWorldShareableItem::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldShareableItem.ReadTargetFromStream
bool GlobalNamespace::LegacyWorldShareableItem::ReadTargetFromStream(::Photon::Pun::PhotonStream* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::ReadTargetFromStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadTargetFromStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, stream);
}
// Autogenerated method: LegacyWorldShareableItem.SyncToTarget
void GlobalNamespace::LegacyWorldShareableItem::SyncToTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::SyncToTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SyncToTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldShareableItem.Photon.Pun.IPunObservable.OnPhotonSerializeView
void GlobalNamespace::LegacyWorldShareableItem::Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::Photon.Pun.IPunObservable.OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: LegacyWorldShareableItem.RPCWorldShareable
void GlobalNamespace::LegacyWorldShareableItem::RPCWorldShareable(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::RPCWorldShareable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RPCWorldShareable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated method: LegacyWorldShareableItem.OnEnable
void GlobalNamespace::LegacyWorldShareableItem::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldShareableItem.OnDisable
void GlobalNamespace::LegacyWorldShareableItem::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldShareableItem.OnLeftRoom
void GlobalNamespace::LegacyWorldShareableItem::OnLeftRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::OnLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LegacyWorldShareableItem/Delegate
#include "GlobalNamespace/LegacyWorldShareableItem_Delegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LegacyWorldShareableItem/Delegate.Invoke
void GlobalNamespace::LegacyWorldShareableItem::Delegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::Delegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem::Delegate*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LegacyWorldShareableItem/Delegate.BeginInvoke
::System::IAsyncResult* GlobalNamespace::LegacyWorldShareableItem::Delegate::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::Delegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem::Delegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: LegacyWorldShareableItem/Delegate.EndInvoke
void GlobalNamespace::LegacyWorldShareableItem::Delegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::Delegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem::Delegate*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LegacyWorldShareableItem/OnOwnerChangeDelegate
#include "GlobalNamespace/LegacyWorldShareableItem_OnOwnerChangeDelegate.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LegacyWorldShareableItem/OnOwnerChangeDelegate.Invoke
void GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate::Invoke(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* prevOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, prevOwner);
}
// Autogenerated method: LegacyWorldShareableItem/OnOwnerChangeDelegate.BeginInvoke
::System::IAsyncResult* GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate::BeginInvoke(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* prevOwner, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, newOwner, prevOwner, callback, object);
}
// Autogenerated method: LegacyWorldShareableItem/OnOwnerChangeDelegate.EndInvoke
void GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::LegacyWorldShareableItem::OnOwnerChangeDelegate*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Slingshot
#include "GlobalNamespace/Slingshot.hpp"
// Including type: Slingshot/SlingshotState
#include "GlobalNamespace/Slingshot_SlingshotState.hpp"
// Including type: Slingshot/SlingshotActions
#include "GlobalNamespace/Slingshot_SlingshotActions.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: SlingshotProjectile
#include "GlobalNamespace/SlingshotProjectile.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
// Including type: RoomSystem/ProjectileSource
#include "GlobalNamespace/RoomSystem_ProjectileSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LineRenderer elasticLeft
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::Slingshot::dyn_elasticLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_elasticLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elasticLeft"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LineRenderer elasticRight
[[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& GlobalNamespace::Slingshot::dyn_elasticRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_elasticRight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elasticRight"))->offset;
  return *reinterpret_cast<::UnityEngine::LineRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftArm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Slingshot::dyn_leftArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_leftArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftArm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightArm
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Slingshot::dyn_rightArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_rightArm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightArm"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform center
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Slingshot::dyn_center() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_center");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "center"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform centerOrigin
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Slingshot::dyn_centerOrigin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_centerOrigin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "centerOrigin"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject dummyProjectile
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::Slingshot::dyn_dummyProjectile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_dummyProjectile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dummyProjectile"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject drawingHand
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::Slingshot::dyn_drawingHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_drawingHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drawingHand"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject projectilePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::Slingshot::dyn_projectilePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_projectilePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectilePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject projectileTrail
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::Slingshot::dyn_projectileTrail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_projectileTrail");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectileTrail"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InteractionPoint nock
[[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& GlobalNamespace::Slingshot::dyn_nock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_nock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nock"))->offset;
  return *reinterpret_cast<::GlobalNamespace::InteractionPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public InteractionPoint grip
[[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& GlobalNamespace::Slingshot::dyn_grip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_grip");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grip"))->offset;
  return *reinterpret_cast<::GlobalNamespace::InteractionPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single springConstant
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Slingshot::dyn_springConstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_springConstant");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "springConstant"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxDraw
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Slingshot::dyn_maxDraw() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_maxDraw");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDraw"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftHandSnap
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Slingshot::dyn_leftHandSnap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_leftHandSnap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandSnap"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String _leftHandSnap_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::Slingshot::dyn__leftHandSnap_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn__leftHandSnap_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftHandSnap_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightHandSnap
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::Slingshot::dyn_rightHandSnap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_rightHandSnap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandSnap"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String _rightHandSnap_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::Slingshot::dyn__rightHandSnap_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn__rightHandSnap_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightHandSnap_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] shootSfxClips
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::Slingshot::dyn_shootSfxClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_shootSfxClips");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shootSfxClips"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource shootSfx
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::Slingshot::dyn_shootSfx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_shootSfx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shootSfx"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean disableWhenNotInRoom
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Slingshot::dyn_disableWhenNotInRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_disableWhenNotInRoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disableWhenNotInRoom"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean hasDummyProjectile
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Slingshot::dyn_hasDummyProjectile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_hasDummyProjectile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hasDummyProjectile"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single delayLaunchTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Slingshot::dyn_delayLaunchTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_delayLaunchTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "delayLaunchTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single minTimeToLaunch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Slingshot::dyn_minTimeToLaunch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_minTimeToLaunch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minTimeToLaunch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single dummyProjectileColliderRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Slingshot::dyn_dummyProjectileColliderRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_dummyProjectileColliderRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dummyProjectileColliderRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single dummyProjectileInitialScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Slingshot::dyn_dummyProjectileInitialScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_dummyProjectileInitialScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dummyProjectileInitialScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 projectileCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Slingshot::dyn_projectileCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_projectileCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectileCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] elasticLeftPoints
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::Slingshot::dyn_elasticLeftPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_elasticLeftPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elasticLeftPoints"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3[] elasticRightPoints
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& GlobalNamespace::Slingshot::dyn_elasticRightPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_elasticRightPoints");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elasticRightPoints"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single _elasticIntialWidthMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::Slingshot::dyn__elasticIntialWidthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn__elasticIntialWidthMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_elasticIntialWidthMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Int32,SlingshotProjectile> activeProjectiles
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::SlingshotProjectile*>*& GlobalNamespace::Slingshot::dyn_activeProjectiles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::dyn_activeProjectiles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activeProjectiles"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::SlingshotProjectile*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Slingshot.DestroyDummyProjectile
void GlobalNamespace::Slingshot::DestroyDummyProjectile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::DestroyDummyProjectile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyDummyProjectile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.IsSlingShotEnabled
bool GlobalNamespace::Slingshot::IsSlingShotEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::IsSlingShotEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Slingshot", "IsSlingShotEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Slingshot.GetIsOnTeams
void GlobalNamespace::Slingshot::GetIsOnTeams(ByRef<bool> blueTeam, ByRef<bool> orangeTeam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::GetIsOnTeams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIsOnTeams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(blueTeam), byref(orangeTeam));
}
// Autogenerated method: Slingshot.AttachTrail
void GlobalNamespace::Slingshot::AttachTrail(int trailHash, ::UnityEngine::GameObject* newProjectile, ::UnityEngine::Vector3 location, bool blueTeam, bool orangeTeam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::AttachTrail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachTrail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trailHash), ::il2cpp_utils::ExtractType(newProjectile), ::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(blueTeam), ::il2cpp_utils::ExtractType(orangeTeam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, trailHash, newProjectile, location, blueTeam, orangeTeam);
}
// Autogenerated method: Slingshot.PlayLaunchSfx
void GlobalNamespace::Slingshot::PlayLaunchSfx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::PlayLaunchSfx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayLaunchSfx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.LaunchProjectile
void GlobalNamespace::Slingshot::LaunchProjectile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::LaunchProjectile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchProjectile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.LaunchNetworkedProjectile
void GlobalNamespace::Slingshot::LaunchNetworkedProjectile(::UnityEngine::Vector3 location, ::UnityEngine::Vector3 velocity, ::GlobalNamespace::RoomSystem::ProjectileSource projectileSource, int projectileCounter, float scale, bool shouldOverrideColor, ::UnityEngine::Color color, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::LaunchNetworkedProjectile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchNetworkedProjectile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location), ::il2cpp_utils::ExtractType(velocity), ::il2cpp_utils::ExtractType(projectileSource), ::il2cpp_utils::ExtractType(projectileCounter), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(shouldOverrideColor), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, location, velocity, projectileSource, projectileCounter, scale, shouldOverrideColor, color, info);
}
// Autogenerated method: Slingshot.DestroyProjectile
void GlobalNamespace::Slingshot::DestroyProjectile(int projectileCount, ::UnityEngine::Vector3 worldPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::DestroyProjectile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyProjectile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(projectileCount), ::il2cpp_utils::ExtractType(worldPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectileCount, worldPosition);
}
// Autogenerated method: Slingshot.ForLeftHandSlingshot
bool GlobalNamespace::Slingshot::ForLeftHandSlingshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::ForLeftHandSlingshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForLeftHandSlingshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.InDrawingState
bool GlobalNamespace::Slingshot::InDrawingState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::InDrawingState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InDrawingState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.Awake
void GlobalNamespace::Slingshot::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 72));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.OnSpawn
void GlobalNamespace::Slingshot::OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 73));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.OnEnable
void GlobalNamespace::Slingshot::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.OnDisable
void GlobalNamespace::Slingshot::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.LateUpdateShared
void GlobalNamespace::Slingshot::LateUpdateShared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::LateUpdateShared");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 86));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.LateUpdateLocal
void GlobalNamespace::Slingshot::LateUpdateLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::LateUpdateLocal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 90));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.LateUpdateReplicated
void GlobalNamespace::Slingshot::LateUpdateReplicated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::LateUpdateReplicated");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 91));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.OnGrab
void GlobalNamespace::Slingshot::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: Slingshot.OnRelease
bool GlobalNamespace::Slingshot::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated method: Slingshot.DropItemCleanup
void GlobalNamespace::Slingshot::DropItemCleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::DropItemCleanup");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 60));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Slingshot.AutoGrabTrue
bool GlobalNamespace::Slingshot::AutoGrabTrue(bool leftGrabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::AutoGrabTrue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::TransferrableObject*), 95));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, leftGrabbingHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Slingshot/SlingshotState
#include "GlobalNamespace/Slingshot_SlingshotState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Slingshot/SlingshotState NoState
::GlobalNamespace::Slingshot::SlingshotState GlobalNamespace::Slingshot::SlingshotState::_get_NoState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::_get_NoState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Slingshot::SlingshotState>("", "Slingshot/SlingshotState", "NoState"));
}
// Autogenerated static field setter
// Set static field: static public Slingshot/SlingshotState NoState
void GlobalNamespace::Slingshot::SlingshotState::_set_NoState(::GlobalNamespace::Slingshot::SlingshotState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::_set_NoState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Slingshot/SlingshotState", "NoState", value));
}
// Autogenerated static field getter
// Get static field: static public Slingshot/SlingshotState OnChest
::GlobalNamespace::Slingshot::SlingshotState GlobalNamespace::Slingshot::SlingshotState::_get_OnChest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::_get_OnChest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Slingshot::SlingshotState>("", "Slingshot/SlingshotState", "OnChest"));
}
// Autogenerated static field setter
// Set static field: static public Slingshot/SlingshotState OnChest
void GlobalNamespace::Slingshot::SlingshotState::_set_OnChest(::GlobalNamespace::Slingshot::SlingshotState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::_set_OnChest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Slingshot/SlingshotState", "OnChest", value));
}
// Autogenerated static field getter
// Get static field: static public Slingshot/SlingshotState LeftHandDrawing
::GlobalNamespace::Slingshot::SlingshotState GlobalNamespace::Slingshot::SlingshotState::_get_LeftHandDrawing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::_get_LeftHandDrawing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Slingshot::SlingshotState>("", "Slingshot/SlingshotState", "LeftHandDrawing"));
}
// Autogenerated static field setter
// Set static field: static public Slingshot/SlingshotState LeftHandDrawing
void GlobalNamespace::Slingshot::SlingshotState::_set_LeftHandDrawing(::GlobalNamespace::Slingshot::SlingshotState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::_set_LeftHandDrawing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Slingshot/SlingshotState", "LeftHandDrawing", value));
}
// Autogenerated static field getter
// Get static field: static public Slingshot/SlingshotState RightHandDrawing
::GlobalNamespace::Slingshot::SlingshotState GlobalNamespace::Slingshot::SlingshotState::_get_RightHandDrawing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::_get_RightHandDrawing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Slingshot::SlingshotState>("", "Slingshot/SlingshotState", "RightHandDrawing"));
}
// Autogenerated static field setter
// Set static field: static public Slingshot/SlingshotState RightHandDrawing
void GlobalNamespace::Slingshot::SlingshotState::_set_RightHandDrawing(::GlobalNamespace::Slingshot::SlingshotState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::_set_RightHandDrawing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Slingshot/SlingshotState", "RightHandDrawing", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Slingshot::SlingshotState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Slingshot/SlingshotActions
#include "GlobalNamespace/Slingshot_SlingshotActions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Slingshot/SlingshotActions Grab
::GlobalNamespace::Slingshot::SlingshotActions GlobalNamespace::Slingshot::SlingshotActions::_get_Grab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotActions::_get_Grab");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Slingshot::SlingshotActions>("", "Slingshot/SlingshotActions", "Grab"));
}
// Autogenerated static field setter
// Set static field: static public Slingshot/SlingshotActions Grab
void GlobalNamespace::Slingshot::SlingshotActions::_set_Grab(::GlobalNamespace::Slingshot::SlingshotActions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotActions::_set_Grab");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Slingshot/SlingshotActions", "Grab", value));
}
// Autogenerated static field getter
// Get static field: static public Slingshot/SlingshotActions Release
::GlobalNamespace::Slingshot::SlingshotActions GlobalNamespace::Slingshot::SlingshotActions::_get_Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotActions::_get_Release");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::Slingshot::SlingshotActions>("", "Slingshot/SlingshotActions", "Release"));
}
// Autogenerated static field setter
// Set static field: static public Slingshot/SlingshotActions Release
void GlobalNamespace::Slingshot::SlingshotActions::_set_Release(::GlobalNamespace::Slingshot::SlingshotActions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotActions::_set_Release");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Slingshot/SlingshotActions", "Release", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Slingshot::SlingshotActions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Slingshot::SlingshotActions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotLifeIndicator
#include "GlobalNamespace/SlingshotLifeIndicator.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: GorillaBattleManager
#include "GlobalNamespace/GorillaBattleManager.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::SlingshotLifeIndicator::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaBattleManager bMgr
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaBattleManager*& GlobalNamespace::SlingshotLifeIndicator::dyn_bMgr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::dyn_bMgr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bMgr"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaBattleManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean checkedBattle
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SlingshotLifeIndicator::dyn_checkedBattle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::dyn_checkedBattle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "checkedBattle"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean inBattle
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SlingshotLifeIndicator::dyn_inBattle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::dyn_inBattle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inBattle"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject indicator1
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SlingshotLifeIndicator::dyn_indicator1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::dyn_indicator1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indicator1"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject indicator2
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SlingshotLifeIndicator::dyn_indicator2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::dyn_indicator2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indicator2"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject indicator3
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SlingshotLifeIndicator::dyn_indicator3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::dyn_indicator3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "indicator3"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SlingshotLifeIndicator::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GorillaTag.ISpawnable.IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SlingshotLifeIndicator.GorillaTag.ISpawnable.get_IsSpawned
bool GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::GorillaTag.ISpawnable.get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotLifeIndicator*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotLifeIndicator.GorillaTag.ISpawnable.set_IsSpawned
void GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::GorillaTag.ISpawnable.set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotLifeIndicator*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotLifeIndicator.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotLifeIndicator*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotLifeIndicator.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::SlingshotLifeIndicator::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotLifeIndicator*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotLifeIndicator.OnEnable
void GlobalNamespace::SlingshotLifeIndicator::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotLifeIndicator.OnDisable
void GlobalNamespace::SlingshotLifeIndicator::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotLifeIndicator.SetActive
void GlobalNamespace::SlingshotLifeIndicator::SetActive(::UnityEngine::GameObject* obj, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(active)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, active);
}
// Autogenerated method: SlingshotLifeIndicator.LateUpdate
void GlobalNamespace::SlingshotLifeIndicator::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotLifeIndicator.OnLeftRoom
void GlobalNamespace::SlingshotLifeIndicator::OnLeftRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::OnLeftRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnLeftRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotLifeIndicator.Reset
void GlobalNamespace::SlingshotLifeIndicator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotLifeIndicator::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotProjectile
#include "GlobalNamespace/SlingshotProjectile.hpp"
// Including type: SlingshotProjectile/ProjectileHitEvent
#include "GlobalNamespace/SlingshotProjectile_ProjectileHitEvent.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.ConstantForce
#include "UnityEngine/ConstantForce.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
// Including type: GorillaTag.Reactions.SpawnWorldEffects
#include "GorillaTag/Reactions/SpawnWorldEffects.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single debugCollisionRadius
float GlobalNamespace::SlingshotProjectile::_get_debugCollisionRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::_get_debugCollisionRadius");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SlingshotProjectile", "debugCollisionRadius"));
}
// Autogenerated static field setter
// Set static field: static private System.Single debugCollisionRadius
void GlobalNamespace::SlingshotProjectile::_set_debugCollisionRadius(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::_set_debugCollisionRadius");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SlingshotProjectile", "debugCollisionRadius", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 colorShaderProp
int GlobalNamespace::SlingshotProjectile::_get_colorShaderProp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::_get_colorShaderProp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SlingshotProjectile", "colorShaderProp"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 colorShaderProp
void GlobalNamespace::SlingshotProjectile::_set_colorShaderProp(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::_set_colorShaderProp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SlingshotProjectile", "colorShaderProp", value));
}
// Autogenerated instance field getter
// Get instance field: public Photon.Realtime.Player projectileOwner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::SlingshotProjectile::dyn_projectileOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_projectileOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectileOwner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject surfaceImpactEffectPrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SlingshotProjectile::dyn_surfaceImpactEffectPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_surfaceImpactEffectPrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "surfaceImpactEffectPrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single impactEffectOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SlingshotProjectile::dyn_impactEffectOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_impactEffectOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "impactEffectOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lifeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SlingshotProjectile::dyn_lifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_lifeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lifeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color defaultColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SlingshotProjectile::dyn_defaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_defaultColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color orangeColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SlingshotProjectile::dyn_orangeColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_orangeColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orangeColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color blueColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SlingshotProjectile::dyn_blueColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_blueColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blueColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer defaultBall
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::SlingshotProjectile::dyn_defaultBall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_defaultBall");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultBall"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer orangeBall
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::SlingshotProjectile::dyn_orangeBall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_orangeBall");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orangeBall"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer blueBall
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::SlingshotProjectile::dyn_blueBall() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_blueBall");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blueBall"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean colorizeBalls
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SlingshotProjectile::dyn_colorizeBalls() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_colorizeBalls");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorizeBalls"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean faceDirectionOfTravel
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SlingshotProjectile::dyn_faceDirectionOfTravel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_faceDirectionOfTravel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "faceDirectionOfTravel"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean particleLaunched
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::SlingshotProjectile::dyn_particleLaunched() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_particleLaunched");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "particleLaunched"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeCreated
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SlingshotProjectile::dyn_timeCreated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_timeCreated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeCreated"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody projectileRigidbody
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::SlingshotProjectile::dyn_projectileRigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_projectileRigidbody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectileRigidbody"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color teamColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SlingshotProjectile::dyn_teamColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_teamColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teamColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer teamRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::SlingshotProjectile::dyn_teamRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_teamRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teamRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 myProjectileCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::SlingshotProjectile::dyn_myProjectileCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_myProjectileCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myProjectileCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SlingshotProjectile::dyn_initialScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_initialScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 previousPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::SlingshotProjectile::dyn_previousPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_previousPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ConstantForce forceComponent
[[deprecated("Use field access instead!")]] ::UnityEngine::ConstantForce*& GlobalNamespace::SlingshotProjectile::dyn_forceComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_forceComponent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "forceComponent"))->offset;
  return *reinterpret_cast<::UnityEngine::ConstantForce**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SlingshotProjectile/ProjectileHitEvent OnHitPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent*& GlobalNamespace::SlingshotProjectile::dyn_OnHitPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_OnHitPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnHitPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MaterialPropertyBlock matPropBlock
[[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& GlobalNamespace::SlingshotProjectile::dyn_matPropBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_matPropBlock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "matPropBlock"))->offset;
  return *reinterpret_cast<::UnityEngine::MaterialPropertyBlock**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTag.Reactions.SpawnWorldEffects spawnWorldEffects
[[deprecated("Use field access instead!")]] ::GorillaTag::Reactions::SpawnWorldEffects*& GlobalNamespace::SlingshotProjectile::dyn_spawnWorldEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::dyn_spawnWorldEffects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spawnWorldEffects"))->offset;
  return *reinterpret_cast<::GorillaTag::Reactions::SpawnWorldEffects**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SlingshotProjectile.add_OnHitPlayer
void GlobalNamespace::SlingshotProjectile::add_OnHitPlayer(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::add_OnHitPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnHitPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectile.remove_OnHitPlayer
void GlobalNamespace::SlingshotProjectile::remove_OnHitPlayer(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::remove_OnHitPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnHitPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectile.get_Radius
float GlobalNamespace::SlingshotProjectile::get_Radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::get_Radius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SlingshotProjectile", "get_Radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SlingshotProjectile.Launch
void GlobalNamespace::SlingshotProjectile::Launch(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity, ::Photon::Realtime::Player* player, bool blueTeam, bool orangeTeam, int projectileCount, float scale, bool shouldOverrideColor, ::UnityEngine::Color32 overrideColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::Launch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Launch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(velocity), ::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(blueTeam), ::il2cpp_utils::ExtractType(orangeTeam), ::il2cpp_utils::ExtractType(projectileCount), ::il2cpp_utils::ExtractType(scale), ::il2cpp_utils::ExtractType(shouldOverrideColor), ::il2cpp_utils::ExtractType(overrideColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, velocity, player, blueTeam, orangeTeam, projectileCount, scale, shouldOverrideColor, overrideColor);
}
// Autogenerated method: SlingshotProjectile.Awake
void GlobalNamespace::SlingshotProjectile::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectile.Deactivate
void GlobalNamespace::SlingshotProjectile::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::Deactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectile.SpawnImpactEffect
void GlobalNamespace::SlingshotProjectile::SpawnImpactEffect(::UnityEngine::GameObject* prefab, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::SpawnImpactEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnImpactEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(normal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, prefab, position, normal);
}
// Autogenerated method: SlingshotProjectile.ApplyTeamModelAndColor
void GlobalNamespace::SlingshotProjectile::ApplyTeamModelAndColor(bool blueTeam, bool orangeTeam, bool shouldOverrideColor, ::UnityEngine::Color overrideColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::ApplyTeamModelAndColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTeamModelAndColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(blueTeam), ::il2cpp_utils::ExtractType(orangeTeam), ::il2cpp_utils::ExtractType(shouldOverrideColor), ::il2cpp_utils::ExtractType(overrideColor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, blueTeam, orangeTeam, shouldOverrideColor, overrideColor);
}
// Autogenerated method: SlingshotProjectile.OnEnable
void GlobalNamespace::SlingshotProjectile::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectile.OnDisable
void GlobalNamespace::SlingshotProjectile::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectile.InvokeUpdate
void GlobalNamespace::SlingshotProjectile::InvokeUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::InvokeUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectile.OnCollisionEnter
void GlobalNamespace::SlingshotProjectile::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: SlingshotProjectile.OnCollisionStay
void GlobalNamespace::SlingshotProjectile::OnCollisionStay(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::OnCollisionStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: SlingshotProjectile.OnTriggerExit
void GlobalNamespace::SlingshotProjectile::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: SlingshotProjectile.OnTriggerEnter
void GlobalNamespace::SlingshotProjectile::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: SlingshotProjectile.ApplyColor
void GlobalNamespace::SlingshotProjectile::ApplyColor(::UnityEngine::Renderer* rend, ::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::ApplyColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rend), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rend, color);
}
// Autogenerated method: SlingshotProjectile..cctor
void GlobalNamespace::SlingshotProjectile::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SlingshotProjectile", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SlingshotProjectile/ProjectileHitEvent
#include "GlobalNamespace/SlingshotProjectile_ProjectileHitEvent.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SlingshotProjectile/ProjectileHitEvent.Invoke
void GlobalNamespace::SlingshotProjectile::ProjectileHitEvent::Invoke(::Photon::Realtime::Player* hitPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hitPlayer);
}
// Autogenerated method: SlingshotProjectile/ProjectileHitEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::SlingshotProjectile::ProjectileHitEvent::BeginInvoke(::Photon::Realtime::Player* hitPlayer, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, hitPlayer, callback, object);
}
// Autogenerated method: SlingshotProjectile/ProjectileHitEvent.EndInvoke
void GlobalNamespace::SlingshotProjectile::ProjectileHitEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectile::ProjectileHitEvent*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotProjectileHitNotifier
#include "GlobalNamespace/SlingshotProjectileHitNotifier.hpp"
// Including type: SlingshotProjectileHitNotifier/ProjectileHitEvent
#include "GlobalNamespace/SlingshotProjectileHitNotifier_ProjectileHitEvent.hpp"
// Including type: SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent
#include "GlobalNamespace/SlingshotProjectileHitNotifier_PaperPlaneProjectileHitEvent.hpp"
// Including type: SlingshotProjectileHitNotifier/ProjectileTriggerEvent
#include "GlobalNamespace/SlingshotProjectileHitNotifier_ProjectileTriggerEvent.hpp"
// Including type: SlingshotProjectile
#include "GlobalNamespace/SlingshotProjectile.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: PaperPlaneProjectile
#include "GlobalNamespace/PaperPlaneProjectile.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private SlingshotProjectileHitNotifier/ProjectileHitEvent OnProjectileHit
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*& GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnProjectileHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnProjectileHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnProjectileHit"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent OnPaperPlaneHit
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent*& GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnPaperPlaneHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnPaperPlaneHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnPaperPlaneHit"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SlingshotProjectileHitNotifier/ProjectileHitEvent OnProjectileCollisionStay
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*& GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnProjectileCollisionStay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnProjectileCollisionStay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnProjectileCollisionStay"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SlingshotProjectileHitNotifier/ProjectileTriggerEvent OnProjectileTriggerEnter
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*& GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnProjectileTriggerEnter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnProjectileTriggerEnter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnProjectileTriggerEnter"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private SlingshotProjectileHitNotifier/ProjectileTriggerEvent OnProjectileTriggerExit
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*& GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnProjectileTriggerExit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::dyn_OnProjectileTriggerExit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnProjectileTriggerExit"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SlingshotProjectileHitNotifier.add_OnProjectileHit
void GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileHit(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnProjectileHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.remove_OnProjectileHit
void GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileHit(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnProjectileHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.add_OnPaperPlaneHit
void GlobalNamespace::SlingshotProjectileHitNotifier::add_OnPaperPlaneHit(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::add_OnPaperPlaneHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnPaperPlaneHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.remove_OnPaperPlaneHit
void GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnPaperPlaneHit(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnPaperPlaneHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnPaperPlaneHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.add_OnProjectileCollisionStay
void GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileCollisionStay(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileCollisionStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnProjectileCollisionStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.remove_OnProjectileCollisionStay
void GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileCollisionStay(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileCollisionStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnProjectileCollisionStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.add_OnProjectileTriggerEnter
void GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileTriggerEnter(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnProjectileTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.remove_OnProjectileTriggerEnter
void GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileTriggerEnter(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnProjectileTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.add_OnProjectileTriggerExit
void GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileTriggerExit(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnProjectileTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.remove_OnProjectileTriggerExit
void GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileTriggerExit(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnProjectileTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SlingshotProjectileHitNotifier.InvokeHit
void GlobalNamespace::SlingshotProjectileHitNotifier::InvokeHit(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::InvokeHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(projectile), ::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collision);
}
// Autogenerated method: SlingshotProjectileHitNotifier.InvokeHit
void GlobalNamespace::SlingshotProjectileHitNotifier::InvokeHit(::GlobalNamespace::PaperPlaneProjectile* projectile, ::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::InvokeHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(projectile), ::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collider);
}
// Autogenerated method: SlingshotProjectileHitNotifier.InvokeCollisionStay
void GlobalNamespace::SlingshotProjectileHitNotifier::InvokeCollisionStay(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::InvokeCollisionStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeCollisionStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(projectile), ::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collision);
}
// Autogenerated method: SlingshotProjectileHitNotifier.InvokeTriggerEnter
void GlobalNamespace::SlingshotProjectileHitNotifier::InvokeTriggerEnter(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::InvokeTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(projectile), ::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collider);
}
// Autogenerated method: SlingshotProjectileHitNotifier.InvokeTriggerExit
void GlobalNamespace::SlingshotProjectileHitNotifier::InvokeTriggerExit(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::InvokeTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(projectile), ::il2cpp_utils::ExtractType(collider)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collider);
}
// Autogenerated method: SlingshotProjectileHitNotifier.OnDestroy
void GlobalNamespace::SlingshotProjectileHitNotifier::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SlingshotProjectileHitNotifier/ProjectileHitEvent
#include "GlobalNamespace/SlingshotProjectileHitNotifier_ProjectileHitEvent.hpp"
// Including type: SlingshotProjectile
#include "GlobalNamespace/SlingshotProjectile.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SlingshotProjectileHitNotifier/ProjectileHitEvent.Invoke
void GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent::Invoke(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collision);
}
// Autogenerated method: SlingshotProjectileHitNotifier/ProjectileHitEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent::BeginInvoke(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, projectile, collision, callback, object);
}
// Autogenerated method: SlingshotProjectileHitNotifier/ProjectileHitEvent.EndInvoke
void GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent
#include "GlobalNamespace/SlingshotProjectileHitNotifier_PaperPlaneProjectileHitEvent.hpp"
// Including type: PaperPlaneProjectile
#include "GlobalNamespace/PaperPlaneProjectile.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent.Invoke
void GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent::Invoke(::GlobalNamespace::PaperPlaneProjectile* projectile, ::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collider);
}
// Autogenerated method: SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent::BeginInvoke(::GlobalNamespace::PaperPlaneProjectile* projectile, ::UnityEngine::Collider* collider, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, projectile, collider, callback, object);
}
// Autogenerated method: SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent.EndInvoke
void GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: SlingshotProjectileHitNotifier/ProjectileTriggerEvent
#include "GlobalNamespace/SlingshotProjectileHitNotifier_ProjectileTriggerEvent.hpp"
// Including type: SlingshotProjectile
#include "GlobalNamespace/SlingshotProjectile.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SlingshotProjectileHitNotifier/ProjectileTriggerEvent.Invoke
void GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent::Invoke(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, projectile, collider);
}
// Autogenerated method: SlingshotProjectileHitNotifier/ProjectileTriggerEvent.BeginInvoke
::System::IAsyncResult* GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent::BeginInvoke(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, projectile, collider, callback, object);
}
// Autogenerated method: SlingshotProjectileHitNotifier/ProjectileTriggerEvent.EndInvoke
void GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotProjectileManager
#include "GlobalNamespace/SlingshotProjectileManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SlingshotProjectile
#include "GlobalNamespace/SlingshotProjectile.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SlingshotProjectileManager instance
::GlobalNamespace::SlingshotProjectileManager* GlobalNamespace::SlingshotProjectileManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::SlingshotProjectileManager*>("", "SlingshotProjectileManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public SlingshotProjectileManager instance
void GlobalNamespace::SlingshotProjectileManager::_set_instance(::GlobalNamespace::SlingshotProjectileManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SlingshotProjectileManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::SlingshotProjectileManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SlingshotProjectileManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::SlingshotProjectileManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SlingshotProjectileManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.List`1<SlingshotProjectile> allsP
::System::Collections::Generic::List_1<::GlobalNamespace::SlingshotProjectile*>* GlobalNamespace::SlingshotProjectileManager::_get_allsP() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::_get_allsP");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::SlingshotProjectile*>*>("", "SlingshotProjectileManager", "allsP"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.List`1<SlingshotProjectile> allsP
void GlobalNamespace::SlingshotProjectileManager::_set_allsP(::System::Collections::Generic::List_1<::GlobalNamespace::SlingshotProjectile*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::_set_allsP");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SlingshotProjectileManager", "allsP", value));
}
// Autogenerated method: SlingshotProjectileManager.Awake
void GlobalNamespace::SlingshotProjectileManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectileManager.CreateManager
void GlobalNamespace::SlingshotProjectileManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SlingshotProjectileManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: SlingshotProjectileManager.SetInstance
void GlobalNamespace::SlingshotProjectileManager::SetInstance(::GlobalNamespace::SlingshotProjectileManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SlingshotProjectileManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: SlingshotProjectileManager.RegisterSP
void GlobalNamespace::SlingshotProjectileManager::RegisterSP(::GlobalNamespace::SlingshotProjectile* sP) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::RegisterSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SlingshotProjectileManager", "RegisterSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sP)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sP);
}
// Autogenerated method: SlingshotProjectileManager.UnregisterSP
void GlobalNamespace::SlingshotProjectileManager::UnregisterSP(::GlobalNamespace::SlingshotProjectile* sP) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::UnregisterSP");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SlingshotProjectileManager", "UnregisterSP", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sP)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sP);
}
// Autogenerated method: SlingshotProjectileManager.Update
void GlobalNamespace::SlingshotProjectileManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectileManager..cctor
void GlobalNamespace::SlingshotProjectileManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SlingshotProjectileManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotProjectileTrail
#include "GlobalNamespace/SlingshotProjectileTrail.hpp"
// Including type: UnityEngine.TrailRenderer
#include "UnityEngine/TrailRenderer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TrailRenderer trailRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::TrailRenderer*& GlobalNamespace::SlingshotProjectileTrail::dyn_trailRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_trailRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trailRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::TrailRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color defaultColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SlingshotProjectileTrail::dyn_defaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_defaultColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color orangeColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SlingshotProjectileTrail::dyn_orangeColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_orangeColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "orangeColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color blueColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::SlingshotProjectileTrail::dyn_blueColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_blueColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blueColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject followObject
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SlingshotProjectileTrail::dyn_followObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_followObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "followObject"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform followXform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::SlingshotProjectileTrail::dyn_followXform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_followXform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "followXform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeToDie
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SlingshotProjectileTrail::dyn_timeToDie() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_timeToDie");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeToDie"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SlingshotProjectileTrail::dyn_initialScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_initialScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single initialWidthMultiplier
[[deprecated("Use field access instead!")]] float& GlobalNamespace::SlingshotProjectileTrail::dyn_initialWidthMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::dyn_initialWidthMultiplier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialWidthMultiplier"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: SlingshotProjectileTrail.Awake
void GlobalNamespace::SlingshotProjectileTrail::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectileTrail.AttachTrail
void GlobalNamespace::SlingshotProjectileTrail::AttachTrail(::UnityEngine::GameObject* obj, bool blueTeam, bool redTeam) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::AttachTrail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachTrail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(blueTeam), ::il2cpp_utils::ExtractType(redTeam)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, blueTeam, redTeam);
}
// Autogenerated method: SlingshotProjectileTrail.LateUpdate
void GlobalNamespace::SlingshotProjectileTrail::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SlingshotProjectileTrail.SetColor
void GlobalNamespace::SlingshotProjectileTrail::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileTrail::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotTester
#include "GlobalNamespace/SlingshotTester.hpp"
// Including type: SlingshotTestScenario
#include "GlobalNamespace/SlingshotTestScenario.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public SlingshotTestScenario currentScenario
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotTestScenario*& GlobalNamespace::SlingshotTester::dyn_currentScenario() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTester::dyn_currentScenario");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentScenario"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SlingshotTestScenario**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SlingshotTestScenario[] scenarioList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SlingshotTestScenario*>& GlobalNamespace::SlingshotTester::dyn_scenarioList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTester::dyn_scenarioList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scenarioList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::SlingshotTestScenario*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotTestScenario
#include "GlobalNamespace/SlingshotTestScenario.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotTestScenario1
#include "GlobalNamespace/SlingshotTestScenario1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotTestScenarioBasicRightHand
#include "GlobalNamespace/SlingshotTestScenarioBasicRightHand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotTestScenarioBodyShot
#include "GlobalNamespace/SlingshotTestScenarioBodyShot.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject projectilePrefab
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SlingshotTestScenarioBodyShot::dyn_projectilePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBodyShot::dyn_projectilePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "projectilePrefab"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRig targetRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::SlingshotTestScenarioBodyShot::dyn_targetRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBodyShot::dyn_targetRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider[] targetColliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::SlingshotTestScenarioBodyShot::dyn_targetColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBodyShot::dyn_targetColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetColliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject anchor
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::SlingshotTestScenarioBodyShot::dyn_anchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBodyShot::dyn_anchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchor"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotTestScenarioBothHolding
#include "GlobalNamespace/SlingshotTestScenarioBothHolding.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public TransferrableObject testObject1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::SlingshotTestScenarioBothHolding::dyn_testObject1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBothHolding::dyn_testObject1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testObject1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject testObject2
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::SlingshotTestScenarioBothHolding::dyn_testObject2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBothHolding::dyn_testObject2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testObject2"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotTestScenarioBothHolding2
#include "GlobalNamespace/SlingshotTestScenarioBothHolding2.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public TransferrableObject testObject1
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::SlingshotTestScenarioBothHolding2::dyn_testObject1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBothHolding2::dyn_testObject1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testObject1"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject testObject2
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::SlingshotTestScenarioBothHolding2::dyn_testObject2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioBothHolding2::dyn_testObject2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testObject2"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: SlingshotTestScenarioTransferrable
#include "GlobalNamespace/SlingshotTestScenarioTransferrable.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public TransferrableObject testObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::SlingshotTestScenarioTransferrable::dyn_testObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotTestScenarioTransferrable::dyn_testObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "testObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: WorldTargetItem
#include "GlobalNamespace/WorldTargetItem.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly Photon.Realtime.Player owner
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::WorldTargetItem::dyn_owner() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::dyn_owner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "owner"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 itemIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::WorldTargetItem::dyn_itemIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::dyn_itemIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly UnityEngine.Transform targetObject
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::WorldTargetItem::dyn_targetObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::dyn_targetObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetObject"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly TransferrableObject transferrableObject
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject*& GlobalNamespace::WorldTargetItem::dyn_transferrableObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::dyn_transferrableObject");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transferrableObject"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WorldTargetItem.IsValid
bool GlobalNamespace::WorldTargetItem::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: WorldTargetItem.GenerateTargetFromPlayerAndID
::GlobalNamespace::WorldTargetItem* GlobalNamespace::WorldTargetItem::GenerateTargetFromPlayerAndID(::Photon::Realtime::Player* owner, int itemIdx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::GenerateTargetFromPlayerAndID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "WorldTargetItem", "GenerateTargetFromPlayerAndID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner), ::il2cpp_utils::ExtractType(itemIdx)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::WorldTargetItem*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, owner, itemIdx);
}
// Autogenerated method: WorldTargetItem.GenerateTargetFromWorldSharableItem
::GlobalNamespace::WorldTargetItem* GlobalNamespace::WorldTargetItem::GenerateTargetFromWorldSharableItem(::Photon::Realtime::Player* owner, int itemIdx, ::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::GenerateTargetFromWorldSharableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "WorldTargetItem", "GenerateTargetFromWorldSharableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner), ::il2cpp_utils::ExtractType(itemIdx), ::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::WorldTargetItem*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, owner, itemIdx, transform);
}
// Autogenerated method: WorldTargetItem.ToString
::StringW GlobalNamespace::WorldTargetItem::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldTargetItem::ToString");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), 3));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WorldShareableItem
#include "GlobalNamespace/WorldShareableItem.hpp"
// Including type: WorldShareableItem/Delegate
#include "GlobalNamespace/WorldShareableItem_Delegate.hpp"
// Including type: WorldShareableItem/OnOwnerChangeDelegate
#include "GlobalNamespace/WorldShareableItem_OnOwnerChangeDelegate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: RequestableOwnershipGuard
#include "GlobalNamespace/RequestableOwnershipGuard.hpp"
// Including type: TransformViewTeleportSerializer
#include "GlobalNamespace/TransformViewTeleportSerializer.hpp"
// Including type: WorldTargetItem
#include "GlobalNamespace/WorldTargetItem.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TransferrableObject/PositionState <transferableObjectState>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& GlobalNamespace::WorldShareableItem::dyn_$transferableObjectState$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_$transferableObjectState$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<transferableObjectState>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::PositionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TransferrableObject/ItemStates <transferableObjectItemState>k__BackingField
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::ItemStates& GlobalNamespace::WorldShareableItem::dyn_$transferableObjectItemState$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_$transferableObjectItemState$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<transferableObjectItemState>k__BackingField"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransferrableObject::ItemStates*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean validShareable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::WorldShareableItem::dyn_validShareable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_validShareable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "validShareable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Photon.Pun.PhotonView view
[[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& GlobalNamespace::WorldShareableItem::dyn_view() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_view");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "view"))->offset;
  return *reinterpret_cast<::Photon::Pun::PhotonView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public RequestableOwnershipGuard guard
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RequestableOwnershipGuard*& GlobalNamespace::WorldShareableItem::dyn_guard() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_guard");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "guard"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RequestableOwnershipGuard**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TransformViewTeleportSerializer teleportSerializer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::TransformViewTeleportSerializer*& GlobalNamespace::WorldShareableItem::dyn_teleportSerializer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_teleportSerializer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "teleportSerializer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::TransformViewTeleportSerializer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private WorldTargetItem target
[[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldTargetItem*& GlobalNamespace::WorldShareableItem::dyn_target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_target");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "target"))->offset;
  return *reinterpret_cast<::GlobalNamespace::WorldTargetItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public WorldShareableItem/OnOwnerChangeDelegate onOwnerChangeCb
[[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate*& GlobalNamespace::WorldShareableItem::dyn_onOwnerChangeCb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_onOwnerChangeCb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onOwnerChangeCb"))->offset;
  return *reinterpret_cast<::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action rpcCallBack
[[deprecated("Use field access instead!")]] ::System::Action*& GlobalNamespace::WorldShareableItem::dyn_rpcCallBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_rpcCallBack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rpcCallBack"))->offset;
  return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean enableRemoteSync
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::WorldShareableItem::dyn_enableRemoteSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_enableRemoteSync");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enableRemoteSync"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.Dictionary`2<Photon.Realtime.Player,WorldShareableItem/CachedData> cachedDatas
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Photon::Realtime::Player*, ::GlobalNamespace::WorldShareableItem::CachedData>*& GlobalNamespace::WorldShareableItem::dyn_cachedDatas() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::dyn_cachedDatas");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedDatas"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Photon::Realtime::Player*, ::GlobalNamespace::WorldShareableItem::CachedData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: WorldShareableItem.get_transferableObjectState
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::WorldShareableItem::get_transferableObjectState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::get_transferableObjectState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transferableObjectState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TransferrableObject::PositionState, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.set_transferableObjectState
void GlobalNamespace::WorldShareableItem::set_transferableObjectState(::GlobalNamespace::TransferrableObject::PositionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::set_transferableObjectState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transferableObjectState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WorldShareableItem.get_transferableObjectItemState
::GlobalNamespace::TransferrableObject::ItemStates GlobalNamespace::WorldShareableItem::get_transferableObjectItemState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::get_transferableObjectItemState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transferableObjectItemState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TransferrableObject::ItemStates, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.set_transferableObjectItemState
void GlobalNamespace::WorldShareableItem::set_transferableObjectItemState(::GlobalNamespace::TransferrableObject::ItemStates value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::set_transferableObjectItemState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transferableObjectItemState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WorldShareableItem.get_Target
::GlobalNamespace::WorldTargetItem* GlobalNamespace::WorldShareableItem::get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::get_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::WorldTargetItem*, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.Awake
void GlobalNamespace::WorldShareableItem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.OnDestroy
void GlobalNamespace::WorldShareableItem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.SetupSharableViewIDs
void GlobalNamespace::WorldShareableItem::SetupSharableViewIDs(::Photon::Realtime::Player* player, int slotID) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::SetupSharableViewIDs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupSharableViewIDs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(slotID)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, player, slotID);
}
// Autogenerated method: WorldShareableItem.ResetViews
void GlobalNamespace::WorldShareableItem::ResetViews() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::ResetViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.SetupSharableObject
void GlobalNamespace::WorldShareableItem::SetupSharableObject(int itemIDx, ::Photon::Realtime::Player* owner, ::UnityEngine::Transform* targetXform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::SetupSharableObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupSharableObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(itemIDx), ::il2cpp_utils::ExtractType(owner), ::il2cpp_utils::ExtractType(targetXform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, itemIDx, owner, targetXform);
}
// Autogenerated method: WorldShareableItem.OnPhotonInstantiate
void GlobalNamespace::WorldShareableItem::OnPhotonInstantiate(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnPhotonInstantiate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem*), 56));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated method: WorldShareableItem.Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange
void GlobalNamespace::WorldShareableItem::Photon_Pun_IOnPhotonViewOwnerChange_OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::Photon.Pun.IOnPhotonViewOwnerChange.OnOwnerChange");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, previousOwner);
}
// Autogenerated method: WorldShareableItem.get_EnableRemoteSync
bool GlobalNamespace::WorldShareableItem::get_EnableRemoteSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::get_EnableRemoteSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EnableRemoteSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.set_EnableRemoteSync
void GlobalNamespace::WorldShareableItem::set_EnableRemoteSync(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::set_EnableRemoteSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EnableRemoteSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WorldShareableItem.TriggeredUpdate
void GlobalNamespace::WorldShareableItem::TriggeredUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::TriggeredUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggeredUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.SyncToSceneObject
void GlobalNamespace::WorldShareableItem::SyncToSceneObject(::GlobalNamespace::TransferrableObject* transferrableObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::SyncToSceneObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SyncToSceneObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transferrableObject)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, transferrableObject);
}
// Autogenerated method: WorldShareableItem.SetupSceneObjectOnNetwork
void GlobalNamespace::WorldShareableItem::SetupSceneObjectOnNetwork(::Photon::Realtime::Player* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::SetupSceneObjectOnNetwork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupSceneObjectOnNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, owner);
}
// Autogenerated method: WorldShareableItem.IsValid
bool GlobalNamespace::WorldShareableItem::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.Invalidate
void GlobalNamespace::WorldShareableItem::Invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::Invalidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invalidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.OnOwnershipTransferred
void GlobalNamespace::WorldShareableItem::OnOwnershipTransferred(::Photon::Realtime::Player* toPlayer, ::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnOwnershipTransferred");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem*), 59));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, toPlayer, fromPlayer);
}
// Autogenerated method: WorldShareableItem.Photon.Pun.IPunObservable.OnPhotonSerializeView
void GlobalNamespace::WorldShareableItem::Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::Photon.Pun.IPunObservable.OnPhotonSerializeView");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: WorldShareableItem.RPCWorldShareable
void GlobalNamespace::WorldShareableItem::RPCWorldShareable(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::RPCWorldShareable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RPCWorldShareable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated method: WorldShareableItem.OnMasterClientAssistedTakeoverRequest
bool GlobalNamespace::WorldShareableItem::OnMasterClientAssistedTakeoverRequest(::Photon::Realtime::Player* fromPlayer, ::Photon::Realtime::Player* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnMasterClientAssistedTakeoverRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem*), 62));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer, toPlayer);
}
// Autogenerated method: WorldShareableItem.OnMyCreatorLeft
void GlobalNamespace::WorldShareableItem::OnMyCreatorLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnMyCreatorLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem*), 63));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.OnOwnershipRequest
bool GlobalNamespace::WorldShareableItem::OnOwnershipRequest(::Photon::Realtime::Player* fromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnOwnershipRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem*), 60));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, fromPlayer);
}
// Autogenerated method: WorldShareableItem.OnMyOwnerLeft
void GlobalNamespace::WorldShareableItem::OnMyOwnerLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnMyOwnerLeft");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem*), 61));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.SetWillTeleport
void GlobalNamespace::WorldShareableItem::SetWillTeleport() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::SetWillTeleport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWillTeleport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.OnEnable
void GlobalNamespace::WorldShareableItem::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.OnDisable
void GlobalNamespace::WorldShareableItem::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem.OnLeftRoom
void GlobalNamespace::WorldShareableItem::OnLeftRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: WorldShareableItem/Delegate
#include "GlobalNamespace/WorldShareableItem_Delegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: WorldShareableItem/Delegate.Invoke
void GlobalNamespace::WorldShareableItem::Delegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::Delegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem::Delegate*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItem/Delegate.BeginInvoke
::System::IAsyncResult* GlobalNamespace::WorldShareableItem::Delegate::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::Delegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem::Delegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: WorldShareableItem/Delegate.EndInvoke
void GlobalNamespace::WorldShareableItem::Delegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::Delegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem::Delegate*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: WorldShareableItem/OnOwnerChangeDelegate
#include "GlobalNamespace/WorldShareableItem_OnOwnerChangeDelegate.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: WorldShareableItem/OnOwnerChangeDelegate.Invoke
void GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate::Invoke(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* prevOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newOwner, prevOwner);
}
// Autogenerated method: WorldShareableItem/OnOwnerChangeDelegate.BeginInvoke
::System::IAsyncResult* GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate::BeginInvoke(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* prevOwner, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, newOwner, prevOwner, callback, object);
}
// Autogenerated method: WorldShareableItem/OnOwnerChangeDelegate.EndInvoke
void GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::WorldShareableItem::OnOwnerChangeDelegate*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: WorldShareableItemManager
#include "GlobalNamespace/WorldShareableItemManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: WorldShareableItem
#include "GlobalNamespace/WorldShareableItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public WorldShareableItemManager instance
::GlobalNamespace::WorldShareableItemManager* GlobalNamespace::WorldShareableItemManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::WorldShareableItemManager*>("", "WorldShareableItemManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public WorldShareableItemManager instance
void GlobalNamespace::WorldShareableItemManager::_set_instance(::GlobalNamespace::WorldShareableItemManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "WorldShareableItemManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::WorldShareableItemManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "WorldShareableItemManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::WorldShareableItemManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "WorldShareableItemManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Collections.Generic.List`1<WorldShareableItem> worldShareableItems
::System::Collections::Generic::List_1<::GlobalNamespace::WorldShareableItem*>* GlobalNamespace::WorldShareableItemManager::_get_worldShareableItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::_get_worldShareableItems");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::WorldShareableItem*>*>("", "WorldShareableItemManager", "worldShareableItems"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Collections.Generic.List`1<WorldShareableItem> worldShareableItems
void GlobalNamespace::WorldShareableItemManager::_set_worldShareableItems(::System::Collections::Generic::List_1<::GlobalNamespace::WorldShareableItem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::_set_worldShareableItems");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "WorldShareableItemManager", "worldShareableItems", value));
}
// Autogenerated method: WorldShareableItemManager.Awake
void GlobalNamespace::WorldShareableItemManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItemManager.OnDestroy
void GlobalNamespace::WorldShareableItemManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItemManager.Update
void GlobalNamespace::WorldShareableItemManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WorldShareableItemManager.CreateManager
void GlobalNamespace::WorldShareableItemManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "WorldShareableItemManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: WorldShareableItemManager.SetInstance
void GlobalNamespace::WorldShareableItemManager::SetInstance(::GlobalNamespace::WorldShareableItemManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "WorldShareableItemManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: WorldShareableItemManager.Register
void GlobalNamespace::WorldShareableItemManager::Register(::GlobalNamespace::WorldShareableItem* worldShareableItem) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::Register");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "WorldShareableItemManager", "Register", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldShareableItem)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, worldShareableItem);
}
// Autogenerated method: WorldShareableItemManager.Unregister
void GlobalNamespace::WorldShareableItemManager::Unregister(::GlobalNamespace::WorldShareableItem* worldShareableItem) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::Unregister");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "WorldShareableItemManager", "Unregister", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldShareableItem)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, worldShareableItem);
}
// Autogenerated method: WorldShareableItemManager..cctor
void GlobalNamespace::WorldShareableItemManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WorldShareableItemManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "WorldShareableItemManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BitmapFont
#include "GlobalNamespace/BitmapFont.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: BitmapFont/<>c
#include "GlobalNamespace/BitmapFont_--c.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D fontImage
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::BitmapFont::dyn_fontImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::dyn_fontImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fontImage"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TextAsset fontJson
[[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& GlobalNamespace::BitmapFont::dyn_fontJson() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::dyn_fontJson");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fontJson"))->offset;
  return *reinterpret_cast<::UnityEngine::TextAsset**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 symbolPixelsPerUnit
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BitmapFont::dyn_symbolPixelsPerUnit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::dyn_symbolPixelsPerUnit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "symbolPixelsPerUnit"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String characterMap
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BitmapFont::dyn_characterMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::dyn_characterMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "characterMap"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BitmapFont/SymbolData[] symbols
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BitmapFont::SymbolData>& GlobalNamespace::BitmapFont::dyn_symbols() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::dyn_symbols");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "symbols"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BitmapFont::SymbolData>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.Dictionary`2<System.Char,BitmapFont/SymbolData> _charToSymbol
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppChar, ::GlobalNamespace::BitmapFont::SymbolData>*& GlobalNamespace::BitmapFont::dyn__charToSymbol() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::dyn__charToSymbol");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_charToSymbol"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Il2CppChar, ::GlobalNamespace::BitmapFont::SymbolData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Color[] _empty
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& GlobalNamespace::BitmapFont::dyn__empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::dyn__empty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_empty"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Color>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BitmapFont.OnEnable
void GlobalNamespace::BitmapFont::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BitmapFont.RenderToTexture
void GlobalNamespace::BitmapFont::RenderToTexture(::UnityEngine::Texture2D* target, ::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::RenderToTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderToTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, text);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BitmapFont/<>c
#include "GlobalNamespace/BitmapFont_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BitmapFont/<>c <>9
::GlobalNamespace::BitmapFont::$$c* GlobalNamespace::BitmapFont::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::BitmapFont::$$c*>("", "BitmapFont/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BitmapFont/<>c <>9
void GlobalNamespace::BitmapFont::$$c::_set_$$9(::GlobalNamespace::BitmapFont::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BitmapFont/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<BitmapFont/SymbolData,System.Char> <>9__7_0
::System::Func_2<::GlobalNamespace::BitmapFont::SymbolData, ::Il2CppChar>* GlobalNamespace::BitmapFont::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::BitmapFont::SymbolData, ::Il2CppChar>*>("", "BitmapFont/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<BitmapFont/SymbolData,System.Char> <>9__7_0
void GlobalNamespace::BitmapFont::$$c::_set_$$9__7_0(::System::Func_2<::GlobalNamespace::BitmapFont::SymbolData, ::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BitmapFont/<>c", "<>9__7_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<BitmapFont/SymbolData,BitmapFont/SymbolData> <>9__7_1
::System::Func_2<::GlobalNamespace::BitmapFont::SymbolData, ::GlobalNamespace::BitmapFont::SymbolData>* GlobalNamespace::BitmapFont::$$c::_get_$$9__7_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::_get_$$9__7_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::GlobalNamespace::BitmapFont::SymbolData, ::GlobalNamespace::BitmapFont::SymbolData>*>("", "BitmapFont/<>c", "<>9__7_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<BitmapFont/SymbolData,BitmapFont/SymbolData> <>9__7_1
void GlobalNamespace::BitmapFont::$$c::_set_$$9__7_1(::System::Func_2<::GlobalNamespace::BitmapFont::SymbolData, ::GlobalNamespace::BitmapFont::SymbolData>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::_set_$$9__7_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BitmapFont/<>c", "<>9__7_1", value)));
}
// Autogenerated method: BitmapFont/<>c..cctor
void GlobalNamespace::BitmapFont::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitmapFont/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: BitmapFont/<>c.<OnEnable>b__7_0
::Il2CppChar GlobalNamespace::BitmapFont::$$c::$OnEnable$b__7_0(::GlobalNamespace::BitmapFont::SymbolData s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::<OnEnable>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnEnable>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppChar, false>(this, ___internal__method, s);
}
// Autogenerated method: BitmapFont/<>c.<OnEnable>b__7_1
::GlobalNamespace::BitmapFont::SymbolData GlobalNamespace::BitmapFont::$$c::$OnEnable$b__7_1(::GlobalNamespace::BitmapFont::SymbolData s) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFont::$$c::<OnEnable>b__7_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnEnable>b__7_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BitmapFont::SymbolData, false>(this, ___internal__method, s);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BitmapFontText
#include "GlobalNamespace/BitmapFontText.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: BitmapFont
#include "GlobalNamespace/BitmapFont.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String text
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::BitmapFontText::dyn_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::dyn_text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "text"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean uppercaseOnly
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BitmapFontText::dyn_uppercaseOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::dyn_uppercaseOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "uppercaseOnly"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector2Int textArea
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& GlobalNamespace::BitmapFontText::dyn_textArea() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::dyn_textArea");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textArea"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector2Int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Renderer renderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::BitmapFontText::dyn_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::dyn_renderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D texture
[[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& GlobalNamespace::BitmapFontText::dyn_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::dyn_texture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "texture"))->offset;
  return *reinterpret_cast<::UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material material
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::BitmapFontText::dyn_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::dyn_material");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "material"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BitmapFont font
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BitmapFont*& GlobalNamespace::BitmapFontText::dyn_font() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::dyn_font");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "font"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BitmapFont**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BitmapFontText.Awake
void GlobalNamespace::BitmapFontText::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BitmapFontText.Render
void GlobalNamespace::BitmapFontText::Render() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::Render");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Render", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BitmapFontText.Init
void GlobalNamespace::BitmapFontText::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BitmapFontText::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CalibrationCube
#include "GlobalNamespace/CalibrationCube.hpp"
// Including type: PrimaryButtonWatcher
#include "GlobalNamespace/PrimaryButtonWatcher.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public PrimaryButtonWatcher watcher
[[deprecated("Use field access instead!")]] ::GlobalNamespace::PrimaryButtonWatcher*& GlobalNamespace::CalibrationCube::dyn_watcher() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_watcher");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "watcher"))->offset;
  return *reinterpret_cast<::GlobalNamespace::PrimaryButtonWatcher**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject rightController
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CalibrationCube::dyn_rightController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_rightController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightController"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject leftController
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CalibrationCube::dyn_leftController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_leftController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftController"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject playerBody
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CalibrationCube::dyn_playerBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_playerBody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerBody"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single calibratedLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CalibrationCube::dyn_calibratedLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_calibratedLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calibratedLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastCalibratedLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CalibrationCube::dyn_lastCalibratedLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_lastCalibratedLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastCalibratedLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CalibrationCube::dyn_minLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_minLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CalibrationCube::dyn_maxLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_maxLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single baseLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::CalibrationCube::dyn_baseLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_baseLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "baseLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] calibrationPresets
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::CalibrationCube::dyn_calibrationPresets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_calibrationPresets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calibrationPresets"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] calibrationPresetsTest
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::CalibrationCube::dyn_calibrationPresetsTest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_calibrationPresetsTest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calibrationPresetsTest"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] calibrationPresetsTest2
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::CalibrationCube::dyn_calibrationPresetsTest2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_calibrationPresetsTest2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calibrationPresetsTest2"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] calibrationPresetsTest3
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::CalibrationCube::dyn_calibrationPresetsTest3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_calibrationPresetsTest3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calibrationPresetsTest3"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] calibrationPresetsTest4
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& GlobalNamespace::CalibrationCube::dyn_calibrationPresetsTest4() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_calibrationPresetsTest4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calibrationPresetsTest4"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String outputstring
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CalibrationCube::dyn_outputstring() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_outputstring");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outputstring"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.String> stringList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& GlobalNamespace::CalibrationCube::dyn_stringList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::dyn_stringList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "stringList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CalibrationCube.Awake
void GlobalNamespace::CalibrationCube::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CalibrationCube.Start
void GlobalNamespace::CalibrationCube::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CalibrationCube.OnTriggerEnter
void GlobalNamespace::CalibrationCube::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: CalibrationCube.OnTriggerExit
void GlobalNamespace::CalibrationCube::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: CalibrationCube.RecalibrateSize
void GlobalNamespace::CalibrationCube::RecalibrateSize(bool pressed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::RecalibrateSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalibrateSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pressed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pressed);
}
// Autogenerated method: CalibrationCube.OnCollisionEnter
void GlobalNamespace::CalibrationCube::OnCollisionEnter(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated method: CalibrationCube.OnCollisionExit
void GlobalNamespace::CalibrationCube::OnCollisionExit(::UnityEngine::Collision* collision) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::OnCollisionExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collision)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collision);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: PuppetFollow
#include "GlobalNamespace/PuppetFollow.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform sourceTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PuppetFollow::dyn_sourceTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PuppetFollow::dyn_sourceTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform sourceBase
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PuppetFollow::dyn_sourceBase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PuppetFollow::dyn_sourceBase");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceBase"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform puppetBase
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::PuppetFollow::dyn_puppetBase() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PuppetFollow::dyn_puppetBase");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "puppetBase"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: PuppetFollow.FixedUpdate
void GlobalNamespace::PuppetFollow::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PuppetFollow::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransformReset
#include "GlobalNamespace/TransformReset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private TransformReset/OriginalGameObjectTransform[] transformList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>& GlobalNamespace::TransformReset::dyn_transformList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::dyn_transformList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transformList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private TransformReset/OriginalGameObjectTransform[] tempTransformList
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>& GlobalNamespace::TransformReset::dyn_tempTransformList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::dyn_tempTransformList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempTransformList"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TransformReset::OriginalGameObjectTransform>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransformReset.Awake
void GlobalNamespace::TransformReset::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransformReset.ReturnTransforms
void GlobalNamespace::TransformReset::ReturnTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::ReturnTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TransformReset.SetScale
void GlobalNamespace::TransformReset::SetScale(float ratio) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::SetScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ratio)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ratio);
}
// Autogenerated method: TransformReset.ResetTransforms
void GlobalNamespace::TransformReset::ResetTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::ResetTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: TransformReset/OriginalGameObjectTransform
#include "GlobalNamespace/TransformReset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform _thisTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::TransformReset::OriginalGameObjectTransform::dyn__thisTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::dyn__thisTransform");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thisTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 _thisPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::TransformReset::OriginalGameObjectTransform::dyn__thisPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::dyn__thisPosition");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thisPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion _thisRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::TransformReset::OriginalGameObjectTransform::dyn__thisRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::dyn__thisRotation");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thisRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: TransformReset/OriginalGameObjectTransform..ctor
GlobalNamespace::TransformReset::OriginalGameObjectTransform::OriginalGameObjectTransform(::UnityEngine::Transform* constructionTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(constructionTransform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, constructionTransform);
}
// Autogenerated method: TransformReset/OriginalGameObjectTransform.get_thisTransform
::UnityEngine::Transform* GlobalNamespace::TransformReset::OriginalGameObjectTransform::get_thisTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::get_thisTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_thisTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: TransformReset/OriginalGameObjectTransform.set_thisTransform
void GlobalNamespace::TransformReset::OriginalGameObjectTransform::set_thisTransform(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::set_thisTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_thisTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransformReset/OriginalGameObjectTransform.get_thisPosition
::UnityEngine::Vector3 GlobalNamespace::TransformReset::OriginalGameObjectTransform::get_thisPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::get_thisPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_thisPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: TransformReset/OriginalGameObjectTransform.set_thisPosition
void GlobalNamespace::TransformReset::OriginalGameObjectTransform::set_thisPosition(::UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::set_thisPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_thisPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TransformReset/OriginalGameObjectTransform.get_thisRotation
::UnityEngine::Quaternion GlobalNamespace::TransformReset::OriginalGameObjectTransform::get_thisRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::get_thisRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_thisRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: TransformReset/OriginalGameObjectTransform.set_thisRotation
void GlobalNamespace::TransformReset::OriginalGameObjectTransform::set_thisRotation(::UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformReset::OriginalGameObjectTransform::set_thisRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_thisRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
// Including type: VRRig/WearablePackedStateSlots
#include "GlobalNamespace/VRRig_WearablePackedStateSlots.hpp"
// Including type: Photon.Voice.Unity.MicWrapper
#include "Photon/Voice/Unity/MicWrapper.hpp"
// Including type: VRRig/QAxis
#include "GlobalNamespace/VRRig_QAxis.hpp"
// Including type: VRRig/<>c
#include "GlobalNamespace/VRRig_--c.hpp"
// Including type: VRRig/<OccasionalUpdate>d__227
#include "GlobalNamespace/VRRig_-OccasionalUpdate-d__227.hpp"
// Including type: VRMap
#include "GlobalNamespace/VRMap.hpp"
// Including type: VRMapThumb
#include "GlobalNamespace/VRMapThumb.hpp"
// Including type: VRMapIndex
#include "GlobalNamespace/VRMapIndex.hpp"
// Including type: VRMapMiddle
#include "GlobalNamespace/VRMapMiddle.hpp"
// Including type: GorillaLocomotion.Gameplay.GorillaRopeSwing
#include "GorillaLocomotion/Gameplay/GorillaRopeSwing.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.SkinnedMeshRenderer
#include "UnityEngine/SkinnedMeshRenderer.hpp"
// Including type: GorillaSkin
#include "GlobalNamespace/GorillaSkin.hpp"
// Including type: ZoneEntity
#include "GlobalNamespace/ZoneEntity.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: GorillaNetworking.CosmeticItemRegistry
#include "GorillaNetworking/CosmeticItemRegistry.hpp"
// Including type: SizeManager
#include "GlobalNamespace/SizeManager.hpp"
// Including type: GorillaNetworking.FriendshipBracelet
#include "GorillaNetworking/FriendshipBracelet.hpp"
// Including type: NonCosmeticHandItem
#include "GlobalNamespace/NonCosmeticHandItem.hpp"
// Including type: VRRigReliableState
#include "GlobalNamespace/VRRigReliableState.hpp"
// Including type: RigContainer
#include "GlobalNamespace/RigContainer.hpp"
// Including type: NetPlayer
#include "GlobalNamespace/NetPlayer.hpp"
// Including type: BattleBalloons
#include "GlobalNamespace/BattleBalloons.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Slingshot
#include "GlobalNamespace/Slingshot.hpp"
// Including type: Photon.Voice.PUN.PhotonVoiceView
#include "Photon/Voice/PUN/PhotonVoiceView.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Photon.Voice.IAudioDesc
#include "Photon/Voice/IAudioDesc.hpp"
// Including type: GorillaMouthFlap
#include "GlobalNamespace/GorillaMouthFlap.hpp"
// Including type: GorillaSpeakerLoudness
#include "GlobalNamespace/GorillaSpeakerLoudness.hpp"
// Including type: ReplacementVoice
#include "GlobalNamespace/ReplacementVoice.hpp"
// Including type: GorillaEyeExpressions
#include "GlobalNamespace/GorillaEyeExpressions.hpp"
// Including type: Photon.Pun.PhotonView
#include "Photon/Pun/PhotonView.hpp"
// Including type: VRRigSerializer
#include "GlobalNamespace/VRRigSerializer.hpp"
// Including type: FXSystemSettings
#include "GlobalNamespace/FXSystemSettings.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: PhotonMessageInfoWrapped
#include "GlobalNamespace/PhotonMessageInfoWrapped.hpp"
// Including type: PlayFab.ClientModels.GetUserInventoryResult
#include "PlayFab/ClientModels/GetUserInventoryResult.hpp"
// Including type: PlayFab.PlayFabError
#include "PlayFab/PlayFabError.hpp"
// Including type: GorillaNetworking.CosmeticsController/CosmeticSet
#include "GorillaNetworking/CosmeticsController_CosmeticSet.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: TransferrableObject/ItemStates
// Already included the same include: GlobalNamespace/TransferrableObject.hpp
// Including type: BodyDockPositions/DropPositions
#include "GlobalNamespace/BodyDockPositions_DropPositions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Action newPlayerJoined
::System::Action* GlobalNamespace::VRRig::_get_newPlayerJoined() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_newPlayerJoined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action*>("", "VRRig", "newPlayerJoined"));
}
// Autogenerated static field setter
// Set static field: static public System.Action newPlayerJoined
void GlobalNamespace::VRRig::_set_newPlayerJoined(::System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_newPlayerJoined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "newPlayerJoined", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single REMOTE_CORRECTION_RATE
float GlobalNamespace::VRRig::_get_REMOTE_CORRECTION_RATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_REMOTE_CORRECTION_RATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "VRRig", "REMOTE_CORRECTION_RATE"));
}
// Autogenerated static field setter
// Set static field: static private System.Single REMOTE_CORRECTION_RATE
void GlobalNamespace::VRRig::_set_REMOTE_CORRECTION_RATE(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_REMOTE_CORRECTION_RATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "REMOTE_CORRECTION_RATE", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean USE_NEW_NETCODE
bool GlobalNamespace::VRRig::_get_USE_NEW_NETCODE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_USE_NEW_NETCODE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "VRRig", "USE_NEW_NETCODE"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean USE_NEW_NETCODE
void GlobalNamespace::VRRig::_set_USE_NEW_NETCODE(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_USE_NEW_NETCODE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "USE_NEW_NETCODE", value));
}
// Autogenerated static field getter
// Get static field: static public readonly GTBitOps/BitWriteInfo[] WearablePackedStatesBitWriteInfos
::ArrayW<::GlobalNamespace::GTBitOps::BitWriteInfo> GlobalNamespace::VRRig::_get_WearablePackedStatesBitWriteInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_WearablePackedStatesBitWriteInfos");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::GlobalNamespace::GTBitOps::BitWriteInfo>>("", "VRRig", "WearablePackedStatesBitWriteInfos"));
}
// Autogenerated static field setter
// Set static field: static public readonly GTBitOps/BitWriteInfo[] WearablePackedStatesBitWriteInfos
void GlobalNamespace::VRRig::_set_WearablePackedStatesBitWriteInfos(::ArrayW<::GlobalNamespace::GTBitOps::BitWriteInfo> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_WearablePackedStatesBitWriteInfos");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "WearablePackedStatesBitWriteInfos", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 splashLimitCount
int GlobalNamespace::VRRig::_get_splashLimitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_splashLimitCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRig", "splashLimitCount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 splashLimitCount
void GlobalNamespace::VRRig::_set_splashLimitCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_splashLimitCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "splashLimitCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single splashLimitCooldown
float GlobalNamespace::VRRig::_get_splashLimitCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_splashLimitCooldown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "VRRig", "splashLimitCooldown"));
}
// Autogenerated static field setter
// Set static field: static public System.Single splashLimitCooldown
void GlobalNamespace::VRRig::_set_splashLimitCooldown(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_splashLimitCooldown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "splashLimitCooldown", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single QPackMax
float GlobalNamespace::VRRig::_get_QPackMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_QPackMax");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "VRRig", "QPackMax"));
}
// Autogenerated static field setter
// Set static field: static private System.Single QPackMax
void GlobalNamespace::VRRig::_set_QPackMax(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_QPackMax");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "QPackMax", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single QPackScale
float GlobalNamespace::VRRig::_get_QPackScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_QPackScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "VRRig", "QPackScale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single QPackScale
void GlobalNamespace::VRRig::_set_QPackScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_QPackScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "QPackScale", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single QPackInvScale
float GlobalNamespace::VRRig::_get_QPackInvScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_QPackInvScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "VRRig", "QPackInvScale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single QPackInvScale
void GlobalNamespace::VRRig::_set_QPackInvScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_QPackInvScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "QPackInvScale", value));
}
// Autogenerated static field getter
// Get static field: static private VRRig gLocalRig
::GlobalNamespace::VRRig* GlobalNamespace::VRRig::_get_gLocalRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_gLocalRig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig*>("", "VRRig", "gLocalRig"));
}
// Autogenerated static field setter
// Set static field: static private VRRig gLocalRig
void GlobalNamespace::VRRig::_set_gLocalRig(::GlobalNamespace::VRRig* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_gLocalRig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "gLocalRig", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean bCachedLocalRig
bool GlobalNamespace::VRRig::_get_bCachedLocalRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_get_bCachedLocalRig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "VRRig", "bCachedLocalRig"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean bCachedLocalRig
void GlobalNamespace::VRRig::_set_bCachedLocalRig(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::_set_bCachedLocalRig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig", "bCachedLocalRig", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isListeningFor_OnPostInstantiateAllPrefabs
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn__isListeningFor_OnPostInstantiateAllPrefabs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn__isListeningFor_OnPostInstantiateAllPrefabs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isListeningFor_OnPostInstantiateAllPrefabs"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMap head
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMap*& GlobalNamespace::VRRig::dyn_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_head");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMap rightHand
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMap*& GlobalNamespace::VRRig::dyn_rightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rightHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHand"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMap leftHand
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMap*& GlobalNamespace::VRRig::dyn_leftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_leftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHand"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMapThumb leftThumb
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapThumb*& GlobalNamespace::VRRig::dyn_leftThumb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_leftThumb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftThumb"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMapThumb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMapIndex leftIndex
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapIndex*& GlobalNamespace::VRRig::dyn_leftIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_leftIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftIndex"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMapIndex**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMapMiddle leftMiddle
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapMiddle*& GlobalNamespace::VRRig::dyn_leftMiddle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_leftMiddle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftMiddle"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMapMiddle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMapThumb rightThumb
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapThumb*& GlobalNamespace::VRRig::dyn_rightThumb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rightThumb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightThumb"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMapThumb**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMapIndex rightIndex
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapIndex*& GlobalNamespace::VRRig::dyn_rightIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rightIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightIndex"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMapIndex**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRMapMiddle rightMiddle
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRMapMiddle*& GlobalNamespace::VRRig::dyn_rightMiddle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rightMiddle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightMiddle"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRMapMiddle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 previousGrabbedRope
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_previousGrabbedRope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_previousGrabbedRope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousGrabbedRope"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 previousGrabbedRopeBoneIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_previousGrabbedRopeBoneIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_previousGrabbedRopeBoneIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousGrabbedRopeBoneIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean previousGrabbedRopeWasLeft
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_previousGrabbedRopeWasLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_previousGrabbedRopeWasLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "previousGrabbedRopeWasLeft"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaLocomotion.Gameplay.GorillaRopeSwing currentRopeSwing
[[deprecated("Use field access instead!")]] ::GorillaLocomotion::Gameplay::GorillaRopeSwing*& GlobalNamespace::VRRig::dyn_currentRopeSwing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_currentRopeSwing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentRopeSwing"))->offset;
  return *reinterpret_cast<::GorillaLocomotion::Gameplay::GorillaRopeSwing**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform currentHoldParent
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRig::dyn_currentHoldParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_currentHoldParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentHoldParent"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform currentRopeSwingTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRig::dyn_currentRopeSwingTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_currentRopeSwingTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentRopeSwingTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single lastRopeGrabTimer
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_lastRopeGrabTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_lastRopeGrabTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastRopeGrabTimer"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean shouldLerpToRope
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_shouldLerpToRope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_shouldLerpToRope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shouldLerpToRope"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 grabbedRopeIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_grabbedRopeIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_grabbedRopeIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabbedRopeIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 grabbedRopeBoneIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_grabbedRopeBoneIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_grabbedRopeBoneIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabbedRopeBoneIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean grabbedRopeIsLeft
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_grabbedRopeIsLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_grabbedRopeIsLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabbedRopeIsLeft"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 grabbedRopeOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRig::dyn_grabbedRopeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_grabbedRopeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "grabbedRopeOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isOfflineVRRig
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_isOfflineVRRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_isOfflineVRRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isOfflineVRRig"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject mainCamera
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::VRRig::dyn_mainCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_mainCamera");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mainCamera"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform playerOffsetTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRig::dyn_playerOffsetTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_playerOffsetTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerOffsetTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SDKIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_SDKIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_SDKIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SDKIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isMyPlayer
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_isMyPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_isMyPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isMyPlayer"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource leftHandPlayer
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::VRRig::dyn_leftHandPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_leftHandPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandPlayer"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource rightHandPlayer
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::VRRig::dyn_rightHandPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rightHandPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandPlayer"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource tagSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::VRRig::dyn_tagSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tagSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tagSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single ratio
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_ratio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_ratio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ratio"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform headConstraint
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRig::dyn_headConstraint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_headConstraint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headConstraint"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 headBodyOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRig::dyn_headBodyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_headBodyOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headBodyOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject headMesh
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::VRRig::dyn_headMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_headMesh");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headMesh"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 syncPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRig::dyn_syncPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_syncPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 jobPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRig::dyn_jobPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_jobPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jobPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion syncRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::VRRig::dyn_syncRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_syncRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion jobRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::VRRig::dyn_jobRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_jobRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "jobRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] clipToPlay
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::VRRig::dyn_clipToPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_clipToPlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clipToPlay"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioClip[] handTapSound
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& GlobalNamespace::VRRig::dyn_handTapSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_handTapSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handTapSound"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioClip*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 currentMatIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_currentMatIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_currentMatIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentMatIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 setMatIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_setMatIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_setMatIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setMatIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 tempMatIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_tempMatIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempMatIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempMatIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lerpValueFingers
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_lerpValueFingers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_lerpValueFingers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpValueFingers"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lerpValueBody
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_lerpValueBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_lerpValueBody");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lerpValueBody"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject backpack
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::VRRig::dyn_backpack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_backpack");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "backpack"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftHandTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRig::dyn_leftHandTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_leftHandTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightHandTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRig::dyn_rightHandTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rightHandTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.SkinnedMeshRenderer mainSkin
[[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& GlobalNamespace::VRRig::dyn_mainSkin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_mainSkin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mainSkin"))->offset;
  return *reinterpret_cast<::UnityEngine::SkinnedMeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaSkin defaultSkin
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSkin*& GlobalNamespace::VRRig::dyn_defaultSkin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_defaultSkin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "defaultSkin"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaSkin**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ZoneEntity zoneEntity
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ZoneEntity*& GlobalNamespace::VRRig::dyn_zoneEntity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_zoneEntity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zoneEntity"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ZoneEntity**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material myDefaultSkinMaterialInstance
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::VRRig::dyn_myDefaultSkinMaterialInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_myDefaultSkinMaterialInstance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myDefaultSkinMaterialInstance"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material scoreboardMaterial
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::VRRig::dyn_scoreboardMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_scoreboardMaterial");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scoreboardMaterial"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject spectatorSkin
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::VRRig::dyn_spectatorSkin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_spectatorSkin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spectatorSkin"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 handSync
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_handSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_handSync");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handSync"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material[] materialsToChangeTo
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& GlobalNamespace::VRRig::dyn_materialsToChangeTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_materialsToChangeTo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "materialsToChangeTo"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Material*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single red
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_red() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_red");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "red"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single green
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_green() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_green");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "green"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single blue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_blue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_blue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String playerName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::VRRig::dyn_playerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_playerName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text playerText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::VRRig::dyn_playerText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_playerText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String playerNameVisible
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::VRRig::dyn_playerNameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_playerNameVisible");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerNameVisible"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean showName
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_showName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_showName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "showName"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticItemRegistry cosmeticsObjectRegistry
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticItemRegistry*& GlobalNamespace::VRRig::dyn_cosmeticsObjectRegistry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_cosmeticsObjectRegistry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmeticsObjectRegistry"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticItemRegistry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] _cosmetics
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::VRRig::dyn__cosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn__cosmetics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cosmetics"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] _overrideCosmetics
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::VRRig::dyn__overrideCosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn__overrideCosmetics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overrideCosmetics"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String concatStringOfCosmeticsAllowed
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::VRRig::dyn_concatStringOfCosmeticsAllowed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_concatStringOfCosmeticsAllowed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "concatStringOfCosmeticsAllowed"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean initializedCosmetics
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_initializedCosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_initializedCosmetics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initializedCosmetics"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticSet cosmeticSet
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSet*& GlobalNamespace::VRRig::dyn_cosmeticSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_cosmeticSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmeticSet"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticSet tryOnSet
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSet*& GlobalNamespace::VRRig::dyn_tryOnSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tryOnSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tryOnSet"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticSet mergedSet
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSet*& GlobalNamespace::VRRig::dyn_mergedSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_mergedSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mergedSet"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticSet prevSet
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSet*& GlobalNamespace::VRRig::dyn_prevSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_prevSet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevSet"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticSet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 cosmeticRetries
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_cosmeticRetries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_cosmeticRetries");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmeticRetries"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 currentCosmeticTries
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_currentCosmeticTries() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_currentCosmeticTries");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentCosmeticTries"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public SizeManager sizeManager
[[deprecated("Use field access instead!")]] ::GlobalNamespace::SizeManager*& GlobalNamespace::VRRig::dyn_sizeManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_sizeManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sizeManager"))->offset;
  return *reinterpret_cast<::GlobalNamespace::SizeManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pitchScale
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_pitchScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_pitchScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchScale"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single pitchOffset
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_pitchOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_pitchOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pitchOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IsHaunted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_IsHaunted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_IsHaunted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsHaunted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single HauntedVoicePitch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_HauntedVoicePitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_HauntedVoicePitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HauntedVoicePitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single HauntedHearingVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_HauntedHearingVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_HauntedHearingVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HauntedHearingVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UsingHauntedRing
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_UsingHauntedRing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_UsingHauntedRing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UsingHauntedRing"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single HauntedRingVoicePitch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_HauntedRingVoicePitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_HauntedRingVoicePitch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "HauntedRingVoicePitch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.FriendshipBracelet friendshipBraceletLeftHand
[[deprecated("Use field access instead!")]] ::GorillaNetworking::FriendshipBracelet*& GlobalNamespace::VRRig::dyn_friendshipBraceletLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_friendshipBraceletLeftHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletLeftHand"))->offset;
  return *reinterpret_cast<::GorillaNetworking::FriendshipBracelet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NonCosmeticHandItem nonCosmeticLeftHandItem
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NonCosmeticHandItem*& GlobalNamespace::VRRig::dyn_nonCosmeticLeftHandItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_nonCosmeticLeftHandItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nonCosmeticLeftHandItem"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NonCosmeticHandItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.FriendshipBracelet friendshipBraceletRightHand
[[deprecated("Use field access instead!")]] ::GorillaNetworking::FriendshipBracelet*& GlobalNamespace::VRRig::dyn_friendshipBraceletRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_friendshipBraceletRightHand");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletRightHand"))->offset;
  return *reinterpret_cast<::GorillaNetworking::FriendshipBracelet**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NonCosmeticHandItem nonCosmeticRightHandItem
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NonCosmeticHandItem*& GlobalNamespace::VRRig::dyn_nonCosmeticRightHandItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_nonCosmeticRightHandItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nonCosmeticRightHandItem"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NonCosmeticHandItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public VRRigReliableState reliableState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigReliableState*& GlobalNamespace::VRRig::dyn_reliableState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_reliableState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reliableState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRigReliableState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform MouthPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRRig::dyn_MouthPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_MouthPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MouthPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: RigContainer rigContainer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::RigContainer*& GlobalNamespace::VRRig::dyn_rigContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rigContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigContainer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::RigContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 remoteVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRig::dyn_remoteVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_remoteVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "remoteVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double remoteLatestTimestamp
[[deprecated("Use field access instead!")]] double& GlobalNamespace::VRRig::dyn_remoteLatestTimestamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_remoteLatestTimestamp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "remoteLatestTimestamp"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 remoteCorrectionNeeded
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRig::dyn_remoteCorrectionNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_remoteCorrectionNeeded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "remoteCorrectionNeeded"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig/PartyMemberStatus partyMemberStatus
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig::PartyMemberStatus& GlobalNamespace::VRRig::dyn_partyMemberStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_partyMemberStatus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "partyMemberStatus"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig::PartyMemberStatus*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean inTryOnRoom
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_inTryOnRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_inTryOnRoom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inTryOnRoom"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean muted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_muted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_muted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "muted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single scaleFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_scaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_scaleFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "scaleFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single lastScaleFactor
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_lastScaleFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_lastScaleFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastScaleFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single timeSpawned
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_timeSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_timeSpawned");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeSpawned"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single doNotLerpConstant
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_doNotLerpConstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_doNotLerpConstant");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doNotLerpConstant"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String tempString
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::VRRig::dyn_tempString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempString"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Realtime.Player tempPlayer
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::VRRig::dyn_tempPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempPlayer"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Photon.Realtime.Player creator
[[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& GlobalNamespace::VRRig::dyn_creator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_creator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "creator"))->offset;
  return *reinterpret_cast<::Photon::Realtime::Player**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: NetPlayer creatorWrapped
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NetPlayer*& GlobalNamespace::VRRig::dyn_creatorWrapped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_creatorWrapped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "creatorWrapped"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NetPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig tempRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::VRRig::dyn_tempRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] speedArray
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::VRRig::dyn_speedArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_speedArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speedArray"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double handLerpValues
[[deprecated("Use field access instead!")]] double& GlobalNamespace::VRRig::dyn_handLerpValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_handLerpValues");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handLerpValues"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean initialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_initialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BattleBalloons battleBalloons
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BattleBalloons*& GlobalNamespace::VRRig::dyn_battleBalloons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_battleBalloons");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "battleBalloons"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BattleBalloons**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 tempInt
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_tempInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempInt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempInt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions myBodyDockPositions
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& GlobalNamespace::VRRig::dyn_myBodyDockPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_myBodyDockPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myBodyDockPositions"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem lavaParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::VRRig::dyn_lavaParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_lavaParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lavaParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem rockParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::VRRig::dyn_rockParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rockParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rockParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.ParticleSystem iceParticleSystem
[[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& GlobalNamespace::VRRig::dyn_iceParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_iceParticleSystem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "iceParticleSystem"))->offset;
  return *reinterpret_cast<::UnityEngine::ParticleSystem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String tempItemName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::VRRig::dyn_tempItemName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempItemName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempItemName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticItem tempItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::VRRig::dyn_tempItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String tempItemId
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::VRRig::dyn_tempItemId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempItemId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempItemId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 tempItemCost
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_tempItemCost() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempItemCost");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempItemCost"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 leftHandHoldableStatus
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_leftHandHoldableStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_leftHandHoldableStatus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandHoldableStatus"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 rightHandHoldableStatus
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_rightHandHoldableStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rightHandHoldableStatus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandHoldableStatus"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource[] musicDrums
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& GlobalNamespace::VRRig::dyn_musicDrums() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_musicDrums");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "musicDrums"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioSource*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject[] instrumentSelfOnly
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransferrableObject*>& GlobalNamespace::VRRig::dyn_instrumentSelfOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_instrumentSelfOnly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instrumentSelfOnly"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TransferrableObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource geodeCrackingSound
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::VRRig::dyn_geodeCrackingSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_geodeCrackingSound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "geodeCrackingSound"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bonkTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_bonkTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_bonkTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bonkTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single bonkCooldown
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_bonkCooldown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_bonkCooldown");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bonkCooldown"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig tempVRRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::VRRig::dyn_tempVRRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_tempVRRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempVRRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject huntComputer
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::VRRig::dyn_huntComputer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_huntComputer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "huntComputer"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject builderResizeWatch
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::VRRig::dyn_builderResizeWatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_builderResizeWatch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "builderResizeWatch"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Slingshot slingshot
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Slingshot*& GlobalNamespace::VRRig::dyn_slingshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_slingshot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slingshot"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Slingshot**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Slingshot/SlingshotState slingshotState
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Slingshot::SlingshotState& GlobalNamespace::VRRig::dyn_slingshotState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_slingshotState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slingshotState"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Slingshot::SlingshotState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Voice.PUN.PhotonVoiceView myPhotonVoiceView
[[deprecated("Use field access instead!")]] ::Photon::Voice::PUN::PhotonVoiceView*& GlobalNamespace::VRRig::dyn_myPhotonVoiceView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_myPhotonVoiceView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myPhotonVoiceView"))->offset;
  return *reinterpret_cast<::Photon::Voice::PUN::PhotonVoiceView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig senderRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::VRRig::dyn_senderRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_senderRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "senderRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_isInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<VRRig/VelocityTime> velocityHistoryList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::VRRig::VelocityTime>*& GlobalNamespace::VRRig::dyn_velocityHistoryList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_velocityHistoryList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityHistoryList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::VRRig::VelocityTime>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 velocityHistoryMaxLength
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_velocityHistoryMaxLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_velocityHistoryMaxLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "velocityHistoryMaxLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 lastPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRig::dyn_lastPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_lastPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] splashEffectTimes
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::VRRig::dyn_splashEffectTimes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_splashEffectTimes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "splashEffectTimes"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: UnityEngine.AudioSource voiceAudio
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::VRRig::dyn_voiceAudio() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_voiceAudio");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "voiceAudio"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean remoteUseReplacementVoice
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_remoteUseReplacementVoice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_remoteUseReplacementVoice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "remoteUseReplacementVoice"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean localUseReplacementVoice
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_localUseReplacementVoice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_localUseReplacementVoice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "localUseReplacementVoice"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Voice.Unity.MicWrapper currentMicWrapper
[[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::MicWrapper*& GlobalNamespace::VRRig::dyn_currentMicWrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_currentMicWrapper");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentMicWrapper"))->offset;
  return *reinterpret_cast<::Photon::Voice::Unity::MicWrapper**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Photon.Voice.IAudioDesc audioDesc
[[deprecated("Use field access instead!")]] ::Photon::Voice::IAudioDesc*& GlobalNamespace::VRRig::dyn_audioDesc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_audioDesc");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "audioDesc"))->offset;
  return *reinterpret_cast<::Photon::Voice::IAudioDesc**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single speakingLoudness
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_speakingLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_speakingLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "speakingLoudness"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean shouldSendSpeakingLoudness
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_shouldSendSpeakingLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_shouldSendSpeakingLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "shouldSendSpeakingLoudness"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single replacementVoiceLoudnessThreshold
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_replacementVoiceLoudnessThreshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_replacementVoiceLoudnessThreshold");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "replacementVoiceLoudnessThreshold"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 replacementVoiceDetectionDelay
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::dyn_replacementVoiceDetectionDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_replacementVoiceDetectionDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "replacementVoiceDetectionDelay"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaMouthFlap myMouthFlap
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaMouthFlap*& GlobalNamespace::VRRig::dyn_myMouthFlap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_myMouthFlap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myMouthFlap"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaMouthFlap**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaSpeakerLoudness mySpeakerLoudness
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSpeakerLoudness*& GlobalNamespace::VRRig::dyn_mySpeakerLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_mySpeakerLoudness");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mySpeakerLoudness"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaSpeakerLoudness**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public ReplacementVoice myReplacementVoice
[[deprecated("Use field access instead!")]] ::GlobalNamespace::ReplacementVoice*& GlobalNamespace::VRRig::dyn_myReplacementVoice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_myReplacementVoice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myReplacementVoice"))->offset;
  return *reinterpret_cast<::GlobalNamespace::ReplacementVoice**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaEyeExpressions myEyeExpressions
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaEyeExpressions*& GlobalNamespace::VRRig::dyn_myEyeExpressions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_myEyeExpressions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myEyeExpressions"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaEyeExpressions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Photon.Pun.PhotonView photonView
[[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& GlobalNamespace::VRRig::dyn_photonView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_photonView");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "photonView"))->offset;
  return *reinterpret_cast<::Photon::Pun::PhotonView**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: VRRigSerializer rigSerializer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigSerializer*& GlobalNamespace::VRRig::dyn_rigSerializer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rigSerializer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigSerializer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRigSerializer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public NetPlayer OwningNetPlayer
[[deprecated("Use field access instead!")]] ::GlobalNamespace::NetPlayer*& GlobalNamespace::VRRig::dyn_OwningNetPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_OwningNetPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OwningNetPlayer"))->offset;
  return *reinterpret_cast<::GlobalNamespace::NetPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private FXSystemSettings sharedFXSettings
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FXSystemSettings*& GlobalNamespace::VRRig::dyn_sharedFXSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_sharedFXSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sharedFXSettings"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FXSystemSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public FXSystemSettings fxSettings
[[deprecated("Use field access instead!")]] ::GlobalNamespace::FXSystemSettings*& GlobalNamespace::VRRig::dyn_fxSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_fxSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fxSettings"))->offset;
  return *reinterpret_cast<::GlobalNamespace::FXSystemSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean playerWasHaunted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_playerWasHaunted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_playerWasHaunted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerWasHaunted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single nonHauntedVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRRig::dyn_nonHauntedVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_nonHauntedVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nonHauntedVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color playerColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color& GlobalNamespace::VRRig::dyn_playerColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_playerColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean colorInitialized
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_colorInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_colorInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "colorInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Color> onColorInitialized
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& GlobalNamespace::VRRig::dyn_onColorInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_onColorInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onColorInitialized"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<UnityEngine.Color> OnColorChanged
[[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& GlobalNamespace::VRRig::dyn_OnColorChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_OnColorChanged");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnColorChanged"))->offset;
  return *reinterpret_cast<::System::Action_1<::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean canReport
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_canReport() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_canReport");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "canReport"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean pendingCosmeticUpdate
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRig::dyn_pendingCosmeticUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_pendingCosmeticUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pendingCosmeticUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String rawCosmeticString
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::VRRig::dyn_rawCosmeticString() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::dyn_rawCosmeticString");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rawCosmeticString"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRRig.CosmeticsV2_Awake
void GlobalNamespace::VRRig::CosmeticsV2_Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::CosmeticsV2_Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CosmeticsV2_Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.CosmeticsV2_OnDestroy
void GlobalNamespace::VRRig::CosmeticsV2_OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::CosmeticsV2_OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CosmeticsV2_OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics
void GlobalNamespace::VRRig::Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Handle_CosmeticsV2_OnPostInstantiateAllPrefabs_DoEnableAllCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.get_cosmetics
::ArrayW<::UnityEngine::GameObject*> GlobalNamespace::VRRig::get_cosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_cosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::GameObject*>, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_cosmetics
void GlobalNamespace::VRRig::set_cosmetics(::ArrayW<::UnityEngine::GameObject*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_cosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_overrideCosmetics
::ArrayW<::UnityEngine::GameObject*> GlobalNamespace::VRRig::get_overrideCosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_overrideCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overrideCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::UnityEngine::GameObject*>, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_overrideCosmetics
void GlobalNamespace::VRRig::set_overrideCosmetics(::ArrayW<::UnityEngine::GameObject*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_overrideCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_overrideCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_HasBracelet
bool GlobalNamespace::VRRig::get_HasBracelet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_HasBracelet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasBracelet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.GetMouthPosition
::UnityEngine::Vector3 GlobalNamespace::VRRig::GetMouthPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GetMouthPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMouthPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.GetPartyMemberStatus
::GlobalNamespace::VRRig::PartyMemberStatus GlobalNamespace::VRRig::GetPartyMemberStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GetPartyMemberStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPartyMemberStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRRig::PartyMemberStatus, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.get_IsLocalPartyMember
bool GlobalNamespace::VRRig::get_IsLocalPartyMember() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_IsLocalPartyMember");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsLocalPartyMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.ClearPartyMemberStatus
void GlobalNamespace::VRRig::ClearPartyMemberStatus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ClearPartyMemberStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPartyMemberStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.ActiveTransferrableObjectIndex
int GlobalNamespace::VRRig::ActiveTransferrableObjectIndex(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ActiveTransferrableObjectIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActiveTransferrableObjectIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, idx);
}
// Autogenerated method: VRRig.ActiveTransferrableObjectIndexLength
int GlobalNamespace::VRRig::ActiveTransferrableObjectIndexLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ActiveTransferrableObjectIndexLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActiveTransferrableObjectIndexLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.SetActiveTransferrableObjectIndex
void GlobalNamespace::VRRig::SetActiveTransferrableObjectIndex(int idx, int v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetActiveTransferrableObjectIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActiveTransferrableObjectIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(v)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, v);
}
// Autogenerated method: VRRig.TransferrablePosStates
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::VRRig::TransferrablePosStates(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::TransferrablePosStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrablePosStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TransferrableObject::PositionState, false>(this, ___internal__method, idx);
}
// Autogenerated method: VRRig.SetTransferrablePosStates
void GlobalNamespace::VRRig::SetTransferrablePosStates(int idx, ::GlobalNamespace::TransferrableObject::PositionState v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetTransferrablePosStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTransferrablePosStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(v)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, v);
}
// Autogenerated method: VRRig.TransferrableItemStates
::GlobalNamespace::TransferrableObject::ItemStates GlobalNamespace::VRRig::TransferrableItemStates(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::TransferrableItemStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItemStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TransferrableObject::ItemStates, false>(this, ___internal__method, idx);
}
// Autogenerated method: VRRig.SetTransferrableItemStates
void GlobalNamespace::VRRig::SetTransferrableItemStates(int idx, ::GlobalNamespace::TransferrableObject::ItemStates v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetTransferrableItemStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTransferrableItemStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(v)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, v);
}
// Autogenerated method: VRRig.SetTransferrableDockPosition
void GlobalNamespace::VRRig::SetTransferrableDockPosition(int idx, ::GlobalNamespace::BodyDockPositions::DropPositions v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetTransferrableDockPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTransferrableDockPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(v)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, idx, v);
}
// Autogenerated method: VRRig.TransferrableDockPosition
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::VRRig::TransferrableDockPosition(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::TransferrableDockPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableDockPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BodyDockPositions::DropPositions, false>(this, ___internal__method, idx);
}
// Autogenerated method: VRRig.get_WearablePackedStates
int GlobalNamespace::VRRig::get_WearablePackedStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_WearablePackedStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WearablePackedStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_WearablePackedStates
void GlobalNamespace::VRRig::set_WearablePackedStates(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_WearablePackedStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_WearablePackedStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_LeftThrowableProjectileIndex
int GlobalNamespace::VRRig::get_LeftThrowableProjectileIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_LeftThrowableProjectileIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LeftThrowableProjectileIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_LeftThrowableProjectileIndex
void GlobalNamespace::VRRig::set_LeftThrowableProjectileIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_LeftThrowableProjectileIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LeftThrowableProjectileIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_RightThrowableProjectileIndex
int GlobalNamespace::VRRig::get_RightThrowableProjectileIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_RightThrowableProjectileIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RightThrowableProjectileIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_RightThrowableProjectileIndex
void GlobalNamespace::VRRig::set_RightThrowableProjectileIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_RightThrowableProjectileIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RightThrowableProjectileIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_LeftThrowableProjectileColor
::UnityEngine::Color32 GlobalNamespace::VRRig::get_LeftThrowableProjectileColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_LeftThrowableProjectileColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LeftThrowableProjectileColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color32, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_LeftThrowableProjectileColor
void GlobalNamespace::VRRig::set_LeftThrowableProjectileColor(::UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_LeftThrowableProjectileColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LeftThrowableProjectileColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_RightThrowableProjectileColor
::UnityEngine::Color32 GlobalNamespace::VRRig::get_RightThrowableProjectileColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_RightThrowableProjectileColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RightThrowableProjectileColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color32, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_RightThrowableProjectileColor
void GlobalNamespace::VRRig::set_RightThrowableProjectileColor(::UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_RightThrowableProjectileColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RightThrowableProjectileColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.GetThrowableProjectileColor
::UnityEngine::Color32 GlobalNamespace::VRRig::GetThrowableProjectileColor(bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GetThrowableProjectileColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetThrowableProjectileColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeftHand)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Color32, false>(this, ___internal__method, isLeftHand);
}
// Autogenerated method: VRRig.SetThrowableProjectileColor
void GlobalNamespace::VRRig::SetThrowableProjectileColor(bool isLeftHand, ::UnityEngine::Color32 color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetThrowableProjectileColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetThrowableProjectileColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeftHand), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeftHand, color);
}
// Autogenerated method: VRRig.SetRandomThrowableModelIndex
void GlobalNamespace::VRRig::SetRandomThrowableModelIndex(int randModelIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetRandomThrowableModelIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRandomThrowableModelIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(randModelIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, randModelIndex);
}
// Autogenerated method: VRRig.GetRandomThrowableModelIndex
int GlobalNamespace::VRRig::GetRandomThrowableModelIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GetRandomThrowableModelIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRandomThrowableModelIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.get_RandomThrowableIndex
int GlobalNamespace::VRRig::get_RandomThrowableIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_RandomThrowableIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RandomThrowableIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_RandomThrowableIndex
void GlobalNamespace::VRRig::set_RandomThrowableIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_RandomThrowableIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RandomThrowableIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_IsMicEnabled
bool GlobalNamespace::VRRig::get_IsMicEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_IsMicEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsMicEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_IsMicEnabled
void GlobalNamespace::VRRig::set_IsMicEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_IsMicEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsMicEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_SizeLayerMask
int GlobalNamespace::VRRig::get_SizeLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_SizeLayerMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SizeLayerMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.set_SizeLayerMask
void GlobalNamespace::VRRig::set_SizeLayerMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::set_SizeLayerMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SizeLayerMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.get_Creator
::Photon::Realtime::Player* GlobalNamespace::VRRig::get_Creator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_Creator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Creator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Photon::Realtime::Player*, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.get_Initialized
bool GlobalNamespace::VRRig::get_Initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_Initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.get_SpeakingLoudness
float GlobalNamespace::VRRig::get_SpeakingLoudness() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_SpeakingLoudness");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SpeakingLoudness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.BuildInitialize
void GlobalNamespace::VRRig::BuildInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::BuildInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.BuildInitialize_AfterCosmeticsV2Instantiated
void GlobalNamespace::VRRig::BuildInitialize_AfterCosmeticsV2Instantiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::BuildInitialize_AfterCosmeticsV2Instantiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildInitialize_AfterCosmeticsV2Instantiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.Awake
void GlobalNamespace::VRRig::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.EnsureInstantiatedMaterial
void GlobalNamespace::VRRig::EnsureInstantiatedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::EnsureInstantiatedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureInstantiatedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.ApplyColorCode
void GlobalNamespace::VRRig::ApplyColorCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ApplyColorCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyColorCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.SharedStart
void GlobalNamespace::VRRig::SharedStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SharedStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SharedStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.OccasionalUpdate
::System::Collections::IEnumerator* GlobalNamespace::VRRig::OccasionalUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::OccasionalUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OccasionalUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.IsItemAllowed
bool GlobalNamespace::VRRig::IsItemAllowed(::StringW itemName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IsItemAllowed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsItemAllowed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(itemName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, itemName);
}
// Autogenerated method: VRRig.RemoteRigUpdate
void GlobalNamespace::VRRig::RemoteRigUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::RemoteRigUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoteRigUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.LateUpdate
void GlobalNamespace::VRRig::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.SetHeadBodyOffset
void GlobalNamespace::VRRig::SetHeadBodyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetHeadBodyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHeadBodyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.VRRigResize
void GlobalNamespace::VRRig::VRRigResize(float ratioVar) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::VRRigResize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VRRigResize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ratioVar)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ratioVar);
}
// Autogenerated method: VRRig.ReturnHandPosition
int GlobalNamespace::VRRig::ReturnHandPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ReturnHandPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnHandPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.OnDestroy
void GlobalNamespace::VRRig::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.OnSerializeWrite
::Il2CppObject* GlobalNamespace::VRRig::OnSerializeWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::OnSerializeWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig*), 6));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.OnSerializeRead
void GlobalNamespace::VRRig::OnSerializeRead(::Il2CppObject* objectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::OnSerializeRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, objectData);
}
// Autogenerated method: VRRig.PackQuaternionForNetwork
int GlobalNamespace::VRRig::PackQuaternionForNetwork(::UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PackQuaternionForNetwork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "PackQuaternionForNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, q);
}
// Autogenerated method: VRRig.UnpackQuaterionFromNetwork
::UnityEngine::Quaternion GlobalNamespace::VRRig::UnpackQuaterionFromNetwork(int data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UnpackQuaterionFromNetwork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "UnpackQuaterionFromNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: VRRig.PackHandPosRotForNetwork
int64_t GlobalNamespace::VRRig::PackHandPosRotForNetwork(::UnityEngine::Vector3 localPos, ::UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PackHandPosRotForNetwork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "PackHandPosRotForNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPos), ::il2cpp_utils::ExtractType(rot)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, localPos, rot);
}
// Autogenerated method: VRRig.UnpackHandPosRotFromNetwork
void GlobalNamespace::VRRig::UnpackHandPosRotFromNetwork(int64_t data, ByRef<::UnityEngine::Vector3> localPos, ByRef<::UnityEngine::Quaternion> handRot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UnpackHandPosRotFromNetwork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "UnpackHandPosRotFromNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data, byref(localPos), byref(handRot));
}
// Autogenerated method: VRRig.PackWorldPosForNetwork
int64_t GlobalNamespace::VRRig::PackWorldPosForNetwork(::UnityEngine::Vector3 worldPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PackWorldPosForNetwork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "PackWorldPosForNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPos)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, worldPos);
}
// Autogenerated method: VRRig.UnpackWorldPosFromNetwork
::UnityEngine::Vector3 GlobalNamespace::VRRig::UnpackWorldPosFromNetwork(int64_t data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UnpackWorldPosFromNetwork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "UnpackWorldPosFromNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: VRRig.IWrappedSerializable.OnSerializeWrite
void GlobalNamespace::VRRig::IWrappedSerializable_OnSerializeWrite(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IWrappedSerializable.OnSerializeWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: VRRig.IWrappedSerializable.OnSerializeRead
void GlobalNamespace::VRRig::IWrappedSerializable_OnSerializeRead(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IWrappedSerializable.OnSerializeRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: VRRig.UpdateExtrapolationTarget
void GlobalNamespace::VRRig::UpdateExtrapolationTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UpdateExtrapolationTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateExtrapolationTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.UpdateRopeData
void GlobalNamespace::VRRig::UpdateRopeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UpdateRopeData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRopeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.AttachLocalPlayerToPhotonView
void GlobalNamespace::VRRig::AttachLocalPlayerToPhotonView(::Photon::Pun::PhotonView* view, ::UnityEngine::XR::XRNode xrNode, ::UnityEngine::Vector3 offset, ::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::AttachLocalPlayerToPhotonView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "AttachLocalPlayerToPhotonView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view), ::il2cpp_utils::ExtractType(xrNode), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(velocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, view, xrNode, offset, velocity);
}
// Autogenerated method: VRRig.DetachLocalPlayerFromPhotonView
void GlobalNamespace::VRRig::DetachLocalPlayerFromPhotonView() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::DetachLocalPlayerFromPhotonView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "DetachLocalPlayerFromPhotonView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRRig.ClearRopeData
void GlobalNamespace::VRRig::ClearRopeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ClearRopeData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearRopeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.ChangeMaterial
void GlobalNamespace::VRRig::ChangeMaterial(int materialIndex, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ChangeMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialIndex), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, materialIndex, info);
}
// Autogenerated method: VRRig.ChangeMaterialLocal
void GlobalNamespace::VRRig::ChangeMaterialLocal(int materialIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ChangeMaterialLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeMaterialLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materialIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, materialIndex);
}
// Autogenerated method: VRRig.InitializeNoobMaterial
void GlobalNamespace::VRRig::InitializeNoobMaterial(float red, float green, float blue, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::InitializeNoobMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeNoobMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(red), ::il2cpp_utils::ExtractType(green), ::il2cpp_utils::ExtractType(blue), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, red, green, blue, info);
}
// Autogenerated method: VRRig.InitializeNoobMaterialLocal
void GlobalNamespace::VRRig::InitializeNoobMaterialLocal(float red, float green, float blue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::InitializeNoobMaterialLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeNoobMaterialLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(red), ::il2cpp_utils::ExtractType(green), ::il2cpp_utils::ExtractType(blue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, red, green, blue);
}
// Autogenerated method: VRRig.UpdateName
void GlobalNamespace::VRRig::UpdateName(bool isSafety) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UpdateName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isSafety)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isSafety);
}
// Autogenerated method: VRRig.NormalizeName
::StringW GlobalNamespace::VRRig::NormalizeName(bool doIt, ::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::NormalizeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NormalizeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(doIt), ::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, doIt, text);
}
// Autogenerated method: VRRig.SetJumpLimitLocal
void GlobalNamespace::VRRig::SetJumpLimitLocal(float maxJumpSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetJumpLimitLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetJumpLimitLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxJumpSpeed)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, maxJumpSpeed);
}
// Autogenerated method: VRRig.SetJumpMultiplierLocal
void GlobalNamespace::VRRig::SetJumpMultiplierLocal(float jumpMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetJumpMultiplierLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetJumpMultiplierLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(jumpMultiplier)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, jumpMultiplier);
}
// Autogenerated method: VRRig.RequestMaterialColor
void GlobalNamespace::VRRig::RequestMaterialColor(int askingPlayerID, ::GlobalNamespace::PhotonMessageInfoWrapped info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::RequestMaterialColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestMaterialColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(askingPlayerID), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, askingPlayerID, info);
}
// Autogenerated method: VRRig.RequestCosmetics
void GlobalNamespace::VRRig::RequestCosmetics(::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::RequestCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info);
}
// Autogenerated method: VRRig.PlayTagSoundLocal
void GlobalNamespace::VRRig::PlayTagSoundLocal(int soundIndex, float soundVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PlayTagSoundLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayTagSoundLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundIndex), ::il2cpp_utils::ExtractType(soundVolume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, soundIndex, soundVolume);
}
// Autogenerated method: VRRig.Bonk
void GlobalNamespace::VRRig::Bonk(int soundIndex, float bonkPercent, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::Bonk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bonk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundIndex), ::il2cpp_utils::ExtractType(bonkPercent), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, soundIndex, bonkPercent, info);
}
// Autogenerated method: VRRig.AssignDrumToMusicDrums
void GlobalNamespace::VRRig::AssignDrumToMusicDrums(int drumIndex, ::UnityEngine::AudioSource* drum) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::AssignDrumToMusicDrums");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignDrumToMusicDrums", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(drumIndex), ::il2cpp_utils::ExtractType(drum)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, drumIndex, drum);
}
// Autogenerated method: VRRig.PlayDrum
void GlobalNamespace::VRRig::PlayDrum(int drumIndex, float drumVolume, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PlayDrum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayDrum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(drumIndex), ::il2cpp_utils::ExtractType(drumVolume), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, drumIndex, drumVolume, info);
}
// Autogenerated method: VRRig.AssignInstrumentToInstrumentSelfOnly
void GlobalNamespace::VRRig::AssignInstrumentToInstrumentSelfOnly(int instrumentSelfOnlyIndex, ::GlobalNamespace::TransferrableObject* instrument) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::AssignInstrumentToInstrumentSelfOnly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignInstrumentToInstrumentSelfOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instrumentSelfOnlyIndex), ::il2cpp_utils::ExtractType(instrument)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, instrumentSelfOnlyIndex, instrument);
}
// Autogenerated method: VRRig.PlaySelfOnlyInstrument
void GlobalNamespace::VRRig::PlaySelfOnlyInstrument(int selfOnlyIndex, int noteIndex, float instrumentVol, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PlaySelfOnlyInstrument");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlaySelfOnlyInstrument", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selfOnlyIndex), ::il2cpp_utils::ExtractType(noteIndex), ::il2cpp_utils::ExtractType(instrumentVol), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, selfOnlyIndex, noteIndex, instrumentVol, info);
}
// Autogenerated method: VRRig.PlayHandTapLocal
void GlobalNamespace::VRRig::PlayHandTapLocal(int soundIndex, bool isLeftHand, float tapVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PlayHandTapLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayHandTapLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(soundIndex), ::il2cpp_utils::ExtractType(isLeftHand), ::il2cpp_utils::ExtractType(tapVolume)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, soundIndex, isLeftHand, tapVolume);
}
// Autogenerated method: VRRig.PlaySplashEffect
void GlobalNamespace::VRRig::PlaySplashEffect(::UnityEngine::Vector3 splashPosition, ::UnityEngine::Quaternion splashRotation, float splashScale, float boundingRadius, bool bigSplash, bool enteringWater, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PlaySplashEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlaySplashEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(splashPosition), ::il2cpp_utils::ExtractType(splashRotation), ::il2cpp_utils::ExtractType(splashScale), ::il2cpp_utils::ExtractType(boundingRadius), ::il2cpp_utils::ExtractType(bigSplash), ::il2cpp_utils::ExtractType(enteringWater), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, splashPosition, splashRotation, splashScale, boundingRadius, bigSplash, enteringWater, info);
}
// Autogenerated method: VRRig.EnableNonCosmeticHandItemRPC
void GlobalNamespace::VRRig::EnableNonCosmeticHandItemRPC(bool enable, bool isLeftHand, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::EnableNonCosmeticHandItemRPC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableNonCosmeticHandItemRPC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enable), ::il2cpp_utils::ExtractType(isLeftHand), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable, isLeftHand, info);
}
// Autogenerated method: VRRig.IsMakingFistLeft
bool GlobalNamespace::VRRig::IsMakingFistLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IsMakingFistLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMakingFistLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.IsMakingFistRight
bool GlobalNamespace::VRRig::IsMakingFistRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IsMakingFistRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMakingFistRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.GetMakingFist
::GlobalNamespace::VRMap* GlobalNamespace::VRRig::GetMakingFist(bool debug, ByRef<bool> isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GetMakingFist");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMakingFist", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(debug), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRMap*, false>(this, ___internal__method, debug, byref(isLeftHand));
}
// Autogenerated method: VRRig.PlayGeodeEffect
void GlobalNamespace::VRRig::PlayGeodeEffect(::UnityEngine::Vector3 hitPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PlayGeodeEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayGeodeEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hitPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hitPosition);
}
// Autogenerated method: VRRig.PlayClimbSound
void GlobalNamespace::VRRig::PlayClimbSound(::UnityEngine::AudioClip* clip, bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PlayClimbSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayClimbSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(isLeftHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, clip, isLeftHand);
}
// Autogenerated method: VRRig.UpdateCosmetics
void GlobalNamespace::VRRig::UpdateCosmetics(::ArrayW<::StringW> currentItems, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UpdateCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentItems), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentItems, info);
}
// Autogenerated method: VRRig.UpdateCosmeticsWithTryon
void GlobalNamespace::VRRig::UpdateCosmeticsWithTryon(::ArrayW<::StringW> currentItems, ::ArrayW<::StringW> tryOnItems, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UpdateCosmeticsWithTryon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCosmeticsWithTryon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentItems), ::il2cpp_utils::ExtractType(tryOnItems), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentItems, tryOnItems, info);
}
// Autogenerated method: VRRig.LocalUpdateCosmetics
void GlobalNamespace::VRRig::LocalUpdateCosmetics(::GorillaNetworking::CosmeticsController::CosmeticSet* newSet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::LocalUpdateCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalUpdateCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newSet);
}
// Autogenerated method: VRRig.LocalUpdateCosmeticsWithTryon
void GlobalNamespace::VRRig::LocalUpdateCosmeticsWithTryon(::GorillaNetworking::CosmeticsController::CosmeticSet* newSet, ::GorillaNetworking::CosmeticsController::CosmeticSet* newTryOnSet) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::LocalUpdateCosmeticsWithTryon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalUpdateCosmeticsWithTryon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSet), ::il2cpp_utils::ExtractType(newTryOnSet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newSet, newTryOnSet);
}
// Autogenerated method: VRRig.CheckForEarlyAccess
void GlobalNamespace::VRRig::CheckForEarlyAccess() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::CheckForEarlyAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckForEarlyAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.SetCosmeticsActive
void GlobalNamespace::VRRig::SetCosmeticsActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetCosmeticsActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCosmeticsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.GetCosmeticsPlayFabCatalogData
void GlobalNamespace::VRRig::GetCosmeticsPlayFabCatalogData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GetCosmeticsPlayFabCatalogData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCosmeticsPlayFabCatalogData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.GenerateFingerAngleLookupTables
void GlobalNamespace::VRRig::GenerateFingerAngleLookupTables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GenerateFingerAngleLookupTables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateFingerAngleLookupTables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.GenerateTableThumb
void GlobalNamespace::VRRig::GenerateTableThumb(ByRef<::GlobalNamespace::VRMapThumb*> thumb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GenerateTableThumb");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTableThumb", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thumb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(thumb));
}
// Autogenerated method: VRRig.GenerateTableIndex
void GlobalNamespace::VRRig::GenerateTableIndex(ByRef<::GlobalNamespace::VRMapIndex*> index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GenerateTableIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTableIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(index));
}
// Autogenerated method: VRRig.GenerateTableMiddle
void GlobalNamespace::VRRig::GenerateTableMiddle(ByRef<::GlobalNamespace::VRMapMiddle*> middle) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::GenerateTableMiddle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTableMiddle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(middle)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(middle));
}
// Autogenerated method: VRRig.SanitizeQuaternion
::UnityEngine::Quaternion GlobalNamespace::VRRig::SanitizeQuaternion(::UnityEngine::Quaternion quat) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SanitizeQuaternion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SanitizeQuaternion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(quat)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, quat);
}
// Autogenerated method: VRRig.SanitizeVector3
::UnityEngine::Vector3 GlobalNamespace::VRRig::SanitizeVector3(::UnityEngine::Vector3 vec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SanitizeVector3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SanitizeVector3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vec)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, vec);
}
// Autogenerated method: VRRig.IncrementRPC
void GlobalNamespace::VRRig::IncrementRPC(::GlobalNamespace::PhotonMessageInfoWrapped info, ::StringW sourceCall) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IncrementRPC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementRPC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(sourceCall)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, sourceCall);
}
// Autogenerated method: VRRig.IncrementRPC
void GlobalNamespace::VRRig::IncrementRPC(::Photon::Pun::PhotonMessageInfo info, ::StringW sourceCall) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IncrementRPC");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementRPC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(sourceCall)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, sourceCall);
}
// Autogenerated method: VRRig.AddVelocityToQueue
void GlobalNamespace::VRRig::AddVelocityToQueue(::UnityEngine::Vector3 position, double serverTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::AddVelocityToQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddVelocityToQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(serverTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, serverTime);
}
// Autogenerated method: VRRig.ReturnVelocityAtTime
::UnityEngine::Vector3 GlobalNamespace::VRRig::ReturnVelocityAtTime(double timeToReturn) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ReturnVelocityAtTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnVelocityAtTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeToReturn)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, timeToReturn);
}
// Autogenerated method: VRRig.LatestVelocity
::UnityEngine::Vector3 GlobalNamespace::VRRig::LatestVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::LatestVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LatestVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.CheckDistance
bool GlobalNamespace::VRRig::CheckDistance(::UnityEngine::Vector3 position, float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::CheckDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, position, max);
}
// Autogenerated method: VRRig.CheckTagDistanceRollback
bool GlobalNamespace::VRRig::CheckTagDistanceRollback(::GlobalNamespace::VRRig* otherRig, float max, float timeInterval) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::CheckTagDistanceRollback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckTagDistanceRollback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(otherRig), ::il2cpp_utils::ExtractType(max), ::il2cpp_utils::ExtractType(timeInterval)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, otherRig, max, timeInterval);
}
// Autogenerated method: VRRig.add_OnColorChanged
void GlobalNamespace::VRRig::add_OnColorChanged(::System::Action_1<::UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::add_OnColorChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnColorChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.remove_OnColorChanged
void GlobalNamespace::VRRig::remove_OnColorChanged(::System::Action_1<::UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::remove_OnColorChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnColorChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.SetColor
void GlobalNamespace::VRRig::SetColor(::UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: VRRig.OnColorInitialized
void GlobalNamespace::VRRig::OnColorInitialized(::System::Action_1<::UnityEngine::Color>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::OnColorInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnColorInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: VRRig.OnEnable
void GlobalNamespace::VRRig::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.IPreDisable.PreDisable
void GlobalNamespace::VRRig::IPreDisable_PreDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IPreDisable.PreDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.OnDisable
void GlobalNamespace::VRRig::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.NetInitialize
void GlobalNamespace::VRRig::NetInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::NetInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NetInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.UpdateFriendshipBracelet
void GlobalNamespace::VRRig::UpdateFriendshipBracelet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UpdateFriendshipBracelet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFriendshipBracelet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.EnableHuntWatch
void GlobalNamespace::VRRig::EnableHuntWatch(bool on) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::EnableHuntWatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableHuntWatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(on)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, on);
}
// Autogenerated method: VRRig.EnableBattleCosmetics
void GlobalNamespace::VRRig::EnableBattleCosmetics(bool on) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::EnableBattleCosmetics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableBattleCosmetics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(on)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, on);
}
// Autogenerated method: VRRig.EnableBuilderResizeWatch
void GlobalNamespace::VRRig::EnableBuilderResizeWatch(bool on) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::EnableBuilderResizeWatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableBuilderResizeWatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(on)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, on);
}
// Autogenerated method: VRRig.UpdateReplacementVoice
void GlobalNamespace::VRRig::UpdateReplacementVoice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::UpdateReplacementVoice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateReplacementVoice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.ShouldPlayReplacementVoice
bool GlobalNamespace::VRRig::ShouldPlayReplacementVoice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::ShouldPlayReplacementVoice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldPlayReplacementVoice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.IUserCosmeticsCallback.get_PendingUpdate
bool GlobalNamespace::VRRig::IUserCosmeticsCallback_get_PendingUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IUserCosmeticsCallback.get_PendingUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig*), 10));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig.IUserCosmeticsCallback.set_PendingUpdate
void GlobalNamespace::VRRig::IUserCosmeticsCallback_set_PendingUpdate(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IUserCosmeticsCallback.set_PendingUpdate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig*), 11));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRig.IUserCosmeticsCallback.OnGetUserCosmetics
bool GlobalNamespace::VRRig::IUserCosmeticsCallback_OnGetUserCosmetics(::StringW cosmetics) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::IUserCosmeticsCallback.OnGetUserCosmetics");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig*), 9));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, cosmetics);
}
// Autogenerated method: VRRig.CacheLocalRig
void GlobalNamespace::VRRig::CacheLocalRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::CacheLocalRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "CacheLocalRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRRig.get_LocalRig
::GlobalNamespace::VRRig* GlobalNamespace::VRRig::get_LocalRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_LocalRig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", "get_LocalRig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::VRRig*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRRig.get_isLocal
bool GlobalNamespace::VRRig::get_isLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::get_isLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig..cctor
void GlobalNamespace::VRRig::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRRig.<GetCosmeticsPlayFabCatalogData>b__287_0
void GlobalNamespace::VRRig::$GetCosmeticsPlayFabCatalogData$b__287_0(::PlayFab::ClientModels::GetUserInventoryResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::<GetCosmeticsPlayFabCatalogData>b__287_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetCosmeticsPlayFabCatalogData>b__287_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: VRRig.<GetCosmeticsPlayFabCatalogData>b__287_1
void GlobalNamespace::VRRig::$GetCosmeticsPlayFabCatalogData$b__287_1(::PlayFab::PlayFabError* error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::<GetCosmeticsPlayFabCatalogData>b__287_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetCosmeticsPlayFabCatalogData>b__287_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, error);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRRig/PartyMemberStatus
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRRig/PartyMemberStatus NeedsUpdate
::GlobalNamespace::VRRig::PartyMemberStatus GlobalNamespace::VRRig::PartyMemberStatus::_get_NeedsUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PartyMemberStatus::_get_NeedsUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::PartyMemberStatus>("", "VRRig/PartyMemberStatus", "NeedsUpdate"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/PartyMemberStatus NeedsUpdate
void GlobalNamespace::VRRig::PartyMemberStatus::_set_NeedsUpdate(::GlobalNamespace::VRRig::PartyMemberStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PartyMemberStatus::_set_NeedsUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/PartyMemberStatus", "NeedsUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public VRRig/PartyMemberStatus InLocalParty
::GlobalNamespace::VRRig::PartyMemberStatus GlobalNamespace::VRRig::PartyMemberStatus::_get_InLocalParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PartyMemberStatus::_get_InLocalParty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::PartyMemberStatus>("", "VRRig/PartyMemberStatus", "InLocalParty"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/PartyMemberStatus InLocalParty
void GlobalNamespace::VRRig::PartyMemberStatus::_set_InLocalParty(::GlobalNamespace::VRRig::PartyMemberStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PartyMemberStatus::_set_InLocalParty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/PartyMemberStatus", "InLocalParty", value));
}
// Autogenerated static field getter
// Get static field: static public VRRig/PartyMemberStatus NotInLocalParty
::GlobalNamespace::VRRig::PartyMemberStatus GlobalNamespace::VRRig::PartyMemberStatus::_get_NotInLocalParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PartyMemberStatus::_get_NotInLocalParty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::PartyMemberStatus>("", "VRRig/PartyMemberStatus", "NotInLocalParty"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/PartyMemberStatus NotInLocalParty
void GlobalNamespace::VRRig::PartyMemberStatus::_set_NotInLocalParty(::GlobalNamespace::VRRig::PartyMemberStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PartyMemberStatus::_set_NotInLocalParty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/PartyMemberStatus", "NotInLocalParty", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::PartyMemberStatus::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::PartyMemberStatus::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRRig/WearablePackedStateSlots
#include "GlobalNamespace/VRRig_WearablePackedStateSlots.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRRig/WearablePackedStateSlots Hat
::GlobalNamespace::VRRig::WearablePackedStateSlots GlobalNamespace::VRRig::WearablePackedStateSlots::_get_Hat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::WearablePackedStateSlots::_get_Hat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::WearablePackedStateSlots>("", "VRRig/WearablePackedStateSlots", "Hat"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/WearablePackedStateSlots Hat
void GlobalNamespace::VRRig::WearablePackedStateSlots::_set_Hat(::GlobalNamespace::VRRig::WearablePackedStateSlots value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::WearablePackedStateSlots::_set_Hat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/WearablePackedStateSlots", "Hat", value));
}
// Autogenerated static field getter
// Get static field: static public VRRig/WearablePackedStateSlots LeftHand
::GlobalNamespace::VRRig::WearablePackedStateSlots GlobalNamespace::VRRig::WearablePackedStateSlots::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::WearablePackedStateSlots::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::WearablePackedStateSlots>("", "VRRig/WearablePackedStateSlots", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/WearablePackedStateSlots LeftHand
void GlobalNamespace::VRRig::WearablePackedStateSlots::_set_LeftHand(::GlobalNamespace::VRRig::WearablePackedStateSlots value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::WearablePackedStateSlots::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/WearablePackedStateSlots", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public VRRig/WearablePackedStateSlots RightHand
::GlobalNamespace::VRRig::WearablePackedStateSlots GlobalNamespace::VRRig::WearablePackedStateSlots::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::WearablePackedStateSlots::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::WearablePackedStateSlots>("", "VRRig/WearablePackedStateSlots", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/WearablePackedStateSlots RightHand
void GlobalNamespace::VRRig::WearablePackedStateSlots::_set_RightHand(::GlobalNamespace::VRRig::WearablePackedStateSlots value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::WearablePackedStateSlots::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/WearablePackedStateSlots", "RightHand", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::WearablePackedStateSlots::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::WearablePackedStateSlots::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRRig/VelocityTime
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 vel
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRRig::VelocityTime::dyn_vel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::VelocityTime::dyn_vel");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vel"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double time
[[deprecated("Use field access instead!")]] double& GlobalNamespace::VRRig::VelocityTime::dyn_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::VelocityTime::dyn_time");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRRig/VelocityTime..ctor
// ABORTED elsewhere.  GlobalNamespace::VRRig::VelocityTime::VelocityTime(::UnityEngine::Vector3 velocity, double velTime)
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRRig/QAxis
#include "GlobalNamespace/VRRig_QAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRRig/QAxis X
::GlobalNamespace::VRRig::QAxis GlobalNamespace::VRRig::QAxis::_get_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::_get_X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::QAxis>("", "VRRig/QAxis", "X"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/QAxis X
void GlobalNamespace::VRRig::QAxis::_set_X(::GlobalNamespace::VRRig::QAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::_set_X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/QAxis", "X", value));
}
// Autogenerated static field getter
// Get static field: static public VRRig/QAxis Y
::GlobalNamespace::VRRig::QAxis GlobalNamespace::VRRig::QAxis::_get_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::_get_Y");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::QAxis>("", "VRRig/QAxis", "Y"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/QAxis Y
void GlobalNamespace::VRRig::QAxis::_set_Y(::GlobalNamespace::VRRig::QAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::_set_Y");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/QAxis", "Y", value));
}
// Autogenerated static field getter
// Get static field: static public VRRig/QAxis Z
::GlobalNamespace::VRRig::QAxis GlobalNamespace::VRRig::QAxis::_get_Z() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::_get_Z");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::QAxis>("", "VRRig/QAxis", "Z"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/QAxis Z
void GlobalNamespace::VRRig::QAxis::_set_Z(::GlobalNamespace::VRRig::QAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::_set_Z");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/QAxis", "Z", value));
}
// Autogenerated static field getter
// Get static field: static public VRRig/QAxis W
::GlobalNamespace::VRRig::QAxis GlobalNamespace::VRRig::QAxis::_get_W() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::_get_W");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::QAxis>("", "VRRig/QAxis", "W"));
}
// Autogenerated static field setter
// Set static field: static public VRRig/QAxis W
void GlobalNamespace::VRRig::QAxis::_set_W(::GlobalNamespace::VRRig::QAxis value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::_set_W");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRig/QAxis", "W", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::QAxis::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::QAxis::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRRig/<>c
#include "GlobalNamespace/VRRig_--c.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly VRRig/<>c <>9
::GlobalNamespace::VRRig::$$c* GlobalNamespace::VRRig::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::GlobalNamespace::VRRig::$$c*>("", "VRRig/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly VRRig/<>c <>9
void GlobalNamespace::VRRig::$$c::_set_$$9(::GlobalNamespace::VRRig::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "VRRig/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Predicate`1<System.Char> <>9__262_0
::System::Predicate_1<::Il2CppChar>* GlobalNamespace::VRRig::$$c::_get_$$9__262_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::_get_$$9__262_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Predicate_1<::Il2CppChar>*>("", "VRRig/<>c", "<>9__262_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Predicate`1<System.Char> <>9__262_0
void GlobalNamespace::VRRig::$$c::_set_$$9__262_0(::System::Predicate_1<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::_set_$$9__262_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "VRRig/<>c", "<>9__262_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<UnityEngine.Color> <>9__307_0
::System::Action_1<::UnityEngine::Color>* GlobalNamespace::VRRig::$$c::_get_$$9__307_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::_get_$$9__307_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::UnityEngine::Color>*>("", "VRRig/<>c", "<>9__307_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<UnityEngine.Color> <>9__307_0
void GlobalNamespace::VRRig::$$c::_set_$$9__307_0(::System::Action_1<::UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::_set_$$9__307_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "VRRig/<>c", "<>9__307_0", value)));
}
// Autogenerated method: VRRig/<>c..cctor
void GlobalNamespace::VRRig::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRig/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: VRRig/<>c.<NormalizeName>b__262_0
bool GlobalNamespace::VRRig::$$c::$NormalizeName$b__262_0(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::<NormalizeName>b__262_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<NormalizeName>b__262_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, c);
}
// Autogenerated method: VRRig/<>c.<SetColor>b__307_0
void GlobalNamespace::VRRig::$$c::$SetColor$b__307_0(::UnityEngine::Color color1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$$c::<SetColor>b__307_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SetColor>b__307_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, color1);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRRig/<OccasionalUpdate>d__227
#include "GlobalNamespace/VRRig_-OccasionalUpdate-d__227.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRig::$OccasionalUpdate$d__227::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$OccasionalUpdate$d__227::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::VRRig::$OccasionalUpdate$d__227::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$OccasionalUpdate$d__227::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRRig/<OccasionalUpdate>d__227.System.IDisposable.Dispose
void GlobalNamespace::VRRig::$OccasionalUpdate$d__227::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$OccasionalUpdate$d__227::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig::$OccasionalUpdate$d__227*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig/<OccasionalUpdate>d__227.MoveNext
bool GlobalNamespace::VRRig::$OccasionalUpdate$d__227::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$OccasionalUpdate$d__227::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig::$OccasionalUpdate$d__227*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRig/<OccasionalUpdate>d__227.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::VRRig::$OccasionalUpdate$d__227::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$OccasionalUpdate$d__227::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig::$OccasionalUpdate$d__227*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VRRig/<OccasionalUpdate>d__227.System.Collections.IEnumerator.Reset
void GlobalNamespace::VRRig::$OccasionalUpdate$d__227::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$OccasionalUpdate$d__227::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig::$OccasionalUpdate$d__227*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRig/<OccasionalUpdate>d__227.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::VRRig::$OccasionalUpdate$d__227::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRig::$OccasionalUpdate$d__227::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRig::$OccasionalUpdate$d__227*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRMap
#include "GlobalNamespace/VRMap.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.XR.XRNode vrTargetNode
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& GlobalNamespace::VRMap::dyn_vrTargetNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_vrTargetNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrTargetNode"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::XRNode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform overrideTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMap::dyn_overrideTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_overrideTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "overrideTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rigTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMap::dyn_rigTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_rigTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 trackingPositionOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMap::dyn_trackingPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_trackingPositionOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackingPositionOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 trackingRotationOffset
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMap::dyn_trackingRotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_trackingRotationOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "trackingRotationOffset"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform headTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMap::dyn_headTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_headTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 syncPos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMap::dyn_syncPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_syncPos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncPos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion syncRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::VRMap::dyn_syncRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_syncRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single calcT
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMap::dyn_calcT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_calcT");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calcT"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.InputDevice myInputDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::VRMap::dyn_myInputDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_myInputDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myInputDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 tempPosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMap::dyn_tempPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_tempPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempPosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion tempRotation
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::VRMap::dyn_tempRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_tempRotation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempRotation"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 tempInt
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMap::dyn_tempInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::dyn_tempInt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempInt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRMap.MapOther
void GlobalNamespace::VRMap::MapOther(float lerpValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::MapOther");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapOther", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lerpValue)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue);
}
// Autogenerated method: VRMap.MapMine
void GlobalNamespace::VRMap::MapMine(float ratio, ::UnityEngine::Transform* playerOffsetTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::MapMine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapMine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ratio), ::il2cpp_utils::ExtractType(playerOffsetTransform)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ratio, playerOffsetTransform);
}
// Autogenerated method: VRMap.MapOtherFinger
void GlobalNamespace::VRMap::MapOtherFinger(float handSync, float lerpValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::MapOtherFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, handSync, lerpValue);
}
// Autogenerated method: VRMap.MapMyFinger
void GlobalNamespace::VRMap::MapMyFinger(float lerpValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::MapMyFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue);
}
// Autogenerated method: VRMap.LerpFinger
void GlobalNamespace::VRMap::LerpFinger(float lerpValue, bool isOther) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::LerpFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue, isOther);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRMapIndex
#include "GlobalNamespace/VRMapIndex.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.XR.InputFeatureUsage inputAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputFeatureUsage& GlobalNamespace::VRMapIndex::dyn_inputAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_inputAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputFeatureUsage*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single triggerTouch
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapIndex::dyn_triggerTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_triggerTouch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggerTouch"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single triggerValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapIndex::dyn_triggerValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_triggerValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "triggerValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fingerBone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMapIndex::dyn_fingerBone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_fingerBone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingerBone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fingerBone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMapIndex::dyn_fingerBone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_fingerBone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingerBone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fingerBone3
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMapIndex::dyn_fingerBone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_fingerBone3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingerBone3"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single closedAngles
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapIndex::dyn_closedAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_closedAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngles"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 closedAngle1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapIndex::dyn_closedAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_closedAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngle1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 closedAngle2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapIndex::dyn_closedAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_closedAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngle2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 closedAngle3
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapIndex::dyn_closedAngle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_closedAngle3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngle3"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingAngle1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapIndex::dyn_startingAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_startingAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngle1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingAngle2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapIndex::dyn_startingAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_startingAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngle2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingAngle3
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapIndex::dyn_startingAngle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_startingAngle3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngle3"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastAngle1
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapIndex::dyn_lastAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_lastAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngle1"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastAngle2
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapIndex::dyn_lastAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_lastAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngle2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastAngle3
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapIndex::dyn_lastAngle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_lastAngle3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngle3"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.InputDevice myInputDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::VRMapIndex::dyn_myInputDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_myInputDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myInputDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] angle1Table
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::VRMapIndex::dyn_angle1Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_angle1Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle1Table"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] angle2Table
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::VRMapIndex::dyn_angle2Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_angle2Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle2Table"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] angle3Table
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::VRMapIndex::dyn_angle3Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_angle3Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle3Table"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentAngle1
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapIndex::dyn_currentAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_currentAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngle1"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentAngle2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapIndex::dyn_currentAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_currentAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngle2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentAngle3
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapIndex::dyn_currentAngle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_currentAngle3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngle3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 myTempInt
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapIndex::dyn_myTempInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::dyn_myTempInt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myTempInt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRMapIndex.MapMyFinger
void GlobalNamespace::VRMapIndex::MapMyFinger(float lerpValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::MapMyFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue);
}
// Autogenerated method: VRMapIndex.LerpFinger
void GlobalNamespace::VRMapIndex::LerpFinger(float lerpValue, bool isOther) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapIndex::LerpFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue, isOther);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRMapMiddle
#include "GlobalNamespace/VRMapMiddle.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.XR.InputFeatureUsage inputAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputFeatureUsage& GlobalNamespace::VRMapMiddle::dyn_inputAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_inputAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputFeatureUsage*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single gripValue
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapMiddle::dyn_gripValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_gripValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gripValue"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fingerBone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMapMiddle::dyn_fingerBone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_fingerBone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingerBone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fingerBone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMapMiddle::dyn_fingerBone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_fingerBone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingerBone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fingerBone3
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMapMiddle::dyn_fingerBone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_fingerBone3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingerBone3"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single closedAngles
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapMiddle::dyn_closedAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_closedAngles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngles"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 closedAngle1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapMiddle::dyn_closedAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_closedAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngle1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 closedAngle2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapMiddle::dyn_closedAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_closedAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngle2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 closedAngle3
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapMiddle::dyn_closedAngle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_closedAngle3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngle3"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingAngle1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapMiddle::dyn_startingAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_startingAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngle1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingAngle2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapMiddle::dyn_startingAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_startingAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngle2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingAngle3
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapMiddle::dyn_startingAngle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_startingAngle3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngle3"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] angle1Table
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::VRMapMiddle::dyn_angle1Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_angle1Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle1Table"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] angle2Table
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::VRMapMiddle::dyn_angle2Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_angle2Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle2Table"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] angle3Table
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::VRMapMiddle::dyn_angle3Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_angle3Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle3Table"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastAngle1
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapMiddle::dyn_lastAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_lastAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngle1"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastAngle2
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapMiddle::dyn_lastAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_lastAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngle2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastAngle3
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapMiddle::dyn_lastAngle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_lastAngle3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngle3"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentAngle1
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapMiddle::dyn_currentAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_currentAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngle1"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentAngle2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapMiddle::dyn_currentAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_currentAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngle2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentAngle3
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapMiddle::dyn_currentAngle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_currentAngle3");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngle3"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.InputDevice tempDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::VRMapMiddle::dyn_tempDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_tempDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 myTempInt
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapMiddle::dyn_myTempInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::dyn_myTempInt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myTempInt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRMapMiddle.MapMyFinger
void GlobalNamespace::VRMapMiddle::MapMyFinger(float lerpValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::MapMyFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue);
}
// Autogenerated method: VRMapMiddle.LerpFinger
void GlobalNamespace::VRMapMiddle::LerpFinger(float lerpValue, bool isOther) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapMiddle::LerpFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue, isOther);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRMapThumb
#include "GlobalNamespace/VRMapThumb.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.XR.InputFeatureUsage inputAxis
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputFeatureUsage& GlobalNamespace::VRMapThumb::dyn_inputAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_inputAxis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inputAxis"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputFeatureUsage*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean primaryButtonTouch
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRMapThumb::dyn_primaryButtonTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_primaryButtonTouch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "primaryButtonTouch"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean primaryButtonPress
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRMapThumb::dyn_primaryButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_primaryButtonPress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "primaryButtonPress"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean secondaryButtonTouch
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRMapThumb::dyn_secondaryButtonTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_secondaryButtonTouch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "secondaryButtonTouch"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean secondaryButtonPress
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRMapThumb::dyn_secondaryButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_secondaryButtonPress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "secondaryButtonPress"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fingerBone1
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMapThumb::dyn_fingerBone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_fingerBone1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingerBone1"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform fingerBone2
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::VRMapThumb::dyn_fingerBone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_fingerBone2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fingerBone2"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 closedAngle1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapThumb::dyn_closedAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_closedAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngle1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 closedAngle2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapThumb::dyn_closedAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_closedAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "closedAngle2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingAngle1
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapThumb::dyn_startingAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_startingAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngle1"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 startingAngle2
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::VRMapThumb::dyn_startingAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_startingAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "startingAngle2"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] angle1Table
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::VRMapThumb::dyn_angle1Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_angle1Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle1Table"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Quaternion[] angle2Table
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& GlobalNamespace::VRMapThumb::dyn_angle2Table() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_angle2Table");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angle2Table"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentAngle1
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapThumb::dyn_currentAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_currentAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngle1"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single currentAngle2
[[deprecated("Use field access instead!")]] float& GlobalNamespace::VRMapThumb::dyn_currentAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_currentAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngle2"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastAngle1
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapThumb::dyn_lastAngle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_lastAngle1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngle1"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 lastAngle2
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapThumb::dyn_lastAngle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_lastAngle2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngle2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.XR.InputDevice tempDevice
[[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& GlobalNamespace::VRMapThumb::dyn_tempDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_tempDevice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempDevice"))->offset;
  return *reinterpret_cast<::UnityEngine::XR::InputDevice*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 myTempInt
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRMapThumb::dyn_myTempInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::dyn_myTempInt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myTempInt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRMapThumb.MapMyFinger
void GlobalNamespace::VRMapThumb::MapMyFinger(float lerpValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::MapMyFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue);
}
// Autogenerated method: VRMapThumb.LerpFinger
void GlobalNamespace::VRMapThumb::LerpFinger(float lerpValue, bool isOther) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMapThumb::LerpFinger");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRMap*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, lerpValue, isOther);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: VRRigReliableState
#include "GlobalNamespace/VRRigReliableState.hpp"
// Including type: BodyDockPositions
#include "GlobalNamespace/BodyDockPositions.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Photon.Pun.PhotonStream
#include "Photon/Pun/PhotonStream.hpp"
// Including type: Photon.Pun.PhotonMessageInfo
#include "Photon/Pun/PhotonMessageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int64 IS_MIC_ENABLED_BIT
int64_t GlobalNamespace::VRRigReliableState::_get_IS_MIC_ENABLED_BIT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_IS_MIC_ENABLED_BIT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "VRRigReliableState", "IS_MIC_ENABLED_BIT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 IS_MIC_ENABLED_BIT
void GlobalNamespace::VRRigReliableState::_set_IS_MIC_ENABLED_BIT(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_IS_MIC_ENABLED_BIT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "IS_MIC_ENABLED_BIT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 BRACELET_LEFTHAND_BIT
int64_t GlobalNamespace::VRRigReliableState::_get_BRACELET_LEFTHAND_BIT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_BRACELET_LEFTHAND_BIT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "VRRigReliableState", "BRACELET_LEFTHAND_BIT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 BRACELET_LEFTHAND_BIT
void GlobalNamespace::VRRigReliableState::_set_BRACELET_LEFTHAND_BIT(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_BRACELET_LEFTHAND_BIT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "BRACELET_LEFTHAND_BIT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 BUILDER_WATCH_ENABLED_BIT
int64_t GlobalNamespace::VRRigReliableState::_get_BUILDER_WATCH_ENABLED_BIT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_BUILDER_WATCH_ENABLED_BIT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("", "VRRigReliableState", "BUILDER_WATCH_ENABLED_BIT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 BUILDER_WATCH_ENABLED_BIT
void GlobalNamespace::VRRigReliableState::_set_BUILDER_WATCH_ENABLED_BIT(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_BUILDER_WATCH_ENABLED_BIT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "BUILDER_WATCH_ENABLED_BIT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 BRACELET_NUM_BEADS_SHIFT
int GlobalNamespace::VRRigReliableState::_get_BRACELET_NUM_BEADS_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_BRACELET_NUM_BEADS_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "BRACELET_NUM_BEADS_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 BRACELET_NUM_BEADS_SHIFT
void GlobalNamespace::VRRigReliableState::_set_BRACELET_NUM_BEADS_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_BRACELET_NUM_BEADS_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "BRACELET_NUM_BEADS_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 LPROJECTILECOLOR_R_SHIFT
int GlobalNamespace::VRRigReliableState::_get_LPROJECTILECOLOR_R_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_LPROJECTILECOLOR_R_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "LPROJECTILECOLOR_R_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LPROJECTILECOLOR_R_SHIFT
void GlobalNamespace::VRRigReliableState::_set_LPROJECTILECOLOR_R_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_LPROJECTILECOLOR_R_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "LPROJECTILECOLOR_R_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 LPROJECTILECOLOR_G_SHIFT
int GlobalNamespace::VRRigReliableState::_get_LPROJECTILECOLOR_G_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_LPROJECTILECOLOR_G_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "LPROJECTILECOLOR_G_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LPROJECTILECOLOR_G_SHIFT
void GlobalNamespace::VRRigReliableState::_set_LPROJECTILECOLOR_G_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_LPROJECTILECOLOR_G_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "LPROJECTILECOLOR_G_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 LPROJECTILECOLOR_B_SHIFT
int GlobalNamespace::VRRigReliableState::_get_LPROJECTILECOLOR_B_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_LPROJECTILECOLOR_B_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "LPROJECTILECOLOR_B_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LPROJECTILECOLOR_B_SHIFT
void GlobalNamespace::VRRigReliableState::_set_LPROJECTILECOLOR_B_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_LPROJECTILECOLOR_B_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "LPROJECTILECOLOR_B_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 RPROJECTILECOLOR_R_SHIFT
int GlobalNamespace::VRRigReliableState::_get_RPROJECTILECOLOR_R_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_RPROJECTILECOLOR_R_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "RPROJECTILECOLOR_R_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 RPROJECTILECOLOR_R_SHIFT
void GlobalNamespace::VRRigReliableState::_set_RPROJECTILECOLOR_R_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_RPROJECTILECOLOR_R_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "RPROJECTILECOLOR_R_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 RPROJECTILECOLOR_G_SHIFT
int GlobalNamespace::VRRigReliableState::_get_RPROJECTILECOLOR_G_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_RPROJECTILECOLOR_G_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "RPROJECTILECOLOR_G_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 RPROJECTILECOLOR_G_SHIFT
void GlobalNamespace::VRRigReliableState::_set_RPROJECTILECOLOR_G_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_RPROJECTILECOLOR_G_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "RPROJECTILECOLOR_G_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 RPROJECTILECOLOR_B_SHIFT
int GlobalNamespace::VRRigReliableState::_get_RPROJECTILECOLOR_B_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_RPROJECTILECOLOR_B_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "RPROJECTILECOLOR_B_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 RPROJECTILECOLOR_B_SHIFT
void GlobalNamespace::VRRigReliableState::_set_RPROJECTILECOLOR_B_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_RPROJECTILECOLOR_B_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "RPROJECTILECOLOR_B_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 POS_STATES_SHIFT
int GlobalNamespace::VRRigReliableState::_get_POS_STATES_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_POS_STATES_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "POS_STATES_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 POS_STATES_SHIFT
void GlobalNamespace::VRRigReliableState::_set_POS_STATES_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_POS_STATES_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "POS_STATES_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ITEM_STATES_SHIFT
int GlobalNamespace::VRRigReliableState::_get_ITEM_STATES_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_ITEM_STATES_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "ITEM_STATES_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ITEM_STATES_SHIFT
void GlobalNamespace::VRRigReliableState::_set_ITEM_STATES_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_ITEM_STATES_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "ITEM_STATES_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 DOCK_POSITIONS_SHIFT
int GlobalNamespace::VRRigReliableState::_get_DOCK_POSITIONS_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_DOCK_POSITIONS_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "DOCK_POSITIONS_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 DOCK_POSITIONS_SHIFT
void GlobalNamespace::VRRigReliableState::_set_DOCK_POSITIONS_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_DOCK_POSITIONS_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "DOCK_POSITIONS_SHIFT", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 BRACELET_SELF_INDEX_SHIFT
int GlobalNamespace::VRRigReliableState::_get_BRACELET_SELF_INDEX_SHIFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_get_BRACELET_SELF_INDEX_SHIFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "VRRigReliableState", "BRACELET_SELF_INDEX_SHIFT"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 BRACELET_SELF_INDEX_SHIFT
void GlobalNamespace::VRRigReliableState::_set_BRACELET_SELF_INDEX_SHIFT(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::_set_BRACELET_SELF_INDEX_SHIFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRRigReliableState", "BRACELET_SELF_INDEX_SHIFT", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32[] activeTransferrableObjectIndex
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::VRRigReliableState::dyn_activeTransferrableObjectIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_activeTransferrableObjectIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activeTransferrableObjectIndex"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/PositionState[] transferrablePosStates
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransferrableObject::PositionState>& GlobalNamespace::VRRigReliableState::dyn_transferrablePosStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_transferrablePosStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transferrablePosStates"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TransferrableObject::PositionState>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject/ItemStates[] transferrableItemStates
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransferrableObject::ItemStates>& GlobalNamespace::VRRigReliableState::dyn_transferrableItemStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_transferrableItemStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transferrableItemStates"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TransferrableObject::ItemStates>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BodyDockPositions/DropPositions[] transferableDockPositions
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BodyDockPositions::DropPositions>& GlobalNamespace::VRRigReliableState::dyn_transferableDockPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_transferableDockPositions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transferableDockPositions"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BodyDockPositions::DropPositions>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 wearablesPackedStates
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRigReliableState::dyn_wearablesPackedStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_wearablesPackedStates");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "wearablesPackedStates"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 lThrowableProjectileIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRigReliableState::dyn_lThrowableProjectileIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_lThrowableProjectileIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lThrowableProjectileIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 rThrowableProjectileIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRigReliableState::dyn_rThrowableProjectileIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_rThrowableProjectileIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rThrowableProjectileIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color32 lThrowableProjectileColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::VRRigReliableState::dyn_lThrowableProjectileColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_lThrowableProjectileColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lThrowableProjectileColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color32 rThrowableProjectileColor
[[deprecated("Use field access instead!")]] ::UnityEngine::Color32& GlobalNamespace::VRRigReliableState::dyn_rThrowableProjectileColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_rThrowableProjectileColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rThrowableProjectileColor"))->offset;
  return *reinterpret_cast<::UnityEngine::Color32*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 randomThrowableIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRigReliableState::dyn_randomThrowableIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_randomThrowableIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "randomThrowableIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isMicEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRigReliableState::dyn_isMicEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_isMicEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isMicEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isOfflineVRRig
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRigReliableState::dyn_isOfflineVRRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_isOfflineVRRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isOfflineVRRig"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private BodyDockPositions bDock
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BodyDockPositions*& GlobalNamespace::VRRigReliableState::dyn_bDock() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_bDock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bDock"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BodyDockPositions**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 sizeLayerMask
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRigReliableState::dyn_sizeLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_sizeLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sizeLayerMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isBraceletLeftHanded
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRigReliableState::dyn_isBraceletLeftHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_isBraceletLeftHanded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isBraceletLeftHanded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 braceletSelfIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::VRRigReliableState::dyn_braceletSelfIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_braceletSelfIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "braceletSelfIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.Color> braceletBeadColors
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Color>*& GlobalNamespace::VRRigReliableState::dyn_braceletBeadColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_braceletBeadColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "braceletBeadColors"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Color>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isBuilderWatchEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRigReliableState::dyn_isBuilderWatchEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_isBuilderWatchEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isBuilderWatchEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <isDirty>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::VRRigReliableState::dyn_$isDirty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::dyn_$isDirty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isDirty>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: VRRigReliableState.get_HasBracelet
bool GlobalNamespace::VRRigReliableState::get_HasBracelet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::get_HasBracelet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasBracelet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRigReliableState.get_isDirty
bool GlobalNamespace::VRRigReliableState::get_isDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::get_isDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRRigReliableState.set_isDirty
void GlobalNamespace::VRRigReliableState::set_isDirty(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::set_isDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRRigReliableState.Awake
void GlobalNamespace::VRRigReliableState::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRigReliableState.OnDestroy
void GlobalNamespace::VRRigReliableState::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRigReliableState.SetIsDirty
void GlobalNamespace::VRRigReliableState::SetIsDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::SetIsDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRigReliableState.SetIsNotDirty
void GlobalNamespace::VRRigReliableState::SetIsNotDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::SetIsNotDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsNotDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRRigReliableState.SharedStart
void GlobalNamespace::VRRigReliableState::SharedStart(bool isOfflineVRRig_, ::GlobalNamespace::BodyDockPositions* bDock_) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::SharedStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SharedStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOfflineVRRig_), ::il2cpp_utils::ExtractType(bDock_)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isOfflineVRRig_, bDock_);
}
// Autogenerated method: VRRigReliableState.IGorillaSerializeable.OnSerializeWrite
void GlobalNamespace::VRRigReliableState::IGorillaSerializeable_OnSerializeWrite(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::IGorillaSerializeable.OnSerializeWrite");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRigReliableState*), 57));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: VRRigReliableState.IGorillaSerializeable.OnSerializeRead
void GlobalNamespace::VRRigReliableState::IGorillaSerializeable_OnSerializeRead(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::IGorillaSerializeable.OnSerializeRead");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::VRRigReliableState*), 56));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stream, info);
}
// Autogenerated method: VRRigReliableState.PackBeadColors
int64_t GlobalNamespace::VRRigReliableState::PackBeadColors(::System::Collections::Generic::List_1<::UnityEngine::Color>* beadColors, int fromIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::PackBeadColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRigReliableState", "PackBeadColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beadColors), ::il2cpp_utils::ExtractType(fromIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, beadColors, fromIndex);
}
// Autogenerated method: VRRigReliableState.UnpackBeadColors
void GlobalNamespace::VRRigReliableState::UnpackBeadColors(int64_t packed, int startIndex, int endIndex, ::System::Collections::Generic::List_1<::UnityEngine::Color>* beadColorsResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::UnpackBeadColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRRigReliableState", "UnpackBeadColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packed), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(endIndex), ::il2cpp_utils::ExtractType(beadColorsResult)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, packed, startIndex, endIndex, beadColorsResult);
}
// Autogenerated method: VRRigReliableState.OnJoinedRoom
void GlobalNamespace::VRRigReliableState::OnJoinedRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRRigReliableState::OnJoinedRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 42));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BetaButton
#include "GlobalNamespace/BetaButton.hpp"
// Including type: BetaButton/<ButtonColorUpdate>d__6
#include "GlobalNamespace/BetaButton_-ButtonColorUpdate-d__6.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject betaParent
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::BetaButton::dyn_betaParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::dyn_betaParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "betaParent"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 count
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BetaButton::dyn_count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::dyn_count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single buttonFadeTime
[[deprecated("Use field access instead!")]] float& GlobalNamespace::BetaButton::dyn_buttonFadeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::dyn_buttonFadeTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonFadeTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text messageText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::BetaButton::dyn_messageText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::dyn_messageText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "messageText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BetaButton.ButtonColorUpdate
::System::Collections::IEnumerator* GlobalNamespace::BetaButton::ButtonColorUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::ButtonColorUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ButtonColorUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: BetaButton.Start
void GlobalNamespace::BetaButton::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BetaButton.ButtonActivation
void GlobalNamespace::BetaButton::ButtonActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::ButtonActivation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: BetaButton/<ButtonColorUpdate>d__6
#include "GlobalNamespace/BetaButton_-ButtonColorUpdate-d__6.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BetaButton <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::BetaButton*& GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::BetaButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BetaButton/<ButtonColorUpdate>d__6.System.IDisposable.Dispose
void GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BetaButton/<ButtonColorUpdate>d__6.MoveNext
bool GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BetaButton/<ButtonColorUpdate>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BetaButton/<ButtonColorUpdate>d__6.System.Collections.IEnumerator.Reset
void GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BetaButton/<ButtonColorUpdate>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BetaChecker
#include "GlobalNamespace/BetaChecker.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] objectsToEnable
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::BetaChecker::dyn_objectsToEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaChecker::dyn_objectsToEnable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectsToEnable"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean doNotEnable
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::BetaChecker::dyn_doNotEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaChecker::dyn_doNotEnable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "doNotEnable"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BetaChecker.Start
void GlobalNamespace::BetaChecker::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaChecker::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BetaChecker.Update
void GlobalNamespace::BetaChecker::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaChecker::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CheckoutCartButton
#include "GlobalNamespace/CheckoutCartButton.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticItem currentCosmeticItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::CheckoutCartButton::dyn_currentCosmeticItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::dyn_currentCosmeticItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentCosmeticItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Image currentImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::CheckoutCartButton::dyn_currentImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::dyn_currentImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.MeshRenderer button
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::CheckoutCartButton::dyn_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::dyn_button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "button"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material blank
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::CheckoutCartButton::dyn_blank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::dyn_blank");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blank"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String noCosmeticText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CheckoutCartButton::dyn_noCosmeticText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::dyn_noCosmeticText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noCosmeticText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text buttonText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::CheckoutCartButton::dyn_buttonText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::dyn_buttonText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CheckoutCartButton.Start
void GlobalNamespace::CheckoutCartButton::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CheckoutCartButton.UpdateColor
void GlobalNamespace::CheckoutCartButton::UpdateColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::UpdateColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CheckoutCartButton.ButtonActivationWithHand
void GlobalNamespace::CheckoutCartButton::ButtonActivationWithHand(bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CheckoutCartButton::ButtonActivationWithHand");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeftHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticBoundaryTrigger
#include "GlobalNamespace/CosmeticBoundaryTrigger.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private TimeSince sinceLastTryOnEvent
::GlobalNamespace::TimeSince GlobalNamespace::CosmeticBoundaryTrigger::_get_sinceLastTryOnEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticBoundaryTrigger::_get_sinceLastTryOnEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::TimeSince>("", "CosmeticBoundaryTrigger", "sinceLastTryOnEvent"));
}
// Autogenerated static field setter
// Set static field: static private TimeSince sinceLastTryOnEvent
void GlobalNamespace::CosmeticBoundaryTrigger::_set_sinceLastTryOnEvent(::GlobalNamespace::TimeSince value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticBoundaryTrigger::_set_sinceLastTryOnEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticBoundaryTrigger", "sinceLastTryOnEvent", value));
}
// Autogenerated instance field getter
// Get instance field: public VRRig rigRef
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::CosmeticBoundaryTrigger::dyn_rigRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticBoundaryTrigger::dyn_rigRef");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rigRef"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticBoundaryTrigger.OnTriggerEnter
void GlobalNamespace::CosmeticBoundaryTrigger::OnTriggerEnter(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticBoundaryTrigger::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: CosmeticBoundaryTrigger.OnTriggerExit
void GlobalNamespace::CosmeticBoundaryTrigger::OnTriggerExit(::UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticBoundaryTrigger::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: CosmeticBoundaryTrigger..cctor
void GlobalNamespace::CosmeticBoundaryTrigger::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticBoundaryTrigger::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticBoundaryTrigger", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: JSonHelper
#include "GlobalNamespace/JSonHelper.hpp"
// Including type: JSonHelper/Wrapper`1
#include "GlobalNamespace/JSonHelper_Wrapper_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BundleList
#include "GlobalNamespace/BundleList.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 activeBundleIdx
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BundleList::dyn_activeBundleIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BundleList::dyn_activeBundleIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activeBundleIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public BundleData[] data
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BundleData>& GlobalNamespace::BundleList::dyn_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BundleList::dyn_data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "data"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::BundleData>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BundleList.FromJson
void GlobalNamespace::BundleList::FromJson(::StringW jsonString) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BundleList::FromJson");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromJson", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(jsonString)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, jsonString);
}
// Autogenerated method: BundleList.HasSku
bool GlobalNamespace::BundleList::HasSku(::StringW skuName, ByRef<int> idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BundleList::HasSku");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasSku", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(skuName), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, skuName, byref(idx));
}
// Autogenerated method: BundleList.ActiveBundle
::GlobalNamespace::BundleData GlobalNamespace::BundleList::ActiveBundle() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BundleList::ActiveBundle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActiveBundle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BundleData, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticsControllerUpdateStand
#include "GlobalNamespace/CosmeticsControllerUpdateStand.hpp"
// Including type: CosmeticsControllerUpdateStand/<>c__DisplayClass14_0
#include "GlobalNamespace/CosmeticsControllerUpdateStand_--c__DisplayClass14_0.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: HeadModel
#include "GlobalNamespace/HeadModel.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController cosmeticsController
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController*& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_cosmeticsController() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_cosmeticsController");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmeticsController"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean FailEntitlement
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_FailEntitlement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_FailEntitlement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FailEntitlement"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean PlayerUnlocked
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_PlayerUnlocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_PlayerUnlocked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PlayerUnlocked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean ItemNotGrantedYet
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_ItemNotGrantedYet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_ItemNotGrantedYet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ItemNotGrantedYet"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean ItemSuccessfullyGranted
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_ItemSuccessfullyGranted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_ItemSuccessfullyGranted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ItemSuccessfullyGranted"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean AttemptToConsumeEntitlement
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_AttemptToConsumeEntitlement() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_AttemptToConsumeEntitlement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AttemptToConsumeEntitlement"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean EntitlementSuccessfullyConsumed
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_EntitlementSuccessfullyConsumed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_EntitlementSuccessfullyConsumed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EntitlementSuccessfullyConsumed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean LockSuccessfullyCleared
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_LockSuccessfullyCleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_LockSuccessfullyCleared");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LockSuccessfullyCleared"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean RunDebug
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_RunDebug() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_RunDebug");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RunDebug"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform textParent
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_textParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_textParent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "textParent"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaNetworking.CosmeticsController/CosmeticItem outItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_outItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_outItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "outItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HeadModel[] inventoryHeadModels
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::HeadModel*>& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_inventoryHeadModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_inventoryHeadModels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "inventoryHeadModels"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::HeadModel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String headModelsPrefabPath
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticsControllerUpdateStand::dyn_headModelsPrefabPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::dyn_headModelsPrefabPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "headModelsPrefabPath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticsControllerUpdateStand.CallGetIAPPurchases
void GlobalNamespace::CosmeticsControllerUpdateStand::CallGetIAPPurchases() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::CallGetIAPPurchases");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CallGetIAPPurchases", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticsControllerUpdateStand.ReturnChildWithCosmeticNameMatch
::UnityEngine::GameObject* GlobalNamespace::CosmeticsControllerUpdateStand::ReturnChildWithCosmeticNameMatch(::UnityEngine::Transform* parentTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::ReturnChildWithCosmeticNameMatch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnChildWithCosmeticNameMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentTransform)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, parentTransform);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticsControllerUpdateStand/<>c__DisplayClass14_0
#include "GlobalNamespace/CosmeticsControllerUpdateStand_--c__DisplayClass14_0.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform child
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::CosmeticsControllerUpdateStand::$$c__DisplayClass14_0::dyn_child() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::$$c__DisplayClass14_0::dyn_child");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "child"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticsControllerUpdateStand/<>c__DisplayClass14_0.<ReturnChildWithCosmeticNameMatch>b__0
bool GlobalNamespace::CosmeticsControllerUpdateStand::$$c__DisplayClass14_0::$ReturnChildWithCosmeticNameMatch$b__0(::GorillaNetworking::CosmeticsController::CosmeticItem x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::$$c__DisplayClass14_0::<ReturnChildWithCosmeticNameMatch>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReturnChildWithCosmeticNameMatch>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticStand
#include "GlobalNamespace/CosmeticStand.hpp"
// Including type: HeadModel
#include "GlobalNamespace/HeadModel.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticItem thisCosmeticItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::CosmeticStand::dyn_thisCosmeticItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::dyn_thisCosmeticItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thisCosmeticItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String thisCosmeticName
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticStand::dyn_thisCosmeticName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::dyn_thisCosmeticName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thisCosmeticName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HeadModel thisHeadModel
[[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadModel*& GlobalNamespace::CosmeticStand::dyn_thisHeadModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::dyn_thisHeadModel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "thisHeadModel"))->offset;
  return *reinterpret_cast<::GlobalNamespace::HeadModel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text slotPriceText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::CosmeticStand::dyn_slotPriceText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::dyn_slotPriceText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slotPriceText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text addToCartText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::CosmeticStand::dyn_addToCartText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::dyn_addToCartText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "addToCartText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean skipMe
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticStand::dyn_skipMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::dyn_skipMe");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skipMe"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticStand.InitializeCosmetic
void GlobalNamespace::CosmeticStand::InitializeCosmetic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::InitializeCosmetic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeCosmetic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticStand.<InitializeCosmetic>b__6_0
bool GlobalNamespace::CosmeticStand::$InitializeCosmetic$b__6_0(::GorillaNetworking::CosmeticsController::CosmeticItem x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::<InitializeCosmetic>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitializeCosmetic>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: CosmeticStand.ButtonActivation
void GlobalNamespace::CosmeticStand::ButtonActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticStand::ButtonActivation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: EarlyAccessButton
#include "GlobalNamespace/EarlyAccessButton.hpp"
// Including type: EarlyAccessButton/<ButtonColorUpdate>d__4
#include "GlobalNamespace/EarlyAccessButton_-ButtonColorUpdate-d__4.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EarlyAccessButton.Awake
void GlobalNamespace::EarlyAccessButton::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EarlyAccessButton.Update
void GlobalNamespace::EarlyAccessButton::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EarlyAccessButton.AlreadyOwn
void GlobalNamespace::EarlyAccessButton::AlreadyOwn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::AlreadyOwn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AlreadyOwn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EarlyAccessButton.ButtonColorUpdate
::System::Collections::IEnumerator* GlobalNamespace::EarlyAccessButton::ButtonColorUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::ButtonColorUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ButtonColorUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: EarlyAccessButton.ButtonActivation
void GlobalNamespace::EarlyAccessButton::ButtonActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::ButtonActivation");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: EarlyAccessButton/<ButtonColorUpdate>d__4
#include "GlobalNamespace/EarlyAccessButton_-ButtonColorUpdate-d__4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object <>2__current
[[deprecated("Use field access instead!")]] ::Il2CppObject*& GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public EarlyAccessButton <>4__this
[[deprecated("Use field access instead!")]] ::GlobalNamespace::EarlyAccessButton*& GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::GlobalNamespace::EarlyAccessButton**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: EarlyAccessButton/<ButtonColorUpdate>d__4.System.IDisposable.Dispose
void GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EarlyAccessButton/<ButtonColorUpdate>d__4.MoveNext
bool GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4*), 6));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EarlyAccessButton/<ButtonColorUpdate>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: EarlyAccessButton/<ButtonColorUpdate>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EarlyAccessButton/<ButtonColorUpdate>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::EarlyAccessButton::$ButtonColorUpdate$d__4*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FittingRoomButton
#include "GlobalNamespace/FittingRoomButton.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticItem currentCosmeticItem
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticItem& GlobalNamespace::FittingRoomButton::dyn_currentCosmeticItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::dyn_currentCosmeticItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentCosmeticItem"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticItem*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Image currentImage
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& GlobalNamespace::FittingRoomButton::dyn_currentImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::dyn_currentImage");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentImage"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Image**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.MeshRenderer button
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::FittingRoomButton::dyn_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::dyn_button");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "button"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Material blank
[[deprecated("Use field access instead!")]] ::UnityEngine::Material*& GlobalNamespace::FittingRoomButton::dyn_blank() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::dyn_blank");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "blank"))->offset;
  return *reinterpret_cast<::UnityEngine::Material**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String noCosmeticText
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::FittingRoomButton::dyn_noCosmeticText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::dyn_noCosmeticText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noCosmeticText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.UI.Text buttonText
[[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& GlobalNamespace::FittingRoomButton::dyn_buttonText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::dyn_buttonText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buttonText"))->offset;
  return *reinterpret_cast<::UnityEngine::UI::Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FittingRoomButton.Start
void GlobalNamespace::FittingRoomButton::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::Start");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FittingRoomButton.UpdateColor
void GlobalNamespace::FittingRoomButton::UpdateColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::UpdateColor");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FittingRoomButton.ButtonActivationWithHand
void GlobalNamespace::FittingRoomButton::ButtonActivationWithHand(bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::ButtonActivationWithHand");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::GorillaPressableButton*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, isLeftHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: FriendshipCharm
#include "GlobalNamespace/FriendshipCharm.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Collision
#include "UnityEngine/Collision.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: DropZone
#include "GlobalNamespace/DropZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private InteractionPoint interactionPoint
[[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& GlobalNamespace::FriendshipCharm::dyn_interactionPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_interactionPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "interactionPoint"))->offset;
  return *reinterpret_cast<::GlobalNamespace::InteractionPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform rightHandHoldAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FriendshipCharm::dyn_rightHandHoldAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_rightHandHoldAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandHoldAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform leftHandHoldAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FriendshipCharm::dyn_leftHandHoldAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_leftHandHoldAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandHoldAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Rigidbody rb
[[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& GlobalNamespace::FriendshipCharm::dyn_rb() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_rb");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rb"))->offset;
  return *reinterpret_cast<::UnityEngine::Rigidbody**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.MeshRenderer meshRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& GlobalNamespace::FriendshipCharm::dyn_meshRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_meshRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "meshRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::MeshRenderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform lineStart
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FriendshipCharm::dyn_lineStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_lineStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineStart"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform lineEnd
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FriendshipCharm::dyn_lineEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_lineEnd");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lineEnd"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform releasePosition
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FriendshipCharm::dyn_releasePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_releasePosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "releasePosition"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single breakBraceletLength
[[deprecated("Use field access instead!")]] float& GlobalNamespace::FriendshipCharm::dyn_breakBraceletLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_breakBraceletLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "breakBraceletLength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.LayerMask breakItemLayerMask
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::FriendshipCharm::dyn_breakItemLayerMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_breakItemLayerMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "breakItemLayerMask"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform parent
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::FriendshipCharm::dyn_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parent"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean isBroken
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::FriendshipCharm::dyn_isBroken() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::dyn_isBroken");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isBroken"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: FriendshipCharm.Awake
void GlobalNamespace::FriendshipCharm::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FriendshipCharm.LateUpdate
void GlobalNamespace::FriendshipCharm::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FriendshipCharm.DestroyBracelet
void GlobalNamespace::FriendshipCharm::DestroyBracelet() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::DestroyBracelet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyBracelet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FriendshipCharm.UpdatePosition
void GlobalNamespace::FriendshipCharm::UpdatePosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::UpdatePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FriendshipCharm.OnCollisionEnter
void GlobalNamespace::FriendshipCharm::OnCollisionEnter(::UnityEngine::Collision* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::OnCollisionEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCollisionEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: FriendshipCharm.OnEnable
void GlobalNamespace::FriendshipCharm::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 29));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FriendshipCharm.OnGrab
void GlobalNamespace::FriendshipCharm::OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::OnGrab");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 58));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointGrabbed, grabbingHand);
}
// Autogenerated method: FriendshipCharm.OnRelease
bool GlobalNamespace::FriendshipCharm::OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FriendshipCharm::OnRelease");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HoldableObject*), 59));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, zoneReleased, releasingHand);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: HeadModel
#include "GlobalNamespace/HeadModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1
#include "UnityEngine/ResourceManagement/AsyncOperations/AsyncOperationHandle_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<HeadModel/_CosmeticPartLoadInfo> _currentPartLoadInfos
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::HeadModel::_CosmeticPartLoadInfo>*& GlobalNamespace::HeadModel::dyn__currentPartLoadInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::dyn__currentPartLoadInfos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentPartLoadInfos"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::HeadModel::_CosmeticPartLoadInfo>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Int32> _loadOp_to_partInfoIndex
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, int>*& GlobalNamespace::HeadModel::dyn__loadOp_to_partInfoIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::dyn__loadOp_to_partInfoIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_loadOp_to_partInfoIndex"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Renderer _mannequinRenderer
[[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& GlobalNamespace::HeadModel::dyn__mannequinRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::dyn__mannequinRenderer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mannequinRenderer"))->offset;
  return *reinterpret_cast<::UnityEngine::Renderer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] cosmetics
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::HeadModel::dyn_cosmetics() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::dyn_cosmetics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cosmetics"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HeadModel.Awake
void GlobalNamespace::HeadModel::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HeadModel.SetCosmeticActive
void GlobalNamespace::HeadModel::SetCosmeticActive(::StringW playFabId, bool forRightSide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::SetCosmeticActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCosmeticActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playFabId), ::il2cpp_utils::ExtractType(forRightSide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playFabId, forRightSide);
}
// Autogenerated method: HeadModel.SetCosmeticActiveArray
void GlobalNamespace::HeadModel::SetCosmeticActiveArray(::ArrayW<::StringW> playFabIds, ::ArrayW<bool> forRightSideArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::SetCosmeticActiveArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCosmeticActiveArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playFabIds), ::il2cpp_utils::ExtractType(forRightSideArray)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playFabIds, forRightSideArray);
}
// Autogenerated method: HeadModel._AddPreviewCosmetic
void GlobalNamespace::HeadModel::_AddPreviewCosmetic(::StringW playFabId, bool forRightSide) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::_AddPreviewCosmetic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_AddPreviewCosmetic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playFabId), ::il2cpp_utils::ExtractType(forRightSide)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, playFabId, forRightSide);
}
// Autogenerated method: HeadModel._HandleLoadOpOnCompleted
void GlobalNamespace::HeadModel::_HandleLoadOpOnCompleted(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*> loadOp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::_HandleLoadOpOnCompleted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_HandleLoadOpOnCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(loadOp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, loadOp);
}
// Autogenerated method: HeadModel.IDelayedExecListener.OnDelayedAction
void GlobalNamespace::HeadModel::IDelayedExecListener_OnDelayedAction(int partLoadInfosIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::IDelayedExecListener.OnDelayedAction");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::HeadModel*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, partLoadInfosIndex);
}
// Autogenerated method: HeadModel._ClearCurrent
void GlobalNamespace::HeadModel::_ClearCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::_ClearCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "_ClearCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BodyDockPositions
#include "GlobalNamespace/BodyDockPositions.hpp"
// Including type: BodyDockPositions/DropPositions
#include "GlobalNamespace/BodyDockPositions_DropPositions.hpp"
// Including type: BodyDockPositions/DockingResult
#include "GlobalNamespace/BodyDockPositions_DockingResult.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: WorldShareableItem
#include "GlobalNamespace/WorldShareableItem.hpp"
// Including type: Photon.Realtime.Player
#include "Photon/Realtime/Player.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::BodyDockPositions::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] leftHandThrowables
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::BodyDockPositions::dyn_leftHandThrowables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_leftHandThrowables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandThrowables"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject[] rightHandThrowables
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& GlobalNamespace::BodyDockPositions::dyn_rightHandThrowables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_rightHandThrowables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandThrowables"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public TransferrableObject[] _allObjects
[[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TransferrableObject*>& GlobalNamespace::BodyDockPositions::dyn__allObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn__allObjects");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allObjects"))->offset;
  return *reinterpret_cast<::ArrayW<::GlobalNamespace::TransferrableObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> objectsToEnable
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::BodyDockPositions::dyn_objectsToEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_objectsToEnable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectsToEnable"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Int32> objectsToDisable
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& GlobalNamespace::BodyDockPositions::dyn_objectsToDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_objectsToDisable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objectsToDisable"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftHandTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BodyDockPositions::dyn_leftHandTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_leftHandTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightHandTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BodyDockPositions::dyn_rightHandTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_rightHandTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform chestTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BodyDockPositions::dyn_chestTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_chestTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftArmTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BodyDockPositions::dyn_leftArmTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_leftArmTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftArmTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightArmTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BodyDockPositions::dyn_rightArmTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_rightArmTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightArmTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform leftBackTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BodyDockPositions::dyn_leftBackTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_leftBackTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftBackTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform rightBackTransform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::BodyDockPositions::dyn_rightBackTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_rightBackTransform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightBackTransform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public WorldShareableItem leftBackSharableItem
[[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem*& GlobalNamespace::BodyDockPositions::dyn_leftBackSharableItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_leftBackSharableItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftBackSharableItem"))->offset;
  return *reinterpret_cast<::GlobalNamespace::WorldShareableItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public WorldShareableItem rightBackShareableItem
[[deprecated("Use field access instead!")]] ::GlobalNamespace::WorldShareableItem*& GlobalNamespace::BodyDockPositions::dyn_rightBackShareableItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_rightBackShareableItem");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightBackShareableItem"))->offset;
  return *reinterpret_cast<::GlobalNamespace::WorldShareableItem**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject SharableItemInstance
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::BodyDockPositions::dyn_SharableItemInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_SharableItemInstance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SharableItemInstance"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32[] throwableDisabledIndex
[[deprecated("Use field access instead!")]] ::ArrayW<int>& GlobalNamespace::BodyDockPositions::dyn_throwableDisabledIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_throwableDisabledIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "throwableDisabledIndex"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single[] throwableDisabledTime
[[deprecated("Use field access instead!")]] ::ArrayW<float>& GlobalNamespace::BodyDockPositions::dyn_throwableDisabledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::dyn_throwableDisabledTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "throwableDisabledTime"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: BodyDockPositions.get_allObjects
::ArrayW<::GlobalNamespace::TransferrableObject*> GlobalNamespace::BodyDockPositions::get_allObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::get_allObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::GlobalNamespace::TransferrableObject*>, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.set_allObjects
void GlobalNamespace::BodyDockPositions::set_allObjects(::ArrayW<::GlobalNamespace::TransferrableObject*> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::set_allObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_allObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BodyDockPositions.AllocateSharableInstance
::GlobalNamespace::WorldShareableItem* GlobalNamespace::BodyDockPositions::AllocateSharableInstance(::GlobalNamespace::BodyDockPositions::DropPositions position, ::Photon::Realtime::Player* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::AllocateSharableInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllocateSharableInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(owner)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::WorldShareableItem*, false>(this, ___internal__method, position, owner);
}
// Autogenerated method: BodyDockPositions.DeallocateSharableInstance
void GlobalNamespace::BodyDockPositions::DeallocateSharableInstance(::GlobalNamespace::WorldShareableItem* worldShareable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DeallocateSharableInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeallocateSharableInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldShareable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, worldShareable);
}
// Autogenerated method: BodyDockPositions.DeallocateSharableInstances
void GlobalNamespace::BodyDockPositions::DeallocateSharableInstances() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DeallocateSharableInstances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeallocateSharableInstances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.IsPositionLeft
bool GlobalNamespace::BodyDockPositions::IsPositionLeft(::GlobalNamespace::BodyDockPositions::DropPositions pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::IsPositionLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BodyDockPositions", "IsPositionLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pos);
}
// Autogenerated method: BodyDockPositions.DropZoneStorageUsed
int GlobalNamespace::BodyDockPositions::DropZoneStorageUsed(::GlobalNamespace::BodyDockPositions::DropPositions dropPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropZoneStorageUsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DropZoneStorageUsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropPosition)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, dropPosition);
}
// Autogenerated method: BodyDockPositions.ItemPositionInUse
::GlobalNamespace::TransferrableObject* GlobalNamespace::BodyDockPositions::ItemPositionInUse(::GlobalNamespace::BodyDockPositions::DropPositions dropPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::ItemPositionInUse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ItemPositionInUse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropPosition)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TransferrableObject*, false>(this, ___internal__method, dropPosition);
}
// Autogenerated method: BodyDockPositions.EnableTransferrableItem
int GlobalNamespace::BodyDockPositions::EnableTransferrableItem(int allItemsIndex, ::GlobalNamespace::BodyDockPositions::DropPositions startingPosition, ::GlobalNamespace::TransferrableObject::PositionState startingState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::EnableTransferrableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableTransferrableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex), ::il2cpp_utils::ExtractType(startingPosition), ::il2cpp_utils::ExtractType(startingState)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, allItemsIndex, startingPosition, startingState);
}
// Autogenerated method: BodyDockPositions.ItemActive
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::ItemActive(int allItemsIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::ItemActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ItemActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BodyDockPositions::DropPositions, false>(this, ___internal__method, allItemsIndex);
}
// Autogenerated method: BodyDockPositions.OfflineItemActive
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::OfflineItemActive(int allItemsIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::OfflineItemActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BodyDockPositions", "OfflineItemActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BodyDockPositions::DropPositions, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, allItemsIndex);
}
// Autogenerated method: BodyDockPositions.DisableTransferrableItem
void GlobalNamespace::BodyDockPositions::DisableTransferrableItem(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DisableTransferrableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableTransferrableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: BodyDockPositions.DisableAllTransferableItems
void GlobalNamespace::BodyDockPositions::DisableAllTransferableItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DisableAllTransferableItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableAllTransferableItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.AllItemsIndexValid
bool GlobalNamespace::BodyDockPositions::AllItemsIndexValid(int allItemsIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::AllItemsIndexValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllItemsIndexValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, allItemsIndex);
}
// Autogenerated method: BodyDockPositions.PositionAvailable
bool GlobalNamespace::BodyDockPositions::PositionAvailable(int allItemIndex, ::GlobalNamespace::BodyDockPositions::DropPositions startPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::PositionAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PositionAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemIndex), ::il2cpp_utils::ExtractType(startPos)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, allItemIndex, startPos);
}
// Autogenerated method: BodyDockPositions.FirstAvailablePosition
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::FirstAvailablePosition(int allItemIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::FirstAvailablePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FirstAvailablePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BodyDockPositions::DropPositions, false>(this, ___internal__method, allItemIndex);
}
// Autogenerated method: BodyDockPositions.TransferrableItemDisable
int GlobalNamespace::BodyDockPositions::TransferrableItemDisable(int allItemsIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableItemDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItemDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, allItemsIndex);
}
// Autogenerated method: BodyDockPositions.TransferrableItemDisableAtPosition
void GlobalNamespace::BodyDockPositions::TransferrableItemDisableAtPosition(::GlobalNamespace::BodyDockPositions::DropPositions dropPositions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableItemDisableAtPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItemDisableAtPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropPositions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dropPositions);
}
// Autogenerated method: BodyDockPositions.TransferrableItemEnableAtPosition
void GlobalNamespace::BodyDockPositions::TransferrableItemEnableAtPosition(::StringW itemName, ::GlobalNamespace::BodyDockPositions::DropPositions dropPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableItemEnableAtPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItemEnableAtPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(itemName), ::il2cpp_utils::ExtractType(dropPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, itemName, dropPosition);
}
// Autogenerated method: BodyDockPositions.TransferrableItemActive
bool GlobalNamespace::BodyDockPositions::TransferrableItemActive(::StringW transferrableItemName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableItemActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItemActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transferrableItemName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, transferrableItemName);
}
// Autogenerated method: BodyDockPositions.TransferrableItemActiveAtPos
bool GlobalNamespace::BodyDockPositions::TransferrableItemActiveAtPos(::StringW transferrableItemName, ::GlobalNamespace::BodyDockPositions::DropPositions dropPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableItemActiveAtPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItemActiveAtPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transferrableItemName), ::il2cpp_utils::ExtractType(dropPosition)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, transferrableItemName, dropPosition);
}
// Autogenerated method: BodyDockPositions.TransferrableItemActive
bool GlobalNamespace::BodyDockPositions::TransferrableItemActive(int allItemsIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableItemActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItemActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, allItemsIndex);
}
// Autogenerated method: BodyDockPositions.TransferrableItem
::GlobalNamespace::TransferrableObject* GlobalNamespace::BodyDockPositions::TransferrableItem(int allItemsIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TransferrableObject*, false>(this, ___internal__method, allItemsIndex);
}
// Autogenerated method: BodyDockPositions.TransferrableItemPosition
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::TransferrableItemPosition(int allItemsIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableItemPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableItemPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BodyDockPositions::DropPositions, false>(this, ___internal__method, allItemsIndex);
}
// Autogenerated method: BodyDockPositions.DisableTransferrableItem
bool GlobalNamespace::BodyDockPositions::DisableTransferrableItem(::StringW transferrableItemName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DisableTransferrableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableTransferrableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transferrableItemName)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, transferrableItemName);
}
// Autogenerated method: BodyDockPositions.OppositePosition
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::OppositePosition(::GlobalNamespace::BodyDockPositions::DropPositions pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::OppositePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OppositePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BodyDockPositions::DropPositions, false>(this, ___internal__method, pos);
}
// Autogenerated method: BodyDockPositions.ToggleWithHandedness
::GlobalNamespace::BodyDockPositions::DockingResult* GlobalNamespace::BodyDockPositions::ToggleWithHandedness(::StringW transferrableItemName, bool isLeftHand, bool bothHands) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::ToggleWithHandedness");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleWithHandedness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transferrableItemName), ::il2cpp_utils::ExtractType(isLeftHand), ::il2cpp_utils::ExtractType(bothHands)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BodyDockPositions::DockingResult*, false>(this, ___internal__method, transferrableItemName, isLeftHand, bothHands);
}
// Autogenerated method: BodyDockPositions.ToggleTransferrableItem
::GlobalNamespace::BodyDockPositions::DockingResult* GlobalNamespace::BodyDockPositions::ToggleTransferrableItem(::StringW transferrableItemName, ::GlobalNamespace::BodyDockPositions::DropPositions startingPos, bool bothHands) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::ToggleTransferrableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleTransferrableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transferrableItemName), ::il2cpp_utils::ExtractType(startingPos), ::il2cpp_utils::ExtractType(bothHands)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::BodyDockPositions::DockingResult*, false>(this, ___internal__method, transferrableItemName, startingPos, bothHands);
}
// Autogenerated method: BodyDockPositions.MoveTransferableItem
void GlobalNamespace::BodyDockPositions::MoveTransferableItem(int allItemsIndex, ::GlobalNamespace::BodyDockPositions::DropPositions newPosition, ::GlobalNamespace::TransferrableObject::PositionState newPositionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::MoveTransferableItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTransferableItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex), ::il2cpp_utils::ExtractType(newPosition), ::il2cpp_utils::ExtractType(newPositionState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, allItemsIndex, newPosition, newPositionState);
}
// Autogenerated method: BodyDockPositions.EnableTransferrableGameObject
void GlobalNamespace::BodyDockPositions::EnableTransferrableGameObject(int allItemsIndex, ::GlobalNamespace::BodyDockPositions::DropPositions dropZone, ::GlobalNamespace::TransferrableObject::PositionState startingPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::EnableTransferrableGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableTransferrableGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex), ::il2cpp_utils::ExtractType(dropZone), ::il2cpp_utils::ExtractType(startingPosition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, allItemsIndex, dropZone, startingPosition);
}
// Autogenerated method: BodyDockPositions.RefreshTransferrableItems
void GlobalNamespace::BodyDockPositions::RefreshTransferrableItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::RefreshTransferrableItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshTransferrableItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.ReturnTransferrableItemIndex
int GlobalNamespace::BodyDockPositions::ReturnTransferrableItemIndex(int allItemsIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::ReturnTransferrableItemIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnTransferrableItemIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allItemsIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, allItemsIndex);
}
// Autogenerated method: BodyDockPositions.TransferrableObjectIndexFromName
::System::Collections::Generic::List_1<int>* GlobalNamespace::BodyDockPositions::TransferrableObjectIndexFromName(::StringW transObjectName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::TransferrableObjectIndexFromName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferrableObjectIndexFromName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transObjectName)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<int>*, false>(this, ___internal__method, transObjectName);
}
// Autogenerated method: BodyDockPositions.MapDropPositionToState
::GlobalNamespace::TransferrableObject::PositionState GlobalNamespace::BodyDockPositions::MapDropPositionToState(::GlobalNamespace::BodyDockPositions::DropPositions pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::MapDropPositionToState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapDropPositionToState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::TransferrableObject::PositionState, false>(this, ___internal__method, pos);
}
// Autogenerated method: BodyDockPositions.get_PreviousLeftHandThrowableIndex
int GlobalNamespace::BodyDockPositions::get_PreviousLeftHandThrowableIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::get_PreviousLeftHandThrowableIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreviousLeftHandThrowableIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.get_PreviousRightHandThrowableIndex
int GlobalNamespace::BodyDockPositions::get_PreviousRightHandThrowableIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::get_PreviousRightHandThrowableIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreviousRightHandThrowableIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.get_PreviousLeftHandThrowableDisabledTime
float GlobalNamespace::BodyDockPositions::get_PreviousLeftHandThrowableDisabledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::get_PreviousLeftHandThrowableDisabledTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreviousLeftHandThrowableDisabledTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.get_PreviousRightHandThrowableDisabledTime
float GlobalNamespace::BodyDockPositions::get_PreviousRightHandThrowableDisabledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::get_PreviousRightHandThrowableDisabledTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreviousRightHandThrowableDisabledTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.UpdateHandState
void GlobalNamespace::BodyDockPositions::UpdateHandState() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::UpdateHandState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHandState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.GetLeftHandThrowable
::UnityEngine::GameObject* GlobalNamespace::BodyDockPositions::GetLeftHandThrowable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::GetLeftHandThrowable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLeftHandThrowable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.GetLeftHandThrowable
::UnityEngine::GameObject* GlobalNamespace::BodyDockPositions::GetLeftHandThrowable(int throwableIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::GetLeftHandThrowable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLeftHandThrowable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(throwableIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, throwableIndex);
}
// Autogenerated method: BodyDockPositions.GetRightHandThrowable
::UnityEngine::GameObject* GlobalNamespace::BodyDockPositions::GetRightHandThrowable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::GetRightHandThrowable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRightHandThrowable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: BodyDockPositions.GetRightHandThrowable
::UnityEngine::GameObject* GlobalNamespace::BodyDockPositions::GetRightHandThrowable(int throwableIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::GetRightHandThrowable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRightHandThrowable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(throwableIndex)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, throwableIndex);
}
// Autogenerated method: BodyDockPositions.OnPlayerLeftRoom
void GlobalNamespace::BodyDockPositions::OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::OnPlayerLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 44));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, otherPlayer);
}
// Autogenerated method: BodyDockPositions.OnLeftRoom
void GlobalNamespace::BodyDockPositions::OnLeftRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::OnLeftRoom");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Pun::MonoBehaviourPunCallbacks*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BodyDockPositions/DropPositions
#include "GlobalNamespace/BodyDockPositions_DropPositions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BodyDockPositions/DropPositions LeftArm
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::DropPositions::_get_LeftArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_get_LeftArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BodyDockPositions::DropPositions>("", "BodyDockPositions/DropPositions", "LeftArm"));
}
// Autogenerated static field setter
// Set static field: static public BodyDockPositions/DropPositions LeftArm
void GlobalNamespace::BodyDockPositions::DropPositions::_set_LeftArm(::GlobalNamespace::BodyDockPositions::DropPositions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_set_LeftArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BodyDockPositions/DropPositions", "LeftArm", value));
}
// Autogenerated static field getter
// Get static field: static public BodyDockPositions/DropPositions RightArm
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::DropPositions::_get_RightArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_get_RightArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BodyDockPositions::DropPositions>("", "BodyDockPositions/DropPositions", "RightArm"));
}
// Autogenerated static field setter
// Set static field: static public BodyDockPositions/DropPositions RightArm
void GlobalNamespace::BodyDockPositions::DropPositions::_set_RightArm(::GlobalNamespace::BodyDockPositions::DropPositions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_set_RightArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BodyDockPositions/DropPositions", "RightArm", value));
}
// Autogenerated static field getter
// Get static field: static public BodyDockPositions/DropPositions Chest
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::DropPositions::_get_Chest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_get_Chest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BodyDockPositions::DropPositions>("", "BodyDockPositions/DropPositions", "Chest"));
}
// Autogenerated static field setter
// Set static field: static public BodyDockPositions/DropPositions Chest
void GlobalNamespace::BodyDockPositions::DropPositions::_set_Chest(::GlobalNamespace::BodyDockPositions::DropPositions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_set_Chest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BodyDockPositions/DropPositions", "Chest", value));
}
// Autogenerated static field getter
// Get static field: static public BodyDockPositions/DropPositions LeftBack
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::DropPositions::_get_LeftBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_get_LeftBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BodyDockPositions::DropPositions>("", "BodyDockPositions/DropPositions", "LeftBack"));
}
// Autogenerated static field setter
// Set static field: static public BodyDockPositions/DropPositions LeftBack
void GlobalNamespace::BodyDockPositions::DropPositions::_set_LeftBack(::GlobalNamespace::BodyDockPositions::DropPositions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_set_LeftBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BodyDockPositions/DropPositions", "LeftBack", value));
}
// Autogenerated static field getter
// Get static field: static public BodyDockPositions/DropPositions RightBack
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::DropPositions::_get_RightBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_get_RightBack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BodyDockPositions::DropPositions>("", "BodyDockPositions/DropPositions", "RightBack"));
}
// Autogenerated static field setter
// Set static field: static public BodyDockPositions/DropPositions RightBack
void GlobalNamespace::BodyDockPositions::DropPositions::_set_RightBack(::GlobalNamespace::BodyDockPositions::DropPositions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_set_RightBack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BodyDockPositions/DropPositions", "RightBack", value));
}
// Autogenerated static field getter
// Get static field: static public BodyDockPositions/DropPositions MaxDropPostions
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::DropPositions::_get_MaxDropPostions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_get_MaxDropPostions");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BodyDockPositions::DropPositions>("", "BodyDockPositions/DropPositions", "MaxDropPostions"));
}
// Autogenerated static field setter
// Set static field: static public BodyDockPositions/DropPositions MaxDropPostions
void GlobalNamespace::BodyDockPositions::DropPositions::_set_MaxDropPostions(::GlobalNamespace::BodyDockPositions::DropPositions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_set_MaxDropPostions");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BodyDockPositions/DropPositions", "MaxDropPostions", value));
}
// Autogenerated static field getter
// Get static field: static public BodyDockPositions/DropPositions All
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::DropPositions::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BodyDockPositions::DropPositions>("", "BodyDockPositions/DropPositions", "All"));
}
// Autogenerated static field setter
// Set static field: static public BodyDockPositions/DropPositions All
void GlobalNamespace::BodyDockPositions::DropPositions::_set_All(::GlobalNamespace::BodyDockPositions::DropPositions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BodyDockPositions/DropPositions", "All", value));
}
// Autogenerated static field getter
// Get static field: static public BodyDockPositions/DropPositions None
::GlobalNamespace::BodyDockPositions::DropPositions GlobalNamespace::BodyDockPositions::DropPositions::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::BodyDockPositions::DropPositions>("", "BodyDockPositions/DropPositions", "None"));
}
// Autogenerated static field setter
// Set static field: static public BodyDockPositions/DropPositions None
void GlobalNamespace::BodyDockPositions::DropPositions::_set_None(::GlobalNamespace::BodyDockPositions::DropPositions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BodyDockPositions/DropPositions", "None", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& GlobalNamespace::BodyDockPositions::DropPositions::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DropPositions::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: BodyDockPositions/DockingResult
#include "GlobalNamespace/BodyDockPositions_DockingResult.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<BodyDockPositions/DropPositions> positionsDisabled
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BodyDockPositions::DropPositions>*& GlobalNamespace::BodyDockPositions::DockingResult::dyn_positionsDisabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DockingResult::dyn_positionsDisabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "positionsDisabled"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BodyDockPositions::DropPositions>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<BodyDockPositions/DropPositions> dockedPosition
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BodyDockPositions::DropPositions>*& GlobalNamespace::BodyDockPositions::DockingResult::dyn_dockedPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BodyDockPositions::DockingResult::dyn_dockedPosition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dockedPosition"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BodyDockPositions::DropPositions>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ChestObjectHysteresis
#include "GlobalNamespace/ChestObjectHysteresis.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single angleHysteresis
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ChestObjectHysteresis::dyn_angleHysteresis() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::dyn_angleHysteresis");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angleHysteresis"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single angleBetween
[[deprecated("Use field access instead!")]] float& GlobalNamespace::ChestObjectHysteresis::dyn_angleBetween() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::dyn_angleBetween");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angleBetween"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform angleFollower
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& GlobalNamespace::ChestObjectHysteresis::dyn_angleFollower() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::dyn_angleFollower");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angleFollower"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String angleFollower_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::ChestObjectHysteresis::dyn_angleFollower_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::dyn_angleFollower_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "angleFollower_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion lastAngleQuat
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ChestObjectHysteresis::dyn_lastAngleQuat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::dyn_lastAngleQuat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastAngleQuat"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion currentAngleQuat
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& GlobalNamespace::ChestObjectHysteresis::dyn_currentAngleQuat() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::dyn_currentAngleQuat");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentAngleQuat"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::ChestObjectHysteresis::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GorillaTag.ISpawnable.IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ChestObjectHysteresis.GorillaTag.ISpawnable.get_IsSpawned
bool GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::GorillaTag.ISpawnable.get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ChestObjectHysteresis*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ChestObjectHysteresis.GorillaTag.ISpawnable.set_IsSpawned
void GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::GorillaTag.ISpawnable.set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ChestObjectHysteresis*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ChestObjectHysteresis.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ChestObjectHysteresis*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ChestObjectHysteresis.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::ChestObjectHysteresis::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::ChestObjectHysteresis*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ChestObjectHysteresis.Start
void GlobalNamespace::ChestObjectHysteresis::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ChestObjectHysteresis.OnEnable
void GlobalNamespace::ChestObjectHysteresis::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ChestObjectHysteresis.OnDisable
void GlobalNamespace::ChestObjectHysteresis::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ChestObjectHysteresis.InvokeUpdate
void GlobalNamespace::ChestObjectHysteresis::InvokeUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::InvokeUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: ChestObjectHysteresisManager
#include "GlobalNamespace/ChestObjectHysteresisManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ChestObjectHysteresis
#include "GlobalNamespace/ChestObjectHysteresis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ChestObjectHysteresisManager instance
::GlobalNamespace::ChestObjectHysteresisManager* GlobalNamespace::ChestObjectHysteresisManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::ChestObjectHysteresisManager*>("", "ChestObjectHysteresisManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public ChestObjectHysteresisManager instance
void GlobalNamespace::ChestObjectHysteresisManager::_set_instance(::GlobalNamespace::ChestObjectHysteresisManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ChestObjectHysteresisManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::ChestObjectHysteresisManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "ChestObjectHysteresisManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::ChestObjectHysteresisManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ChestObjectHysteresisManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.List`1<ChestObjectHysteresis> allChests
::System::Collections::Generic::List_1<::GlobalNamespace::ChestObjectHysteresis*>* GlobalNamespace::ChestObjectHysteresisManager::_get_allChests() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::_get_allChests");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::ChestObjectHysteresis*>*>("", "ChestObjectHysteresisManager", "allChests"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.List`1<ChestObjectHysteresis> allChests
void GlobalNamespace::ChestObjectHysteresisManager::_set_allChests(::System::Collections::Generic::List_1<::GlobalNamespace::ChestObjectHysteresis*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::_set_allChests");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ChestObjectHysteresisManager", "allChests", value));
}
// Autogenerated method: ChestObjectHysteresisManager.Awake
void GlobalNamespace::ChestObjectHysteresisManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ChestObjectHysteresisManager.CreateManager
void GlobalNamespace::ChestObjectHysteresisManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ChestObjectHysteresisManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ChestObjectHysteresisManager.SetInstance
void GlobalNamespace::ChestObjectHysteresisManager::SetInstance(::GlobalNamespace::ChestObjectHysteresisManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ChestObjectHysteresisManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: ChestObjectHysteresisManager.RegisterCH
void GlobalNamespace::ChestObjectHysteresisManager::RegisterCH(::GlobalNamespace::ChestObjectHysteresis* cOH) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::RegisterCH");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ChestObjectHysteresisManager", "RegisterCH", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cOH)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cOH);
}
// Autogenerated method: ChestObjectHysteresisManager.UnregisterCH
void GlobalNamespace::ChestObjectHysteresisManager::UnregisterCH(::GlobalNamespace::ChestObjectHysteresis* cOH) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::UnregisterCH");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ChestObjectHysteresisManager", "UnregisterCH", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cOH)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cOH);
}
// Autogenerated method: ChestObjectHysteresisManager.Update
void GlobalNamespace::ChestObjectHysteresisManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ChestObjectHysteresisManager..cctor
void GlobalNamespace::ChestObjectHysteresisManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresisManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ChestObjectHysteresisManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticAnchorManager
#include "GlobalNamespace/CosmeticAnchorManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: CosmeticAnchors
#include "GlobalNamespace/CosmeticAnchors.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public CosmeticAnchorManager instance
::GlobalNamespace::CosmeticAnchorManager* GlobalNamespace::CosmeticAnchorManager::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GlobalNamespace::CosmeticAnchorManager*>("", "CosmeticAnchorManager", "instance"));
}
// Autogenerated static field setter
// Set static field: static public CosmeticAnchorManager instance
void GlobalNamespace::CosmeticAnchorManager::_set_instance(::GlobalNamespace::CosmeticAnchorManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticAnchorManager", "instance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean hasInstance
bool GlobalNamespace::CosmeticAnchorManager::_get_hasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::_get_hasInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "CosmeticAnchorManager", "hasInstance"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean hasInstance
void GlobalNamespace::CosmeticAnchorManager::_set_hasInstance(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::_set_hasInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticAnchorManager", "hasInstance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.List`1<CosmeticAnchors> allAnchors
::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticAnchors*>* GlobalNamespace::CosmeticAnchorManager::_get_allAnchors() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::_get_allAnchors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticAnchors*>*>("", "CosmeticAnchorManager", "allAnchors"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.List`1<CosmeticAnchors> allAnchors
void GlobalNamespace::CosmeticAnchorManager::_set_allAnchors(::System::Collections::Generic::List_1<::GlobalNamespace::CosmeticAnchors*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::_set_allAnchors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticAnchorManager", "allAnchors", value));
}
// Autogenerated method: CosmeticAnchorManager.Awake
void GlobalNamespace::CosmeticAnchorManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchorManager.CreateManager
void GlobalNamespace::CosmeticAnchorManager::CreateManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::CreateManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticAnchorManager", "CreateManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: CosmeticAnchorManager.SetInstance
void GlobalNamespace::CosmeticAnchorManager::SetInstance(::GlobalNamespace::CosmeticAnchorManager* manager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::SetInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticAnchorManager", "SetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, manager);
}
// Autogenerated method: CosmeticAnchorManager.RegisterCosmeticAnchor
void GlobalNamespace::CosmeticAnchorManager::RegisterCosmeticAnchor(::GlobalNamespace::CosmeticAnchors* cA) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::RegisterCosmeticAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticAnchorManager", "RegisterCosmeticAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cA)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cA);
}
// Autogenerated method: CosmeticAnchorManager.UnregisterCosmeticAnchor
void GlobalNamespace::CosmeticAnchorManager::UnregisterCosmeticAnchor(::GlobalNamespace::CosmeticAnchors* cA) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::UnregisterCosmeticAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticAnchorManager", "UnregisterCosmeticAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cA)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, cA);
}
// Autogenerated method: CosmeticAnchorManager.Update
void GlobalNamespace::CosmeticAnchorManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchorManager..cctor
void GlobalNamespace::CosmeticAnchorManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchorManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticAnchorManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: CosmeticAnchors
#include "GlobalNamespace/CosmeticAnchors.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
// Including type: VRRigAnchorOverrides
#include "GlobalNamespace/VRRigAnchorOverrides.hpp"
// Including type: GorillaTag.GTLogErrorLimiter
#include "GorillaTag/GTLogErrorLimiter.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private GorillaTag.GTLogErrorLimiter k_debugLogError_anchorOverridesNull
::GorillaTag::GTLogErrorLimiter* GlobalNamespace::CosmeticAnchors::_get_k_debugLogError_anchorOverridesNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::_get_k_debugLogError_anchorOverridesNull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::GorillaTag::GTLogErrorLimiter*>("", "CosmeticAnchors", "k_debugLogError_anchorOverridesNull"));
}
// Autogenerated static field setter
// Set static field: static private GorillaTag.GTLogErrorLimiter k_debugLogError_anchorOverridesNull
void GlobalNamespace::CosmeticAnchors::_set_k_debugLogError_anchorOverridesNull(::GorillaTag::GTLogErrorLimiter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::_set_k_debugLogError_anchorOverridesNull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CosmeticAnchors", "k_debugLogError_anchorOverridesNull", value));
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject nameAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_nameAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_nameAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nameAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String nameAnchor_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_nameAnchor_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_nameAnchor_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nameAnchor_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject leftArmAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_leftArmAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_leftArmAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftArmAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String leftArmAnchor_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_leftArmAnchor_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_leftArmAnchor_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftArmAnchor_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject rightArmAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_rightArmAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_rightArmAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightArmAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String rightArmAnchor_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_rightArmAnchor_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_rightArmAnchor_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightArmAnchor_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject chestAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_chestAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_chestAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String chestAnchor_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_chestAnchor_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_chestAnchor_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "chestAnchor_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject huntComputerAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_huntComputerAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_huntComputerAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "huntComputerAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String huntComputerAnchor_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_huntComputerAnchor_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_huntComputerAnchor_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "huntComputerAnchor_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject builderWatchAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_builderWatchAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_builderWatchAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "builderWatchAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String builderWatchAnchor_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_builderWatchAnchor_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_builderWatchAnchor_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "builderWatchAnchor_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject friendshipBraceletLeftOverride
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_friendshipBraceletLeftOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_friendshipBraceletLeftOverride");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletLeftOverride"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String friendshipBraceletLeftOverride_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_friendshipBraceletLeftOverride_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_friendshipBraceletLeftOverride_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletLeftOverride_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject friendshipBraceletRightOverride
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_friendshipBraceletRightOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_friendshipBraceletRightOverride");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletRightOverride"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String friendshipBraceletRightOverride_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_friendshipBraceletRightOverride_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_friendshipBraceletRightOverride_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "friendshipBraceletRightOverride_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected UnityEngine.GameObject badgeAnchor
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& GlobalNamespace::CosmeticAnchors::dyn_badgeAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_badgeAnchor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "badgeAnchor"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected System.String badgeAnchor_path
[[deprecated("Use field access instead!")]] ::StringW& GlobalNamespace::CosmeticAnchors::dyn_badgeAnchor_path() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_badgeAnchor_path");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "badgeAnchor_path"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public GorillaNetworking.CosmeticsController/CosmeticSlots slot
[[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController::CosmeticSlots& GlobalNamespace::CosmeticAnchors::dyn_slot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_slot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "slot"))->offset;
  return *reinterpret_cast<::GorillaNetworking::CosmeticsController::CosmeticSlots*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig vrRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::CosmeticAnchors::dyn_vrRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_vrRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "vrRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRigAnchorOverrides anchorOverrides
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRigAnchorOverrides*& GlobalNamespace::CosmeticAnchors::dyn_anchorOverrides() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_anchorOverrides");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchorOverrides"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRigAnchorOverrides**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean anchorEnabled
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticAnchors::dyn_anchorEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_anchorEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "anchorEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::CosmeticAnchors::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GorillaTag.ISpawnable.IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: CosmeticAnchors.GorillaTag.ISpawnable.get_IsSpawned
bool GlobalNamespace::CosmeticAnchors::GorillaTag_ISpawnable_get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::GorillaTag.ISpawnable.get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CosmeticAnchors*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors.GorillaTag.ISpawnable.set_IsSpawned
void GlobalNamespace::CosmeticAnchors::GorillaTag_ISpawnable_set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::GorillaTag.ISpawnable.set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CosmeticAnchors*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CosmeticAnchors.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::CosmeticAnchors::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CosmeticAnchors*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::CosmeticAnchors::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::CosmeticAnchors*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors.AssignAnchorToPath
void GlobalNamespace::CosmeticAnchors::AssignAnchorToPath(ByRef<::UnityEngine::GameObject*> anchorGObjRef, ::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::AssignAnchorToPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignAnchorToPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchorGObjRef), ::il2cpp_utils::ExtractType(path)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(anchorGObjRef), path);
}
// Autogenerated method: CosmeticAnchors.OnEnable
void GlobalNamespace::CosmeticAnchors::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors.OnDisable
void GlobalNamespace::CosmeticAnchors::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors.TryUpdate
void GlobalNamespace::CosmeticAnchors::TryUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::TryUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors.EnableAnchor
void GlobalNamespace::CosmeticAnchors::EnableAnchor(bool enable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::EnableAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable);
}
// Autogenerated method: CosmeticAnchors.SetHuntComputerAnchor
void GlobalNamespace::CosmeticAnchors::SetHuntComputerAnchor(bool enable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::SetHuntComputerAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHuntComputerAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable);
}
// Autogenerated method: CosmeticAnchors.SetBuilderWatchAnchor
void GlobalNamespace::CosmeticAnchors::SetBuilderWatchAnchor(bool enable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::SetBuilderWatchAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBuilderWatchAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, enable);
}
// Autogenerated method: CosmeticAnchors.SetCustomAnchor
void GlobalNamespace::CosmeticAnchors::SetCustomAnchor(::UnityEngine::Transform* target, bool enable, ::UnityEngine::GameObject* overrideAnchor, ::UnityEngine::Transform* defaultAnchor) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::SetCustomAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCustomAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(enable), ::il2cpp_utils::ExtractType(overrideAnchor), ::il2cpp_utils::ExtractType(defaultAnchor)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, target, enable, overrideAnchor, defaultAnchor);
}
// Autogenerated method: CosmeticAnchors.GetPositionAnchor
::UnityEngine::Transform* GlobalNamespace::CosmeticAnchors::GetPositionAnchor(::GlobalNamespace::TransferrableObject::PositionState pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::GetPositionAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPositionAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method, pos);
}
// Autogenerated method: CosmeticAnchors.GetNameAnchor
::UnityEngine::Transform* GlobalNamespace::CosmeticAnchors::GetNameAnchor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::GetNameAnchor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNameAnchor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors.AffectedByHunt
bool GlobalNamespace::CosmeticAnchors::AffectedByHunt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::AffectedByHunt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AffectedByHunt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors.AffectedByBuilder
bool GlobalNamespace::CosmeticAnchors::AffectedByBuilder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::AffectedByBuilder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AffectedByBuilder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CosmeticAnchors..cctor
void GlobalNamespace::CosmeticAnchors::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticAnchors::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CosmeticAnchors", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Drum
#include "GlobalNamespace/Drum.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean disabler
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::Drum::dyn_disabler() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Drum::dyn_disabler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disabler"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource mySource
[[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& GlobalNamespace::Drum::dyn_mySource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Drum::dyn_mySource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mySource"))->offset;
  return *reinterpret_cast<::UnityEngine::AudioSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 myIndex
[[deprecated("Use field access instead!")]] int& GlobalNamespace::Drum::dyn_myIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Drum::dyn_myIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: DrumsItem
#include "GlobalNamespace/DrumsItem.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: GorillaTriggerColliderHandIndicator
#include "GlobalNamespace/GorillaTriggerColliderHandIndicator.hpp"
// Including type: Drum
#include "GlobalNamespace/Drum.hpp"
// Including type: VRRig
#include "GlobalNamespace/VRRig.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Collider[] collidersForThisDrum
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::DrumsItem::dyn_collidersForThisDrum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_collidersForThisDrum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidersForThisDrum"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.Collider> collidersForThisDrumList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& GlobalNamespace::DrumsItem::dyn_collidersForThisDrumList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_collidersForThisDrumList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidersForThisDrumList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::Collider*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AudioSource[] drumsAS
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& GlobalNamespace::DrumsItem::dyn_drumsAS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_drumsAS");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drumsAS"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::AudioSource*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxDrumVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DrumsItem::dyn_maxDrumVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_maxDrumVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDrumVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single minDrumVolume
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DrumsItem::dyn_minDrumVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_minDrumVolume");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "minDrumVolume"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single maxDrumVolumeVelocity
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DrumsItem::dyn_maxDrumVolumeVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_maxDrumVolumeVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDrumVolumeVelocity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean rightHandIn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DrumsItem::dyn_rightHandIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_rightHandIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandIn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean leftHandIn
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DrumsItem::dyn_leftHandIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_leftHandIn");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandIn"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single volToPlay
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DrumsItem::dyn_volToPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_volToPlay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "volToPlay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTriggerColliderHandIndicator rightHandIndicator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& GlobalNamespace::DrumsItem::dyn_rightHandIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_rightHandIndicator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rightHandIndicator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaTriggerColliderHandIndicator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private GorillaTriggerColliderHandIndicator leftHandIndicator
[[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& GlobalNamespace::DrumsItem::dyn_leftHandIndicator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_leftHandIndicator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "leftHandIndicator"))->offset;
  return *reinterpret_cast<::GlobalNamespace::GorillaTriggerColliderHandIndicator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit[] collidersHit
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& GlobalNamespace::DrumsItem::dyn_collidersHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_collidersHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidersHit"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::RaycastHit>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Collider[] actualColliders
[[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& GlobalNamespace::DrumsItem::dyn_actualColliders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_actualColliders");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "actualColliders"))->offset;
  return *reinterpret_cast<::ArrayW<::UnityEngine::Collider*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask drumsTouchable
[[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& GlobalNamespace::DrumsItem::dyn_drumsTouchable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_drumsTouchable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drumsTouchable"))->offset;
  return *reinterpret_cast<::UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single sphereRadius
[[deprecated("Use field access instead!")]] float& GlobalNamespace::DrumsItem::dyn_sphereRadius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_sphereRadius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sphereRadius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 spherecastSweep
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& GlobalNamespace::DrumsItem::dyn_spherecastSweep() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_spherecastSweep");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "spherecastSweep"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 collidersHitCount
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DrumsItem::dyn_collidersHitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_collidersHitCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collidersHitCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.RaycastHit> hitList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*& GlobalNamespace::DrumsItem::dyn_hitList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_hitList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hitList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Drum tempDrum
[[deprecated("Use field access instead!")]] ::GlobalNamespace::Drum*& GlobalNamespace::DrumsItem::dyn_tempDrum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_tempDrum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempDrum"))->offset;
  return *reinterpret_cast<::GlobalNamespace::Drum**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean drumHit
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DrumsItem::dyn_drumHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_drumHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "drumHit"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.RaycastHit nullHit
[[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& GlobalNamespace::DrumsItem::dyn_nullHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_nullHit");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "nullHit"))->offset;
  return *reinterpret_cast<::UnityEngine::RaycastHit*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 onlineOffset
[[deprecated("Use field access instead!")]] int& GlobalNamespace::DrumsItem::dyn_onlineOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_onlineOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onlineOffset"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private VRRig myRig
[[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& GlobalNamespace::DrumsItem::dyn_myRig() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_myRig");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "myRig"))->offset;
  return *reinterpret_cast<::GlobalNamespace::VRRig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
[[deprecated("Use field access instead!")]] bool& GlobalNamespace::DrumsItem::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GorillaTag.ISpawnable.IsSpawned>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: DrumsItem.GorillaTag.ISpawnable.get_IsSpawned
bool GlobalNamespace::DrumsItem::GorillaTag_ISpawnable_get_IsSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::GorillaTag.ISpawnable.get_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::DrumsItem*), 4));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DrumsItem.GorillaTag.ISpawnable.set_IsSpawned
void GlobalNamespace::DrumsItem::GorillaTag_ISpawnable_set_IsSpawned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::GorillaTag.ISpawnable.set_IsSpawned");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::DrumsItem*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DrumsItem.GorillaTag.ISpawnable.OnSpawn
void GlobalNamespace::DrumsItem::GorillaTag_ISpawnable_OnSpawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::GorillaTag.ISpawnable.OnSpawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::DrumsItem*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DrumsItem.GorillaTag.ISpawnable.OnDespawn
void GlobalNamespace::DrumsItem::GorillaTag_ISpawnable_OnDespawn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::GorillaTag.ISpawnable.OnDespawn");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::DrumsItem*), 7));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DrumsItem.LateUpdate
void GlobalNamespace::DrumsItem::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DrumsItem.CheckHandHit
void GlobalNamespace::DrumsItem::CheckHandHit(ByRef<bool> handIn, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*> handIndicator, bool isLeftHand) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::CheckHandHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckHandHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handIn), ::il2cpp_utils::ExtractType(handIndicator), ::il2cpp_utils::ExtractType(isLeftHand)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(handIn), byref(handIndicator), isLeftHand);
}
// Autogenerated method: DrumsItem.RayCastHitCompare
int GlobalNamespace::DrumsItem::RayCastHitCompare(::UnityEngine::RaycastHit a, ::UnityEngine::RaycastHit b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::RayCastHitCompare");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RayCastHitCompare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, a, b);
}
// Autogenerated method: DrumsItem.DrumHit
void GlobalNamespace::DrumsItem::DrumHit(::GlobalNamespace::Drum* tempDrumInner, bool isLeftHand, float hitVelocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::DrumHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrumHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tempDrumInner), ::il2cpp_utils::ExtractType(isLeftHand), ::il2cpp_utils::ExtractType(hitVelocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tempDrumInner, isLeftHand, hitVelocity);
}
