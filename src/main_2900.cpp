// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinition/ImpulseShapes
#include "Cinemachine/CinemachineImpulseDefinition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Custom
::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Custom
void Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Custom(::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Custom", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Recoil
::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Recoil() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Recoil");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Recoil"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Recoil
void Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Recoil(::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Recoil");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Recoil", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Bump
::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Bump() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Bump");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Bump"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Bump
void Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Bump(::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Bump");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Bump", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Explosion
::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Explosion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Explosion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Explosion"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Explosion
void Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Explosion(::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Explosion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Explosion", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Rumble
::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Rumble() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_get_Rumble");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Rumble"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseShapes Rumble
void Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Rumble(::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::_set_Rumble");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseShapes", "Rumble", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseShapes::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinition/ImpulseTypes
#include "Cinemachine/CinemachineImpulseDefinition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseTypes Uniform
::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_get_Uniform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_get_Uniform");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseTypes", "Uniform"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseTypes Uniform
void Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_set_Uniform(::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_set_Uniform");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseTypes", "Uniform", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseTypes Dissipating
::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_get_Dissipating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_get_Dissipating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseTypes", "Dissipating"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseTypes Dissipating
void Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_set_Dissipating(::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_set_Dissipating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseTypes", "Dissipating", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseTypes Propagating
::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_get_Propagating() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_get_Propagating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseTypes", "Propagating"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseTypes Propagating
void Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_set_Propagating(::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_set_Propagating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseTypes", "Propagating", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseTypes Legacy
::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_get_Legacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_get_Legacy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes>("Cinemachine", "CinemachineImpulseDefinition/ImpulseTypes", "Legacy"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/ImpulseTypes Legacy
void Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_set_Legacy(::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::_set_Legacy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/ImpulseTypes", "Legacy", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::ImpulseTypes::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinition/RepeatMode
#include "Cinemachine/CinemachineImpulseDefinition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/RepeatMode Stretch
::Cinemachine::CinemachineImpulseDefinition::RepeatMode Cinemachine::CinemachineImpulseDefinition::RepeatMode::_get_Stretch() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::_get_Stretch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::RepeatMode>("Cinemachine", "CinemachineImpulseDefinition/RepeatMode", "Stretch"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/RepeatMode Stretch
void Cinemachine::CinemachineImpulseDefinition::RepeatMode::_set_Stretch(::Cinemachine::CinemachineImpulseDefinition::RepeatMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::_set_Stretch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/RepeatMode", "Stretch", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseDefinition/RepeatMode Loop
::Cinemachine::CinemachineImpulseDefinition::RepeatMode Cinemachine::CinemachineImpulseDefinition::RepeatMode::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseDefinition::RepeatMode>("Cinemachine", "CinemachineImpulseDefinition/RepeatMode", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseDefinition/RepeatMode Loop
void Cinemachine::CinemachineImpulseDefinition::RepeatMode::_set_Loop(::Cinemachine::CinemachineImpulseDefinition::RepeatMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseDefinition/RepeatMode", "Loop", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseDefinition::RepeatMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::RepeatMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinition/SignalSource
#include "Cinemachine/CinemachineImpulseDefinition_SignalSource.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineImpulseDefinition m_Def
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseDefinition*& Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_Def() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_Def");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Def"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseDefinition**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_Velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::dyn_m_Velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition/SignalSource.get_SignalDuration
float Cinemachine::CinemachineImpulseDefinition::SignalSource::get_SignalDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::get_SignalDuration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineImpulseDefinition::SignalSource*), 4));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition/SignalSource.GetSignal
void Cinemachine::CinemachineImpulseDefinition::SignalSource::GetSignal(float timeSinceSignalStart, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::SignalSource::GetSignal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineImpulseDefinition::SignalSource*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceSignalStart, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseDefinition/LegacySignalSource
#include "Cinemachine/CinemachineImpulseDefinition_LegacySignalSource.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Cinemachine.CinemachineImpulseDefinition m_Def
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseDefinition*& Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::dyn_m_Def() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::dyn_m_Def");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Def"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseDefinition**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::dyn_m_Velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::dyn_m_Velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_StartTimeOffset
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::dyn_m_StartTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::dyn_m_StartTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StartTimeOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition/LegacySignalSource.get_SignalDuration
float Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::get_SignalDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::get_SignalDuration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineImpulseDefinition::LegacySignalSource*), 4));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseDefinition/LegacySignalSource.GetSignal
void Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::GetSignal(float timeSinceSignalStart, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseDefinition::LegacySignalSource::GetSignal");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineImpulseDefinition::LegacySignalSource*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, timeSinceSignalStart, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseListener
#include "Cinemachine/CinemachineImpulseListener.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.NoiseSettings
#include "Cinemachine/NoiseSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineCore/Stage m_ApplyAfter
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineCore::Stage& Cinemachine::CinemachineImpulseListener::dyn_m_ApplyAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_ApplyAfter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ApplyAfter"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineCore::Stage*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_ChannelMask
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseListener::dyn_m_ChannelMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_ChannelMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChannelMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Gain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseListener::dyn_m_Gain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_Gain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Gain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Use2DDistance
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineImpulseListener::dyn_m_Use2DDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_Use2DDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Use2DDistance"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_UseCameraSpace
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineImpulseListener::dyn_m_UseCameraSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_UseCameraSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UseCameraSpace"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseListener/ImpulseReaction m_ReactionSettings
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseListener::ImpulseReaction& Cinemachine::CinemachineImpulseListener::dyn_m_ReactionSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::dyn_m_ReactionSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ReactionSettings"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseListener::ImpulseReaction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseListener.Reset
void Cinemachine::CinemachineImpulseListener::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseListener.PostPipelineStageCallback
void Cinemachine::CinemachineImpulseListener::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseListener/ImpulseReaction
#include "Cinemachine/CinemachineImpulseListener.hpp"
// Including type: Cinemachine.NoiseSettings
#include "Cinemachine/NoiseSettings.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.NoiseSettings m_SecondaryNoise
[[deprecated("Use field access instead!")]] ::Cinemachine::NoiseSettings*& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_SecondaryNoise() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_SecondaryNoise");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SecondaryNoise"))->offset;
  return *reinterpret_cast<::Cinemachine::NoiseSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_AmplitudeGain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_AmplitudeGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_AmplitudeGain");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AmplitudeGain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_FrequencyGain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_FrequencyGain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_FrequencyGain");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FrequencyGain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Duration
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_Duration");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Duration"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_CurrentAmount
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_CurrentAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_CurrentAmount");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CurrentAmount"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_CurrentTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_CurrentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_CurrentTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CurrentTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single m_CurrentDamping
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_CurrentDamping() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_CurrentDamping");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CurrentDamping"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_Initialized
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_Initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_Initialized");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Initialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_NoiseOffsets
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_NoiseOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::dyn_m_NoiseOffsets");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_NoiseOffsets"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseListener/ImpulseReaction.ReSeed
void Cinemachine::CinemachineImpulseListener::ImpulseReaction::ReSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::ReSeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReSeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseListener/ImpulseReaction.GetReaction
bool Cinemachine::CinemachineImpulseListener::ImpulseReaction::GetReaction(float deltaTime, ::UnityEngine::Vector3 impulsePos, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseListener::ImpulseReaction::GetReaction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetReaction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(impulsePos), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, deltaTime, impulsePos, byref(pos), byref(rot));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseEnvelopePropertyAttribute
#include "Cinemachine/CinemachineImpulseEnvelopePropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseChannelPropertyAttribute
#include "Cinemachine/CinemachineImpulseChannelPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseManager
#include "Cinemachine/CinemachineImpulseManager.hpp"
// Including type: Cinemachine.CinemachineImpulseManager/EnvelopeDefinition
#include "Cinemachine/CinemachineImpulseManager_EnvelopeDefinition.hpp"
// Including type: Cinemachine.CinemachineImpulseManager/ImpulseEvent
#include "Cinemachine/CinemachineImpulseManager_ImpulseEvent.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Cinemachine.CinemachineImpulseManager sInstance
::Cinemachine::CinemachineImpulseManager* Cinemachine::CinemachineImpulseManager::_get_sInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::_get_sInstance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseManager*>("Cinemachine", "CinemachineImpulseManager", "sInstance"));
}
// Autogenerated static field setter
// Set static field: static private Cinemachine.CinemachineImpulseManager sInstance
void Cinemachine::CinemachineImpulseManager::_set_sInstance(::Cinemachine::CinemachineImpulseManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::_set_sInstance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseManager", "sInstance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single Epsilon
float Cinemachine::CinemachineImpulseManager::_get_Epsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::_get_Epsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine", "CinemachineImpulseManager", "Epsilon"));
}
// Autogenerated static field setter
// Set static field: static private System.Single Epsilon
void Cinemachine::CinemachineImpulseManager::_set_Epsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::_set_Epsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseManager", "Epsilon", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.CinemachineImpulseManager/ImpulseEvent> m_ExpiredEvents
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>*& Cinemachine::CinemachineImpulseManager::dyn_m_ExpiredEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::dyn_m_ExpiredEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExpiredEvents"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.CinemachineImpulseManager/ImpulseEvent> m_ActiveEvents
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>*& Cinemachine::CinemachineImpulseManager::dyn_m_ActiveEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::dyn_m_ActiveEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActiveEvents"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IgnoreTimeScale
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineImpulseManager::dyn_IgnoreTimeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::dyn_IgnoreTimeScale");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IgnoreTimeScale"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager.get_Instance
::Cinemachine::CinemachineImpulseManager* Cinemachine::CinemachineImpulseManager::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineImpulseManager", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineImpulseManager*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager.InitializeModule
void Cinemachine::CinemachineImpulseManager::InitializeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::InitializeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineImpulseManager", "InitializeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager.EvaluateDissipationScale
float Cinemachine::CinemachineImpulseManager::EvaluateDissipationScale(float spread, float normalizedDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EvaluateDissipationScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineImpulseManager", "EvaluateDissipationScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spread), ::il2cpp_utils::ExtractType(normalizedDistance)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, spread, normalizedDistance);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager.GetImpulseAt
bool Cinemachine::CinemachineImpulseManager::GetImpulseAt(::UnityEngine::Vector3 listenerLocation, bool distance2D, int channelMask, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::GetImpulseAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetImpulseAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listenerLocation), ::il2cpp_utils::ExtractType(distance2D), ::il2cpp_utils::ExtractType(channelMask), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, listenerLocation, distance2D, channelMask, byref(pos), byref(rot));
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager.get_CurrentTime
float Cinemachine::CinemachineImpulseManager::get_CurrentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::get_CurrentTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager.NewImpulseEvent
::Cinemachine::CinemachineImpulseManager::ImpulseEvent* Cinemachine::CinemachineImpulseManager::NewImpulseEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::NewImpulseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NewImpulseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager.AddImpulseEvent
void Cinemachine::CinemachineImpulseManager::AddImpulseEvent(::Cinemachine::CinemachineImpulseManager::ImpulseEvent* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::AddImpulseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddImpulseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager.Clear
void Cinemachine::CinemachineImpulseManager::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseManager/EnvelopeDefinition
#include "Cinemachine/CinemachineImpulseManager_EnvelopeDefinition.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve m_AttackShape
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_AttackShape() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_AttackShape");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AttackShape"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve m_DecayShape
[[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_DecayShape() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_DecayShape");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DecayShape"))->offset;
  return *reinterpret_cast<::UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_AttackTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_AttackTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_AttackTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AttackTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_SustainTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_SustainTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_SustainTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SustainTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DecayTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_DecayTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_DecayTime");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DecayTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_ScaleWithImpact
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_ScaleWithImpact() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_ScaleWithImpact");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ScaleWithImpact"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_HoldForever
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_HoldForever() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::dyn_m_HoldForever");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HoldForever"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/EnvelopeDefinition.Default
::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "CinemachineImpulseManager/EnvelopeDefinition", "Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/EnvelopeDefinition.get_Duration
float Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::get_Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::get_Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/EnvelopeDefinition.GetValueAt
float Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::GetValueAt(float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::GetValueAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetValueAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/EnvelopeDefinition.ChangeStopTime
void Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::ChangeStopTime(float offset, bool forceNoDecay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::ChangeStopTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ChangeStopTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(forceNoDecay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, offset, forceNoDecay);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/EnvelopeDefinition.Clear
void Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/EnvelopeDefinition.Validate
void Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseManager/ImpulseEvent
#include "Cinemachine/CinemachineImpulseManager_ImpulseEvent.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: Cinemachine.ISignalSource6D
#include "Cinemachine/ISignalSource6D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single m_StartTime
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_StartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_StartTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StartTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseManager/EnvelopeDefinition m_Envelope
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_Envelope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_Envelope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Envelope"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.ISignalSource6D m_SignalSource
[[deprecated("Use field access instead!")]] ::Cinemachine::ISignalSource6D*& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_SignalSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_SignalSource");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SignalSource"))->offset;
  return *reinterpret_cast<::Cinemachine::ISignalSource6D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_Position
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_Position");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Position"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Radius
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_Radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_Radius");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Radius"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DirectionMode m_DirectionMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_DirectionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_DirectionMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DirectionMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_Channel
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_Channel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_Channel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Channel"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode m_DissipationMode
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_DissipationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_DissipationMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DissipationMode"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_DissipationDistance
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_DissipationDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_DissipationDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DissipationDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_CustomDissipation
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_CustomDissipation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_CustomDissipation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CustomDissipation"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_PropagationSpeed
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_PropagationSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::dyn_m_PropagationSpeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PropagationSpeed"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/ImpulseEvent.get_Expired
bool Cinemachine::CinemachineImpulseManager::ImpulseEvent::get_Expired() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::get_Expired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Expired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/ImpulseEvent.Cancel
void Cinemachine::CinemachineImpulseManager::ImpulseEvent::Cancel(float time, bool forceNoDecay) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(forceNoDecay)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, time, forceNoDecay);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/ImpulseEvent.DistanceDecay
float Cinemachine::CinemachineImpulseManager::ImpulseEvent::DistanceDecay(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DistanceDecay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DistanceDecay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, distance);
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/ImpulseEvent.GetDecayedSignal
bool Cinemachine::CinemachineImpulseManager::ImpulseEvent::GetDecayedSignal(::UnityEngine::Vector3 listenerPosition, bool use2D, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::GetDecayedSignal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDecayedSignal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listenerPosition), ::il2cpp_utils::ExtractType(use2D), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, listenerPosition, use2D, byref(pos), byref(rot));
}
// Autogenerated method: Cinemachine.CinemachineImpulseManager/ImpulseEvent.Clear
void Cinemachine::CinemachineImpulseManager::ImpulseEvent::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseManager/ImpulseEvent/DirectionMode
#include "Cinemachine/CinemachineImpulseManager_ImpulseEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DirectionMode Fixed
::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::_get_Fixed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::_get_Fixed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode>("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DirectionMode", "Fixed"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DirectionMode Fixed
void Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::_set_Fixed(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::_set_Fixed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DirectionMode", "Fixed", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DirectionMode RotateTowardSource
::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::_get_RotateTowardSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::_get_RotateTowardSource");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode>("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DirectionMode", "RotateTowardSource"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DirectionMode RotateTowardSource
void Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::_set_RotateTowardSource(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::_set_RotateTowardSource");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DirectionMode", "RotateTowardSource", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode
#include "Cinemachine/CinemachineImpulseManager_ImpulseEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode LinearDecay
::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_get_LinearDecay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_get_LinearDecay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode>("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DissipationMode", "LinearDecay"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode LinearDecay
void Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_set_LinearDecay(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_set_LinearDecay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DissipationMode", "LinearDecay", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode SoftDecay
::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_get_SoftDecay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_get_SoftDecay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode>("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DissipationMode", "SoftDecay"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode SoftDecay
void Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_set_SoftDecay(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_set_SoftDecay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DissipationMode", "SoftDecay", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode ExponentialDecay
::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_get_ExponentialDecay() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_get_ExponentialDecay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode>("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DissipationMode", "ExponentialDecay"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.CinemachineImpulseManager/ImpulseEvent/DissipationMode ExponentialDecay
void Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_set_ExponentialDecay(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::_set_ExponentialDecay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DissipationMode", "ExponentialDecay", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineImpulseSource
#include "Cinemachine/CinemachineImpulseSource.hpp"
// Including type: Cinemachine.CinemachineImpulseDefinition
#include "Cinemachine/CinemachineImpulseDefinition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseDefinition m_ImpulseDefinition
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseDefinition*& Cinemachine::CinemachineImpulseSource::dyn_m_ImpulseDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::dyn_m_ImpulseDefinition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ImpulseDefinition"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseDefinition**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3 m_DefaultVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineImpulseSource::dyn_m_DefaultVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::dyn_m_DefaultVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_DefaultVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.OnValidate
void Cinemachine::CinemachineImpulseSource::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.Reset
void Cinemachine::CinemachineImpulseSource::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.GenerateImpulseAtPositionWithVelocity
void Cinemachine::CinemachineImpulseSource::GenerateImpulseAtPositionWithVelocity(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::GenerateImpulseAtPositionWithVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpulseAtPositionWithVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(velocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, velocity);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.GenerateImpulseWithVelocity
void Cinemachine::CinemachineImpulseSource::GenerateImpulseWithVelocity(::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::GenerateImpulseWithVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpulseWithVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(velocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, velocity);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.GenerateImpulseWithForce
void Cinemachine::CinemachineImpulseSource::GenerateImpulseWithForce(float force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::GenerateImpulseWithForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpulseWithForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.GenerateImpulse
void Cinemachine::CinemachineImpulseSource::GenerateImpulse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::GenerateImpulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.GenerateImpulseAt
void Cinemachine::CinemachineImpulseSource::GenerateImpulseAt(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::GenerateImpulseAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpulseAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(velocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position, velocity);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.GenerateImpulse
void Cinemachine::CinemachineImpulseSource::GenerateImpulse(::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::GenerateImpulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(velocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, velocity);
}
// Autogenerated method: Cinemachine.CinemachineImpulseSource.GenerateImpulse
void Cinemachine::CinemachineImpulseSource::GenerateImpulse(float force) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::GenerateImpulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateImpulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, force);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.CinemachineIndependentImpulseListener
#include "Cinemachine/CinemachineIndependentImpulseListener.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 impulsePosLastFrame
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::CinemachineIndependentImpulseListener::dyn_impulsePosLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::dyn_impulsePosLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "impulsePosLastFrame"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Quaternion impulseRotLastFrame
[[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& Cinemachine::CinemachineIndependentImpulseListener::dyn_impulseRotLastFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::dyn_impulseRotLastFrame");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "impulseRotLastFrame"))->offset;
  return *reinterpret_cast<::UnityEngine::Quaternion*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 m_ChannelMask
[[deprecated("Use field access instead!")]] int& Cinemachine::CinemachineIndependentImpulseListener::dyn_m_ChannelMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::dyn_m_ChannelMask");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ChannelMask"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_Gain
[[deprecated("Use field access instead!")]] float& Cinemachine::CinemachineIndependentImpulseListener::dyn_m_Gain() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::dyn_m_Gain");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Gain"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_Use2DDistance
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineIndependentImpulseListener::dyn_m_Use2DDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::dyn_m_Use2DDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Use2DDistance"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_UseLocalSpace
[[deprecated("Use field access instead!")]] bool& Cinemachine::CinemachineIndependentImpulseListener::dyn_m_UseLocalSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::dyn_m_UseLocalSpace");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UseLocalSpace"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.CinemachineImpulseListener/ImpulseReaction m_ReactionSettings
[[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseListener::ImpulseReaction& Cinemachine::CinemachineIndependentImpulseListener::dyn_m_ReactionSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::dyn_m_ReactionSettings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ReactionSettings"))->offset;
  return *reinterpret_cast<::Cinemachine::CinemachineImpulseListener::ImpulseReaction*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.CinemachineIndependentImpulseListener.Reset
void Cinemachine::CinemachineIndependentImpulseListener::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineIndependentImpulseListener.OnEnable
void Cinemachine::CinemachineIndependentImpulseListener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineIndependentImpulseListener.Update
void Cinemachine::CinemachineIndependentImpulseListener::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.CinemachineIndependentImpulseListener.LateUpdate
void Cinemachine::CinemachineIndependentImpulseListener::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineIndependentImpulseListener::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/DoublePoint
#include "Cinemachine/ClipperLib_DoublePoint.hpp"
// Including type: Cinemachine.ClipperLib/IntPoint
#include "Cinemachine/ClipperLib_IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Double X
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::DoublePoint::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::DoublePoint::dyn_X");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Double Y
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::DoublePoint::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::DoublePoint::dyn_Y");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/DoublePoint..ctor
// ABORTED elsewhere.  Cinemachine::ClipperLib::DoublePoint::DoublePoint(double x, double y)
// Autogenerated method: Cinemachine.ClipperLib/DoublePoint..ctor
// ABORTED elsewhere.  Cinemachine::ClipperLib::DoublePoint::DoublePoint(::Cinemachine::ClipperLib::DoublePoint dp)
// Autogenerated method: Cinemachine.ClipperLib/DoublePoint..ctor
Cinemachine::ClipperLib::DoublePoint::DoublePoint(::Cinemachine::ClipperLib::IntPoint ip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::DoublePoint::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ip)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ip);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/PolyTree
#include "Cinemachine/ClipperLib_PolyTree.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.List`1<Cinemachine.ClipperLib/PolyNode> m_AllPolys
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>*& Cinemachine::ClipperLib::PolyTree::dyn_m_AllPolys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyTree::dyn_m_AllPolys");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_AllPolys"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyTree.Clear
void Cinemachine::ClipperLib::PolyTree::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyTree::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyTree.GetFirst
::Cinemachine::ClipperLib::PolyNode* Cinemachine::ClipperLib::PolyTree::GetFirst() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyTree::GetFirst");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFirst", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::PolyNode*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyTree.get_Total
int Cinemachine::ClipperLib::PolyTree::get_Total() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyTree::get_Total");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Total", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/PolyNode
#include "Cinemachine/ClipperLib_PolyNode.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/PolyNode m_Parent
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyNode*& Cinemachine::ClipperLib::PolyNode::dyn_m_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::dyn_m_Parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Parent"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::PolyNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> m_polygon
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*& Cinemachine::ClipperLib::PolyNode::dyn_m_polygon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::dyn_m_polygon");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_polygon"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 m_Index
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::PolyNode::dyn_m_Index() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::dyn_m_Index");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Index"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/JoinType m_jointype
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::JoinType& Cinemachine::ClipperLib::PolyNode::dyn_m_jointype() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::dyn_m_jointype");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_jointype"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::JoinType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/EndType m_endtype
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::EndType& Cinemachine::ClipperLib::PolyNode::dyn_m_endtype() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::dyn_m_endtype");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_endtype"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::EndType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.List`1<Cinemachine.ClipperLib/PolyNode> m_Childs
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>*& Cinemachine::ClipperLib::PolyNode::dyn_m_Childs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::dyn_m_Childs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Childs"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsOpen>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::PolyNode::dyn_$IsOpen$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::dyn_$IsOpen$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsOpen>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.IsHoleNode
bool Cinemachine::ClipperLib::PolyNode::IsHoleNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::IsHoleNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsHoleNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.get_ChildCount
int Cinemachine::ClipperLib::PolyNode::get_ChildCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::get_ChildCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChildCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.get_Contour
::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* Cinemachine::ClipperLib::PolyNode::get_Contour() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::get_Contour");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Contour", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.AddChild
void Cinemachine::ClipperLib::PolyNode::AddChild(::Cinemachine::ClipperLib::PolyNode* Child) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::AddChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Child)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, Child);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.GetNext
::Cinemachine::ClipperLib::PolyNode* Cinemachine::ClipperLib::PolyNode::GetNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::GetNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::PolyNode*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.GetNextSiblingUp
::Cinemachine::ClipperLib::PolyNode* Cinemachine::ClipperLib::PolyNode::GetNextSiblingUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::GetNextSiblingUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextSiblingUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::PolyNode*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.get_Childs
::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>* Cinemachine::ClipperLib::PolyNode::get_Childs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::get_Childs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Childs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.get_Parent
::Cinemachine::ClipperLib::PolyNode* Cinemachine::ClipperLib::PolyNode::get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::get_Parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::PolyNode*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.get_IsHole
bool Cinemachine::ClipperLib::PolyNode::get_IsHole() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::get_IsHole");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsHole", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.get_IsOpen
bool Cinemachine::ClipperLib::PolyNode::get_IsOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::get_IsOpen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsOpen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/PolyNode.set_IsOpen
void Cinemachine::ClipperLib::PolyNode::set_IsOpen(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyNode::set_IsOpen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsOpen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.ClipperLib/Int128
#include "Cinemachine/ClipperLib_Int128.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int64 hi
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::Int128::dyn_hi() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::dyn_hi");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hi"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt64 lo
[[deprecated("Use field access instead!")]] uint64_t& Cinemachine::ClipperLib::Int128::dyn_lo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::dyn_lo");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lo"))->offset;
  return *reinterpret_cast<uint64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128..ctor
Cinemachine::ClipperLib::Int128::Int128(int64_t _lo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_lo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, _lo);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128..ctor
// ABORTED elsewhere.  Cinemachine::ClipperLib::Int128::Int128(int64_t _hi, uint64_t _lo)
// Autogenerated method: Cinemachine.ClipperLib/Int128..ctor
// ABORTED elsewhere.  Cinemachine::ClipperLib::Int128::Int128(::Cinemachine::ClipperLib::Int128 val)
// Autogenerated method: Cinemachine.ClipperLib/Int128.IsNegative
bool Cinemachine::ClipperLib::Int128::IsNegative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::IsNegative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsNegative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.op_Explicit
Cinemachine::ClipperLib::Int128::operator double() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.Int128Mul
::Cinemachine::ClipperLib::Int128 Cinemachine::ClipperLib::Int128::Int128Mul(int64_t lhs, int64_t rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::Int128Mul");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "Int128Mul", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::Int128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.Equals
bool Cinemachine::ClipperLib::Int128::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.GetHashCode
int Cinemachine::ClipperLib::Int128::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.op_Equality
bool Cinemachine::operator ==(const ::Cinemachine::ClipperLib::Int128& val1, const ::Cinemachine::ClipperLib::Int128& val2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val1), ::il2cpp_utils::ExtractType(val2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val1, val2);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.op_Inequality
bool Cinemachine::operator !=(const ::Cinemachine::ClipperLib::Int128& val1, const ::Cinemachine::ClipperLib::Int128& val2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val1), ::il2cpp_utils::ExtractType(val2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val1, val2);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.op_GreaterThan
bool Cinemachine::operator >(const ::Cinemachine::ClipperLib::Int128& val1, const ::Cinemachine::ClipperLib::Int128& val2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::op_GreaterThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "op_GreaterThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val1), ::il2cpp_utils::ExtractType(val2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val1, val2);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.op_LessThan
bool Cinemachine::operator <(const ::Cinemachine::ClipperLib::Int128& val1, const ::Cinemachine::ClipperLib::Int128& val2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::op_LessThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "op_LessThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val1), ::il2cpp_utils::ExtractType(val2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val1, val2);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.op_Addition
::Cinemachine::ClipperLib::Int128 Cinemachine::operator+(const ::Cinemachine::ClipperLib::Int128& lhs, const ::Cinemachine::ClipperLib::Int128& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::Int128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.op_Subtraction
::Cinemachine::ClipperLib::Int128 Cinemachine::operator-(const ::Cinemachine::ClipperLib::Int128& lhs, const ::Cinemachine::ClipperLib::Int128& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::Int128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: Cinemachine.ClipperLib/Int128.op_UnaryNegation
::Cinemachine::ClipperLib::Int128 Cinemachine::operator-(const ::Cinemachine::ClipperLib::Int128& val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Int128::op_UnaryNegation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Int128", "op_UnaryNegation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::Int128, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.ClipperLib/IntPoint
#include "Cinemachine/ClipperLib_IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int64 X
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::IntPoint::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntPoint::dyn_X");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 Y
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::IntPoint::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntPoint::dyn_Y");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/IntPoint..ctor
// ABORTED elsewhere.  Cinemachine::ClipperLib::IntPoint::IntPoint(int64_t X, int64_t Y)
// Autogenerated method: Cinemachine.ClipperLib/IntPoint..ctor
Cinemachine::ClipperLib::IntPoint::IntPoint(double x, double y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntPoint::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, x, y);
}
// Autogenerated method: Cinemachine.ClipperLib/IntPoint..ctor
// ABORTED elsewhere.  Cinemachine::ClipperLib::IntPoint::IntPoint(::Cinemachine::ClipperLib::IntPoint pt)
// Autogenerated method: Cinemachine.ClipperLib/IntPoint.Equals
bool Cinemachine::ClipperLib::IntPoint::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntPoint::Equals");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 0));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: Cinemachine.ClipperLib/IntPoint.GetHashCode
int Cinemachine::ClipperLib::IntPoint::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntPoint::GetHashCode");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), 2));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/IntPoint.op_Equality
bool Cinemachine::operator ==(const ::Cinemachine::ClipperLib::IntPoint& a, const ::Cinemachine::ClipperLib::IntPoint& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntPoint::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/IntPoint", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: Cinemachine.ClipperLib/IntPoint.op_Inequality
bool Cinemachine::operator !=(const ::Cinemachine::ClipperLib::IntPoint& a, const ::Cinemachine::ClipperLib::IntPoint& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntPoint::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/IntPoint", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/IntRect
#include "Cinemachine/ClipperLib_IntRect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int64 left
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::IntRect::dyn_left() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntRect::dyn_left");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "left"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 top
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::IntRect::dyn_top() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntRect::dyn_top");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "top"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 right
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::IntRect::dyn_right() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntRect::dyn_right");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "right"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int64 bottom
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::IntRect::dyn_bottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntRect::dyn_bottom");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bottom"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/IntRect..ctor
// ABORTED elsewhere.  Cinemachine::ClipperLib::IntRect::IntRect(int64_t l, int64_t t, int64_t r, int64_t b)
// Autogenerated method: Cinemachine.ClipperLib/IntRect..ctor
// ABORTED elsewhere.  Cinemachine::ClipperLib::IntRect::IntRect(::Cinemachine::ClipperLib::IntRect ir)
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/ClipType
#include "Cinemachine/ClipperLib_ClipType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/ClipType ctIntersection
::Cinemachine::ClipperLib::ClipType Cinemachine::ClipperLib::ClipType::_get_ctIntersection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::_get_ctIntersection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::ClipType>("Cinemachine", "ClipperLib/ClipType", "ctIntersection"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/ClipType ctIntersection
void Cinemachine::ClipperLib::ClipType::_set_ctIntersection(::Cinemachine::ClipperLib::ClipType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::_set_ctIntersection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipType", "ctIntersection", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/ClipType ctUnion
::Cinemachine::ClipperLib::ClipType Cinemachine::ClipperLib::ClipType::_get_ctUnion() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::_get_ctUnion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::ClipType>("Cinemachine", "ClipperLib/ClipType", "ctUnion"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/ClipType ctUnion
void Cinemachine::ClipperLib::ClipType::_set_ctUnion(::Cinemachine::ClipperLib::ClipType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::_set_ctUnion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipType", "ctUnion", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/ClipType ctDifference
::Cinemachine::ClipperLib::ClipType Cinemachine::ClipperLib::ClipType::_get_ctDifference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::_get_ctDifference");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::ClipType>("Cinemachine", "ClipperLib/ClipType", "ctDifference"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/ClipType ctDifference
void Cinemachine::ClipperLib::ClipType::_set_ctDifference(::Cinemachine::ClipperLib::ClipType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::_set_ctDifference");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipType", "ctDifference", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/ClipType ctXor
::Cinemachine::ClipperLib::ClipType Cinemachine::ClipperLib::ClipType::_get_ctXor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::_get_ctXor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::ClipType>("Cinemachine", "ClipperLib/ClipType", "ctXor"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/ClipType ctXor
void Cinemachine::ClipperLib::ClipType::_set_ctXor(::Cinemachine::ClipperLib::ClipType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::_set_ctXor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipType", "ctXor", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::ClipType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/PolyType
#include "Cinemachine/ClipperLib_PolyType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/PolyType ptSubject
::Cinemachine::ClipperLib::PolyType Cinemachine::ClipperLib::PolyType::_get_ptSubject() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyType::_get_ptSubject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::PolyType>("Cinemachine", "ClipperLib/PolyType", "ptSubject"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/PolyType ptSubject
void Cinemachine::ClipperLib::PolyType::_set_ptSubject(::Cinemachine::ClipperLib::PolyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyType::_set_ptSubject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/PolyType", "ptSubject", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/PolyType ptClip
::Cinemachine::ClipperLib::PolyType Cinemachine::ClipperLib::PolyType::_get_ptClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyType::_get_ptClip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::PolyType>("Cinemachine", "ClipperLib/PolyType", "ptClip"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/PolyType ptClip
void Cinemachine::ClipperLib::PolyType::_set_ptClip(::Cinemachine::ClipperLib::PolyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyType::_set_ptClip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/PolyType", "ptClip", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::PolyType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/PolyFillType
#include "Cinemachine/ClipperLib_PolyFillType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/PolyFillType pftEvenOdd
::Cinemachine::ClipperLib::PolyFillType Cinemachine::ClipperLib::PolyFillType::_get_pftEvenOdd() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::_get_pftEvenOdd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::PolyFillType>("Cinemachine", "ClipperLib/PolyFillType", "pftEvenOdd"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/PolyFillType pftEvenOdd
void Cinemachine::ClipperLib::PolyFillType::_set_pftEvenOdd(::Cinemachine::ClipperLib::PolyFillType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::_set_pftEvenOdd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/PolyFillType", "pftEvenOdd", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/PolyFillType pftNonZero
::Cinemachine::ClipperLib::PolyFillType Cinemachine::ClipperLib::PolyFillType::_get_pftNonZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::_get_pftNonZero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::PolyFillType>("Cinemachine", "ClipperLib/PolyFillType", "pftNonZero"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/PolyFillType pftNonZero
void Cinemachine::ClipperLib::PolyFillType::_set_pftNonZero(::Cinemachine::ClipperLib::PolyFillType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::_set_pftNonZero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/PolyFillType", "pftNonZero", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/PolyFillType pftPositive
::Cinemachine::ClipperLib::PolyFillType Cinemachine::ClipperLib::PolyFillType::_get_pftPositive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::_get_pftPositive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::PolyFillType>("Cinemachine", "ClipperLib/PolyFillType", "pftPositive"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/PolyFillType pftPositive
void Cinemachine::ClipperLib::PolyFillType::_set_pftPositive(::Cinemachine::ClipperLib::PolyFillType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::_set_pftPositive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/PolyFillType", "pftPositive", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/PolyFillType pftNegative
::Cinemachine::ClipperLib::PolyFillType Cinemachine::ClipperLib::PolyFillType::_get_pftNegative() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::_get_pftNegative");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::PolyFillType>("Cinemachine", "ClipperLib/PolyFillType", "pftNegative"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/PolyFillType pftNegative
void Cinemachine::ClipperLib::PolyFillType::_set_pftNegative(::Cinemachine::ClipperLib::PolyFillType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::_set_pftNegative");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/PolyFillType", "pftNegative", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::PolyFillType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyFillType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/JoinType
#include "Cinemachine/ClipperLib_JoinType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/JoinType jtSquare
::Cinemachine::ClipperLib::JoinType Cinemachine::ClipperLib::JoinType::_get_jtSquare() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::JoinType::_get_jtSquare");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::JoinType>("Cinemachine", "ClipperLib/JoinType", "jtSquare"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/JoinType jtSquare
void Cinemachine::ClipperLib::JoinType::_set_jtSquare(::Cinemachine::ClipperLib::JoinType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::JoinType::_set_jtSquare");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/JoinType", "jtSquare", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/JoinType jtRound
::Cinemachine::ClipperLib::JoinType Cinemachine::ClipperLib::JoinType::_get_jtRound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::JoinType::_get_jtRound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::JoinType>("Cinemachine", "ClipperLib/JoinType", "jtRound"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/JoinType jtRound
void Cinemachine::ClipperLib::JoinType::_set_jtRound(::Cinemachine::ClipperLib::JoinType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::JoinType::_set_jtRound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/JoinType", "jtRound", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/JoinType jtMiter
::Cinemachine::ClipperLib::JoinType Cinemachine::ClipperLib::JoinType::_get_jtMiter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::JoinType::_get_jtMiter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::JoinType>("Cinemachine", "ClipperLib/JoinType", "jtMiter"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/JoinType jtMiter
void Cinemachine::ClipperLib::JoinType::_set_jtMiter(::Cinemachine::ClipperLib::JoinType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::JoinType::_set_jtMiter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/JoinType", "jtMiter", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::JoinType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::JoinType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/EndType
#include "Cinemachine/ClipperLib_EndType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/EndType etClosedPolygon
::Cinemachine::ClipperLib::EndType Cinemachine::ClipperLib::EndType::_get_etClosedPolygon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_get_etClosedPolygon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::EndType>("Cinemachine", "ClipperLib/EndType", "etClosedPolygon"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/EndType etClosedPolygon
void Cinemachine::ClipperLib::EndType::_set_etClosedPolygon(::Cinemachine::ClipperLib::EndType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_set_etClosedPolygon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/EndType", "etClosedPolygon", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/EndType etClosedLine
::Cinemachine::ClipperLib::EndType Cinemachine::ClipperLib::EndType::_get_etClosedLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_get_etClosedLine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::EndType>("Cinemachine", "ClipperLib/EndType", "etClosedLine"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/EndType etClosedLine
void Cinemachine::ClipperLib::EndType::_set_etClosedLine(::Cinemachine::ClipperLib::EndType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_set_etClosedLine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/EndType", "etClosedLine", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/EndType etOpenButt
::Cinemachine::ClipperLib::EndType Cinemachine::ClipperLib::EndType::_get_etOpenButt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_get_etOpenButt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::EndType>("Cinemachine", "ClipperLib/EndType", "etOpenButt"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/EndType etOpenButt
void Cinemachine::ClipperLib::EndType::_set_etOpenButt(::Cinemachine::ClipperLib::EndType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_set_etOpenButt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/EndType", "etOpenButt", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/EndType etOpenSquare
::Cinemachine::ClipperLib::EndType Cinemachine::ClipperLib::EndType::_get_etOpenSquare() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_get_etOpenSquare");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::EndType>("Cinemachine", "ClipperLib/EndType", "etOpenSquare"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/EndType etOpenSquare
void Cinemachine::ClipperLib::EndType::_set_etOpenSquare(::Cinemachine::ClipperLib::EndType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_set_etOpenSquare");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/EndType", "etOpenSquare", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/EndType etOpenRound
::Cinemachine::ClipperLib::EndType Cinemachine::ClipperLib::EndType::_get_etOpenRound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_get_etOpenRound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::EndType>("Cinemachine", "ClipperLib/EndType", "etOpenRound"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/EndType etOpenRound
void Cinemachine::ClipperLib::EndType::_set_etOpenRound(::Cinemachine::ClipperLib::EndType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::_set_etOpenRound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/EndType", "etOpenRound", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::EndType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EndType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/EdgeSide
#include "Cinemachine/ClipperLib_EdgeSide.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/EdgeSide esLeft
::Cinemachine::ClipperLib::EdgeSide Cinemachine::ClipperLib::EdgeSide::_get_esLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EdgeSide::_get_esLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::EdgeSide>("Cinemachine", "ClipperLib/EdgeSide", "esLeft"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/EdgeSide esLeft
void Cinemachine::ClipperLib::EdgeSide::_set_esLeft(::Cinemachine::ClipperLib::EdgeSide value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EdgeSide::_set_esLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/EdgeSide", "esLeft", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/EdgeSide esRight
::Cinemachine::ClipperLib::EdgeSide Cinemachine::ClipperLib::EdgeSide::_get_esRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EdgeSide::_get_esRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::EdgeSide>("Cinemachine", "ClipperLib/EdgeSide", "esRight"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/EdgeSide esRight
void Cinemachine::ClipperLib::EdgeSide::_set_esRight(::Cinemachine::ClipperLib::EdgeSide value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EdgeSide::_set_esRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/EdgeSide", "esRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::EdgeSide::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::EdgeSide::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/Direction
#include "Cinemachine/ClipperLib_Direction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/Direction dRightToLeft
::Cinemachine::ClipperLib::Direction Cinemachine::ClipperLib::Direction::_get_dRightToLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Direction::_get_dRightToLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::Direction>("Cinemachine", "ClipperLib/Direction", "dRightToLeft"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/Direction dRightToLeft
void Cinemachine::ClipperLib::Direction::_set_dRightToLeft(::Cinemachine::ClipperLib::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Direction::_set_dRightToLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/Direction", "dRightToLeft", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/Direction dLeftToRight
::Cinemachine::ClipperLib::Direction Cinemachine::ClipperLib::Direction::_get_dLeftToRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Direction::_get_dLeftToRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::Direction>("Cinemachine", "ClipperLib/Direction", "dLeftToRight"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/Direction dLeftToRight
void Cinemachine::ClipperLib::Direction::_set_dLeftToRight(::Cinemachine::ClipperLib::Direction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Direction::_set_dLeftToRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/Direction", "dLeftToRight", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::Direction::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Direction::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/TEdge
#include "Cinemachine/ClipperLib_TEdge.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/IntPoint Bot
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& Cinemachine::ClipperLib::TEdge::dyn_Bot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_Bot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Bot"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::IntPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/IntPoint Curr
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& Cinemachine::ClipperLib::TEdge::dyn_Curr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_Curr");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Curr"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::IntPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/IntPoint Top
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& Cinemachine::ClipperLib::TEdge::dyn_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_Top");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Top"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::IntPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/IntPoint Delta
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& Cinemachine::ClipperLib::TEdge::dyn_Delta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_Delta");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Delta"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::IntPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Double Dx
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::TEdge::dyn_Dx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_Dx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Dx"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/PolyType PolyTyp
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyType& Cinemachine::ClipperLib::TEdge::dyn_PolyTyp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_PolyTyp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PolyTyp"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::PolyType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/EdgeSide Side
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::EdgeSide& Cinemachine::ClipperLib::TEdge::dyn_Side() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_Side");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Side"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::EdgeSide*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 WindDelta
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::TEdge::dyn_WindDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_WindDelta");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WindDelta"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 WindCnt
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::TEdge::dyn_WindCnt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_WindCnt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WindCnt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 WindCnt2
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::TEdge::dyn_WindCnt2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_WindCnt2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WindCnt2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int32 OutIdx
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::TEdge::dyn_OutIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_OutIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OutIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge Next
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::TEdge::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge Prev
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::TEdge::dyn_Prev() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_Prev");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Prev"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge NextInLML
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::TEdge::dyn_NextInLML() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_NextInLML");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextInLML"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge NextInAEL
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::TEdge::dyn_NextInAEL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_NextInAEL");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextInAEL"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge PrevInAEL
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::TEdge::dyn_PrevInAEL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_PrevInAEL");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PrevInAEL"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge NextInSEL
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::TEdge::dyn_NextInSEL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_NextInSEL");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextInSEL"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge PrevInSEL
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::TEdge::dyn_PrevInSEL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::TEdge::dyn_PrevInSEL");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PrevInSEL"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/IntersectNode
#include "Cinemachine/ClipperLib_IntersectNode.hpp"
// Including type: Cinemachine.ClipperLib/TEdge
#include "Cinemachine/ClipperLib_TEdge.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge Edge1
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::IntersectNode::dyn_Edge1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntersectNode::dyn_Edge1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Edge1"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge Edge2
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::IntersectNode::dyn_Edge2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntersectNode::dyn_Edge2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Edge2"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/IntPoint Pt
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& Cinemachine::ClipperLib::IntersectNode::dyn_Pt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::IntersectNode::dyn_Pt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Pt"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::IntPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/MyIntersectNodeSort
#include "Cinemachine/ClipperLib_MyIntersectNodeSort.hpp"
// Including type: Cinemachine.ClipperLib/IntersectNode
#include "Cinemachine/ClipperLib_IntersectNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.ClipperLib/MyIntersectNodeSort.Compare
int Cinemachine::ClipperLib::MyIntersectNodeSort::Compare(::Cinemachine::ClipperLib::IntersectNode* node1, ::Cinemachine::ClipperLib::IntersectNode* node2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::MyIntersectNodeSort::Compare");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ClipperLib::MyIntersectNodeSort*), 4));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, node1, node2);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/LocalMinima
#include "Cinemachine/ClipperLib_LocalMinima.hpp"
// Including type: Cinemachine.ClipperLib/TEdge
#include "Cinemachine/ClipperLib_TEdge.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int64 Y
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::LocalMinima::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::LocalMinima::dyn_Y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge LeftBound
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::LocalMinima::dyn_LeftBound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::LocalMinima::dyn_LeftBound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LeftBound"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge RightBound
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::LocalMinima::dyn_RightBound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::LocalMinima::dyn_RightBound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RightBound"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/LocalMinima Next
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::LocalMinima*& Cinemachine::ClipperLib::LocalMinima::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::LocalMinima::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::LocalMinima**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/Scanbeam
#include "Cinemachine/ClipperLib_Scanbeam.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int64 Y
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::Scanbeam::dyn_Y() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Scanbeam::dyn_Y");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Y"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/Scanbeam Next
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::Scanbeam*& Cinemachine::ClipperLib::Scanbeam::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Scanbeam::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::Scanbeam**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/Maxima
#include "Cinemachine/ClipperLib_Maxima.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int64 X
[[deprecated("Use field access instead!")]] int64_t& Cinemachine::ClipperLib::Maxima::dyn_X() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Maxima::dyn_X");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "X"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/Maxima Next
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::Maxima*& Cinemachine::ClipperLib::Maxima::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Maxima::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::Maxima**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/Maxima Prev
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::Maxima*& Cinemachine::ClipperLib::Maxima::dyn_Prev() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Maxima::dyn_Prev");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Prev"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::Maxima**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/OutRec
#include "Cinemachine/ClipperLib_OutRec.hpp"
// Including type: Cinemachine.ClipperLib/OutPt
#include "Cinemachine/ClipperLib_OutPt.hpp"
// Including type: Cinemachine.ClipperLib/PolyNode
#include "Cinemachine/ClipperLib_PolyNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 Idx
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::OutRec::dyn_Idx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutRec::dyn_Idx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Idx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean IsHole
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::OutRec::dyn_IsHole() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutRec::dyn_IsHole");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsHole"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean IsOpen
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::OutRec::dyn_IsOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutRec::dyn_IsOpen");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsOpen"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/OutRec FirstLeft
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutRec*& Cinemachine::ClipperLib::OutRec::dyn_FirstLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutRec::dyn_FirstLeft");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FirstLeft"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::OutRec**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/OutPt Pts
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutPt*& Cinemachine::ClipperLib::OutRec::dyn_Pts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutRec::dyn_Pts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Pts"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::OutPt**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/OutPt BottomPt
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutPt*& Cinemachine::ClipperLib::OutRec::dyn_BottomPt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutRec::dyn_BottomPt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BottomPt"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::OutPt**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/PolyNode PolyNode
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyNode*& Cinemachine::ClipperLib::OutRec::dyn_PolyNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutRec::dyn_PolyNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PolyNode"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::PolyNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/OutPt
#include "Cinemachine/ClipperLib_OutPt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: System.Int32 Idx
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::OutPt::dyn_Idx() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutPt::dyn_Idx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Idx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/IntPoint Pt
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& Cinemachine::ClipperLib::OutPt::dyn_Pt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutPt::dyn_Pt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Pt"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::IntPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/OutPt Next
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutPt*& Cinemachine::ClipperLib::OutPt::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutPt::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::OutPt**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/OutPt Prev
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutPt*& Cinemachine::ClipperLib::OutPt::dyn_Prev() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutPt::dyn_Prev");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Prev"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::OutPt**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/Join
#include "Cinemachine/ClipperLib_Join.hpp"
// Including type: Cinemachine.ClipperLib/OutPt
#include "Cinemachine/ClipperLib_OutPt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/OutPt OutPt1
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutPt*& Cinemachine::ClipperLib::Join::dyn_OutPt1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Join::dyn_OutPt1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OutPt1"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::OutPt**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/OutPt OutPt2
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutPt*& Cinemachine::ClipperLib::Join::dyn_OutPt2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Join::dyn_OutPt2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OutPt2"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::OutPt**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/IntPoint OffPt
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& Cinemachine::ClipperLib::Join::dyn_OffPt() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Join::dyn_OffPt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OffPt"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::IntPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/ClipperBase
#include "Cinemachine/ClipperLib_ClipperBase.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.ClipperLib/LocalMinima
#include "Cinemachine/ClipperLib_LocalMinima.hpp"
// Including type: Cinemachine.ClipperLib/TEdge
#include "Cinemachine/ClipperLib_TEdge.hpp"
// Including type: Cinemachine.ClipperLib/Scanbeam
#include "Cinemachine/ClipperLib_Scanbeam.hpp"
// Including type: Cinemachine.ClipperLib/OutRec
#include "Cinemachine/ClipperLib_OutRec.hpp"
// Including type: Cinemachine.ClipperLib/IntRect
#include "Cinemachine/ClipperLib_IntRect.hpp"
// Including type: Cinemachine.ClipperLib/OutPt
#include "Cinemachine/ClipperLib_OutPt.hpp"
// Including type: Cinemachine.ClipperLib/PolyType
#include "Cinemachine/ClipperLib_PolyType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Double horizontal
double Cinemachine::ClipperLib::ClipperBase::_get_horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_get_horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("Cinemachine", "ClipperLib/ClipperBase", "horizontal"));
}
// Autogenerated static field setter
// Set static field: static System.Double horizontal
void Cinemachine::ClipperLib::ClipperBase::_set_horizontal(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_set_horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipperBase", "horizontal", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 Skip
int Cinemachine::ClipperLib::ClipperBase::_get_Skip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_get_Skip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "ClipperLib/ClipperBase", "Skip"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 Skip
void Cinemachine::ClipperLib::ClipperBase::_set_Skip(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_set_Skip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipperBase", "Skip", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 Unassigned
int Cinemachine::ClipperLib::ClipperBase::_get_Unassigned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_get_Unassigned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "ClipperLib/ClipperBase", "Unassigned"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 Unassigned
void Cinemachine::ClipperLib::ClipperBase::_set_Unassigned(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_set_Unassigned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipperBase", "Unassigned", value));
}
// Autogenerated static field getter
// Get static field: static System.Double tolerance
double Cinemachine::ClipperLib::ClipperBase::_get_tolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_get_tolerance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("Cinemachine", "ClipperLib/ClipperBase", "tolerance"));
}
// Autogenerated static field setter
// Set static field: static System.Double tolerance
void Cinemachine::ClipperLib::ClipperBase::_set_tolerance(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_set_tolerance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipperBase", "tolerance", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int64 loRange
int64_t Cinemachine::ClipperLib::ClipperBase::_get_loRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_get_loRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("Cinemachine", "ClipperLib/ClipperBase", "loRange"));
}
// Autogenerated static field setter
// Set static field: static public System.Int64 loRange
void Cinemachine::ClipperLib::ClipperBase::_set_loRange(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_set_loRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipperBase", "loRange", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int64 hiRange
int64_t Cinemachine::ClipperLib::ClipperBase::_get_hiRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_get_hiRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("Cinemachine", "ClipperLib/ClipperBase", "hiRange"));
}
// Autogenerated static field setter
// Set static field: static public System.Int64 hiRange
void Cinemachine::ClipperLib::ClipperBase::_set_hiRange(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::_set_hiRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipperBase", "hiRange", value));
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/LocalMinima m_MinimaList
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::LocalMinima*& Cinemachine::ClipperLib::ClipperBase::dyn_m_MinimaList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_m_MinimaList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MinimaList"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::LocalMinima**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/LocalMinima m_CurrentLM
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::LocalMinima*& Cinemachine::ClipperLib::ClipperBase::dyn_m_CurrentLM() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_m_CurrentLM");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_CurrentLM"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::LocalMinima**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/TEdge>> m_edges
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::TEdge*>*>*& Cinemachine::ClipperLib::ClipperBase::dyn_m_edges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_m_edges");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_edges"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::TEdge*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/Scanbeam m_Scanbeam
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::Scanbeam*& Cinemachine::ClipperLib::ClipperBase::dyn_m_Scanbeam() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_m_Scanbeam");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Scanbeam"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::Scanbeam**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Collections.Generic.List`1<Cinemachine.ClipperLib/OutRec> m_PolyOuts
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::OutRec*>*& Cinemachine::ClipperLib::ClipperBase::dyn_m_PolyOuts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_m_PolyOuts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_PolyOuts"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::OutRec*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: Cinemachine.ClipperLib/TEdge m_ActiveEdges
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::ClipperBase::dyn_m_ActiveEdges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_m_ActiveEdges");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ActiveEdges"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean m_UseFullRange
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::ClipperBase::dyn_m_UseFullRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_m_UseFullRange");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UseFullRange"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Boolean m_HasOpenPaths
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::ClipperBase::dyn_m_HasOpenPaths() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_m_HasOpenPaths");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HasOpenPaths"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <PreserveCollinear>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::ClipperBase::dyn_$PreserveCollinear$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::dyn_$PreserveCollinear$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PreserveCollinear>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.near_zero
bool Cinemachine::ClipperLib::ClipperBase::near_zero(double val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::near_zero");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/ClipperBase", "near_zero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.get_PreserveCollinear
bool Cinemachine::ClipperLib::ClipperBase::get_PreserveCollinear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::get_PreserveCollinear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PreserveCollinear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.set_PreserveCollinear
void Cinemachine::ClipperLib::ClipperBase::set_PreserveCollinear(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::set_PreserveCollinear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PreserveCollinear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.Swap
void Cinemachine::ClipperLib::ClipperBase::Swap(ByRef<int64_t> val1, ByRef<int64_t> val2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::Swap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val1), ::il2cpp_utils::ExtractType(val2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(val1), byref(val2));
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.IsHorizontal
bool Cinemachine::ClipperLib::ClipperBase::IsHorizontal(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::IsHorizontal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/ClipperBase", "IsHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.PointIsVertex
bool Cinemachine::ClipperLib::ClipperBase::PointIsVertex(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::OutPt* pp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::PointIsVertex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PointIsVertex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt), ::il2cpp_utils::ExtractType(pp)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pt, pp);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.PointOnLineSegment
bool Cinemachine::ClipperLib::ClipperBase::PointOnLineSegment(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::IntPoint linePt1, ::Cinemachine::ClipperLib::IntPoint linePt2, bool UseFullRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::PointOnLineSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PointOnLineSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt), ::il2cpp_utils::ExtractType(linePt1), ::il2cpp_utils::ExtractType(linePt2), ::il2cpp_utils::ExtractType(UseFullRange)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pt, linePt1, linePt2, UseFullRange);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.PointOnPolygon
bool Cinemachine::ClipperLib::ClipperBase::PointOnPolygon(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::OutPt* pp, bool UseFullRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::PointOnPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PointOnPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt), ::il2cpp_utils::ExtractType(pp), ::il2cpp_utils::ExtractType(UseFullRange)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pt, pp, UseFullRange);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.SlopesEqual
bool Cinemachine::ClipperLib::ClipperBase::SlopesEqual(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2, bool UseFullRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::SlopesEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/ClipperBase", "SlopesEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e1), ::il2cpp_utils::ExtractType(e2), ::il2cpp_utils::ExtractType(UseFullRange)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, e1, e2, UseFullRange);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.SlopesEqual
bool Cinemachine::ClipperLib::ClipperBase::SlopesEqual(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, ::Cinemachine::ClipperLib::IntPoint pt3, bool UseFullRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::SlopesEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/ClipperBase", "SlopesEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2), ::il2cpp_utils::ExtractType(pt3), ::il2cpp_utils::ExtractType(UseFullRange)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt1, pt2, pt3, UseFullRange);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.SlopesEqual
bool Cinemachine::ClipperLib::ClipperBase::SlopesEqual(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, ::Cinemachine::ClipperLib::IntPoint pt3, ::Cinemachine::ClipperLib::IntPoint pt4, bool UseFullRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::SlopesEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/ClipperBase", "SlopesEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2), ::il2cpp_utils::ExtractType(pt3), ::il2cpp_utils::ExtractType(pt4), ::il2cpp_utils::ExtractType(UseFullRange)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt1, pt2, pt3, pt4, UseFullRange);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.Clear
void Cinemachine::ClipperLib::ClipperBase::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::Clear");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ClipperLib::ClipperBase*), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.DisposeLocalMinimaList
void Cinemachine::ClipperLib::ClipperBase::DisposeLocalMinimaList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::DisposeLocalMinimaList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisposeLocalMinimaList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.RangeTest
void Cinemachine::ClipperLib::ClipperBase::RangeTest(::Cinemachine::ClipperLib::IntPoint Pt, ByRef<bool> useFullRange) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::RangeTest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RangeTest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Pt), ::il2cpp_utils::ExtractType(useFullRange)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, Pt, byref(useFullRange));
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.InitEdge
void Cinemachine::ClipperLib::ClipperBase::InitEdge(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::TEdge* eNext, ::Cinemachine::ClipperLib::TEdge* ePrev, ::Cinemachine::ClipperLib::IntPoint pt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::InitEdge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitEdge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(eNext), ::il2cpp_utils::ExtractType(ePrev), ::il2cpp_utils::ExtractType(pt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e, eNext, ePrev, pt);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.InitEdge2
void Cinemachine::ClipperLib::ClipperBase::InitEdge2(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::PolyType polyType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::InitEdge2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitEdge2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(polyType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e, polyType);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.FindNextLocMin
::Cinemachine::ClipperLib::TEdge* Cinemachine::ClipperLib::ClipperBase::FindNextLocMin(::Cinemachine::ClipperLib::TEdge* E) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::FindNextLocMin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindNextLocMin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(E)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::TEdge*, false>(this, ___internal__method, E);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.ProcessBound
::Cinemachine::ClipperLib::TEdge* Cinemachine::ClipperLib::ClipperBase::ProcessBound(::Cinemachine::ClipperLib::TEdge* E, bool LeftBoundIsForward) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::ProcessBound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessBound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(E), ::il2cpp_utils::ExtractType(LeftBoundIsForward)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::TEdge*, false>(this, ___internal__method, E, LeftBoundIsForward);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.AddPath
bool Cinemachine::ClipperLib::ClipperBase::AddPath(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* pg, ::Cinemachine::ClipperLib::PolyType polyType, bool Closed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::AddPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pg), ::il2cpp_utils::ExtractType(polyType), ::il2cpp_utils::ExtractType(Closed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pg, polyType, Closed);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.AddPaths
bool Cinemachine::ClipperLib::ClipperBase::AddPaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* ppg, ::Cinemachine::ClipperLib::PolyType polyType, bool closed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::AddPaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ppg), ::il2cpp_utils::ExtractType(polyType), ::il2cpp_utils::ExtractType(closed)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, ppg, polyType, closed);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.Pt2IsBetweenPt1AndPt3
bool Cinemachine::ClipperLib::ClipperBase::Pt2IsBetweenPt1AndPt3(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, ::Cinemachine::ClipperLib::IntPoint pt3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::Pt2IsBetweenPt1AndPt3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pt2IsBetweenPt1AndPt3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2), ::il2cpp_utils::ExtractType(pt3)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, pt1, pt2, pt3);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.RemoveEdge
::Cinemachine::ClipperLib::TEdge* Cinemachine::ClipperLib::ClipperBase::RemoveEdge(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::RemoveEdge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveEdge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::TEdge*, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.SetDx
void Cinemachine::ClipperLib::ClipperBase::SetDx(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::SetDx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.InsertLocalMinima
void Cinemachine::ClipperLib::ClipperBase::InsertLocalMinima(::Cinemachine::ClipperLib::LocalMinima* newLm) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::InsertLocalMinima");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertLocalMinima", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newLm)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newLm);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.PopLocalMinima
bool Cinemachine::ClipperLib::ClipperBase::PopLocalMinima(int64_t Y, ByRef<::Cinemachine::ClipperLib::LocalMinima*> current) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::PopLocalMinima");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopLocalMinima", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Y), ::il2cpp_utils::ExtractIndependentType<::Cinemachine::ClipperLib::LocalMinima*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, Y, byref(current));
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.ReverseHorizontal
void Cinemachine::ClipperLib::ClipperBase::ReverseHorizontal(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::ReverseHorizontal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReverseHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.Reset
void Cinemachine::ClipperLib::ClipperBase::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::Reset");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::ClipperLib::ClipperBase*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.GetBounds
::Cinemachine::ClipperLib::IntRect Cinemachine::ClipperLib::ClipperBase::GetBounds(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* paths) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::GetBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/ClipperBase", "GetBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(paths)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::IntRect, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, paths);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.InsertScanbeam
void Cinemachine::ClipperLib::ClipperBase::InsertScanbeam(int64_t Y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::InsertScanbeam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertScanbeam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Y)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, Y);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.PopScanbeam
bool Cinemachine::ClipperLib::ClipperBase::PopScanbeam(ByRef<int64_t> Y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::PopScanbeam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopScanbeam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(Y));
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.LocalMinimaPending
bool Cinemachine::ClipperLib::ClipperBase::LocalMinimaPending() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::LocalMinimaPending");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalMinimaPending", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.CreateOutRec
::Cinemachine::ClipperLib::OutRec* Cinemachine::ClipperLib::ClipperBase::CreateOutRec() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::CreateOutRec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOutRec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutRec*, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.DisposeOutRec
void Cinemachine::ClipperLib::ClipperBase::DisposeOutRec(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::DisposeOutRec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisposeOutRec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.UpdateEdgeIntoAEL
void Cinemachine::ClipperLib::ClipperBase::UpdateEdgeIntoAEL(ByRef<::Cinemachine::ClipperLib::TEdge*> e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::UpdateEdgeIntoAEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEdgeIntoAEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(e));
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.SwapPositionsInAEL
void Cinemachine::ClipperLib::ClipperBase::SwapPositionsInAEL(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::SwapPositionsInAEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwapPositionsInAEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge1), ::il2cpp_utils::ExtractType(edge2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, edge1, edge2);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperBase.DeleteFromAEL
void Cinemachine::ClipperLib::ClipperBase::DeleteFromAEL(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::DeleteFromAEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteFromAEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/Clipper
#include "Cinemachine/ClipperLib_Clipper.hpp"
// Including type: Cinemachine.ClipperLib/Clipper/NodeType
#include "Cinemachine/ClipperLib_Clipper_NodeType.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IComparer`1
#include "System/Collections/Generic/IComparer_1.hpp"
// Including type: Cinemachine.ClipperLib/Maxima
#include "Cinemachine/ClipperLib_Maxima.hpp"
// Including type: Cinemachine.ClipperLib/TEdge
#include "Cinemachine/ClipperLib_TEdge.hpp"
// Including type: Cinemachine.ClipperLib/IntersectNode
#include "Cinemachine/ClipperLib_IntersectNode.hpp"
// Including type: Cinemachine.ClipperLib/Join
#include "Cinemachine/ClipperLib_Join.hpp"
// Including type: Cinemachine.ClipperLib/PolyTree
#include "Cinemachine/ClipperLib_PolyTree.hpp"
// Including type: Cinemachine.ClipperLib/OutRec
#include "Cinemachine/ClipperLib_OutRec.hpp"
// Including type: Cinemachine.ClipperLib/OutPt
#include "Cinemachine/ClipperLib_OutPt.hpp"
// Including type: Cinemachine.ClipperLib/Direction
#include "Cinemachine/ClipperLib_Direction.hpp"
// Including type: Cinemachine.ClipperLib/PolyNode
#include "Cinemachine/ClipperLib_PolyNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ioReverseSolution
int Cinemachine::ClipperLib::Clipper::_get_ioReverseSolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::_get_ioReverseSolution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "ClipperLib/Clipper", "ioReverseSolution"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ioReverseSolution
void Cinemachine::ClipperLib::Clipper::_set_ioReverseSolution(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::_set_ioReverseSolution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/Clipper", "ioReverseSolution", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ioStrictlySimple
int Cinemachine::ClipperLib::Clipper::_get_ioStrictlySimple() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::_get_ioStrictlySimple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "ClipperLib/Clipper", "ioStrictlySimple"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ioStrictlySimple
void Cinemachine::ClipperLib::Clipper::_set_ioStrictlySimple(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::_set_ioStrictlySimple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/Clipper", "ioStrictlySimple", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ioPreserveCollinear
int Cinemachine::ClipperLib::Clipper::_get_ioPreserveCollinear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::_get_ioPreserveCollinear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Cinemachine", "ClipperLib/Clipper", "ioPreserveCollinear"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ioPreserveCollinear
void Cinemachine::ClipperLib::Clipper::_set_ioPreserveCollinear(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::_set_ioPreserveCollinear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/Clipper", "ioPreserveCollinear", value));
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ClipperLib/ClipType m_ClipType
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::ClipType& Cinemachine::ClipperLib::Clipper::dyn_m_ClipType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_ClipType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ClipType"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::ClipType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ClipperLib/Maxima m_Maxima
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::Maxima*& Cinemachine::ClipperLib::Clipper::dyn_m_Maxima() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_Maxima");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Maxima"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::Maxima**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ClipperLib/TEdge m_SortedEdges
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& Cinemachine::ClipperLib::Clipper::dyn_m_SortedEdges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_SortedEdges");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SortedEdges"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::TEdge**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntersectNode> m_IntersectList
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntersectNode*>*& Cinemachine::ClipperLib::Clipper::dyn_m_IntersectList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_IntersectList");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IntersectList"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntersectNode*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IComparer`1<Cinemachine.ClipperLib/IntersectNode> m_IntersectNodeComparer
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IComparer_1<::Cinemachine::ClipperLib::IntersectNode*>*& Cinemachine::ClipperLib::Clipper::dyn_m_IntersectNodeComparer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_IntersectNodeComparer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IntersectNodeComparer"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IComparer_1<::Cinemachine::ClipperLib::IntersectNode*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_ExecuteLocked
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::Clipper::dyn_m_ExecuteLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_ExecuteLocked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ExecuteLocked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ClipperLib/PolyFillType m_ClipFillType
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyFillType& Cinemachine::ClipperLib::Clipper::dyn_m_ClipFillType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_ClipFillType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_ClipFillType"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::PolyFillType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ClipperLib/PolyFillType m_SubjFillType
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyFillType& Cinemachine::ClipperLib::Clipper::dyn_m_SubjFillType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_SubjFillType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SubjFillType"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::PolyFillType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/Join> m_Joins
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>*& Cinemachine::ClipperLib::Clipper::dyn_m_Joins() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_Joins");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Joins"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/Join> m_GhostJoins
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>*& Cinemachine::ClipperLib::Clipper::dyn_m_GhostJoins() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_GhostJoins");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_GhostJoins"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_UsingPolyTree
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::Clipper::dyn_m_UsingPolyTree() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_m_UsingPolyTree");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_UsingPolyTree"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ReverseSolution>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::Clipper::dyn_$ReverseSolution$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_$ReverseSolution$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ReverseSolution>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <StrictlySimple>k__BackingField
[[deprecated("Use field access instead!")]] bool& Cinemachine::ClipperLib::Clipper::dyn_$StrictlySimple$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::dyn_$StrictlySimple$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<StrictlySimple>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.InsertMaxima
void Cinemachine::ClipperLib::Clipper::InsertMaxima(int64_t X) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::InsertMaxima");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertMaxima", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(X)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, X);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.get_ReverseSolution
bool Cinemachine::ClipperLib::Clipper::get_ReverseSolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::get_ReverseSolution");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReverseSolution", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.set_ReverseSolution
void Cinemachine::ClipperLib::Clipper::set_ReverseSolution(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::set_ReverseSolution");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ReverseSolution", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.get_StrictlySimple
bool Cinemachine::ClipperLib::Clipper::get_StrictlySimple() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::get_StrictlySimple");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StrictlySimple", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.set_StrictlySimple
void Cinemachine::ClipperLib::Clipper::set_StrictlySimple(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::set_StrictlySimple");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_StrictlySimple", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Execute
bool Cinemachine::ClipperLib::Clipper::Execute(::Cinemachine::ClipperLib::ClipType clipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* solution, ::Cinemachine::ClipperLib::PolyFillType FillType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipType), ::il2cpp_utils::ExtractType(solution), ::il2cpp_utils::ExtractType(FillType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, clipType, solution, FillType);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Execute
bool Cinemachine::ClipperLib::Clipper::Execute(::Cinemachine::ClipperLib::ClipType clipType, ::Cinemachine::ClipperLib::PolyTree* polytree, ::Cinemachine::ClipperLib::PolyFillType FillType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipType), ::il2cpp_utils::ExtractType(polytree), ::il2cpp_utils::ExtractType(FillType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, clipType, polytree, FillType);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Execute
bool Cinemachine::ClipperLib::Clipper::Execute(::Cinemachine::ClipperLib::ClipType clipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* solution, ::Cinemachine::ClipperLib::PolyFillType subjFillType, ::Cinemachine::ClipperLib::PolyFillType clipFillType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipType), ::il2cpp_utils::ExtractType(solution), ::il2cpp_utils::ExtractType(subjFillType), ::il2cpp_utils::ExtractType(clipFillType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, clipType, solution, subjFillType, clipFillType);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Execute
bool Cinemachine::ClipperLib::Clipper::Execute(::Cinemachine::ClipperLib::ClipType clipType, ::Cinemachine::ClipperLib::PolyTree* polytree, ::Cinemachine::ClipperLib::PolyFillType subjFillType, ::Cinemachine::ClipperLib::PolyFillType clipFillType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipType), ::il2cpp_utils::ExtractType(polytree), ::il2cpp_utils::ExtractType(subjFillType), ::il2cpp_utils::ExtractType(clipFillType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, clipType, polytree, subjFillType, clipFillType);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.FixHoleLinkage
void Cinemachine::ClipperLib::Clipper::FixHoleLinkage(::Cinemachine::ClipperLib::OutRec* outRec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::FixHoleLinkage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixHoleLinkage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outRec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outRec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ExecuteInternal
bool Cinemachine::ClipperLib::Clipper::ExecuteInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ExecuteInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExecuteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.DisposeAllPolyPts
void Cinemachine::ClipperLib::Clipper::DisposeAllPolyPts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::DisposeAllPolyPts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisposeAllPolyPts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.AddJoin
void Cinemachine::ClipperLib::Clipper::AddJoin(::Cinemachine::ClipperLib::OutPt* Op1, ::Cinemachine::ClipperLib::OutPt* Op2, ::Cinemachine::ClipperLib::IntPoint OffPt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::AddJoin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Op1), ::il2cpp_utils::ExtractType(Op2), ::il2cpp_utils::ExtractType(OffPt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, Op1, Op2, OffPt);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.AddGhostJoin
void Cinemachine::ClipperLib::Clipper::AddGhostJoin(::Cinemachine::ClipperLib::OutPt* Op, ::Cinemachine::ClipperLib::IntPoint OffPt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::AddGhostJoin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddGhostJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Op), ::il2cpp_utils::ExtractType(OffPt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, Op, OffPt);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.InsertLocalMinimaIntoAEL
void Cinemachine::ClipperLib::Clipper::InsertLocalMinimaIntoAEL(int64_t botY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::InsertLocalMinimaIntoAEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertLocalMinimaIntoAEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(botY)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, botY);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.InsertEdgeIntoAEL
void Cinemachine::ClipperLib::Clipper::InsertEdgeIntoAEL(::Cinemachine::ClipperLib::TEdge* edge, ::Cinemachine::ClipperLib::TEdge* startEdge) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::InsertEdgeIntoAEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertEdgeIntoAEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(startEdge)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, edge, startEdge);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.E2InsertsBeforeE1
bool Cinemachine::ClipperLib::Clipper::E2InsertsBeforeE1(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::E2InsertsBeforeE1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "E2InsertsBeforeE1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e1), ::il2cpp_utils::ExtractType(e2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, e1, e2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IsEvenOddFillType
bool Cinemachine::ClipperLib::Clipper::IsEvenOddFillType(::Cinemachine::ClipperLib::TEdge* edge) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IsEvenOddFillType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEvenOddFillType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, edge);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IsEvenOddAltFillType
bool Cinemachine::ClipperLib::Clipper::IsEvenOddAltFillType(::Cinemachine::ClipperLib::TEdge* edge) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IsEvenOddAltFillType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEvenOddAltFillType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, edge);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IsContributing
bool Cinemachine::ClipperLib::Clipper::IsContributing(::Cinemachine::ClipperLib::TEdge* edge) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IsContributing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsContributing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, edge);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SetWindingCount
void Cinemachine::ClipperLib::Clipper::SetWindingCount(::Cinemachine::ClipperLib::TEdge* edge) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SetWindingCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWindingCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, edge);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.AddEdgeToSEL
void Cinemachine::ClipperLib::Clipper::AddEdgeToSEL(::Cinemachine::ClipperLib::TEdge* edge) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::AddEdgeToSEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEdgeToSEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, edge);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.PopEdgeFromSEL
bool Cinemachine::ClipperLib::Clipper::PopEdgeFromSEL(ByRef<::Cinemachine::ClipperLib::TEdge*> e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::PopEdgeFromSEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopEdgeFromSEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Cinemachine::ClipperLib::TEdge*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(e));
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.CopyAELToSEL
void Cinemachine::ClipperLib::Clipper::CopyAELToSEL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::CopyAELToSEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyAELToSEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SwapPositionsInSEL
void Cinemachine::ClipperLib::Clipper::SwapPositionsInSEL(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SwapPositionsInSEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwapPositionsInSEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge1), ::il2cpp_utils::ExtractType(edge2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, edge1, edge2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.AddLocalMaxPoly
void Cinemachine::ClipperLib::Clipper::AddLocalMaxPoly(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2, ::Cinemachine::ClipperLib::IntPoint pt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::AddLocalMaxPoly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLocalMaxPoly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e1), ::il2cpp_utils::ExtractType(e2), ::il2cpp_utils::ExtractType(pt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e1, e2, pt);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.AddLocalMinPoly
::Cinemachine::ClipperLib::OutPt* Cinemachine::ClipperLib::Clipper::AddLocalMinPoly(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2, ::Cinemachine::ClipperLib::IntPoint pt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::AddLocalMinPoly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLocalMinPoly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e1), ::il2cpp_utils::ExtractType(e2), ::il2cpp_utils::ExtractType(pt)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutPt*, false>(this, ___internal__method, e1, e2, pt);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.AddOutPt
::Cinemachine::ClipperLib::OutPt* Cinemachine::ClipperLib::Clipper::AddOutPt(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::IntPoint pt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::AddOutPt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddOutPt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(pt)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutPt*, false>(this, ___internal__method, e, pt);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetLastOutPt
::Cinemachine::ClipperLib::OutPt* Cinemachine::ClipperLib::Clipper::GetLastOutPt(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetLastOutPt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastOutPt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutPt*, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SwapPoints
void Cinemachine::ClipperLib::Clipper::SwapPoints(ByRef<::Cinemachine::ClipperLib::IntPoint> pt1, ByRef<::Cinemachine::ClipperLib::IntPoint> pt2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SwapPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwapPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(pt1), byref(pt2));
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.HorzSegmentsOverlap
bool Cinemachine::ClipperLib::Clipper::HorzSegmentsOverlap(int64_t seg1a, int64_t seg1b, int64_t seg2a, int64_t seg2b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::HorzSegmentsOverlap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HorzSegmentsOverlap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seg1a), ::il2cpp_utils::ExtractType(seg1b), ::il2cpp_utils::ExtractType(seg2a), ::il2cpp_utils::ExtractType(seg2b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, seg1a, seg1b, seg2a, seg2b);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SetHoleState
void Cinemachine::ClipperLib::Clipper::SetHoleState(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::OutRec* outRec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SetHoleState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHoleState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(outRec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e, outRec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetDx
double Cinemachine::ClipperLib::Clipper::GetDx(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetDx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, pt1, pt2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.FirstIsBottomPt
bool Cinemachine::ClipperLib::Clipper::FirstIsBottomPt(::Cinemachine::ClipperLib::OutPt* btmPt1, ::Cinemachine::ClipperLib::OutPt* btmPt2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::FirstIsBottomPt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FirstIsBottomPt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btmPt1), ::il2cpp_utils::ExtractType(btmPt2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, btmPt1, btmPt2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetBottomPt
::Cinemachine::ClipperLib::OutPt* Cinemachine::ClipperLib::Clipper::GetBottomPt(::Cinemachine::ClipperLib::OutPt* pp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetBottomPt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBottomPt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pp)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutPt*, false>(this, ___internal__method, pp);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetLowermostRec
::Cinemachine::ClipperLib::OutRec* Cinemachine::ClipperLib::Clipper::GetLowermostRec(::Cinemachine::ClipperLib::OutRec* outRec1, ::Cinemachine::ClipperLib::OutRec* outRec2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetLowermostRec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLowermostRec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outRec1), ::il2cpp_utils::ExtractType(outRec2)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutRec*, false>(this, ___internal__method, outRec1, outRec2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.OutRec1RightOfOutRec2
bool Cinemachine::ClipperLib::Clipper::OutRec1RightOfOutRec2(::Cinemachine::ClipperLib::OutRec* outRec1, ::Cinemachine::ClipperLib::OutRec* outRec2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::OutRec1RightOfOutRec2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OutRec1RightOfOutRec2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outRec1), ::il2cpp_utils::ExtractType(outRec2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, outRec1, outRec2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetOutRec
::Cinemachine::ClipperLib::OutRec* Cinemachine::ClipperLib::Clipper::GetOutRec(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetOutRec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOutRec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutRec*, false>(this, ___internal__method, idx);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.AppendPolygon
void Cinemachine::ClipperLib::Clipper::AppendPolygon(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::AppendPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppendPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e1), ::il2cpp_utils::ExtractType(e2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e1, e2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ReversePolyPtLinks
void Cinemachine::ClipperLib::Clipper::ReversePolyPtLinks(::Cinemachine::ClipperLib::OutPt* pp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ReversePolyPtLinks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReversePolyPtLinks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pp);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SwapSides
void Cinemachine::ClipperLib::Clipper::SwapSides(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SwapSides");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "SwapSides", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge1), ::il2cpp_utils::ExtractType(edge2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, edge1, edge2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SwapPolyIndexes
void Cinemachine::ClipperLib::Clipper::SwapPolyIndexes(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SwapPolyIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "SwapPolyIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge1), ::il2cpp_utils::ExtractType(edge2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, edge1, edge2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IntersectEdges
void Cinemachine::ClipperLib::Clipper::IntersectEdges(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2, ::Cinemachine::ClipperLib::IntPoint pt) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IntersectEdges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IntersectEdges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e1), ::il2cpp_utils::ExtractType(e2), ::il2cpp_utils::ExtractType(pt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e1, e2, pt);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.DeleteFromSEL
void Cinemachine::ClipperLib::Clipper::DeleteFromSEL(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::DeleteFromSEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteFromSEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ProcessHorizontals
void Cinemachine::ClipperLib::Clipper::ProcessHorizontals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ProcessHorizontals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessHorizontals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetHorzDirection
void Cinemachine::ClipperLib::Clipper::GetHorzDirection(::Cinemachine::ClipperLib::TEdge* HorzEdge, ByRef<::Cinemachine::ClipperLib::Direction> Dir, ByRef<int64_t> Left, ByRef<int64_t> Right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetHorzDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHorzDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(HorzEdge), ::il2cpp_utils::ExtractIndependentType<::Cinemachine::ClipperLib::Direction&>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, HorzEdge, byref(Dir), byref(Left), byref(Right));
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ProcessHorizontal
void Cinemachine::ClipperLib::Clipper::ProcessHorizontal(::Cinemachine::ClipperLib::TEdge* horzEdge) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ProcessHorizontal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(horzEdge)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, horzEdge);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetNextInAEL
::Cinemachine::ClipperLib::TEdge* Cinemachine::ClipperLib::Clipper::GetNextInAEL(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::Direction Direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetNextInAEL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextInAEL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(Direction)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::TEdge*, false>(this, ___internal__method, e, Direction);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IsMinima
bool Cinemachine::ClipperLib::Clipper::IsMinima(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IsMinima");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMinima", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IsMaxima
bool Cinemachine::ClipperLib::Clipper::IsMaxima(::Cinemachine::ClipperLib::TEdge* e, double Y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IsMaxima");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMaxima", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(Y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, e, Y);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IsIntermediate
bool Cinemachine::ClipperLib::Clipper::IsIntermediate(::Cinemachine::ClipperLib::TEdge* e, double Y) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IsIntermediate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsIntermediate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(Y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, e, Y);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetMaximaPair
::Cinemachine::ClipperLib::TEdge* Cinemachine::ClipperLib::Clipper::GetMaximaPair(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetMaximaPair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaximaPair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::TEdge*, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetMaximaPairEx
::Cinemachine::ClipperLib::TEdge* Cinemachine::ClipperLib::Clipper::GetMaximaPairEx(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetMaximaPairEx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaximaPairEx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::TEdge*, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ProcessIntersections
bool Cinemachine::ClipperLib::Clipper::ProcessIntersections(int64_t topY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ProcessIntersections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessIntersections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topY)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, topY);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.BuildIntersectList
void Cinemachine::ClipperLib::Clipper::BuildIntersectList(int64_t topY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::BuildIntersectList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildIntersectList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topY)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, topY);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.EdgesAdjacent
bool Cinemachine::ClipperLib::Clipper::EdgesAdjacent(::Cinemachine::ClipperLib::IntersectNode* inode) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::EdgesAdjacent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EdgesAdjacent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inode)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, inode);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IntersectNodeSort
int Cinemachine::ClipperLib::Clipper::IntersectNodeSort(::Cinemachine::ClipperLib::IntersectNode* node1, ::Cinemachine::ClipperLib::IntersectNode* node2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IntersectNodeSort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "IntersectNodeSort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node1), ::il2cpp_utils::ExtractType(node2)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node1, node2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.FixupIntersectionOrder
bool Cinemachine::ClipperLib::Clipper::FixupIntersectionOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::FixupIntersectionOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixupIntersectionOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ProcessIntersectList
void Cinemachine::ClipperLib::Clipper::ProcessIntersectList() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ProcessIntersectList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessIntersectList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Round
int64_t Cinemachine::ClipperLib::Clipper::Round(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Round");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "Round", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.TopX
int64_t Cinemachine::ClipperLib::Clipper::TopX(::Cinemachine::ClipperLib::TEdge* edge, int64_t currentY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::TopX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "TopX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge), ::il2cpp_utils::ExtractType(currentY)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, edge, currentY);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.IntersectPoint
void Cinemachine::ClipperLib::Clipper::IntersectPoint(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2, ByRef<::Cinemachine::ClipperLib::IntPoint> ip) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::IntersectPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IntersectPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(edge1), ::il2cpp_utils::ExtractType(edge2), ::il2cpp_utils::ExtractIndependentType<::Cinemachine::ClipperLib::IntPoint&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, edge1, edge2, byref(ip));
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ProcessEdgesAtTopOfScanbeam
void Cinemachine::ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam(int64_t topY) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEdgesAtTopOfScanbeam", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topY)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, topY);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.DoMaxima
void Cinemachine::ClipperLib::Clipper::DoMaxima(::Cinemachine::ClipperLib::TEdge* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::DoMaxima");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoMaxima", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ReversePaths
void Cinemachine::ClipperLib::Clipper::ReversePaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* polys) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ReversePaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "ReversePaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polys)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, polys);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Orientation
bool Cinemachine::ClipperLib::Clipper::Orientation(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Orientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "Orientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poly)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, poly);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.PointCount
int Cinemachine::ClipperLib::Clipper::PointCount(::Cinemachine::ClipperLib::OutPt* pts) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::PointCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PointCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pts)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, pts);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.BuildResult
void Cinemachine::ClipperLib::Clipper::BuildResult(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* polyg) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::BuildResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polyg)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, polyg);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.BuildResult2
void Cinemachine::ClipperLib::Clipper::BuildResult2(::Cinemachine::ClipperLib::PolyTree* polytree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::BuildResult2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildResult2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polytree)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, polytree);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.FixupOutPolyline
void Cinemachine::ClipperLib::Clipper::FixupOutPolyline(::Cinemachine::ClipperLib::OutRec* outrec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::FixupOutPolyline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixupOutPolyline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outrec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outrec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.FixupOutPolygon
void Cinemachine::ClipperLib::Clipper::FixupOutPolygon(::Cinemachine::ClipperLib::OutRec* outRec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::FixupOutPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixupOutPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outRec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outRec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.DupOutPt
::Cinemachine::ClipperLib::OutPt* Cinemachine::ClipperLib::Clipper::DupOutPt(::Cinemachine::ClipperLib::OutPt* outPt, bool InsertAfter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::DupOutPt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DupOutPt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outPt), ::il2cpp_utils::ExtractType(InsertAfter)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutPt*, false>(this, ___internal__method, outPt, InsertAfter);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.GetOverlap
bool Cinemachine::ClipperLib::Clipper::GetOverlap(int64_t a1, int64_t a2, int64_t b1, int64_t b2, ByRef<int64_t> Left, ByRef<int64_t> Right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::GetOverlap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a1), ::il2cpp_utils::ExtractType(a2), ::il2cpp_utils::ExtractType(b1), ::il2cpp_utils::ExtractType(b2), ::il2cpp_utils::ExtractIndependentType<int64_t&>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, a1, a2, b1, b2, byref(Left), byref(Right));
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.JoinHorz
bool Cinemachine::ClipperLib::Clipper::JoinHorz(::Cinemachine::ClipperLib::OutPt* op1, ::Cinemachine::ClipperLib::OutPt* op1b, ::Cinemachine::ClipperLib::OutPt* op2, ::Cinemachine::ClipperLib::OutPt* op2b, ::Cinemachine::ClipperLib::IntPoint Pt, bool DiscardLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::JoinHorz");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinHorz", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(op1), ::il2cpp_utils::ExtractType(op1b), ::il2cpp_utils::ExtractType(op2), ::il2cpp_utils::ExtractType(op2b), ::il2cpp_utils::ExtractType(Pt), ::il2cpp_utils::ExtractType(DiscardLeft)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, op1, op1b, op2, op2b, Pt, DiscardLeft);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.JoinPoints
bool Cinemachine::ClipperLib::Clipper::JoinPoints(::Cinemachine::ClipperLib::Join* j, ::Cinemachine::ClipperLib::OutRec* outRec1, ::Cinemachine::ClipperLib::OutRec* outRec2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::JoinPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(outRec1), ::il2cpp_utils::ExtractType(outRec2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, j, outRec1, outRec2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.PointInPolygon
int Cinemachine::ClipperLib::Clipper::PointInPolygon(::Cinemachine::ClipperLib::IntPoint pt, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::PointInPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "PointInPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt), ::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt, path);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.PointInPolygon
int Cinemachine::ClipperLib::Clipper::PointInPolygon(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::OutPt* op) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::PointInPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "PointInPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt), ::il2cpp_utils::ExtractType(op)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt, op);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Poly2ContainsPoly1
bool Cinemachine::ClipperLib::Clipper::Poly2ContainsPoly1(::Cinemachine::ClipperLib::OutPt* outPt1, ::Cinemachine::ClipperLib::OutPt* outPt2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Poly2ContainsPoly1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "Poly2ContainsPoly1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outPt1), ::il2cpp_utils::ExtractType(outPt2)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, outPt1, outPt2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.FixupFirstLefts1
void Cinemachine::ClipperLib::Clipper::FixupFirstLefts1(::Cinemachine::ClipperLib::OutRec* OldOutRec, ::Cinemachine::ClipperLib::OutRec* NewOutRec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::FixupFirstLefts1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixupFirstLefts1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(OldOutRec), ::il2cpp_utils::ExtractType(NewOutRec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, OldOutRec, NewOutRec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.FixupFirstLefts2
void Cinemachine::ClipperLib::Clipper::FixupFirstLefts2(::Cinemachine::ClipperLib::OutRec* innerOutRec, ::Cinemachine::ClipperLib::OutRec* outerOutRec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::FixupFirstLefts2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixupFirstLefts2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerOutRec), ::il2cpp_utils::ExtractType(outerOutRec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, innerOutRec, outerOutRec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.FixupFirstLefts3
void Cinemachine::ClipperLib::Clipper::FixupFirstLefts3(::Cinemachine::ClipperLib::OutRec* OldOutRec, ::Cinemachine::ClipperLib::OutRec* NewOutRec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::FixupFirstLefts3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixupFirstLefts3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(OldOutRec), ::il2cpp_utils::ExtractType(NewOutRec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, OldOutRec, NewOutRec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ParseFirstLeft
::Cinemachine::ClipperLib::OutRec* Cinemachine::ClipperLib::Clipper::ParseFirstLeft(::Cinemachine::ClipperLib::OutRec* FirstLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ParseFirstLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "ParseFirstLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(FirstLeft)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutRec*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, FirstLeft);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.JoinCommonEdges
void Cinemachine::ClipperLib::Clipper::JoinCommonEdges() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::JoinCommonEdges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinCommonEdges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.UpdateOutPtIdxs
void Cinemachine::ClipperLib::Clipper::UpdateOutPtIdxs(::Cinemachine::ClipperLib::OutRec* outrec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::UpdateOutPtIdxs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateOutPtIdxs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outrec)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outrec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.DoSimplePolygons
void Cinemachine::ClipperLib::Clipper::DoSimplePolygons() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::DoSimplePolygons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoSimplePolygons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Area
double Cinemachine::ClipperLib::Clipper::Area(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Area");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "Area", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poly)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, poly);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Area
double Cinemachine::ClipperLib::Clipper::Area(::Cinemachine::ClipperLib::OutRec* outRec) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Area");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Area", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outRec)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, outRec);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Area
double Cinemachine::ClipperLib::Clipper::Area(::Cinemachine::ClipperLib::OutPt* op) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Area");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Area", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(op)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method, op);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SimplifyPolygon
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::SimplifyPolygon(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly, ::Cinemachine::ClipperLib::PolyFillType fillType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SimplifyPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "SimplifyPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poly), ::il2cpp_utils::ExtractType(fillType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, poly, fillType);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SimplifyPolygons
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::SimplifyPolygons(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* polys, ::Cinemachine::ClipperLib::PolyFillType fillType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SimplifyPolygons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "SimplifyPolygons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polys), ::il2cpp_utils::ExtractType(fillType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, polys, fillType);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.DistanceSqrd
double Cinemachine::ClipperLib::Clipper::DistanceSqrd(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::DistanceSqrd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "DistanceSqrd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt1, pt2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.DistanceFromLineSqrd
double Cinemachine::ClipperLib::Clipper::DistanceFromLineSqrd(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::IntPoint ln1, ::Cinemachine::ClipperLib::IntPoint ln2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::DistanceFromLineSqrd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "DistanceFromLineSqrd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt), ::il2cpp_utils::ExtractType(ln1), ::il2cpp_utils::ExtractType(ln2)})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt, ln1, ln2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.SlopesNearCollinear
bool Cinemachine::ClipperLib::Clipper::SlopesNearCollinear(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, ::Cinemachine::ClipperLib::IntPoint pt3, double distSqrd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::SlopesNearCollinear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "SlopesNearCollinear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2), ::il2cpp_utils::ExtractType(pt3), ::il2cpp_utils::ExtractType(distSqrd)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt1, pt2, pt3, distSqrd);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.PointsAreClose
bool Cinemachine::ClipperLib::Clipper::PointsAreClose(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, double distSqrd) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::PointsAreClose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "PointsAreClose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2), ::il2cpp_utils::ExtractType(distSqrd)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt1, pt2, distSqrd);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ExcludeOp
::Cinemachine::ClipperLib::OutPt* Cinemachine::ClipperLib::Clipper::ExcludeOp(::Cinemachine::ClipperLib::OutPt* op) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ExcludeOp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "ExcludeOp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(op)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::OutPt*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, op);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.CleanPolygon
::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* Cinemachine::ClipperLib::Clipper::CleanPolygon(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, double distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::CleanPolygon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "CleanPolygon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(distance)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, path, distance);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.CleanPolygons
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::CleanPolygons(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* polys, double distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::CleanPolygons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "CleanPolygons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polys), ::il2cpp_utils::ExtractType(distance)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, polys, distance);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.Minkowski
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::Minkowski(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* pattern, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, bool IsSum, bool IsClosed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::Minkowski");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "Minkowski", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pattern), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(IsSum), ::il2cpp_utils::ExtractType(IsClosed)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pattern, path, IsSum, IsClosed);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.MinkowskiSum
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::MinkowskiSum(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* pattern, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, bool pathIsClosed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::MinkowskiSum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "MinkowskiSum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pattern), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(pathIsClosed)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pattern, path, pathIsClosed);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.TranslatePath
::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* Cinemachine::ClipperLib::Clipper::TranslatePath(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, ::Cinemachine::ClipperLib::IntPoint delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::TranslatePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "TranslatePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(delta)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, path, delta);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.MinkowskiSum
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::MinkowskiSum(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* pattern, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* paths, bool pathIsClosed) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::MinkowskiSum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "MinkowskiSum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pattern), ::il2cpp_utils::ExtractType(paths), ::il2cpp_utils::ExtractType(pathIsClosed)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pattern, paths, pathIsClosed);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.MinkowskiDiff
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::MinkowskiDiff(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly1, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::MinkowskiDiff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "MinkowskiDiff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poly1), ::il2cpp_utils::ExtractType(poly2)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, poly1, poly2);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.PolyTreeToPaths
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::PolyTreeToPaths(::Cinemachine::ClipperLib::PolyTree* polytree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::PolyTreeToPaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "PolyTreeToPaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polytree)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, polytree);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.AddPolyNodeToPaths
void Cinemachine::ClipperLib::Clipper::AddPolyNodeToPaths(::Cinemachine::ClipperLib::PolyNode* polynode, ::Cinemachine::ClipperLib::Clipper::NodeType nt, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* paths) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::AddPolyNodeToPaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "AddPolyNodeToPaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polynode), ::il2cpp_utils::ExtractType(nt), ::il2cpp_utils::ExtractType(paths)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, polynode, nt, paths);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.OpenPathsFromPolyTree
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::OpenPathsFromPolyTree(::Cinemachine::ClipperLib::PolyTree* polytree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::OpenPathsFromPolyTree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "OpenPathsFromPolyTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polytree)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, polytree);
}
// Autogenerated method: Cinemachine.ClipperLib/Clipper.ClosedPathsFromPolyTree
::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Cinemachine::ClipperLib::Clipper::ClosedPathsFromPolyTree(::Cinemachine::ClipperLib::PolyTree* polytree) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::ClosedPathsFromPolyTree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/Clipper", "ClosedPathsFromPolyTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(polytree)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, polytree);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/Clipper/NodeType
#include "Cinemachine/ClipperLib_Clipper_NodeType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/Clipper/NodeType ntAny
::Cinemachine::ClipperLib::Clipper::NodeType Cinemachine::ClipperLib::Clipper::NodeType::_get_ntAny() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::NodeType::_get_ntAny");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::Clipper::NodeType>("Cinemachine", "ClipperLib/Clipper/NodeType", "ntAny"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/Clipper/NodeType ntAny
void Cinemachine::ClipperLib::Clipper::NodeType::_set_ntAny(::Cinemachine::ClipperLib::Clipper::NodeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::NodeType::_set_ntAny");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/Clipper/NodeType", "ntAny", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/Clipper/NodeType ntOpen
::Cinemachine::ClipperLib::Clipper::NodeType Cinemachine::ClipperLib::Clipper::NodeType::_get_ntOpen() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::NodeType::_get_ntOpen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::Clipper::NodeType>("Cinemachine", "ClipperLib/Clipper/NodeType", "ntOpen"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/Clipper/NodeType ntOpen
void Cinemachine::ClipperLib::Clipper::NodeType::_set_ntOpen(::Cinemachine::ClipperLib::Clipper::NodeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::NodeType::_set_ntOpen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/Clipper/NodeType", "ntOpen", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.ClipperLib/Clipper/NodeType ntClosed
::Cinemachine::ClipperLib::Clipper::NodeType Cinemachine::ClipperLib::Clipper::NodeType::_get_ntClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::NodeType::_get_ntClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::ClipperLib::Clipper::NodeType>("Cinemachine", "ClipperLib/Clipper/NodeType", "ntClosed"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.ClipperLib/Clipper/NodeType ntClosed
void Cinemachine::ClipperLib::Clipper::NodeType::_set_ntClosed(::Cinemachine::ClipperLib::Clipper::NodeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::NodeType::_set_ntClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/Clipper/NodeType", "ntClosed", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::ClipperLib::Clipper::NodeType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::NodeType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/ClipperOffset
#include "Cinemachine/ClipperLib_ClipperOffset.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Cinemachine.ClipperLib/PolyNode
#include "Cinemachine/ClipperLib_PolyNode.hpp"
// Including type: Cinemachine.ClipperLib/JoinType
#include "Cinemachine/ClipperLib_JoinType.hpp"
// Including type: Cinemachine.ClipperLib/EndType
#include "Cinemachine/ClipperLib_EndType.hpp"
// Including type: Cinemachine.ClipperLib/PolyTree
#include "Cinemachine/ClipperLib_PolyTree.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Double two_pi
double Cinemachine::ClipperLib::ClipperOffset::_get_two_pi() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::_get_two_pi");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("Cinemachine", "ClipperLib/ClipperOffset", "two_pi"));
}
// Autogenerated static field setter
// Set static field: static private System.Double two_pi
void Cinemachine::ClipperLib::ClipperOffset::_set_two_pi(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::_set_two_pi");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipperOffset", "two_pi", value));
}
// Autogenerated static field getter
// Get static field: static private System.Double def_arc_tolerance
double Cinemachine::ClipperLib::ClipperOffset::_get_def_arc_tolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::_get_def_arc_tolerance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("Cinemachine", "ClipperLib/ClipperOffset", "def_arc_tolerance"));
}
// Autogenerated static field setter
// Set static field: static private System.Double def_arc_tolerance
void Cinemachine::ClipperLib::ClipperOffset::_set_def_arc_tolerance(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::_set_def_arc_tolerance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine", "ClipperLib/ClipperOffset", "def_arc_tolerance", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> m_destPolys
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*& Cinemachine::ClipperLib::ClipperOffset::dyn_m_destPolys() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_destPolys");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_destPolys"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> m_srcPoly
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*& Cinemachine::ClipperLib::ClipperOffset::dyn_m_srcPoly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_srcPoly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_srcPoly"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> m_destPoly
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*& Cinemachine::ClipperLib::ClipperOffset::dyn_m_destPoly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_destPoly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_destPoly"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/DoublePoint> m_normals
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::DoublePoint>*& Cinemachine::ClipperLib::ClipperOffset::dyn_m_normals() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_normals");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_normals"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::DoublePoint>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_delta
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::ClipperOffset::dyn_m_delta() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_delta");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_delta"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_sinA
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::ClipperOffset::dyn_m_sinA() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_sinA");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_sinA"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_sin
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::ClipperOffset::dyn_m_sin() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_sin");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_sin"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_cos
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::ClipperOffset::dyn_m_cos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_cos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_cos"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_miterLim
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::ClipperOffset::dyn_m_miterLim() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_miterLim");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_miterLim"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double m_StepsPerRad
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::ClipperOffset::dyn_m_StepsPerRad() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_StepsPerRad");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_StepsPerRad"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ClipperLib/IntPoint m_lowest
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& Cinemachine::ClipperLib::ClipperOffset::dyn_m_lowest() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_lowest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_lowest"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::IntPoint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.ClipperLib/PolyNode m_polyNodes
[[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyNode*& Cinemachine::ClipperLib::ClipperOffset::dyn_m_polyNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_m_polyNodes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_polyNodes"))->offset;
  return *reinterpret_cast<::Cinemachine::ClipperLib::PolyNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double <ArcTolerance>k__BackingField
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::ClipperOffset::dyn_$ArcTolerance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_$ArcTolerance$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ArcTolerance>k__BackingField"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double <MiterLimit>k__BackingField
[[deprecated("Use field access instead!")]] double& Cinemachine::ClipperLib::ClipperOffset::dyn_$MiterLimit$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::dyn_$MiterLimit$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MiterLimit>k__BackingField"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.get_ArcTolerance
double Cinemachine::ClipperLib::ClipperOffset::get_ArcTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::get_ArcTolerance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ArcTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.set_ArcTolerance
void Cinemachine::ClipperLib::ClipperOffset::set_ArcTolerance(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::set_ArcTolerance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ArcTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.get_MiterLimit
double Cinemachine::ClipperLib::ClipperOffset::get_MiterLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::get_MiterLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MiterLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.set_MiterLimit
void Cinemachine::ClipperLib::ClipperOffset::set_MiterLimit(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::set_MiterLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MiterLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.Clear
void Cinemachine::ClipperLib::ClipperOffset::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.Round
int64_t Cinemachine::ClipperLib::ClipperOffset::Round(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::Round");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/ClipperOffset", "Round", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.AddPath
void Cinemachine::ClipperLib::ClipperOffset::AddPath(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, ::Cinemachine::ClipperLib::JoinType joinType, ::Cinemachine::ClipperLib::EndType endType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::AddPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(joinType), ::il2cpp_utils::ExtractType(endType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, path, joinType, endType);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.AddPaths
void Cinemachine::ClipperLib::ClipperOffset::AddPaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* paths, ::Cinemachine::ClipperLib::JoinType joinType, ::Cinemachine::ClipperLib::EndType endType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::AddPaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(paths), ::il2cpp_utils::ExtractType(joinType), ::il2cpp_utils::ExtractType(endType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, paths, joinType, endType);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.FixOrientations
void Cinemachine::ClipperLib::ClipperOffset::FixOrientations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::FixOrientations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixOrientations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.GetUnitNormal
::Cinemachine::ClipperLib::DoublePoint Cinemachine::ClipperLib::ClipperOffset::GetUnitNormal(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::GetUnitNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine", "ClipperLib/ClipperOffset", "GetUnitNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pt1), ::il2cpp_utils::ExtractType(pt2)})));
  return ::il2cpp_utils::RunMethodRethrow<::Cinemachine::ClipperLib::DoublePoint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pt1, pt2);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.DoOffset
void Cinemachine::ClipperLib::ClipperOffset::DoOffset(double delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::DoOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, delta);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.Execute
void Cinemachine::ClipperLib::ClipperOffset::Execute(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*> solution, double delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solution), ::il2cpp_utils::ExtractType(delta)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(solution), delta);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.Execute
void Cinemachine::ClipperLib::ClipperOffset::Execute(ByRef<::Cinemachine::ClipperLib::PolyTree*> solution, double delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::Execute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solution), ::il2cpp_utils::ExtractType(delta)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(solution), delta);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.OffsetPoint
void Cinemachine::ClipperLib::ClipperOffset::OffsetPoint(int j, ByRef<int> k, ::Cinemachine::ClipperLib::JoinType jointype) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::OffsetPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OffsetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k), ::il2cpp_utils::ExtractType(jointype)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, j, byref(k), jointype);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.DoSquare
void Cinemachine::ClipperLib::ClipperOffset::DoSquare(int j, int k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::DoSquare");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoSquare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, j, k);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.DoMiter
void Cinemachine::ClipperLib::ClipperOffset::DoMiter(int j, int k, double r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::DoMiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoMiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k), ::il2cpp_utils::ExtractType(r)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, j, k, r);
}
// Autogenerated method: Cinemachine.ClipperLib/ClipperOffset.DoRound
void Cinemachine::ClipperLib::ClipperOffset::DoRound(int j, int k) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::DoRound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoRound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(j), ::il2cpp_utils::ExtractType(k)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, j, k);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.ClipperLib/ClipperException
#include "Cinemachine/ClipperLib_ClipperException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.PostFX.CinemachinePostProcessing
#include "Cinemachine/PostFX/CinemachinePostProcessing.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.PostFX.CinemachinePostProcessing.PostPipelineStageCallback
void Cinemachine::PostFX::CinemachinePostProcessing::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachinePostProcessing::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.PostFX.CinemachineVolumeSettings
#include "Cinemachine/PostFX/CinemachineVolumeSettings.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Cinemachine.PostFX.CinemachineVolumeSettings/VcamExtraState
#include "Cinemachine/PostFX/CinemachineVolumeSettings_VcamExtraState.hpp"
// Including type: UnityEngine.Rendering.VolumeProfile
#include "UnityEngine/Rendering/VolumeProfile.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Rendering.Volume
#include "UnityEngine/Rendering/Volume.hpp"
// Including type: Cinemachine.CinemachineBrain
#include "Cinemachine/CinemachineBrain.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineCore/Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single s_VolumePriority
float Cinemachine::PostFX::CinemachineVolumeSettings::_get_s_VolumePriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::_get_s_VolumePriority");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine.PostFX", "CinemachineVolumeSettings", "s_VolumePriority"));
}
// Autogenerated static field setter
// Set static field: static public System.Single s_VolumePriority
void Cinemachine::PostFX::CinemachineVolumeSettings::_set_s_VolumePriority(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::_set_s_VolumePriority");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.PostFX", "CinemachineVolumeSettings", "s_VolumePriority", value));
}
// Autogenerated static field getter
// Get static field: static private System.String sVolumeOwnerName
::StringW Cinemachine::PostFX::CinemachineVolumeSettings::_get_sVolumeOwnerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::_get_sVolumeOwnerName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Cinemachine.PostFX", "CinemachineVolumeSettings", "sVolumeOwnerName"));
}
// Autogenerated static field setter
// Set static field: static private System.String sVolumeOwnerName
void Cinemachine::PostFX::CinemachineVolumeSettings::_set_sVolumeOwnerName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::_set_sVolumeOwnerName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.PostFX", "CinemachineVolumeSettings", "sVolumeOwnerName", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.Volume> sVolumes
::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>* Cinemachine::PostFX::CinemachineVolumeSettings::_get_sVolumes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::_get_sVolumes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>*>("Cinemachine.PostFX", "CinemachineVolumeSettings", "sVolumes"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.Volume> sVolumes
void Cinemachine::PostFX::CinemachineVolumeSettings::_set_sVolumes(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::_set_sVolumes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.PostFX", "CinemachineVolumeSettings", "sVolumes", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean m_FocusTracksTarget
[[deprecated("Use field access instead!")]] bool& Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_FocusTracksTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_FocusTracksTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FocusTracksTarget"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode m_FocusTracking
[[deprecated("Use field access instead!")]] ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode& Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_FocusTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_FocusTracking");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FocusTracking"))->offset;
  return *reinterpret_cast<::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform m_FocusTarget
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_FocusTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_FocusTarget");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FocusTarget"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single m_FocusOffset
[[deprecated("Use field access instead!")]] float& Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_FocusOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_FocusOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_FocusOffset"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rendering.VolumeProfile m_Profile
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VolumeProfile*& Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_Profile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::dyn_m_Profile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Profile"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::VolumeProfile**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.get_IsValid
bool Cinemachine::PostFX::CinemachineVolumeSettings::get_IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::get_IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.InvalidateCachedProfile
void Cinemachine::PostFX::CinemachineVolumeSettings::InvalidateCachedProfile() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::InvalidateCachedProfile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateCachedProfile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.OnCameraCut
void Cinemachine::PostFX::CinemachineVolumeSettings::OnCameraCut(::Cinemachine::CinemachineBrain* brain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::OnCameraCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.PostFX", "CinemachineVolumeSettings", "OnCameraCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, brain);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.ApplyPostFX
void Cinemachine::PostFX::CinemachineVolumeSettings::ApplyPostFX(::Cinemachine::CinemachineBrain* brain) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::ApplyPostFX");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.PostFX", "CinemachineVolumeSettings", "ApplyPostFX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brain)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, brain);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.GetDynamicBrainVolumes
::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>* Cinemachine::PostFX::CinemachineVolumeSettings::GetDynamicBrainVolumes(::Cinemachine::CinemachineBrain* brain, int minVolumes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::GetDynamicBrainVolumes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.PostFX", "CinemachineVolumeSettings", "GetDynamicBrainVolumes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(brain), ::il2cpp_utils::ExtractType(minVolumes)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, brain, minVolumes);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.InitializeModule
void Cinemachine::PostFX::CinemachineVolumeSettings::InitializeModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::InitializeModule");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.PostFX", "CinemachineVolumeSettings", "InitializeModule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings..cctor
void Cinemachine::PostFX::CinemachineVolumeSettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.PostFX", "CinemachineVolumeSettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.OnEnable
void Cinemachine::PostFX::CinemachineVolumeSettings::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.OnDestroy
void Cinemachine::PostFX::CinemachineVolumeSettings::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::OnDestroy");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 6));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings.PostPipelineStageCallback
void Cinemachine::PostFX::CinemachineVolumeSettings::PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::PostPipelineStageCallback");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::CinemachineExtension*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, vcam, stage, byref(state), deltaTime);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode
#include "Cinemachine/PostFX/CinemachineVolumeSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode None
::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode>("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode None
void Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_None(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode LookAtTarget
::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_LookAtTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_LookAtTarget");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode>("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "LookAtTarget"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode LookAtTarget
void Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_LookAtTarget(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_LookAtTarget");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "LookAtTarget", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode FollowTarget
::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_FollowTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_FollowTarget");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode>("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "FollowTarget"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode FollowTarget
void Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_FollowTarget(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_FollowTarget");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "FollowTarget", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode CustomTarget
::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_CustomTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_CustomTarget");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode>("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "CustomTarget"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode CustomTarget
void Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_CustomTarget(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_CustomTarget");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "CustomTarget", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode Camera
::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_Camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_get_Camera");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode>("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "Camera"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode Camera
void Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_Camera(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::_set_Camera");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode", "Camera", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.PostFX.CinemachineVolumeSettings/VcamExtraState
#include "Cinemachine/PostFX/CinemachineVolumeSettings_VcamExtraState.hpp"
// Including type: UnityEngine.Rendering.VolumeProfile
#include "UnityEngine/Rendering/VolumeProfile.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Rendering.VolumeProfile mProfileCopy
[[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VolumeProfile*& Cinemachine::PostFX::CinemachineVolumeSettings::VcamExtraState::dyn_mProfileCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::VcamExtraState::dyn_mProfileCopy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mProfileCopy"))->offset;
  return *reinterpret_cast<::UnityEngine::Rendering::VolumeProfile**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings/VcamExtraState.CreateProfileCopy
void Cinemachine::PostFX::CinemachineVolumeSettings::VcamExtraState::CreateProfileCopy(::UnityEngine::Rendering::VolumeProfile* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::VcamExtraState::CreateProfileCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateProfileCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source);
}
// Autogenerated method: Cinemachine.PostFX.CinemachineVolumeSettings/VcamExtraState.DestroyProfileCopy
void Cinemachine::PostFX::CinemachineVolumeSettings::VcamExtraState::DestroyProfileCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::VcamExtraState::DestroyProfileCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyProfileCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.CinemachineDebug
#include "Cinemachine/Utility/CinemachineDebug.hpp"
// Including type: Cinemachine.Utility.CinemachineDebug/OnGUIDelegate
#include "Cinemachine/Utility/CinemachineDebug_OnGUIDelegate.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.GUIStyle
#include "UnityEngine/GUIStyle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Object> mClients
::System::Collections::Generic::HashSet_1<::UnityEngine::Object*>* Cinemachine::Utility::CinemachineDebug::_get_mClients() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::_get_mClients");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::HashSet_1<::UnityEngine::Object*>*>("Cinemachine.Utility", "CinemachineDebug", "mClients"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Object> mClients
void Cinemachine::Utility::CinemachineDebug::_set_mClients(::System::Collections::Generic::HashSet_1<::UnityEngine::Object*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::_set_mClients");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.Utility", "CinemachineDebug", "mClients", value));
}
// Autogenerated static field getter
// Get static field: static public Cinemachine.Utility.CinemachineDebug/OnGUIDelegate OnGUIHandlers
::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate* Cinemachine::Utility::CinemachineDebug::_get_OnGUIHandlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::_get_OnGUIHandlers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate*>("Cinemachine.Utility", "CinemachineDebug", "OnGUIHandlers"));
}
// Autogenerated static field setter
// Set static field: static public Cinemachine.Utility.CinemachineDebug/OnGUIDelegate OnGUIHandlers
void Cinemachine::Utility::CinemachineDebug::_set_OnGUIHandlers(::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::_set_OnGUIHandlers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.Utility", "CinemachineDebug", "OnGUIHandlers", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.Text.StringBuilder> mAvailableStringBuilders
::System::Collections::Generic::List_1<::System::Text::StringBuilder*>* Cinemachine::Utility::CinemachineDebug::_get_mAvailableStringBuilders() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::_get_mAvailableStringBuilders");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Collections::Generic::List_1<::System::Text::StringBuilder*>*>("Cinemachine.Utility", "CinemachineDebug", "mAvailableStringBuilders"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.Text.StringBuilder> mAvailableStringBuilders
void Cinemachine::Utility::CinemachineDebug::_set_mAvailableStringBuilders(::System::Collections::Generic::List_1<::System::Text::StringBuilder*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::_set_mAvailableStringBuilders");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.Utility", "CinemachineDebug", "mAvailableStringBuilders", value));
}
// Autogenerated method: Cinemachine.Utility.CinemachineDebug.ReleaseScreenPos
void Cinemachine::Utility::CinemachineDebug::ReleaseScreenPos(::UnityEngine::Object* client) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::ReleaseScreenPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "CinemachineDebug", "ReleaseScreenPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(client)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, client);
}
// Autogenerated method: Cinemachine.Utility.CinemachineDebug.GetScreenPos
::UnityEngine::Rect Cinemachine::Utility::CinemachineDebug::GetScreenPos(::UnityEngine::Object* client, ::StringW text, ::UnityEngine::GUIStyle* style) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::GetScreenPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "CinemachineDebug", "GetScreenPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(client), ::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, client, text, style);
}
// Autogenerated method: Cinemachine.Utility.CinemachineDebug.SBFromPool
::System::Text::StringBuilder* Cinemachine::Utility::CinemachineDebug::SBFromPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::SBFromPool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "CinemachineDebug", "SBFromPool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Text::StringBuilder*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Cinemachine.Utility.CinemachineDebug.ReturnToPool
void Cinemachine::Utility::CinemachineDebug::ReturnToPool(::System::Text::StringBuilder* sb) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::ReturnToPool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "CinemachineDebug", "ReturnToPool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sb);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Cinemachine.Utility.CinemachineDebug/OnGUIDelegate
#include "Cinemachine/Utility/CinemachineDebug_OnGUIDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.Utility.CinemachineDebug/OnGUIDelegate.Invoke
void Cinemachine::Utility::CinemachineDebug::OnGUIDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate*), 13));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Utility.CinemachineDebug/OnGUIDelegate.BeginInvoke
::System::IAsyncResult* Cinemachine::Utility::CinemachineDebug::OnGUIDelegate::BeginInvoke(::System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate*), 14));
  return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Cinemachine.Utility.CinemachineDebug/OnGUIDelegate.EndInvoke
void Cinemachine::Utility::CinemachineDebug::OnGUIDelegate::EndInvoke(::System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::Utility::CinemachineDebug::OnGUIDelegate*), 15));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.GaussianWindow1D_Vector3
#include "Cinemachine/Utility/GaussianWindow1D_Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.Utility.GaussianWindow1D_Vector3.Compute
::UnityEngine::Vector3 Cinemachine::Utility::GaussianWindow1D_Vector3::Compute(int windowPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1D_Vector3::Compute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::Utility::GaussianWindow1D_Vector3*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, windowPos);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.GaussianWindow1D_Quaternion
#include "Cinemachine/Utility/GaussianWindow1D_Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.Utility.GaussianWindow1D_Quaternion.Compute
::UnityEngine::Quaternion Cinemachine::Utility::GaussianWindow1D_Quaternion::Compute(int windowPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1D_Quaternion::Compute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::Utility::GaussianWindow1D_Quaternion*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(this, ___internal__method, windowPos);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.GaussianWindow1D_CameraRotation
#include "Cinemachine/Utility/GaussianWindow1D_CameraRotation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.Utility.GaussianWindow1D_CameraRotation.Compute
::UnityEngine::Vector2 Cinemachine::Utility::GaussianWindow1D_CameraRotation::Compute(int windowPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1D_CameraRotation::Compute");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::Utility::GaussianWindow1D_CameraRotation*), 4));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method, windowPos);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.PositionPredictor
#include "Cinemachine/Utility/PositionPredictor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Velocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::Utility::PositionPredictor::dyn_m_Velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::dyn_m_Velocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Velocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_SmoothDampVelocity
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::Utility::PositionPredictor::dyn_m_SmoothDampVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::dyn_m_SmoothDampVelocity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_SmoothDampVelocity"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 m_Pos
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::Utility::PositionPredictor::dyn_m_Pos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::dyn_m_Pos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Pos"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean m_HavePos
[[deprecated("Use field access instead!")]] bool& Cinemachine::Utility::PositionPredictor::dyn_m_HavePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::dyn_m_HavePos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_HavePos"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single Smoothing
[[deprecated("Use field access instead!")]] float& Cinemachine::Utility::PositionPredictor::dyn_Smoothing() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::dyn_Smoothing");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Smoothing"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.Utility.PositionPredictor.IsEmpty
bool Cinemachine::Utility::PositionPredictor::IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::IsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Utility.PositionPredictor.ApplyTransformDelta
void Cinemachine::Utility::PositionPredictor::ApplyTransformDelta(::UnityEngine::Vector3 positionDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::ApplyTransformDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTransformDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionDelta)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, positionDelta);
}
// Autogenerated method: Cinemachine.Utility.PositionPredictor.Reset
void Cinemachine::Utility::PositionPredictor::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Utility.PositionPredictor.AddPosition
void Cinemachine::Utility::PositionPredictor::AddPosition(::UnityEngine::Vector3 pos, float deltaTime, float lookaheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::AddPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(deltaTime), ::il2cpp_utils::ExtractType(lookaheadTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pos, deltaTime, lookaheadTime);
}
// Autogenerated method: Cinemachine.Utility.PositionPredictor.PredictPositionDelta
::UnityEngine::Vector3 Cinemachine::Utility::PositionPredictor::PredictPositionDelta(float lookaheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::PredictPositionDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PredictPositionDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lookaheadTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, lookaheadTime);
}
// Autogenerated method: Cinemachine.Utility.PositionPredictor.PredictPosition
::UnityEngine::Vector3 Cinemachine::Utility::PositionPredictor::PredictPosition(float lookaheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::PositionPredictor::PredictPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PredictPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lookaheadTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method, lookaheadTime);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.Damper
#include "Cinemachine/Utility/Damper.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single Epsilon
float Cinemachine::Utility::Damper::_get_Epsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::_get_Epsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine.Utility", "Damper", "Epsilon"));
}
// Autogenerated static field setter
// Set static field: static private System.Single Epsilon
void Cinemachine::Utility::Damper::_set_Epsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::_set_Epsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.Utility", "Damper", "Epsilon", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kNegligibleResidual
float Cinemachine::Utility::Damper::_get_kNegligibleResidual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::_get_kNegligibleResidual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine.Utility", "Damper", "kNegligibleResidual"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kNegligibleResidual
void Cinemachine::Utility::Damper::_set_kNegligibleResidual(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::_set_kNegligibleResidual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.Utility", "Damper", "kNegligibleResidual", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kLogNegligibleResidual
float Cinemachine::Utility::Damper::_get_kLogNegligibleResidual() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::_get_kLogNegligibleResidual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine.Utility", "Damper", "kLogNegligibleResidual"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLogNegligibleResidual
void Cinemachine::Utility::Damper::_set_kLogNegligibleResidual(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::_set_kLogNegligibleResidual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.Utility", "Damper", "kLogNegligibleResidual", value));
}
// Autogenerated method: Cinemachine.Utility.Damper.DecayConstant
float Cinemachine::Utility::Damper::DecayConstant(float time, float residual) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::DecayConstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "Damper", "DecayConstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(residual)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time, residual);
}
// Autogenerated method: Cinemachine.Utility.Damper.DecayedRemainder
float Cinemachine::Utility::Damper::DecayedRemainder(float initial, float decayConstant, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::DecayedRemainder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "Damper", "DecayedRemainder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(decayConstant), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, initial, decayConstant, deltaTime);
}
// Autogenerated method: Cinemachine.Utility.Damper.Damp
float Cinemachine::Utility::Damper::Damp(float initial, float dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::Damp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "Damper", "Damp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated method: Cinemachine.Utility.Damper.Damp
::UnityEngine::Vector3 Cinemachine::Utility::Damper::Damp(::UnityEngine::Vector3 initial, ::UnityEngine::Vector3 dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::Damp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "Damper", "Damp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated method: Cinemachine.Utility.Damper.Damp
::UnityEngine::Vector3 Cinemachine::Utility::Damper::Damp(::UnityEngine::Vector3 initial, float dampTime, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::Damper::Damp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "Damper", "Damp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initial), ::il2cpp_utils::ExtractType(dampTime), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, initial, dampTime, deltaTime);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.HeadingTracker
#include "Cinemachine/Utility/HeadingTracker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single mDecayExponent
float Cinemachine::Utility::HeadingTracker::_get_mDecayExponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::_get_mDecayExponent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine.Utility", "HeadingTracker", "mDecayExponent"));
}
// Autogenerated static field setter
// Set static field: static private System.Single mDecayExponent
void Cinemachine::Utility::HeadingTracker::_set_mDecayExponent(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::_set_mDecayExponent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.Utility", "HeadingTracker", "mDecayExponent", value));
}
// Autogenerated instance field getter
// Get instance field: private Cinemachine.Utility.HeadingTracker/Item[] mHistory
[[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::Utility::HeadingTracker::Item>& Cinemachine::Utility::HeadingTracker::dyn_mHistory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::dyn_mHistory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mHistory"))->offset;
  return *reinterpret_cast<::ArrayW<::Cinemachine::Utility::HeadingTracker::Item>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 mTop
[[deprecated("Use field access instead!")]] int& Cinemachine::Utility::HeadingTracker::dyn_mTop() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::dyn_mTop");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mTop"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 mBottom
[[deprecated("Use field access instead!")]] int& Cinemachine::Utility::HeadingTracker::dyn_mBottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::dyn_mBottom");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mBottom"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 mCount
[[deprecated("Use field access instead!")]] int& Cinemachine::Utility::HeadingTracker::dyn_mCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::dyn_mCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 mHeadingSum
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::Utility::HeadingTracker::dyn_mHeadingSum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::dyn_mHeadingSum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mHeadingSum"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mWeightSum
[[deprecated("Use field access instead!")]] float& Cinemachine::Utility::HeadingTracker::dyn_mWeightSum() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::dyn_mWeightSum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mWeightSum"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Single mWeightTime
[[deprecated("Use field access instead!")]] float& Cinemachine::Utility::HeadingTracker::dyn_mWeightTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::dyn_mWeightTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mWeightTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Vector3 mLastGoodHeading
[[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& Cinemachine::Utility::HeadingTracker::dyn_mLastGoodHeading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::dyn_mLastGoodHeading");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mLastGoodHeading"))->offset;
  return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Cinemachine.Utility.HeadingTracker.get_FilterSize
int Cinemachine::Utility::HeadingTracker::get_FilterSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::get_FilterSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FilterSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Utility.HeadingTracker.ClearHistory
void Cinemachine::Utility::HeadingTracker::ClearHistory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::ClearHistory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearHistory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Utility.HeadingTracker.Decay
float Cinemachine::Utility::HeadingTracker::Decay(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::Decay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "HeadingTracker", "Decay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time);
}
// Autogenerated method: Cinemachine.Utility.HeadingTracker.Add
void Cinemachine::Utility::HeadingTracker::Add(::UnityEngine::Vector3 velocity) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(velocity)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, velocity);
}
// Autogenerated method: Cinemachine.Utility.HeadingTracker.PopBottom
void Cinemachine::Utility::HeadingTracker::PopBottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::PopBottom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopBottom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Utility.HeadingTracker.DecayHistory
void Cinemachine::Utility::HeadingTracker::DecayHistory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::DecayHistory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecayHistory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Cinemachine.Utility.HeadingTracker.GetReliableHeading
::UnityEngine::Vector3 Cinemachine::Utility::HeadingTracker::GetReliableHeading() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::GetReliableHeading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetReliableHeading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.SplineHelpers
#include "Cinemachine/Utility/SplineHelpers.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.Utility.SplineHelpers.Bezier3
::UnityEngine::Vector3 Cinemachine::Utility::SplineHelpers::Bezier3(float t, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::SplineHelpers::Bezier3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "SplineHelpers", "Bezier3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, p0, p1, p2, p3);
}
// Autogenerated method: Cinemachine.Utility.SplineHelpers.BezierTangent3
::UnityEngine::Vector3 Cinemachine::Utility::SplineHelpers::BezierTangent3(float t, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::SplineHelpers::BezierTangent3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "SplineHelpers", "BezierTangent3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, p0, p1, p2, p3);
}
// Autogenerated method: Cinemachine.Utility.SplineHelpers.BezierTangentWeights3
void Cinemachine::Utility::SplineHelpers::BezierTangentWeights3(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, ByRef<::UnityEngine::Vector3> w0, ByRef<::UnityEngine::Vector3> w1, ByRef<::UnityEngine::Vector3> w2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::SplineHelpers::BezierTangentWeights3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "SplineHelpers", "BezierTangentWeights3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p0, p1, p2, p3, byref(w0), byref(w1), byref(w2));
}
// Autogenerated method: Cinemachine.Utility.SplineHelpers.Bezier1
float Cinemachine::Utility::SplineHelpers::Bezier1(float t, float p0, float p1, float p2, float p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::SplineHelpers::Bezier1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "SplineHelpers", "Bezier1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, p0, p1, p2, p3);
}
// Autogenerated method: Cinemachine.Utility.SplineHelpers.BezierTangent1
float Cinemachine::Utility::SplineHelpers::BezierTangent1(float t, float p0, float p1, float p2, float p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::SplineHelpers::BezierTangent1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "SplineHelpers", "BezierTangent1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, t, p0, p1, p2, p3);
}
// Autogenerated method: Cinemachine.Utility.SplineHelpers.ComputeSmoothControlPoints
void Cinemachine::Utility::SplineHelpers::ComputeSmoothControlPoints(ByRef<::ArrayW<::UnityEngine::Vector4>> knot, ByRef<::ArrayW<::UnityEngine::Vector4>> ctrl1, ByRef<::ArrayW<::UnityEngine::Vector4>> ctrl2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::SplineHelpers::ComputeSmoothControlPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "SplineHelpers", "ComputeSmoothControlPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(knot), ::il2cpp_utils::ExtractType(ctrl1), ::il2cpp_utils::ExtractType(ctrl2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(knot), byref(ctrl1), byref(ctrl2));
}
// Autogenerated method: Cinemachine.Utility.SplineHelpers.ComputeSmoothControlPointsLooped
void Cinemachine::Utility::SplineHelpers::ComputeSmoothControlPointsLooped(ByRef<::ArrayW<::UnityEngine::Vector4>> knot, ByRef<::ArrayW<::UnityEngine::Vector4>> ctrl1, ByRef<::ArrayW<::UnityEngine::Vector4>> ctrl2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::SplineHelpers::ComputeSmoothControlPointsLooped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "SplineHelpers", "ComputeSmoothControlPointsLooped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(knot), ::il2cpp_utils::ExtractType(ctrl1), ::il2cpp_utils::ExtractType(ctrl2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(knot), byref(ctrl1), byref(ctrl2));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.UnityVectorExtensions
#include "Cinemachine/Utility/UnityVectorExtensions.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single Epsilon
float Cinemachine::Utility::UnityVectorExtensions::_get_Epsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::_get_Epsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("Cinemachine.Utility", "UnityVectorExtensions", "Epsilon"));
}
// Autogenerated static field setter
// Set static field: static public System.Single Epsilon
void Cinemachine::Utility::UnityVectorExtensions::_set_Epsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::_set_Epsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Cinemachine.Utility", "UnityVectorExtensions", "Epsilon", value));
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.IsNaN
bool Cinemachine::Utility::UnityVectorExtensions::IsNaN(::UnityEngine::Vector2 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::IsNaN");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "IsNaN", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.IsNaN
bool Cinemachine::Utility::UnityVectorExtensions::IsNaN(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::IsNaN");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "IsNaN", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.ClosestPointOnSegment
float Cinemachine::Utility::UnityVectorExtensions::ClosestPointOnSegment(::UnityEngine::Vector3 p, ::UnityEngine::Vector3 s0, ::UnityEngine::Vector3 s1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::ClosestPointOnSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "ClosestPointOnSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(s0), ::il2cpp_utils::ExtractType(s1)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p, s0, s1);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.ClosestPointOnSegment
float Cinemachine::Utility::UnityVectorExtensions::ClosestPointOnSegment(::UnityEngine::Vector2 p, ::UnityEngine::Vector2 s0, ::UnityEngine::Vector2 s1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::ClosestPointOnSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "ClosestPointOnSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(s0), ::il2cpp_utils::ExtractType(s1)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, p, s0, s1);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.ProjectOntoPlane
::UnityEngine::Vector3 Cinemachine::Utility::UnityVectorExtensions::ProjectOntoPlane(::UnityEngine::Vector3 vector, ::UnityEngine::Vector3 planeNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::ProjectOntoPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "ProjectOntoPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector), ::il2cpp_utils::ExtractType(planeNormal)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vector, planeNormal);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.SquareNormalize
::UnityEngine::Vector2 Cinemachine::Utility::UnityVectorExtensions::SquareNormalize(::UnityEngine::Vector2 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::SquareNormalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "SquareNormalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.FindIntersection
int Cinemachine::Utility::UnityVectorExtensions::FindIntersection(ByRef<::UnityEngine::Vector2> p1, ByRef<::UnityEngine::Vector2> p2, ByRef<::UnityEngine::Vector2> q1, ByRef<::UnityEngine::Vector2> q2, ByRef<::UnityEngine::Vector2> intersection) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::FindIntersection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "FindIntersection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(q1), ::il2cpp_utils::ExtractType(q2), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::Vector2&>()})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(p1), byref(p2), byref(q1), byref(q2), byref(intersection));
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.Cross
float Cinemachine::Utility::UnityVectorExtensions::Cross(::UnityEngine::Vector2 v1, ::UnityEngine::Vector2 v2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::Cross");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "Cross", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v1, v2);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.Abs
::UnityEngine::Vector2 Cinemachine::Utility::UnityVectorExtensions::Abs(::UnityEngine::Vector2 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.Abs
::UnityEngine::Vector3 Cinemachine::Utility::UnityVectorExtensions::Abs(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.IsUniform
bool Cinemachine::Utility::UnityVectorExtensions::IsUniform(::UnityEngine::Vector2 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::IsUniform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "IsUniform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.IsUniform
bool Cinemachine::Utility::UnityVectorExtensions::IsUniform(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::IsUniform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "IsUniform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.AlmostZero
bool Cinemachine::Utility::UnityVectorExtensions::AlmostZero(::UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::AlmostZero");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "AlmostZero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.Angle
float Cinemachine::Utility::UnityVectorExtensions::Angle(::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::Angle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "Angle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v1, v2);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.SignedAngle
float Cinemachine::Utility::UnityVectorExtensions::SignedAngle(::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::SignedAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "SignedAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v1, v2, up);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.SafeFromToRotation
::UnityEngine::Quaternion Cinemachine::Utility::UnityVectorExtensions::SafeFromToRotation(::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::SafeFromToRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "SafeFromToRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, v1, v2, up);
}
// Autogenerated method: Cinemachine.Utility.UnityVectorExtensions.SlerpWithReferenceUp
::UnityEngine::Vector3 Cinemachine::Utility::UnityVectorExtensions::SlerpWithReferenceUp(::UnityEngine::Vector3 vA, ::UnityEngine::Vector3 vB, float t, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityVectorExtensions::SlerpWithReferenceUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityVectorExtensions", "SlerpWithReferenceUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vA), ::il2cpp_utils::ExtractType(vB), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, vA, vB, t, up);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.UnityQuaternionExtensions
#include "Cinemachine/Utility/UnityQuaternionExtensions.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.Utility.UnityQuaternionExtensions.SlerpWithReferenceUp
::UnityEngine::Quaternion Cinemachine::Utility::UnityQuaternionExtensions::SlerpWithReferenceUp(::UnityEngine::Quaternion qA, ::UnityEngine::Quaternion qB, float t, ::UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityQuaternionExtensions::SlerpWithReferenceUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityQuaternionExtensions", "SlerpWithReferenceUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(qA), ::il2cpp_utils::ExtractType(qB), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(up)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, qA, qB, t, up);
}
// Autogenerated method: Cinemachine.Utility.UnityQuaternionExtensions.Normalized
::UnityEngine::Quaternion Cinemachine::Utility::UnityQuaternionExtensions::Normalized(::UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityQuaternionExtensions::Normalized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityQuaternionExtensions", "Normalized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, q);
}
// Autogenerated method: Cinemachine.Utility.UnityQuaternionExtensions.GetCameraRotationToTarget
::UnityEngine::Vector2 Cinemachine::Utility::UnityQuaternionExtensions::GetCameraRotationToTarget(::UnityEngine::Quaternion orient, ::UnityEngine::Vector3 lookAtDir, ::UnityEngine::Vector3 worldUp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityQuaternionExtensions::GetCameraRotationToTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityQuaternionExtensions", "GetCameraRotationToTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(orient), ::il2cpp_utils::ExtractType(lookAtDir), ::il2cpp_utils::ExtractType(worldUp)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, orient, lookAtDir, worldUp);
}
// Autogenerated method: Cinemachine.Utility.UnityQuaternionExtensions.ApplyCameraRotation
::UnityEngine::Quaternion Cinemachine::Utility::UnityQuaternionExtensions::ApplyCameraRotation(::UnityEngine::Quaternion orient, ::UnityEngine::Vector2 rot, ::UnityEngine::Vector3 worldUp) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityQuaternionExtensions::ApplyCameraRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityQuaternionExtensions", "ApplyCameraRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(orient), ::il2cpp_utils::ExtractType(rot), ::il2cpp_utils::ExtractType(worldUp)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Quaternion, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, orient, rot, worldUp);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Cinemachine.Utility.UnityRectExtensions
#include "Cinemachine/Utility/UnityRectExtensions.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Cinemachine.Utility.UnityRectExtensions.Inflated
::UnityEngine::Rect Cinemachine::Utility::UnityRectExtensions::Inflated(::UnityEngine::Rect r, ::UnityEngine::Vector2 delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::UnityRectExtensions::Inflated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Cinemachine.Utility", "UnityRectExtensions", "Inflated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r), ::il2cpp_utils::ExtractType(delta)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Rect, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, r, delta);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnitySourceGeneratedAssemblyMonoScriptTypes_v1
#include "GlobalNamespace/UnitySourceGeneratedAssemblyMonoScriptTypes_v1_______.hpp"
// Including type: UnitySourceGeneratedAssemblyMonoScriptTypes_v1/MonoScriptData
#include "GlobalNamespace/UnitySourceGeneratedAssemblyMonoScriptTypes_v1________MonoScriptData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnitySourceGeneratedAssemblyMonoScriptTypes_v1.Get
::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1_______::MonoScriptData GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1_______::Get() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1_______::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnitySourceGeneratedAssemblyMonoScriptTypes_v1", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1_______::MonoScriptData, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Utilities.DictationServiceReference
#include "Meta/WitAi/Utilities/DictationServiceReference.hpp"
// Including type: Meta.WitAi.Utilities.DictationServiceReference/<>c
#include "Meta/WitAi/Utilities/DictationServiceReference_--c.hpp"
// Including type: Meta.WitAi.Dictation.DictationService
#include "Meta/WitAi/Dictation/DictationService.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: Meta.WitAi.Dictation.DictationService dictationService
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::DictationService*& Meta::WitAi::Utilities::DictationServiceReference::dyn_dictationService() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictationServiceReference::dyn_dictationService");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dictationService"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Dictation::DictationService**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Meta.WitAi.Utilities.DictationServiceReference.get_DictationService
::Meta::WitAi::Dictation::DictationService* Meta::WitAi::Utilities::DictationServiceReference::get_DictationService() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictationServiceReference::get_DictationService");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_DictationService", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Dictation::DictationService*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Utilities.DictationServiceReference/<>c
#include "Meta/WitAi/Utilities/DictationServiceReference_--c.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: Meta.WitAi.Dictation.DictationService
#include "Meta/WitAi/Dictation/DictationService.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Meta.WitAi.Utilities.DictationServiceReference/<>c <>9
::Meta::WitAi::Utilities::DictationServiceReference::$$c* Meta::WitAi::Utilities::DictationServiceReference::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictationServiceReference::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Meta::WitAi::Utilities::DictationServiceReference::$$c*>("Meta.WitAi.Utilities", "DictationServiceReference/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Meta.WitAi.Utilities.DictationServiceReference/<>c <>9
void Meta::WitAi::Utilities::DictationServiceReference::$$c::_set_$$9(::Meta::WitAi::Utilities::DictationServiceReference::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictationServiceReference::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Meta.WitAi.Utilities", "DictationServiceReference/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Predicate`1<Meta.WitAi.Dictation.DictationService> <>9__2_0
::System::Predicate_1<::Meta::WitAi::Dictation::DictationService*>* Meta::WitAi::Utilities::DictationServiceReference::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictationServiceReference::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Predicate_1<::Meta::WitAi::Dictation::DictationService*>*>("Meta.WitAi.Utilities", "DictationServiceReference/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Predicate`1<Meta.WitAi.Dictation.DictationService> <>9__2_0
void Meta::WitAi::Utilities::DictationServiceReference::$$c::_set_$$9__2_0(::System::Predicate_1<::Meta::WitAi::Dictation::DictationService*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictationServiceReference::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Meta.WitAi.Utilities", "DictationServiceReference/<>c", "<>9__2_0", value)));
}
// Autogenerated method: Meta.WitAi.Utilities.DictationServiceReference/<>c..cctor
void Meta::WitAi::Utilities::DictationServiceReference::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictationServiceReference::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Meta.WitAi.Utilities", "DictationServiceReference/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Meta.WitAi.Utilities.DictationServiceReference/<>c.<get_DictationService>b__2_0
bool Meta::WitAi::Utilities::DictationServiceReference::$$c::$get_DictationService$b__2_0(::Meta::WitAi::Dictation::DictationService* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictationServiceReference::$$c::<get_DictationService>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_DictationService>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, o);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.ServiceReferences.DictationServiceAudioEventReference
#include "Meta/WitAi/ServiceReferences/DictationServiceAudioEventReference.hpp"
// Including type: Meta.WitAi.Interfaces.IAudioInputEvents
#include "Meta/WitAi/Interfaces/IAudioInputEvents.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Meta.WitAi.Utilities.DictationServiceReference _dictationServiceReference
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Utilities::DictationServiceReference& Meta::WitAi::ServiceReferences::DictationServiceAudioEventReference::dyn__dictationServiceReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ServiceReferences::DictationServiceAudioEventReference::dyn__dictationServiceReference");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dictationServiceReference"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Utilities::DictationServiceReference*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Meta.WitAi.ServiceReferences.DictationServiceAudioEventReference.get_AudioEvents
::Meta::WitAi::Interfaces::IAudioInputEvents* Meta::WitAi::ServiceReferences::DictationServiceAudioEventReference::get_AudioEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ServiceReferences::DictationServiceAudioEventReference::get_AudioEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::ServiceReferences::AudioInputServiceReference*), 5));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Interfaces::IAudioInputEvents*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Dictation.DictationService
#include "Meta/WitAi/Dictation/DictationService.hpp"
// Including type: Meta.WitAi.Dictation.Events.DictationEvents
#include "Meta/WitAi/Dictation/Events/DictationEvents.hpp"
// Including type: Meta.WitAi.Events.TelemetryEvents
#include "Meta/WitAi/Events/TelemetryEvents.hpp"
// Including type: Meta.WitAi.Interfaces.ITranscriptionProvider
#include "Meta/WitAi/Interfaces/ITranscriptionProvider.hpp"
// Including type: Meta.WitAi.Interfaces.IAudioInputEvents
#include "Meta/WitAi/Interfaces/IAudioInputEvents.hpp"
// Including type: Meta.WitAi.Interfaces.ITranscriptionEvent
#include "Meta/WitAi/Interfaces/ITranscriptionEvent.hpp"
// Including type: Meta.WitAi.Configuration.WitRequestOptions
#include "Meta/WitAi/Configuration/WitRequestOptions.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequest
#include "Meta/WitAi/Requests/VoiceServiceRequest.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequestEvents
#include "Meta/WitAi/Requests/VoiceServiceRequestEvents.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected Meta.WitAi.Dictation.Events.DictationEvents dictationEvents
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::Events::DictationEvents*& Meta::WitAi::Dictation::DictationService::dyn_dictationEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::dyn_dictationEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dictationEvents"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Dictation::Events::DictationEvents**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected Meta.WitAi.Events.TelemetryEvents telemetryEvents
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::TelemetryEvents*& Meta::WitAi::Dictation::DictationService::dyn_telemetryEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::dyn_telemetryEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "telemetryEvents"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Events::TelemetryEvents**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_Active
bool Meta::WitAi::Dictation::DictationService::get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_Active");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_IsRequestActive
bool Meta::WitAi::Dictation::DictationService::get_IsRequestActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_IsRequestActive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_TranscriptionProvider
::Meta::WitAi::Interfaces::ITranscriptionProvider* Meta::WitAi::Dictation::DictationService::get_TranscriptionProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_TranscriptionProvider");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Interfaces::ITranscriptionProvider*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.set_TranscriptionProvider
void Meta::WitAi::Dictation::DictationService::set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::set_TranscriptionProvider");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_MicActive
bool Meta::WitAi::Dictation::DictationService::get_MicActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_MicActive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_DictationEvents
::Meta::WitAi::Dictation::Events::DictationEvents* Meta::WitAi::Dictation::DictationService::get_DictationEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_DictationEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Dictation::Events::DictationEvents*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.set_DictationEvents
void Meta::WitAi::Dictation::DictationService::set_DictationEvents(::Meta::WitAi::Dictation::Events::DictationEvents* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::set_DictationEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 26));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_TelemetryEvents
::Meta::WitAi::Events::TelemetryEvents* Meta::WitAi::Dictation::DictationService::get_TelemetryEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_TelemetryEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 17));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Events::TelemetryEvents*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.set_TelemetryEvents
void Meta::WitAi::Dictation::DictationService::set_TelemetryEvents(::Meta::WitAi::Events::TelemetryEvents* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::set_TelemetryEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 12));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_AudioEvents
::Meta::WitAi::Interfaces::IAudioInputEvents* Meta::WitAi::Dictation::DictationService::get_AudioEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_AudioEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 18));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Interfaces::IAudioInputEvents*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_TranscriptionEvents
::Meta::WitAi::Interfaces::ITranscriptionEvent* Meta::WitAi::Dictation::DictationService::get_TranscriptionEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_TranscriptionEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 19));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Interfaces::ITranscriptionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.get_ShouldSendMicData
bool Meta::WitAi::Dictation::DictationService::get_ShouldSendMicData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::get_ShouldSendMicData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.Activate
void Meta::WitAi::Dictation::DictationService::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.Activate
void Meta::WitAi::Dictation::DictationService::Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestOptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, requestOptions);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.Activate
::Meta::WitAi::Requests::VoiceServiceRequest* Meta::WitAi::Dictation::DictationService::Activate(::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestEvents)})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Requests::VoiceServiceRequest*, false>(this, ___internal__method, requestEvents);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.Activate
::Meta::WitAi::Requests::VoiceServiceRequest* Meta::WitAi::Dictation::DictationService::Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::Activate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Requests::VoiceServiceRequest*, false>(this, ___internal__method, requestOptions, requestEvents);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.ActivateImmediately
void Meta::WitAi::Dictation::DictationService::ActivateImmediately() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::ActivateImmediately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateImmediately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.ActivateImmediately
void Meta::WitAi::Dictation::DictationService::ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::ActivateImmediately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateImmediately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestOptions)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, requestOptions);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.ActivateImmediately
::Meta::WitAi::Requests::VoiceServiceRequest* Meta::WitAi::Dictation::DictationService::ActivateImmediately(::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::ActivateImmediately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateImmediately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestEvents)})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Requests::VoiceServiceRequest*, false>(this, ___internal__method, requestEvents);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.ActivateImmediately
::Meta::WitAi::Requests::VoiceServiceRequest* Meta::WitAi::Dictation::DictationService::ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::ActivateImmediately");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Requests::VoiceServiceRequest*, false>(this, ___internal__method, requestOptions, requestEvents);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.Deactivate
void Meta::WitAi::Dictation::DictationService::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::Deactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.Cancel
void Meta::WitAi::Dictation::DictationService::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::Cancel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.Awake
void Meta::WitAi::Dictation::DictationService::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.OnEnable
void Meta::WitAi::Dictation::DictationService::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.DictationService.OnDisable
void Meta::WitAi::Dictation::DictationService::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Dictation.IDictationService
#include "Meta/WitAi/Dictation/IDictationService.hpp"
// Including type: Meta.WitAi.Interfaces.ITranscriptionProvider
#include "Meta/WitAi/Interfaces/ITranscriptionProvider.hpp"
// Including type: Meta.WitAi.Dictation.Events.DictationEvents
#include "Meta/WitAi/Dictation/Events/DictationEvents.hpp"
// Including type: Meta.WitAi.Events.TelemetryEvents
#include "Meta/WitAi/Events/TelemetryEvents.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequest
#include "Meta/WitAi/Requests/VoiceServiceRequest.hpp"
// Including type: Meta.WitAi.Configuration.WitRequestOptions
#include "Meta/WitAi/Configuration/WitRequestOptions.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequestEvents
#include "Meta/WitAi/Requests/VoiceServiceRequestEvents.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.get_Active
bool Meta::WitAi::Dictation::IDictationService::get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::get_Active");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.get_IsRequestActive
bool Meta::WitAi::Dictation::IDictationService::get_IsRequestActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::get_IsRequestActive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.get_MicActive
bool Meta::WitAi::Dictation::IDictationService::get_MicActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::get_MicActive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.get_TranscriptionProvider
::Meta::WitAi::Interfaces::ITranscriptionProvider* Meta::WitAi::Dictation::IDictationService::get_TranscriptionProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::get_TranscriptionProvider");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Interfaces::ITranscriptionProvider*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.set_TranscriptionProvider
void Meta::WitAi::Dictation::IDictationService::set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::set_TranscriptionProvider");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.get_DictationEvents
::Meta::WitAi::Dictation::Events::DictationEvents* Meta::WitAi::Dictation::IDictationService::get_DictationEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::get_DictationEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Dictation::Events::DictationEvents*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.set_DictationEvents
void Meta::WitAi::Dictation::IDictationService::set_DictationEvents(::Meta::WitAi::Dictation::Events::DictationEvents* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::set_DictationEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.get_TelemetryEvents
::Meta::WitAi::Events::TelemetryEvents* Meta::WitAi::Dictation::IDictationService::get_TelemetryEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::get_TelemetryEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Events::TelemetryEvents*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.set_TelemetryEvents
void Meta::WitAi::Dictation::IDictationService::set_TelemetryEvents(::Meta::WitAi::Events::TelemetryEvents* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::set_TelemetryEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.Activate
::Meta::WitAi::Requests::VoiceServiceRequest* Meta::WitAi::Dictation::IDictationService::Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::Activate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Requests::VoiceServiceRequest*, false>(this, ___internal__method, requestOptions, requestEvents);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.ActivateImmediately
::Meta::WitAi::Requests::VoiceServiceRequest* Meta::WitAi::Dictation::IDictationService::ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::ActivateImmediately");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Requests::VoiceServiceRequest*, false>(this, ___internal__method, requestOptions, requestEvents);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.Deactivate
void Meta::WitAi::Dictation::IDictationService::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::Deactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.IDictationService.Cancel
void Meta::WitAi::Dictation::IDictationService::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::IDictationService::Cancel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::IDictationService*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Dictation.MultiRequestTranscription
#include "Meta/WitAi/Dictation/MultiRequestTranscription.hpp"
// Including type: Meta.WitAi.Dictation.DictationService
#include "Meta/WitAi/Dictation/DictationService.hpp"
// Including type: Meta.WitAi.Events.WitTranscriptionEvent
#include "Meta/WitAi/Events/WitTranscriptionEvent.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Meta.WitAi.Dictation.DictationService witDictation
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::DictationService*& Meta::WitAi::Dictation::MultiRequestTranscription::dyn_witDictation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::dyn_witDictation");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "witDictation"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Dictation::DictationService**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 linesBetweenActivations
[[deprecated("Use field access instead!")]] int& Meta::WitAi::Dictation::MultiRequestTranscription::dyn_linesBetweenActivations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::dyn_linesBetweenActivations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "linesBetweenActivations"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String activationSeparator
[[deprecated("Use field access instead!")]] ::StringW& Meta::WitAi::Dictation::MultiRequestTranscription::dyn_activationSeparator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::dyn_activationSeparator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "activationSeparator"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Meta.WitAi.Events.WitTranscriptionEvent onTranscriptionUpdated
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitTranscriptionEvent*& Meta::WitAi::Dictation::MultiRequestTranscription::dyn_onTranscriptionUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::dyn_onTranscriptionUpdated");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onTranscriptionUpdated"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Events::WitTranscriptionEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.StringBuilder _text
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& Meta::WitAi::Dictation::MultiRequestTranscription::dyn__text() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::dyn__text");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_text"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _activeText
[[deprecated("Use field access instead!")]] ::StringW& Meta::WitAi::Dictation::MultiRequestTranscription::dyn__activeText() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::dyn__activeText");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeText"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _newSection
[[deprecated("Use field access instead!")]] bool& Meta::WitAi::Dictation::MultiRequestTranscription::dyn__newSection() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::dyn__newSection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_newSection"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Text.StringBuilder _separator
[[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& Meta::WitAi::Dictation::MultiRequestTranscription::dyn__separator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::dyn__separator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_separator"))->offset;
  return *reinterpret_cast<::System::Text::StringBuilder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Meta.WitAi.Dictation.MultiRequestTranscription.Awake
void Meta::WitAi::Dictation::MultiRequestTranscription::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.MultiRequestTranscription.OnEnable
void Meta::WitAi::Dictation::MultiRequestTranscription::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.MultiRequestTranscription.OnDisable
void Meta::WitAi::Dictation::MultiRequestTranscription::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.MultiRequestTranscription.OnCancelled
void Meta::WitAi::Dictation::MultiRequestTranscription::OnCancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::OnCancelled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCancelled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.MultiRequestTranscription.OnFullTranscription
void Meta::WitAi::Dictation::MultiRequestTranscription::OnFullTranscription(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::OnFullTranscription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFullTranscription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: Meta.WitAi.Dictation.MultiRequestTranscription.OnPartialTranscription
void Meta::WitAi::Dictation::MultiRequestTranscription::OnPartialTranscription(::StringW text) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::OnPartialTranscription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPartialTranscription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: Meta.WitAi.Dictation.MultiRequestTranscription.Clear
void Meta::WitAi::Dictation::MultiRequestTranscription::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.MultiRequestTranscription.OnTranscriptionUpdated
void Meta::WitAi::Dictation::MultiRequestTranscription::OnTranscriptionUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::OnTranscriptionUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTranscriptionUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Dictation.WitDictation
#include "Meta/WitAi/Dictation/WitDictation.hpp"
// Including type: Meta.WitAi.Configuration.WitRuntimeConfiguration
#include "Meta/WitAi/Configuration/WitRuntimeConfiguration.hpp"
// Including type: Meta.WitAi.WitService
#include "Meta/WitAi/WitService.hpp"
// Including type: Meta.WitAi.Events.VoiceEvents
#include "Meta/WitAi/Events/VoiceEvents.hpp"
// Including type: Meta.WitAi.Data.Configuration.WitConfiguration
#include "Meta/WitAi/Data/Configuration/WitConfiguration.hpp"
// Including type: Meta.WitAi.WitRequest
#include "Meta/WitAi/WitRequest.hpp"
// Including type: Meta.WitAi.Configuration.WitRequestOptions
#include "Meta/WitAi/Configuration/WitRequestOptions.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequestEvents
#include "Meta/WitAi/Requests/VoiceServiceRequestEvents.hpp"
// Including type: Meta.WitAi.Interfaces.IDynamicEntitiesProvider
#include "Meta/WitAi/Interfaces/IDynamicEntitiesProvider.hpp"
// Including type: Meta.WitAi.Interfaces.ITranscriptionProvider
#include "Meta/WitAi/Interfaces/ITranscriptionProvider.hpp"
// Including type: Meta.WitAi.Dictation.Events.DictationEvents
#include "Meta/WitAi/Dictation/Events/DictationEvents.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequest
#include "Meta/WitAi/Requests/VoiceServiceRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Meta.WitAi.Configuration.WitRuntimeConfiguration witRuntimeConfiguration
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Configuration::WitRuntimeConfiguration*& Meta::WitAi::Dictation::WitDictation::dyn_witRuntimeConfiguration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::dyn_witRuntimeConfiguration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "witRuntimeConfiguration"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Configuration::WitRuntimeConfiguration**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Meta.WitAi.WitService witService
[[deprecated("Use field access instead!")]] ::Meta::WitAi::WitService*& Meta::WitAi::Dictation::WitDictation::dyn_witService() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::dyn_witService");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "witService"))->offset;
  return *reinterpret_cast<::Meta::WitAi::WitService**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Meta.WitAi.Events.VoiceEvents _voiceEvents
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::VoiceEvents*& Meta::WitAi::Dictation::WitDictation::dyn__voiceEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::dyn__voiceEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_voiceEvents"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Events::VoiceEvents**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_RuntimeConfiguration
::Meta::WitAi::Configuration::WitRuntimeConfiguration* Meta::WitAi::Dictation::WitDictation::get_RuntimeConfiguration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_RuntimeConfiguration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::WitDictation*), 35));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Configuration::WitRuntimeConfiguration*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.set_RuntimeConfiguration
void Meta::WitAi::Dictation::WitDictation::set_RuntimeConfiguration(::Meta::WitAi::Configuration::WitRuntimeConfiguration* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::set_RuntimeConfiguration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RuntimeConfiguration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_Configuration
::Meta::WitAi::Data::Configuration::WitConfiguration* Meta::WitAi::Dictation::WitDictation::get_Configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_Configuration");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::WitDictation*), 38));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Data::Configuration::WitConfiguration*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_VoiceEvents
::Meta::WitAi::Events::VoiceEvents* Meta::WitAi::Dictation::WitDictation::get_VoiceEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_VoiceEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::WitDictation*), 36));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Events::VoiceEvents*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.CreateWitRequest
::Meta::WitAi::WitRequest* Meta::WitAi::Dictation::WitDictation::CreateWitRequest(::Meta::WitAi::Data::Configuration::WitConfiguration* config, ::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents, ::ArrayW<::Meta::WitAi::Interfaces::IDynamicEntitiesProvider*> additionalEntityProviders) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::CreateWitRequest");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::WitDictation*), 37));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::WitRequest*, false>(this, ___internal__method, config, requestOptions, requestEvents, additionalEntityProviders);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.TranscribeFile
void Meta::WitAi::Dictation::WitDictation::TranscribeFile(::StringW fileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::TranscribeFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TranscribeFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fileName)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fileName);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_Active
bool Meta::WitAi::Dictation::WitDictation::get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_Active");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 20));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_IsRequestActive
bool Meta::WitAi::Dictation::WitDictation::get_IsRequestActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_IsRequestActive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 21));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_TranscriptionProvider
::Meta::WitAi::Interfaces::ITranscriptionProvider* Meta::WitAi::Dictation::WitDictation::get_TranscriptionProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_TranscriptionProvider");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 22));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Interfaces::ITranscriptionProvider*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.set_TranscriptionProvider
void Meta::WitAi::Dictation::WitDictation::set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::set_TranscriptionProvider");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 23));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_MicActive
bool Meta::WitAi::Dictation::WitDictation::get_MicActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_MicActive");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 24));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_ShouldSendMicData
bool Meta::WitAi::Dictation::WitDictation::get_ShouldSendMicData() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_ShouldSendMicData");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 27));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.get_DictationEvents
::Meta::WitAi::Dictation::Events::DictationEvents* Meta::WitAi::Dictation::WitDictation::get_DictationEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::get_DictationEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 25));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Dictation::Events::DictationEvents*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.set_DictationEvents
void Meta::WitAi::Dictation::WitDictation::set_DictationEvents(::Meta::WitAi::Dictation::Events::DictationEvents* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::set_DictationEvents");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 26));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.Activate
::Meta::WitAi::Requests::VoiceServiceRequest* Meta::WitAi::Dictation::WitDictation::Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::Activate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 28));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Requests::VoiceServiceRequest*, false>(this, ___internal__method, requestOptions, requestEvents);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.ActivateImmediately
::Meta::WitAi::Requests::VoiceServiceRequest* Meta::WitAi::Dictation::WitDictation::ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::ActivateImmediately");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 29));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Requests::VoiceServiceRequest*, false>(this, ___internal__method, requestOptions, requestEvents);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.Deactivate
void Meta::WitAi::Dictation::WitDictation::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::Deactivate");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 30));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.Cancel
void Meta::WitAi::Dictation::WitDictation::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::Cancel");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 31));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.Awake
void Meta::WitAi::Dictation::WitDictation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::Awake");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 32));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.OnEnable
void Meta::WitAi::Dictation::WitDictation::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::OnEnable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 33));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.WitDictation.OnDisable
void Meta::WitAi::Dictation::WitDictation::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::WitDictation::OnDisable");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Dictation::DictationService*), 34));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Dictation.Events.DictationEvents
#include "Meta/WitAi/Dictation/Events/DictationEvents.hpp"
// Including type: Meta.WitAi.Dictation.Events.DictationSessionEvent
#include "Meta/WitAi/Dictation/Events/DictationSessionEvent.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: Meta.WitAi.Events.WitMicLevelChangedEvent
#include "Meta/WitAi/Events/WitMicLevelChangedEvent.hpp"
// Including type: Meta.WitAi.Events.WitErrorEvent
#include "Meta/WitAi/Events/WitErrorEvent.hpp"
// Including type: Meta.WitAi.Events.WitResponseEvent
#include "Meta/WitAi/Events/WitResponseEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String EVENT_CATEGORY_DICTATION_EVENTS
::StringW Meta::WitAi::Dictation::Events::DictationEvents::_get_EVENT_CATEGORY_DICTATION_EVENTS() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::_get_EVENT_CATEGORY_DICTATION_EVENTS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>("Meta.WitAi.Dictation.Events", "DictationEvents", "EVENT_CATEGORY_DICTATION_EVENTS"));
}
// Autogenerated static field setter
// Set static field: static private System.String EVENT_CATEGORY_DICTATION_EVENTS
void Meta::WitAi::Dictation::Events::DictationEvents::_set_EVENT_CATEGORY_DICTATION_EVENTS(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::_set_EVENT_CATEGORY_DICTATION_EVENTS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Meta.WitAi.Dictation.Events", "DictationEvents", "EVENT_CATEGORY_DICTATION_EVENTS", value));
}
// Autogenerated instance field getter
// Get instance field: private Meta.WitAi.Dictation.Events.DictationSessionEvent _onDictationSessionStarted
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::Events::DictationSessionEvent*& Meta::WitAi::Dictation::Events::DictationEvents::dyn__onDictationSessionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::dyn__onDictationSessionStarted");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onDictationSessionStarted"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Dictation::Events::DictationSessionEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Meta.WitAi.Dictation.Events.DictationSessionEvent _onDictationSessionStopped
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::Events::DictationSessionEvent*& Meta::WitAi::Dictation::Events::DictationEvents::dyn__onDictationSessionStopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::dyn__onDictationSessionStopped");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_onDictationSessionStopped"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Dictation::Events::DictationSessionEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_OnDictationSessionStarted
::Meta::WitAi::Dictation::Events::DictationSessionEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_OnDictationSessionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_OnDictationSessionStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OnDictationSessionStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Dictation::Events::DictationSessionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_OnDictationSessionStopped
::Meta::WitAi::Dictation::Events::DictationSessionEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_OnDictationSessionStopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_OnDictationSessionStopped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OnDictationSessionStopped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Dictation::Events::DictationSessionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_onDictationSessionStarted
::Meta::WitAi::Dictation::Events::DictationSessionEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_onDictationSessionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_onDictationSessionStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onDictationSessionStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Dictation::Events::DictationSessionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_onDictationSessionStopped
::Meta::WitAi::Dictation::Events::DictationSessionEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_onDictationSessionStopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_onDictationSessionStopped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onDictationSessionStopped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Dictation::Events::DictationSessionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_onStart
::UnityEngine::Events::UnityEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_onStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_onStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Events::UnityEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_onStopped
::UnityEngine::Events::UnityEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_onStopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_onStopped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onStopped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Events::UnityEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_onMicAudioLevel
::Meta::WitAi::Events::WitMicLevelChangedEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_onMicAudioLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_onMicAudioLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onMicAudioLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Events::WitMicLevelChangedEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_onError
::Meta::WitAi::Events::WitErrorEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_onError() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_onError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Events::WitErrorEvent*, false>(this, ___internal__method);
}
// Autogenerated method: Meta.WitAi.Dictation.Events.DictationEvents.get_onResponse
::Meta::WitAi::Events::WitResponseEvent* Meta::WitAi::Dictation::Events::DictationEvents::get_onResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Events::DictationEvents::get_onResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Events::WitResponseEvent*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Dictation.Events.DictationSessionEvent
#include "Meta/WitAi/Dictation/Events/DictationSessionEvent.hpp"
// Including type: Meta.WitAi.Dictation.Data.DictationSession
#include "Meta/WitAi/Dictation/Data/DictationSession.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Meta.WitAi.Dictation.Data.DictationSession
#include "Meta/WitAi/Dictation/Data/DictationSession.hpp"
// Including type: Meta.WitAi.Dictation.IDictationService
#include "Meta/WitAi/Dictation/IDictationService.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Meta.WitAi.Dictation.IDictationService dictationService
[[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::IDictationService*& Meta::WitAi::Dictation::Data::DictationSession::dyn_dictationService() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Data::DictationSession::dyn_dictationService");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dictationService"))->offset;
  return *reinterpret_cast<::Meta::WitAi::Dictation::IDictationService**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] clientRequestId
[[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& Meta::WitAi::Dictation::Data::DictationSession::dyn_clientRequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Data::DictationSession::dyn_clientRequestId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clientRequestId"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String sessionId
[[deprecated("Use field access instead!")]] ::StringW& Meta::WitAi::Dictation::Data::DictationSession::dyn_sessionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Data::DictationSession::dyn_sessionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sessionId"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: UnitySourceGeneratedAssemblyMonoScriptTypes_v1
#include "GlobalNamespace/UnitySourceGeneratedAssemblyMonoScriptTypes_v1________.hpp"
// Including type: UnitySourceGeneratedAssemblyMonoScriptTypes_v1/MonoScriptData
#include "GlobalNamespace/UnitySourceGeneratedAssemblyMonoScriptTypes_v1_________MonoScriptData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnitySourceGeneratedAssemblyMonoScriptTypes_v1.Get
::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1________::MonoScriptData GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1________::Get() {
  static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1________::Get");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnitySourceGeneratedAssemblyMonoScriptTypes_v1", "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::UnitySourceGeneratedAssemblyMonoScriptTypes_v1________::MonoScriptData, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.FusionAddressablePrefabsPreloader
#include "Fusion/FusionAddressablePrefabsPreloader.hpp"
// Including type: Fusion.FusionAddressablePrefabsPreloader/<Start>d__1
#include "Fusion/FusionAddressablePrefabsPreloader_-Start-d__1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject>> _handles
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>>*& Fusion::FusionAddressablePrefabsPreloader::dyn__handles() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::dyn__handles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handles"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Fusion.FusionAddressablePrefabsPreloader.Start
::System::Threading::Tasks::Task* Fusion::FusionAddressablePrefabsPreloader::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.FusionAddressablePrefabsPreloader.OnDestroy
void Fusion::FusionAddressablePrefabsPreloader::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.FusionAddressablePrefabsPreloader/<Start>d__1
#include "Fusion/FusionAddressablePrefabsPreloader_-Start-d__1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: Fusion.INetworkPrefabSource
#include "Fusion/INetworkPrefabSource.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$1__state");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder& Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$t__builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$t__builder");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>t__builder"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::AsyncTaskMethodBuilder*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Fusion.FusionAddressablePrefabsPreloader <>4__this
[[deprecated("Use field access instead!")]] ::Fusion::FusionAddressablePrefabsPreloader*& Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$4__this");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Fusion::FusionAddressablePrefabsPreloader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<System.ValueTuple`2<Fusion.NetworkPrefabId,Fusion.INetworkPrefabSource>> <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<::Fusion::NetworkPrefabId, ::Fusion::INetworkPrefabSource*>>*& Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$7__wrap1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<::Fusion::NetworkPrefabId, ::Fusion::INetworkPrefabSource*>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject> <handle>5__3
[[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>& Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$handle$5__3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$handle$5__3");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<handle>5__3"))->offset;
  return *reinterpret_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Runtime.CompilerServices.TaskAwaiter`1<UnityEngine.GameObject> <>u__1
[[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::GameObject*>& Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$u__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::dyn_$$u__1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>u__1"))->offset;
  return *reinterpret_cast<::System::Runtime::CompilerServices::TaskAwaiter_1<::UnityEngine::GameObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Fusion.FusionAddressablePrefabsPreloader/<Start>d__1.MoveNext
void Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::MoveNext");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1), 4));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.FusionAddressablePrefabsPreloader/<Start>d__1.SetStateMachine
void Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::Fusion::FusionAddressablePrefabsPreloader::$Start$d__1), 5));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, stateMachine);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.NetworkPrefabSourceUnityAddressable
#include "Fusion/NetworkPrefabSourceUnityAddressable.hpp"
// Including type: Fusion.NetworkPrefabSourceUnityAddressable/<>c__DisplayClass3_0
#include "Fusion/NetworkPrefabSourceUnityAddressable_--c__DisplayClass3_0.hpp"
// Including type: UnityEngine.AddressableAssets.AssetReferenceGameObject
#include "UnityEngine/AddressableAssets/AssetReferenceGameObject.hpp"
// Including type: Fusion.NetworkPrefabLoadContext
#include "Fusion/NetworkPrefabLoadContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AddressableAssets.AssetReferenceGameObject Address
[[deprecated("Use field access instead!")]] ::UnityEngine::AddressableAssets::AssetReferenceGameObject*& Fusion::NetworkPrefabSourceUnityAddressable::dyn_Address() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabSourceUnityAddressable::dyn_Address");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Address"))->offset;
  return *reinterpret_cast<::UnityEngine::AddressableAssets::AssetReferenceGameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Fusion.NetworkPrefabSourceUnityAddressable.get_EditorSummary
::StringW Fusion::NetworkPrefabSourceUnityAddressable::get_EditorSummary() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabSourceUnityAddressable::get_EditorSummary");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::NetworkPrefabSourceUnityBase*), 7));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.NetworkPrefabSourceUnityAddressable.Load
void Fusion::NetworkPrefabSourceUnityAddressable::Load(ByRef<::Fusion::NetworkPrefabLoadContext> context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabSourceUnityAddressable::Load");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::NetworkPrefabSourceUnityBase*), 8));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(context));
}
// Autogenerated method: Fusion.NetworkPrefabSourceUnityAddressable.Unload
void Fusion::NetworkPrefabSourceUnityAddressable::Unload() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabSourceUnityAddressable::Unload");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::NetworkPrefabSourceUnityBase*), 9));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.NetworkPrefabSourceUnityAddressable/<>c__DisplayClass3_0
#include "Fusion/NetworkPrefabSourceUnityAddressable_--c__DisplayClass3_0.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1
#include "UnityEngine/ResourceManagement/AsyncOperations/AsyncOperationHandle_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Fusion.NetworkPrefabLoadContext c
[[deprecated("Use field access instead!")]] ::Fusion::NetworkPrefabLoadContext& Fusion::NetworkPrefabSourceUnityAddressable::$$c__DisplayClass3_0::dyn_c() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabSourceUnityAddressable::$$c__DisplayClass3_0::dyn_c");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "c"))->offset;
  return *reinterpret_cast<::Fusion::NetworkPrefabLoadContext*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Fusion.NetworkPrefabSourceUnityAddressable/<>c__DisplayClass3_0.<Load>b__0
void Fusion::NetworkPrefabSourceUnityAddressable::$$c__DisplayClass3_0::$Load$b__0(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*> _op) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::NetworkPrefabSourceUnityAddressable::$$c__DisplayClass3_0::<Load>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Load>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_op)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, _op);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Microsoft.CodeAnalysis.EmbeddedAttribute
#include "Microsoft/CodeAnalysis/EmbeddedAttribute_.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Runtime.CompilerServices.IsReadOnlyAttribute
#include "System/Runtime/CompilerServices/IsReadOnlyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: System.Runtime.CompilerServices.IsUnmanagedAttribute
#include "System/Runtime/CompilerServices/IsUnmanagedAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Collections.Unsafe.UnsafeBuffer
#include "Collections/Unsafe/UnsafeBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Void* Ptr
[[deprecated("Use field access instead!")]] void*& Collections::Unsafe::UnsafeBuffer::dyn_Ptr() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeBuffer::dyn_Ptr");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Ptr"))->offset;
  return *reinterpret_cast<void**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Length
[[deprecated("Use field access instead!")]] int& Collections::Unsafe::UnsafeBuffer::dyn_Length() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeBuffer::dyn_Length");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Length"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Stride
[[deprecated("Use field access instead!")]] int& Collections::Unsafe::UnsafeBuffer::dyn_Stride() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeBuffer::dyn_Stride");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Stride"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Dynamic
[[deprecated("Use field access instead!")]] int& Collections::Unsafe::UnsafeBuffer::dyn_Dynamic() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeBuffer::dyn_Dynamic");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Dynamic"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Collections.Unsafe.UnsafeBuffer.InitFixed
void Collections::Unsafe::UnsafeBuffer::InitFixed(::Collections::Unsafe::UnsafeBuffer* buffer, void* ptr, int length, int stride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeBuffer::InitFixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeBuffer", "InitFixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(ptr), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(stride)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, buffer, ptr, length, stride);
}
// Autogenerated method: Collections.Unsafe.UnsafeBuffer.Element
void* Collections::Unsafe::UnsafeBuffer::Element(void* bufferPtr, int index, int stride) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeBuffer::Element");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeBuffer", "Element", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufferPtr), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(stride)})));
  return ::il2cpp_utils::RunMethodRethrow<void*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bufferPtr, index, stride);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Collections.Unsafe.UnsafeRingBuffer
#include "Collections/Unsafe/UnsafeRingBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Collections.Unsafe.UnsafeBuffer _items
[[deprecated("Use field access instead!")]] ::Collections::Unsafe::UnsafeBuffer& Collections::Unsafe::UnsafeRingBuffer::dyn__items() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::dyn__items");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_items"))->offset;
  return *reinterpret_cast<::Collections::Unsafe::UnsafeBuffer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _head
[[deprecated("Use field access instead!")]] int& Collections::Unsafe::UnsafeRingBuffer::dyn__head() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::dyn__head");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_head"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _tail
[[deprecated("Use field access instead!")]] int& Collections::Unsafe::UnsafeRingBuffer::dyn__tail() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::dyn__tail");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tail"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _count
[[deprecated("Use field access instead!")]] int& Collections::Unsafe::UnsafeRingBuffer::dyn__count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::dyn__count");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _overwrite
[[deprecated("Use field access instead!")]] int& Collections::Unsafe::UnsafeRingBuffer::dyn__overwrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::dyn__overwrite");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_overwrite"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Collections.Unsafe.UnsafeRingBuffer.Allocate
::Collections::Unsafe::UnsafeRingBuffer* Collections::Unsafe::UnsafeRingBuffer::Allocate(int capacity, int stride, bool overwrite) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::Allocate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeRingBuffer", "Allocate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(stride), ::il2cpp_utils::ExtractType(overwrite)})));
  return ::il2cpp_utils::RunMethodRethrow<::Collections::Unsafe::UnsafeRingBuffer*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, capacity, stride, overwrite);
}
// Autogenerated method: Collections.Unsafe.UnsafeRingBuffer.Free
void Collections::Unsafe::UnsafeRingBuffer::Free(::Collections::Unsafe::UnsafeRingBuffer* ring) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::Free");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeRingBuffer", "Free", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ring)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ring);
}
// Autogenerated method: Collections.Unsafe.UnsafeRingBuffer.Capacity
int Collections::Unsafe::UnsafeRingBuffer::Capacity(::Collections::Unsafe::UnsafeRingBuffer* ring) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::Capacity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeRingBuffer", "Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ring)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ring);
}
// Autogenerated method: Collections.Unsafe.UnsafeRingBuffer.Count
int Collections::Unsafe::UnsafeRingBuffer::Count(::Collections::Unsafe::UnsafeRingBuffer* ring) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeRingBuffer", "Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ring)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ring);
}
// Autogenerated method: Collections.Unsafe.UnsafeRingBuffer.Clear
void Collections::Unsafe::UnsafeRingBuffer::Clear(::Collections::Unsafe::UnsafeRingBuffer* ring) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeRingBuffer", "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ring)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, ring);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.AssertException
#include "Fusion/AssertException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.Assert
#include "Fusion/_Assert.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Fusion.Assert.AlwaysFail
void Fusion::_Assert::AlwaysFail(::StringW error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::_Assert::AlwaysFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "Assert", "AlwaysFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, error);
}
// Autogenerated method: Fusion.Assert.Always
void Fusion::_Assert::Always(bool condition, ::StringW error) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::_Assert::Always");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "Assert", "Always", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(error)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, error);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.BinUtils
#include "Fusion/BinUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String[] _byteHexValue
::ArrayW<::StringW> Fusion::BinUtils::_get__byteHexValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::BinUtils::_get__byteHexValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<::StringW>>("Fusion", "BinUtils", "_byteHexValue"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String[] _byteHexValue
void Fusion::BinUtils::_set__byteHexValue(::ArrayW<::StringW> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::BinUtils::_set__byteHexValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "BinUtils", "_byteHexValue", value));
}
// Autogenerated method: Fusion.BinUtils.BytesToHex
::StringW Fusion::BinUtils::BytesToHex(uint8_t* buffer, int length, int columns, ::StringW rowSeparator, ::StringW columnSeparator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::BinUtils::BytesToHex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "BinUtils", "BytesToHex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(columns), ::il2cpp_utils::ExtractType(rowSeparator), ::il2cpp_utils::ExtractType(columnSeparator)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, buffer, length, columns, rowSeparator, columnSeparator);
}
// Autogenerated method: Fusion.BinUtils..cctor
void Fusion::BinUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::BinUtils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "BinUtils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.CompressionUtils
#include "Fusion/CompressionUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Fusion.CompressionUtils.Compress
::ArrayW<uint8_t> Fusion::CompressionUtils::Compress(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CompressionUtils::Compress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "CompressionUtils", "Compress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: Fusion.CompressionUtils.Decompress
::ArrayW<uint8_t> Fusion::CompressionUtils::Decompress(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CompressionUtils::Decompress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "CompressionUtils", "Decompress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data);
}
// Autogenerated method: Fusion.CompressionUtils.SnapshotCompress
void Fusion::CompressionUtils::SnapshotCompress(int* Current, int* Previous, int* Result, int totalLenght, ByRef<int> count) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CompressionUtils::SnapshotCompress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "CompressionUtils", "SnapshotCompress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Current), ::il2cpp_utils::ExtractType(Previous), ::il2cpp_utils::ExtractType(Result), ::il2cpp_utils::ExtractType(totalLenght), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, Current, Previous, Result, totalLenght, byref(count));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.CRC64
#include "Fusion/CRC64.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.UInt64[] _tab
::ArrayW<uint64_t> Fusion::CRC64::_get__tab() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CRC64::_get__tab");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<uint64_t>>("Fusion", "CRC64", "_tab"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.UInt64[] _tab
void Fusion::CRC64::_set__tab(::ArrayW<uint64_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CRC64::_set__tab");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "CRC64", "_tab", value));
}
// Autogenerated method: Fusion.CRC64.Compute
uint64_t Fusion::CRC64::Compute(uint8_t* data, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CRC64::Compute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "CRC64", "Compute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, data, length);
}
// Autogenerated method: Fusion.CRC64.Compute
uint64_t Fusion::CRC64::Compute(uint64_t crc, uint8_t* data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CRC64::Compute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "CRC64", "Compute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(crc), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, crc, data, offset, length);
}
// Autogenerated method: Fusion.CRC64..cctor
void Fusion::CRC64::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::CRC64::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "CRC64", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.EngineProfiler
#include "Fusion/EngineProfiler.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> InterpolationOffsetCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_InterpolationOffsetCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InterpolationOffsetCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "InterpolationOffsetCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> InterpolationOffsetCallback
void Fusion::EngineProfiler::_set_InterpolationOffsetCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InterpolationOffsetCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InterpolationOffsetCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> InterpolationTimeScaleCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_InterpolationTimeScaleCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InterpolationTimeScaleCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "InterpolationTimeScaleCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> InterpolationTimeScaleCallback
void Fusion::EngineProfiler::_set_InterpolationTimeScaleCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InterpolationTimeScaleCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InterpolationTimeScaleCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> InterpolationMultiplierCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_InterpolationMultiplierCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InterpolationMultiplierCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "InterpolationMultiplierCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> InterpolationMultiplierCallback
void Fusion::EngineProfiler::_set_InterpolationMultiplierCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InterpolationMultiplierCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InterpolationMultiplierCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> InterpolationUncertaintyCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_InterpolationUncertaintyCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InterpolationUncertaintyCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "InterpolationUncertaintyCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> InterpolationUncertaintyCallback
void Fusion::EngineProfiler::_set_InterpolationUncertaintyCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InterpolationUncertaintyCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InterpolationUncertaintyCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Int32> WorldSnapshotSizeCallback
::System::Action_1<int>* Fusion::EngineProfiler::_get_WorldSnapshotSizeCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_WorldSnapshotSizeCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<int>*>("Fusion", "EngineProfiler", "WorldSnapshotSizeCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Int32> WorldSnapshotSizeCallback
void Fusion::EngineProfiler::_set_WorldSnapshotSizeCallback(::System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_WorldSnapshotSizeCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "WorldSnapshotSizeCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Int32> InputSizeCallback
::System::Action_1<int>* Fusion::EngineProfiler::_get_InputSizeCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InputSizeCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<int>*>("Fusion", "EngineProfiler", "InputSizeCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Int32> InputSizeCallback
void Fusion::EngineProfiler::_set_InputSizeCallback(::System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InputSizeCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InputSizeCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Int32> InputQueueCallback
::System::Action_1<int>* Fusion::EngineProfiler::_get_InputQueueCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InputQueueCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<int>*>("Fusion", "EngineProfiler", "InputQueueCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Int32> InputQueueCallback
void Fusion::EngineProfiler::_set_InputQueueCallback(::System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InputQueueCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InputQueueCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Int32> RpcInCallback
::System::Action_1<int>* Fusion::EngineProfiler::_get_RpcInCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_RpcInCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<int>*>("Fusion", "EngineProfiler", "RpcInCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Int32> RpcInCallback
void Fusion::EngineProfiler::_set_RpcInCallback(::System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_RpcInCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "RpcInCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Int32> RpcOutCallback
::System::Action_1<int>* Fusion::EngineProfiler::_get_RpcOutCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_RpcOutCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<int>*>("Fusion", "EngineProfiler", "RpcOutCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Int32> RpcOutCallback
void Fusion::EngineProfiler::_set_RpcOutCallback(::System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_RpcOutCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "RpcOutCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> RoundTripTimeCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_RoundTripTimeCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_RoundTripTimeCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "RoundTripTimeCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> RoundTripTimeCallback
void Fusion::EngineProfiler::_set_RoundTripTimeCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_RoundTripTimeCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "RoundTripTimeCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> SimualtionTimeScaleCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_SimualtionTimeScaleCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_SimualtionTimeScaleCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "SimualtionTimeScaleCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> SimualtionTimeScaleCallback
void Fusion::EngineProfiler::_set_SimualtionTimeScaleCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_SimualtionTimeScaleCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "SimualtionTimeScaleCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> InputOffsetCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_InputOffsetCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InputOffsetCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "InputOffsetCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> InputOffsetCallback
void Fusion::EngineProfiler::_set_InputOffsetCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InputOffsetCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InputOffsetCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> InputOffsetDeviationCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_InputOffsetDeviationCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InputOffsetDeviationCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "InputOffsetDeviationCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> InputOffsetDeviationCallback
void Fusion::EngineProfiler::_set_InputOffsetDeviationCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InputOffsetDeviationCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InputOffsetDeviationCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> InputRecvDeltaCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_InputRecvDeltaCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InputRecvDeltaCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "InputRecvDeltaCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> InputRecvDeltaCallback
void Fusion::EngineProfiler::_set_InputRecvDeltaCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InputRecvDeltaCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InputRecvDeltaCallback", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<System.Single> InputRecvDeltaDeviationCallback
::System::Action_1<float>* Fusion::EngineProfiler::_get_InputRecvDeltaDeviationCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_get_InputRecvDeltaDeviationCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Action_1<float>*>("Fusion", "EngineProfiler", "InputRecvDeltaDeviationCallback"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<System.Single> InputRecvDeltaDeviationCallback
void Fusion::EngineProfiler::_set_InputRecvDeltaDeviationCallback(::System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::_set_InputRecvDeltaDeviationCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "EngineProfiler", "InputRecvDeltaDeviationCallback", value));
}
// Autogenerated method: Fusion.EngineProfiler.Begin
void Fusion::EngineProfiler::Begin(::StringW sample) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::Begin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "Begin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sample)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, sample);
}
// Autogenerated method: Fusion.EngineProfiler.End
void Fusion::EngineProfiler::End() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::End");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "End", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Fusion.EngineProfiler.InterpolationOffset
void Fusion::EngineProfiler::InterpolationOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InterpolationOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InterpolationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InterpolationMultiplier
void Fusion::EngineProfiler::InterpolationMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InterpolationMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InterpolationMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InterpolationTimeScale
void Fusion::EngineProfiler::InterpolationTimeScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InterpolationTimeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InterpolationTimeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InterpolationUncertainty
void Fusion::EngineProfiler::InterpolationUncertainty(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InterpolationUncertainty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InterpolationUncertainty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.WorldSnapshotSize
void Fusion::EngineProfiler::WorldSnapshotSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::WorldSnapshotSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "WorldSnapshotSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.RoundTripTime
void Fusion::EngineProfiler::RoundTripTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::RoundTripTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "RoundTripTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InputSize
void Fusion::EngineProfiler::InputSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InputSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InputSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InputQueue
void Fusion::EngineProfiler::InputQueue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InputQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InputQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.RpcIn
void Fusion::EngineProfiler::RpcIn(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::RpcIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "RpcIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.RpcOut
void Fusion::EngineProfiler::RpcOut(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::RpcOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "RpcOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.SimulationTimeScale
void Fusion::EngineProfiler::SimulationTimeScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::SimulationTimeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "SimulationTimeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InputOffset
void Fusion::EngineProfiler::InputOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InputOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InputOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InputOffsetDeviation
void Fusion::EngineProfiler::InputOffsetDeviation(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InputOffsetDeviation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InputOffsetDeviation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InputRecvDelta
void Fusion::EngineProfiler::InputRecvDelta(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InputRecvDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InputRecvDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Fusion.EngineProfiler.InputRecvDeltaDeviation
void Fusion::EngineProfiler::InputRecvDeltaDeviation(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::EngineProfiler::InputRecvDeltaDeviation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "EngineProfiler", "InputRecvDeltaDeviation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Fusion.LogOptions
#include "Fusion/LogOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Fusion.ILogBuilder.BuildLogMessage
void Fusion::ILogBuilder::BuildLogMessage(::System::Text::StringBuilder* builder, ::StringW message, ByRef<::Fusion::LogOptions> options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::ILogBuilder::BuildLogMessage");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::ILogBuilder*), -1));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, builder, message, byref(options));
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Fusion.LogOptions
#include "Fusion/LogOptions.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean UseColorTags
[[deprecated("Use field access instead!")]] bool& Fusion::LogOptions::dyn_UseColorTags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogOptions::dyn_UseColorTags");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UseColorTags"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Func`2<System.Object,System.Int32> _getColor
[[deprecated("Use field access instead!")]] ::System::Func_2<::Il2CppObject*, int>*& Fusion::LogOptions::dyn__getColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogOptions::dyn__getColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_getColor"))->offset;
  return *reinterpret_cast<::System::Func_2<::Il2CppObject*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Fusion.LogOptions.GetColor
int Fusion::LogOptions::GetColor(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogOptions::GetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated method: Fusion.LogOptions..ctor
// ABORTED elsewhere.  Fusion::LogOptions::LogOptions(bool useColorTags, ::System::Func_2<::Il2CppObject*, int>* getColor)
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.LogType
#include "Fusion/LogType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Fusion.LogType Error
::Fusion::LogType Fusion::LogType::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::LogType>("Fusion", "LogType", "Error"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.LogType Error
void Fusion::LogType::_set_Error(::Fusion::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "LogType", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.LogType Warn
::Fusion::LogType Fusion::LogType::_get_Warn() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_get_Warn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::LogType>("Fusion", "LogType", "Warn"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.LogType Warn
void Fusion::LogType::_set_Warn(::Fusion::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_set_Warn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "LogType", "Warn", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.LogType Info
::Fusion::LogType Fusion::LogType::_get_Info() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_get_Info");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::LogType>("Fusion", "LogType", "Info"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.LogType Info
void Fusion::LogType::_set_Info(::Fusion::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_set_Info");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "LogType", "Info", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.LogType Debug
::Fusion::LogType Fusion::LogType::_get_Debug() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_get_Debug");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::LogType>("Fusion", "LogType", "Debug"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.LogType Debug
void Fusion::LogType::_set_Debug(::Fusion::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_set_Debug");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "LogType", "Debug", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.LogType Trace
::Fusion::LogType Fusion::LogType::_get_Trace() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_get_Trace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::LogType>("Fusion", "LogType", "Trace"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.LogType Trace
void Fusion::LogType::_set_Trace(::Fusion::LogType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::_set_Trace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "LogType", "Trace", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
[[deprecated("Use field access instead!")]] uint8_t& Fusion::LogType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::LogType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.ILogger
#include "Fusion/ILogger.hpp"
// Including type: Fusion.ILogBuilder
#include "Fusion/ILogBuilder.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.FusionGraphVisualization
#include "Fusion/FusionGraphVisualization.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Fusion.FusionGraphVisualization Auto
::Fusion::FusionGraphVisualization Fusion::FusionGraphVisualization::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::FusionGraphVisualization>("Fusion", "FusionGraphVisualization", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.FusionGraphVisualization Auto
void Fusion::FusionGraphVisualization::_set_Auto(::Fusion::FusionGraphVisualization value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "FusionGraphVisualization", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.FusionGraphVisualization ContinuousTick
::Fusion::FusionGraphVisualization Fusion::FusionGraphVisualization::_get_ContinuousTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_get_ContinuousTick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::FusionGraphVisualization>("Fusion", "FusionGraphVisualization", "ContinuousTick"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.FusionGraphVisualization ContinuousTick
void Fusion::FusionGraphVisualization::_set_ContinuousTick(::Fusion::FusionGraphVisualization value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_set_ContinuousTick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "FusionGraphVisualization", "ContinuousTick", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.FusionGraphVisualization IntermittentTick
::Fusion::FusionGraphVisualization Fusion::FusionGraphVisualization::_get_IntermittentTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_get_IntermittentTick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::FusionGraphVisualization>("Fusion", "FusionGraphVisualization", "IntermittentTick"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.FusionGraphVisualization IntermittentTick
void Fusion::FusionGraphVisualization::_set_IntermittentTick(::Fusion::FusionGraphVisualization value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_set_IntermittentTick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "FusionGraphVisualization", "IntermittentTick", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.FusionGraphVisualization IntermittentTime
::Fusion::FusionGraphVisualization Fusion::FusionGraphVisualization::_get_IntermittentTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_get_IntermittentTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::FusionGraphVisualization>("Fusion", "FusionGraphVisualization", "IntermittentTime"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.FusionGraphVisualization IntermittentTime
void Fusion::FusionGraphVisualization::_set_IntermittentTime(::Fusion::FusionGraphVisualization value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_set_IntermittentTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "FusionGraphVisualization", "IntermittentTime", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.FusionGraphVisualization ValueHistogram
::Fusion::FusionGraphVisualization Fusion::FusionGraphVisualization::_get_ValueHistogram() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_get_ValueHistogram");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::FusionGraphVisualization>("Fusion", "FusionGraphVisualization", "ValueHistogram"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.FusionGraphVisualization ValueHistogram
void Fusion::FusionGraphVisualization::_set_ValueHistogram(::Fusion::FusionGraphVisualization value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_set_ValueHistogram");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "FusionGraphVisualization", "ValueHistogram", value));
}
// Autogenerated static field getter
// Get static field: static public Fusion.FusionGraphVisualization CountHistogram
::Fusion::FusionGraphVisualization Fusion::FusionGraphVisualization::_get_CountHistogram() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_get_CountHistogram");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Fusion::FusionGraphVisualization>("Fusion", "FusionGraphVisualization", "CountHistogram"));
}
// Autogenerated static field setter
// Set static field: static public Fusion.FusionGraphVisualization CountHistogram
void Fusion::FusionGraphVisualization::_set_CountHistogram(::Fusion::FusionGraphVisualization value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::_set_CountHistogram");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "FusionGraphVisualization", "CountHistogram", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Fusion::FusionGraphVisualization::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::FusionGraphVisualization::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.ISampleData
#include "Fusion/ISampleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Fusion.ISampleData.get_TickValue
int Fusion::ISampleData::get_TickValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::ISampleData::get_TickValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::ISampleData*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.ISampleData.get_TimeValue
float Fusion::ISampleData::get_TimeValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::ISampleData::get_TimeValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::ISampleData*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.ISampleData.get_FloatValue
float Fusion::ISampleData::get_FloatValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::ISampleData::get_FloatValue");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::ISampleData*), -1));
  return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.IStatsBuffer
#include "Fusion/IStatsBuffer.hpp"
// Including type: Fusion.FusionGraphVisualization
#include "Fusion/FusionGraphVisualization.hpp"
// Including type: Fusion.ISampleData
#include "Fusion/ISampleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Fusion.IStatsBuffer.get_Count
int Fusion::IStatsBuffer::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::IStatsBuffer::get_Count");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::IStatsBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.IStatsBuffer.get_Capacity
int Fusion::IStatsBuffer::get_Capacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::IStatsBuffer::get_Capacity");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::IStatsBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.IStatsBuffer.get_DefaultVisualization
::Fusion::FusionGraphVisualization Fusion::IStatsBuffer::get_DefaultVisualization() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::IStatsBuffer::get_DefaultVisualization");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::IStatsBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Fusion::FusionGraphVisualization, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.IStatsBuffer.get_VisualizationFlags
::Fusion::FusionGraphVisualization Fusion::IStatsBuffer::get_VisualizationFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::IStatsBuffer::get_VisualizationFlags");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::IStatsBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Fusion::FusionGraphVisualization, false>(this, ___internal__method);
}
// Autogenerated method: Fusion.IStatsBuffer.GetSampleAtIndex
::Fusion::ISampleData* Fusion::IStatsBuffer::GetSampleAtIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::IStatsBuffer::GetSampleAtIndex");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Fusion::IStatsBuffer*), -1));
  return ::il2cpp_utils::RunMethodRethrow<::Fusion::ISampleData*, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
// Begin includes
// Including type: Fusion.JsonUtils
#include "Fusion/JsonUtils.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Text.RegularExpressions.Regex ReferencesRegex
::System::Text::RegularExpressions::Regex* Fusion::JsonUtils::_get_ReferencesRegex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::JsonUtils::_get_ReferencesRegex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Text::RegularExpressions::Regex*>("Fusion", "JsonUtils", "ReferencesRegex"));
}
// Autogenerated static field setter
// Set static field: static private System.Text.RegularExpressions.Regex ReferencesRegex
void Fusion::JsonUtils::_set_ReferencesRegex(::System::Text::RegularExpressions::Regex* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::JsonUtils::_set_ReferencesRegex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Fusion", "JsonUtils", "ReferencesRegex", value));
}
// Autogenerated method: Fusion.JsonUtils.RemoveExtraReferences
::StringW Fusion::JsonUtils::RemoveExtraReferences(::StringW baseJson) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::JsonUtils::RemoveExtraReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "JsonUtils", "RemoveExtraReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseJson)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, baseJson);
}
// Autogenerated method: Fusion.JsonUtils..cctor
void Fusion::JsonUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Fusion::JsonUtils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Fusion", "JsonUtils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
