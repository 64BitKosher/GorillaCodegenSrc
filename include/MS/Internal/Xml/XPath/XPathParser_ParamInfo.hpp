// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MS.Internal.Xml.XPath.XPathParser
#include "MS/Internal/Xml/XPath/XPathParser.hpp"
// Including type: MS.Internal.Xml.XPath.Function/FunctionType
#include "MS/Internal/Xml/XPath/Function.hpp"
// Including type: System.Xml.XPath.XPathResultType
#include "System/Xml/XPath/XPathResultType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MS::Internal::Xml::XPath::XPathParser::ParamInfo);
DEFINE_IL2CPP_ARG_TYPE(::MS::Internal::Xml::XPath::XPathParser::ParamInfo*, "MS.Internal.Xml.XPath", "XPathParser/ParamInfo");
// Type namespace: MS.Internal.Xml.XPath
namespace MS::Internal::Xml::XPath {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MS.Internal.Xml.XPath.XPathParser/ParamInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class XPathParser::ParamInfo : public ::Il2CppObject {
    public:
    public:
    // private MS.Internal.Xml.XPath.Function/FunctionType _ftype
    // Size: 0x4
    // Offset: 0x10
    ::MS::Internal::Xml::XPath::Function::FunctionType ftype;
    // Field size check
    static_assert(sizeof(::MS::Internal::Xml::XPath::Function::FunctionType) == 0x4);
    // private System.Int32 _minargs
    // Size: 0x4
    // Offset: 0x14
    int minargs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxargs
    // Size: 0x4
    // Offset: 0x18
    int maxargs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxargs and: argTypes
    char __padding2[0x4] = {};
    // private System.Xml.XPath.XPathResultType[] _argTypes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::System::Xml::XPath::XPathResultType> argTypes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XPath::XPathResultType>) == 0x8);
    public:
    // Get instance field reference: private MS.Internal.Xml.XPath.Function/FunctionType _ftype
    [[deprecated("Use field access instead!")]] ::MS::Internal::Xml::XPath::Function::FunctionType& dyn__ftype();
    // Get instance field reference: private System.Int32 _minargs
    [[deprecated("Use field access instead!")]] int& dyn__minargs();
    // Get instance field reference: private System.Int32 _maxargs
    [[deprecated("Use field access instead!")]] int& dyn__maxargs();
    // Get instance field reference: private System.Xml.XPath.XPathResultType[] _argTypes
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XPath::XPathResultType>& dyn__argTypes();
    // public MS.Internal.Xml.XPath.Function/FunctionType get_FType()
    // Offset: 0x4DE13E4
    ::MS::Internal::Xml::XPath::Function::FunctionType get_FType();
    // public System.Int32 get_Minargs()
    // Offset: 0x4DE13EC
    int get_Minargs();
    // public System.Int32 get_Maxargs()
    // Offset: 0x4DE13F4
    int get_Maxargs();
    // public System.Xml.XPath.XPathResultType[] get_ArgTypes()
    // Offset: 0x4DE13FC
    ::ArrayW<::System::Xml::XPath::XPathResultType> get_ArgTypes();
    // System.Void .ctor(MS.Internal.Xml.XPath.Function/FunctionType ftype, System.Int32 minargs, System.Int32 maxargs, System.Xml.XPath.XPathResultType[] argTypes)
    // Offset: 0x4DE0E34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XPathParser::ParamInfo* New_ctor(::MS::Internal::Xml::XPath::Function::FunctionType ftype, int minargs, int maxargs, ::ArrayW<::System::Xml::XPath::XPathResultType> argTypes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MS::Internal::Xml::XPath::XPathParser::ParamInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XPathParser::ParamInfo*, creationType>(ftype, minargs, maxargs, argTypes)));
    }
  }; // MS.Internal.Xml.XPath.XPathParser/ParamInfo
  #pragma pack(pop)
  static check_size<sizeof(XPathParser::ParamInfo), 32 + sizeof(::ArrayW<::System::Xml::XPath::XPathResultType>)> __MS_Internal_Xml_XPath_XPathParser_ParamInfoSizeCheck;
  static_assert(sizeof(XPathParser::ParamInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MS::Internal::Xml::XPath::XPathParser::ParamInfo::get_FType
// Il2CppName: get_FType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MS::Internal::Xml::XPath::Function::FunctionType (MS::Internal::Xml::XPath::XPathParser::ParamInfo::*)()>(&MS::Internal::Xml::XPath::XPathParser::ParamInfo::get_FType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MS::Internal::Xml::XPath::XPathParser::ParamInfo*), "get_FType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MS::Internal::Xml::XPath::XPathParser::ParamInfo::get_Minargs
// Il2CppName: get_Minargs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MS::Internal::Xml::XPath::XPathParser::ParamInfo::*)()>(&MS::Internal::Xml::XPath::XPathParser::ParamInfo::get_Minargs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MS::Internal::Xml::XPath::XPathParser::ParamInfo*), "get_Minargs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MS::Internal::Xml::XPath::XPathParser::ParamInfo::get_Maxargs
// Il2CppName: get_Maxargs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MS::Internal::Xml::XPath::XPathParser::ParamInfo::*)()>(&MS::Internal::Xml::XPath::XPathParser::ParamInfo::get_Maxargs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MS::Internal::Xml::XPath::XPathParser::ParamInfo*), "get_Maxargs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MS::Internal::Xml::XPath::XPathParser::ParamInfo::get_ArgTypes
// Il2CppName: get_ArgTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Xml::XPath::XPathResultType> (MS::Internal::Xml::XPath::XPathParser::ParamInfo::*)()>(&MS::Internal::Xml::XPath::XPathParser::ParamInfo::get_ArgTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MS::Internal::Xml::XPath::XPathParser::ParamInfo*), "get_ArgTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MS::Internal::Xml::XPath::XPathParser::ParamInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
