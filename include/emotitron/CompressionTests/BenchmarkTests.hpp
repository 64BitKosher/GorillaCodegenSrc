// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: emotitron.CompressionTests
namespace emotitron::CompressionTests {
  // Forward declaring type: BenchmarkTests
  class BenchmarkTests;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::emotitron::CompressionTests::BenchmarkTests);
DEFINE_IL2CPP_ARG_TYPE(::emotitron::CompressionTests::BenchmarkTests*, "emotitron.CompressionTests", "BenchmarkTests");
// Type namespace: emotitron.CompressionTests
namespace emotitron::CompressionTests {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.CompressionTests.BenchmarkTests
  // [TokenAttribute] Offset: FFFFFFFF
  class BenchmarkTests : public ::UnityEngine::MonoBehaviour {
    public:
    // static field const value: static public System.Int32 BYTE_CNT
    static constexpr const int BYTE_CNT = 128;
    // Get static field: static public System.Int32 BYTE_CNT
    static int _get_BYTE_CNT();
    // Set static field: static public System.Int32 BYTE_CNT
    static void _set_BYTE_CNT(int value);
    // static field const value: static public System.Int32 LOOP
    static constexpr const int LOOP = 1000000;
    // Get static field: static public System.Int32 LOOP
    static int _get_LOOP();
    // Set static field: static public System.Int32 LOOP
    static void _set_LOOP(int value);
    // Get static field: static public System.Byte[] buffer
    static ::ArrayW<uint8_t> _get_buffer();
    // Set static field: static public System.Byte[] buffer
    static void _set_buffer(::ArrayW<uint8_t> value);
    // Get static field: static public System.UInt32[] ibuffer
    static ::ArrayW<uint> _get_ibuffer();
    // Set static field: static public System.UInt32[] ibuffer
    static void _set_ibuffer(::ArrayW<uint> value);
    // Get static field: static public System.UInt64[] ubuffer
    static ::ArrayW<uint64_t> _get_ubuffer();
    // Set static field: static public System.UInt64[] ubuffer
    static void _set_ubuffer(::ArrayW<uint64_t> value);
    // Get static field: static public System.UInt64[] ubuffer2
    static ::ArrayW<uint64_t> _get_ubuffer2();
    // Set static field: static public System.UInt64[] ubuffer2
    static void _set_ubuffer2(::ArrayW<uint64_t> value);
    // private System.Void Start()
    // Offset: 0x28CC16C
    void Start();
    // static public System.Void TestWriterIntegrity()
    // Offset: 0x28CC1C0
    static void TestWriterIntegrity();
    // static private System.Void TestLog2()
    // Offset: 0x28CCFA8
    static void TestLog2();
    // static private System.Void ArrayCopy()
    // Offset: 0x28CCCB8
    static void ArrayCopy();
    // static private System.Void ArrayCopySafe()
    // Offset: 0x28CCE30
    static void ArrayCopySafe();
    // static public System.Void ByteForByteWrite()
    // Offset: 0x28CD128
    static void ByteForByteWrite();
    // static public System.Void BitpackBytesEven()
    // Offset: 0x28CD470
    static void BitpackBytesEven();
    // static public System.Void BitpackBytesToULongUneven()
    // Offset: 0x28CD63C
    static void BitpackBytesToULongUneven();
    // static public System.Void BitpackBytesUnEven()
    // Offset: 0x28CD864
    static void BitpackBytesUnEven();
    // public System.Void .ctor()
    // Offset: 0x28CDA8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BenchmarkTests* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::emotitron::CompressionTests::BenchmarkTests::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BenchmarkTests*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28CDA94
    static void _cctor();
  }; // emotitron.CompressionTests.BenchmarkTests
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (emotitron::CompressionTests::BenchmarkTests::*)()>(&emotitron::CompressionTests::BenchmarkTests::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::TestWriterIntegrity
// Il2CppName: TestWriterIntegrity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::TestWriterIntegrity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "TestWriterIntegrity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::TestLog2
// Il2CppName: TestLog2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::TestLog2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "TestLog2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::ArrayCopy
// Il2CppName: ArrayCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::ArrayCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "ArrayCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::ArrayCopySafe
// Il2CppName: ArrayCopySafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::ArrayCopySafe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "ArrayCopySafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::ByteForByteWrite
// Il2CppName: ByteForByteWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::ByteForByteWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "ByteForByteWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::BitpackBytesEven
// Il2CppName: BitpackBytesEven
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::BitpackBytesEven)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "BitpackBytesEven", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::BitpackBytesToULongUneven
// Il2CppName: BitpackBytesToULongUneven
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::BitpackBytesToULongUneven)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "BitpackBytesToULongUneven", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::BitpackBytesUnEven
// Il2CppName: BitpackBytesUnEven
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::BitpackBytesUnEven)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), "BitpackBytesUnEven", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: emotitron::CompressionTests::BenchmarkTests::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::CompressionTests::BenchmarkTests::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::CompressionTests::BenchmarkTests*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
