// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: emotitron.Compression.LiteCrusher
#include "emotitron/Compression/LiteCrusher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueType
  class ValueType;
}
// Completed forward declares
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: LiteCrusher`1<T>
  template<typename T>
  class LiteCrusher_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::emotitron::Compression::LiteCrusher_1, "emotitron.Compression", "LiteCrusher`1");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // WARNING Size may be invalid!
  // Autogenerated type: emotitron.Compression.LiteCrusher`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class LiteCrusher_1 : public ::emotitron::Compression::LiteCrusher {
    public:
    // public System.UInt64 Encode(T val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint64_t Encode(T val) {
      static auto ___internal__logger = ::Logger::get().WithContext("::emotitron::Compression::LiteCrusher_1::Encode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::emotitron::Compression::LiteCrusher_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, val);
    }
    // public T Decode(System.UInt32 val)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Decode(uint val) {
      static auto ___internal__logger = ::Logger::get().WithContext("::emotitron::Compression::LiteCrusher_1::Decode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::emotitron::Compression::LiteCrusher_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, val);
    }
    // public System.UInt64 WriteValue(T val, System.Byte[] buffer, ref System.Int32 bitposition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint64_t WriteValue(T val, ::ArrayW<uint8_t> buffer, ByRef<int> bitposition) {
      static auto ___internal__logger = ::Logger::get().WithContext("::emotitron::Compression::LiteCrusher_1::WriteValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::emotitron::Compression::LiteCrusher_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method, val, buffer, byref(bitposition));
    }
    // public System.Void WriteCValue(System.UInt32 val, System.Byte[] buffer, ref System.Int32 bitposition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void WriteCValue(uint val, ::ArrayW<uint8_t> buffer, ByRef<int> bitposition) {
      static auto ___internal__logger = ::Logger::get().WithContext("::emotitron::Compression::LiteCrusher_1::WriteCValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::emotitron::Compression::LiteCrusher_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, val, buffer, byref(bitposition));
    }
    // public T ReadValue(System.Byte[] buffer, ref System.Int32 bitposition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T ReadValue(::ArrayW<uint8_t> buffer, ByRef<int> bitposition) {
      static auto ___internal__logger = ::Logger::get().WithContext("::emotitron::Compression::LiteCrusher_1::ReadValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::emotitron::Compression::LiteCrusher_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, buffer, byref(bitposition));
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: emotitron.Compression.LiteCrusher
    // Base method: System.Void LiteCrusher::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LiteCrusher_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::emotitron::Compression::LiteCrusher_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LiteCrusher_1<T>*, creationType>()));
    }
  }; // emotitron.Compression.LiteCrusher`1
  // Could not write size check! Type: emotitron.Compression.LiteCrusher`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
