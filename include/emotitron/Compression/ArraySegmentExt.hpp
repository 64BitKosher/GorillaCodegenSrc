// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
}
// Completed forward declares
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: ArraySegmentExt
  class ArraySegmentExt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::emotitron::Compression::ArraySegmentExt);
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::ArraySegmentExt*, "emotitron.Compression", "ArraySegmentExt");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.Compression.ArraySegmentExt
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ArraySegmentExt : public ::Il2CppObject {
    public:
    // static public System.ArraySegment`1<System.Byte> ExtractArraySegment(System.Byte[] buffer, ref System.Int32 bitposition)
    // Offset: 0x28C4B18
    static ::System::ArraySegment_1<uint8_t> ExtractArraySegment(::ArrayW<uint8_t> buffer, ByRef<int> bitposition);
    // static public System.ArraySegment`1<System.UInt16> ExtractArraySegment(System.UInt16[] buffer, ref System.Int32 bitposition)
    // Offset: 0x28C4B94
    static ::System::ArraySegment_1<uint16_t> ExtractArraySegment(::ArrayW<uint16_t> buffer, ByRef<int> bitposition);
    // static public System.ArraySegment`1<System.UInt32> ExtractArraySegment(System.UInt32[] buffer, ref System.Int32 bitposition)
    // Offset: 0x28C4C10
    static ::System::ArraySegment_1<uint> ExtractArraySegment(::ArrayW<uint> buffer, ByRef<int> bitposition);
    // static public System.ArraySegment`1<System.UInt64> ExtractArraySegment(System.UInt64[] buffer, ref System.Int32 bitposition)
    // Offset: 0x28C4C8C
    static ::System::ArraySegment_1<uint64_t> ExtractArraySegment(::ArrayW<uint64_t> buffer, ByRef<int> bitposition);
    // static public System.Void Append(System.ArraySegment`1<System.Byte> buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4D08
    static void Append(::System::ArraySegment_1<uint8_t> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void Append(System.ArraySegment`1<System.UInt32> buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4E38
    static void Append(::System::ArraySegment_1<uint> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void Append(System.ArraySegment`1<System.UInt64> buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4F64
    static void Append(::System::ArraySegment_1<uint64_t> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void Write(System.ArraySegment`1<System.Byte> buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C5078
    static void Write(::System::ArraySegment_1<uint8_t> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void Write(System.ArraySegment`1<System.UInt32> buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C5108
    static void Write(::System::ArraySegment_1<uint> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void Write(System.ArraySegment`1<System.UInt64> buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C5198
    static void Write(::System::ArraySegment_1<uint64_t> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt64 Read(System.ArraySegment`1<System.Byte> buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C5228
    static uint64_t Read(::System::ArraySegment_1<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 Read(System.ArraySegment`1<System.UInt32> buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C52A8
    static uint64_t Read(::System::ArraySegment_1<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 Read(System.ArraySegment`1<System.UInt64> buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C5328
    static uint64_t Read(::System::ArraySegment_1<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void ReadOutSafe(System.ArraySegment`1<System.Byte> source, System.Int32 srcStartPos, System.Byte[] target, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C53A8
    static void ReadOutSafe(::System::ArraySegment_1<uint8_t> source, int srcStartPos, ::ArrayW<uint8_t> target, ByRef<int> bitposition, int bits);
    // static public System.Void ReadOutSafe(System.ArraySegment`1<System.Byte> source, System.Int32 srcStartPos, System.UInt64[] target, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C54A4
    static void ReadOutSafe(::System::ArraySegment_1<uint8_t> source, int srcStartPos, ::ArrayW<uint64_t> target, ByRef<int> bitposition, int bits);
    // static public System.Void ReadOutSafe(System.ArraySegment`1<System.UInt64> source, System.Int32 srcStartPos, System.Byte[] target, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C55A0
    static void ReadOutSafe(::System::ArraySegment_1<uint64_t> source, int srcStartPos, ::ArrayW<uint8_t> target, ByRef<int> bitposition, int bits);
    // static public System.Void ReadOutSafe(System.ArraySegment`1<System.UInt64> source, System.Int32 srcStartPos, System.UInt64[] target, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C56B4
    static void ReadOutSafe(::System::ArraySegment_1<uint64_t> source, int srcStartPos, ::ArrayW<uint64_t> target, ByRef<int> bitposition, int bits);
  }; // emotitron.Compression.ArraySegmentExt
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::ExtractArraySegment
// Il2CppName: ExtractArraySegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<uint8_t> (*)(::ArrayW<uint8_t>, ByRef<int>)>(&emotitron::Compression::ArraySegmentExt::ExtractArraySegment)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "ExtractArraySegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::ExtractArraySegment
// Il2CppName: ExtractArraySegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<uint16_t> (*)(::ArrayW<uint16_t>, ByRef<int>)>(&emotitron::Compression::ArraySegmentExt::ExtractArraySegment)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt16"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "ExtractArraySegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::ExtractArraySegment
// Il2CppName: ExtractArraySegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<uint> (*)(::ArrayW<uint>, ByRef<int>)>(&emotitron::Compression::ArraySegmentExt::ExtractArraySegment)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "ExtractArraySegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::ExtractArraySegment
// Il2CppName: ExtractArraySegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<uint64_t> (*)(::ArrayW<uint64_t>, ByRef<int>)>(&emotitron::Compression::ArraySegmentExt::ExtractArraySegment)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "ExtractArraySegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint8_t>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Append)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Append)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint64_t>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Append)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint8_t>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint64_t>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::ArraySegment_1<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::ArraySegment_1<uint>, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32")})->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::ArraySegment_1<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::ReadOutSafe
// Il2CppName: ReadOutSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint8_t>, int, ::ArrayW<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::ReadOutSafe)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* srcStartPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "ReadOutSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, srcStartPos, target, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::ReadOutSafe
// Il2CppName: ReadOutSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint8_t>, int, ::ArrayW<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::ReadOutSafe)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* srcStartPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "ReadOutSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, srcStartPos, target, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::ReadOutSafe
// Il2CppName: ReadOutSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint64_t>, int, ::ArrayW<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::ReadOutSafe)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    static auto* srcStartPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "ReadOutSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, srcStartPos, target, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySegmentExt::ReadOutSafe
// Il2CppName: ReadOutSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::ArraySegment_1<uint64_t>, int, ::ArrayW<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySegmentExt::ReadOutSafe)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    static auto* srcStartPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySegmentExt*), "ReadOutSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, srcStartPos, target, bitposition, bits});
  }
};
