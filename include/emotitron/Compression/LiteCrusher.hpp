// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: LiteCrusher
  class LiteCrusher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::emotitron::Compression::LiteCrusher);
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::LiteCrusher*, "emotitron.Compression", "LiteCrusher");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.Compression.LiteCrusher
  // [TokenAttribute] Offset: FFFFFFFF
  class LiteCrusher : public ::Il2CppObject {
    public:
    public:
    // protected System.Int32 bits
    // Size: 0x4
    // Offset: 0x10
    int bits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return bits;
    }
    // Get instance field reference: protected System.Int32 bits
    [[deprecated("Use field access instead!")]] int& dyn_bits();
    // static public System.Int32 GetBitsForMaxValue(System.UInt32 maxvalue)
    // Offset: 0x28C920C
    static int GetBitsForMaxValue(uint maxvalue);
    // protected System.Void .ctor()
    // Offset: 0x28C922C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LiteCrusher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::emotitron::Compression::LiteCrusher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LiteCrusher*, creationType>()));
    }
  }; // emotitron.Compression.LiteCrusher
  #pragma pack(pop)
  static check_size<sizeof(LiteCrusher), 16 + sizeof(int)> __emotitron_Compression_LiteCrusherSizeCheck;
  static_assert(sizeof(LiteCrusher) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::LiteCrusher::GetBitsForMaxValue
// Il2CppName: GetBitsForMaxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&emotitron::Compression::LiteCrusher::GetBitsForMaxValue)> {
  static const MethodInfo* get() {
    static auto* maxvalue = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::LiteCrusher*), "GetBitsForMaxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxvalue});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::LiteCrusher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
