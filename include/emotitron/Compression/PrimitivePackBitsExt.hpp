// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: PrimitivePackBitsExt
  class PrimitivePackBitsExt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::emotitron::Compression::PrimitivePackBitsExt);
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::PrimitivePackBitsExt*, "emotitron.Compression", "PrimitivePackBitsExt");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.Compression.PrimitivePackBitsExt
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class PrimitivePackBitsExt : public ::Il2CppObject {
    public:
    // static public System.UInt64 WritePackedBits(System.UInt64 buffer, System.UInt32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C704C
    static uint64_t WritePackedBits(uint64_t buffer, uint value, ByRef<int> bitposition, int bits);
    // static public System.UInt32 WritePackedBits(System.UInt32 buffer, System.UInt16 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7154
    static uint WritePackedBits(uint buffer, uint16_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt16 WritePackedBits(System.UInt16 buffer, System.Byte value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7258
    static uint16_t WritePackedBits(uint16_t buffer, uint8_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt64 ReadPackedBits(System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C736C
    static uint64_t ReadPackedBits(uint64_t buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 ReadPackedBits(System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C742C
    static uint64_t ReadPackedBits(uint buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 ReadPackedBits(System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C74EC
    static uint64_t ReadPackedBits(uint16_t buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 WriteSignedPackedBits(System.UInt64 buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C75BC
    static uint64_t WriteSignedPackedBits(uint64_t buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.UInt32 WriteSignedPackedBits(System.UInt32 buffer, System.Int16 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C75C8
    static uint WriteSignedPackedBits(uint buffer, int16_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt16 WriteSignedPackedBits(System.UInt16 buffer, System.SByte value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C75D8
    static uint16_t WriteSignedPackedBits(uint16_t buffer, int8_t value, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSignedPackedBits(System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C75E8
    static int ReadSignedPackedBits(uint64_t buffer, ByRef<int> bitposition, int bits);
    // static public System.Int16 ReadSignedPackedBits(System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7604
    static int16_t ReadSignedPackedBits(uint buffer, ByRef<int> bitposition, int bits);
    // static public System.SByte ReadSignedPackedBits(System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7624
    static int8_t ReadSignedPackedBits(uint16_t buffer, ByRef<int> bitposition, int bits);
  }; // emotitron.Compression.PrimitivePackBitsExt
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::WritePackedBits
// Il2CppName: WritePackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, uint, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::WritePackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "WritePackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::WritePackedBits
// Il2CppName: WritePackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint16_t, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::WritePackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "WritePackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::WritePackedBits
// Il2CppName: WritePackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(uint16_t, uint8_t, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::WritePackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "WritePackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::ReadPackedBits
// Il2CppName: ReadPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::ReadPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "ReadPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::ReadPackedBits
// Il2CppName: ReadPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::ReadPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "ReadPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::ReadPackedBits
// Il2CppName: ReadPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint16_t, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::ReadPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "ReadPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::WriteSignedPackedBits
// Il2CppName: WriteSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, int, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::WriteSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "WriteSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::WriteSignedPackedBits
// Il2CppName: WriteSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, int16_t, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::WriteSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "WriteSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::WriteSignedPackedBits
// Il2CppName: WriteSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(uint16_t, int8_t, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::WriteSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "WriteSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::ReadSignedPackedBits
// Il2CppName: ReadSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::ReadSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "ReadSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::ReadSignedPackedBits
// Il2CppName: ReadSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(uint, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::ReadSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "ReadSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitivePackBitsExt::ReadSignedPackedBits
// Il2CppName: ReadSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (*)(uint16_t, ByRef<int>, int)>(&emotitron::Compression::PrimitivePackBitsExt::ReadSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitivePackBitsExt*), "ReadSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
