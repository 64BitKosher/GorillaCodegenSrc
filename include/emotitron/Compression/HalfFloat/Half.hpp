// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: emotitron.Compression.HalfFloat
namespace emotitron::Compression::HalfFloat {
  // Forward declaring type: Half
  struct Half;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::HalfFloat::Half, "emotitron.Compression.HalfFloat", "Half");
// Type namespace: emotitron.Compression.HalfFloat
namespace emotitron::Compression::HalfFloat {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: emotitron.Compression.HalfFloat.Half
  // [TokenAttribute] Offset: FFFFFFFF
  struct Half/*, public ::System::ValueType, public ::System::IConvertible, public ::System::IComparable, public ::System::IComparable_1<::emotitron::Compression::HalfFloat::Half>, public ::System::IEquatable_1<::emotitron::Compression::HalfFloat::Half>, public ::System::IFormattable*/ {
    public:
    public:
    // private System.UInt16 value
    // Size: 0x2
    // Offset: 0x0
    uint16_t value;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: Half
    constexpr Half(uint16_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IConvertible
    operator ::System::IConvertible() noexcept {
      return *reinterpret_cast<::System::IConvertible*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable
    operator ::System::IComparable() noexcept {
      return *reinterpret_cast<::System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable_1<::emotitron::Compression::HalfFloat::Half>
    operator ::System::IComparable_1<::emotitron::Compression::HalfFloat::Half>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::emotitron::Compression::HalfFloat::Half>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::emotitron::Compression::HalfFloat::Half>
    operator ::System::IEquatable_1<::emotitron::Compression::HalfFloat::Half>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::emotitron::Compression::HalfFloat::Half>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Creating conversion operator: operator uint16_t
    constexpr operator uint16_t() const noexcept {
      return value;
    }
    // static field const value: static public System.Int32 PrecisionDigits
    static constexpr const int PrecisionDigits = 3;
    // Get static field: static public System.Int32 PrecisionDigits
    static int _get_PrecisionDigits();
    // Set static field: static public System.Int32 PrecisionDigits
    static void _set_PrecisionDigits(int value);
    // static field const value: static public System.Int32 MantissaBits
    static constexpr const int MantissaBits = 11;
    // Get static field: static public System.Int32 MantissaBits
    static int _get_MantissaBits();
    // Set static field: static public System.Int32 MantissaBits
    static void _set_MantissaBits(int value);
    // static field const value: static public System.Int32 MaximumDecimalExponent
    static constexpr const int MaximumDecimalExponent = 4;
    // Get static field: static public System.Int32 MaximumDecimalExponent
    static int _get_MaximumDecimalExponent();
    // Set static field: static public System.Int32 MaximumDecimalExponent
    static void _set_MaximumDecimalExponent(int value);
    // static field const value: static public System.Int32 MaximumBinaryExponent
    static constexpr const int MaximumBinaryExponent = 15;
    // Get static field: static public System.Int32 MaximumBinaryExponent
    static int _get_MaximumBinaryExponent();
    // Set static field: static public System.Int32 MaximumBinaryExponent
    static void _set_MaximumBinaryExponent(int value);
    // static field const value: static public System.Int32 MinimumDecimalExponent
    static constexpr const int MinimumDecimalExponent = -4;
    // Get static field: static public System.Int32 MinimumDecimalExponent
    static int _get_MinimumDecimalExponent();
    // Set static field: static public System.Int32 MinimumDecimalExponent
    static void _set_MinimumDecimalExponent(int value);
    // static field const value: static public System.Int32 MinimumBinaryExponent
    static constexpr const int MinimumBinaryExponent = -14;
    // Get static field: static public System.Int32 MinimumBinaryExponent
    static int _get_MinimumBinaryExponent();
    // Set static field: static public System.Int32 MinimumBinaryExponent
    static void _set_MinimumBinaryExponent(int value);
    // static field const value: static public System.Int32 ExponentRadix
    static constexpr const int ExponentRadix = 2;
    // Get static field: static public System.Int32 ExponentRadix
    static int _get_ExponentRadix();
    // Set static field: static public System.Int32 ExponentRadix
    static void _set_ExponentRadix(int value);
    // static field const value: static public System.Int32 AdditionRounding
    static constexpr const int AdditionRounding = 1;
    // Get static field: static public System.Int32 AdditionRounding
    static int _get_AdditionRounding();
    // Set static field: static public System.Int32 AdditionRounding
    static void _set_AdditionRounding(int value);
    // Get static field: static public readonly emotitron.Compression.HalfFloat.Half Epsilon
    static ::emotitron::Compression::HalfFloat::Half _get_Epsilon();
    // Set static field: static public readonly emotitron.Compression.HalfFloat.Half Epsilon
    static void _set_Epsilon(::emotitron::Compression::HalfFloat::Half value);
    // Get static field: static public readonly emotitron.Compression.HalfFloat.Half MaxValue
    static ::emotitron::Compression::HalfFloat::Half _get_MaxValue();
    // Set static field: static public readonly emotitron.Compression.HalfFloat.Half MaxValue
    static void _set_MaxValue(::emotitron::Compression::HalfFloat::Half value);
    // Get static field: static public readonly emotitron.Compression.HalfFloat.Half MinValue
    static ::emotitron::Compression::HalfFloat::Half _get_MinValue();
    // Set static field: static public readonly emotitron.Compression.HalfFloat.Half MinValue
    static void _set_MinValue(::emotitron::Compression::HalfFloat::Half value);
    // Get static field: static public readonly emotitron.Compression.HalfFloat.Half NaN
    static ::emotitron::Compression::HalfFloat::Half _get_NaN();
    // Set static field: static public readonly emotitron.Compression.HalfFloat.Half NaN
    static void _set_NaN(::emotitron::Compression::HalfFloat::Half value);
    // Get static field: static public readonly emotitron.Compression.HalfFloat.Half NegativeInfinity
    static ::emotitron::Compression::HalfFloat::Half _get_NegativeInfinity();
    // Set static field: static public readonly emotitron.Compression.HalfFloat.Half NegativeInfinity
    static void _set_NegativeInfinity(::emotitron::Compression::HalfFloat::Half value);
    // Get static field: static public readonly emotitron.Compression.HalfFloat.Half PositiveInfinity
    static ::emotitron::Compression::HalfFloat::Half _get_PositiveInfinity();
    // Set static field: static public readonly emotitron.Compression.HalfFloat.Half PositiveInfinity
    static void _set_PositiveInfinity(::emotitron::Compression::HalfFloat::Half value);
    // Get instance field reference: private System.UInt16 value
    [[deprecated("Use field access instead!")]] uint16_t& dyn_value();
    // public System.Void .ctor(System.Single value)
    // Offset: 0x28CA2AC
    Half(float value);
    // public System.UInt16 get_RawValue()
    // Offset: 0x28CA3C8
    uint16_t get_RawValue();
    // static public System.Single[] ConvertToFloat(emotitron.Compression.HalfFloat.Half[] values)
    // Offset: 0x28CA3D0
    static ::ArrayW<float> ConvertToFloat(::ArrayW<::emotitron::Compression::HalfFloat::Half> values);
    // static public emotitron.Compression.HalfFloat.Half[] ConvertToHalf(System.Single[] values)
    // Offset: 0x28CA580
    static ::ArrayW<::emotitron::Compression::HalfFloat::Half> ConvertToHalf(::ArrayW<float> values);
    // static public System.Boolean IsInfinity(emotitron.Compression.HalfFloat.Half half)
    // Offset: 0x28CA648
    static bool IsInfinity(::emotitron::Compression::HalfFloat::Half half);
    // static public System.Boolean IsNaN(emotitron.Compression.HalfFloat.Half half)
    // Offset: 0x28CA6E4
    static bool IsNaN(::emotitron::Compression::HalfFloat::Half half);
    // static public System.Boolean IsNegativeInfinity(emotitron.Compression.HalfFloat.Half half)
    // Offset: 0x28CA748
    static bool IsNegativeInfinity(::emotitron::Compression::HalfFloat::Half half);
    // static public System.Boolean IsPositiveInfinity(emotitron.Compression.HalfFloat.Half half)
    // Offset: 0x28CA7AC
    static bool IsPositiveInfinity(::emotitron::Compression::HalfFloat::Half half);
    // static public emotitron.Compression.HalfFloat.Half op_Explicit(System.Single value)
    // Offset: 0x28CAA84
    explicit Half(float& value);
    // public System.String ToString(System.String format)
    // Offset: 0x28CABC0
    ::StringW ToString(::StringW format);
    // public System.String ToString(System.IFormatProvider formatProvider)
    // Offset: 0x28CAD04
    ::StringW ToString(::System::IFormatProvider* formatProvider);
    // public System.String ToString(System.String format, System.IFormatProvider formatProvider)
    // Offset: 0x28CADF4
    ::StringW ToString(::StringW format, ::System::IFormatProvider* formatProvider);
    // public System.Int32 CompareTo(emotitron.Compression.HalfFloat.Half value)
    // Offset: 0x28CAF10
    int CompareTo(::emotitron::Compression::HalfFloat::Half value);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0x28CB018
    int CompareTo(::Il2CppObject* value);
    // static public System.Boolean Equals(ref emotitron.Compression.HalfFloat.Half value1, ref emotitron.Compression.HalfFloat.Half value2)
    // Offset: 0x28CB188
    static bool Equals(ByRef<::emotitron::Compression::HalfFloat::Half> value1, ByRef<::emotitron::Compression::HalfFloat::Half> value2);
    // public System.Boolean Equals(emotitron.Compression.HalfFloat.Half other)
    // Offset: 0x28CAA64
    bool Equals(::emotitron::Compression::HalfFloat::Half other);
    // public System.TypeCode GetTypeCode()
    // Offset: 0x28CB29C
    ::System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0x28CB310
    bool System_IConvertible_ToBoolean(::System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0x28CB3A4
    uint8_t System_IConvertible_ToByte(::System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0x28CB438
    ::Il2CppChar System_IConvertible_ToChar(::System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0x28CB484
    ::System::DateTime System_IConvertible_ToDateTime(::System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0x28CB4D0
    ::System::Decimal System_IConvertible_ToDecimal(::System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0x28CB564
    double System_IConvertible_ToDouble(::System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0x28CB5F8
    int16_t System_IConvertible_ToInt16(::System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0x28CB68C
    int System_IConvertible_ToInt32(::System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0x28CB720
    int64_t System_IConvertible_ToInt64(::System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0x28CB7B4
    int8_t System_IConvertible_ToSByte(::System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0x28CB848
    float System_IConvertible_ToSingle(::System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0x28CB8A0
    ::Il2CppObject* System_IConvertible_ToType(::System::Type* type, ::System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0x28CB970
    uint16_t System_IConvertible_ToUInt16(::System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0x28CBA04
    uint System_IConvertible_ToUInt32(::System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0x28CBA98
    uint64_t System_IConvertible_ToUInt64(::System::IFormatProvider* provider);
    // static private System.Void .cctor()
    // Offset: 0x28CBB2C
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x28CAAA0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0x28CAF00
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x28CB19C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // emotitron.Compression.HalfFloat.Half
  #pragma pack(pop)
  static check_size<sizeof(Half), 0 + sizeof(uint16_t)> __emotitron_Compression_HalfFloat_HalfSizeCheck;
  static_assert(sizeof(Half) == 0x2);
  // static public System.Boolean op_LessThan(emotitron.Compression.HalfFloat.Half left, emotitron.Compression.HalfFloat.Half right)
  // Offset: 0x28CA810
  bool operator <(const ::emotitron::Compression::HalfFloat::Half& left, const ::emotitron::Compression::HalfFloat::Half& right);
  // static public System.Boolean op_GreaterThan(emotitron.Compression.HalfFloat.Half left, emotitron.Compression.HalfFloat.Half right)
  // Offset: 0x28CA8E4
  bool operator >(const ::emotitron::Compression::HalfFloat::Half& left, const ::emotitron::Compression::HalfFloat::Half& right);
  // static public System.Boolean op_LessThanOrEqual(emotitron.Compression.HalfFloat.Half left, emotitron.Compression.HalfFloat.Half right)
  // Offset: 0x28CA964
  bool operator <=(const ::emotitron::Compression::HalfFloat::Half& left, const ::emotitron::Compression::HalfFloat::Half& right);
  // static public System.Boolean op_GreaterThanOrEqual(emotitron.Compression.HalfFloat.Half left, emotitron.Compression.HalfFloat.Half right)
  // Offset: 0x28CA9E4
  bool operator >=(const ::emotitron::Compression::HalfFloat::Half& left, const ::emotitron::Compression::HalfFloat::Half& right);
  // static public System.Boolean op_Equality(emotitron.Compression.HalfFloat.Half left, emotitron.Compression.HalfFloat.Half right)
  // Offset: 0x28CA6D4
  bool operator ==(const ::emotitron::Compression::HalfFloat::Half& left, const ::emotitron::Compression::HalfFloat::Half& right);
  // static public System.Boolean op_Inequality(emotitron.Compression.HalfFloat.Half left, emotitron.Compression.HalfFloat.Half right)
  // Offset: 0x28CAA74
  bool operator !=(const ::emotitron::Compression::HalfFloat::Half& left, const ::emotitron::Compression::HalfFloat::Half& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::Half
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::get_RawValue
// Il2CppName: get_RawValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (emotitron::Compression::HalfFloat::Half::*)()>(&emotitron::Compression::HalfFloat::Half::get_RawValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "get_RawValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::ConvertToFloat
// Il2CppName: ConvertToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (*)(::ArrayW<::emotitron::Compression::HalfFloat::Half>)>(&emotitron::Compression::HalfFloat::Half::ConvertToFloat)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "ConvertToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::ConvertToHalf
// Il2CppName: ConvertToHalf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::emotitron::Compression::HalfFloat::Half> (*)(::ArrayW<float>)>(&emotitron::Compression::HalfFloat::Half::ConvertToHalf)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "ConvertToHalf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::IsInfinity
// Il2CppName: IsInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::emotitron::Compression::HalfFloat::Half)>(&emotitron::Compression::HalfFloat::Half::IsInfinity)> {
  static const MethodInfo* get() {
    static auto* half = &::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "IsInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{half});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::IsNaN
// Il2CppName: IsNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::emotitron::Compression::HalfFloat::Half)>(&emotitron::Compression::HalfFloat::Half::IsNaN)> {
  static const MethodInfo* get() {
    static auto* half = &::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "IsNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{half});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::IsNegativeInfinity
// Il2CppName: IsNegativeInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::emotitron::Compression::HalfFloat::Half)>(&emotitron::Compression::HalfFloat::Half::IsNegativeInfinity)> {
  static const MethodInfo* get() {
    static auto* half = &::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "IsNegativeInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{half});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::IsPositiveInfinity
// Il2CppName: IsPositiveInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::emotitron::Compression::HalfFloat::Half)>(&emotitron::Compression::HalfFloat::Half::IsPositiveInfinity)> {
  static const MethodInfo* get() {
    static auto* half = &::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "IsPositiveInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{half});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::Half
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (emotitron::Compression::HalfFloat::Half::*)(::StringW)>(&emotitron::Compression::HalfFloat::Half::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::ToString)> {
  static const MethodInfo* get() {
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formatProvider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (emotitron::Compression::HalfFloat::Half::*)(::StringW, ::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, formatProvider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (emotitron::Compression::HalfFloat::Half::*)(::emotitron::Compression::HalfFloat::Half)>(&emotitron::Compression::HalfFloat::Half::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (emotitron::Compression::HalfFloat::Half::*)(::Il2CppObject*)>(&emotitron::Compression::HalfFloat::Half::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::emotitron::Compression::HalfFloat::Half>, ByRef<::emotitron::Compression::HalfFloat::Half>)>(&emotitron::Compression::HalfFloat::Half::Equals)> {
  static const MethodInfo* get() {
    static auto* value1 = &::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half")->this_arg;
    static auto* value2 = &::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value1, value2});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (emotitron::Compression::HalfFloat::Half::*)(::emotitron::Compression::HalfFloat::Half)>(&emotitron::Compression::HalfFloat::Half::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("emotitron.Compression.HalfFloat", "Half")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::GetTypeCode
// Il2CppName: GetTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TypeCode (emotitron::Compression::HalfFloat::Half::*)()>(&emotitron::Compression::HalfFloat::Half::GetTypeCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToBoolean
// Il2CppName: System.IConvertible.ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToBoolean)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToByte
// Il2CppName: System.IConvertible.ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToByte)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToChar
// Il2CppName: System.IConvertible.ToChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToChar)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToDateTime
// Il2CppName: System.IConvertible.ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToDateTime)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToDecimal
// Il2CppName: System.IConvertible.ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToDecimal)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToDouble
// Il2CppName: System.IConvertible.ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToDouble)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToInt16
// Il2CppName: System.IConvertible.ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToInt16)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToInt32
// Il2CppName: System.IConvertible.ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToInt32)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToInt64
// Il2CppName: System.IConvertible.ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToInt64)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToSByte
// Il2CppName: System.IConvertible.ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToSByte)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToSingle
// Il2CppName: System.IConvertible.ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToSingle)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToType
// Il2CppName: System.IConvertible.ToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (emotitron::Compression::HalfFloat::Half::*)(::System::Type*, ::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToUInt16
// Il2CppName: System.IConvertible.ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToUInt16)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToUInt32
// Il2CppName: System.IConvertible.ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToUInt32)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::System_IConvertible_ToUInt64
// Il2CppName: System.IConvertible.ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (emotitron::Compression::HalfFloat::Half::*)(::System::IFormatProvider*)>(&emotitron::Compression::HalfFloat::Half::System_IConvertible_ToUInt64)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "System.IConvertible.ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::Compression::HalfFloat::Half::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (emotitron::Compression::HalfFloat::Half::*)()>(&emotitron::Compression::HalfFloat::Half::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (emotitron::Compression::HalfFloat::Half::*)()>(&emotitron::Compression::HalfFloat::Half::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (emotitron::Compression::HalfFloat::Half::*)(::Il2CppObject*)>(&emotitron::Compression::HalfFloat::Half::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::HalfFloat::Half), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::operator <=
// Il2CppName: op_LessThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::operator >=
// Il2CppName: op_GreaterThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: emotitron::Compression::HalfFloat::Half::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
