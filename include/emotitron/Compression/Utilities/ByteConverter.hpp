// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: emotitron.Compression.Utilities
namespace emotitron::Compression::Utilities {
  // Forward declaring type: ByteConverter
  struct ByteConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::Utilities::ByteConverter, "emotitron.Compression.Utilities", "ByteConverter");
// Type namespace: emotitron.Compression.Utilities
namespace emotitron::Compression::Utilities {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: emotitron.Compression.Utilities.ByteConverter
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  struct ByteConverter/*, public ::System::ValueType*/ {
    public:
    public:
    // Creating union for fields at offset: 0x0
    union {
      // public System.Single float32
      // Size: 0x4
      // Offset: 0x0
      float float32;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Double float64
      // Size: 0x8
      // Offset: 0x0
      double float64;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.SByte int8
      // Size: 0x1
      // Offset: 0x0
      int8_t int8;
      // Field size check
      static_assert(sizeof(int8_t) == 0x1);
      // public System.Int16 int16
      // Size: 0x2
      // Offset: 0x0
      int16_t int16;
      // Field size check
      static_assert(sizeof(int16_t) == 0x2);
      // public System.UInt16 uint16
      // Size: 0x2
      // Offset: 0x0
      uint16_t uint16;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // public System.Char character
      // Size: 0x2
      // Offset: 0x0
      ::Il2CppChar character;
      // Field size check
      static_assert(sizeof(::Il2CppChar) == 0x2);
      // public System.Int32 int32
      // Size: 0x4
      // Offset: 0x0
      int int32;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.UInt32 uint32
      // Size: 0x4
      // Offset: 0x0
      uint uint32;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public System.Int64 int64
      // Size: 0x8
      // Offset: 0x0
      int64_t int64;
      // Field size check
      static_assert(sizeof(int64_t) == 0x8);
      // public System.UInt64 uint64
      // Size: 0x8
      // Offset: 0x0
      uint64_t uint64;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      // public System.Byte byte0
      // Size: 0x1
      // Offset: 0x0
      uint8_t byte0;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
    };
    // public System.Byte byte1
    // Size: 0x1
    // Offset: 0x1
    uint8_t byte1;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte byte2
    // Size: 0x1
    // Offset: 0x2
    uint8_t byte2;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte byte3
    // Size: 0x1
    // Offset: 0x3
    uint8_t byte3;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte byte4
    // Size: 0x1
    // Offset: 0x4
    uint8_t byte4;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte byte5
    // Size: 0x1
    // Offset: 0x5
    uint8_t byte5;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte byte6
    // Size: 0x1
    // Offset: 0x6
    uint8_t byte6;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte byte7
    // Size: 0x1
    // Offset: 0x7
    uint8_t byte7;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // WARNING Could not write padding for field: byte7! Ignoring it instead (and assuming correct layout regardless)...
    // public System.UInt32 uint16_B
    // Size: 0x4
    // Offset: 0x4
    uint uint16_B;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: ByteConverter
    constexpr ByteConverter(float float32_ = {}, uint8_t byte1_ = {}, uint8_t byte2_ = {}, uint8_t byte3_ = {}, uint8_t byte4_ = {}, uint8_t byte5_ = {}, uint8_t byte6_ = {}, uint8_t byte7_ = {}, uint uint16_B_ = {}) noexcept : float32{float32_}, byte1{byte1_}, byte2{byte2_}, byte3{byte3_}, byte4{byte4_}, byte5{byte5_}, byte6{byte6_}, byte7{byte7_}, uint16_B{uint16_B_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single float32
    [[deprecated("Use field access instead!")]] float& dyn_float32();
    // Get instance field reference: public System.Double float64
    [[deprecated("Use field access instead!")]] double& dyn_float64();
    // Get instance field reference: public System.SByte int8
    [[deprecated("Use field access instead!")]] int8_t& dyn_int8();
    // Get instance field reference: public System.Int16 int16
    [[deprecated("Use field access instead!")]] int16_t& dyn_int16();
    // Get instance field reference: public System.UInt16 uint16
    [[deprecated("Use field access instead!")]] uint16_t& dyn_uint16();
    // Get instance field reference: public System.Char character
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_character();
    // Get instance field reference: public System.Int32 int32
    [[deprecated("Use field access instead!")]] int& dyn_int32();
    // Get instance field reference: public System.UInt32 uint32
    [[deprecated("Use field access instead!")]] uint& dyn_uint32();
    // Get instance field reference: public System.Int64 int64
    [[deprecated("Use field access instead!")]] int64_t& dyn_int64();
    // Get instance field reference: public System.UInt64 uint64
    [[deprecated("Use field access instead!")]] uint64_t& dyn_uint64();
    // Get instance field reference: public System.Byte byte0
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte0();
    // Get instance field reference: public System.Byte byte1
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte1();
    // Get instance field reference: public System.Byte byte2
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte2();
    // Get instance field reference: public System.Byte byte3
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte3();
    // Get instance field reference: public System.Byte byte4
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte4();
    // Get instance field reference: public System.Byte byte5
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte5();
    // Get instance field reference: public System.Byte byte6
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte6();
    // Get instance field reference: public System.Byte byte7
    [[deprecated("Use field access instead!")]] uint8_t& dyn_byte7();
    // Get instance field reference: public System.UInt32 uint16_B
    [[deprecated("Use field access instead!")]] uint& dyn_uint16_B();
    // public System.Byte get_Item(System.Int32 index)
    // Offset: 0x28C9FA4
    uint8_t get_Item(int index);
    // public System.Void ExtractByteArray(System.Byte[] targetArray)
    // Offset: 0x28CA188
    void ExtractByteArray(::ArrayW<uint8_t> targetArray);
  }; // emotitron.Compression.Utilities.ByteConverter
  #pragma pack(pop)
  static check_size<sizeof(ByteConverter), 4 + sizeof(uint)> __emotitron_Compression_Utilities_ByteConverterSizeCheck;
  static_assert(sizeof(ByteConverter) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::Utilities::ByteConverter::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (emotitron::Compression::Utilities::ByteConverter::*)(int)>(&emotitron::Compression::Utilities::ByteConverter::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::Utilities::ByteConverter), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::Utilities::ByteConverter::ExtractByteArray
// Il2CppName: ExtractByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (emotitron::Compression::Utilities::ByteConverter::*)(::ArrayW<uint8_t>)>(&emotitron::Compression::Utilities::ByteConverter::ExtractByteArray)> {
  static const MethodInfo* get() {
    static auto* targetArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::Utilities::ByteConverter), "ExtractByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetArray});
  }
};
