// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: emotitron::Compression::Utilities
namespace emotitron::Compression::Utilities {
  // Forward declaring type: ByteConverter
  struct ByteConverter;
}
// Completed forward declares
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: PrimitiveSerializeExt
  class PrimitiveSerializeExt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::emotitron::Compression::PrimitiveSerializeExt);
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::PrimitiveSerializeExt*, "emotitron.Compression", "PrimitiveSerializeExt");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.Compression.PrimitiveSerializeExt
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class PrimitiveSerializeExt : public ::Il2CppObject {
    public:
    // static field const value: static private System.String overrunerror
    static constexpr const char* overrunerror = "Write buffer overrun. writepos + bits exceeds target length. Data loss will occur.";
    // Get static field: static private System.String overrunerror
    static ::StringW _get_overrunerror();
    // Set static field: static private System.String overrunerror
    static void _set_overrunerror(::StringW value);
    // static public System.Void Inject(emotitron.Compression.Utilities.ByteConverter value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7B74
    static void Inject(::emotitron::Compression::Utilities::ByteConverter value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(emotitron.Compression.Utilities.ByteConverter value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7BE4
    static void Inject(::emotitron::Compression::Utilities::ByteConverter value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(emotitron.Compression.Utilities.ByteConverter value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7C54
    static void Inject(::emotitron::Compression::Utilities::ByteConverter value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(emotitron.Compression.Utilities.ByteConverter value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7CCC
    static void Inject(::emotitron::Compression::Utilities::ByteConverter value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 WriteSigned(System.UInt64 buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7D44
    static uint64_t WriteSigned(uint64_t buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int64 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7D7C
    static void InjectSigned(int64_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int32 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7DF8
    static void InjectSigned(int value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int16 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7E38
    static void InjectSigned(int16_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.SByte value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7E7C
    static void InjectSigned(int8_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSigned(System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7EC0
    static int ReadSigned(uint64_t buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt32 WriteSigned(System.UInt32 buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7EF0
    static uint WriteSigned(uint buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int64 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7F28
    static void InjectSigned(int64_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int32 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7FA0
    static void InjectSigned(int value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int16 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7FE0
    static void InjectSigned(int16_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.SByte value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8024
    static void InjectSigned(int8_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSigned(System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8068
    static int ReadSigned(uint buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt16 WriteSigned(System.UInt16 buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8098
    static uint16_t WriteSigned(uint16_t buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int64 value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C80D8
    static void InjectSigned(int64_t value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int32 value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8158
    static void InjectSigned(int value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int16 value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C819C
    static void InjectSigned(int16_t value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.SByte value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C81E4
    static void InjectSigned(int8_t value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSigned(System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C822C
    static int ReadSigned(uint16_t buffer, ByRef<int> bitposition, int bits);
    // static public System.Byte WriteSigned(System.Byte buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8264
    static uint8_t WriteSigned(uint8_t buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int64 value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C82DC
    static void InjectSigned(int64_t value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int32 value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C835C
    static void InjectSigned(int value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int16 value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C83A0
    static void InjectSigned(int16_t value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.SByte value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C83E8
    static void InjectSigned(int8_t value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSigned(System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8430
    static int ReadSigned(uint8_t buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 WritetBool(System.UInt64 buffer, System.Boolean value, ref System.Int32 bitposition)
    // Offset: 0x28C8494
    static uint64_t WritetBool(uint64_t buffer, bool value, ByRef<int> bitposition);
    // static public System.UInt32 WritetBool(System.UInt32 buffer, System.Boolean value, ref System.Int32 bitposition)
    // Offset: 0x28C84C0
    static uint WritetBool(uint buffer, bool value, ByRef<int> bitposition);
    // static public System.UInt16 WritetBool(System.UInt16 buffer, System.Boolean value, ref System.Int32 bitposition)
    // Offset: 0x28C84EC
    static uint16_t WritetBool(uint16_t buffer, bool value, ByRef<int> bitposition);
    // static public System.Byte WritetBool(System.Byte buffer, System.Boolean value, ref System.Int32 bitposition)
    // Offset: 0x28C851C
    static uint8_t WritetBool(uint8_t buffer, bool value, ByRef<int> bitposition);
    // static public System.Void Inject(System.Boolean value, ref System.UInt64 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C854C
    static void Inject(bool value, ByRef<uint64_t> buffer, ByRef<int> bitposition);
    // static public System.Void Inject(System.Boolean value, ref System.UInt32 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8580
    static void Inject(bool value, ByRef<uint> buffer, ByRef<int> bitposition);
    // static public System.Void Inject(System.Boolean value, ref System.UInt16 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C85B4
    static void Inject(bool value, ByRef<uint16_t> buffer, ByRef<int> bitposition);
    // static public System.Void Inject(System.Boolean value, ref System.Byte buffer, ref System.Int32 bitposition)
    // Offset: 0x28C85E8
    static void Inject(bool value, ByRef<uint8_t> buffer, ByRef<int> bitposition);
    // static public System.Boolean ReadBool(System.UInt64 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C861C
    static bool ReadBool(uint64_t buffer, ByRef<int> bitposition);
    // static public System.Boolean ReadtBool(System.UInt32 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8634
    static bool ReadtBool(uint buffer, ByRef<int> bitposition);
    // static public System.Boolean ReadBool(System.UInt16 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C864C
    static bool ReadBool(uint16_t buffer, ByRef<int> bitposition);
    // static public System.Boolean ReadBool(System.Byte buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8668
    static bool ReadBool(uint8_t buffer, ByRef<int> bitposition);
    // static public System.UInt64 Write(System.UInt64 buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7124
    static uint64_t Write(uint64_t buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt32 Write(System.UInt32 buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7228
    static uint Write(uint buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt16 Write(System.UInt16 buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7334
    static uint16_t Write(uint16_t buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Byte Write(System.Byte buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C82A4
    static uint8_t Write(uint8_t buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7BAC
    static void Inject(uint64_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, ref System.UInt64 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8684
    static void Inject_(uint64_t value, ByRef<uint64_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7DBC
    static void Inject(uint value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, ref System.UInt64 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C86B0
    static void Inject_(uint value, ByRef<uint64_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C86E0
    static void Inject(uint16_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, ref System.UInt64 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C871C
    static void Inject_(uint16_t value, ByRef<uint64_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.Byte value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C874C
    static void Inject(uint8_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.Byte value, ref System.UInt64 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8788
    static void Inject_(uint8_t value, ByRef<uint64_t> buffer, int bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int64 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C87B8
    static void InjectUnsigned(int64_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int32 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C87F0
    static void InjectUnsigned(int value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int16 value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C882C
    static void InjectUnsigned(int16_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.SByte value, ref System.UInt64 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8868
    static void InjectUnsigned(int8_t value, ByRef<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7C1C
    static void Inject(uint64_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, ref System.UInt32 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C88A4
    static void Inject_(uint64_t value, ByRef<uint> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7F68
    static void Inject(uint value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, ref System.UInt32 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C88D0
    static void Inject_(uint value, ByRef<uint> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C88FC
    static void Inject(uint16_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, ref System.UInt32 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8938
    static void Inject_(uint16_t value, ByRef<uint> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.Byte value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8968
    static void Inject(uint8_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.Byte value, ref System.UInt32 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C89A4
    static void Inject_(uint8_t value, ByRef<uint> buffer, int bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int64 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C89D4
    static void InjectUnsigned(int64_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int32 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8A0C
    static void InjectUnsigned(int value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int16 value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8A44
    static void InjectUnsigned(int16_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.SByte value, ref System.UInt32 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8A80
    static void InjectUnsigned(int8_t value, ByRef<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7C90
    static void Inject(uint64_t value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, ref System.UInt16 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8ABC
    static void Inject_(uint64_t value, ByRef<uint16_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C811C
    static void Inject(uint value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, ref System.UInt16 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8AEC
    static void Inject_(uint value, ByRef<uint16_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8B1C
    static void Inject(uint16_t value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, ref System.UInt16 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8B5C
    static void Inject_(uint16_t value, ByRef<uint16_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.Byte value, ref System.UInt16 buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8B90
    static void Inject(uint8_t value, ByRef<uint16_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.Byte value, ref System.UInt16 buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8BD0
    static void Inject_(uint8_t value, ByRef<uint16_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7D08
    static void Inject(uint64_t value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, ref System.Byte buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8C04
    static void Inject_(uint64_t value, ByRef<uint8_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8320
    static void Inject(uint value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, ref System.Byte buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8C34
    static void Inject_(uint value, ByRef<uint8_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8C64
    static void Inject(uint16_t value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, ref System.Byte buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8CA4
    static void Inject_(uint16_t value, ByRef<uint8_t> buffer, int bitposition, int bits);
    // static public System.Void Inject(System.Byte value, ref System.Byte buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8CD8
    static void Inject(uint8_t value, ByRef<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.Byte value, ref System.Byte buffer, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8D18
    static void Inject_(uint8_t value, ByRef<uint8_t> buffer, int bitposition, int bits);
    // static public System.UInt64 Extract(System.UInt64 value, System.Int32 bits, ref System.Int32 bitposition)
    // Offset: 0x28C8D4C
    static uint64_t Extract(uint64_t value, int bits, ByRef<int> bitposition);
    // static public System.UInt64 Read(System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7408
    static uint64_t Read(uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt64 Extract(System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8D50
    static uint64_t Extract_(uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt64 Extract(System.UInt64 value, System.Int32 bits)
    // Offset: 0x28C8D74
    static uint64_t Extract(uint64_t value, int bits);
    // static public System.UInt32 Read(System.UInt32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C74C8
    static uint Read(uint value, ByRef<int> bitposition, int bits);
    // static public System.UInt32 Extract(System.UInt32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8D88
    static uint Extract(uint value, ByRef<int> bitposition, int bits);
    // static public System.UInt32 Extract(System.UInt32 value, System.Int32 bits)
    // Offset: 0x28C8DAC
    static uint Extract(uint value, int bits);
    // static public System.UInt32 Read(System.UInt16 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C7590
    static uint Read(uint16_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt32 Extract(System.UInt16 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8DC0
    static uint Extract(uint16_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt32 Read(System.Byte value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8468
    static uint Read(uint8_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt32 Extract(System.Byte value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C8DEC
    static uint Extract(uint8_t value, ByRef<int> bitposition, int bits);
    // static public System.Byte Extract(System.Byte value, System.Int32 bits)
    // Offset: 0x28C8E18
    static uint8_t Extract(uint8_t value, int bits);
    // static public System.Void Inject(System.Single f, ref System.UInt64 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8E30
    static void Inject(float f, ByRef<uint64_t> buffer, ByRef<int> bitposition);
    // static public System.Single ReadFloat(System.UInt64 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8E64
    static float ReadFloat(uint64_t buffer, ByRef<int> bitposition);
    // static public System.Single ExtractFloat(System.UInt64 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8E7C
    static float ExtractFloat(uint64_t buffer, ByRef<int> bitposition);
    // static public System.UInt16 InjectAsHalfFloat(System.Single f, ref System.UInt64 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8E94
    static uint16_t InjectAsHalfFloat(float f, ByRef<uint64_t> buffer, ByRef<int> bitposition);
    // static public System.UInt16 InjectAsHalfFloat(System.Single f, ref System.UInt32 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8F38
    static uint16_t InjectAsHalfFloat(float f, ByRef<uint> buffer, ByRef<int> bitposition);
    // static public System.Single ReadHalfFloat(System.UInt64 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C8FDC
    static float ReadHalfFloat(uint64_t buffer, ByRef<int> bitposition);
    // static public System.Single ExtractHalfFloat(System.UInt64 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C904C
    static float ExtractHalfFloat(uint64_t buffer, ByRef<int> bitposition);
    // static public System.Single ReadHalfFloat(System.UInt32 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C90BC
    static float ReadHalfFloat(uint buffer, ByRef<int> bitposition);
    // static public System.Single ExtractHalfFloat(System.UInt32 buffer, ref System.Int32 bitposition)
    // Offset: 0x28C912C
    static float ExtractHalfFloat(uint buffer, ByRef<int> bitposition);
    // static public System.Void Inject(System.UInt64 value, ref System.UInt32 buffer, System.Int32 bits, ref System.Int32 bitposition)
    // Offset: 0x28C919C
    static void Inject__(uint64_t value, ByRef<uint> buffer, int bits, ByRef<int> bitposition);
    // static public System.Void Inject(System.UInt64 value, ref System.UInt64 buffer, System.Int32 bits, ref System.Int32 bitposition)
    // Offset: 0x28C91D4
    static void Inject__(uint64_t value, ByRef<uint64_t> buffer, int bits, ByRef<int> bitposition);
  }; // emotitron.Compression.PrimitiveSerializeExt
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::emotitron::Compression::Utilities::ByteConverter, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("emotitron.Compression.Utilities", "ByteConverter")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::emotitron::Compression::Utilities::ByteConverter, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("emotitron.Compression.Utilities", "ByteConverter")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::emotitron::Compression::Utilities::ByteConverter, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("emotitron.Compression.Utilities", "ByteConverter")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::emotitron::Compression::Utilities::ByteConverter, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("emotitron.Compression.Utilities", "ByteConverter")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::WriteSigned
// Il2CppName: WriteSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, int, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::WriteSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "WriteSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadSigned
// Il2CppName: ReadSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::ReadSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::WriteSigned
// Il2CppName: WriteSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, int, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::WriteSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "WriteSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadSigned
// Il2CppName: ReadSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::ReadSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::WriteSigned
// Il2CppName: WriteSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(uint16_t, int, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::WriteSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "WriteSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadSigned
// Il2CppName: ReadSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint16_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::ReadSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::WriteSigned
// Il2CppName: WriteSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint8_t, int, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::WriteSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "WriteSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadSigned
// Il2CppName: ReadSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint8_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::ReadSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::WritetBool
// Il2CppName: WritetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, bool, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::WritetBool)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "WritetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::WritetBool
// Il2CppName: WritetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, bool, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::WritetBool)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "WritetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::WritetBool
// Il2CppName: WritetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(uint16_t, bool, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::WritetBool)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "WritetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::WritetBool
// Il2CppName: WritetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint8_t, bool, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::WritetBool)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "WritetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ByRef<uint64_t>, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ByRef<uint>, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ByRef<uint16_t>, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ByRef<uint8_t>, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadBool
// Il2CppName: ReadBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ReadBool)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadtBool
// Il2CppName: ReadtBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ReadtBool)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadtBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadBool
// Il2CppName: ReadBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint16_t, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ReadBool)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadBool
// Il2CppName: ReadBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ReadBool)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(uint16_t, uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint8_t, uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint64_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint64_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, ByRef<uint64_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ByRef<uint64_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, ByRef<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, ByRef<uint>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ByRef<uint>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, ByRef<uint>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint16_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint16_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, ByRef<uint16_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ByRef<uint16_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ByRef<uint16_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint8_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<uint8_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, ByRef<uint8_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ByRef<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject_
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ByRef<uint8_t>, int, int)>(&emotitron::Compression::PrimitiveSerializeExt::Inject_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, int, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::Extract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Read)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Extract_
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Extract_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, int)>(&emotitron::Compression::PrimitiveSerializeExt::Extract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Read)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Extract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, int)>(&emotitron::Compression::PrimitiveSerializeExt::Extract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint16_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Read)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint16_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Extract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint8_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Read)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint8_t, ByRef<int>, int)>(&emotitron::Compression::PrimitiveSerializeExt::Extract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint8_t, int)>(&emotitron::Compression::PrimitiveSerializeExt::Extract)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, ByRef<uint64_t>, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::Inject)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadFloat
// Il2CppName: ReadFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint64_t, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ReadFloat)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ExtractFloat
// Il2CppName: ExtractFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint64_t, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ExtractFloat)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ExtractFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectAsHalfFloat
// Il2CppName: InjectAsHalfFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(float, ByRef<uint64_t>, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::InjectAsHalfFloat)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectAsHalfFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::InjectAsHalfFloat
// Il2CppName: InjectAsHalfFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(float, ByRef<uint>, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::InjectAsHalfFloat)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "InjectAsHalfFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadHalfFloat
// Il2CppName: ReadHalfFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint64_t, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ReadHalfFloat)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadHalfFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ExtractHalfFloat
// Il2CppName: ExtractHalfFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint64_t, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ExtractHalfFloat)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ExtractHalfFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ReadHalfFloat
// Il2CppName: ReadHalfFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ReadHalfFloat)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ReadHalfFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::ExtractHalfFloat
// Il2CppName: ExtractHalfFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(uint, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::ExtractHalfFloat)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "ExtractHalfFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject__
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint>, int, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::Inject__)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bits, bitposition});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::PrimitiveSerializeExt::Inject__
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, ByRef<uint64_t>, int, ByRef<int>)>(&emotitron::Compression::PrimitiveSerializeExt::Inject__)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::PrimitiveSerializeExt*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, buffer, bits, bitposition});
  }
};
