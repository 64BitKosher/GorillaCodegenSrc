// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.UInt64
#include "System/UInt64.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: BitCounter
  class BitCounter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::emotitron::Compression::BitCounter);
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::BitCounter*, "emotitron.Compression", "BitCounter");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.Compression.BitCounter
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class BitCounter : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Int32[] bitPatternToLog2
    static ::ArrayW<int> _get_bitPatternToLog2();
    // Set static field: static public readonly System.Int32[] bitPatternToLog2
    static void _set_bitPatternToLog2(::ArrayW<int> value);
    // static field const value: static public System.UInt64 MULTIPLICATOR
    static constexpr const uint64_t MULTIPLICATOR = 7783611145303519083u;
    // Get static field: static public System.UInt64 MULTIPLICATOR
    static uint64_t _get_MULTIPLICATOR();
    // Set static field: static public System.UInt64 MULTIPLICATOR
    static void _set_MULTIPLICATOR(uint64_t value);
    // static public System.Int32 UsedBitCount(System.UInt64 val)
    // Offset: 0x28C389C
    static int UsedBitCount(uint64_t val);
    // static public System.Int32 UsedBitCount(System.UInt32 val)
    // Offset: 0x28C6D34
    static int UsedBitCount(uint val);
    // static public System.Int32 UsedBitCount(System.Int32 val)
    // Offset: 0x28C3954
    static int UsedBitCount(int val);
    // static public System.Int32 UsedBitCount(System.UInt16 val)
    // Offset: 0x28C6DEC
    static int UsedBitCount(uint16_t val);
    // static public System.Int32 UsedBitCount(System.Byte val)
    // Offset: 0x28C6EA4
    static int UsedBitCount(uint8_t val);
    // static public System.Int32 UsedByteCount(System.UInt64 val)
    // Offset: 0x28C4550
    static int UsedByteCount(uint64_t val);
    // static public System.Int32 UsedByteCount(System.UInt32 val)
    // Offset: 0x28C6F58
    static int UsedByteCount(uint val);
    // static public System.Int32 UsedByteCount(System.UInt16 val)
    // Offset: 0x28C6F88
    static int UsedByteCount(uint16_t val);
    // static private System.Void .cctor()
    // Offset: 0x28C6FAC
    static void _cctor();
  }; // emotitron.Compression.BitCounter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::UsedBitCount
// Il2CppName: UsedBitCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&emotitron::Compression::BitCounter::UsedBitCount)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), "UsedBitCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::UsedBitCount
// Il2CppName: UsedBitCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&emotitron::Compression::BitCounter::UsedBitCount)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), "UsedBitCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::UsedBitCount
// Il2CppName: UsedBitCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&emotitron::Compression::BitCounter::UsedBitCount)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), "UsedBitCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::UsedBitCount
// Il2CppName: UsedBitCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint16_t)>(&emotitron::Compression::BitCounter::UsedBitCount)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), "UsedBitCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::UsedBitCount
// Il2CppName: UsedBitCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint8_t)>(&emotitron::Compression::BitCounter::UsedBitCount)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), "UsedBitCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::UsedByteCount
// Il2CppName: UsedByteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&emotitron::Compression::BitCounter::UsedByteCount)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), "UsedByteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::UsedByteCount
// Il2CppName: UsedByteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&emotitron::Compression::BitCounter::UsedByteCount)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), "UsedByteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::UsedByteCount
// Il2CppName: UsedByteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint16_t)>(&emotitron::Compression::BitCounter::UsedByteCount)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), "UsedByteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::BitCounter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&emotitron::Compression::BitCounter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::BitCounter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
