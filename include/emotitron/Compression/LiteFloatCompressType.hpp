// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: LiteFloatCompressType
  struct LiteFloatCompressType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::LiteFloatCompressType, "emotitron.Compression", "LiteFloatCompressType");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.Compression.LiteFloatCompressType
  // [TokenAttribute] Offset: FFFFFFFF
  struct LiteFloatCompressType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: LiteFloatCompressType
    constexpr LiteFloatCompressType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits2
    static constexpr const int Bits2 = 2;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits2
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits2();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits2
    static void _set_Bits2(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits3
    static constexpr const int Bits3 = 3;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits3
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits3();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits3
    static void _set_Bits3(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits4
    static constexpr const int Bits4 = 4;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits4
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits4();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits4
    static void _set_Bits4(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits5
    static constexpr const int Bits5 = 5;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits5
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits5();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits5
    static void _set_Bits5(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits6
    static constexpr const int Bits6 = 6;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits6
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits6();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits6
    static void _set_Bits6(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits7
    static constexpr const int Bits7 = 7;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits7
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits7();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits7
    static void _set_Bits7(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits8
    static constexpr const int Bits8 = 8;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits8
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits8();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits8
    static void _set_Bits8(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits9
    static constexpr const int Bits9 = 9;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits9
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits9();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits9
    static void _set_Bits9(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits10
    static constexpr const int Bits10 = 10;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits10
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits10();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits10
    static void _set_Bits10(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits12
    static constexpr const int Bits12 = 12;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits12
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits12();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits12
    static void _set_Bits12(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Bits14
    static constexpr const int Bits14 = 14;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Bits14
    static ::emotitron::Compression::LiteFloatCompressType _get_Bits14();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Bits14
    static void _set_Bits14(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Half16
    static constexpr const int Half16 = 16;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Half16
    static ::emotitron::Compression::LiteFloatCompressType _get_Half16();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Half16
    static void _set_Half16(::emotitron::Compression::LiteFloatCompressType value);
    // static field const value: static public emotitron.Compression.LiteFloatCompressType Full32
    static constexpr const int Full32 = 32;
    // Get static field: static public emotitron.Compression.LiteFloatCompressType Full32
    static ::emotitron::Compression::LiteFloatCompressType _get_Full32();
    // Set static field: static public emotitron.Compression.LiteFloatCompressType Full32
    static void _set_Full32(::emotitron::Compression::LiteFloatCompressType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // emotitron.Compression.LiteFloatCompressType
  #pragma pack(pop)
  static check_size<sizeof(LiteFloatCompressType), 0 + sizeof(int)> __emotitron_Compression_LiteFloatCompressTypeSizeCheck;
  static_assert(sizeof(LiteFloatCompressType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
