// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: ArrayPackBitsExt
  class ArrayPackBitsExt;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::emotitron::Compression::ArrayPackBitsExt);
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::ArrayPackBitsExt*, "emotitron.Compression", "ArrayPackBitsExt");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.Compression.ArrayPackBitsExt
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ArrayPackBitsExt : public ::Il2CppObject {
    public:
    // static public System.Void WritePackedBits(System.UInt64* uPtr, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C37EC
    static void WritePackedBits(uint64_t* uPtr, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void WritePackedBits(System.UInt64[] buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C3A80
    static void WritePackedBits(::ArrayW<uint64_t> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void WritePackedBits(System.UInt32[] buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C3BF8
    static void WritePackedBits(::ArrayW<uint> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void WritePackedBits(System.Byte[] buffer, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C3D78
    static void WritePackedBits(::ArrayW<uint8_t> buffer, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt64 ReadPackedBits(System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C3F10
    static uint64_t ReadPackedBits(uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.UInt64 ReadPackedBits(System.UInt64[] buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4020
    static uint64_t ReadPackedBits(::ArrayW<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 ReadPackedBits(System.UInt32[] buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4160
    static uint64_t ReadPackedBits(::ArrayW<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.UInt64 ReadPackedBits(System.Byte[] buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4298
    static uint64_t ReadPackedBits(::ArrayW<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void WriteSignedPackedBits(System.UInt64* uPtr, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C43D0
    static void WriteSignedPackedBits(uint64_t* uPtr, int value, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSignedPackedBits(System.UInt64* buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C43DC
    static int ReadSignedPackedBits(uint64_t* buffer, ByRef<int> bitposition, int bits);
    // static public System.Void WriteSignedPackedBits(System.UInt64[] buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C43F8
    static void WriteSignedPackedBits(::ArrayW<uint64_t> buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSignedPackedBits(System.UInt64[] buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4404
    static int ReadSignedPackedBits(::ArrayW<uint64_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void WriteSignedPackedBits(System.UInt32[] buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4420
    static void WriteSignedPackedBits(::ArrayW<uint> buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSignedPackedBits(System.UInt32[] buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C442C
    static int ReadSignedPackedBits(::ArrayW<uint> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void WriteSignedPackedBits(System.Byte[] buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4448
    static void WriteSignedPackedBits(::ArrayW<uint8_t> buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Int32 ReadSignedPackedBits(System.Byte[] buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4454
    static int ReadSignedPackedBits(::ArrayW<uint8_t> buffer, ByRef<int> bitposition, int bits);
    // static public System.Void WriteSignedPackedBits64(System.Byte[] buffer, System.Int64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C4470
    static void WriteSignedPackedBits64(::ArrayW<uint8_t> buffer, int64_t value, ByRef<int> bitposition, int bits);
    // static public System.Int64 ReadSignedPackedBits64(System.Byte[] buffer, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C447C
    static int64_t ReadSignedPackedBits64(::ArrayW<uint8_t> buffer, ByRef<int> bitposition, int bits);
  }; // emotitron.Compression.ArrayPackBitsExt
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WritePackedBits
// Il2CppName: WritePackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t*, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WritePackedBits)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WritePackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WritePackedBits
// Il2CppName: WritePackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint64_t>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WritePackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WritePackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WritePackedBits
// Il2CppName: WritePackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WritePackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WritePackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WritePackedBits
// Il2CppName: WritePackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WritePackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WritePackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadPackedBits
// Il2CppName: ReadPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadPackedBits)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadPackedBits
// Il2CppName: ReadPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::ArrayW<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadPackedBits
// Il2CppName: ReadPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::ArrayW<uint>, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadPackedBits
// Il2CppName: ReadPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::ArrayW<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits
// Il2CppName: WriteSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t*, int, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WriteSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits
// Il2CppName: ReadSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits
// Il2CppName: WriteSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint64_t>, int, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WriteSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits
// Il2CppName: ReadSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits
// Il2CppName: WriteSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, int, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WriteSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits
// Il2CppName: ReadSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint>, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits
// Il2CppName: WriteSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WriteSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits
// Il2CppName: ReadSignedPackedBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadSignedPackedBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits64
// Il2CppName: WriteSignedPackedBits64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int64_t, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::WriteSignedPackedBits64)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "WriteSignedPackedBits64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits64
// Il2CppName: ReadSignedPackedBits64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::ArrayW<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArrayPackBitsExt::ReadSignedPackedBits64)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArrayPackBitsExt*), "ReadSignedPackedBits64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bitposition, bits});
  }
};
