// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Forward declaring type: ArraySerializeUnsafe
  class ArraySerializeUnsafe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::emotitron::Compression::ArraySerializeUnsafe);
DEFINE_IL2CPP_ARG_TYPE(::emotitron::Compression::ArraySerializeUnsafe*, "emotitron.Compression", "ArraySerializeUnsafe");
// Type namespace: emotitron.Compression
namespace emotitron::Compression {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: emotitron.Compression.ArraySerializeUnsafe
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ArraySerializeUnsafe : public ::Il2CppObject {
    public:
    // static field const value: static private System.String bufferOverrunMsg
    static constexpr const char* bufferOverrunMsg = "Byte buffer overrun. Dataloss will occur.";
    // Get static field: static private System.String bufferOverrunMsg
    static ::StringW _get_bufferOverrunMsg();
    // Set static field: static private System.String bufferOverrunMsg
    static void _set_bufferOverrunMsg(::StringW value);
    // static public System.Void WriteSigned(System.UInt64* buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C60CC
    static void WriteSigned(uint64_t* buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Void AppendSigned(System.UInt64* buffer, System.Int32 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C60D8
    static void AppendSigned(uint64_t* buffer, int value, ByRef<int> bitposition, int bits);
    // static public System.Void AddSigned(System.Int32 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6128
    static void AddSigned(int value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void AddSigned(System.Int16 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C613C
    static void AddSigned(int16_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void AddSigned(System.SByte value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6154
    static void AddSigned(int8_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int32 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C616C
    static void InjectSigned(int value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.Int16 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6180
    static void InjectSigned(int16_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void InjectSigned(System.SByte value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6198
    static void InjectSigned(int8_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void PokeSigned(System.Int32 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C61B0
    static void PokeSigned(int value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void PokeSigned(System.Int16 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C61D8
    static void PokeSigned(int16_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void PokeSigned(System.SByte value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6204
    static void PokeSigned(int8_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Int32 ReadSigned(System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6230
    static int ReadSigned(uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Int32 PeekSigned(System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C624C
    static int PeekSigned(uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Append(System.UInt64* uPtr, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C60E4
    static void Append(uint64_t* uPtr, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.Void Write(System.UInt64* uPtr, System.UInt64 value, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C3A0C
    static void Write(uint64_t* uPtr, uint64_t value, ByRef<int> bitposition, int bits);
    // static public System.UInt64 Read(System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C3FAC
    static uint64_t Read(uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.UInt64 Read(System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6270
    static uint64_t Read_(uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Add(System.UInt64 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C62D8
    static void Add(uint64_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Add(System.UInt32 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C62FC
    static void Add(uint value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Add(System.UInt16 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6320
    static void Add(uint16_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Add(System.Byte value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6344
    static void Add(uint8_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void AddUnsigned(System.Int64 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6368
    static void AddUnsigned(int64_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void AddUnsigned(System.Int32 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C638C
    static void AddUnsigned(int value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void AddUnsigned(System.Int16 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C63B0
    static void AddUnsigned(int16_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void AddUnsigned(System.SByte value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C63D4
    static void AddUnsigned(int8_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Inject(System.UInt64 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C63F8
    static void Inject(uint64_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt32 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6408
    static void Inject(uint value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.UInt16 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6418
    static void Inject(uint16_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void Inject(System.Byte value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6428
    static void Inject(uint8_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int64 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6438
    static void InjectUnsigned(int64_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int32 value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6448
    static void InjectUnsigned(int value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int16 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6458
    static void InjectUnsigned(int16_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void InjectUnsigned(System.SByte value, System.UInt64* uPtr, ref System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C647C
    static void InjectUnsigned(int8_t value, uint64_t* uPtr, ByRef<int> bitposition, int bits);
    // static public System.Void Poke(System.UInt64 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C648C
    static void Poke(uint64_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Poke(System.UInt32 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C64B0
    static void Poke(uint value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Poke(System.UInt16 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C64D4
    static void Poke(uint16_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void Poke(System.Byte value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C64F8
    static void Poke(uint8_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int64 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C651C
    static void InjectUnsigned_(int64_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void InjectUnsigned(System.Int32 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6540
    static void InjectUnsigned_(int value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void PokeUnsigned(System.Int16 value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6564
    static void PokeUnsigned(int16_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void PokeUnsigned(System.SByte value, System.UInt64* uPtr, System.Int32 bitposition, System.Int32 bits)
    // Offset: 0x28C6588
    static void PokeUnsigned(int8_t value, uint64_t* uPtr, int bitposition, int bits);
    // static public System.Void ReadOutUnsafe(System.UInt64* sourcePtr, System.Int32 sourcePos, System.UInt64* targetPtr, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C65AC
    static void ReadOutUnsafe(uint64_t* sourcePtr, int sourcePos, uint64_t* targetPtr, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.UInt64[] source, System.Int32 sourcePos, System.Byte[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C6644
    static void ReadOutUnsafe(::ArrayW<uint64_t> source, int sourcePos, ::ArrayW<uint8_t> target, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.UInt64[] source, System.Int32 sourcePos, System.UInt32[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C670C
    static void ReadOutUnsafe(::ArrayW<uint64_t> source, int sourcePos, ::ArrayW<uint> target, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.UInt64[] source, System.Int32 sourcePos, System.UInt64[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C67D4
    static void ReadOutUnsafe(::ArrayW<uint64_t> source, int sourcePos, ::ArrayW<uint64_t> target, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.UInt32[] source, System.Int32 sourcePos, System.Byte[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C689C
    static void ReadOutUnsafe(::ArrayW<uint> source, int sourcePos, ::ArrayW<uint8_t> target, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.UInt32[] source, System.Int32 sourcePos, System.UInt32[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C6960
    static void ReadOutUnsafe(::ArrayW<uint> source, int sourcePos, ::ArrayW<uint> target, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.UInt32[] source, System.Int32 sourcePos, System.UInt64[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C6A24
    static void ReadOutUnsafe(::ArrayW<uint> source, int sourcePos, ::ArrayW<uint64_t> target, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.Byte[] source, System.Int32 sourcePos, System.UInt64[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C6AE8
    static void ReadOutUnsafe(::ArrayW<uint8_t> source, int sourcePos, ::ArrayW<uint64_t> target, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.Byte[] source, System.Int32 sourcePos, System.UInt32[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C6BAC
    static void ReadOutUnsafe(::ArrayW<uint8_t> source, int sourcePos, ::ArrayW<uint> target, ByRef<int> targetPos, int bits);
    // static public System.Void ReadOutUnsafe(System.Byte[] source, System.Int32 sourcePos, System.Byte[] target, ref System.Int32 targetPos, System.Int32 bits)
    // Offset: 0x28C6C70
    static void ReadOutUnsafe(::ArrayW<uint8_t> source, int sourcePos, ::ArrayW<uint8_t> target, ByRef<int> targetPos, int bits);
  }; // emotitron.Compression.ArraySerializeUnsafe
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::WriteSigned
// Il2CppName: WriteSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t*, int, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::WriteSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "WriteSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::AppendSigned
// Il2CppName: AppendSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t*, int, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::AppendSigned)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "AppendSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::AddSigned
// Il2CppName: AddSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::AddSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "AddSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::AddSigned
// Il2CppName: AddSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::AddSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "AddSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::AddSigned
// Il2CppName: AddSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::AddSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "AddSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectSigned
// Il2CppName: InjectSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::PokeSigned
// Il2CppName: PokeSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::PokeSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "PokeSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::PokeSigned
// Il2CppName: PokeSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::PokeSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "PokeSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::PokeSigned
// Il2CppName: PokeSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::PokeSigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "PokeSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadSigned
// Il2CppName: ReadSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadSigned)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::PeekSigned
// Il2CppName: PeekSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::PeekSigned)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "PeekSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t*, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::Append)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t*, uint64_t, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::Write)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, value, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::Read)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Read_
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Read_)> {
  static const MethodInfo* get() {
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::AddUnsigned
// Il2CppName: AddUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::AddUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "AddUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::AddUnsigned
// Il2CppName: AddUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::AddUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "AddUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::AddUnsigned
// Il2CppName: AddUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::AddUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "AddUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::AddUnsigned
// Il2CppName: AddUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::AddUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "AddUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Inject
// Il2CppName: Inject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::Inject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Inject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Poke
// Il2CppName: Poke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Poke)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Poke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Poke
// Il2CppName: Poke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Poke)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Poke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Poke
// Il2CppName: Poke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint16_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Poke)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Poke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::Poke
// Il2CppName: Poke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::Poke)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "Poke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned_
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned_
// Il2CppName: InjectUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::InjectUnsigned_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "InjectUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::PokeUnsigned
// Il2CppName: PokeUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::PokeUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "PokeUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::PokeUnsigned
// Il2CppName: PokeUnsigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int8_t, uint64_t*, int, int)>(&emotitron::Compression::ArraySerializeUnsafe::PokeUnsigned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    static auto* uPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* bitposition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "PokeUnsigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, uPtr, bitposition, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t*, int, uint64_t*, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* sourcePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourcePtr, sourcePos, targetPtr, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint64_t>, int, ::ArrayW<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint64_t>, int, ::ArrayW<uint>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint64_t>, int, ::ArrayW<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, int, ::ArrayW<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, int, ::ArrayW<uint>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, int, ::ArrayW<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int, ::ArrayW<uint64_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int, ::ArrayW<uint>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
// Writing MetadataGetter for method: emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe
// Il2CppName: ReadOutUnsafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int, ::ArrayW<uint8_t>, ByRef<int>, int)>(&emotitron::Compression::ArraySerializeUnsafe::ReadOutUnsafe)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* targetPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(emotitron::Compression::ArraySerializeUnsafe*), "ReadOutUnsafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, sourcePos, target, targetPos, bits});
  }
};
