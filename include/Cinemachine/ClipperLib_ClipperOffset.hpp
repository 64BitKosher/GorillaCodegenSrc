// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ClipperLib
#include "Cinemachine/ClipperLib.hpp"
// Including type: Cinemachine.ClipperLib/IntPoint
#include "Cinemachine/ClipperLib_IntPoint.hpp"
// Including type: Cinemachine.ClipperLib/DoublePoint
#include "Cinemachine/ClipperLib_DoublePoint.hpp"
// Including type: System.Double
#include "System/Double.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ClipperLib::ClipperOffset);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ClipperLib::ClipperOffset*, "Cinemachine", "ClipperLib/ClipperOffset");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ClipperLib/ClipperOffset
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperLib::ClipperOffset : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> m_destPolys
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* m_destPolys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> m_srcPoly
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* m_srcPoly;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> m_destPoly
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* m_destPoly;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.ClipperLib/DoublePoint> m_normals
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::DoublePoint>* m_normals;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::DoublePoint>*) == 0x8);
    // private System.Double m_delta
    // Size: 0x8
    // Offset: 0x30
    double m_delta;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_sinA
    // Size: 0x8
    // Offset: 0x38
    double m_sinA;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_sin
    // Size: 0x8
    // Offset: 0x40
    double m_sin;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_cos
    // Size: 0x8
    // Offset: 0x48
    double m_cos;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_miterLim
    // Size: 0x8
    // Offset: 0x50
    double m_miterLim;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_StepsPerRad
    // Size: 0x8
    // Offset: 0x58
    double m_StepsPerRad;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private Cinemachine.ClipperLib/IntPoint m_lowest
    // Size: 0x10
    // Offset: 0x60
    ::Cinemachine::ClipperLib::IntPoint m_lowest;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::IntPoint) == 0x10);
    // private Cinemachine.ClipperLib/PolyNode m_polyNodes
    // Size: 0x8
    // Offset: 0x70
    ::Cinemachine::ClipperLib::PolyNode* m_polyNodes;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::PolyNode*) == 0x8);
    // private System.Double <ArcTolerance>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    double ArcTolerance;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double <MiterLimit>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    double MiterLimit;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // static field const value: static private System.Double two_pi
    static constexpr const double two_pi = 6.283185307179586;
    // Get static field: static private System.Double two_pi
    static double _get_two_pi();
    // Set static field: static private System.Double two_pi
    static void _set_two_pi(double value);
    // static field const value: static private System.Double def_arc_tolerance
    static constexpr const double def_arc_tolerance = 0.25;
    // Get static field: static private System.Double def_arc_tolerance
    static double _get_def_arc_tolerance();
    // Set static field: static private System.Double def_arc_tolerance
    static void _set_def_arc_tolerance(double value);
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> m_destPolys
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*& dyn_m_destPolys();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> m_srcPoly
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*& dyn_m_srcPoly();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> m_destPoly
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*& dyn_m_destPoly();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/DoublePoint> m_normals
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::DoublePoint>*& dyn_m_normals();
    // Get instance field reference: private System.Double m_delta
    [[deprecated("Use field access instead!")]] double& dyn_m_delta();
    // Get instance field reference: private System.Double m_sinA
    [[deprecated("Use field access instead!")]] double& dyn_m_sinA();
    // Get instance field reference: private System.Double m_sin
    [[deprecated("Use field access instead!")]] double& dyn_m_sin();
    // Get instance field reference: private System.Double m_cos
    [[deprecated("Use field access instead!")]] double& dyn_m_cos();
    // Get instance field reference: private System.Double m_miterLim
    [[deprecated("Use field access instead!")]] double& dyn_m_miterLim();
    // Get instance field reference: private System.Double m_StepsPerRad
    [[deprecated("Use field access instead!")]] double& dyn_m_StepsPerRad();
    // Get instance field reference: private Cinemachine.ClipperLib/IntPoint m_lowest
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::IntPoint& dyn_m_lowest();
    // Get instance field reference: private Cinemachine.ClipperLib/PolyNode m_polyNodes
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyNode*& dyn_m_polyNodes();
    // Get instance field reference: private System.Double <ArcTolerance>k__BackingField
    [[deprecated("Use field access instead!")]] double& dyn_$ArcTolerance$k__BackingField();
    // Get instance field reference: private System.Double <MiterLimit>k__BackingField
    [[deprecated("Use field access instead!")]] double& dyn_$MiterLimit$k__BackingField();
    // public System.Double get_ArcTolerance()
    // Offset: 0x2AC7C0C
    double get_ArcTolerance();
    // public System.Void set_ArcTolerance(System.Double value)
    // Offset: 0x2AC7C14
    void set_ArcTolerance(double value);
    // public System.Double get_MiterLimit()
    // Offset: 0x2AC7C1C
    double get_MiterLimit();
    // public System.Void set_MiterLimit(System.Double value)
    // Offset: 0x2AC7C24
    void set_MiterLimit(double value);
    // public System.Void .ctor(System.Double miterLimit, System.Double arcTolerance)
    // Offset: 0x2AC7C2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperLib::ClipperOffset* New_ctor(double miterLimit, double arcTolerance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperOffset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperLib::ClipperOffset*, creationType>(miterLimit, arcTolerance)));
    }
    // public System.Void Clear()
    // Offset: 0x2AC7D0C
    void Clear();
    // static System.Int64 Round(System.Double value)
    // Offset: 0x2AC7D84
    static int64_t Round(double value);
    // public System.Void AddPath(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> path, Cinemachine.ClipperLib/JoinType joinType, Cinemachine.ClipperLib/EndType endType)
    // Offset: 0x2AC7DB8
    void AddPath(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, ::Cinemachine::ClipperLib::JoinType joinType, ::Cinemachine::ClipperLib::EndType endType);
    // public System.Void AddPaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> paths, Cinemachine.ClipperLib/JoinType joinType, Cinemachine.ClipperLib/EndType endType)
    // Offset: 0x2AC8248
    void AddPaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* paths, ::Cinemachine::ClipperLib::JoinType joinType, ::Cinemachine::ClipperLib::EndType endType);
    // private System.Void FixOrientations()
    // Offset: 0x2AC839C
    void FixOrientations();
    // static Cinemachine.ClipperLib/DoublePoint GetUnitNormal(Cinemachine.ClipperLib/IntPoint pt1, Cinemachine.ClipperLib/IntPoint pt2)
    // Offset: 0x2AC8528
    static ::Cinemachine::ClipperLib::DoublePoint GetUnitNormal(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2);
    // private System.Void DoOffset(System.Double delta)
    // Offset: 0x2AC85F4
    void DoOffset(double delta);
    // public System.Void Execute(ref System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> solution, System.Double delta)
    // Offset: 0x2ACA8B4
    void Execute(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*> solution, double delta);
    // public System.Void Execute(ref Cinemachine.ClipperLib/PolyTree solution, System.Double delta)
    // Offset: 0x2ACAC94
    void Execute(ByRef<::Cinemachine::ClipperLib::PolyTree*> solution, double delta);
    // private System.Void OffsetPoint(System.Int32 j, ref System.Int32 k, Cinemachine.ClipperLib/JoinType jointype)
    // Offset: 0x2AC98C0
    void OffsetPoint(int j, ByRef<int> k, ::Cinemachine::ClipperLib::JoinType jointype);
    // System.Void DoSquare(System.Int32 j, System.Int32 k)
    // Offset: 0x2ACA00C
    void DoSquare(int j, int k);
    // System.Void DoMiter(System.Int32 j, System.Int32 k, System.Double r)
    // Offset: 0x2ACB1B4
    void DoMiter(int j, int k, double r);
    // System.Void DoRound(System.Int32 j, System.Int32 k)
    // Offset: 0x2ACA47C
    void DoRound(int j, int k);
  }; // Cinemachine.ClipperLib/ClipperOffset
  #pragma pack(pop)
  static check_size<sizeof(ClipperLib::ClipperOffset), 128 + sizeof(double)> __Cinemachine_ClipperLib_ClipperOffsetSizeCheck;
  static_assert(sizeof(ClipperLib::ClipperOffset) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::get_ArcTolerance
// Il2CppName: get_ArcTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Cinemachine::ClipperLib::ClipperOffset::*)()>(&Cinemachine::ClipperLib::ClipperOffset::get_ArcTolerance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "get_ArcTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::set_ArcTolerance
// Il2CppName: set_ArcTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(double)>(&Cinemachine::ClipperLib::ClipperOffset::set_ArcTolerance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "set_ArcTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::get_MiterLimit
// Il2CppName: get_MiterLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Cinemachine::ClipperLib::ClipperOffset::*)()>(&Cinemachine::ClipperLib::ClipperOffset::get_MiterLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "get_MiterLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::set_MiterLimit
// Il2CppName: set_MiterLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(double)>(&Cinemachine::ClipperLib::ClipperOffset::set_MiterLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "set_MiterLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)()>(&Cinemachine::ClipperLib::ClipperOffset::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&Cinemachine::ClipperLib::ClipperOffset::Round)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::AddPath
// Il2CppName: AddPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, ::Cinemachine::ClipperLib::JoinType, ::Cinemachine::ClipperLib::EndType)>(&Cinemachine::ClipperLib::ClipperOffset::AddPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* joinType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/JoinType")->byval_arg;
    static auto* endType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/EndType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "AddPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, joinType, endType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::AddPaths
// Il2CppName: AddPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, ::Cinemachine::ClipperLib::JoinType, ::Cinemachine::ClipperLib::EndType)>(&Cinemachine::ClipperLib::ClipperOffset::AddPaths)> {
  static const MethodInfo* get() {
    static auto* paths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    static auto* joinType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/JoinType")->byval_arg;
    static auto* endType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/EndType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "AddPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paths, joinType, endType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::FixOrientations
// Il2CppName: FixOrientations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)()>(&Cinemachine::ClipperLib::ClipperOffset::FixOrientations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "FixOrientations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::GetUnitNormal
// Il2CppName: GetUnitNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::DoublePoint (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::ClipperOffset::GetUnitNormal)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "GetUnitNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::DoOffset
// Il2CppName: DoOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(double)>(&Cinemachine::ClipperLib::ClipperOffset::DoOffset)> {
  static const MethodInfo* get() {
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "DoOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delta});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*>, double)>(&Cinemachine::ClipperLib::ClipperOffset::Execute)> {
  static const MethodInfo* get() {
    static auto* solution = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->this_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solution, delta});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(ByRef<::Cinemachine::ClipperLib::PolyTree*>, double)>(&Cinemachine::ClipperLib::ClipperOffset::Execute)> {
  static const MethodInfo* get() {
    static auto* solution = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyTree")->this_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solution, delta});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::OffsetPoint
// Il2CppName: OffsetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(int, ByRef<int>, ::Cinemachine::ClipperLib::JoinType)>(&Cinemachine::ClipperLib::ClipperOffset::OffsetPoint)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* jointype = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/JoinType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "OffsetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, k, jointype});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::DoSquare
// Il2CppName: DoSquare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(int, int)>(&Cinemachine::ClipperLib::ClipperOffset::DoSquare)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "DoSquare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, k});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::DoMiter
// Il2CppName: DoMiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(int, int, double)>(&Cinemachine::ClipperLib::ClipperOffset::DoMiter)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "DoMiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, k, r});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperOffset::DoRound
// Il2CppName: DoRound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperOffset::*)(int, int)>(&Cinemachine::ClipperLib::ClipperOffset::DoRound)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperOffset*), "DoRound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, k});
  }
};
