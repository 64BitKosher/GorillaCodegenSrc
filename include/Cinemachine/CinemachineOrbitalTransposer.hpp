// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineTransposer
#include "Cinemachine/CinemachineTransposer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine::Utility
namespace Cinemachine::Utility {
  // Forward declaring type: HeadingTracker
  class HeadingTracker;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: ICinemachineCamera because it is already included!
  // Forward declaring type: CameraState
  struct CameraState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineOrbitalTransposer
  class CinemachineOrbitalTransposer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineOrbitalTransposer);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineOrbitalTransposer*, "Cinemachine", "CinemachineOrbitalTransposer");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x190
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineOrbitalTransposer
  // [TokenAttribute] Offset: FFFFFFFF
  // [SaveDuringPlayAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: FFFFFFFF
  class CinemachineOrbitalTransposer : public ::Cinemachine::CinemachineTransposer {
    public:
    // Nested type: ::Cinemachine::CinemachineOrbitalTransposer::Heading
    struct Heading;
    // Nested type: ::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate
    class UpdateHeadingDelegate;
    // Nested type: ::Cinemachine::CinemachineOrbitalTransposer::$$c
    class $$c;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineOrbitalTransposer/Heading
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: FFFFFFFF
    struct Heading/*, public ::System::ValueType*/ {
      public:
      // Nested type: ::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition
      struct HeadingDefinition;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition
      // [TokenAttribute] Offset: FFFFFFFF
      // [DocumentationSortingAttribute] Offset: FFFFFFFF
      struct HeadingDefinition/*, public ::System::Enum*/ {
        public:
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: HeadingDefinition
        constexpr HeadingDefinition(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator ::System::Enum
        operator ::System::Enum() noexcept {
          return *reinterpret_cast<::System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition PositionDelta
        static constexpr const int PositionDelta = 0;
        // Get static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition PositionDelta
        static ::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition _get_PositionDelta();
        // Set static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition PositionDelta
        static void _set_PositionDelta(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition value);
        // static field const value: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition Velocity
        static constexpr const int Velocity = 1;
        // Get static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition Velocity
        static ::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition _get_Velocity();
        // Set static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition Velocity
        static void _set_Velocity(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition value);
        // static field const value: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition TargetForward
        static constexpr const int TargetForward = 2;
        // Get static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition TargetForward
        static ::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition _get_TargetForward();
        // Set static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition TargetForward
        static void _set_TargetForward(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition value);
        // static field const value: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition WorldForward
        static constexpr const int WorldForward = 3;
        // Get static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition WorldForward
        static ::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition _get_WorldForward();
        // Set static field: static public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition WorldForward
        static void _set_WorldForward(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition value);
        // Get instance field reference: public System.Int32 value__
        [[deprecated("Use field access instead!")]] int& dyn_value__();
      }; // Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition
      #pragma pack(pop)
      static check_size<sizeof(CinemachineOrbitalTransposer::Heading::HeadingDefinition), 0 + sizeof(int)> __Cinemachine_CinemachineOrbitalTransposer_Heading_HeadingDefinitionSizeCheck;
      static_assert(sizeof(CinemachineOrbitalTransposer::Heading::HeadingDefinition) == 0x4);
      public:
      // public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition m_Definition
      // Size: 0x4
      // Offset: 0x0
      ::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition m_Definition;
      // Field size check
      static_assert(sizeof(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition) == 0x4);
      // public System.Int32 m_VelocityFilterStrength
      // Size: 0x4
      // Offset: 0x4
      int m_VelocityFilterStrength;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Single m_Bias
      // Size: 0x4
      // Offset: 0x8
      float m_Bias;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Heading
      constexpr Heading(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition m_Definition_ = {}, int m_VelocityFilterStrength_ = {}, float m_Bias_ = {}) noexcept : m_Definition{m_Definition_}, m_VelocityFilterStrength{m_VelocityFilterStrength_}, m_Bias{m_Bias_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition m_Definition
      [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition& dyn_m_Definition();
      // Get instance field reference: public System.Int32 m_VelocityFilterStrength
      [[deprecated("Use field access instead!")]] int& dyn_m_VelocityFilterStrength();
      // Get instance field reference: public System.Single m_Bias
      [[deprecated("Use field access instead!")]] float& dyn_m_Bias();
      // public System.Void .ctor(Cinemachine.CinemachineOrbitalTransposer/Heading/HeadingDefinition def, System.Int32 filterStrength, System.Single bias)
      // Offset: 0x2AA2F58
      // ABORTED: conflicts with another method.  Heading(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition def, int filterStrength, float bias);
    }; // Cinemachine.CinemachineOrbitalTransposer/Heading
    #pragma pack(pop)
    static check_size<sizeof(CinemachineOrbitalTransposer::Heading), 8 + sizeof(float)> __Cinemachine_CinemachineOrbitalTransposer_HeadingSizeCheck;
    static_assert(sizeof(CinemachineOrbitalTransposer::Heading) == 0xC);
    public:
    // public Cinemachine.CinemachineOrbitalTransposer/Heading m_Heading
    // Size: 0xC
    // Offset: 0xA0
    ::Cinemachine::CinemachineOrbitalTransposer::Heading m_Heading;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineOrbitalTransposer::Heading) == 0xC);
    // public Cinemachine.AxisState/Recentering m_RecenterToTargetHeading
    // Size: 0x20
    // Offset: 0xAC
    ::Cinemachine::AxisState::Recentering m_RecenterToTargetHeading;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState::Recentering) == 0x20);
    // Padding between fields: m_RecenterToTargetHeading and: m_XAxis
    char __padding1[0x4] = {};
    // public Cinemachine.AxisState m_XAxis
    // Size: 0x6E
    // Offset: 0xD0
    ::Cinemachine::AxisState m_XAxis;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState) == 0x6E);
    // Padding between fields: m_XAxis and: m_LegacyRadius
    char __padding2[0x2] = {};
    // private System.Single m_LegacyRadius
    // Size: 0x4
    // Offset: 0x140
    float m_LegacyRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LegacyHeightOffset
    // Size: 0x4
    // Offset: 0x144
    float m_LegacyHeightOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LegacyHeadingBias
    // Size: 0x4
    // Offset: 0x148
    float m_LegacyHeadingBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean m_HeadingIsSlave
    // Size: 0x1
    // Offset: 0x14C
    bool m_HeadingIsSlave;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HeadingIsSlave and: HeadingUpdater
    char __padding6[0x3] = {};
    // Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate HeadingUpdater
    // Size: 0x8
    // Offset: 0x150
    ::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate* HeadingUpdater;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate*) == 0x8);
    // private UnityEngine.Vector3 m_LastTargetPosition
    // Size: 0xC
    // Offset: 0x158
    ::UnityEngine::Vector3 m_LastTargetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: m_LastTargetPosition and: mHeadingTracker
    char __padding8[0x4] = {};
    // private Cinemachine.Utility.HeadingTracker mHeadingTracker
    // Size: 0x8
    // Offset: 0x168
    ::Cinemachine::Utility::HeadingTracker* mHeadingTracker;
    // Field size check
    static_assert(sizeof(::Cinemachine::Utility::HeadingTracker*) == 0x8);
    // private UnityEngine.Rigidbody m_TargetRigidBody
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::Rigidbody* m_TargetRigidBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Transform m_PreviousTarget
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::Transform* m_PreviousTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 m_LastCameraPosition
    // Size: 0xC
    // Offset: 0x180
    ::UnityEngine::Vector3 m_LastCameraPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_LastHeading
    // Size: 0x4
    // Offset: 0x18C
    float m_LastHeading;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Cinemachine.CinemachineOrbitalTransposer/Heading m_Heading
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineOrbitalTransposer::Heading& dyn_m_Heading();
    // Get instance field reference: public Cinemachine.AxisState/Recentering m_RecenterToTargetHeading
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& dyn_m_RecenterToTargetHeading();
    // Get instance field reference: public Cinemachine.AxisState m_XAxis
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& dyn_m_XAxis();
    // Get instance field reference: private System.Single m_LegacyRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_LegacyRadius();
    // Get instance field reference: private System.Single m_LegacyHeightOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_LegacyHeightOffset();
    // Get instance field reference: private System.Single m_LegacyHeadingBias
    [[deprecated("Use field access instead!")]] float& dyn_m_LegacyHeadingBias();
    // Get instance field reference: public System.Boolean m_HeadingIsSlave
    [[deprecated("Use field access instead!")]] bool& dyn_m_HeadingIsSlave();
    // Get instance field reference: Cinemachine.CinemachineOrbitalTransposer/UpdateHeadingDelegate HeadingUpdater
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineOrbitalTransposer::UpdateHeadingDelegate*& dyn_HeadingUpdater();
    // Get instance field reference: private UnityEngine.Vector3 m_LastTargetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LastTargetPosition();
    // Get instance field reference: private Cinemachine.Utility.HeadingTracker mHeadingTracker
    [[deprecated("Use field access instead!")]] ::Cinemachine::Utility::HeadingTracker*& dyn_mHeadingTracker();
    // Get instance field reference: private UnityEngine.Rigidbody m_TargetRigidBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_m_TargetRigidBody();
    // Get instance field reference: private UnityEngine.Transform m_PreviousTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_PreviousTarget();
    // Get instance field reference: private UnityEngine.Vector3 m_LastCameraPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LastCameraPosition();
    // Get instance field reference: private System.Single m_LastHeading
    [[deprecated("Use field access instead!")]] float& dyn_m_LastHeading();
    // public System.Single UpdateHeading(System.Single deltaTime, UnityEngine.Vector3 up, ref Cinemachine.AxisState axis)
    // Offset: 0x2AA1960
    float UpdateHeading(float deltaTime, ::UnityEngine::Vector3 up, ByRef<::Cinemachine::AxisState> axis);
    // public System.Single UpdateHeading(System.Single deltaTime, UnityEngine.Vector3 up, ref Cinemachine.AxisState axis, ref Cinemachine.AxisState/Recentering recentering, System.Boolean isLive)
    // Offset: 0x2AA196C
    float UpdateHeading(float deltaTime, ::UnityEngine::Vector3 up, ByRef<::Cinemachine::AxisState> axis, ByRef<::Cinemachine::AxisState::Recentering> recentering, bool isLive);
    // private System.Void OnEnable()
    // Offset: 0x2AA1E94
    void OnEnable();
    // public System.Void UpdateInputAxisProvider()
    // Offset: 0x2AA1F00
    void UpdateInputAxisProvider();
    // public System.Single GetAxisClosestValue(UnityEngine.Vector3 cameraPos, UnityEngine.Vector3 up)
    // Offset: 0x2AA2158
    float GetAxisClosestValue(::UnityEngine::Vector3 cameraPos, ::UnityEngine::Vector3 up);
    // private System.Single GetTargetHeading(System.Single currentHeading, UnityEngine.Quaternion targetOrientation)
    // Offset: 0x2AA1AB8
    float GetTargetHeading(float currentHeading, ::UnityEngine::Quaternion targetOrientation);
    // protected override System.Void OnValidate()
    // Offset: 0x2AA1880
    // Implemented from: Cinemachine.CinemachineTransposer
    // Base method: System.Void CinemachineTransposer::OnValidate()
    void OnValidate();
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x2AA1FD4
    // Implemented from: Cinemachine.CinemachineTransposer
    // Base method: System.Void CinemachineTransposer::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x2AA20C0
    // Implemented from: Cinemachine.CinemachineTransposer
    // Base method: System.Void CinemachineTransposer::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public override System.Boolean OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime, ref Cinemachine.CinemachineVirtualCameraBase/TransitionParams transitionParams)
    // Offset: 0x2AA2420
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime, ref Cinemachine.CinemachineVirtualCameraBase/TransitionParams transitionParams)
    bool OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams> transitionParams);
    // public override System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x2AA25B8
    // Implemented from: Cinemachine.CinemachineTransposer
    // Base method: System.Void CinemachineTransposer::MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // public override UnityEngine.Vector3 GetTargetCameraPosition(UnityEngine.Vector3 worldUp)
    // Offset: 0x2AA2B7C
    // Implemented from: Cinemachine.CinemachineTransposer
    // Base method: UnityEngine.Vector3 CinemachineTransposer::GetTargetCameraPosition(UnityEngine.Vector3 worldUp)
    ::UnityEngine::Vector3 GetTargetCameraPosition(::UnityEngine::Vector3 worldUp);
    // public override System.Boolean get_RequiresUserInput()
    // Offset: 0x2AA2D48
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::get_RequiresUserInput()
    bool get_RequiresUserInput();
    // public System.Void .ctor()
    // Offset: 0x2AA2D50
    // Implemented from: Cinemachine.CinemachineTransposer
    // Base method: System.Void CinemachineTransposer::.ctor()
    // Base method: System.Void CinemachineComponentBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineOrbitalTransposer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineOrbitalTransposer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineOrbitalTransposer*, creationType>()));
    }
  }; // Cinemachine.CinemachineOrbitalTransposer
  #pragma pack(pop)
  static check_size<sizeof(CinemachineOrbitalTransposer), 396 + sizeof(float)> __Cinemachine_CinemachineOrbitalTransposerSizeCheck;
  static_assert(sizeof(CinemachineOrbitalTransposer) == 0x190);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineOrbitalTransposer::Heading, "Cinemachine", "CinemachineOrbitalTransposer/Heading");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineOrbitalTransposer::Heading::HeadingDefinition, "Cinemachine", "CinemachineOrbitalTransposer/Heading/HeadingDefinition");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::UpdateHeading
// Il2CppName: UpdateHeading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineOrbitalTransposer::*)(float, ::UnityEngine::Vector3, ByRef<::Cinemachine::AxisState>)>(&Cinemachine::CinemachineOrbitalTransposer::UpdateHeading)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("Cinemachine", "AxisState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "UpdateHeading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, up, axis});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::UpdateHeading
// Il2CppName: UpdateHeading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineOrbitalTransposer::*)(float, ::UnityEngine::Vector3, ByRef<::Cinemachine::AxisState>, ByRef<::Cinemachine::AxisState::Recentering>, bool)>(&Cinemachine::CinemachineOrbitalTransposer::UpdateHeading)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("Cinemachine", "AxisState")->this_arg;
    static auto* recentering = &::il2cpp_utils::GetClassFromName("Cinemachine", "AxisState/Recentering")->this_arg;
    static auto* isLive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "UpdateHeading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, up, axis, recentering, isLive});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineOrbitalTransposer::*)()>(&Cinemachine::CinemachineOrbitalTransposer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::UpdateInputAxisProvider
// Il2CppName: UpdateInputAxisProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineOrbitalTransposer::*)()>(&Cinemachine::CinemachineOrbitalTransposer::UpdateInputAxisProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "UpdateInputAxisProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::GetAxisClosestValue
// Il2CppName: GetAxisClosestValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineOrbitalTransposer::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineOrbitalTransposer::GetAxisClosestValue)> {
  static const MethodInfo* get() {
    static auto* cameraPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "GetAxisClosestValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraPos, up});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::GetTargetHeading
// Il2CppName: GetTargetHeading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineOrbitalTransposer::*)(float, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineOrbitalTransposer::GetTargetHeading)> {
  static const MethodInfo* get() {
    static auto* currentHeading = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetOrientation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "GetTargetHeading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentHeading, targetOrientation});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineOrbitalTransposer::*)()>(&Cinemachine::CinemachineOrbitalTransposer::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineOrbitalTransposer::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineOrbitalTransposer::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineOrbitalTransposer::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineOrbitalTransposer::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineOrbitalTransposer::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams>)>(&Cinemachine::CinemachineOrbitalTransposer::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* transitionParams = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase/TransitionParams")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime, transitionParams});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineOrbitalTransposer::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineOrbitalTransposer::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::GetTargetCameraPosition
// Il2CppName: GetTargetCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineOrbitalTransposer::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineOrbitalTransposer::GetTargetCameraPosition)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "GetTargetCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::get_RequiresUserInput
// Il2CppName: get_RequiresUserInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineOrbitalTransposer::*)()>(&Cinemachine::CinemachineOrbitalTransposer::get_RequiresUserInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineOrbitalTransposer*), "get_RequiresUserInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineOrbitalTransposer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
