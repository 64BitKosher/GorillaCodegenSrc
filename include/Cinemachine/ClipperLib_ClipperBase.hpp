// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ClipperLib
#include "Cinemachine/ClipperLib.hpp"
// Including type: System.Double
#include "System/Double.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: Cinemachine.ClipperLib/IntPoint
#include "Cinemachine/ClipperLib_IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ClipperLib::ClipperBase);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ClipperLib::ClipperBase*, "Cinemachine", "ClipperLib/ClipperBase");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x43
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ClipperLib/ClipperBase
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperLib::ClipperBase : public ::Il2CppObject {
    public:
    public:
    // Cinemachine.ClipperLib/LocalMinima m_MinimaList
    // Size: 0x8
    // Offset: 0x10
    ::Cinemachine::ClipperLib::LocalMinima* m_MinimaList;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::LocalMinima*) == 0x8);
    // Cinemachine.ClipperLib/LocalMinima m_CurrentLM
    // Size: 0x8
    // Offset: 0x18
    ::Cinemachine::ClipperLib::LocalMinima* m_CurrentLM;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::LocalMinima*) == 0x8);
    // System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/TEdge>> m_edges
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::TEdge*>*>* m_edges;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::TEdge*>*>*) == 0x8);
    // Cinemachine.ClipperLib/Scanbeam m_Scanbeam
    // Size: 0x8
    // Offset: 0x28
    ::Cinemachine::ClipperLib::Scanbeam* m_Scanbeam;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::Scanbeam*) == 0x8);
    // System.Collections.Generic.List`1<Cinemachine.ClipperLib/OutRec> m_PolyOuts
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::OutRec*>* m_PolyOuts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::OutRec*>*) == 0x8);
    // Cinemachine.ClipperLib/TEdge m_ActiveEdges
    // Size: 0x8
    // Offset: 0x38
    ::Cinemachine::ClipperLib::TEdge* m_ActiveEdges;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::TEdge*) == 0x8);
    // System.Boolean m_UseFullRange
    // Size: 0x1
    // Offset: 0x40
    bool m_UseFullRange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_HasOpenPaths
    // Size: 0x1
    // Offset: 0x41
    bool m_HasOpenPaths;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <PreserveCollinear>k__BackingField
    // Size: 0x1
    // Offset: 0x42
    bool PreserveCollinear;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static System.Double horizontal
    static constexpr const double horizontal = -3.4e+38;
    // Get static field: static System.Double horizontal
    static double _get_horizontal();
    // Set static field: static System.Double horizontal
    static void _set_horizontal(double value);
    // static field const value: static System.Int32 Skip
    static constexpr const int Skip = -2;
    // Get static field: static System.Int32 Skip
    static int _get_Skip();
    // Set static field: static System.Int32 Skip
    static void _set_Skip(int value);
    // static field const value: static System.Int32 Unassigned
    static constexpr const int Unassigned = -1;
    // Get static field: static System.Int32 Unassigned
    static int _get_Unassigned();
    // Set static field: static System.Int32 Unassigned
    static void _set_Unassigned(int value);
    // static field const value: static System.Double tolerance
    static constexpr const double tolerance = 1e-20;
    // Get static field: static System.Double tolerance
    static double _get_tolerance();
    // Set static field: static System.Double tolerance
    static void _set_tolerance(double value);
    // static field const value: static public System.Int64 loRange
    static constexpr const int64_t loRange = 1073741823;
    // Get static field: static public System.Int64 loRange
    static int64_t _get_loRange();
    // Set static field: static public System.Int64 loRange
    static void _set_loRange(int64_t value);
    // static field const value: static public System.Int64 hiRange
    static constexpr const int64_t hiRange = 4611686018427387903;
    // Get static field: static public System.Int64 hiRange
    static int64_t _get_hiRange();
    // Set static field: static public System.Int64 hiRange
    static void _set_hiRange(int64_t value);
    // Get instance field reference: Cinemachine.ClipperLib/LocalMinima m_MinimaList
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::LocalMinima*& dyn_m_MinimaList();
    // Get instance field reference: Cinemachine.ClipperLib/LocalMinima m_CurrentLM
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::LocalMinima*& dyn_m_CurrentLM();
    // Get instance field reference: System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/TEdge>> m_edges
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::TEdge*>*>*& dyn_m_edges();
    // Get instance field reference: Cinemachine.ClipperLib/Scanbeam m_Scanbeam
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::Scanbeam*& dyn_m_Scanbeam();
    // Get instance field reference: System.Collections.Generic.List`1<Cinemachine.ClipperLib/OutRec> m_PolyOuts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::OutRec*>*& dyn_m_PolyOuts();
    // Get instance field reference: Cinemachine.ClipperLib/TEdge m_ActiveEdges
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& dyn_m_ActiveEdges();
    // Get instance field reference: System.Boolean m_UseFullRange
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseFullRange();
    // Get instance field reference: System.Boolean m_HasOpenPaths
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasOpenPaths();
    // Get instance field reference: private System.Boolean <PreserveCollinear>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PreserveCollinear$k__BackingField();
    // static System.Boolean near_zero(System.Double val)
    // Offset: 0x2ABCC1C
    static bool near_zero(double val);
    // public System.Boolean get_PreserveCollinear()
    // Offset: 0x2ABCC44
    bool get_PreserveCollinear();
    // public System.Void set_PreserveCollinear(System.Boolean value)
    // Offset: 0x2ABCC4C
    void set_PreserveCollinear(bool value);
    // public System.Void Swap(ref System.Int64 val1, ref System.Int64 val2)
    // Offset: 0x2ABCC58
    void Swap(ByRef<int64_t> val1, ByRef<int64_t> val2);
    // static System.Boolean IsHorizontal(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2ABCC6C
    static bool IsHorizontal(::Cinemachine::ClipperLib::TEdge* e);
    // System.Boolean PointIsVertex(Cinemachine.ClipperLib/IntPoint pt, Cinemachine.ClipperLib/OutPt pp)
    // Offset: 0x2ABCC8C
    bool PointIsVertex(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::OutPt* pp);
    // System.Boolean PointOnLineSegment(Cinemachine.ClipperLib/IntPoint pt, Cinemachine.ClipperLib/IntPoint linePt1, Cinemachine.ClipperLib/IntPoint linePt2, System.Boolean UseFullRange)
    // Offset: 0x2ABCCE4
    bool PointOnLineSegment(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::IntPoint linePt1, ::Cinemachine::ClipperLib::IntPoint linePt2, bool UseFullRange);
    // System.Boolean PointOnPolygon(Cinemachine.ClipperLib/IntPoint pt, Cinemachine.ClipperLib/OutPt pp, System.Boolean UseFullRange)
    // Offset: 0x2ABCE0C
    bool PointOnPolygon(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::OutPt* pp, bool UseFullRange);
    // static System.Boolean SlopesEqual(Cinemachine.ClipperLib/TEdge e1, Cinemachine.ClipperLib/TEdge e2, System.Boolean UseFullRange)
    // Offset: 0x2ABCE80
    static bool SlopesEqual(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2, bool UseFullRange);
    // static System.Boolean SlopesEqual(Cinemachine.ClipperLib/IntPoint pt1, Cinemachine.ClipperLib/IntPoint pt2, Cinemachine.ClipperLib/IntPoint pt3, System.Boolean UseFullRange)
    // Offset: 0x2ABCF04
    static bool SlopesEqual(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, ::Cinemachine::ClipperLib::IntPoint pt3, bool UseFullRange);
    // static System.Boolean SlopesEqual(Cinemachine.ClipperLib/IntPoint pt1, Cinemachine.ClipperLib/IntPoint pt2, Cinemachine.ClipperLib/IntPoint pt3, Cinemachine.ClipperLib/IntPoint pt4, System.Boolean UseFullRange)
    // Offset: 0x2ABCF98
    static bool SlopesEqual(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, ::Cinemachine::ClipperLib::IntPoint pt3, ::Cinemachine::ClipperLib::IntPoint pt4, bool UseFullRange);
    // System.Void .ctor()
    // Offset: 0x2ABD030
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperLib::ClipperBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperLib::ClipperBase*, creationType>()));
    }
    // public System.Void Clear()
    // Offset: 0x2ABD0E0
    void Clear();
    // private System.Void DisposeLocalMinimaList()
    // Offset: 0x2ABD24C
    void DisposeLocalMinimaList();
    // private System.Void RangeTest(Cinemachine.ClipperLib/IntPoint Pt, ref System.Boolean useFullRange)
    // Offset: 0x2ABD2A8
    void RangeTest(::Cinemachine::ClipperLib::IntPoint Pt, ByRef<bool> useFullRange);
    // private System.Void InitEdge(Cinemachine.ClipperLib/TEdge e, Cinemachine.ClipperLib/TEdge eNext, Cinemachine.ClipperLib/TEdge ePrev, Cinemachine.ClipperLib/IntPoint pt)
    // Offset: 0x2ABD37C
    void InitEdge(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::TEdge* eNext, ::Cinemachine::ClipperLib::TEdge* ePrev, ::Cinemachine::ClipperLib::IntPoint pt);
    // private System.Void InitEdge2(Cinemachine.ClipperLib/TEdge e, Cinemachine.ClipperLib/PolyType polyType)
    // Offset: 0x2ABD3DC
    void InitEdge2(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::PolyType polyType);
    // private Cinemachine.ClipperLib/TEdge FindNextLocMin(Cinemachine.ClipperLib/TEdge E)
    // Offset: 0x2ABD498
    ::Cinemachine::ClipperLib::TEdge* FindNextLocMin(::Cinemachine::ClipperLib::TEdge* E);
    // private Cinemachine.ClipperLib/TEdge ProcessBound(Cinemachine.ClipperLib/TEdge E, System.Boolean LeftBoundIsForward)
    // Offset: 0x2ABD590
    ::Cinemachine::ClipperLib::TEdge* ProcessBound(::Cinemachine::ClipperLib::TEdge* E, bool LeftBoundIsForward);
    // public System.Boolean AddPath(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> pg, Cinemachine.ClipperLib/PolyType polyType, System.Boolean Closed)
    // Offset: 0x2ABDA7C
    bool AddPath(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* pg, ::Cinemachine::ClipperLib::PolyType polyType, bool Closed);
    // public System.Boolean AddPaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> ppg, Cinemachine.ClipperLib/PolyType polyType, System.Boolean closed)
    // Offset: 0x2ABE5E8
    bool AddPaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* ppg, ::Cinemachine::ClipperLib::PolyType polyType, bool closed);
    // System.Boolean Pt2IsBetweenPt1AndPt3(Cinemachine.ClipperLib/IntPoint pt1, Cinemachine.ClipperLib/IntPoint pt2, Cinemachine.ClipperLib/IntPoint pt3)
    // Offset: 0x2ABE580
    bool Pt2IsBetweenPt1AndPt3(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, ::Cinemachine::ClipperLib::IntPoint pt3);
    // private Cinemachine.ClipperLib/TEdge RemoveEdge(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2ABE51C
    ::Cinemachine::ClipperLib::TEdge* RemoveEdge(::Cinemachine::ClipperLib::TEdge* e);
    // private System.Void SetDx(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2ABD44C
    void SetDx(::Cinemachine::ClipperLib::TEdge* e);
    // private System.Void InsertLocalMinima(Cinemachine.ClipperLib/LocalMinima newLm)
    // Offset: 0x2ABD9D0
    void InsertLocalMinima(::Cinemachine::ClipperLib::LocalMinima* newLm);
    // System.Boolean PopLocalMinima(System.Int64 Y, out Cinemachine.ClipperLib/LocalMinima current)
    // Offset: 0x2ABE6B4
    bool PopLocalMinima(int64_t Y, ByRef<::Cinemachine::ClipperLib::LocalMinima*> current);
    // private System.Void ReverseHorizontal(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2ABDA58
    void ReverseHorizontal(::Cinemachine::ClipperLib::TEdge* e);
    // System.Void Reset()
    // Offset: 0x2ABE710
    void Reset();
    // static public Cinemachine.ClipperLib/IntRect GetBounds(System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> paths)
    // Offset: 0x2ABE90C
    static ::Cinemachine::ClipperLib::IntRect GetBounds(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* paths);
    // System.Void InsertScanbeam(System.Int64 Y)
    // Offset: 0x2ABE7B8
    void InsertScanbeam(int64_t Y);
    // System.Boolean PopScanbeam(out System.Int64 Y)
    // Offset: 0x2ABEBBC
    bool PopScanbeam(ByRef<int64_t> Y);
    // System.Boolean LocalMinimaPending()
    // Offset: 0x2ABEBF4
    bool LocalMinimaPending();
    // Cinemachine.ClipperLib/OutRec CreateOutRec()
    // Offset: 0x2ABEC04
    ::Cinemachine::ClipperLib::OutRec* CreateOutRec();
    // System.Void DisposeOutRec(System.Int32 index)
    // Offset: 0x2ABED48
    void DisposeOutRec(int index);
    // System.Void UpdateEdgeIntoAEL(ref Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2ABEDDC
    void UpdateEdgeIntoAEL(ByRef<::Cinemachine::ClipperLib::TEdge*> e);
    // System.Void SwapPositionsInAEL(Cinemachine.ClipperLib/TEdge edge1, Cinemachine.ClipperLib/TEdge edge2)
    // Offset: 0x2ABEF20
    void SwapPositionsInAEL(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2);
    // System.Void DeleteFromAEL(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2ABF15C
    void DeleteFromAEL(::Cinemachine::ClipperLib::TEdge* e);
  }; // Cinemachine.ClipperLib/ClipperBase
  #pragma pack(pop)
  static check_size<sizeof(ClipperLib::ClipperBase), 66 + sizeof(bool)> __Cinemachine_ClipperLib_ClipperBaseSizeCheck;
  static_assert(sizeof(ClipperLib::ClipperBase) == 0x43);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::near_zero
// Il2CppName: near_zero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&Cinemachine::ClipperLib::ClipperBase::near_zero)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "near_zero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::get_PreserveCollinear
// Il2CppName: get_PreserveCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)()>(&Cinemachine::ClipperLib::ClipperBase::get_PreserveCollinear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "get_PreserveCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::set_PreserveCollinear
// Il2CppName: set_PreserveCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(bool)>(&Cinemachine::ClipperLib::ClipperBase::set_PreserveCollinear)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "set_PreserveCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::Swap
// Il2CppName: Swap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(ByRef<int64_t>, ByRef<int64_t>)>(&Cinemachine::ClipperLib::ClipperBase::Swap)> {
  static const MethodInfo* get() {
    static auto* val1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* val2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "Swap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val1, val2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::IsHorizontal
// Il2CppName: IsHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::ClipperBase::IsHorizontal)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "IsHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::PointIsVertex
// Il2CppName: PointIsVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::ClipperBase::PointIsVertex)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pp = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "PointIsVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, pp});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::PointOnLineSegment
// Il2CppName: PointOnLineSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, bool)>(&Cinemachine::ClipperLib::ClipperBase::PointOnLineSegment)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* linePt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* linePt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "PointOnLineSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, linePt1, linePt2, UseFullRange});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::PointOnPolygon
// Il2CppName: PointOnPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::OutPt*, bool)>(&Cinemachine::ClipperLib::ClipperBase::PointOnPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pp = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "PointOnPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, pp, UseFullRange});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*, bool)>(&Cinemachine::ClipperLib::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, UseFullRange});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, bool)>(&Cinemachine::ClipperLib::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, UseFullRange});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, bool)>(&Cinemachine::ClipperLib::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt4 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, pt4, UseFullRange});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)()>(&Cinemachine::ClipperLib::ClipperBase::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::DisposeLocalMinimaList
// Il2CppName: DisposeLocalMinimaList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)()>(&Cinemachine::ClipperLib::ClipperBase::DisposeLocalMinimaList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "DisposeLocalMinimaList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::RangeTest
// Il2CppName: RangeTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::IntPoint, ByRef<bool>)>(&Cinemachine::ClipperLib::ClipperBase::RangeTest)> {
  static const MethodInfo* get() {
    static auto* Pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* useFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "RangeTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Pt, useFullRange});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::InitEdge
// Il2CppName: InitEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::ClipperBase::InitEdge)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* eNext = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* ePrev = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "InitEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, eNext, ePrev, pt});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::InitEdge2
// Il2CppName: InitEdge2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::PolyType)>(&Cinemachine::ClipperLib::ClipperBase::InitEdge2)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "InitEdge2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, polyType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::FindNextLocMin
// Il2CppName: FindNextLocMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::TEdge* (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::ClipperBase::FindNextLocMin)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "FindNextLocMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::ProcessBound
// Il2CppName: ProcessBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::TEdge* (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*, bool)>(&Cinemachine::ClipperLib::ClipperBase::ProcessBound)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* LeftBoundIsForward = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "ProcessBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E, LeftBoundIsForward});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::AddPath
// Il2CppName: AddPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, ::Cinemachine::ClipperLib::PolyType, bool)>(&Cinemachine::ClipperLib::ClipperBase::AddPath)> {
  static const MethodInfo* get() {
    static auto* pg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyType")->byval_arg;
    static auto* Closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "AddPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pg, polyType, Closed});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::AddPaths
// Il2CppName: AddPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, ::Cinemachine::ClipperLib::PolyType, bool)>(&Cinemachine::ClipperLib::ClipperBase::AddPaths)> {
  static const MethodInfo* get() {
    static auto* ppg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyType")->byval_arg;
    static auto* closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "AddPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ppg, polyType, closed});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::Pt2IsBetweenPt1AndPt3
// Il2CppName: Pt2IsBetweenPt1AndPt3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::ClipperBase::Pt2IsBetweenPt1AndPt3)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "Pt2IsBetweenPt1AndPt3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::RemoveEdge
// Il2CppName: RemoveEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::TEdge* (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::ClipperBase::RemoveEdge)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "RemoveEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::SetDx
// Il2CppName: SetDx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::ClipperBase::SetDx)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "SetDx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::InsertLocalMinima
// Il2CppName: InsertLocalMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::LocalMinima*)>(&Cinemachine::ClipperLib::ClipperBase::InsertLocalMinima)> {
  static const MethodInfo* get() {
    static auto* newLm = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/LocalMinima")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "InsertLocalMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newLm});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::PopLocalMinima
// Il2CppName: PopLocalMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)(int64_t, ByRef<::Cinemachine::ClipperLib::LocalMinima*>)>(&Cinemachine::ClipperLib::ClipperBase::PopLocalMinima)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* current = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/LocalMinima")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "PopLocalMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y, current});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::ReverseHorizontal
// Il2CppName: ReverseHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::ClipperBase::ReverseHorizontal)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "ReverseHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)()>(&Cinemachine::ClipperLib::ClipperBase::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::IntRect (*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*)>(&Cinemachine::ClipperLib::ClipperBase::GetBounds)> {
  static const MethodInfo* get() {
    static auto* paths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paths});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::InsertScanbeam
// Il2CppName: InsertScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(int64_t)>(&Cinemachine::ClipperLib::ClipperBase::InsertScanbeam)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "InsertScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::PopScanbeam
// Il2CppName: PopScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)(ByRef<int64_t>)>(&Cinemachine::ClipperLib::ClipperBase::PopScanbeam)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "PopScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::LocalMinimaPending
// Il2CppName: LocalMinimaPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::ClipperBase::*)()>(&Cinemachine::ClipperLib::ClipperBase::LocalMinimaPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "LocalMinimaPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::CreateOutRec
// Il2CppName: CreateOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutRec* (Cinemachine::ClipperLib::ClipperBase::*)()>(&Cinemachine::ClipperLib::ClipperBase::CreateOutRec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "CreateOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::DisposeOutRec
// Il2CppName: DisposeOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(int)>(&Cinemachine::ClipperLib::ClipperBase::DisposeOutRec)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "DisposeOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::UpdateEdgeIntoAEL
// Il2CppName: UpdateEdgeIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(ByRef<::Cinemachine::ClipperLib::TEdge*>)>(&Cinemachine::ClipperLib::ClipperBase::UpdateEdgeIntoAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "UpdateEdgeIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::SwapPositionsInAEL
// Il2CppName: SwapPositionsInAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::ClipperBase::SwapPositionsInAEL)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "SwapPositionsInAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperBase::DeleteFromAEL
// Il2CppName: DeleteFromAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::ClipperBase::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::ClipperBase::DeleteFromAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::ClipperBase*), "DeleteFromAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
