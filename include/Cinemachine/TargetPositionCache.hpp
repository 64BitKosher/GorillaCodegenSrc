// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: Mode because it is already included!
  // Skipping declaration: TimeRange because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: TargetPositionCache
  class TargetPositionCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::TargetPositionCache);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::TargetPositionCache*, "Cinemachine", "TargetPositionCache");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.TargetPositionCache
  // [TokenAttribute] Offset: FFFFFFFF
  class TargetPositionCache : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::TargetPositionCache::Mode
    struct Mode;
    // Nested type: ::Cinemachine::TargetPositionCache::CacheCurve
    class CacheCurve;
    // Nested type: ::Cinemachine::TargetPositionCache::CacheEntry
    class CacheEntry;
    // Nested type: ::Cinemachine::TargetPositionCache::TimeRange
    struct TimeRange;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.TargetPositionCache/Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.TargetPositionCache/Mode Disabled
      static constexpr const int Disabled = 0;
      // Get static field: static public Cinemachine.TargetPositionCache/Mode Disabled
      static ::Cinemachine::TargetPositionCache::Mode _get_Disabled();
      // Set static field: static public Cinemachine.TargetPositionCache/Mode Disabled
      static void _set_Disabled(::Cinemachine::TargetPositionCache::Mode value);
      // static field const value: static public Cinemachine.TargetPositionCache/Mode Record
      static constexpr const int Record = 1;
      // Get static field: static public Cinemachine.TargetPositionCache/Mode Record
      static ::Cinemachine::TargetPositionCache::Mode _get_Record();
      // Set static field: static public Cinemachine.TargetPositionCache/Mode Record
      static void _set_Record(::Cinemachine::TargetPositionCache::Mode value);
      // static field const value: static public Cinemachine.TargetPositionCache/Mode Playback
      static constexpr const int Playback = 2;
      // Get static field: static public Cinemachine.TargetPositionCache/Mode Playback
      static ::Cinemachine::TargetPositionCache::Mode _get_Playback();
      // Set static field: static public Cinemachine.TargetPositionCache/Mode Playback
      static void _set_Playback(::Cinemachine::TargetPositionCache::Mode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.TargetPositionCache/Mode
    #pragma pack(pop)
    static check_size<sizeof(TargetPositionCache::Mode), 0 + sizeof(int)> __Cinemachine_TargetPositionCache_ModeSizeCheck;
    static_assert(sizeof(TargetPositionCache::Mode) == 0x4);
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.TargetPositionCache/TimeRange
    // [TokenAttribute] Offset: FFFFFFFF
    struct TimeRange/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single Start
      // Size: 0x4
      // Offset: 0x0
      float Start;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single End
      // Size: 0x4
      // Offset: 0x4
      float End;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: TimeRange
      constexpr TimeRange(float Start_ = {}, float End_ = {}) noexcept : Start{Start_}, End{End_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single Start
      [[deprecated("Use field access instead!")]] float& dyn_Start();
      // Get instance field reference: public System.Single End
      [[deprecated("Use field access instead!")]] float& dyn_End();
      // public System.Boolean get_IsEmpty()
      // Offset: 0x2AB53B0
      bool get_IsEmpty();
      // public System.Boolean Contains(System.Single time)
      // Offset: 0x2AB5408
      bool Contains(float time);
      // static public Cinemachine.TargetPositionCache/TimeRange get_Empty()
      // Offset: 0x2AB542C
      static ::Cinemachine::TargetPositionCache::TimeRange get_Empty();
      // public System.Void Include(System.Single time)
      // Offset: 0x2AB59FC
      void Include(float time);
    }; // Cinemachine.TargetPositionCache/TimeRange
    #pragma pack(pop)
    static check_size<sizeof(TargetPositionCache::TimeRange), 4 + sizeof(float)> __Cinemachine_TargetPositionCache_TimeRangeSizeCheck;
    static_assert(sizeof(TargetPositionCache::TimeRange) == 0x8);
    // Get static field: static public System.Boolean UseCache
    static bool _get_UseCache();
    // Set static field: static public System.Boolean UseCache
    static void _set_UseCache(bool value);
    // static field const value: static public System.Single CacheStepSize
    static constexpr const float CacheStepSize = 0.016666668;
    // Get static field: static public System.Single CacheStepSize
    static float _get_CacheStepSize();
    // Set static field: static public System.Single CacheStepSize
    static void _set_CacheStepSize(float value);
    // Get static field: static private Cinemachine.TargetPositionCache/Mode m_CacheMode
    static ::Cinemachine::TargetPositionCache::Mode _get_m_CacheMode();
    // Set static field: static private Cinemachine.TargetPositionCache/Mode m_CacheMode
    static void _set_m_CacheMode(::Cinemachine::TargetPositionCache::Mode value);
    // Get static field: static public System.Single CurrentTime
    static float _get_CurrentTime();
    // Set static field: static public System.Single CurrentTime
    static void _set_CurrentTime(float value);
    // Get static field: static public System.Int32 CurrentFrame
    static int _get_CurrentFrame();
    // Set static field: static public System.Int32 CurrentFrame
    static void _set_CurrentFrame(int value);
    // Get static field: static public System.Boolean IsCameraCut
    static bool _get_IsCameraCut();
    // Set static field: static public System.Boolean IsCameraCut
    static void _set_IsCameraCut(bool value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,Cinemachine.TargetPositionCache/CacheEntry> m_Cache
    static ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::Cinemachine::TargetPositionCache::CacheEntry*>* _get_m_Cache();
    // Set static field: static private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,Cinemachine.TargetPositionCache/CacheEntry> m_Cache
    static void _set_m_Cache(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::Cinemachine::TargetPositionCache::CacheEntry*>* value);
    // Get static field: static private Cinemachine.TargetPositionCache/TimeRange m_CacheTimeRange
    static ::Cinemachine::TargetPositionCache::TimeRange _get_m_CacheTimeRange();
    // Set static field: static private Cinemachine.TargetPositionCache/TimeRange m_CacheTimeRange
    static void _set_m_CacheTimeRange(::Cinemachine::TargetPositionCache::TimeRange value);
    // static field const value: static private System.Single kWraparoundSlush
    static constexpr const float kWraparoundSlush = 0.1;
    // Get static field: static private System.Single kWraparoundSlush
    static float _get_kWraparoundSlush();
    // Set static field: static private System.Single kWraparoundSlush
    static void _set_kWraparoundSlush(float value);
    // static public Cinemachine.TargetPositionCache/Mode get_CacheMode()
    // Offset: 0x2AB4F5C
    static ::Cinemachine::TargetPositionCache::Mode get_CacheMode();
    // static public System.Void set_CacheMode(Cinemachine.TargetPositionCache/Mode value)
    // Offset: 0x2AB4FA4
    static void set_CacheMode(::Cinemachine::TargetPositionCache::Mode value);
    // static public System.Boolean get_IsRecording()
    // Offset: 0x2AB5238
    static bool get_IsRecording();
    // static public System.Boolean get_CurrentPlaybackTimeValid()
    // Offset: 0x2AB5298
    static bool get_CurrentPlaybackTimeValid();
    // static public System.Boolean get_IsEmpty()
    // Offset: 0x2AB5368
    static bool get_IsEmpty();
    // static public Cinemachine.TargetPositionCache/TimeRange get_CacheTimeRange()
    // Offset: 0x2AB53C0
    static ::Cinemachine::TargetPositionCache::TimeRange get_CacheTimeRange();
    // static public System.Boolean get_HasCurrentTime()
    // Offset: 0x2AB5300
    static bool get_HasCurrentTime();
    // static public System.Void ClearCache()
    // Offset: 0x2AB5024
    static void ClearCache();
    // static private System.Void CreatePlaybackCurves()
    // Offset: 0x2AB5108
    static void CreatePlaybackCurves();
    // static public UnityEngine.Vector3 GetTargetPosition(UnityEngine.Transform target)
    // Offset: 0x2AAB094
    static ::UnityEngine::Vector3 GetTargetPosition(::UnityEngine::Transform* target);
    // static public UnityEngine.Quaternion GetTargetRotation(UnityEngine.Transform target)
    // Offset: 0x2AAB2FC
    static ::UnityEngine::Quaternion GetTargetRotation(::UnityEngine::Transform* target);
    // public System.Void .ctor()
    // Offset: 0x2AB5BD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TargetPositionCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TargetPositionCache*, creationType>()));
    }
  }; // Cinemachine.TargetPositionCache
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::TargetPositionCache::TimeRange, "Cinemachine", "TargetPositionCache/TimeRange");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::TargetPositionCache::Mode, "Cinemachine", "TargetPositionCache/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::get_CacheMode
// Il2CppName: get_CacheMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::TargetPositionCache::Mode (*)()>(&Cinemachine::TargetPositionCache::get_CacheMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "get_CacheMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::set_CacheMode
// Il2CppName: set_CacheMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::TargetPositionCache::Mode)>(&Cinemachine::TargetPositionCache::set_CacheMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "TargetPositionCache/Mode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "set_CacheMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::get_IsRecording
// Il2CppName: get_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Cinemachine::TargetPositionCache::get_IsRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "get_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::get_CurrentPlaybackTimeValid
// Il2CppName: get_CurrentPlaybackTimeValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Cinemachine::TargetPositionCache::get_CurrentPlaybackTimeValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "get_CurrentPlaybackTimeValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Cinemachine::TargetPositionCache::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::get_CacheTimeRange
// Il2CppName: get_CacheTimeRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::TargetPositionCache::TimeRange (*)()>(&Cinemachine::TargetPositionCache::get_CacheTimeRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "get_CacheTimeRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::get_HasCurrentTime
// Il2CppName: get_HasCurrentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Cinemachine::TargetPositionCache::get_HasCurrentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "get_HasCurrentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::ClearCache
// Il2CppName: ClearCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::TargetPositionCache::ClearCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "ClearCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CreatePlaybackCurves
// Il2CppName: CreatePlaybackCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::TargetPositionCache::CreatePlaybackCurves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "CreatePlaybackCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::GetTargetPosition
// Il2CppName: GetTargetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Transform*)>(&Cinemachine::TargetPositionCache::GetTargetPosition)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "GetTargetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::GetTargetRotation
// Il2CppName: GetTargetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Transform*)>(&Cinemachine::TargetPositionCache::GetTargetRotation)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache*), "GetTargetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
