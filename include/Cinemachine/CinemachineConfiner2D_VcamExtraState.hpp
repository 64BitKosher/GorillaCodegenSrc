// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineConfiner2D
#include "Cinemachine/CinemachineConfiner2D.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Cinemachine.ConfinerOven
#include "Cinemachine/ConfinerOven.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineConfiner2D::VcamExtraState);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineConfiner2D::VcamExtraState*, "Cinemachine", "CinemachineConfiner2D/VcamExtraState");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineConfiner2D/VcamExtraState
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineConfiner2D::VcamExtraState : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3 m_PreviousDisplacement
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 m_PreviousDisplacement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 m_DampedDisplacement
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 m_DampedDisplacement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Cinemachine.ConfinerOven/BakedSolution m_BakedSolution
    // Size: 0x8
    // Offset: 0x28
    ::Cinemachine::ConfinerOven::BakedSolution* m_BakedSolution;
    // Field size check
    static_assert(sizeof(::Cinemachine::ConfinerOven::BakedSolution*) == 0x8);
    // public Cinemachine.CinemachineVirtualCameraBase m_vcam
    // Size: 0x8
    // Offset: 0x30
    ::Cinemachine::CinemachineVirtualCameraBase* m_vcam;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector3 m_PreviousDisplacement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_PreviousDisplacement();
    // Get instance field reference: public UnityEngine.Vector3 m_DampedDisplacement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_DampedDisplacement();
    // Get instance field reference: public Cinemachine.ConfinerOven/BakedSolution m_BakedSolution
    [[deprecated("Use field access instead!")]] ::Cinemachine::ConfinerOven::BakedSolution*& dyn_m_BakedSolution();
    // Get instance field reference: public Cinemachine.CinemachineVirtualCameraBase m_vcam
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_m_vcam();
    // public System.Void .ctor()
    // Offset: 0x2A8C0EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineConfiner2D::VcamExtraState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineConfiner2D::VcamExtraState*, creationType>()));
    }
  }; // Cinemachine.CinemachineConfiner2D/VcamExtraState
  #pragma pack(pop)
  static check_size<sizeof(CinemachineConfiner2D::VcamExtraState), 48 + sizeof(::Cinemachine::CinemachineVirtualCameraBase*)> __Cinemachine_CinemachineConfiner2D_VcamExtraStateSizeCheck;
  static_assert(sizeof(CinemachineConfiner2D::VcamExtraState) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::VcamExtraState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
