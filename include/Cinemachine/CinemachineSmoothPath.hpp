// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachinePathBase
#include "Cinemachine/CinemachinePathBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Vector4
  struct Vector4;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineSmoothPath
  class CinemachineSmoothPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineSmoothPath);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineSmoothPath*, "Cinemachine", "CinemachineSmoothPath");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineSmoothPath
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [SaveDuringPlayAttribute] Offset: FFFFFFFF
  class CinemachineSmoothPath : public ::Cinemachine::CinemachinePathBase {
    public:
    // Nested type: ::Cinemachine::CinemachineSmoothPath::Waypoint
    struct Waypoint;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineSmoothPath/Waypoint
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: FFFFFFFF
    struct Waypoint/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Single roll
      // Size: 0x4
      // Offset: 0xC
      float roll;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Waypoint
      constexpr Waypoint(::UnityEngine::Vector3 position_ = {}, float roll_ = {}) noexcept : position{position_}, roll{roll_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public System.Single roll
      [[deprecated("Use field access instead!")]] float& dyn_roll();
      // UnityEngine.Vector4 get_AsVector4()
      // Offset: 0x2A92F94
      ::UnityEngine::Vector4 get_AsVector4();
      // static Cinemachine.CinemachineSmoothPath/Waypoint FromVector4(UnityEngine.Vector4 v)
      // Offset: 0x2A92FA0
      static ::Cinemachine::CinemachineSmoothPath::Waypoint FromVector4(::UnityEngine::Vector4 v);
    }; // Cinemachine.CinemachineSmoothPath/Waypoint
    #pragma pack(pop)
    static check_size<sizeof(CinemachineSmoothPath::Waypoint), 12 + sizeof(float)> __Cinemachine_CinemachineSmoothPath_WaypointSizeCheck;
    static_assert(sizeof(CinemachineSmoothPath::Waypoint) == 0x10);
    public:
    // public System.Boolean m_Looped
    // Size: 0x1
    // Offset: 0x50
    bool m_Looped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Looped and: m_Waypoints
    char __padding0[0x7] = {};
    // public Cinemachine.CinemachineSmoothPath/Waypoint[] m_Waypoints
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint> m_Waypoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>) == 0x8);
    // Cinemachine.CinemachineSmoothPath/Waypoint[] m_ControlPoints1
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint> m_ControlPoints1;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>) == 0x8);
    // Cinemachine.CinemachineSmoothPath/Waypoint[] m_ControlPoints2
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint> m_ControlPoints2;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>) == 0x8);
    // private System.Boolean m_IsLoopedCache
    // Size: 0x1
    // Offset: 0x70
    bool m_IsLoopedCache;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean m_Looped
    [[deprecated("Use field access instead!")]] bool& dyn_m_Looped();
    // Get instance field reference: public Cinemachine.CinemachineSmoothPath/Waypoint[] m_Waypoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>& dyn_m_Waypoints();
    // Get instance field reference: Cinemachine.CinemachineSmoothPath/Waypoint[] m_ControlPoints1
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>& dyn_m_ControlPoints1();
    // Get instance field reference: Cinemachine.CinemachineSmoothPath/Waypoint[] m_ControlPoints2
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineSmoothPath::Waypoint>& dyn_m_ControlPoints2();
    // Get instance field reference: private System.Boolean m_IsLoopedCache
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsLoopedCache();
    // private System.Void OnValidate()
    // Offset: 0x2A92BFC
    void OnValidate();
    // private System.Void Reset()
    // Offset: 0x2A92C0C
    void Reset();
    // System.Void UpdateControlPoints()
    // Offset: 0x2A92D1C
    void UpdateControlPoints();
    // private System.Single GetBoundingIndices(System.Single pos, out System.Int32 indexA, out System.Int32 indexB)
    // Offset: 0x2A92FA4
    float GetBoundingIndices(float pos, ByRef<int> indexA, ByRef<int> indexB);
    // static private UnityEngine.Quaternion RollAroundForward(System.Single angle)
    // Offset: 0x2A935E8
    static ::UnityEngine::Quaternion RollAroundForward(float angle);
    // public override System.Single get_MinPos()
    // Offset: 0x2A92BA4
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Single CinemachinePathBase::get_MinPos()
    float get_MinPos();
    // public override System.Single get_MaxPos()
    // Offset: 0x2A92BAC
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Single CinemachinePathBase::get_MaxPos()
    float get_MaxPos();
    // public override System.Boolean get_Looped()
    // Offset: 0x2A92BEC
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Boolean CinemachinePathBase::get_Looped()
    bool get_Looped();
    // public override System.Int32 get_DistanceCacheSampleStepsPerSegment()
    // Offset: 0x2A92BF4
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Int32 CinemachinePathBase::get_DistanceCacheSampleStepsPerSegment()
    int get_DistanceCacheSampleStepsPerSegment();
    // public override System.Void InvalidateDistanceCache()
    // Offset: 0x2A92CE8
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Void CinemachinePathBase::InvalidateDistanceCache()
    void InvalidateDistanceCache();
    // public override UnityEngine.Vector3 EvaluateLocalPosition(System.Single pos)
    // Offset: 0x2A930CC
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: UnityEngine.Vector3 CinemachinePathBase::EvaluateLocalPosition(System.Single pos)
    ::UnityEngine::Vector3 EvaluateLocalPosition(float pos);
    // public override UnityEngine.Vector3 EvaluateLocalTangent(System.Single pos)
    // Offset: 0x2A9322C
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: UnityEngine.Vector3 CinemachinePathBase::EvaluateLocalTangent(System.Single pos)
    ::UnityEngine::Vector3 EvaluateLocalTangent(float pos);
    // public override UnityEngine.Quaternion EvaluateLocalOrientation(System.Single pos)
    // Offset: 0x2A933A4
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: UnityEngine.Quaternion CinemachinePathBase::EvaluateLocalOrientation(System.Single pos)
    ::UnityEngine::Quaternion EvaluateLocalOrientation(float pos);
    // public System.Void .ctor()
    // Offset: 0x2A93620
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Void CinemachinePathBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineSmoothPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineSmoothPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineSmoothPath*, creationType>()));
    }
  }; // Cinemachine.CinemachineSmoothPath
  #pragma pack(pop)
  static check_size<sizeof(CinemachineSmoothPath), 112 + sizeof(bool)> __Cinemachine_CinemachineSmoothPathSizeCheck;
  static_assert(sizeof(CinemachineSmoothPath) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineSmoothPath::Waypoint, "Cinemachine", "CinemachineSmoothPath/Waypoint");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineSmoothPath::*)()>(&Cinemachine::CinemachineSmoothPath::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineSmoothPath::*)()>(&Cinemachine::CinemachineSmoothPath::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::UpdateControlPoints
// Il2CppName: UpdateControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineSmoothPath::*)()>(&Cinemachine::CinemachineSmoothPath::UpdateControlPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "UpdateControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::GetBoundingIndices
// Il2CppName: GetBoundingIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineSmoothPath::*)(float, ByRef<int>, ByRef<int>)>(&Cinemachine::CinemachineSmoothPath::GetBoundingIndices)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* indexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* indexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "GetBoundingIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, indexA, indexB});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::RollAroundForward
// Il2CppName: RollAroundForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(float)>(&Cinemachine::CinemachineSmoothPath::RollAroundForward)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "RollAroundForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::get_MinPos
// Il2CppName: get_MinPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineSmoothPath::*)()>(&Cinemachine::CinemachineSmoothPath::get_MinPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "get_MinPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::get_MaxPos
// Il2CppName: get_MaxPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineSmoothPath::*)()>(&Cinemachine::CinemachineSmoothPath::get_MaxPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "get_MaxPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::get_Looped
// Il2CppName: get_Looped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineSmoothPath::*)()>(&Cinemachine::CinemachineSmoothPath::get_Looped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "get_Looped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::get_DistanceCacheSampleStepsPerSegment
// Il2CppName: get_DistanceCacheSampleStepsPerSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineSmoothPath::*)()>(&Cinemachine::CinemachineSmoothPath::get_DistanceCacheSampleStepsPerSegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "get_DistanceCacheSampleStepsPerSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::InvalidateDistanceCache
// Il2CppName: InvalidateDistanceCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineSmoothPath::*)()>(&Cinemachine::CinemachineSmoothPath::InvalidateDistanceCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "InvalidateDistanceCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::EvaluateLocalPosition
// Il2CppName: EvaluateLocalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineSmoothPath::*)(float)>(&Cinemachine::CinemachineSmoothPath::EvaluateLocalPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "EvaluateLocalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::EvaluateLocalTangent
// Il2CppName: EvaluateLocalTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineSmoothPath::*)(float)>(&Cinemachine::CinemachineSmoothPath::EvaluateLocalTangent)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "EvaluateLocalTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::EvaluateLocalOrientation
// Il2CppName: EvaluateLocalOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CinemachineSmoothPath::*)(float)>(&Cinemachine::CinemachineSmoothPath::EvaluateLocalOrientation)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineSmoothPath*), "EvaluateLocalOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineSmoothPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
