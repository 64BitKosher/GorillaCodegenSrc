// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ConfinerOven
#include "Cinemachine/ConfinerOven.hpp"
// Including type: Cinemachine.ClipperLib/IntPoint
#include "Cinemachine/ClipperLib_IntPoint.hpp"
// Including type: System.Double
#include "System/Double.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ConfinerOven::BakedSolution);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ConfinerOven::BakedSolution*, "Cinemachine", "ConfinerOven/BakedSolution");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ConfinerOven/BakedSolution
  // [TokenAttribute] Offset: FFFFFFFF
  class ConfinerOven::BakedSolution : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::ConfinerOven::BakedSolution::$$c__DisplayClass9_0
    class $$c__DisplayClass9_0;
    public:
    // private System.Single m_FrustumSizeIntSpace
    // Size: 0x4
    // Offset: 0x10
    float m_FrustumSizeIntSpace;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly Cinemachine.ConfinerOven/AspectStretcher m_AspectStretcher
    // Size: 0xC
    // Offset: 0x14
    ::Cinemachine::ConfinerOven::AspectStretcher m_AspectStretcher;
    // Field size check
    static_assert(sizeof(::Cinemachine::ConfinerOven::AspectStretcher) == 0xC);
    // private readonly System.Boolean m_HasBones
    // Size: 0x1
    // Offset: 0x20
    bool m_HasBones;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HasBones and: m_SqrPolygonDiagonal
    char __padding2[0x7] = {};
    // private readonly System.Double m_SqrPolygonDiagonal
    // Size: 0x8
    // Offset: 0x28
    double m_SqrPolygonDiagonal;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> m_OriginalPolygon
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* m_OriginalPolygon;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> m_Solution
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* m_Solution;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*) == 0x8);
    public:
    // static field const value: static private System.Double k_ClipperEpsilon
    static constexpr const double k_ClipperEpsilon = 1000;
    // Get static field: static private System.Double k_ClipperEpsilon
    static double _get_k_ClipperEpsilon();
    // Set static field: static private System.Double k_ClipperEpsilon
    static void _set_k_ClipperEpsilon(double value);
    // Get instance field reference: private System.Single m_FrustumSizeIntSpace
    [[deprecated("Use field access instead!")]] float& dyn_m_FrustumSizeIntSpace();
    // Get instance field reference: private readonly Cinemachine.ConfinerOven/AspectStretcher m_AspectStretcher
    [[deprecated("Use field access instead!")]] ::Cinemachine::ConfinerOven::AspectStretcher& dyn_m_AspectStretcher();
    // Get instance field reference: private readonly System.Boolean m_HasBones
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasBones();
    // Get instance field reference: private readonly System.Double m_SqrPolygonDiagonal
    [[deprecated("Use field access instead!")]] double& dyn_m_SqrPolygonDiagonal();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> m_OriginalPolygon
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*& dyn_m_OriginalPolygon();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> m_Solution
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*& dyn_m_Solution();
    // public System.Void .ctor(System.Single aspectRatio, System.Single frustumHeight, System.Boolean hasBones, UnityEngine.Rect polygonBounds, System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> originalPolygon, System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> solution)
    // Offset: 0x2AB1F7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConfinerOven::BakedSolution* New_ctor(float aspectRatio, float frustumHeight, bool hasBones, ::UnityEngine::Rect polygonBounds, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* originalPolygon, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* solution) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::BakedSolution::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConfinerOven::BakedSolution*, creationType>(aspectRatio, frustumHeight, hasBones, polygonBounds, originalPolygon, solution)));
    }
    // public System.Boolean IsValid()
    // Offset: 0x2AB2B18
    bool IsValid();
    // public UnityEngine.Vector2 ConfinePoint(in UnityEngine.Vector2 pointToConfine)
    // Offset: 0x2AB2B28
    ::UnityEngine::Vector2 ConfinePoint(ByRef<::UnityEngine::Vector2> pointToConfine);
    // static private System.Int32 FindIntersection(in Cinemachine.ClipperLib/IntPoint p1, in Cinemachine.ClipperLib/IntPoint p2, in Cinemachine.ClipperLib/IntPoint p3, in Cinemachine.ClipperLib/IntPoint p4)
    // Offset: 0x2AB3364
    static int FindIntersection(ByRef<::Cinemachine::ClipperLib::IntPoint> p1, ByRef<::Cinemachine::ClipperLib::IntPoint> p2, ByRef<::Cinemachine::ClipperLib::IntPoint> p3, ByRef<::Cinemachine::ClipperLib::IntPoint> p4);
    // static Cinemachine.ClipperLib/IntPoint <ConfinePoint>g__IntPointLerp|9_0(Cinemachine.ClipperLib/IntPoint a, Cinemachine.ClipperLib/IntPoint b, System.Single lerp)
    // Offset: 0x2AB2F84
    static ::Cinemachine::ClipperLib::IntPoint $ConfinePoint$g__IntPointLerp_9_0(::Cinemachine::ClipperLib::IntPoint a, ::Cinemachine::ClipperLib::IntPoint b, float lerp);
    // private System.Boolean <ConfinePoint>g__IsInsideOriginal|9_1(Cinemachine.ClipperLib/IntPoint point)
    // Offset: 0x2AB2E44
    bool $ConfinePoint$g__IsInsideOriginal_9_1(::Cinemachine::ClipperLib::IntPoint point);
    // static System.Single <ConfinePoint>g__ClosestPointOnSegment|9_2(Cinemachine.ClipperLib/IntPoint point, Cinemachine.ClipperLib/IntPoint s0, Cinemachine.ClipperLib/IntPoint s1)
    // Offset: 0x2AB2F1C
    static float $ConfinePoint$g__ClosestPointOnSegment_9_2(::Cinemachine::ClipperLib::IntPoint point, ::Cinemachine::ClipperLib::IntPoint s0, ::Cinemachine::ClipperLib::IntPoint s1);
    // private System.Boolean <ConfinePoint>g__DoesIntersectOriginal|9_3(Cinemachine.ClipperLib/IntPoint l1, Cinemachine.ClipperLib/IntPoint l2)
    // Offset: 0x2AB3154
    bool $ConfinePoint$g__DoesIntersectOriginal_9_3(::Cinemachine::ClipperLib::IntPoint l1, ::Cinemachine::ClipperLib::IntPoint l2);
    // static System.Double <FindIntersection>g__IntPointDiffSqrMagnitude|10_0(Cinemachine.ClipperLib/IntPoint point1, Cinemachine.ClipperLib/IntPoint point2)
    // Offset: 0x2AB34C4
    static double $FindIntersection$g__IntPointDiffSqrMagnitude_10_0(::Cinemachine::ClipperLib::IntPoint point1, ::Cinemachine::ClipperLib::IntPoint point2);
  }; // Cinemachine.ConfinerOven/BakedSolution
  #pragma pack(pop)
  static check_size<sizeof(ConfinerOven::BakedSolution), 56 + sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*)> __Cinemachine_ConfinerOven_BakedSolutionSizeCheck;
  static_assert(sizeof(ConfinerOven::BakedSolution) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ConfinerOven::BakedSolution::*)()>(&Cinemachine::ConfinerOven::BakedSolution::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ConfinerOven::BakedSolution*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::ConfinePoint
// Il2CppName: ConfinePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Cinemachine::ConfinerOven::BakedSolution::*)(ByRef<::UnityEngine::Vector2>)>(&Cinemachine::ConfinerOven::BakedSolution::ConfinePoint)> {
  static const MethodInfo* get() {
    static auto* pointToConfine = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ConfinerOven::BakedSolution*), "ConfinePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointToConfine});
  }
};
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::FindIntersection
// Il2CppName: FindIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::Cinemachine::ClipperLib::IntPoint>, ByRef<::Cinemachine::ClipperLib::IntPoint>, ByRef<::Cinemachine::ClipperLib::IntPoint>, ByRef<::Cinemachine::ClipperLib::IntPoint>)>(&Cinemachine::ConfinerOven::BakedSolution::FindIntersection)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->this_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->this_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->this_arg;
    static auto* p4 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ConfinerOven::BakedSolution*), "FindIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, p3, p4});
  }
};
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::$ConfinePoint$g__IntPointLerp_9_0
// Il2CppName: <ConfinePoint>g__IntPointLerp|9_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::IntPoint (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, float)>(&Cinemachine::ConfinerOven::BakedSolution::$ConfinePoint$g__IntPointLerp_9_0)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* lerp = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ConfinerOven::BakedSolution*), "<ConfinePoint>g__IntPointLerp|9_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, lerp});
  }
};
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::$ConfinePoint$g__IsInsideOriginal_9_1
// Il2CppName: <ConfinePoint>g__IsInsideOriginal|9_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ConfinerOven::BakedSolution::*)(::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ConfinerOven::BakedSolution::$ConfinePoint$g__IsInsideOriginal_9_1)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ConfinerOven::BakedSolution*), "<ConfinePoint>g__IsInsideOriginal|9_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::$ConfinePoint$g__ClosestPointOnSegment_9_2
// Il2CppName: <ConfinePoint>g__ClosestPointOnSegment|9_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ConfinerOven::BakedSolution::$ConfinePoint$g__ClosestPointOnSegment_9_2)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* s0 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* s1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ConfinerOven::BakedSolution*), "<ConfinePoint>g__ClosestPointOnSegment|9_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, s0, s1});
  }
};
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::$ConfinePoint$g__DoesIntersectOriginal_9_3
// Il2CppName: <ConfinePoint>g__DoesIntersectOriginal|9_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ConfinerOven::BakedSolution::*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ConfinerOven::BakedSolution::$ConfinePoint$g__DoesIntersectOriginal_9_3)> {
  static const MethodInfo* get() {
    static auto* l1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* l2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ConfinerOven::BakedSolution*), "<ConfinePoint>g__DoesIntersectOriginal|9_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{l1, l2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::BakedSolution::$FindIntersection$g__IntPointDiffSqrMagnitude_10_0
// Il2CppName: <FindIntersection>g__IntPointDiffSqrMagnitude|10_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ConfinerOven::BakedSolution::$FindIntersection$g__IntPointDiffSqrMagnitude_10_0)> {
  static const MethodInfo* get() {
    static auto* point1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* point2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ConfinerOven::BakedSolution*), "<FindIntersection>g__IntPointDiffSqrMagnitude|10_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point1, point2});
  }
};
