// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineExtension
#include "Cinemachine/CinemachineExtension.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CameraState
  struct CameraState;
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
  // Forward declaring type: ConfinerOven
  class ConfinerOven;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider2D
  class Collider2D;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineConfiner2D
  class CinemachineConfiner2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineConfiner2D);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineConfiner2D*, "Cinemachine", "CinemachineConfiner2D");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineConfiner2D
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [SaveDuringPlayAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class CinemachineConfiner2D : public ::Cinemachine::CinemachineExtension {
    public:
    // Nested type: ::Cinemachine::CinemachineConfiner2D::VcamExtraState
    class VcamExtraState;
    // Nested type: ::Cinemachine::CinemachineConfiner2D::ShapeCache
    struct ShapeCache;
    // Size: 0xE8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineConfiner2D/ShapeCache
    // [TokenAttribute] Offset: FFFFFFFF
    struct ShapeCache/*, public ::System::ValueType*/ {
      public:
      public:
      // public Cinemachine.ConfinerOven m_confinerOven
      // Size: 0x8
      // Offset: 0x0
      ::Cinemachine::ConfinerOven* m_confinerOven;
      // Field size check
      static_assert(sizeof(::Cinemachine::ConfinerOven*) == 0x8);
      // public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_OriginalPath
      // Size: 0x8
      // Offset: 0x8
      ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>* m_OriginalPath;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*) == 0x8);
      // public UnityEngine.Matrix4x4 m_DeltaWorldToBaked
      // Size: 0x40
      // Offset: 0x10
      ::UnityEngine::Matrix4x4 m_DeltaWorldToBaked;
      // Field size check
      static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
      // public UnityEngine.Matrix4x4 m_DeltaBakedToWorld
      // Size: 0x40
      // Offset: 0x50
      ::UnityEngine::Matrix4x4 m_DeltaBakedToWorld;
      // Field size check
      static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
      // private System.Single m_aspectRatio
      // Size: 0x4
      // Offset: 0x90
      float m_aspectRatio;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Single m_maxWindowSize
      // Size: 0x4
      // Offset: 0x94
      float m_maxWindowSize;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // System.Single m_maxComputationTimePerFrameInSeconds
      // Size: 0x4
      // Offset: 0x98
      float m_maxComputationTimePerFrameInSeconds;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private UnityEngine.Matrix4x4 m_bakedToWorld
      // Size: 0x40
      // Offset: 0x9C
      ::UnityEngine::Matrix4x4 m_bakedToWorld;
      // Field size check
      static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
      // Padding between fields: m_bakedToWorld and: m_boundingShape2D
      char __padding7[0x4] = {};
      // private UnityEngine.Collider2D m_boundingShape2D
      // Size: 0x8
      // Offset: 0xE0
      ::UnityEngine::Collider2D* m_boundingShape2D;
      // Field size check
      static_assert(sizeof(::UnityEngine::Collider2D*) == 0x8);
      public:
      // Creating value type constructor for type: ShapeCache
      constexpr ShapeCache(::Cinemachine::ConfinerOven* m_confinerOven_ = {}, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>* m_OriginalPath_ = {}, ::UnityEngine::Matrix4x4 m_DeltaWorldToBaked_ = {}, ::UnityEngine::Matrix4x4 m_DeltaBakedToWorld_ = {}, float m_aspectRatio_ = {}, float m_maxWindowSize_ = {}, float m_maxComputationTimePerFrameInSeconds_ = {}, ::UnityEngine::Matrix4x4 m_bakedToWorld_ = {}, ::UnityEngine::Collider2D* m_boundingShape2D_ = {}) noexcept : m_confinerOven{m_confinerOven_}, m_OriginalPath{m_OriginalPath_}, m_DeltaWorldToBaked{m_DeltaWorldToBaked_}, m_DeltaBakedToWorld{m_DeltaBakedToWorld_}, m_aspectRatio{m_aspectRatio_}, m_maxWindowSize{m_maxWindowSize_}, m_maxComputationTimePerFrameInSeconds{m_maxComputationTimePerFrameInSeconds_}, m_bakedToWorld{m_bakedToWorld_}, m_boundingShape2D{m_boundingShape2D_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Cinemachine.ConfinerOven m_confinerOven
      [[deprecated("Use field access instead!")]] ::Cinemachine::ConfinerOven*& dyn_m_confinerOven();
      // Get instance field reference: public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_OriginalPath
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*& dyn_m_OriginalPath();
      // Get instance field reference: public UnityEngine.Matrix4x4 m_DeltaWorldToBaked
      [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_DeltaWorldToBaked();
      // Get instance field reference: public UnityEngine.Matrix4x4 m_DeltaBakedToWorld
      [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_DeltaBakedToWorld();
      // Get instance field reference: private System.Single m_aspectRatio
      [[deprecated("Use field access instead!")]] float& dyn_m_aspectRatio();
      // Get instance field reference: private System.Single m_maxWindowSize
      [[deprecated("Use field access instead!")]] float& dyn_m_maxWindowSize();
      // Get instance field reference: System.Single m_maxComputationTimePerFrameInSeconds
      [[deprecated("Use field access instead!")]] float& dyn_m_maxComputationTimePerFrameInSeconds();
      // Get instance field reference: private UnityEngine.Matrix4x4 m_bakedToWorld
      [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_bakedToWorld();
      // Get instance field reference: private UnityEngine.Collider2D m_boundingShape2D
      [[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& dyn_m_boundingShape2D();
      // public System.Void Invalidate()
      // Offset: 0x2A8B36C
      void Invalidate();
      // public System.Boolean ValidateCache(UnityEngine.Collider2D boundingShape2D, System.Single maxWindowSize, System.Single aspectRatio, out System.Boolean confinerStateChanged)
      // Offset: 0x2A8B458
      bool ValidateCache(::UnityEngine::Collider2D* boundingShape2D, float maxWindowSize, float aspectRatio, ByRef<bool> confinerStateChanged);
      // private System.Boolean IsValid(in UnityEngine.Collider2D boundingShape2D, in System.Single aspectRatio, in System.Single maxOrthoSize)
      // Offset: 0x2A8C0F4
      bool IsValid(ByRef<::UnityEngine::Collider2D*> boundingShape2D, ByRef<float> aspectRatio, ByRef<float> maxOrthoSize);
      // private System.Void CalculateDeltaTransformationMatrix()
      // Offset: 0x2A8C214
      void CalculateDeltaTransformationMatrix();
    }; // Cinemachine.CinemachineConfiner2D/ShapeCache
    #pragma pack(pop)
    static check_size<sizeof(CinemachineConfiner2D::ShapeCache), 224 + sizeof(::UnityEngine::Collider2D*)> __Cinemachine_CinemachineConfiner2D_ShapeCacheSizeCheck;
    static_assert(sizeof(CinemachineConfiner2D::ShapeCache) == 0xE8);
    public:
    // public UnityEngine.Collider2D m_BoundingShape2D
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Collider2D* m_BoundingShape2D;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider2D*) == 0x8);
    // public System.Single m_Damping
    // Size: 0x4
    // Offset: 0x38
    float m_Damping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_MaxWindowSize
    // Size: 0x4
    // Offset: 0x3C
    float m_MaxWindowSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_MaxComputationTimePerFrameInSeconds
    // Size: 0x4
    // Offset: 0x40
    float m_MaxComputationTimePerFrameInSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_MaxComputationTimePerFrameInSeconds and: m_shapeCache
    char __padding3[0x4] = {};
    // private Cinemachine.CinemachineConfiner2D/ShapeCache m_shapeCache
    // Size: 0xE8
    // Offset: 0x48
    ::Cinemachine::CinemachineConfiner2D::ShapeCache m_shapeCache;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineConfiner2D::ShapeCache) == 0xE8);
    public:
    // static field const value: static private System.Single k_cornerAngleTreshold
    static constexpr const float k_cornerAngleTreshold = 10;
    // Get static field: static private System.Single k_cornerAngleTreshold
    static float _get_k_cornerAngleTreshold();
    // Set static field: static private System.Single k_cornerAngleTreshold
    static void _set_k_cornerAngleTreshold(float value);
    // Get instance field reference: public UnityEngine.Collider2D m_BoundingShape2D
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& dyn_m_BoundingShape2D();
    // Get instance field reference: public System.Single m_Damping
    [[deprecated("Use field access instead!")]] float& dyn_m_Damping();
    // Get instance field reference: public System.Single m_MaxWindowSize
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxWindowSize();
    // Get instance field reference: private System.Single m_MaxComputationTimePerFrameInSeconds
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxComputationTimePerFrameInSeconds();
    // Get instance field reference: private Cinemachine.CinemachineConfiner2D/ShapeCache m_shapeCache
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineConfiner2D::ShapeCache& dyn_m_shapeCache();
    // public System.Void InvalidateCache()
    // Offset: 0x2A8B364
    void InvalidateCache();
    // public System.Boolean ValidateCache(System.Single cameraAspectRatio)
    // Offset: 0x2A8B42C
    bool ValidateCache(float cameraAspectRatio);
    // private System.Single CalculateHalfFrustumHeight(in Cinemachine.CameraState state, in System.Single cameraPosLocalZ)
    // Offset: 0x2A8C028
    float CalculateHalfFrustumHeight(ByRef<::Cinemachine::CameraState> state, ByRef<float> cameraPosLocalZ);
    // private System.Void OnValidate()
    // Offset: 0x2A8C0AC
    void OnValidate();
    // private System.Void Reset()
    // Offset: 0x2A8C0C8
    void Reset();
    // protected override System.Void PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    // Offset: 0x2A8BBBC
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    void PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime);
    // public System.Void .ctor()
    // Offset: 0x2A8C0D8
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineConfiner2D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineConfiner2D*, creationType>()));
    }
  }; // Cinemachine.CinemachineConfiner2D
  #pragma pack(pop)
  static check_size<sizeof(CinemachineConfiner2D), 72 + sizeof(::Cinemachine::CinemachineConfiner2D::ShapeCache)> __Cinemachine_CinemachineConfiner2DSizeCheck;
  static_assert(sizeof(CinemachineConfiner2D) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineConfiner2D::ShapeCache, "Cinemachine", "CinemachineConfiner2D/ShapeCache");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::InvalidateCache
// Il2CppName: InvalidateCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineConfiner2D::*)()>(&Cinemachine::CinemachineConfiner2D::InvalidateCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner2D*), "InvalidateCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::ValidateCache
// Il2CppName: ValidateCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineConfiner2D::*)(float)>(&Cinemachine::CinemachineConfiner2D::ValidateCache)> {
  static const MethodInfo* get() {
    static auto* cameraAspectRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner2D*), "ValidateCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraAspectRatio});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::CalculateHalfFrustumHeight
// Il2CppName: CalculateHalfFrustumHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineConfiner2D::*)(ByRef<::Cinemachine::CameraState>, ByRef<float>)>(&Cinemachine::CinemachineConfiner2D::CalculateHalfFrustumHeight)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* cameraPosLocalZ = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner2D*), "CalculateHalfFrustumHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, cameraPosLocalZ});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineConfiner2D::*)()>(&Cinemachine::CinemachineConfiner2D::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner2D*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineConfiner2D::*)()>(&Cinemachine::CinemachineConfiner2D::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner2D*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::PostPipelineStageCallback
// Il2CppName: PostPipelineStageCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineConfiner2D::*)(::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::Stage, ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineConfiner2D::PostPipelineStageCallback)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/Stage")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner2D*), "PostPipelineStageCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, stage, state, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
