// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineImpulseManager
  class CinemachineImpulseManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineImpulseManager);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineImpulseManager*, "Cinemachine", "CinemachineImpulseManager");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineImpulseManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: FFFFFFFF
  class CinemachineImpulseManager : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition
    struct EnvelopeDefinition;
    // Nested type: ::Cinemachine::CinemachineImpulseManager::ImpulseEvent
    class ImpulseEvent;
    public:
    // private System.Collections.Generic.List`1<Cinemachine.CinemachineImpulseManager/ImpulseEvent> m_ExpiredEvents
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>* m_ExpiredEvents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.CinemachineImpulseManager/ImpulseEvent> m_ActiveEvents
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>* m_ActiveEvents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>*) == 0x8);
    // public System.Boolean IgnoreTimeScale
    // Size: 0x1
    // Offset: 0x20
    bool IgnoreTimeScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private Cinemachine.CinemachineImpulseManager sInstance
    static ::Cinemachine::CinemachineImpulseManager* _get_sInstance();
    // Set static field: static private Cinemachine.CinemachineImpulseManager sInstance
    static void _set_sInstance(::Cinemachine::CinemachineImpulseManager* value);
    // static field const value: static private System.Single Epsilon
    static constexpr const float Epsilon = 0.0001;
    // Get static field: static private System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static private System.Single Epsilon
    static void _set_Epsilon(float value);
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.CinemachineImpulseManager/ImpulseEvent> m_ExpiredEvents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>*& dyn_m_ExpiredEvents();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.CinemachineImpulseManager/ImpulseEvent> m_ActiveEvents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineImpulseManager::ImpulseEvent*>*& dyn_m_ActiveEvents();
    // Get instance field reference: public System.Boolean IgnoreTimeScale
    [[deprecated("Use field access instead!")]] bool& dyn_IgnoreTimeScale();
    // private System.Void .ctor()
    // Offset: 0x2ABB020
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineImpulseManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineImpulseManager*, creationType>()));
    }
    // static public Cinemachine.CinemachineImpulseManager get_Instance()
    // Offset: 0x2AB9C88
    static ::Cinemachine::CinemachineImpulseManager* get_Instance();
    // static private System.Void InitializeModule()
    // Offset: 0x2ABB028
    static void InitializeModule();
    // static System.Single EvaluateDissipationScale(System.Single spread, System.Single normalizedDistance)
    // Offset: 0x2ABB140
    static float EvaluateDissipationScale(float spread, float normalizedDistance);
    // public System.Boolean GetImpulseAt(UnityEngine.Vector3 listenerLocation, System.Boolean distance2D, System.Int32 channelMask, out UnityEngine.Vector3 pos, out UnityEngine.Quaternion rot)
    // Offset: 0x2ABA7F8
    bool GetImpulseAt(::UnityEngine::Vector3 listenerLocation, bool distance2D, int channelMask, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot);
    // public System.Single get_CurrentTime()
    // Offset: 0x2ABB770
    float get_CurrentTime();
    // public Cinemachine.CinemachineImpulseManager/ImpulseEvent NewImpulseEvent()
    // Offset: 0x2AB9D10
    ::Cinemachine::CinemachineImpulseManager::ImpulseEvent* NewImpulseEvent();
    // public System.Void AddImpulseEvent(Cinemachine.CinemachineImpulseManager/ImpulseEvent e)
    // Offset: 0x2AB9E44
    void AddImpulseEvent(::Cinemachine::CinemachineImpulseManager::ImpulseEvent* e);
    // public System.Void Clear()
    // Offset: 0x2ABB080
    void Clear();
  }; // Cinemachine.CinemachineImpulseManager
  #pragma pack(pop)
  static check_size<sizeof(CinemachineImpulseManager), 32 + sizeof(bool)> __Cinemachine_CinemachineImpulseManagerSizeCheck;
  static_assert(sizeof(CinemachineImpulseManager) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineImpulseManager* (*)()>(&Cinemachine::CinemachineImpulseManager::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::InitializeModule
// Il2CppName: InitializeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::CinemachineImpulseManager::InitializeModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager*), "InitializeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::EvaluateDissipationScale
// Il2CppName: EvaluateDissipationScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Cinemachine::CinemachineImpulseManager::EvaluateDissipationScale)> {
  static const MethodInfo* get() {
    static auto* spread = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* normalizedDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager*), "EvaluateDissipationScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spread, normalizedDistance});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::GetImpulseAt
// Il2CppName: GetImpulseAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineImpulseManager::*)(::UnityEngine::Vector3, bool, int, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Cinemachine::CinemachineImpulseManager::GetImpulseAt)> {
  static const MethodInfo* get() {
    static auto* listenerLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* distance2D = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* channelMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager*), "GetImpulseAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listenerLocation, distance2D, channelMask, pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::get_CurrentTime
// Il2CppName: get_CurrentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineImpulseManager::*)()>(&Cinemachine::CinemachineImpulseManager::get_CurrentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager*), "get_CurrentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::NewImpulseEvent
// Il2CppName: NewImpulseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineImpulseManager::ImpulseEvent* (Cinemachine::CinemachineImpulseManager::*)()>(&Cinemachine::CinemachineImpulseManager::NewImpulseEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager*), "NewImpulseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::AddImpulseEvent
// Il2CppName: AddImpulseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseManager::*)(::Cinemachine::CinemachineImpulseManager::ImpulseEvent*)>(&Cinemachine::CinemachineImpulseManager::AddImpulseEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineImpulseManager/ImpulseEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager*), "AddImpulseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseManager::*)()>(&Cinemachine::CinemachineImpulseManager::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
