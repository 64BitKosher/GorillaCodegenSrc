// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ClipperLib
#include "Cinemachine/ClipperLib.hpp"
// Including type: Cinemachine.ClipperLib/ClipperBase
#include "Cinemachine/ClipperLib_ClipperBase.hpp"
// Including type: Cinemachine.ClipperLib/ClipType
#include "Cinemachine/ClipperLib_ClipType.hpp"
// Including type: Cinemachine.ClipperLib/PolyFillType
#include "Cinemachine/ClipperLib_PolyFillType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ClipperLib::Clipper);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ClipperLib::Clipper*, "Cinemachine", "ClipperLib/Clipper");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x8B
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ClipperLib/Clipper
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperLib::Clipper : public ::Cinemachine::ClipperLib::ClipperBase {
    public:
    // Writing base type padding for base size: 0x43 to desired offset: 0x44
    char ___base_padding[0x1] = {};
    // Nested type: ::Cinemachine::ClipperLib::Clipper::NodeType
    struct NodeType;
    public:
    // private Cinemachine.ClipperLib/ClipType m_ClipType
    // Size: 0x4
    // Offset: 0x44
    ::Cinemachine::ClipperLib::ClipType m_ClipType;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::ClipType) == 0x4);
    // private Cinemachine.ClipperLib/Maxima m_Maxima
    // Size: 0x8
    // Offset: 0x48
    ::Cinemachine::ClipperLib::Maxima* m_Maxima;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::Maxima*) == 0x8);
    // private Cinemachine.ClipperLib/TEdge m_SortedEdges
    // Size: 0x8
    // Offset: 0x50
    ::Cinemachine::ClipperLib::TEdge* m_SortedEdges;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::TEdge*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntersectNode> m_IntersectList
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntersectNode*>* m_IntersectList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntersectNode*>*) == 0x8);
    // private System.Collections.Generic.IComparer`1<Cinemachine.ClipperLib/IntersectNode> m_IntersectNodeComparer
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::IComparer_1<::Cinemachine::ClipperLib::IntersectNode*>* m_IntersectNodeComparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IComparer_1<::Cinemachine::ClipperLib::IntersectNode*>*) == 0x8);
    // private System.Boolean m_ExecuteLocked
    // Size: 0x1
    // Offset: 0x68
    bool m_ExecuteLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ExecuteLocked and: m_ClipFillType
    char __padding5[0x3] = {};
    // private Cinemachine.ClipperLib/PolyFillType m_ClipFillType
    // Size: 0x4
    // Offset: 0x6C
    ::Cinemachine::ClipperLib::PolyFillType m_ClipFillType;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::PolyFillType) == 0x4);
    // private Cinemachine.ClipperLib/PolyFillType m_SubjFillType
    // Size: 0x4
    // Offset: 0x70
    ::Cinemachine::ClipperLib::PolyFillType m_SubjFillType;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::PolyFillType) == 0x4);
    // Padding between fields: m_SubjFillType and: m_Joins
    char __padding7[0x4] = {};
    // private System.Collections.Generic.List`1<Cinemachine.ClipperLib/Join> m_Joins
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>* m_Joins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.ClipperLib/Join> m_GhostJoins
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>* m_GhostJoins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>*) == 0x8);
    // private System.Boolean m_UsingPolyTree
    // Size: 0x1
    // Offset: 0x88
    bool m_UsingPolyTree;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ReverseSolution>k__BackingField
    // Size: 0x1
    // Offset: 0x89
    bool ReverseSolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <StrictlySimple>k__BackingField
    // Size: 0x1
    // Offset: 0x8A
    bool StrictlySimple;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static public System.Int32 ioReverseSolution
    static constexpr const int ioReverseSolution = 1;
    // Get static field: static public System.Int32 ioReverseSolution
    static int _get_ioReverseSolution();
    // Set static field: static public System.Int32 ioReverseSolution
    static void _set_ioReverseSolution(int value);
    // static field const value: static public System.Int32 ioStrictlySimple
    static constexpr const int ioStrictlySimple = 2;
    // Get static field: static public System.Int32 ioStrictlySimple
    static int _get_ioStrictlySimple();
    // Set static field: static public System.Int32 ioStrictlySimple
    static void _set_ioStrictlySimple(int value);
    // static field const value: static public System.Int32 ioPreserveCollinear
    static constexpr const int ioPreserveCollinear = 4;
    // Get static field: static public System.Int32 ioPreserveCollinear
    static int _get_ioPreserveCollinear();
    // Set static field: static public System.Int32 ioPreserveCollinear
    static void _set_ioPreserveCollinear(int value);
    // Get instance field reference: private Cinemachine.ClipperLib/ClipType m_ClipType
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::ClipType& dyn_m_ClipType();
    // Get instance field reference: private Cinemachine.ClipperLib/Maxima m_Maxima
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::Maxima*& dyn_m_Maxima();
    // Get instance field reference: private Cinemachine.ClipperLib/TEdge m_SortedEdges
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::TEdge*& dyn_m_SortedEdges();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntersectNode> m_IntersectList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntersectNode*>*& dyn_m_IntersectList();
    // Get instance field reference: private System.Collections.Generic.IComparer`1<Cinemachine.ClipperLib/IntersectNode> m_IntersectNodeComparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IComparer_1<::Cinemachine::ClipperLib::IntersectNode*>*& dyn_m_IntersectNodeComparer();
    // Get instance field reference: private System.Boolean m_ExecuteLocked
    [[deprecated("Use field access instead!")]] bool& dyn_m_ExecuteLocked();
    // Get instance field reference: private Cinemachine.ClipperLib/PolyFillType m_ClipFillType
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyFillType& dyn_m_ClipFillType();
    // Get instance field reference: private Cinemachine.ClipperLib/PolyFillType m_SubjFillType
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyFillType& dyn_m_SubjFillType();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/Join> m_Joins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>*& dyn_m_Joins();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.ClipperLib/Join> m_GhostJoins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::Join*>*& dyn_m_GhostJoins();
    // Get instance field reference: private System.Boolean m_UsingPolyTree
    [[deprecated("Use field access instead!")]] bool& dyn_m_UsingPolyTree();
    // Get instance field reference: private System.Boolean <ReverseSolution>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReverseSolution$k__BackingField();
    // Get instance field reference: private System.Boolean <StrictlySimple>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$StrictlySimple$k__BackingField();
    // public System.Void .ctor(System.Int32 InitOptions)
    // Offset: 0x2ABF200
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperLib::Clipper* New_ctor(int InitOptions) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::Clipper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperLib::Clipper*, creationType>(InitOptions)));
    }
    // private System.Void InsertMaxima(System.Int64 X)
    // Offset: 0x2ABF3FC
    void InsertMaxima(int64_t X);
    // public System.Boolean get_ReverseSolution()
    // Offset: 0x2ABF550
    bool get_ReverseSolution();
    // public System.Void set_ReverseSolution(System.Boolean value)
    // Offset: 0x2ABF558
    void set_ReverseSolution(bool value);
    // public System.Boolean get_StrictlySimple()
    // Offset: 0x2ABF564
    bool get_StrictlySimple();
    // public System.Void set_StrictlySimple(System.Boolean value)
    // Offset: 0x2ABF56C
    void set_StrictlySimple(bool value);
    // public System.Boolean Execute(Cinemachine.ClipperLib/ClipType clipType, System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> solution, Cinemachine.ClipperLib/PolyFillType FillType)
    // Offset: 0x2ABF578
    bool Execute(::Cinemachine::ClipperLib::ClipType clipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* solution, ::Cinemachine::ClipperLib::PolyFillType FillType);
    // public System.Boolean Execute(Cinemachine.ClipperLib/ClipType clipType, Cinemachine.ClipperLib/PolyTree polytree, Cinemachine.ClipperLib/PolyFillType FillType)
    // Offset: 0x2ABF718
    bool Execute(::Cinemachine::ClipperLib::ClipType clipType, ::Cinemachine::ClipperLib::PolyTree* polytree, ::Cinemachine::ClipperLib::PolyFillType FillType);
    // public System.Boolean Execute(Cinemachine.ClipperLib/ClipType clipType, System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> solution, Cinemachine.ClipperLib/PolyFillType subjFillType, Cinemachine.ClipperLib/PolyFillType clipFillType)
    // Offset: 0x2ABF580
    bool Execute(::Cinemachine::ClipperLib::ClipType clipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* solution, ::Cinemachine::ClipperLib::PolyFillType subjFillType, ::Cinemachine::ClipperLib::PolyFillType clipFillType);
    // public System.Boolean Execute(Cinemachine.ClipperLib/ClipType clipType, Cinemachine.ClipperLib/PolyTree polytree, Cinemachine.ClipperLib/PolyFillType subjFillType, Cinemachine.ClipperLib/PolyFillType clipFillType)
    // Offset: 0x2ABF720
    bool Execute(::Cinemachine::ClipperLib::ClipType clipType, ::Cinemachine::ClipperLib::PolyTree* polytree, ::Cinemachine::ClipperLib::PolyFillType subjFillType, ::Cinemachine::ClipperLib::PolyFillType clipFillType);
    // System.Void FixHoleLinkage(Cinemachine.ClipperLib/OutRec outRec)
    // Offset: 0x2AC02C0
    void FixHoleLinkage(::Cinemachine::ClipperLib::OutRec* outRec);
    // private System.Boolean ExecuteInternal()
    // Offset: 0x2ABF804
    bool ExecuteInternal();
    // private System.Void DisposeAllPolyPts()
    // Offset: 0x2AC150C
    void DisposeAllPolyPts();
    // private System.Void AddJoin(Cinemachine.ClipperLib/OutPt Op1, Cinemachine.ClipperLib/OutPt Op2, Cinemachine.ClipperLib/IntPoint OffPt)
    // Offset: 0x2AC15B0
    void AddJoin(::Cinemachine::ClipperLib::OutPt* Op1, ::Cinemachine::ClipperLib::OutPt* Op2, ::Cinemachine::ClipperLib::IntPoint OffPt);
    // private System.Void AddGhostJoin(Cinemachine.ClipperLib/OutPt Op, Cinemachine.ClipperLib/IntPoint OffPt)
    // Offset: 0x2AC16D4
    void AddGhostJoin(::Cinemachine::ClipperLib::OutPt* Op, ::Cinemachine::ClipperLib::IntPoint OffPt);
    // private System.Void InsertLocalMinimaIntoAEL(System.Int64 botY)
    // Offset: 0x2AC0328
    void InsertLocalMinimaIntoAEL(int64_t botY);
    // private System.Void InsertEdgeIntoAEL(Cinemachine.ClipperLib/TEdge edge, Cinemachine.ClipperLib/TEdge startEdge)
    // Offset: 0x2AC17E4
    void InsertEdgeIntoAEL(::Cinemachine::ClipperLib::TEdge* edge, ::Cinemachine::ClipperLib::TEdge* startEdge);
    // private System.Boolean E2InsertsBeforeE1(Cinemachine.ClipperLib/TEdge e1, Cinemachine.ClipperLib/TEdge e2)
    // Offset: 0x2AC269C
    bool E2InsertsBeforeE1(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2);
    // private System.Boolean IsEvenOddFillType(Cinemachine.ClipperLib/TEdge edge)
    // Offset: 0x2AC2778
    bool IsEvenOddFillType(::Cinemachine::ClipperLib::TEdge* edge);
    // private System.Boolean IsEvenOddAltFillType(Cinemachine.ClipperLib/TEdge edge)
    // Offset: 0x2AC27AC
    bool IsEvenOddAltFillType(::Cinemachine::ClipperLib::TEdge* edge);
    // private System.Boolean IsContributing(Cinemachine.ClipperLib/TEdge edge)
    // Offset: 0x2AC1B34
    bool IsContributing(::Cinemachine::ClipperLib::TEdge* edge);
    // private System.Void SetWindingCount(Cinemachine.ClipperLib/TEdge edge)
    // Offset: 0x2AC18E4
    void SetWindingCount(::Cinemachine::ClipperLib::TEdge* edge);
    // private System.Void AddEdgeToSEL(Cinemachine.ClipperLib/TEdge edge)
    // Offset: 0x2AC204C
    void AddEdgeToSEL(::Cinemachine::ClipperLib::TEdge* edge);
    // System.Boolean PopEdgeFromSEL(out Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2AC27E0
    bool PopEdgeFromSEL(ByRef<::Cinemachine::ClipperLib::TEdge*> e);
    // private System.Void CopyAELToSEL()
    // Offset: 0x2AC2868
    void CopyAELToSEL();
    // private System.Void SwapPositionsInSEL(Cinemachine.ClipperLib/TEdge edge1, Cinemachine.ClipperLib/TEdge edge2)
    // Offset: 0x2AC28B0
    void SwapPositionsInSEL(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2);
    // private System.Void AddLocalMaxPoly(Cinemachine.ClipperLib/TEdge e1, Cinemachine.ClipperLib/TEdge e2, Cinemachine.ClipperLib/IntPoint pt)
    // Offset: 0x2AC2AF4
    void AddLocalMaxPoly(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2, ::Cinemachine::ClipperLib::IntPoint pt);
    // private Cinemachine.ClipperLib/OutPt AddLocalMinPoly(Cinemachine.ClipperLib/TEdge e1, Cinemachine.ClipperLib/TEdge e2, Cinemachine.ClipperLib/IntPoint pt)
    // Offset: 0x2AC1EB8
    ::Cinemachine::ClipperLib::OutPt* AddLocalMinPoly(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2, ::Cinemachine::ClipperLib::IntPoint pt);
    // private Cinemachine.ClipperLib/OutPt AddOutPt(Cinemachine.ClipperLib/TEdge e, Cinemachine.ClipperLib/IntPoint pt)
    // Offset: 0x2AC1CA0
    ::Cinemachine::ClipperLib::OutPt* AddOutPt(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::IntPoint pt);
    // private Cinemachine.ClipperLib/OutPt GetLastOutPt(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2AC3008
    ::Cinemachine::ClipperLib::OutPt* GetLastOutPt(::Cinemachine::ClipperLib::TEdge* e);
    // System.Void SwapPoints(ref Cinemachine.ClipperLib/IntPoint pt1, ref Cinemachine.ClipperLib/IntPoint pt2)
    // Offset: 0x2AC3080
    void SwapPoints(ByRef<::Cinemachine::ClipperLib::IntPoint> pt1, ByRef<::Cinemachine::ClipperLib::IntPoint> pt2);
    // private System.Boolean HorzSegmentsOverlap(System.Int64 seg1a, System.Int64 seg1b, System.Int64 seg2a, System.Int64 seg2b)
    // Offset: 0x2AC20EC
    bool HorzSegmentsOverlap(int64_t seg1a, int64_t seg1b, int64_t seg2a, int64_t seg2b);
    // private System.Void SetHoleState(Cinemachine.ClipperLib/TEdge e, Cinemachine.ClipperLib/OutRec outRec)
    // Offset: 0x2AC2F0C
    void SetHoleState(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::OutRec* outRec);
    // private System.Double GetDx(Cinemachine.ClipperLib/IntPoint pt1, Cinemachine.ClipperLib/IntPoint pt2)
    // Offset: 0x2AC3094
    double GetDx(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2);
    // private System.Boolean FirstIsBottomPt(Cinemachine.ClipperLib/OutPt btmPt1, Cinemachine.ClipperLib/OutPt btmPt2)
    // Offset: 0x2AC30BC
    bool FirstIsBottomPt(::Cinemachine::ClipperLib::OutPt* btmPt1, ::Cinemachine::ClipperLib::OutPt* btmPt2);
    // private Cinemachine.ClipperLib/OutPt GetBottomPt(Cinemachine.ClipperLib/OutPt pp)
    // Offset: 0x2AC33B4
    ::Cinemachine::ClipperLib::OutPt* GetBottomPt(::Cinemachine::ClipperLib::OutPt* pp);
    // private Cinemachine.ClipperLib/OutRec GetLowermostRec(Cinemachine.ClipperLib/OutRec outRec1, Cinemachine.ClipperLib/OutRec outRec2)
    // Offset: 0x2AC34B0
    ::Cinemachine::ClipperLib::OutRec* GetLowermostRec(::Cinemachine::ClipperLib::OutRec* outRec1, ::Cinemachine::ClipperLib::OutRec* outRec2);
    // private System.Boolean OutRec1RightOfOutRec2(Cinemachine.ClipperLib/OutRec outRec1, Cinemachine.ClipperLib/OutRec outRec2)
    // Offset: 0x2AC35A4
    bool OutRec1RightOfOutRec2(::Cinemachine::ClipperLib::OutRec* outRec1, ::Cinemachine::ClipperLib::OutRec* outRec2);
    // private Cinemachine.ClipperLib/OutRec GetOutRec(System.Int32 idx)
    // Offset: 0x2AC35D0
    ::Cinemachine::ClipperLib::OutRec* GetOutRec(int idx);
    // private System.Void AppendPolygon(Cinemachine.ClipperLib/TEdge e1, Cinemachine.ClipperLib/TEdge e2)
    // Offset: 0x2AC2BA0
    void AppendPolygon(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2);
    // private System.Void ReversePolyPtLinks(Cinemachine.ClipperLib/OutPt pp)
    // Offset: 0x2AC0C58
    void ReversePolyPtLinks(::Cinemachine::ClipperLib::OutPt* pp);
    // static private System.Void SwapSides(Cinemachine.ClipperLib/TEdge edge1, Cinemachine.ClipperLib/TEdge edge2)
    // Offset: 0x2AC3670
    static void SwapSides(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2);
    // static private System.Void SwapPolyIndexes(Cinemachine.ClipperLib/TEdge edge1, Cinemachine.ClipperLib/TEdge edge2)
    // Offset: 0x2AC3698
    static void SwapPolyIndexes(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2);
    // private System.Void IntersectEdges(Cinemachine.ClipperLib/TEdge e1, Cinemachine.ClipperLib/TEdge e2, Cinemachine.ClipperLib/IntPoint pt)
    // Offset: 0x2AC211C
    void IntersectEdges(::Cinemachine::ClipperLib::TEdge* e1, ::Cinemachine::ClipperLib::TEdge* e2, ::Cinemachine::ClipperLib::IntPoint pt);
    // private System.Void DeleteFromSEL(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2AC36C0
    void DeleteFromSEL(::Cinemachine::ClipperLib::TEdge* e);
    // private System.Void ProcessHorizontals()
    // Offset: 0x2AC06EC
    void ProcessHorizontals();
    // private System.Void GetHorzDirection(Cinemachine.ClipperLib/TEdge HorzEdge, out Cinemachine.ClipperLib/Direction Dir, out System.Int64 Left, out System.Int64 Right)
    // Offset: 0x2AC3D2C
    void GetHorzDirection(::Cinemachine::ClipperLib::TEdge* HorzEdge, ByRef<::Cinemachine::ClipperLib::Direction> Dir, ByRef<int64_t> Left, ByRef<int64_t> Right);
    // private System.Void ProcessHorizontal(Cinemachine.ClipperLib/TEdge horzEdge)
    // Offset: 0x2AC3764
    void ProcessHorizontal(::Cinemachine::ClipperLib::TEdge* horzEdge);
    // private Cinemachine.ClipperLib/TEdge GetNextInAEL(Cinemachine.ClipperLib/TEdge e, Cinemachine.ClipperLib/Direction Direction)
    // Offset: 0x2AC3DDC
    ::Cinemachine::ClipperLib::TEdge* GetNextInAEL(::Cinemachine::ClipperLib::TEdge* e, ::Cinemachine::ClipperLib::Direction Direction);
    // private System.Boolean IsMinima(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2AC3E04
    bool IsMinima(::Cinemachine::ClipperLib::TEdge* e);
    // private System.Boolean IsMaxima(Cinemachine.ClipperLib/TEdge e, System.Double Y)
    // Offset: 0x2AC3E48
    bool IsMaxima(::Cinemachine::ClipperLib::TEdge* e, double Y);
    // private System.Boolean IsIntermediate(Cinemachine.ClipperLib/TEdge e, System.Double Y)
    // Offset: 0x2AC3E74
    bool IsIntermediate(::Cinemachine::ClipperLib::TEdge* e, double Y);
    // Cinemachine.ClipperLib/TEdge GetMaximaPair(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2AC3D6C
    ::Cinemachine::ClipperLib::TEdge* GetMaximaPair(::Cinemachine::ClipperLib::TEdge* e);
    // Cinemachine.ClipperLib/TEdge GetMaximaPairEx(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2AC3EAC
    ::Cinemachine::ClipperLib::TEdge* GetMaximaPairEx(::Cinemachine::ClipperLib::TEdge* e);
    // private System.Boolean ProcessIntersections(System.Int64 topY)
    // Offset: 0x2AC072C
    bool ProcessIntersections(int64_t topY);
    // private System.Void BuildIntersectList(System.Int64 topY)
    // Offset: 0x2AC3EE8
    void BuildIntersectList(int64_t topY);
    // private System.Boolean EdgesAdjacent(Cinemachine.ClipperLib/IntersectNode inode)
    // Offset: 0x2AC46F8
    bool EdgesAdjacent(::Cinemachine::ClipperLib::IntersectNode* inode);
    // static private System.Int32 IntersectNodeSort(Cinemachine.ClipperLib/IntersectNode node1, Cinemachine.ClipperLib/IntersectNode node2)
    // Offset: 0x2AC4738
    static int IntersectNodeSort(::Cinemachine::ClipperLib::IntersectNode* node1, ::Cinemachine::ClipperLib::IntersectNode* node2);
    // private System.Boolean FixupIntersectionOrder()
    // Offset: 0x2AC40FC
    bool FixupIntersectionOrder();
    // private System.Void ProcessIntersectList()
    // Offset: 0x2AC42E8
    void ProcessIntersectList();
    // static System.Int64 Round(System.Double value)
    // Offset: 0x2AC475C
    static int64_t Round(double value);
    // static private System.Int64 TopX(Cinemachine.ClipperLib/TEdge edge, System.Int64 currentY)
    // Offset: 0x2AC2708
    static int64_t TopX(::Cinemachine::ClipperLib::TEdge* edge, int64_t currentY);
    // private System.Void IntersectPoint(Cinemachine.ClipperLib/TEdge edge1, Cinemachine.ClipperLib/TEdge edge2, out Cinemachine.ClipperLib/IntPoint ip)
    // Offset: 0x2AC43D0
    void IntersectPoint(::Cinemachine::ClipperLib::TEdge* edge1, ::Cinemachine::ClipperLib::TEdge* edge2, ByRef<::Cinemachine::ClipperLib::IntPoint> ip);
    // private System.Void ProcessEdgesAtTopOfScanbeam(System.Int64 topY)
    // Offset: 0x2AC08BC
    void ProcessEdgesAtTopOfScanbeam(int64_t topY);
    // private System.Void DoMaxima(Cinemachine.ClipperLib/TEdge e)
    // Offset: 0x2AC4790
    void DoMaxima(::Cinemachine::ClipperLib::TEdge* e);
    // static public System.Void ReversePaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> polys)
    // Offset: 0x2AC4914
    static void ReversePaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* polys);
    // static public System.Boolean Orientation(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> poly)
    // Offset: 0x2AC4A7C
    static bool Orientation(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly);
    // private System.Int32 PointCount(Cinemachine.ClipperLib/OutPt pts)
    // Offset: 0x2AC4BA4
    int PointCount(::Cinemachine::ClipperLib::OutPt* pts);
    // private System.Void BuildResult(System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> polyg)
    // Offset: 0x2ABFD24
    void BuildResult(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* polyg);
    // private System.Void BuildResult2(Cinemachine.ClipperLib/PolyTree polytree)
    // Offset: 0x2ABFF9C
    void BuildResult2(::Cinemachine::ClipperLib::PolyTree* polytree);
    // private System.Void FixupOutPolyline(Cinemachine.ClipperLib/OutRec outrec)
    // Offset: 0x2AC1034
    void FixupOutPolyline(::Cinemachine::ClipperLib::OutRec* outrec);
    // private System.Void FixupOutPolygon(Cinemachine.ClipperLib/OutRec outRec)
    // Offset: 0x2AC10FC
    void FixupOutPolygon(::Cinemachine::ClipperLib::OutRec* outRec);
    // private Cinemachine.ClipperLib/OutPt DupOutPt(Cinemachine.ClipperLib/OutPt outPt, System.Boolean InsertAfter)
    // Offset: 0x2AC4BD4
    ::Cinemachine::ClipperLib::OutPt* DupOutPt(::Cinemachine::ClipperLib::OutPt* outPt, bool InsertAfter);
    // private System.Boolean GetOverlap(System.Int64 a1, System.Int64 a2, System.Int64 b1, System.Int64 b2, out System.Int64 Left, out System.Int64 Right)
    // Offset: 0x2AC4CE8
    bool GetOverlap(int64_t a1, int64_t a2, int64_t b1, int64_t b2, ByRef<int64_t> Left, ByRef<int64_t> Right);
    // private System.Boolean JoinHorz(Cinemachine.ClipperLib/OutPt op1, Cinemachine.ClipperLib/OutPt op1b, Cinemachine.ClipperLib/OutPt op2, Cinemachine.ClipperLib/OutPt op2b, Cinemachine.ClipperLib/IntPoint Pt, System.Boolean DiscardLeft)
    // Offset: 0x2AC4E00
    bool JoinHorz(::Cinemachine::ClipperLib::OutPt* op1, ::Cinemachine::ClipperLib::OutPt* op1b, ::Cinemachine::ClipperLib::OutPt* op2, ::Cinemachine::ClipperLib::OutPt* op2b, ::Cinemachine::ClipperLib::IntPoint Pt, bool DiscardLeft);
    // private System.Boolean JoinPoints(Cinemachine.ClipperLib/Join j, Cinemachine.ClipperLib/OutRec outRec1, Cinemachine.ClipperLib/OutRec outRec2)
    // Offset: 0x2AC514C
    bool JoinPoints(::Cinemachine::ClipperLib::Join* j, ::Cinemachine::ClipperLib::OutRec* outRec1, ::Cinemachine::ClipperLib::OutRec* outRec2);
    // static public System.Int32 PointInPolygon(Cinemachine.ClipperLib/IntPoint pt, System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> path)
    // Offset: 0x2AC5760
    static int PointInPolygon(::Cinemachine::ClipperLib::IntPoint pt, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path);
    // static private System.Int32 PointInPolygon(Cinemachine.ClipperLib/IntPoint pt, Cinemachine.ClipperLib/OutPt op)
    // Offset: 0x2AC58F4
    static int PointInPolygon(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::OutPt* op);
    // static private System.Boolean Poly2ContainsPoly1(Cinemachine.ClipperLib/OutPt outPt1, Cinemachine.ClipperLib/OutPt outPt2)
    // Offset: 0x2AC59EC
    static bool Poly2ContainsPoly1(::Cinemachine::ClipperLib::OutPt* outPt1, ::Cinemachine::ClipperLib::OutPt* outPt2);
    // private System.Void FixupFirstLefts1(Cinemachine.ClipperLib/OutRec OldOutRec, Cinemachine.ClipperLib/OutRec NewOutRec)
    // Offset: 0x2AC5A40
    void FixupFirstLefts1(::Cinemachine::ClipperLib::OutRec* OldOutRec, ::Cinemachine::ClipperLib::OutRec* NewOutRec);
    // private System.Void FixupFirstLefts2(Cinemachine.ClipperLib/OutRec innerOutRec, Cinemachine.ClipperLib/OutRec outerOutRec)
    // Offset: 0x2AC5C04
    void FixupFirstLefts2(::Cinemachine::ClipperLib::OutRec* innerOutRec, ::Cinemachine::ClipperLib::OutRec* outerOutRec);
    // private System.Void FixupFirstLefts3(Cinemachine.ClipperLib/OutRec OldOutRec, Cinemachine.ClipperLib/OutRec NewOutRec)
    // Offset: 0x2AC5E38
    void FixupFirstLefts3(::Cinemachine::ClipperLib::OutRec* OldOutRec, ::Cinemachine::ClipperLib::OutRec* NewOutRec);
    // static private Cinemachine.ClipperLib/OutRec ParseFirstLeft(Cinemachine.ClipperLib/OutRec FirstLeft)
    // Offset: 0x2AC5BEC
    static ::Cinemachine::ClipperLib::OutRec* ParseFirstLeft(::Cinemachine::ClipperLib::OutRec* FirstLeft);
    // private System.Void JoinCommonEdges()
    // Offset: 0x2AC0CB0
    void JoinCommonEdges();
    // private System.Void UpdateOutPtIdxs(Cinemachine.ClipperLib/OutRec outrec)
    // Offset: 0x2AC5FB8
    void UpdateOutPtIdxs(::Cinemachine::ClipperLib::OutRec* outrec);
    // private System.Void DoSimplePolygons()
    // Offset: 0x2AC1274
    void DoSimplePolygons();
    // static public System.Double Area(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> poly)
    // Offset: 0x2AC4A94
    static double Area(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly);
    // System.Double Area(Cinemachine.ClipperLib/OutRec outRec)
    // Offset: 0x2AC0C40
    double Area(::Cinemachine::ClipperLib::OutRec* outRec);
    // System.Double Area(Cinemachine.ClipperLib/OutPt op)
    // Offset: 0x2AC3358
    double Area(::Cinemachine::ClipperLib::OutPt* op);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> SimplifyPolygon(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> poly, Cinemachine.ClipperLib/PolyFillType fillType)
    // Offset: 0x2AC5FEC
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* SimplifyPolygon(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly, ::Cinemachine::ClipperLib::PolyFillType fillType);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> SimplifyPolygons(System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> polys, Cinemachine.ClipperLib/PolyFillType fillType)
    // Offset: 0x2AC60D0
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* SimplifyPolygons(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* polys, ::Cinemachine::ClipperLib::PolyFillType fillType);
    // static private System.Double DistanceSqrd(Cinemachine.ClipperLib/IntPoint pt1, Cinemachine.ClipperLib/IntPoint pt2)
    // Offset: 0x2AC61B4
    static double DistanceSqrd(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2);
    // static private System.Double DistanceFromLineSqrd(Cinemachine.ClipperLib/IntPoint pt, Cinemachine.ClipperLib/IntPoint ln1, Cinemachine.ClipperLib/IntPoint ln2)
    // Offset: 0x2AC61DC
    static double DistanceFromLineSqrd(::Cinemachine::ClipperLib::IntPoint pt, ::Cinemachine::ClipperLib::IntPoint ln1, ::Cinemachine::ClipperLib::IntPoint ln2);
    // static private System.Boolean SlopesNearCollinear(Cinemachine.ClipperLib/IntPoint pt1, Cinemachine.ClipperLib/IntPoint pt2, Cinemachine.ClipperLib/IntPoint pt3, System.Double distSqrd)
    // Offset: 0x2AC6230
    static bool SlopesNearCollinear(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, ::Cinemachine::ClipperLib::IntPoint pt3, double distSqrd);
    // static private System.Boolean PointsAreClose(Cinemachine.ClipperLib/IntPoint pt1, Cinemachine.ClipperLib/IntPoint pt2, System.Double distSqrd)
    // Offset: 0x2AC637C
    static bool PointsAreClose(::Cinemachine::ClipperLib::IntPoint pt1, ::Cinemachine::ClipperLib::IntPoint pt2, double distSqrd);
    // static private Cinemachine.ClipperLib/OutPt ExcludeOp(Cinemachine.ClipperLib/OutPt op)
    // Offset: 0x2AC63AC
    static ::Cinemachine::ClipperLib::OutPt* ExcludeOp(::Cinemachine::ClipperLib::OutPt* op);
    // static public System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> CleanPolygon(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> path, System.Double distance)
    // Offset: 0x2AC6400
    static ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* CleanPolygon(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, double distance);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> CleanPolygons(System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> polys, System.Double distance)
    // Offset: 0x2AC67CC
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* CleanPolygons(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* polys, double distance);
    // static System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> Minkowski(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> pattern, System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> path, System.Boolean IsSum, System.Boolean IsClosed)
    // Offset: 0x2AC6924
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* Minkowski(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* pattern, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, bool IsSum, bool IsClosed);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> MinkowskiSum(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> pattern, System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> path, System.Boolean pathIsClosed)
    // Offset: 0x2AC7268
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* MinkowskiSum(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* pattern, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, bool pathIsClosed);
    // static private System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> TranslatePath(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> path, Cinemachine.ClipperLib/IntPoint delta)
    // Offset: 0x2AC7320
    static ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* TranslatePath(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* path, ::Cinemachine::ClipperLib::IntPoint delta);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> MinkowskiSum(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> pattern, System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> paths, System.Boolean pathIsClosed)
    // Offset: 0x2AC7494
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* MinkowskiSum(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* pattern, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* paths, bool pathIsClosed);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> MinkowskiDiff(System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> poly1, System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint> poly2)
    // Offset: 0x2AC7654
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* MinkowskiDiff(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly1, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* poly2);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> PolyTreeToPaths(Cinemachine.ClipperLib/PolyTree polytree)
    // Offset: 0x2AC7708
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* PolyTreeToPaths(::Cinemachine::ClipperLib::PolyTree* polytree);
    // static System.Void AddPolyNodeToPaths(Cinemachine.ClipperLib/PolyNode polynode, Cinemachine.ClipperLib/Clipper/NodeType nt, System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> paths)
    // Offset: 0x2AC77C4
    static void AddPolyNodeToPaths(::Cinemachine::ClipperLib::PolyNode* polynode, ::Cinemachine::ClipperLib::Clipper::NodeType nt, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* paths);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> OpenPathsFromPolyTree(Cinemachine.ClipperLib/PolyTree polytree)
    // Offset: 0x2AC79C4
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* OpenPathsFromPolyTree(::Cinemachine::ClipperLib::PolyTree* polytree);
    // static public System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.ClipperLib/IntPoint>> ClosedPathsFromPolyTree(Cinemachine.ClipperLib/PolyTree polytree)
    // Offset: 0x2AC7B50
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* ClosedPathsFromPolyTree(::Cinemachine::ClipperLib::PolyTree* polytree);
  }; // Cinemachine.ClipperLib/Clipper
  #pragma pack(pop)
  static check_size<sizeof(ClipperLib::Clipper), 138 + sizeof(bool)> __Cinemachine_ClipperLib_ClipperSizeCheck;
  static_assert(sizeof(ClipperLib::Clipper) == 0x8B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::InsertMaxima
// Il2CppName: InsertMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(int64_t)>(&Cinemachine::ClipperLib::Clipper::InsertMaxima)> {
  static const MethodInfo* get() {
    static auto* X = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "InsertMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{X});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::get_ReverseSolution
// Il2CppName: get_ReverseSolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::get_ReverseSolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "get_ReverseSolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::set_ReverseSolution
// Il2CppName: set_ReverseSolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(bool)>(&Cinemachine::ClipperLib::Clipper::set_ReverseSolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "set_ReverseSolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::get_StrictlySimple
// Il2CppName: get_StrictlySimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::get_StrictlySimple)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "get_StrictlySimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::set_StrictlySimple
// Il2CppName: set_StrictlySimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(bool)>(&Cinemachine::ClipperLib::Clipper::set_StrictlySimple)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "set_StrictlySimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::ClipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, ::Cinemachine::ClipperLib::PolyFillType)>(&Cinemachine::ClipperLib::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/ClipType")->byval_arg;
    static auto* solution = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    static auto* FillType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, solution, FillType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::ClipType, ::Cinemachine::ClipperLib::PolyTree*, ::Cinemachine::ClipperLib::PolyFillType)>(&Cinemachine::ClipperLib::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/ClipType")->byval_arg;
    static auto* polytree = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyTree")->byval_arg;
    static auto* FillType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, polytree, FillType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::ClipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, ::Cinemachine::ClipperLib::PolyFillType, ::Cinemachine::ClipperLib::PolyFillType)>(&Cinemachine::ClipperLib::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/ClipType")->byval_arg;
    static auto* solution = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    static auto* subjFillType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyFillType")->byval_arg;
    static auto* clipFillType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, solution, subjFillType, clipFillType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::ClipType, ::Cinemachine::ClipperLib::PolyTree*, ::Cinemachine::ClipperLib::PolyFillType, ::Cinemachine::ClipperLib::PolyFillType)>(&Cinemachine::ClipperLib::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/ClipType")->byval_arg;
    static auto* polytree = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyTree")->byval_arg;
    static auto* subjFillType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyFillType")->byval_arg;
    static auto* clipFillType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, polytree, subjFillType, clipFillType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::FixHoleLinkage
// Il2CppName: FixHoleLinkage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::FixHoleLinkage)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "FixHoleLinkage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ExecuteInternal
// Il2CppName: ExecuteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::ExecuteInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ExecuteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::DisposeAllPolyPts
// Il2CppName: DisposeAllPolyPts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::DisposeAllPolyPts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "DisposeAllPolyPts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::AddJoin
// Il2CppName: AddJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::AddJoin)> {
  static const MethodInfo* get() {
    static auto* Op1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* Op2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* OffPt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "AddJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Op1, Op2, OffPt});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::AddGhostJoin
// Il2CppName: AddGhostJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::AddGhostJoin)> {
  static const MethodInfo* get() {
    static auto* Op = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* OffPt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "AddGhostJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Op, OffPt});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::InsertLocalMinimaIntoAEL
// Il2CppName: InsertLocalMinimaIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(int64_t)>(&Cinemachine::ClipperLib::Clipper::InsertLocalMinimaIntoAEL)> {
  static const MethodInfo* get() {
    static auto* botY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "InsertLocalMinimaIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{botY});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::InsertEdgeIntoAEL
// Il2CppName: InsertEdgeIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::InsertEdgeIntoAEL)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* startEdge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "InsertEdgeIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge, startEdge});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::E2InsertsBeforeE1
// Il2CppName: E2InsertsBeforeE1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::E2InsertsBeforeE1)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "E2InsertsBeforeE1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IsEvenOddFillType
// Il2CppName: IsEvenOddFillType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::IsEvenOddFillType)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IsEvenOddFillType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IsEvenOddAltFillType
// Il2CppName: IsEvenOddAltFillType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::IsEvenOddAltFillType)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IsEvenOddAltFillType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IsContributing
// Il2CppName: IsContributing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::IsContributing)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IsContributing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SetWindingCount
// Il2CppName: SetWindingCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::SetWindingCount)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SetWindingCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::AddEdgeToSEL
// Il2CppName: AddEdgeToSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::AddEdgeToSEL)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "AddEdgeToSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::PopEdgeFromSEL
// Il2CppName: PopEdgeFromSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(ByRef<::Cinemachine::ClipperLib::TEdge*>)>(&Cinemachine::ClipperLib::Clipper::PopEdgeFromSEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "PopEdgeFromSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::CopyAELToSEL
// Il2CppName: CopyAELToSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::CopyAELToSEL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "CopyAELToSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SwapPositionsInSEL
// Il2CppName: SwapPositionsInSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::SwapPositionsInSEL)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SwapPositionsInSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::AddLocalMaxPoly
// Il2CppName: AddLocalMaxPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::AddLocalMaxPoly)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "AddLocalMaxPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::AddLocalMinPoly
// Il2CppName: AddLocalMinPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutPt* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::AddLocalMinPoly)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "AddLocalMinPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::AddOutPt
// Il2CppName: AddOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutPt* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::AddOutPt)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "AddOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, pt});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetLastOutPt
// Il2CppName: GetLastOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutPt* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::GetLastOutPt)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetLastOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SwapPoints
// Il2CppName: SwapPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(ByRef<::Cinemachine::ClipperLib::IntPoint>, ByRef<::Cinemachine::ClipperLib::IntPoint>)>(&Cinemachine::ClipperLib::Clipper::SwapPoints)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->this_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SwapPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::HorzSegmentsOverlap
// Il2CppName: HorzSegmentsOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(int64_t, int64_t, int64_t, int64_t)>(&Cinemachine::ClipperLib::Clipper::HorzSegmentsOverlap)> {
  static const MethodInfo* get() {
    static auto* seg1a = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg1b = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg2a = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg2b = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "HorzSegmentsOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seg1a, seg1b, seg2a, seg2b});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SetHoleState
// Il2CppName: SetHoleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::SetHoleState)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* outRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SetHoleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, outRec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetDx
// Il2CppName: GetDx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::GetDx)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetDx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::FirstIsBottomPt
// Il2CppName: FirstIsBottomPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::Clipper::FirstIsBottomPt)> {
  static const MethodInfo* get() {
    static auto* btmPt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* btmPt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "FirstIsBottomPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{btmPt1, btmPt2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetBottomPt
// Il2CppName: GetBottomPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutPt* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::Clipper::GetBottomPt)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetBottomPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetLowermostRec
// Il2CppName: GetLowermostRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutRec* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*, ::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::GetLowermostRec)> {
  static const MethodInfo* get() {
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetLowermostRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::OutRec1RightOfOutRec2
// Il2CppName: OutRec1RightOfOutRec2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*, ::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::OutRec1RightOfOutRec2)> {
  static const MethodInfo* get() {
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "OutRec1RightOfOutRec2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetOutRec
// Il2CppName: GetOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutRec* (Cinemachine::ClipperLib::Clipper::*)(int)>(&Cinemachine::ClipperLib::Clipper::GetOutRec)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::AppendPolygon
// Il2CppName: AppendPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::AppendPolygon)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "AppendPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ReversePolyPtLinks
// Il2CppName: ReversePolyPtLinks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::Clipper::ReversePolyPtLinks)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ReversePolyPtLinks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SwapSides
// Il2CppName: SwapSides
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::SwapSides)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SwapSides", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SwapPolyIndexes
// Il2CppName: SwapPolyIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::SwapPolyIndexes)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SwapPolyIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IntersectEdges
// Il2CppName: IntersectEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::IntersectEdges)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IntersectEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::DeleteFromSEL
// Il2CppName: DeleteFromSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::DeleteFromSEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "DeleteFromSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ProcessHorizontals
// Il2CppName: ProcessHorizontals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::ProcessHorizontals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ProcessHorizontals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetHorzDirection
// Il2CppName: GetHorzDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ByRef<::Cinemachine::ClipperLib::Direction>, ByRef<int64_t>, ByRef<int64_t>)>(&Cinemachine::ClipperLib::Clipper::GetHorzDirection)> {
  static const MethodInfo* get() {
    static auto* HorzEdge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* Dir = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/Direction")->this_arg;
    static auto* Left = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* Right = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetHorzDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HorzEdge, Dir, Left, Right});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ProcessHorizontal
// Il2CppName: ProcessHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::ProcessHorizontal)> {
  static const MethodInfo* get() {
    static auto* horzEdge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ProcessHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{horzEdge});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetNextInAEL
// Il2CppName: GetNextInAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::TEdge* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::Direction)>(&Cinemachine::ClipperLib::Clipper::GetNextInAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* Direction = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/Direction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetNextInAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Direction});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IsMinima
// Il2CppName: IsMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::IsMinima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IsMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IsMaxima
// Il2CppName: IsMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, double)>(&Cinemachine::ClipperLib::Clipper::IsMaxima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IsMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Y});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IsIntermediate
// Il2CppName: IsIntermediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, double)>(&Cinemachine::ClipperLib::Clipper::IsIntermediate)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IsIntermediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Y});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetMaximaPair
// Il2CppName: GetMaximaPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::TEdge* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::GetMaximaPair)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetMaximaPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetMaximaPairEx
// Il2CppName: GetMaximaPairEx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::TEdge* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::GetMaximaPairEx)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetMaximaPairEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ProcessIntersections
// Il2CppName: ProcessIntersections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(int64_t)>(&Cinemachine::ClipperLib::Clipper::ProcessIntersections)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ProcessIntersections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::BuildIntersectList
// Il2CppName: BuildIntersectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(int64_t)>(&Cinemachine::ClipperLib::Clipper::BuildIntersectList)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "BuildIntersectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::EdgesAdjacent
// Il2CppName: EdgesAdjacent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::IntersectNode*)>(&Cinemachine::ClipperLib::Clipper::EdgesAdjacent)> {
  static const MethodInfo* get() {
    static auto* inode = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntersectNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "EdgesAdjacent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inode});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IntersectNodeSort
// Il2CppName: IntersectNodeSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Cinemachine::ClipperLib::IntersectNode*, ::Cinemachine::ClipperLib::IntersectNode*)>(&Cinemachine::ClipperLib::Clipper::IntersectNodeSort)> {
  static const MethodInfo* get() {
    static auto* node1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntersectNode")->byval_arg;
    static auto* node2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntersectNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IntersectNodeSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node1, node2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::FixupIntersectionOrder
// Il2CppName: FixupIntersectionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::FixupIntersectionOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "FixupIntersectionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ProcessIntersectList
// Il2CppName: ProcessIntersectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::ProcessIntersectList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ProcessIntersectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&Cinemachine::ClipperLib::Clipper::Round)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::TopX
// Il2CppName: TopX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::Cinemachine::ClipperLib::TEdge*, int64_t)>(&Cinemachine::ClipperLib::Clipper::TopX)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* currentY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "TopX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge, currentY});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::IntersectPoint
// Il2CppName: IntersectPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*, ::Cinemachine::ClipperLib::TEdge*, ByRef<::Cinemachine::ClipperLib::IntPoint>)>(&Cinemachine::ClipperLib::Clipper::IntersectPoint)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    static auto* ip = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "IntersectPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2, ip});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam
// Il2CppName: ProcessEdgesAtTopOfScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(int64_t)>(&Cinemachine::ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ProcessEdgesAtTopOfScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::DoMaxima
// Il2CppName: DoMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::TEdge*)>(&Cinemachine::ClipperLib::Clipper::DoMaxima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "DoMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ReversePaths
// Il2CppName: ReversePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*)>(&Cinemachine::ClipperLib::Clipper::ReversePaths)> {
  static const MethodInfo* get() {
    static auto* polys = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ReversePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polys});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Orientation
// Il2CppName: Orientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*)>(&Cinemachine::ClipperLib::Clipper::Orientation)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Orientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::PointCount
// Il2CppName: PointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::Clipper::PointCount)> {
  static const MethodInfo* get() {
    static auto* pts = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "PointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pts});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::BuildResult
// Il2CppName: BuildResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*)>(&Cinemachine::ClipperLib::Clipper::BuildResult)> {
  static const MethodInfo* get() {
    static auto* polyg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "BuildResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyg});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::BuildResult2
// Il2CppName: BuildResult2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::PolyTree*)>(&Cinemachine::ClipperLib::Clipper::BuildResult2)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "BuildResult2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::FixupOutPolyline
// Il2CppName: FixupOutPolyline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::FixupOutPolyline)> {
  static const MethodInfo* get() {
    static auto* outrec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "FixupOutPolyline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outrec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::FixupOutPolygon
// Il2CppName: FixupOutPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::FixupOutPolygon)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "FixupOutPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::DupOutPt
// Il2CppName: DupOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutPt* (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*, bool)>(&Cinemachine::ClipperLib::Clipper::DupOutPt)> {
  static const MethodInfo* get() {
    static auto* outPt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* InsertAfter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "DupOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPt, InsertAfter});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::GetOverlap
// Il2CppName: GetOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(int64_t, int64_t, int64_t, int64_t, ByRef<int64_t>, ByRef<int64_t>)>(&Cinemachine::ClipperLib::Clipper::GetOverlap)> {
  static const MethodInfo* get() {
    static auto* a1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* a2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* Left = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* Right = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "GetOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a1, a2, b1, b2, Left, Right});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::JoinHorz
// Il2CppName: JoinHorz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::IntPoint, bool)>(&Cinemachine::ClipperLib::Clipper::JoinHorz)> {
  static const MethodInfo* get() {
    static auto* op1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* op1b = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* op2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* op2b = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* Pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* DiscardLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "JoinHorz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op1, op1b, op2, op2b, Pt, DiscardLeft});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::JoinPoints
// Il2CppName: JoinPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::Join*, ::Cinemachine::ClipperLib::OutRec*, ::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::JoinPoints)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/Join")->byval_arg;
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "JoinPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::PointInPolygon
// Il2CppName: PointInPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Cinemachine::ClipperLib::IntPoint, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*)>(&Cinemachine::ClipperLib::Clipper::PointInPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "PointInPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, path});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::PointInPolygon
// Il2CppName: PointInPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::Clipper::PointInPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "PointInPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, op});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Poly2ContainsPoly1
// Il2CppName: Poly2ContainsPoly1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Cinemachine::ClipperLib::OutPt*, ::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::Clipper::Poly2ContainsPoly1)> {
  static const MethodInfo* get() {
    static auto* outPt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    static auto* outPt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Poly2ContainsPoly1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPt1, outPt2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::FixupFirstLefts1
// Il2CppName: FixupFirstLefts1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*, ::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::FixupFirstLefts1)> {
  static const MethodInfo* get() {
    static auto* OldOutRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    static auto* NewOutRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "FixupFirstLefts1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OldOutRec, NewOutRec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::FixupFirstLefts2
// Il2CppName: FixupFirstLefts2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*, ::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::FixupFirstLefts2)> {
  static const MethodInfo* get() {
    static auto* innerOutRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    static auto* outerOutRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "FixupFirstLefts2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerOutRec, outerOutRec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::FixupFirstLefts3
// Il2CppName: FixupFirstLefts3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*, ::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::FixupFirstLefts3)> {
  static const MethodInfo* get() {
    static auto* OldOutRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    static auto* NewOutRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "FixupFirstLefts3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OldOutRec, NewOutRec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ParseFirstLeft
// Il2CppName: ParseFirstLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutRec* (*)(::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::ParseFirstLeft)> {
  static const MethodInfo* get() {
    static auto* FirstLeft = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ParseFirstLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FirstLeft});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::JoinCommonEdges
// Il2CppName: JoinCommonEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::JoinCommonEdges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "JoinCommonEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::UpdateOutPtIdxs
// Il2CppName: UpdateOutPtIdxs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::UpdateOutPtIdxs)> {
  static const MethodInfo* get() {
    static auto* outrec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "UpdateOutPtIdxs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outrec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::DoSimplePolygons
// Il2CppName: DoSimplePolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::Clipper::*)()>(&Cinemachine::ClipperLib::Clipper::DoSimplePolygons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "DoSimplePolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*)>(&Cinemachine::ClipperLib::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutRec*)>(&Cinemachine::ClipperLib::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Cinemachine::ClipperLib::Clipper::*)(::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SimplifyPolygon
// Il2CppName: SimplifyPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, ::Cinemachine::ClipperLib::PolyFillType)>(&Cinemachine::ClipperLib::Clipper::SimplifyPolygon)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* fillType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SimplifyPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly, fillType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SimplifyPolygons
// Il2CppName: SimplifyPolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, ::Cinemachine::ClipperLib::PolyFillType)>(&Cinemachine::ClipperLib::Clipper::SimplifyPolygons)> {
  static const MethodInfo* get() {
    static auto* polys = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    static auto* fillType = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SimplifyPolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polys, fillType});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::DistanceSqrd
// Il2CppName: DistanceSqrd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::DistanceSqrd)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "DistanceSqrd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::DistanceFromLineSqrd
// Il2CppName: DistanceFromLineSqrd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::DistanceFromLineSqrd)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* ln1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* ln2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "DistanceFromLineSqrd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, ln1, ln2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::SlopesNearCollinear
// Il2CppName: SlopesNearCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, double)>(&Cinemachine::ClipperLib::Clipper::SlopesNearCollinear)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* distSqrd = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "SlopesNearCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, distSqrd});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::PointsAreClose
// Il2CppName: PointsAreClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Cinemachine::ClipperLib::IntPoint, ::Cinemachine::ClipperLib::IntPoint, double)>(&Cinemachine::ClipperLib::Clipper::PointsAreClose)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    static auto* distSqrd = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "PointsAreClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, distSqrd});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ExcludeOp
// Il2CppName: ExcludeOp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::OutPt* (*)(::Cinemachine::ClipperLib::OutPt*)>(&Cinemachine::ClipperLib::Clipper::ExcludeOp)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ExcludeOp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::CleanPolygon
// Il2CppName: CleanPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, double)>(&Cinemachine::ClipperLib::Clipper::CleanPolygon)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "CleanPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, distance});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::CleanPolygons
// Il2CppName: CleanPolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, double)>(&Cinemachine::ClipperLib::Clipper::CleanPolygons)> {
  static const MethodInfo* get() {
    static auto* polys = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "CleanPolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polys, distance});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::Minkowski
// Il2CppName: Minkowski
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, bool, bool)>(&Cinemachine::ClipperLib::Clipper::Minkowski)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* IsSum = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* IsClosed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "Minkowski", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern, path, IsSum, IsClosed});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::MinkowskiSum
// Il2CppName: MinkowskiSum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, bool)>(&Cinemachine::ClipperLib::Clipper::MinkowskiSum)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* pathIsClosed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "MinkowskiSum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern, path, pathIsClosed});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::TranslatePath
// Il2CppName: TranslatePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>* (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, ::Cinemachine::ClipperLib::IntPoint)>(&Cinemachine::ClipperLib::Clipper::TranslatePath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "TranslatePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, delta});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::MinkowskiSum
// Il2CppName: MinkowskiSum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*, bool)>(&Cinemachine::ClipperLib::Clipper::MinkowskiSum)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* paths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    static auto* pathIsClosed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "MinkowskiSum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern, paths, pathIsClosed});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::MinkowskiDiff
// Il2CppName: MinkowskiDiff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*, ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*)>(&Cinemachine::ClipperLib::Clipper::MinkowskiDiff)> {
  static const MethodInfo* get() {
    static auto* poly1 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    static auto* poly2 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "MinkowskiDiff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly1, poly2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::PolyTreeToPaths
// Il2CppName: PolyTreeToPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::Cinemachine::ClipperLib::PolyTree*)>(&Cinemachine::ClipperLib::Clipper::PolyTreeToPaths)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "PolyTreeToPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::AddPolyNodeToPaths
// Il2CppName: AddPolyNodeToPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::ClipperLib::PolyNode*, ::Cinemachine::ClipperLib::Clipper::NodeType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>*)>(&Cinemachine::ClipperLib::Clipper::AddPolyNodeToPaths)> {
  static const MethodInfo* get() {
    static auto* polynode = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyNode")->byval_arg;
    static auto* nt = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/Clipper/NodeType")->byval_arg;
    static auto* paths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "AddPolyNodeToPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polynode, nt, paths});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::OpenPathsFromPolyTree
// Il2CppName: OpenPathsFromPolyTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::Cinemachine::ClipperLib::PolyTree*)>(&Cinemachine::ClipperLib::Clipper::OpenPathsFromPolyTree)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "OpenPathsFromPolyTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::Clipper::ClosedPathsFromPolyTree
// Il2CppName: ClosedPathsFromPolyTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::IntPoint>*>* (*)(::Cinemachine::ClipperLib::PolyTree*)>(&Cinemachine::ClipperLib::Clipper::ClosedPathsFromPolyTree)> {
  static const MethodInfo* get() {
    static auto* polytree = &::il2cpp_utils::GetClassFromName("Cinemachine", "ClipperLib/PolyTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::Clipper*), "ClosedPathsFromPolyTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polytree});
  }
};
