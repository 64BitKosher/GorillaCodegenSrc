// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ClipperLib
#include "Cinemachine/ClipperLib.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ClipperLib::ClipperException);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ClipperLib::ClipperException*, "Cinemachine", "ClipperLib/ClipperException");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ClipperLib/ClipperException
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperLib::ClipperException : public ::System::Exception {
    public:
    // public System.Void .ctor(System.String description)
    // Offset: 0x2ACB3D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperLib::ClipperException* New_ctor(::StringW description) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::ClipperException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperLib::ClipperException*, creationType>(description)));
    }
  }; // Cinemachine.ClipperLib/ClipperException
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ClipperLib::ClipperException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
