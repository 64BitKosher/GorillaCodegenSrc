// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ClipperLib
#include "Cinemachine/ClipperLib.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ClipperLib::OutRec);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ClipperLib::OutRec*, "Cinemachine", "ClipperLib/OutRec");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ClipperLib/OutRec
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperLib::OutRec : public ::Il2CppObject {
    public:
    public:
    // System.Int32 Idx
    // Size: 0x4
    // Offset: 0x10
    int Idx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean IsHole
    // Size: 0x1
    // Offset: 0x14
    bool IsHole;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean IsOpen
    // Size: 0x1
    // Offset: 0x15
    bool IsOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsOpen and: FirstLeft
    char __padding2[0x2] = {};
    // Cinemachine.ClipperLib/OutRec FirstLeft
    // Size: 0x8
    // Offset: 0x18
    ::Cinemachine::ClipperLib::OutRec* FirstLeft;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::OutRec*) == 0x8);
    // Cinemachine.ClipperLib/OutPt Pts
    // Size: 0x8
    // Offset: 0x20
    ::Cinemachine::ClipperLib::OutPt* Pts;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::OutPt*) == 0x8);
    // Cinemachine.ClipperLib/OutPt BottomPt
    // Size: 0x8
    // Offset: 0x28
    ::Cinemachine::ClipperLib::OutPt* BottomPt;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::OutPt*) == 0x8);
    // Cinemachine.ClipperLib/PolyNode PolyNode
    // Size: 0x8
    // Offset: 0x30
    ::Cinemachine::ClipperLib::PolyNode* PolyNode;
    // Field size check
    static_assert(sizeof(::Cinemachine::ClipperLib::PolyNode*) == 0x8);
    public:
    // Get instance field reference: System.Int32 Idx
    [[deprecated("Use field access instead!")]] int& dyn_Idx();
    // Get instance field reference: System.Boolean IsHole
    [[deprecated("Use field access instead!")]] bool& dyn_IsHole();
    // Get instance field reference: System.Boolean IsOpen
    [[deprecated("Use field access instead!")]] bool& dyn_IsOpen();
    // Get instance field reference: Cinemachine.ClipperLib/OutRec FirstLeft
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutRec*& dyn_FirstLeft();
    // Get instance field reference: Cinemachine.ClipperLib/OutPt Pts
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutPt*& dyn_Pts();
    // Get instance field reference: Cinemachine.ClipperLib/OutPt BottomPt
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::OutPt*& dyn_BottomPt();
    // Get instance field reference: Cinemachine.ClipperLib/PolyNode PolyNode
    [[deprecated("Use field access instead!")]] ::Cinemachine::ClipperLib::PolyNode*& dyn_PolyNode();
    // public System.Void .ctor()
    // Offset: 0x2ABCC04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperLib::OutRec* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::OutRec::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperLib::OutRec*, creationType>()));
    }
  }; // Cinemachine.ClipperLib/OutRec
  #pragma pack(pop)
  static check_size<sizeof(ClipperLib::OutRec), 48 + sizeof(::Cinemachine::ClipperLib::PolyNode*)> __Cinemachine_ClipperLib_OutRecSizeCheck;
  static_assert(sizeof(ClipperLib::OutRec) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ClipperLib::OutRec::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
