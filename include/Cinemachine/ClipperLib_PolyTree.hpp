// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ClipperLib
#include "Cinemachine/ClipperLib.hpp"
// Including type: Cinemachine.ClipperLib/PolyNode
#include "Cinemachine/ClipperLib_PolyNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ClipperLib::PolyTree);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ClipperLib::PolyTree*, "Cinemachine", "ClipperLib/PolyTree");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ClipperLib/PolyTree
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperLib::PolyTree : public ::Cinemachine::ClipperLib::PolyNode {
    public:
    // Writing base type padding for base size: 0x39 to desired offset: 0x40
    char ___base_padding[0x7] = {};
    public:
    // System.Collections.Generic.List`1<Cinemachine.ClipperLib/PolyNode> m_AllPolys
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>* m_AllPolys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>*
    constexpr operator ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>*() const noexcept {
      return m_AllPolys;
    }
    // Get instance field reference: System.Collections.Generic.List`1<Cinemachine.ClipperLib/PolyNode> m_AllPolys
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>*& dyn_m_AllPolys();
    // public System.Void Clear()
    // Offset: 0x2ABC134
    void Clear();
    // public Cinemachine.ClipperLib/PolyNode GetFirst()
    // Offset: 0x2ABC21C
    ::Cinemachine::ClipperLib::PolyNode* GetFirst();
    // public System.Int32 get_Total()
    // Offset: 0x2ABC298
    int get_Total();
    // public System.Void .ctor()
    // Offset: 0x2ABC340
    // Implemented from: Cinemachine.ClipperLib/PolyNode
    // Base method: System.Void PolyNode::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperLib::PolyTree* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ClipperLib::PolyTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperLib::PolyTree*, creationType>()));
    }
  }; // Cinemachine.ClipperLib/PolyTree
  #pragma pack(pop)
  static check_size<sizeof(ClipperLib::PolyTree), 64 + sizeof(::System::Collections::Generic::List_1<::Cinemachine::ClipperLib::PolyNode*>*)> __Cinemachine_ClipperLib_PolyTreeSizeCheck;
  static_assert(sizeof(ClipperLib::PolyTree) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ClipperLib::PolyTree::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ClipperLib::PolyTree::*)()>(&Cinemachine::ClipperLib::PolyTree::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::PolyTree*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::PolyTree::GetFirst
// Il2CppName: GetFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ClipperLib::PolyNode* (Cinemachine::ClipperLib::PolyTree::*)()>(&Cinemachine::ClipperLib::PolyTree::GetFirst)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::PolyTree*), "GetFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::PolyTree::get_Total
// Il2CppName: get_Total
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::ClipperLib::PolyTree::*)()>(&Cinemachine::ClipperLib::PolyTree::get_Total)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ClipperLib::PolyTree*), "get_Total", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ClipperLib::PolyTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
