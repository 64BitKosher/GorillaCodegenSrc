// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineImpulseDefinition
  class CinemachineImpulseDefinition;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineImpulseSource
  class CinemachineImpulseSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineImpulseSource);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineImpulseSource*, "Cinemachine", "CinemachineImpulseSource");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineImpulseSource
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [SaveDuringPlayAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: FFFFFFFF
  class CinemachineImpulseSource : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public Cinemachine.CinemachineImpulseDefinition m_ImpulseDefinition
    // Size: 0x8
    // Offset: 0x20
    ::Cinemachine::CinemachineImpulseDefinition* m_ImpulseDefinition;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineImpulseDefinition*) == 0x8);
    // public UnityEngine.Vector3 m_DefaultVelocity
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 m_DefaultVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public Cinemachine.CinemachineImpulseDefinition m_ImpulseDefinition
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseDefinition*& dyn_m_ImpulseDefinition();
    // Get instance field reference: public UnityEngine.Vector3 m_DefaultVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_DefaultVelocity();
    // private System.Void OnValidate()
    // Offset: 0x2ABBA74
    void OnValidate();
    // private System.Void Reset()
    // Offset: 0x2ABBA8C
    void Reset();
    // public System.Void GenerateImpulseAtPositionWithVelocity(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity)
    // Offset: 0x2ABBB98
    void GenerateImpulseAtPositionWithVelocity(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity);
    // public System.Void GenerateImpulseWithVelocity(UnityEngine.Vector3 velocity)
    // Offset: 0x2AB7F4C
    void GenerateImpulseWithVelocity(::UnityEngine::Vector3 velocity);
    // public System.Void GenerateImpulseWithForce(System.Single force)
    // Offset: 0x2ABBBA8
    void GenerateImpulseWithForce(float force);
    // public System.Void GenerateImpulse()
    // Offset: 0x2ABBC04
    void GenerateImpulse();
    // public System.Void GenerateImpulseAt(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity)
    // Offset: 0x2ABBC10
    void GenerateImpulseAt(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 velocity);
    // public System.Void GenerateImpulse(UnityEngine.Vector3 velocity)
    // Offset: 0x2ABBC20
    void GenerateImpulse(::UnityEngine::Vector3 velocity);
    // public System.Void GenerateImpulse(System.Single force)
    // Offset: 0x2ABBC24
    void GenerateImpulse(float force);
    // public System.Void .ctor()
    // Offset: 0x2AB85C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineImpulseSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineImpulseSource*, creationType>()));
    }
  }; // Cinemachine.CinemachineImpulseSource
  #pragma pack(pop)
  static check_size<sizeof(CinemachineImpulseSource), 40 + sizeof(::UnityEngine::Vector3)> __Cinemachine_CinemachineImpulseSourceSizeCheck;
  static_assert(sizeof(CinemachineImpulseSource) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)()>(&Cinemachine::CinemachineImpulseSource::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)()>(&Cinemachine::CinemachineImpulseSource::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::GenerateImpulseAtPositionWithVelocity
// Il2CppName: GenerateImpulseAtPositionWithVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineImpulseSource::GenerateImpulseAtPositionWithVelocity)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "GenerateImpulseAtPositionWithVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, velocity});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::GenerateImpulseWithVelocity
// Il2CppName: GenerateImpulseWithVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineImpulseSource::GenerateImpulseWithVelocity)> {
  static const MethodInfo* get() {
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "GenerateImpulseWithVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocity});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::GenerateImpulseWithForce
// Il2CppName: GenerateImpulseWithForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)(float)>(&Cinemachine::CinemachineImpulseSource::GenerateImpulseWithForce)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "GenerateImpulseWithForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::GenerateImpulse
// Il2CppName: GenerateImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)()>(&Cinemachine::CinemachineImpulseSource::GenerateImpulse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "GenerateImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::GenerateImpulseAt
// Il2CppName: GenerateImpulseAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineImpulseSource::GenerateImpulseAt)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "GenerateImpulseAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, velocity});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::GenerateImpulse
// Il2CppName: GenerateImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineImpulseSource::GenerateImpulse)> {
  static const MethodInfo* get() {
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "GenerateImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocity});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::GenerateImpulse
// Il2CppName: GenerateImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseSource::*)(float)>(&Cinemachine::CinemachineImpulseSource::GenerateImpulse)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseSource*), "GenerateImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
