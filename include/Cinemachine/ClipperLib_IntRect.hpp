// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ClipperLib
#include "Cinemachine/ClipperLib.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ClipperLib::IntRect, "Cinemachine", "ClipperLib/IntRect");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cinemachine.ClipperLib/IntRect
  // [TokenAttribute] Offset: FFFFFFFF
  struct ClipperLib::IntRect/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int64 left
    // Size: 0x8
    // Offset: 0x0
    int64_t left;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 top
    // Size: 0x8
    // Offset: 0x8
    int64_t top;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 right
    // Size: 0x8
    // Offset: 0x10
    int64_t right;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 bottom
    // Size: 0x8
    // Offset: 0x18
    int64_t bottom;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: IntRect
    constexpr IntRect(int64_t left_ = {}, int64_t top_ = {}, int64_t right_ = {}, int64_t bottom_ = {}) noexcept : left{left_}, top{top_}, right{right_}, bottom{bottom_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int64 left
    [[deprecated("Use field access instead!")]] int64_t& dyn_left();
    // Get instance field reference: public System.Int64 top
    [[deprecated("Use field access instead!")]] int64_t& dyn_top();
    // Get instance field reference: public System.Int64 right
    [[deprecated("Use field access instead!")]] int64_t& dyn_right();
    // Get instance field reference: public System.Int64 bottom
    [[deprecated("Use field access instead!")]] int64_t& dyn_bottom();
    // public System.Void .ctor(System.Int64 l, System.Int64 t, System.Int64 r, System.Int64 b)
    // Offset: 0x2ABCB6C
    // ABORTED: conflicts with another method.  IntRect(int64_t l, int64_t t, int64_t r, int64_t b);
    // public System.Void .ctor(Cinemachine.ClipperLib/IntRect ir)
    // Offset: 0x2ABCB78
    // ABORTED: is copy constructor.  IntRect(::Cinemachine::ClipperLib::IntRect ir);
  }; // Cinemachine.ClipperLib/IntRect
  #pragma pack(pop)
  static check_size<sizeof(ClipperLib::IntRect), 24 + sizeof(int64_t)> __Cinemachine_ClipperLib_IntRectSizeCheck;
  static_assert(sizeof(ClipperLib::IntRect) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ClipperLib::IntRect::IntRect
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::ClipperLib::IntRect::IntRect
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
