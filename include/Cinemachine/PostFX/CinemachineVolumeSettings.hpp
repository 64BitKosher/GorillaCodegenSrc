// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineExtension
#include "Cinemachine/CinemachineExtension.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Cinemachine::PostFX
namespace Cinemachine::PostFX {
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: VolumeProfile
  class VolumeProfile;
  // Forward declaring type: Volume
  class Volume;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBrain
  class CinemachineBrain;
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
  // Forward declaring type: CameraState
  struct CameraState;
}
// Completed forward declares
// Type namespace: Cinemachine.PostFX
namespace Cinemachine::PostFX {
  // Forward declaring type: CinemachineVolumeSettings
  class CinemachineVolumeSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::PostFX::CinemachineVolumeSettings);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::PostFX::CinemachineVolumeSettings*, "Cinemachine.PostFX", "CinemachineVolumeSettings");
// Type namespace: Cinemachine.PostFX
namespace Cinemachine::PostFX {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.PostFX.CinemachineVolumeSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [SaveDuringPlayAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class CinemachineVolumeSettings : public ::Cinemachine::CinemachineExtension {
    public:
    // Nested type: ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode
    struct FocusTrackingMode;
    // Nested type: ::Cinemachine::PostFX::CinemachineVolumeSettings::VcamExtraState
    class VcamExtraState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct FocusTrackingMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FocusTrackingMode
      constexpr FocusTrackingMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode None
      static constexpr const int None = 0;
      // Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode None
      static ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode _get_None();
      // Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode None
      static void _set_None(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value);
      // static field const value: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode LookAtTarget
      static constexpr const int LookAtTarget = 1;
      // Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode LookAtTarget
      static ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode _get_LookAtTarget();
      // Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode LookAtTarget
      static void _set_LookAtTarget(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value);
      // static field const value: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode FollowTarget
      static constexpr const int FollowTarget = 2;
      // Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode FollowTarget
      static ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode _get_FollowTarget();
      // Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode FollowTarget
      static void _set_FollowTarget(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value);
      // static field const value: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode CustomTarget
      static constexpr const int CustomTarget = 3;
      // Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode CustomTarget
      static ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode _get_CustomTarget();
      // Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode CustomTarget
      static void _set_CustomTarget(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value);
      // static field const value: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode Camera
      static constexpr const int Camera = 4;
      // Get static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode Camera
      static ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode _get_Camera();
      // Set static field: static public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode Camera
      static void _set_Camera(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineVolumeSettings::FocusTrackingMode), 0 + sizeof(int)> __Cinemachine_PostFX_CinemachineVolumeSettings_FocusTrackingModeSizeCheck;
    static_assert(sizeof(CinemachineVolumeSettings::FocusTrackingMode) == 0x4);
    public:
    // public System.Boolean m_FocusTracksTarget
    // Size: 0x1
    // Offset: 0x30
    bool m_FocusTracksTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_FocusTracksTarget and: m_FocusTracking
    char __padding0[0x3] = {};
    // public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode m_FocusTracking
    // Size: 0x4
    // Offset: 0x34
    ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode m_FocusTracking;
    // Field size check
    static_assert(sizeof(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode) == 0x4);
    // public UnityEngine.Transform m_FocusTarget
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* m_FocusTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single m_FocusOffset
    // Size: 0x4
    // Offset: 0x40
    float m_FocusOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_FocusOffset and: m_Profile
    char __padding3[0x4] = {};
    // public UnityEngine.Rendering.VolumeProfile m_Profile
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Rendering::VolumeProfile* m_Profile;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::VolumeProfile*) == 0x8);
    public:
    // Get static field: static public System.Single s_VolumePriority
    static float _get_s_VolumePriority();
    // Set static field: static public System.Single s_VolumePriority
    static void _set_s_VolumePriority(float value);
    // Get static field: static private System.String sVolumeOwnerName
    static ::StringW _get_sVolumeOwnerName();
    // Set static field: static private System.String sVolumeOwnerName
    static void _set_sVolumeOwnerName(::StringW value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.Volume> sVolumes
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>* _get_sVolumes();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Rendering.Volume> sVolumes
    static void _set_sVolumes(::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>* value);
    // Get instance field reference: public System.Boolean m_FocusTracksTarget
    [[deprecated("Use field access instead!")]] bool& dyn_m_FocusTracksTarget();
    // Get instance field reference: public Cinemachine.PostFX.CinemachineVolumeSettings/FocusTrackingMode m_FocusTracking
    [[deprecated("Use field access instead!")]] ::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode& dyn_m_FocusTracking();
    // Get instance field reference: public UnityEngine.Transform m_FocusTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_FocusTarget();
    // Get instance field reference: public System.Single m_FocusOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_FocusOffset();
    // Get instance field reference: public UnityEngine.Rendering.VolumeProfile m_Profile
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::VolumeProfile*& dyn_m_Profile();
    // public System.Boolean get_IsValid()
    // Offset: 0x2ACB44C
    bool get_IsValid();
    // public System.Void InvalidateCachedProfile()
    // Offset: 0x2ACB4E8
    void InvalidateCachedProfile();
    // static private System.Void OnCameraCut(Cinemachine.CinemachineBrain brain)
    // Offset: 0x2ACBCF0
    static void OnCameraCut(::Cinemachine::CinemachineBrain* brain);
    // static private System.Void ApplyPostFX(Cinemachine.CinemachineBrain brain)
    // Offset: 0x2ACBCF4
    static void ApplyPostFX(::Cinemachine::CinemachineBrain* brain);
    // static private System.Collections.Generic.List`1<UnityEngine.Rendering.Volume> GetDynamicBrainVolumes(Cinemachine.CinemachineBrain brain, System.Int32 minVolumes)
    // Offset: 0x2ACBFA4
    static ::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>* GetDynamicBrainVolumes(::Cinemachine::CinemachineBrain* brain, int minVolumes);
    // static private System.Void InitializeModule()
    // Offset: 0x2ACC3B8
    static void InitializeModule();
    // static private System.Void .cctor()
    // Offset: 0x2ACC570
    static void _cctor();
    // protected override System.Void OnEnable()
    // Offset: 0x2ACB640
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::OnEnable()
    void OnEnable();
    // protected override System.Void OnDestroy()
    // Offset: 0x2ACB6F4
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::OnDestroy()
    void OnDestroy();
    // protected override System.Void PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    // Offset: 0x2ACB710
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    void PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime);
    // public System.Void .ctor()
    // Offset: 0x2ACC568
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineVolumeSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::PostFX::CinemachineVolumeSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineVolumeSettings*, creationType>()));
    }
  }; // Cinemachine.PostFX.CinemachineVolumeSettings
  #pragma pack(pop)
  static check_size<sizeof(CinemachineVolumeSettings), 72 + sizeof(::UnityEngine::Rendering::VolumeProfile*)> __Cinemachine_PostFX_CinemachineVolumeSettingsSizeCheck;
  static_assert(sizeof(CinemachineVolumeSettings) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::PostFX::CinemachineVolumeSettings::FocusTrackingMode, "Cinemachine.PostFX", "CinemachineVolumeSettings/FocusTrackingMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::PostFX::CinemachineVolumeSettings::*)()>(&Cinemachine::PostFX::CinemachineVolumeSettings::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::InvalidateCachedProfile
// Il2CppName: InvalidateCachedProfile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::PostFX::CinemachineVolumeSettings::*)()>(&Cinemachine::PostFX::CinemachineVolumeSettings::InvalidateCachedProfile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "InvalidateCachedProfile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::OnCameraCut
// Il2CppName: OnCameraCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::CinemachineBrain*)>(&Cinemachine::PostFX::CinemachineVolumeSettings::OnCameraCut)> {
  static const MethodInfo* get() {
    static auto* brain = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "OnCameraCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brain});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::ApplyPostFX
// Il2CppName: ApplyPostFX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::CinemachineBrain*)>(&Cinemachine::PostFX::CinemachineVolumeSettings::ApplyPostFX)> {
  static const MethodInfo* get() {
    static auto* brain = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "ApplyPostFX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brain});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::GetDynamicBrainVolumes
// Il2CppName: GetDynamicBrainVolumes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Rendering::Volume*>* (*)(::Cinemachine::CinemachineBrain*, int)>(&Cinemachine::PostFX::CinemachineVolumeSettings::GetDynamicBrainVolumes)> {
  static const MethodInfo* get() {
    static auto* brain = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    static auto* minVolumes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "GetDynamicBrainVolumes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brain, minVolumes});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::InitializeModule
// Il2CppName: InitializeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::PostFX::CinemachineVolumeSettings::InitializeModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "InitializeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::PostFX::CinemachineVolumeSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::PostFX::CinemachineVolumeSettings::*)()>(&Cinemachine::PostFX::CinemachineVolumeSettings::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::PostFX::CinemachineVolumeSettings::*)()>(&Cinemachine::PostFX::CinemachineVolumeSettings::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::PostPipelineStageCallback
// Il2CppName: PostPipelineStageCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::PostFX::CinemachineVolumeSettings::*)(::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::Stage, ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::PostFX::CinemachineVolumeSettings::PostPipelineStageCallback)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/Stage")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::PostFX::CinemachineVolumeSettings*), "PostPipelineStageCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, stage, state, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::PostFX::CinemachineVolumeSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
