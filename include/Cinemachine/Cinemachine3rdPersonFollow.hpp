// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CameraState
  struct CameraState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: Cinemachine3rdPersonFollow
  class Cinemachine3rdPersonFollow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::Cinemachine3rdPersonFollow);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::Cinemachine3rdPersonFollow*, "Cinemachine", "Cinemachine3rdPersonFollow");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.Cinemachine3rdPersonFollow
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [SaveDuringPlayAttribute] Offset: FFFFFFFF
  class Cinemachine3rdPersonFollow : public ::Cinemachine::CinemachineComponentBase {
    public:
    public:
    // public UnityEngine.Vector3 Damping
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 Damping;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 ShoulderOffset
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 ShoulderOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single VerticalArmLength
    // Size: 0x4
    // Offset: 0x40
    float VerticalArmLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CameraSide
    // Size: 0x4
    // Offset: 0x44
    float CameraSide;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CameraDistance
    // Size: 0x4
    // Offset: 0x48
    float CameraDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.LayerMask CameraCollisionFilter
    // Size: 0x4
    // Offset: 0x4C
    ::UnityEngine::LayerMask CameraCollisionFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.String IgnoreTag
    // Size: 0x8
    // Offset: 0x50
    ::StringW IgnoreTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single CameraRadius
    // Size: 0x4
    // Offset: 0x58
    float CameraRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single DampingIntoCollision
    // Size: 0x4
    // Offset: 0x5C
    float DampingIntoCollision;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single DampingFromCollision
    // Size: 0x4
    // Offset: 0x60
    float DampingFromCollision;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 m_PreviousFollowTargetPosition
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 m_PreviousFollowTargetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_DampingCorrection
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 m_DampingCorrection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_CamPosCollisionCorrection
    // Size: 0x4
    // Offset: 0x7C
    float m_CamPosCollisionCorrection;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3 Damping
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Damping();
    // Get instance field reference: public UnityEngine.Vector3 ShoulderOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_ShoulderOffset();
    // Get instance field reference: public System.Single VerticalArmLength
    [[deprecated("Use field access instead!")]] float& dyn_VerticalArmLength();
    // Get instance field reference: public System.Single CameraSide
    [[deprecated("Use field access instead!")]] float& dyn_CameraSide();
    // Get instance field reference: public System.Single CameraDistance
    [[deprecated("Use field access instead!")]] float& dyn_CameraDistance();
    // Get instance field reference: public UnityEngine.LayerMask CameraCollisionFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_CameraCollisionFilter();
    // Get instance field reference: public System.String IgnoreTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_IgnoreTag();
    // Get instance field reference: public System.Single CameraRadius
    [[deprecated("Use field access instead!")]] float& dyn_CameraRadius();
    // Get instance field reference: public System.Single DampingIntoCollision
    [[deprecated("Use field access instead!")]] float& dyn_DampingIntoCollision();
    // Get instance field reference: public System.Single DampingFromCollision
    [[deprecated("Use field access instead!")]] float& dyn_DampingFromCollision();
    // Get instance field reference: private UnityEngine.Vector3 m_PreviousFollowTargetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_PreviousFollowTargetPosition();
    // Get instance field reference: private UnityEngine.Vector3 m_DampingCorrection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_DampingCorrection();
    // Get instance field reference: private System.Single m_CamPosCollisionCorrection
    [[deprecated("Use field access instead!")]] float& dyn_m_CamPosCollisionCorrection();
    // private System.Void OnValidate()
    // Offset: 0x2A9BAE4
    void OnValidate();
    // private System.Void Reset()
    // Offset: 0x2A9BB48
    void Reset();
    // private System.Void OnDestroy()
    // Offset: 0x2A9BBA0
    void OnDestroy();
    // private System.Void PositionCamera(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x2A9BD3C
    void PositionCamera(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // public System.Void GetRigPositions(out UnityEngine.Vector3 root, out UnityEngine.Vector3 shoulder, out UnityEngine.Vector3 hand)
    // Offset: 0x2A9C660
    void GetRigPositions(ByRef<::UnityEngine::Vector3> root, ByRef<::UnityEngine::Vector3> shoulder, ByRef<::UnityEngine::Vector3> hand);
    // static UnityEngine.Quaternion GetHeading(UnityEngine.Quaternion targetRot, UnityEngine.Vector3 up)
    // Offset: 0x2A9C12C
    static ::UnityEngine::Quaternion GetHeading(::UnityEngine::Quaternion targetRot, ::UnityEngine::Vector3 up);
    // private System.Void GetRawRigPositions(UnityEngine.Vector3 root, UnityEngine.Quaternion targetRot, UnityEngine.Quaternion heading, out UnityEngine.Vector3 shoulder, out UnityEngine.Vector3 hand)
    // Offset: 0x2A9C2C8
    void GetRawRigPositions(::UnityEngine::Vector3 root, ::UnityEngine::Quaternion targetRot, ::UnityEngine::Quaternion heading, ByRef<::UnityEngine::Vector3> shoulder, ByRef<::UnityEngine::Vector3> hand);
    // private UnityEngine.Vector3 ResolveCollisions(UnityEngine.Vector3 root, UnityEngine.Vector3 tip, System.Single deltaTime, System.Single cameraRadius, ref System.Single collisionCorrection)
    // Offset: 0x2A9C3B8
    ::UnityEngine::Vector3 ResolveCollisions(::UnityEngine::Vector3 root, ::UnityEngine::Vector3 tip, float deltaTime, float cameraRadius, ByRef<float> collisionCorrection);
    // public override System.Boolean get_IsValid()
    // Offset: 0x2A9BBF0
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::get_IsValid()
    bool get_IsValid();
    // public override Cinemachine.CinemachineCore/Stage get_Stage()
    // Offset: 0x2A9BC80
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: Cinemachine.CinemachineCore/Stage CinemachineComponentBase::get_Stage()
    ::Cinemachine::CinemachineCore::Stage get_Stage();
    // public override System.Single GetMaxDampTime()
    // Offset: 0x2A9BC88
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Single CinemachineComponentBase::GetMaxDampTime()
    float GetMaxDampTime();
    // public override System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x2A9BCB8
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x2A9C058
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public System.Void .ctor()
    // Offset: 0x2A9C794
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Cinemachine3rdPersonFollow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonFollow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Cinemachine3rdPersonFollow*, creationType>()));
    }
  }; // Cinemachine.Cinemachine3rdPersonFollow
  #pragma pack(pop)
  static check_size<sizeof(Cinemachine3rdPersonFollow), 124 + sizeof(float)> __Cinemachine_Cinemachine3rdPersonFollowSizeCheck;
  static_assert(sizeof(Cinemachine3rdPersonFollow) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonFollow::*)()>(&Cinemachine::Cinemachine3rdPersonFollow::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonFollow::*)()>(&Cinemachine::Cinemachine3rdPersonFollow::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonFollow::*)()>(&Cinemachine::Cinemachine3rdPersonFollow::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::PositionCamera
// Il2CppName: PositionCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonFollow::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::Cinemachine3rdPersonFollow::PositionCamera)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "PositionCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::GetRigPositions
// Il2CppName: GetRigPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonFollow::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Cinemachine::Cinemachine3rdPersonFollow::GetRigPositions)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* shoulder = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "GetRigPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, shoulder, hand});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::GetHeading
// Il2CppName: GetHeading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&Cinemachine::Cinemachine3rdPersonFollow::GetHeading)> {
  static const MethodInfo* get() {
    static auto* targetRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "GetHeading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRot, up});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::GetRawRigPositions
// Il2CppName: GetRawRigPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonFollow::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Cinemachine::Cinemachine3rdPersonFollow::GetRawRigPositions)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* targetRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* heading = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* shoulder = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "GetRawRigPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, targetRot, heading, shoulder, hand});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::ResolveCollisions
// Il2CppName: ResolveCollisions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::Cinemachine3rdPersonFollow::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, ByRef<float>)>(&Cinemachine::Cinemachine3rdPersonFollow::ResolveCollisions)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tip = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cameraRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* collisionCorrection = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "ResolveCollisions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, tip, deltaTime, cameraRadius, collisionCorrection});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::Cinemachine3rdPersonFollow::*)()>(&Cinemachine::Cinemachine3rdPersonFollow::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore::Stage (Cinemachine::Cinemachine3rdPersonFollow::*)()>(&Cinemachine::Cinemachine3rdPersonFollow::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::Cinemachine3rdPersonFollow::*)()>(&Cinemachine::Cinemachine3rdPersonFollow::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonFollow::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::Cinemachine3rdPersonFollow::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonFollow::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::Cinemachine3rdPersonFollow::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonFollow*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonFollow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
