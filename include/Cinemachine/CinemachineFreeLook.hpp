// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.LensSettings
#include "Cinemachine/LensSettings.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/TransitionParams
#include "Cinemachine/CinemachineVirtualCameraBase_TransitionParams.hpp"
// Including type: Cinemachine.CinemachineOrbitalTransposer/Heading
#include "Cinemachine/CinemachineOrbitalTransposer.hpp"
// Including type: Cinemachine.CinemachineTransposer/BindingMode
#include "Cinemachine/CinemachineTransposer.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineVirtualCamera
  class CinemachineVirtualCamera;
  // Skipping declaration: CinemachineOrbitalTransposer because it is already included!
  // Forward declaring type: CinemachineBlend
  class CinemachineBlend;
  // Skipping declaration: ICinemachineCamera because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineFreeLook
  class CinemachineFreeLook;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineFreeLook);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineFreeLook*, "Cinemachine", "CinemachineFreeLook");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x388
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineFreeLook
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: FFFFFFFF
  class CinemachineFreeLook : public ::Cinemachine::CinemachineVirtualCameraBase {
    public:
    // Writing base type padding for base size: 0xA2 to desired offset: 0xA8
    char ___base_padding[0x6] = {};
    // Nested type: ::Cinemachine::CinemachineFreeLook::Orbit
    struct Orbit;
    // Nested type: ::Cinemachine::CinemachineFreeLook::CreateRigDelegate
    class CreateRigDelegate;
    // Nested type: ::Cinemachine::CinemachineFreeLook::DestroyRigDelegate
    class DestroyRigDelegate;
    // Nested type: ::Cinemachine::CinemachineFreeLook::$$c__DisplayClass47_0
    struct $$c__DisplayClass47_0;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineFreeLook/Orbit
    // [TokenAttribute] Offset: FFFFFFFF
    struct Orbit/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single m_Height
      // Size: 0x4
      // Offset: 0x0
      float m_Height;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single m_Radius
      // Size: 0x4
      // Offset: 0x4
      float m_Radius;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Orbit
      constexpr Orbit(float m_Height_ = {}, float m_Radius_ = {}) noexcept : m_Height{m_Height_}, m_Radius{m_Radius_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single m_Height
      [[deprecated("Use field access instead!")]] float& dyn_m_Height();
      // Get instance field reference: public System.Single m_Radius
      [[deprecated("Use field access instead!")]] float& dyn_m_Radius();
      // public System.Void .ctor(System.Single h, System.Single r)
      // Offset: 0x2A90F38
      // ABORTED: conflicts with another method.  Orbit(float h, float r);
    }; // Cinemachine.CinemachineFreeLook/Orbit
    #pragma pack(pop)
    static check_size<sizeof(CinemachineFreeLook::Orbit), 4 + sizeof(float)> __Cinemachine_CinemachineFreeLook_OrbitSizeCheck;
    static_assert(sizeof(CinemachineFreeLook::Orbit) == 0x8);
    public:
    // public UnityEngine.Transform m_LookAt
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Transform* m_LookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform m_Follow
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Transform* m_Follow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean m_CommonLens
    // Size: 0x1
    // Offset: 0xB8
    bool m_CommonLens;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CommonLens and: m_Lens
    char __padding2[0x3] = {};
    // public Cinemachine.LensSettings m_Lens
    // Size: 0x32
    // Offset: 0xBC
    ::Cinemachine::LensSettings m_Lens;
    // Field size check
    static_assert(sizeof(::Cinemachine::LensSettings) == 0x32);
    // Padding between fields: m_Lens and: m_Transitions
    char __padding3[0x2] = {};
    // public Cinemachine.CinemachineVirtualCameraBase/TransitionParams m_Transitions
    // Size: 0x10
    // Offset: 0xF0
    ::Cinemachine::CinemachineVirtualCameraBase::TransitionParams m_Transitions;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase::TransitionParams) == 0x10);
    // private Cinemachine.CinemachineVirtualCameraBase/BlendHint m_LegacyBlendHint
    // Size: 0x4
    // Offset: 0x100
    ::Cinemachine::CinemachineVirtualCameraBase::BlendHint m_LegacyBlendHint;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase::BlendHint) == 0x4);
    // Padding between fields: m_LegacyBlendHint and: m_YAxis
    char __padding5[0x4] = {};
    // public Cinemachine.AxisState m_YAxis
    // Size: 0x6E
    // Offset: 0x108
    ::Cinemachine::AxisState m_YAxis;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState) == 0x6E);
    // Padding between fields: m_YAxis and: m_YAxisRecentering
    char __padding6[0x2] = {};
    // public Cinemachine.AxisState/Recentering m_YAxisRecentering
    // Size: 0x20
    // Offset: 0x178
    ::Cinemachine::AxisState::Recentering m_YAxisRecentering;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState::Recentering) == 0x20);
    // public Cinemachine.AxisState m_XAxis
    // Size: 0x6E
    // Offset: 0x198
    ::Cinemachine::AxisState m_XAxis;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState) == 0x6E);
    // Padding between fields: m_XAxis and: m_Heading
    char __padding8[0x2] = {};
    // public Cinemachine.CinemachineOrbitalTransposer/Heading m_Heading
    // Size: 0xC
    // Offset: 0x208
    ::Cinemachine::CinemachineOrbitalTransposer::Heading m_Heading;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineOrbitalTransposer::Heading) == 0xC);
    // public Cinemachine.AxisState/Recentering m_RecenterToTargetHeading
    // Size: 0x20
    // Offset: 0x214
    ::Cinemachine::AxisState::Recentering m_RecenterToTargetHeading;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState::Recentering) == 0x20);
    // public Cinemachine.CinemachineTransposer/BindingMode m_BindingMode
    // Size: 0x4
    // Offset: 0x234
    ::Cinemachine::CinemachineTransposer::BindingMode m_BindingMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineTransposer::BindingMode) == 0x4);
    // public System.Single m_SplineCurvature
    // Size: 0x4
    // Offset: 0x238
    float m_SplineCurvature;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_SplineCurvature and: m_Orbits
    char __padding12[0x4] = {};
    // public Cinemachine.CinemachineFreeLook/Orbit[] m_Orbits
    // Size: 0x8
    // Offset: 0x240
    ::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit> m_Orbits;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit>) == 0x8);
    // private System.Single m_LegacyHeadingBias
    // Size: 0x4
    // Offset: 0x248
    float m_LegacyHeadingBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean mUseLegacyRigDefinitions
    // Size: 0x1
    // Offset: 0x24C
    bool mUseLegacyRigDefinitions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean mIsDestroyed
    // Size: 0x1
    // Offset: 0x24D
    bool mIsDestroyed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: mIsDestroyed and: m_State
    char __padding16[0x2] = {};
    // private Cinemachine.CameraState m_State
    // Size: 0xE4
    // Offset: 0x250
    ::Cinemachine::CameraState m_State;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState) == 0xE4);
    // Padding between fields: m_State and: m_Rigs
    char __padding17[0x4] = {};
    // private Cinemachine.CinemachineVirtualCamera[] m_Rigs
    // Size: 0x8
    // Offset: 0x338
    ::ArrayW<::Cinemachine::CinemachineVirtualCamera*> m_Rigs;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineVirtualCamera*>) == 0x8);
    // private Cinemachine.CinemachineOrbitalTransposer[] mOrbitals
    // Size: 0x8
    // Offset: 0x340
    ::ArrayW<::Cinemachine::CinemachineOrbitalTransposer*> mOrbitals;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineOrbitalTransposer*>) == 0x8);
    // private Cinemachine.CinemachineBlend mBlendA
    // Size: 0x8
    // Offset: 0x348
    ::Cinemachine::CinemachineBlend* mBlendA;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlend*) == 0x8);
    // private Cinemachine.CinemachineBlend mBlendB
    // Size: 0x8
    // Offset: 0x350
    ::Cinemachine::CinemachineBlend* mBlendB;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlend*) == 0x8);
    // private System.Single m_CachedXAxisHeading
    // Size: 0x4
    // Offset: 0x358
    float m_CachedXAxisHeading;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_LastHeadingUpdateFrame
    // Size: 0x4
    // Offset: 0x35C
    float m_LastHeadingUpdateFrame;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Cinemachine.CinemachineFreeLook/Orbit[] m_CachedOrbits
    // Size: 0x8
    // Offset: 0x360
    ::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit> m_CachedOrbits;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit>) == 0x8);
    // private System.Single m_CachedTension
    // Size: 0x4
    // Offset: 0x368
    float m_CachedTension;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_CachedTension and: m_CachedKnots
    char __padding25[0x4] = {};
    // private UnityEngine.Vector4[] m_CachedKnots
    // Size: 0x8
    // Offset: 0x370
    ::ArrayW<::UnityEngine::Vector4> m_CachedKnots;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_CachedCtrl1
    // Size: 0x8
    // Offset: 0x378
    ::ArrayW<::UnityEngine::Vector4> m_CachedCtrl1;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector4[] m_CachedCtrl2
    // Size: 0x8
    // Offset: 0x380
    ::ArrayW<::UnityEngine::Vector4> m_CachedCtrl2;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    public:
    // Get static field: static public Cinemachine.CinemachineFreeLook/CreateRigDelegate CreateRigOverride
    static ::Cinemachine::CinemachineFreeLook::CreateRigDelegate* _get_CreateRigOverride();
    // Set static field: static public Cinemachine.CinemachineFreeLook/CreateRigDelegate CreateRigOverride
    static void _set_CreateRigOverride(::Cinemachine::CinemachineFreeLook::CreateRigDelegate* value);
    // Get static field: static public Cinemachine.CinemachineFreeLook/DestroyRigDelegate DestroyRigOverride
    static ::Cinemachine::CinemachineFreeLook::DestroyRigDelegate* _get_DestroyRigOverride();
    // Set static field: static public Cinemachine.CinemachineFreeLook/DestroyRigDelegate DestroyRigOverride
    static void _set_DestroyRigOverride(::Cinemachine::CinemachineFreeLook::DestroyRigDelegate* value);
    // Get instance field reference: public UnityEngine.Transform m_LookAt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_LookAt();
    // Get instance field reference: public UnityEngine.Transform m_Follow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Follow();
    // Get instance field reference: public System.Boolean m_CommonLens
    [[deprecated("Use field access instead!")]] bool& dyn_m_CommonLens();
    // Get instance field reference: public Cinemachine.LensSettings m_Lens
    [[deprecated("Use field access instead!")]] ::Cinemachine::LensSettings& dyn_m_Lens();
    // Get instance field reference: public Cinemachine.CinemachineVirtualCameraBase/TransitionParams m_Transitions
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::TransitionParams& dyn_m_Transitions();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase/BlendHint m_LegacyBlendHint
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::BlendHint& dyn_m_LegacyBlendHint();
    // Get instance field reference: public Cinemachine.AxisState m_YAxis
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& dyn_m_YAxis();
    // Get instance field reference: public Cinemachine.AxisState/Recentering m_YAxisRecentering
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& dyn_m_YAxisRecentering();
    // Get instance field reference: public Cinemachine.AxisState m_XAxis
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& dyn_m_XAxis();
    // Get instance field reference: public Cinemachine.CinemachineOrbitalTransposer/Heading m_Heading
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineOrbitalTransposer::Heading& dyn_m_Heading();
    // Get instance field reference: public Cinemachine.AxisState/Recentering m_RecenterToTargetHeading
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& dyn_m_RecenterToTargetHeading();
    // Get instance field reference: public Cinemachine.CinemachineTransposer/BindingMode m_BindingMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTransposer::BindingMode& dyn_m_BindingMode();
    // Get instance field reference: public System.Single m_SplineCurvature
    [[deprecated("Use field access instead!")]] float& dyn_m_SplineCurvature();
    // Get instance field reference: public Cinemachine.CinemachineFreeLook/Orbit[] m_Orbits
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit>& dyn_m_Orbits();
    // Get instance field reference: private System.Single m_LegacyHeadingBias
    [[deprecated("Use field access instead!")]] float& dyn_m_LegacyHeadingBias();
    // Get instance field reference: private System.Boolean mUseLegacyRigDefinitions
    [[deprecated("Use field access instead!")]] bool& dyn_mUseLegacyRigDefinitions();
    // Get instance field reference: private System.Boolean mIsDestroyed
    [[deprecated("Use field access instead!")]] bool& dyn_mIsDestroyed();
    // Get instance field reference: private Cinemachine.CameraState m_State
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& dyn_m_State();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCamera[] m_Rigs
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCamera*>& dyn_m_Rigs();
    // Get instance field reference: private Cinemachine.CinemachineOrbitalTransposer[] mOrbitals
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineOrbitalTransposer*>& dyn_mOrbitals();
    // Get instance field reference: private Cinemachine.CinemachineBlend mBlendA
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& dyn_mBlendA();
    // Get instance field reference: private Cinemachine.CinemachineBlend mBlendB
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& dyn_mBlendB();
    // Get instance field reference: private System.Single m_CachedXAxisHeading
    [[deprecated("Use field access instead!")]] float& dyn_m_CachedXAxisHeading();
    // Get instance field reference: private System.Single m_LastHeadingUpdateFrame
    [[deprecated("Use field access instead!")]] float& dyn_m_LastHeadingUpdateFrame();
    // Get instance field reference: private Cinemachine.CinemachineFreeLook/Orbit[] m_CachedOrbits
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineFreeLook::Orbit>& dyn_m_CachedOrbits();
    // Get instance field reference: private System.Single m_CachedTension
    [[deprecated("Use field access instead!")]] float& dyn_m_CachedTension();
    // Get instance field reference: private UnityEngine.Vector4[] m_CachedKnots
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_CachedKnots();
    // Get instance field reference: private UnityEngine.Vector4[] m_CachedCtrl1
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_CachedCtrl1();
    // Get instance field reference: private UnityEngine.Vector4[] m_CachedCtrl2
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_m_CachedCtrl2();
    // public Cinemachine.CinemachineVirtualCamera GetRig(System.Int32 i)
    // Offset: 0x2A8CF60
    ::Cinemachine::CinemachineVirtualCamera* GetRig(int i);
    // System.Boolean get_RigsAreCreated()
    // Offset: 0x2A8D2A8
    bool get_RigsAreCreated();
    // static public System.String[] get_RigNames()
    // Offset: 0x2A8D2C8
    static ::ArrayW<::StringW> get_RigNames();
    // public System.Void UpdateInputAxisProvider()
    // Offset: 0x2A8D3E8
    void UpdateInputAxisProvider();
    // private System.Void OnTransformChildrenChanged()
    // Offset: 0x2A8D5A4
    void OnTransformChildrenChanged();
    // private System.Void Reset()
    // Offset: 0x2A8D5B8
    void Reset();
    // private System.Single GetYAxisClosestValue(UnityEngine.Vector3 cameraPos, UnityEngine.Vector3 up)
    // Offset: 0x2A8E1F4
    float GetYAxisClosestValue(::UnityEngine::Vector3 cameraPos, ::UnityEngine::Vector3 up);
    // private System.Single SteepestDescent(UnityEngine.Vector3 cameraOffset)
    // Offset: 0x2A8F22C
    float SteepestDescent(::UnityEngine::Vector3 cameraOffset);
    // private System.Void InvalidateRigCache()
    // Offset: 0x2A8CF4C
    void InvalidateRigCache();
    // private System.Void DestroyRigs()
    // Offset: 0x2A8D5D0
    void DestroyRigs();
    // private Cinemachine.CinemachineVirtualCamera[] CreateRigs(Cinemachine.CinemachineVirtualCamera[] copyFrom)
    // Offset: 0x2A8F634
    ::ArrayW<::Cinemachine::CinemachineVirtualCamera*> CreateRigs(::ArrayW<::Cinemachine::CinemachineVirtualCamera*> copyFrom);
    // private System.Boolean UpdateRigCache()
    // Offset: 0x2A8CFB8
    bool UpdateRigCache();
    // private System.Collections.Generic.List`1<Cinemachine.CinemachineVirtualCamera> LocateExistingRigs(System.Boolean forceOrbital)
    // Offset: 0x2A8FF24
    ::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCamera*>* LocateExistingRigs(bool forceOrbital);
    // private System.Single UpdateXAxisHeading(Cinemachine.CinemachineOrbitalTransposer orbital, System.Single deltaTime, UnityEngine.Vector3 up)
    // Offset: 0x2A90584
    float UpdateXAxisHeading(::Cinemachine::CinemachineOrbitalTransposer* orbital, float deltaTime, ::UnityEngine::Vector3 up);
    // private System.Void PushSettingsToRigs()
    // Offset: 0x2A8E5B4
    void PushSettingsToRigs();
    // private System.Single GetYAxisValue()
    // Offset: 0x2A8DF00
    float GetYAxisValue();
    // private Cinemachine.CameraState CalculateNewState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x2A8ED64
    ::Cinemachine::CameraState CalculateNewState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // public UnityEngine.Vector3 GetLocalPositionForCameraFromInput(System.Single t)
    // Offset: 0x2A90700
    ::UnityEngine::Vector3 GetLocalPositionForCameraFromInput(float t);
    // private System.Void UpdateCachedSpline()
    // Offset: 0x2A90828
    void UpdateCachedSpline();
    // private System.Single <SteepestDescent>g__AngleFunction|47_0(System.Single input, ref Cinemachine.CinemachineFreeLook/<>c__DisplayClass47_0 )
    // Offset: 0x2A8F51C
    float $SteepestDescent$g__AngleFunction_47_0(float input, ByRef<::Cinemachine::CinemachineFreeLook::$$c__DisplayClass47_0> param_1);
    // private System.Single <SteepestDescent>g__SlopeOfAngleFunction|47_1(System.Single input, ref Cinemachine.CinemachineFreeLook/<>c__DisplayClass47_0 )
    // Offset: 0x2A8F5D0
    float $SteepestDescent$g__SlopeOfAngleFunction_47_1(float input, ByRef<::Cinemachine::CinemachineFreeLook::$$c__DisplayClass47_0> param_1);
    // private System.Single <SteepestDescent>g__InitialGuess|47_2(UnityEngine.Vector3 cameraPosInRigSpace, ref Cinemachine.CinemachineFreeLook/<>c__DisplayClass47_0 )
    // Offset: 0x2A8F348
    float $SteepestDescent$g__InitialGuess_47_2(::UnityEngine::Vector3 cameraPosInRigSpace, ByRef<::Cinemachine::CinemachineFreeLook::$$c__DisplayClass47_0> param_1);
    // protected override System.Void OnValidate()
    // Offset: 0x2A8CE80
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnValidate()
    void OnValidate();
    // protected override System.Void OnEnable()
    // Offset: 0x2A8D3B8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnEnable()
    void OnEnable();
    // protected override System.Void OnDestroy()
    // Offset: 0x2A8D474
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnDestroy()
    void OnDestroy();
    // public override System.Boolean get_PreviousStateIsValid()
    // Offset: 0x2A8DCD8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Boolean CinemachineVirtualCameraBase::get_PreviousStateIsValid()
    bool get_PreviousStateIsValid();
    // public override System.Void set_PreviousStateIsValid(System.Boolean value)
    // Offset: 0x2A8DCE0
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_PreviousStateIsValid(System.Boolean value)
    void set_PreviousStateIsValid(bool value);
    // public override Cinemachine.CameraState get_State()
    // Offset: 0x2A8DDD0
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: Cinemachine.CameraState CinemachineVirtualCameraBase::get_State()
    ::Cinemachine::CameraState get_State();
    // public override UnityEngine.Transform get_LookAt()
    // Offset: 0x2A8DDE0
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_LookAt()
    ::UnityEngine::Transform* get_LookAt();
    // public override System.Void set_LookAt(UnityEngine.Transform value)
    // Offset: 0x2A8DDEC
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_LookAt(UnityEngine.Transform value)
    void set_LookAt(::UnityEngine::Transform* value);
    // public override UnityEngine.Transform get_Follow()
    // Offset: 0x2A8DDF4
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_Follow()
    ::UnityEngine::Transform* get_Follow();
    // public override System.Void set_Follow(UnityEngine.Transform value)
    // Offset: 0x2A8DE00
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_Follow(UnityEngine.Transform value)
    void set_Follow(::UnityEngine::Transform* value);
    // public override System.Boolean IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    // Offset: 0x2A8DE08
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Boolean CinemachineVirtualCameraBase::IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    bool IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly);
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x2A8DF2C
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x2A8DFEC
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public override System.Void InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x2A8E9E8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // public override System.Void OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x2A8EEB4
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // override System.Boolean RequiresUserInput()
    // Offset: 0x2A8F224
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Boolean CinemachineVirtualCameraBase::RequiresUserInput()
    bool RequiresUserInput();
    // override System.Void OnBeforeSerialize()
    // Offset: 0x2A90B88
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnBeforeSerialize()
    void OnBeforeSerialize();
    // public System.Void .ctor()
    // Offset: 0x2A90BE8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineFreeLook* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFreeLook::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineFreeLook*, creationType>()));
    }
  }; // Cinemachine.CinemachineFreeLook
  #pragma pack(pop)
  static check_size<sizeof(CinemachineFreeLook), 896 + sizeof(::ArrayW<::UnityEngine::Vector4>)> __Cinemachine_CinemachineFreeLookSizeCheck;
  static_assert(sizeof(CinemachineFreeLook) == 0x388);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineFreeLook::Orbit, "Cinemachine", "CinemachineFreeLook/Orbit");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::GetRig
// Il2CppName: GetRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineVirtualCamera* (Cinemachine::CinemachineFreeLook::*)(int)>(&Cinemachine::CinemachineFreeLook::GetRig)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "GetRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::get_RigsAreCreated
// Il2CppName: get_RigsAreCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::get_RigsAreCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "get_RigsAreCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::get_RigNames
// Il2CppName: get_RigNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)()>(&Cinemachine::CinemachineFreeLook::get_RigNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "get_RigNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::UpdateInputAxisProvider
// Il2CppName: UpdateInputAxisProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::UpdateInputAxisProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "UpdateInputAxisProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::OnTransformChildrenChanged
// Il2CppName: OnTransformChildrenChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::OnTransformChildrenChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "OnTransformChildrenChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::GetYAxisClosestValue
// Il2CppName: GetYAxisClosestValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineFreeLook::GetYAxisClosestValue)> {
  static const MethodInfo* get() {
    static auto* cameraPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "GetYAxisClosestValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraPos, up});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::SteepestDescent
// Il2CppName: SteepestDescent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineFreeLook::SteepestDescent)> {
  static const MethodInfo* get() {
    static auto* cameraOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "SteepestDescent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraOffset});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::InvalidateRigCache
// Il2CppName: InvalidateRigCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::InvalidateRigCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "InvalidateRigCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::DestroyRigs
// Il2CppName: DestroyRigs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::DestroyRigs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "DestroyRigs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::CreateRigs
// Il2CppName: CreateRigs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Cinemachine::CinemachineVirtualCamera*> (Cinemachine::CinemachineFreeLook::*)(::ArrayW<::Cinemachine::CinemachineVirtualCamera*>)>(&Cinemachine::CinemachineFreeLook::CreateRigs)> {
  static const MethodInfo* get() {
    static auto* copyFrom = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCamera"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "CreateRigs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{copyFrom});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::UpdateRigCache
// Il2CppName: UpdateRigCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::UpdateRigCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "UpdateRigCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::LocateExistingRigs
// Il2CppName: LocateExistingRigs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCamera*>* (Cinemachine::CinemachineFreeLook::*)(bool)>(&Cinemachine::CinemachineFreeLook::LocateExistingRigs)> {
  static const MethodInfo* get() {
    static auto* forceOrbital = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "LocateExistingRigs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forceOrbital});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::UpdateXAxisHeading
// Il2CppName: UpdateXAxisHeading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFreeLook::*)(::Cinemachine::CinemachineOrbitalTransposer*, float, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineFreeLook::UpdateXAxisHeading)> {
  static const MethodInfo* get() {
    static auto* orbital = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineOrbitalTransposer")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "UpdateXAxisHeading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orbital, deltaTime, up});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::PushSettingsToRigs
// Il2CppName: PushSettingsToRigs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::PushSettingsToRigs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "PushSettingsToRigs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::GetYAxisValue
// Il2CppName: GetYAxisValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::GetYAxisValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "GetYAxisValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::CalculateNewState
// Il2CppName: CalculateNewState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineFreeLook::CalculateNewState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "CalculateNewState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::GetLocalPositionForCameraFromInput
// Il2CppName: GetLocalPositionForCameraFromInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineFreeLook::*)(float)>(&Cinemachine::CinemachineFreeLook::GetLocalPositionForCameraFromInput)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "GetLocalPositionForCameraFromInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::UpdateCachedSpline
// Il2CppName: UpdateCachedSpline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::UpdateCachedSpline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "UpdateCachedSpline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::$SteepestDescent$g__AngleFunction_47_0
// Il2CppName: <SteepestDescent>g__AngleFunction|47_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFreeLook::*)(float, ByRef<::Cinemachine::CinemachineFreeLook::$$c__DisplayClass47_0>)>(&Cinemachine::CinemachineFreeLook::$SteepestDescent$g__AngleFunction_47_0)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineFreeLook/<>c__DisplayClass47_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "<SteepestDescent>g__AngleFunction|47_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, param_1});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::$SteepestDescent$g__SlopeOfAngleFunction_47_1
// Il2CppName: <SteepestDescent>g__SlopeOfAngleFunction|47_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFreeLook::*)(float, ByRef<::Cinemachine::CinemachineFreeLook::$$c__DisplayClass47_0>)>(&Cinemachine::CinemachineFreeLook::$SteepestDescent$g__SlopeOfAngleFunction_47_1)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineFreeLook/<>c__DisplayClass47_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "<SteepestDescent>g__SlopeOfAngleFunction|47_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, param_1});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::$SteepestDescent$g__InitialGuess_47_2
// Il2CppName: <SteepestDescent>g__InitialGuess|47_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Vector3, ByRef<::Cinemachine::CinemachineFreeLook::$$c__DisplayClass47_0>)>(&Cinemachine::CinemachineFreeLook::$SteepestDescent$g__InitialGuess_47_2)> {
  static const MethodInfo* get() {
    static auto* cameraPosInRigSpace = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineFreeLook/<>c__DisplayClass47_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "<SteepestDescent>g__InitialGuess|47_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraPosInRigSpace, param_1});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::get_PreviousStateIsValid
// Il2CppName: get_PreviousStateIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::get_PreviousStateIsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "get_PreviousStateIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::set_PreviousStateIsValid
// Il2CppName: set_PreviousStateIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)(bool)>(&Cinemachine::CinemachineFreeLook::set_PreviousStateIsValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "set_PreviousStateIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::get_LookAt
// Il2CppName: get_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::get_LookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "get_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::set_LookAt
// Il2CppName: set_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineFreeLook::set_LookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "set_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::get_Follow
// Il2CppName: get_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::get_Follow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "get_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::set_Follow
// Il2CppName: set_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineFreeLook::set_Follow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "set_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::IsLiveChild
// Il2CppName: IsLiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFreeLook::*)(::Cinemachine::ICinemachineCamera*, bool)>(&Cinemachine::CinemachineFreeLook::IsLiveChild)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* dominantChildOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "IsLiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, dominantChildOnly});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineFreeLook::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineFreeLook::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::InternalUpdateCameraState
// Il2CppName: InternalUpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineFreeLook::InternalUpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "InternalUpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineFreeLook::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::RequiresUserInput
// Il2CppName: RequiresUserInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::RequiresUserInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "RequiresUserInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFreeLook::*)()>(&Cinemachine::CinemachineFreeLook::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFreeLook*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFreeLook::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
