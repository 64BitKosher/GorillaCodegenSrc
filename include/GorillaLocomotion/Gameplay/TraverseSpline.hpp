// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: SplineWalkerMode
#include "GlobalNamespace/SplineWalkerMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: TraverseSpline
  class TraverseSpline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaLocomotion::Gameplay::TraverseSpline);
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Gameplay::TraverseSpline*, "GorillaLocomotion.Gameplay", "TraverseSpline");
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLocomotion.Gameplay.TraverseSpline
  // [TokenAttribute] Offset: FFFFFFFF
  class TraverseSpline : public ::Photon::Pun::MonoBehaviourPun/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // public BezierSpline spline
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BezierSpline* spline;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BezierSpline*) == 0x8);
    // public System.Single duration
    // Size: 0x4
    // Offset: 0x30
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single speedMultiplierWhileHeld
    // Size: 0x4
    // Offset: 0x34
    float speedMultiplierWhileHeld;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentSpeedMultiplier
    // Size: 0x4
    // Offset: 0x38
    float currentSpeedMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single acceleration
    // Size: 0x4
    // Offset: 0x3C
    float acceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single deceleration
    // Size: 0x4
    // Offset: 0x40
    float deceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isHeldByLocalPlayer
    // Size: 0x1
    // Offset: 0x44
    bool isHeldByLocalPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean lookForward
    // Size: 0x1
    // Offset: 0x45
    bool lookForward;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lookForward and: mode
    char __padding7[0x2] = {};
    // public SplineWalkerMode mode
    // Size: 0x4
    // Offset: 0x48
    ::GlobalNamespace::SplineWalkerMode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SplineWalkerMode) == 0x4);
    // private System.Single SplineProgressOffet
    // Size: 0x4
    // Offset: 0x4C
    float SplineProgressOffet;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single progress
    // Size: 0x4
    // Offset: 0x50
    float progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single progressLerpStart
    // Size: 0x4
    // Offset: 0x54
    float progressLerpStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single progressLerpEnd
    // Size: 0x4
    // Offset: 0x58
    float progressLerpEnd;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single progressLerpStartTime
    // Size: 0x4
    // Offset: 0x5C
    float progressLerpStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean goingForward
    // Size: 0x1
    // Offset: 0x60
    bool goingForward;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: goingForward and: view
    char __padding14[0x7] = {};
    // private Photon.Pun.PhotonView _view
    // Size: 0x8
    // Offset: 0x68
    ::Photon::Pun::PhotonView* view;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // private System.Boolean constantVelocity
    // Size: 0x1
    // Offset: 0x70
    bool constantVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // static field const value: static private System.Single progressLerpDuration
    static constexpr const float progressLerpDuration = 1;
    // Get static field: static private System.Single progressLerpDuration
    static float _get_progressLerpDuration();
    // Set static field: static private System.Single progressLerpDuration
    static void _set_progressLerpDuration(float value);
    // Get instance field reference: public BezierSpline spline
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BezierSpline*& dyn_spline();
    // Get instance field reference: public System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration();
    // Get instance field reference: public System.Single speedMultiplierWhileHeld
    [[deprecated("Use field access instead!")]] float& dyn_speedMultiplierWhileHeld();
    // Get instance field reference: private System.Single currentSpeedMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_currentSpeedMultiplier();
    // Get instance field reference: public System.Single acceleration
    [[deprecated("Use field access instead!")]] float& dyn_acceleration();
    // Get instance field reference: public System.Single deceleration
    [[deprecated("Use field access instead!")]] float& dyn_deceleration();
    // Get instance field reference: private System.Boolean isHeldByLocalPlayer
    [[deprecated("Use field access instead!")]] bool& dyn_isHeldByLocalPlayer();
    // Get instance field reference: public System.Boolean lookForward
    [[deprecated("Use field access instead!")]] bool& dyn_lookForward();
    // Get instance field reference: public SplineWalkerMode mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SplineWalkerMode& dyn_mode();
    // Get instance field reference: private System.Single SplineProgressOffet
    [[deprecated("Use field access instead!")]] float& dyn_SplineProgressOffet();
    // Get instance field reference: private System.Single progress
    [[deprecated("Use field access instead!")]] float& dyn_progress();
    // Get instance field reference: private System.Single progressLerpStart
    [[deprecated("Use field access instead!")]] float& dyn_progressLerpStart();
    // Get instance field reference: private System.Single progressLerpEnd
    [[deprecated("Use field access instead!")]] float& dyn_progressLerpEnd();
    // Get instance field reference: private System.Single progressLerpStartTime
    [[deprecated("Use field access instead!")]] float& dyn_progressLerpStartTime();
    // Get instance field reference: private System.Boolean goingForward
    [[deprecated("Use field access instead!")]] bool& dyn_goingForward();
    // Get instance field reference: private Photon.Pun.PhotonView _view
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn__view();
    // Get instance field reference: private System.Boolean constantVelocity
    [[deprecated("Use field access instead!")]] bool& dyn_constantVelocity();
    // protected System.Void Awake()
    // Offset: 0x27ECE34
    void Awake();
    // protected System.Void FixedUpdate()
    // Offset: 0x27ECEA0
    void FixedUpdate();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x27ED0E4
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // protected System.Single GetProgress()
    // Offset: 0x27ED20C
    float GetProgress();
    // public System.Single GetCurrentSpeed()
    // Offset: 0x27ED214
    float GetCurrentSpeed();
    // public System.Void .ctor()
    // Offset: 0x27ED21C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TraverseSpline* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaLocomotion::Gameplay::TraverseSpline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TraverseSpline*, creationType>()));
    }
  }; // GorillaLocomotion.Gameplay.TraverseSpline
  #pragma pack(pop)
  static check_size<sizeof(TraverseSpline), 112 + sizeof(bool)> __GorillaLocomotion_Gameplay_TraverseSplineSizeCheck;
  static_assert(sizeof(TraverseSpline) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::TraverseSpline::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::TraverseSpline::*)()>(&GorillaLocomotion::Gameplay::TraverseSpline::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::TraverseSpline*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::TraverseSpline::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::TraverseSpline::*)()>(&GorillaLocomotion::Gameplay::TraverseSpline::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::TraverseSpline*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::TraverseSpline::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::TraverseSpline::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaLocomotion::Gameplay::TraverseSpline::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::TraverseSpline*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::TraverseSpline::GetProgress
// Il2CppName: GetProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Gameplay::TraverseSpline::*)()>(&GorillaLocomotion::Gameplay::TraverseSpline::GetProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::TraverseSpline*), "GetProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::TraverseSpline::GetCurrentSpeed
// Il2CppName: GetCurrentSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Gameplay::TraverseSpline::*)()>(&GorillaLocomotion::Gameplay::TraverseSpline::GetCurrentSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::TraverseSpline*), "GetCurrentSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::TraverseSpline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
