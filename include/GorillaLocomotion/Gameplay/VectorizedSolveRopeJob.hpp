// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJob
#include "Unity/Jobs/IJob.hpp"
// Including type: GorillaLocomotion.Gameplay.VectorizedBurstRopeData
#include "GorillaLocomotion/Gameplay/VectorizedBurstRopeData.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Mathematics
namespace Unity::Mathematics {
  // Skipping declaration: float4 because it is already included!
}
// Completed forward declares
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: VectorizedSolveRopeJob
  struct VectorizedSolveRopeJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Gameplay::VectorizedSolveRopeJob, "GorillaLocomotion.Gameplay", "VectorizedSolveRopeJob");
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaLocomotion.Gameplay.VectorizedSolveRopeJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct VectorizedSolveRopeJob/*, public ::System::ValueType, public ::Unity::Jobs::IJob*/ {
    public:
    public:
    // public System.Int32 applyConstraintIterations
    // Size: 0x4
    // Offset: 0x0
    int applyConstraintIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 finalPassIterations
    // Size: 0x4
    // Offset: 0x4
    int finalPassIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single deltaTime
    // Size: 0x4
    // Offset: 0x8
    float deltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastDeltaTime
    // Size: 0x4
    // Offset: 0xC
    float lastDeltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 ropeCount
    // Size: 0x4
    // Offset: 0x10
    int ropeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public GorillaLocomotion.Gameplay.VectorizedBurstRopeData data
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::GorillaLocomotion::Gameplay::VectorizedBurstRopeData data;
    // public System.Single gravity
    // Size: 0x4
    // Offset: 0xA8
    float gravity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nodeDistance
    // Size: 0x4
    // Offset: 0xAC
    float nodeDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: VectorizedSolveRopeJob
    constexpr VectorizedSolveRopeJob(int applyConstraintIterations_ = {}, int finalPassIterations_ = {}, float deltaTime_ = {}, float lastDeltaTime_ = {}, int ropeCount_ = {}, ::GorillaLocomotion::Gameplay::VectorizedBurstRopeData data_ = {}, float gravity_ = {}, float nodeDistance_ = {}) noexcept : applyConstraintIterations{applyConstraintIterations_}, finalPassIterations{finalPassIterations_}, deltaTime{deltaTime_}, lastDeltaTime{lastDeltaTime_}, ropeCount{ropeCount_}, data{data_}, gravity{gravity_}, nodeDistance{nodeDistance_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJob
    operator ::Unity::Jobs::IJob() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJob*>(this);
    }
    // Get instance field reference: public System.Int32 applyConstraintIterations
    [[deprecated("Use field access instead!")]] int& dyn_applyConstraintIterations();
    // Get instance field reference: public System.Int32 finalPassIterations
    [[deprecated("Use field access instead!")]] int& dyn_finalPassIterations();
    // Get instance field reference: public System.Single deltaTime
    [[deprecated("Use field access instead!")]] float& dyn_deltaTime();
    // Get instance field reference: public System.Single lastDeltaTime
    [[deprecated("Use field access instead!")]] float& dyn_lastDeltaTime();
    // Get instance field reference: public System.Int32 ropeCount
    [[deprecated("Use field access instead!")]] int& dyn_ropeCount();
    // Get instance field reference: public GorillaLocomotion.Gameplay.VectorizedBurstRopeData data
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Gameplay::VectorizedBurstRopeData& dyn_data();
    // Get instance field reference: public System.Single gravity
    [[deprecated("Use field access instead!")]] float& dyn_gravity();
    // Get instance field reference: public System.Single nodeDistance
    [[deprecated("Use field access instead!")]] float& dyn_nodeDistance();
    // public System.Void Execute()
    // Offset: 0x27EE4D0
    void Execute();
    // private System.Void Simulate()
    // Offset: 0x27EE53C
    void Simulate();
    // static private System.Void dot4(ref Unity.Mathematics.float4 ax, ref Unity.Mathematics.float4 ay, ref Unity.Mathematics.float4 az, ref Unity.Mathematics.float4 bx, ref Unity.Mathematics.float4 by, ref Unity.Mathematics.float4 bz, ref Unity.Mathematics.float4 output)
    // Offset: 0x27EEC18
    static void dot4(ByRef<::Unity::Mathematics::float4> ax, ByRef<::Unity::Mathematics::float4> ay, ByRef<::Unity::Mathematics::float4> az, ByRef<::Unity::Mathematics::float4> bx, ByRef<::Unity::Mathematics::float4> by, ByRef<::Unity::Mathematics::float4> bz, ByRef<::Unity::Mathematics::float4> output);
    // static private System.Void length4(ref Unity.Mathematics.float4 xVals, ref Unity.Mathematics.float4 yVals, ref Unity.Mathematics.float4 zVals, ref Unity.Mathematics.float4 output)
    // Offset: 0x27EEC4C
    static void length4(ByRef<::Unity::Mathematics::float4> xVals, ByRef<::Unity::Mathematics::float4> yVals, ByRef<::Unity::Mathematics::float4> zVals, ByRef<::Unity::Mathematics::float4> output);
    // private System.Void ConstrainRoots()
    // Offset: 0x27EED28
    void ConstrainRoots();
    // private System.Void ApplyConstraint()
    // Offset: 0x27EE6E4
    void ApplyConstraint();
    // private System.Void FinalPass()
    // Offset: 0x27EE9CC
    void FinalPass();
  }; // GorillaLocomotion.Gameplay.VectorizedSolveRopeJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::*)()>(&GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::VectorizedSolveRopeJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::Simulate
// Il2CppName: Simulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::*)()>(&GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::Simulate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::VectorizedSolveRopeJob), "Simulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::dot4
// Il2CppName: dot4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>)>(&GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::dot4)> {
  static const MethodInfo* get() {
    static auto* ax = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* ay = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* az = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* bx = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* by = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* bz = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::VectorizedSolveRopeJob), "dot4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ax, ay, az, bx, by, bz, output});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::length4
// Il2CppName: length4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>, ByRef<::Unity::Mathematics::float4>)>(&GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::length4)> {
  static const MethodInfo* get() {
    static auto* xVals = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* yVals = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* zVals = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("Unity.Mathematics", "float4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::VectorizedSolveRopeJob), "length4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xVals, yVals, zVals, output});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::ConstrainRoots
// Il2CppName: ConstrainRoots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::*)()>(&GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::ConstrainRoots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::VectorizedSolveRopeJob), "ConstrainRoots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::ApplyConstraint
// Il2CppName: ApplyConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::*)()>(&GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::ApplyConstraint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::VectorizedSolveRopeJob), "ApplyConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::FinalPass
// Il2CppName: FinalPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::*)()>(&GorillaLocomotion::Gameplay::VectorizedSolveRopeJob::FinalPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::VectorizedSolveRopeJob), "FinalPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
