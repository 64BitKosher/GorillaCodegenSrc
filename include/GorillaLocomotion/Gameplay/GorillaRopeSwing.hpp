// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IBuilderPieceComponent
#include "GlobalNamespace/IBuilderPieceComponent.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GorillaLocomotion::Climbing
namespace GorillaLocomotion::Climbing {
  // Forward declaring type: GorillaVelocityTracker
  class GorillaVelocityTracker;
}
// Forward declaring namespace: GorillaLocomotion::Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: GorillaRopeSwingSettings
  class GorillaRopeSwingSettings;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: GorillaRopeSwing
  class GorillaRopeSwing;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaLocomotion::Gameplay::GorillaRopeSwing);
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Gameplay::GorillaRopeSwing*, "GorillaLocomotion.Gameplay", "GorillaRopeSwing");
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLocomotion.Gameplay.GorillaRopeSwing
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaRopeSwing : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IBuilderPieceComponent*/ {
    public:
    public:
    // public System.Int32 ropeId
    // Size: 0x4
    // Offset: 0x20
    int ropeId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ropeId and: staticId
    char __padding0[0x4] = {};
    // public System.String staticId
    // Size: 0x8
    // Offset: 0x28
    ::StringW staticId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean useStaticId
    // Size: 0x1
    // Offset: 0x30
    bool useStaticId;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useStaticId and: prefabRopeBit
    char __padding2[0x7] = {};
    // private UnityEngine.GameObject prefabRopeBit
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* prefabRopeBit;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean supportMovingAtRuntime
    // Size: 0x1
    // Offset: 0x40
    bool supportMovingAtRuntime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: supportMovingAtRuntime and: nodes
    char __padding4[0x7] = {};
    // public UnityEngine.Transform[] nodes
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Transform*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> remotePlayers
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<int, int>* remotePlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // public System.Single lastGrabTime
    // Size: 0x4
    // Offset: 0x58
    float lastGrabTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastGrabTime and: ropeCreakSFX
    char __padding7[0x4] = {};
    // private UnityEngine.AudioSource ropeCreakSFX
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioSource* ropeCreakSFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public GorillaLocomotion.Climbing.GorillaVelocityTracker velocityTracker
    // Size: 0x8
    // Offset: 0x68
    ::GorillaLocomotion::Climbing::GorillaVelocityTracker* velocityTracker;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaVelocityTracker*) == 0x8);
    // private System.Boolean localPlayerOn
    // Size: 0x1
    // Offset: 0x70
    bool localPlayerOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: localPlayerOn and: localPlayerBoneIndex
    char __padding10[0x3] = {};
    // private System.Int32 localPlayerBoneIndex
    // Size: 0x4
    // Offset: 0x74
    int localPlayerBoneIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.XR.XRNode localPlayerXRNode
    // Size: 0x4
    // Offset: 0x78
    ::UnityEngine::XR::XRNode localPlayerXRNode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::XRNode) == 0x4);
    // private System.Boolean <isIdle>k__BackingField
    // Size: 0x1
    // Offset: 0x7C
    bool isIdle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isFullyIdle>k__BackingField
    // Size: 0x1
    // Offset: 0x7D
    bool isFullyIdle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFullyIdle and: potentialIdleTimer
    char __padding14[0x2] = {};
    // private System.Single potentialIdleTimer
    // Size: 0x4
    // Offset: 0x80
    float potentialIdleTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 ropeLength
    // Size: 0x4
    // Offset: 0x84
    int ropeLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GorillaLocomotion.Gameplay.GorillaRopeSwingSettings settings
    // Size: 0x8
    // Offset: 0x88
    ::GorillaLocomotion::Gameplay::GorillaRopeSwingSettings* settings;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Gameplay::GorillaRopeSwingSettings*) == 0x8);
    // public System.Int32 ropeDataStartIndex
    // Size: 0x4
    // Offset: 0x90
    int ropeDataStartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ropeDataIndexOffset
    // Size: 0x4
    // Offset: 0x94
    int ropeDataIndexOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.LayerMask wallLayerMask
    // Size: 0x4
    // Offset: 0x98
    ::UnityEngine::LayerMask wallLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: wallLayerMask and: nodeHits
    char __padding20[0x4] = {};
    // private UnityEngine.RaycastHit[] nodeHits
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::UnityEngine::RaycastHit> nodeHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private System.Single scaleFactor
    // Size: 0x4
    // Offset: 0xA8
    float scaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 lastNodeCheckIndex
    // Size: 0x4
    // Offset: 0xAC
    int lastNodeCheckIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBuilderPieceComponent
    operator ::GlobalNamespace::IBuilderPieceComponent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBuilderPieceComponent*>(this);
    }
    // static field const value: static public System.Single ropeBitGenOffset
    static constexpr const float ropeBitGenOffset = 1;
    // Get static field: static public System.Single ropeBitGenOffset
    static float _get_ropeBitGenOffset();
    // Set static field: static public System.Single ropeBitGenOffset
    static void _set_ropeBitGenOffset(float value);
    // static field const value: static private System.Single MAX_VELOCITY_FOR_IDLE
    static constexpr const float MAX_VELOCITY_FOR_IDLE = 0.5;
    // Get static field: static private System.Single MAX_VELOCITY_FOR_IDLE
    static float _get_MAX_VELOCITY_FOR_IDLE();
    // Set static field: static private System.Single MAX_VELOCITY_FOR_IDLE
    static void _set_MAX_VELOCITY_FOR_IDLE(float value);
    // static field const value: static private System.Single TIME_FOR_IDLE
    static constexpr const float TIME_FOR_IDLE = 2;
    // Get static field: static private System.Single TIME_FOR_IDLE
    static float _get_TIME_FOR_IDLE();
    // Set static field: static private System.Single TIME_FOR_IDLE
    static void _set_TIME_FOR_IDLE(float value);
    // Get instance field reference: public System.Int32 ropeId
    [[deprecated("Use field access instead!")]] int& dyn_ropeId();
    // Get instance field reference: public System.String staticId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_staticId();
    // Get instance field reference: public System.Boolean useStaticId
    [[deprecated("Use field access instead!")]] bool& dyn_useStaticId();
    // Get instance field reference: private UnityEngine.GameObject prefabRopeBit
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_prefabRopeBit();
    // Get instance field reference: private System.Boolean supportMovingAtRuntime
    [[deprecated("Use field access instead!")]] bool& dyn_supportMovingAtRuntime();
    // Get instance field reference: public UnityEngine.Transform[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_nodes();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> remotePlayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_remotePlayers();
    // Get instance field reference: public System.Single lastGrabTime
    [[deprecated("Use field access instead!")]] float& dyn_lastGrabTime();
    // Get instance field reference: private UnityEngine.AudioSource ropeCreakSFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_ropeCreakSFX();
    // Get instance field reference: public GorillaLocomotion.Climbing.GorillaVelocityTracker velocityTracker
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaVelocityTracker*& dyn_velocityTracker();
    // Get instance field reference: private System.Boolean localPlayerOn
    [[deprecated("Use field access instead!")]] bool& dyn_localPlayerOn();
    // Get instance field reference: private System.Int32 localPlayerBoneIndex
    [[deprecated("Use field access instead!")]] int& dyn_localPlayerBoneIndex();
    // Get instance field reference: private UnityEngine.XR.XRNode localPlayerXRNode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& dyn_localPlayerXRNode();
    // Get instance field reference: private System.Boolean <isIdle>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isIdle$k__BackingField();
    // Get instance field reference: private System.Boolean <isFullyIdle>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isFullyIdle$k__BackingField();
    // Get instance field reference: private System.Single potentialIdleTimer
    [[deprecated("Use field access instead!")]] float& dyn_potentialIdleTimer();
    // Get instance field reference: private System.Int32 ropeLength
    [[deprecated("Use field access instead!")]] int& dyn_ropeLength();
    // Get instance field reference: private GorillaLocomotion.Gameplay.GorillaRopeSwingSettings settings
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Gameplay::GorillaRopeSwingSettings*& dyn_settings();
    // Get instance field reference: public System.Int32 ropeDataStartIndex
    [[deprecated("Use field access instead!")]] int& dyn_ropeDataStartIndex();
    // Get instance field reference: public System.Int32 ropeDataIndexOffset
    [[deprecated("Use field access instead!")]] int& dyn_ropeDataIndexOffset();
    // Get instance field reference: private UnityEngine.LayerMask wallLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_wallLayerMask();
    // Get instance field reference: private UnityEngine.RaycastHit[] nodeHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_nodeHits();
    // Get instance field reference: private System.Single scaleFactor
    [[deprecated("Use field access instead!")]] float& dyn_scaleFactor();
    // Get instance field reference: private System.Int32 lastNodeCheckIndex
    [[deprecated("Use field access instead!")]] int& dyn_lastNodeCheckIndex();
    // private System.Void EdRecalculateId()
    // Offset: 0x27E6A30
    void EdRecalculateId();
    // public System.Boolean get_isIdle()
    // Offset: 0x27E6D98
    bool get_isIdle();
    // private System.Void set_isIdle(System.Boolean value)
    // Offset: 0x27E6DA0
    void set_isIdle(bool value);
    // public System.Boolean get_isFullyIdle()
    // Offset: 0x27E6DAC
    bool get_isFullyIdle();
    // private System.Void set_isFullyIdle(System.Boolean value)
    // Offset: 0x27E6DB4
    void set_isFullyIdle(bool value);
    // public System.Boolean get_SupportsMovingAtRuntime()
    // Offset: 0x27E6DC0
    bool get_SupportsMovingAtRuntime();
    // public System.Boolean get_hasPlayers()
    // Offset: 0x27E6DC8
    bool get_hasPlayers();
    // private System.Void Awake()
    // Offset: 0x27E6E34
    void Awake();
    // private System.Void Start()
    // Offset: 0x27E70D0
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x27E7150
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0x27E71AC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x27E752C
    void OnDisable();
    // System.Void CalculateId(System.Boolean force)
    // Offset: 0x27E6A38
    void CalculateId(bool force);
    // public System.Void InvokeUpdate()
    // Offset: 0x27E7798
    void InvokeUpdate();
    // private System.Void SetIsIdle(System.Boolean idle, System.Boolean resetPos)
    // Offset: 0x27E6F1C
    void SetIsIdle(bool idle, bool resetPos);
    // public UnityEngine.Transform GetBone(System.Int32 index)
    // Offset: 0x27E7F34
    ::UnityEngine::Transform* GetBone(int index);
    // public System.Int32 GetBoneIndex(UnityEngine.Transform r)
    // Offset: 0x27E83E4
    int GetBoneIndex(::UnityEngine::Transform* r);
    // public System.Void AttachLocalPlayer(UnityEngine.XR.XRNode xrNode, UnityEngine.Transform grabbedBone, UnityEngine.Vector3 offset, UnityEngine.Vector3 velocity)
    // Offset: 0x27E8498
    void AttachLocalPlayer(::UnityEngine::XR::XRNode xrNode, ::UnityEngine::Transform* grabbedBone, ::UnityEngine::Vector3 offset, ::UnityEngine::Vector3 velocity);
    // public System.Void DetachLocalPlayer()
    // Offset: 0x27E8DA8
    void DetachLocalPlayer();
    // private System.Void ToggleVelocityTracker(System.Boolean enable, System.Int32 boneIndex, UnityEngine.Vector3 offset)
    // Offset: 0x27E82E4
    void ToggleVelocityTracker(bool enable, int boneIndex, ::UnityEngine::Vector3 offset);
    // private System.Void RefreshAllBonesMass()
    // Offset: 0x27E8948
    void RefreshAllBonesMass();
    // public System.Boolean AttachRemotePlayer(System.Int32 playerId, System.Int32 boneIndex, UnityEngine.Transform offsetTransform, UnityEngine.Vector3 offset)
    // Offset: 0x27E8FA4
    bool AttachRemotePlayer(int playerId, int boneIndex, ::UnityEngine::Transform* offsetTransform, ::UnityEngine::Vector3 offset);
    // public System.Void DetachRemotePlayer(System.Int32 playerId)
    // Offset: 0x27E9188
    void DetachRemotePlayer(int playerId);
    // public System.Void SetVelocity(System.Int32 boneIndex, UnityEngine.Vector3 velocity, System.Boolean wholeRope, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x27E7FB0
    void SetVelocity(int boneIndex, ::UnityEngine::Vector3 velocity, bool wholeRope, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OnPieceCreate(System.Int32 pieceType, System.Int32 pieceId)
    // Offset: 0x27E9600
    void OnPieceCreate(int pieceType, int pieceId);
    // public System.Void OnPieceDestroy()
    // Offset: 0x27E9800
    void OnPieceDestroy();
    // public System.Void OnPieceActivate()
    // Offset: 0x27E9804
    void OnPieceActivate();
    // public System.Void OnPieceDeactivate()
    // Offset: 0x27E9808
    void OnPieceDeactivate();
    // public System.Void .ctor()
    // Offset: 0x27E980C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaRopeSwing* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaLocomotion::Gameplay::GorillaRopeSwing::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaRopeSwing*, creationType>()));
    }
  }; // GorillaLocomotion.Gameplay.GorillaRopeSwing
  #pragma pack(pop)
  static check_size<sizeof(GorillaRopeSwing), 172 + sizeof(int)> __GorillaLocomotion_Gameplay_GorillaRopeSwingSizeCheck;
  static_assert(sizeof(GorillaRopeSwing) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::EdRecalculateId
// Il2CppName: EdRecalculateId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::EdRecalculateId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "EdRecalculateId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::get_isIdle
// Il2CppName: get_isIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::get_isIdle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "get_isIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::set_isIdle
// Il2CppName: set_isIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(bool)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::set_isIdle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "set_isIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::get_isFullyIdle
// Il2CppName: get_isFullyIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::get_isFullyIdle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "get_isFullyIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::set_isFullyIdle
// Il2CppName: set_isFullyIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(bool)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::set_isFullyIdle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "set_isFullyIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::get_SupportsMovingAtRuntime
// Il2CppName: get_SupportsMovingAtRuntime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::get_SupportsMovingAtRuntime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "get_SupportsMovingAtRuntime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::get_hasPlayers
// Il2CppName: get_hasPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::get_hasPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "get_hasPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::CalculateId
// Il2CppName: CalculateId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(bool)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::CalculateId)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "CalculateId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::InvokeUpdate
// Il2CppName: InvokeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::InvokeUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "InvokeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::SetIsIdle
// Il2CppName: SetIsIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(bool, bool)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::SetIsIdle)> {
  static const MethodInfo* get() {
    static auto* idle = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resetPos = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "SetIsIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idle, resetPos});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::GetBone
// Il2CppName: GetBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(int)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::GetBone)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "GetBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::GetBoneIndex
// Il2CppName: GetBoneIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(::UnityEngine::Transform*)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::GetBoneIndex)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "GetBoneIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::AttachLocalPlayer
// Il2CppName: AttachLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(::UnityEngine::XR::XRNode, ::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::AttachLocalPlayer)> {
  static const MethodInfo* get() {
    static auto* xrNode = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    static auto* grabbedBone = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "AttachLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xrNode, grabbedBone, offset, velocity});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::DetachLocalPlayer
// Il2CppName: DetachLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::DetachLocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "DetachLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::ToggleVelocityTracker
// Il2CppName: ToggleVelocityTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(bool, int, ::UnityEngine::Vector3)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::ToggleVelocityTracker)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* boneIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "ToggleVelocityTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable, boneIndex, offset});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::RefreshAllBonesMass
// Il2CppName: RefreshAllBonesMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::RefreshAllBonesMass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "RefreshAllBonesMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::AttachRemotePlayer
// Il2CppName: AttachRemotePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(int, int, ::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::AttachRemotePlayer)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* boneIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offsetTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "AttachRemotePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId, boneIndex, offsetTransform, offset});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::DetachRemotePlayer
// Il2CppName: DetachRemotePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(int)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::DetachRemotePlayer)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "DetachRemotePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::SetVelocity
// Il2CppName: SetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(int, ::UnityEngine::Vector3, bool, ::Photon::Pun::PhotonMessageInfo)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::SetVelocity)> {
  static const MethodInfo* get() {
    static auto* boneIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* wholeRope = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "SetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneIndex, velocity, wholeRope, info});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::OnPieceCreate
// Il2CppName: OnPieceCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)(int, int)>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::OnPieceCreate)> {
  static const MethodInfo* get() {
    static auto* pieceType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pieceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "OnPieceCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pieceType, pieceId});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::OnPieceDestroy
// Il2CppName: OnPieceDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::OnPieceDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "OnPieceDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::OnPieceActivate
// Il2CppName: OnPieceActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::OnPieceActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "OnPieceActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::OnPieceDeactivate
// Il2CppName: OnPieceDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::GorillaRopeSwing::*)()>(&GorillaLocomotion::Gameplay::GorillaRopeSwing::OnPieceDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::GorillaRopeSwing*), "OnPieceDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaRopeSwing::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
