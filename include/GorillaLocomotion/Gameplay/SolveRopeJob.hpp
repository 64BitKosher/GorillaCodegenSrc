// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJob
#include "Unity/Jobs/IJob.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: GorillaLocomotion.Gameplay.BurstRopeNode
#include "GorillaLocomotion/Gameplay/BurstRopeNode.hpp"
// Completed includes
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: SolveRopeJob
  struct SolveRopeJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Gameplay::SolveRopeJob, "GorillaLocomotion.Gameplay", "SolveRopeJob");
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaLocomotion.Gameplay.SolveRopeJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct SolveRopeJob/*, public ::System::ValueType, public ::Unity::Jobs::IJob*/ {
    public:
    public:
    // public System.Single fixedDeltaTime
    // Size: 0x4
    // Offset: 0x0
    float fixedDeltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Unity.Collections.NativeArray`1<GorillaLocomotion.Gameplay.BurstRopeNode> nodes
    // Size: 0xFFFFFFFF
    // Offset: 0x8
    ::Unity::Collections::NativeArray_1<::GorillaLocomotion::Gameplay::BurstRopeNode> nodes;
    // public UnityEngine.Vector3 gravity
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 gravity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rootPos
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 rootPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single nodeDistance
    // Size: 0x4
    // Offset: 0x30
    float nodeDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: SolveRopeJob
    constexpr SolveRopeJob(float fixedDeltaTime_ = {}, ::Unity::Collections::NativeArray_1<::GorillaLocomotion::Gameplay::BurstRopeNode> nodes_ = {}, ::UnityEngine::Vector3 gravity_ = {}, ::UnityEngine::Vector3 rootPos_ = {}, float nodeDistance_ = {}) noexcept : fixedDeltaTime{fixedDeltaTime_}, nodes{nodes_}, gravity{gravity_}, rootPos{rootPos_}, nodeDistance{nodeDistance_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJob
    operator ::Unity::Jobs::IJob() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJob*>(this);
    }
    // Get instance field reference: public System.Single fixedDeltaTime
    [[deprecated("Use field access instead!")]] float& dyn_fixedDeltaTime();
    // Get instance field reference: public Unity.Collections.NativeArray`1<GorillaLocomotion.Gameplay.BurstRopeNode> nodes
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GorillaLocomotion::Gameplay::BurstRopeNode>& dyn_nodes();
    // Get instance field reference: public UnityEngine.Vector3 gravity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_gravity();
    // Get instance field reference: public UnityEngine.Vector3 rootPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rootPos();
    // Get instance field reference: public System.Single nodeDistance
    [[deprecated("Use field access instead!")]] float& dyn_nodeDistance();
    // public System.Void Execute()
    // Offset: 0x27E669C
    void Execute();
    // private System.Void Simulate()
    // Offset: 0x27E66CC
    void Simulate();
    // private System.Void ApplyConstraint()
    // Offset: 0x27E674C
    void ApplyConstraint();
  }; // GorillaLocomotion.Gameplay.SolveRopeJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::SolveRopeJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::SolveRopeJob::*)()>(&GorillaLocomotion::Gameplay::SolveRopeJob::Execute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::SolveRopeJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::SolveRopeJob::Simulate
// Il2CppName: Simulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::SolveRopeJob::*)()>(&GorillaLocomotion::Gameplay::SolveRopeJob::Simulate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::SolveRopeJob), "Simulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::SolveRopeJob::ApplyConstraint
// Il2CppName: ApplyConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Gameplay::SolveRopeJob::*)()>(&GorillaLocomotion::Gameplay::SolveRopeJob::ApplyConstraint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Gameplay::SolveRopeJob), "ApplyConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
