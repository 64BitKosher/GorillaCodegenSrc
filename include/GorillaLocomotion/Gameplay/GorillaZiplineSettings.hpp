// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: GorillaZiplineSettings
  class GorillaZiplineSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaLocomotion::Gameplay::GorillaZiplineSettings);
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Gameplay::GorillaZiplineSettings*, "GorillaLocomotion.Gameplay", "GorillaZiplineSettings");
// Type namespace: GorillaLocomotion.Gameplay
namespace GorillaLocomotion::Gameplay {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLocomotion.Gameplay.GorillaZiplineSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class GorillaZiplineSettings : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.Single minSlidePitch
    // Size: 0x4
    // Offset: 0x18
    float minSlidePitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSlidePitch
    // Size: 0x4
    // Offset: 0x1C
    float maxSlidePitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minSlideVolume
    // Size: 0x4
    // Offset: 0x20
    float minSlideVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSlideVolume
    // Size: 0x4
    // Offset: 0x24
    float maxSlideVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSpeed
    // Size: 0x4
    // Offset: 0x28
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single gravityMulti
    // Size: 0x4
    // Offset: 0x2C
    float gravityMulti;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single friction
    // Size: 0x4
    // Offset: 0x30
    float friction;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxFriction
    // Size: 0x4
    // Offset: 0x34
    float maxFriction;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxFrictionSpeed
    // Size: 0x4
    // Offset: 0x38
    float maxFrictionSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single minSlidePitch
    [[deprecated("Use field access instead!")]] float& dyn_minSlidePitch();
    // Get instance field reference: public System.Single maxSlidePitch
    [[deprecated("Use field access instead!")]] float& dyn_maxSlidePitch();
    // Get instance field reference: public System.Single minSlideVolume
    [[deprecated("Use field access instead!")]] float& dyn_minSlideVolume();
    // Get instance field reference: public System.Single maxSlideVolume
    [[deprecated("Use field access instead!")]] float& dyn_maxSlideVolume();
    // Get instance field reference: public System.Single maxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxSpeed();
    // Get instance field reference: public System.Single gravityMulti
    [[deprecated("Use field access instead!")]] float& dyn_gravityMulti();
    // Get instance field reference: public System.Single friction
    [[deprecated("Use field access instead!")]] float& dyn_friction();
    // Get instance field reference: public System.Single maxFriction
    [[deprecated("Use field access instead!")]] float& dyn_maxFriction();
    // Get instance field reference: public System.Single maxFrictionSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxFrictionSpeed();
    // public System.Void .ctor()
    // Offset: 0x27EA988
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaZiplineSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaLocomotion::Gameplay::GorillaZiplineSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaZiplineSettings*, creationType>()));
    }
  }; // GorillaLocomotion.Gameplay.GorillaZiplineSettings
  #pragma pack(pop)
  static check_size<sizeof(GorillaZiplineSettings), 56 + sizeof(float)> __GorillaLocomotion_Gameplay_GorillaZiplineSettingsSizeCheck;
  static_assert(sizeof(GorillaZiplineSettings) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Gameplay::GorillaZiplineSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
