// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaLocomotion
namespace GorillaLocomotion {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EquipmentInteractor
  class EquipmentInteractor;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaLocomotion::Climbing
namespace GorillaLocomotion::Climbing {
  // Forward declaring type: GorillaClimbable
  class GorillaClimbable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: GorillaLocomotion.Climbing
namespace GorillaLocomotion::Climbing {
  // Forward declaring type: GorillaHandClimber
  class GorillaHandClimber;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaLocomotion::Climbing::GorillaHandClimber);
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Climbing::GorillaHandClimber*, "GorillaLocomotion.Climbing", "GorillaHandClimber");
// Type namespace: GorillaLocomotion.Climbing
namespace GorillaLocomotion::Climbing {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLocomotion.Climbing.GorillaHandClimber
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaHandClimber : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private GorillaLocomotion.Player player
    // Size: 0x8
    // Offset: 0x20
    ::GorillaLocomotion::Player* player;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Player*) == 0x8);
    // private EquipmentInteractor equipmentInteractor
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::EquipmentInteractor* equipmentInteractor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EquipmentInteractor*) == 0x8);
    // private System.Collections.Generic.List`1<GorillaLocomotion.Climbing.GorillaClimbable> potentialClimbables
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Climbing::GorillaClimbable*>* potentialClimbables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaLocomotion::Climbing::GorillaClimbable*>*) == 0x8);
    // public UnityEngine.XR.XRNode xrNode
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::XR::XRNode xrNode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::XRNode) == 0x4);
    // public System.Boolean isClimbing
    // Size: 0x1
    // Offset: 0x3C
    bool isClimbing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean queuedToBecomeValidToGrabAgain
    // Size: 0x1
    // Offset: 0x3D
    bool queuedToBecomeValidToGrabAgain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: queuedToBecomeValidToGrabAgain and: dontReclimbLast
    char __padding5[0x2] = {};
    // public GorillaLocomotion.Climbing.GorillaClimbable dontReclimbLast
    // Size: 0x8
    // Offset: 0x40
    ::GorillaLocomotion::Climbing::GorillaClimbable* dontReclimbLast;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaClimbable*) == 0x8);
    // public UnityEngine.Vector3 lastAutoReleasePos
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 lastAutoReleasePos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: lastAutoReleasePos and: handRoot
    char __padding7[0x4] = {};
    // public UnityEngine.Transform handRoot
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* handRoot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Collider col
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Collider* col;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    public:
    // static field const value: static private System.Single DIST_FOR_CLEAR_RELEASE
    static constexpr const float DIST_FOR_CLEAR_RELEASE = 0.35;
    // Get static field: static private System.Single DIST_FOR_CLEAR_RELEASE
    static float _get_DIST_FOR_CLEAR_RELEASE();
    // Set static field: static private System.Single DIST_FOR_CLEAR_RELEASE
    static void _set_DIST_FOR_CLEAR_RELEASE(float value);
    // Get instance field reference: private GorillaLocomotion.Player player
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Player*& dyn_player();
    // Get instance field reference: private EquipmentInteractor equipmentInteractor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EquipmentInteractor*& dyn_equipmentInteractor();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaLocomotion.Climbing.GorillaClimbable> potentialClimbables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaLocomotion::Climbing::GorillaClimbable*>*& dyn_potentialClimbables();
    // Get instance field reference: public UnityEngine.XR.XRNode xrNode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& dyn_xrNode();
    // Get instance field reference: public System.Boolean isClimbing
    [[deprecated("Use field access instead!")]] bool& dyn_isClimbing();
    // Get instance field reference: public System.Boolean queuedToBecomeValidToGrabAgain
    [[deprecated("Use field access instead!")]] bool& dyn_queuedToBecomeValidToGrabAgain();
    // Get instance field reference: public GorillaLocomotion.Climbing.GorillaClimbable dontReclimbLast
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaClimbable*& dyn_dontReclimbLast();
    // Get instance field reference: public UnityEngine.Vector3 lastAutoReleasePos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastAutoReleasePos();
    // Get instance field reference: public UnityEngine.Transform handRoot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_handRoot();
    // Get instance field reference: private UnityEngine.Collider col
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_col();
    // private System.Void Awake()
    // Offset: 0x27EF0CC
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x27EF124
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x27EF128
    void Update();
    // public GorillaLocomotion.Climbing.GorillaClimbable GetClosestClimbable()
    // Offset: 0x27EF4E0
    ::GorillaLocomotion::Climbing::GorillaClimbable* GetClosestClimbable();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x27EF8F0
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x27EFA08
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void ForceStopClimbing(System.Boolean startingNewClimb, System.Boolean doDontReclimb)
    // Offset: 0x27EFAD8
    void ForceStopClimbing(bool startingNewClimb, bool doDontReclimb);
    // public System.Void .ctor()
    // Offset: 0x27EFB08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaHandClimber* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaLocomotion::Climbing::GorillaHandClimber::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaHandClimber*, creationType>()));
    }
  }; // GorillaLocomotion.Climbing.GorillaHandClimber
  #pragma pack(pop)
  static check_size<sizeof(GorillaHandClimber), 96 + sizeof(::UnityEngine::Collider*)> __GorillaLocomotion_Climbing_GorillaHandClimberSizeCheck;
  static_assert(sizeof(GorillaHandClimber) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Climbing::GorillaHandClimber::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Climbing::GorillaHandClimber::*)()>(&GorillaLocomotion::Climbing::GorillaHandClimber::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Climbing::GorillaHandClimber*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Climbing::GorillaHandClimber::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Climbing::GorillaHandClimber::*)()>(&GorillaLocomotion::Climbing::GorillaHandClimber::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Climbing::GorillaHandClimber*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Climbing::GorillaHandClimber::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Climbing::GorillaHandClimber::*)()>(&GorillaLocomotion::Climbing::GorillaHandClimber::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Climbing::GorillaHandClimber*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Climbing::GorillaHandClimber::GetClosestClimbable
// Il2CppName: GetClosestClimbable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Climbing::GorillaClimbable* (GorillaLocomotion::Climbing::GorillaHandClimber::*)()>(&GorillaLocomotion::Climbing::GorillaHandClimber::GetClosestClimbable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Climbing::GorillaHandClimber*), "GetClosestClimbable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Climbing::GorillaHandClimber::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Climbing::GorillaHandClimber::*)(::UnityEngine::Collider*)>(&GorillaLocomotion::Climbing::GorillaHandClimber::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Climbing::GorillaHandClimber*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Climbing::GorillaHandClimber::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Climbing::GorillaHandClimber::*)(::UnityEngine::Collider*)>(&GorillaLocomotion::Climbing::GorillaHandClimber::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Climbing::GorillaHandClimber*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Climbing::GorillaHandClimber::ForceStopClimbing
// Il2CppName: ForceStopClimbing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Climbing::GorillaHandClimber::*)(bool, bool)>(&GorillaLocomotion::Climbing::GorillaHandClimber::ForceStopClimbing)> {
  static const MethodInfo* get() {
    static auto* startingNewClimb = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* doDontReclimb = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Climbing::GorillaHandClimber*), "ForceStopClimbing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startingNewClimb, doDontReclimb});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Climbing::GorillaHandClimber::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
