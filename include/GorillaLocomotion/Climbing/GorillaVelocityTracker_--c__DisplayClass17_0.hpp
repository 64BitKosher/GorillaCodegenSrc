// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaLocomotion.Climbing.GorillaVelocityTracker
#include "GorillaLocomotion/Climbing/GorillaVelocityTracker.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Climbing::GorillaVelocityTracker::$$c__DisplayClass17_0, "GorillaLocomotion.Climbing", "GorillaVelocityTracker/<>c__DisplayClass17_0");
// Type namespace: GorillaLocomotion.Climbing
namespace GorillaLocomotion::Climbing {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLocomotion.Climbing.GorillaVelocityTracker/<>c__DisplayClass17_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct GorillaVelocityTracker::$$c__DisplayClass17_0/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 total
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 total;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single totalMag
    // Size: 0x4
    // Offset: 0xC
    float totalMag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 added
    // Size: 0x4
    // Offset: 0x10
    int added;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: $$c__DisplayClass17_0
    constexpr $$c__DisplayClass17_0(::UnityEngine::Vector3 total_ = {}, float totalMag_ = {}, int added_ = {}) noexcept : total{total_}, totalMag{totalMag_}, added{added_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 total
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_total();
    // Get instance field reference: public System.Single totalMag
    [[deprecated("Use field access instead!")]] float& dyn_totalMag();
    // Get instance field reference: public System.Int32 added
    [[deprecated("Use field access instead!")]] int& dyn_added();
  }; // GorillaLocomotion.Climbing.GorillaVelocityTracker/<>c__DisplayClass17_0
  #pragma pack(pop)
  static check_size<sizeof(GorillaVelocityTracker::$$c__DisplayClass17_0), 16 + sizeof(int)> __GorillaLocomotion_Climbing_GorillaVelocityTracker_$$c__DisplayClass17_0SizeCheck;
  static_assert(sizeof(GorillaVelocityTracker::$$c__DisplayClass17_0) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
