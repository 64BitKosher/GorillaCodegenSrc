// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery
#include "GorillaLocomotion/Swimming/WaterVolume_SurfaceQuery.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GorillaLocomotion::Climbing
namespace GorillaLocomotion::Climbing {
  // Forward declaring type: GorillaVelocityTracker
  class GorillaVelocityTracker;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Forward declaring namespace: GorillaLocomotion::Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterVolume
  class WaterVolume;
}
// Completed forward declares
// Type namespace: GorillaLocomotion.Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterOverlappingCollider
  struct WaterOverlappingCollider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Swimming::WaterOverlappingCollider, "GorillaLocomotion.Swimming", "WaterOverlappingCollider");
// Type namespace: GorillaLocomotion.Swimming
namespace GorillaLocomotion::Swimming {
  // Size: 0x6C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaLocomotion.Swimming.WaterOverlappingCollider
  // [TokenAttribute] Offset: FFFFFFFF
  struct WaterOverlappingCollider/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean playBigSplash
    // Size: 0x1
    // Offset: 0x0
    bool playBigSplash;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean playDripEffect
    // Size: 0x1
    // Offset: 0x1
    bool playDripEffect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean overrideBoundingRadius
    // Size: 0x1
    // Offset: 0x2
    bool overrideBoundingRadius;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideBoundingRadius and: boundingRadiusOverride
    char __padding2[0x1] = {};
    // public System.Single boundingRadiusOverride
    // Size: 0x4
    // Offset: 0x4
    float boundingRadiusOverride;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single scaleMultiplier
    // Size: 0x4
    // Offset: 0x8
    float scaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: scaleMultiplier and: collider
    char __padding4[0x4] = {};
    // public UnityEngine.Collider collider
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Collider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public GorillaLocomotion.Climbing.GorillaVelocityTracker velocityTracker
    // Size: 0x8
    // Offset: 0x18
    ::GorillaLocomotion::Climbing::GorillaVelocityTracker* velocityTracker;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaVelocityTracker*) == 0x8);
    // public GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery lastSurfaceQuery
    // Size: 0x1C
    // Offset: 0x20
    ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery lastSurfaceQuery;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery) == 0x1C);
    // Padding between fields: lastSurfaceQuery and: photonViewForRPC
    char __padding7[0x4] = {};
    // public Photon.Pun.PhotonView photonViewForRPC
    // Size: 0x8
    // Offset: 0x40
    ::Photon::Pun::PhotonView* photonViewForRPC;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // public System.Boolean surfaceDetected
    // Size: 0x1
    // Offset: 0x48
    bool surfaceDetected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean inWater
    // Size: 0x1
    // Offset: 0x49
    bool inWater;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean inVolume
    // Size: 0x1
    // Offset: 0x4A
    bool inVolume;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inVolume and: lastBoundingRadius
    char __padding11[0x1] = {};
    // public System.Single lastBoundingRadius
    // Size: 0x4
    // Offset: 0x4C
    float lastBoundingRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 lastRipplePosition
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 lastRipplePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single lastRippleScale
    // Size: 0x4
    // Offset: 0x5C
    float lastRippleScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastRippleTime
    // Size: 0x4
    // Offset: 0x60
    float lastRippleTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastInWaterTime
    // Size: 0x4
    // Offset: 0x64
    float lastInWaterTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nextDripTime
    // Size: 0x4
    // Offset: 0x68
    float nextDripTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: WaterOverlappingCollider
    constexpr WaterOverlappingCollider(bool playBigSplash_ = {}, bool playDripEffect_ = {}, bool overrideBoundingRadius_ = {}, float boundingRadiusOverride_ = {}, float scaleMultiplier_ = {}, ::UnityEngine::Collider* collider_ = {}, ::GorillaLocomotion::Climbing::GorillaVelocityTracker* velocityTracker_ = {}, ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery lastSurfaceQuery_ = {}, ::Photon::Pun::PhotonView* photonViewForRPC_ = {}, bool surfaceDetected_ = {}, bool inWater_ = {}, bool inVolume_ = {}, float lastBoundingRadius_ = {}, ::UnityEngine::Vector3 lastRipplePosition_ = {}, float lastRippleScale_ = {}, float lastRippleTime_ = {}, float lastInWaterTime_ = {}, float nextDripTime_ = {}) noexcept : playBigSplash{playBigSplash_}, playDripEffect{playDripEffect_}, overrideBoundingRadius{overrideBoundingRadius_}, boundingRadiusOverride{boundingRadiusOverride_}, scaleMultiplier{scaleMultiplier_}, collider{collider_}, velocityTracker{velocityTracker_}, lastSurfaceQuery{lastSurfaceQuery_}, photonViewForRPC{photonViewForRPC_}, surfaceDetected{surfaceDetected_}, inWater{inWater_}, inVolume{inVolume_}, lastBoundingRadius{lastBoundingRadius_}, lastRipplePosition{lastRipplePosition_}, lastRippleScale{lastRippleScale_}, lastRippleTime{lastRippleTime_}, lastInWaterTime{lastInWaterTime_}, nextDripTime{nextDripTime_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean playBigSplash
    [[deprecated("Use field access instead!")]] bool& dyn_playBigSplash();
    // Get instance field reference: public System.Boolean playDripEffect
    [[deprecated("Use field access instead!")]] bool& dyn_playDripEffect();
    // Get instance field reference: public System.Boolean overrideBoundingRadius
    [[deprecated("Use field access instead!")]] bool& dyn_overrideBoundingRadius();
    // Get instance field reference: public System.Single boundingRadiusOverride
    [[deprecated("Use field access instead!")]] float& dyn_boundingRadiusOverride();
    // Get instance field reference: public System.Single scaleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_scaleMultiplier();
    // Get instance field reference: public UnityEngine.Collider collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_collider();
    // Get instance field reference: public GorillaLocomotion.Climbing.GorillaVelocityTracker velocityTracker
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaVelocityTracker*& dyn_velocityTracker();
    // Get instance field reference: public GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery lastSurfaceQuery
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery& dyn_lastSurfaceQuery();
    // Get instance field reference: public Photon.Pun.PhotonView photonViewForRPC
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_photonViewForRPC();
    // Get instance field reference: public System.Boolean surfaceDetected
    [[deprecated("Use field access instead!")]] bool& dyn_surfaceDetected();
    // Get instance field reference: public System.Boolean inWater
    [[deprecated("Use field access instead!")]] bool& dyn_inWater();
    // Get instance field reference: public System.Boolean inVolume
    [[deprecated("Use field access instead!")]] bool& dyn_inVolume();
    // Get instance field reference: public System.Single lastBoundingRadius
    [[deprecated("Use field access instead!")]] float& dyn_lastBoundingRadius();
    // Get instance field reference: public UnityEngine.Vector3 lastRipplePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastRipplePosition();
    // Get instance field reference: public System.Single lastRippleScale
    [[deprecated("Use field access instead!")]] float& dyn_lastRippleScale();
    // Get instance field reference: public System.Single lastRippleTime
    [[deprecated("Use field access instead!")]] float& dyn_lastRippleTime();
    // Get instance field reference: public System.Single lastInWaterTime
    [[deprecated("Use field access instead!")]] float& dyn_lastInWaterTime();
    // Get instance field reference: public System.Single nextDripTime
    [[deprecated("Use field access instead!")]] float& dyn_nextDripTime();
    // public System.Void PlayRippleEffect(UnityEngine.GameObject rippleEffectPrefab, UnityEngine.Vector3 surfacePoint, UnityEngine.Vector3 surfaceNormal, System.Single defaultRippleScale, System.Single currentTime, GorillaLocomotion.Swimming.WaterVolume volume)
    // Offset: 0x27E1594
    void PlayRippleEffect(::UnityEngine::GameObject* rippleEffectPrefab, ::UnityEngine::Vector3 surfacePoint, ::UnityEngine::Vector3 surfaceNormal, float defaultRippleScale, float currentTime, ::GorillaLocomotion::Swimming::WaterVolume* volume);
    // public System.Void PlaySplashEffect(UnityEngine.GameObject splashEffectPrefab, UnityEngine.Vector3 splashPosition, System.Single splashScale, System.Boolean bigSplash, System.Boolean enteringWater, GorillaLocomotion.Swimming.WaterVolume volume)
    // Offset: 0x27E1CC4
    void PlaySplashEffect(::UnityEngine::GameObject* splashEffectPrefab, ::UnityEngine::Vector3 splashPosition, float splashScale, bool bigSplash, bool enteringWater, ::GorillaLocomotion::Swimming::WaterVolume* volume);
    // public System.Void PlayDripEffect(UnityEngine.GameObject rippleEffectPrefab, UnityEngine.Vector3 surfacePoint, UnityEngine.Vector3 surfaceNormal, System.Single dripScale)
    // Offset: 0x27E22C4
    void PlayDripEffect(::UnityEngine::GameObject* rippleEffectPrefab, ::UnityEngine::Vector3 surfacePoint, ::UnityEngine::Vector3 surfaceNormal, float dripScale);
    // public UnityEngine.Vector3 GetClosestPositionOnSurface(UnityEngine.Vector3 surfacePoint, UnityEngine.Vector3 surfaceNormal)
    // Offset: 0x27E17F0
    ::UnityEngine::Vector3 GetClosestPositionOnSurface(::UnityEngine::Vector3 surfacePoint, ::UnityEngine::Vector3 surfaceNormal);
    // private System.Single GetBoundingRadiusOnSurface(UnityEngine.Vector3 surfaceNormal)
    // Offset: 0x27E190C
    float GetBoundingRadiusOnSurface(::UnityEngine::Vector3 surfaceNormal);
  }; // GorillaLocomotion.Swimming.WaterOverlappingCollider
  #pragma pack(pop)
  static check_size<sizeof(WaterOverlappingCollider), 104 + sizeof(float)> __GorillaLocomotion_Swimming_WaterOverlappingColliderSizeCheck;
  static_assert(sizeof(WaterOverlappingCollider) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterOverlappingCollider::PlayRippleEffect
// Il2CppName: PlayRippleEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::WaterOverlappingCollider::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, ::GorillaLocomotion::Swimming::WaterVolume*)>(&GorillaLocomotion::Swimming::WaterOverlappingCollider::PlayRippleEffect)> {
  static const MethodInfo* get() {
    static auto* rippleEffectPrefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* surfacePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* surfaceNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* defaultRippleScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterOverlappingCollider), "PlayRippleEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rippleEffectPrefab, surfacePoint, surfaceNormal, defaultRippleScale, currentTime, volume});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterOverlappingCollider::PlaySplashEffect
// Il2CppName: PlaySplashEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::WaterOverlappingCollider::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float, bool, bool, ::GorillaLocomotion::Swimming::WaterVolume*)>(&GorillaLocomotion::Swimming::WaterOverlappingCollider::PlaySplashEffect)> {
  static const MethodInfo* get() {
    static auto* splashEffectPrefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* splashPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* splashScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bigSplash = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enteringWater = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterOverlappingCollider), "PlaySplashEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{splashEffectPrefab, splashPosition, splashScale, bigSplash, enteringWater, volume});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterOverlappingCollider::PlayDripEffect
// Il2CppName: PlayDripEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::WaterOverlappingCollider::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GorillaLocomotion::Swimming::WaterOverlappingCollider::PlayDripEffect)> {
  static const MethodInfo* get() {
    static auto* rippleEffectPrefab = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* surfacePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* surfaceNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dripScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterOverlappingCollider), "PlayDripEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rippleEffectPrefab, surfacePoint, surfaceNormal, dripScale});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterOverlappingCollider::GetClosestPositionOnSurface
// Il2CppName: GetClosestPositionOnSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Swimming::WaterOverlappingCollider::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaLocomotion::Swimming::WaterOverlappingCollider::GetClosestPositionOnSurface)> {
  static const MethodInfo* get() {
    static auto* surfacePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* surfaceNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterOverlappingCollider), "GetClosestPositionOnSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePoint, surfaceNormal});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterOverlappingCollider::GetBoundingRadiusOnSurface
// Il2CppName: GetBoundingRadiusOnSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Swimming::WaterOverlappingCollider::*)(::UnityEngine::Vector3)>(&GorillaLocomotion::Swimming::WaterOverlappingCollider::GetBoundingRadiusOnSurface)> {
  static const MethodInfo* get() {
    static auto* surfaceNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterOverlappingCollider), "GetBoundingRadiusOnSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfaceNormal});
  }
};
