// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CatmullRomSpline
  class CatmullRomSpline;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: GorillaLocomotion.Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterCurrent
  class WaterCurrent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaLocomotion::Swimming::WaterCurrent);
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Swimming::WaterCurrent*, "GorillaLocomotion.Swimming", "WaterCurrent");
// Type namespace: GorillaLocomotion.Swimming
namespace GorillaLocomotion::Swimming {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLocomotion.Swimming.WaterCurrent
  // [TokenAttribute] Offset: FFFFFFFF
  class WaterCurrent : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.List`1<CatmullRomSpline> splines
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::CatmullRomSpline*>* splines;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::CatmullRomSpline*>*) == 0x8);
    // private System.Single fullEffectDistance
    // Size: 0x4
    // Offset: 0x28
    float fullEffectDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fadeDistance
    // Size: 0x4
    // Offset: 0x2C
    float fadeDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentSpeed
    // Size: 0x4
    // Offset: 0x30
    float currentSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentAccel
    // Size: 0x4
    // Offset: 0x34
    float currentAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single velocityAnticipationAdjustment
    // Size: 0x4
    // Offset: 0x38
    float velocityAnticipationAdjustment;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single inwardCurrentFullEffectRadius
    // Size: 0x4
    // Offset: 0x3C
    float inwardCurrentFullEffectRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single inwardCurrentNoEffectRadius
    // Size: 0x4
    // Offset: 0x40
    float inwardCurrentNoEffectRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single inwardCurrentSpeed
    // Size: 0x4
    // Offset: 0x44
    float inwardCurrentSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single inwardCurrentAccel
    // Size: 0x4
    // Offset: 0x48
    float inwardCurrentAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single dampingHalfLife
    // Size: 0x4
    // Offset: 0x4C
    float dampingHalfLife;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean debugDrawCurrentQueries
    // Size: 0x1
    // Offset: 0x50
    bool debugDrawCurrentQueries;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugDrawCurrentQueries and: debugCurrentVelocity
    char __padding11[0x3] = {};
    // private UnityEngine.Vector3 debugCurrentVelocity
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 debugCurrentVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 debugSplinePoint
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 debugSplinePoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<CatmullRomSpline> splines
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::CatmullRomSpline*>*& dyn_splines();
    // Get instance field reference: private System.Single fullEffectDistance
    [[deprecated("Use field access instead!")]] float& dyn_fullEffectDistance();
    // Get instance field reference: private System.Single fadeDistance
    [[deprecated("Use field access instead!")]] float& dyn_fadeDistance();
    // Get instance field reference: private System.Single currentSpeed
    [[deprecated("Use field access instead!")]] float& dyn_currentSpeed();
    // Get instance field reference: private System.Single currentAccel
    [[deprecated("Use field access instead!")]] float& dyn_currentAccel();
    // Get instance field reference: private System.Single velocityAnticipationAdjustment
    [[deprecated("Use field access instead!")]] float& dyn_velocityAnticipationAdjustment();
    // Get instance field reference: private System.Single inwardCurrentFullEffectRadius
    [[deprecated("Use field access instead!")]] float& dyn_inwardCurrentFullEffectRadius();
    // Get instance field reference: private System.Single inwardCurrentNoEffectRadius
    [[deprecated("Use field access instead!")]] float& dyn_inwardCurrentNoEffectRadius();
    // Get instance field reference: private System.Single inwardCurrentSpeed
    [[deprecated("Use field access instead!")]] float& dyn_inwardCurrentSpeed();
    // Get instance field reference: private System.Single inwardCurrentAccel
    [[deprecated("Use field access instead!")]] float& dyn_inwardCurrentAccel();
    // Get instance field reference: private System.Single dampingHalfLife
    [[deprecated("Use field access instead!")]] float& dyn_dampingHalfLife();
    // Get instance field reference: private System.Boolean debugDrawCurrentQueries
    [[deprecated("Use field access instead!")]] bool& dyn_debugDrawCurrentQueries();
    // Get instance field reference: private UnityEngine.Vector3 debugCurrentVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugCurrentVelocity();
    // Get instance field reference: private UnityEngine.Vector3 debugSplinePoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugSplinePoint();
    // public System.Single get_Speed()
    // Offset: 0x27E0FA4
    float get_Speed();
    // public System.Single get_Accel()
    // Offset: 0x27E0FAC
    float get_Accel();
    // public System.Single get_InwardSpeed()
    // Offset: 0x27E0FB4
    float get_InwardSpeed();
    // public System.Single get_InwardAccel()
    // Offset: 0x27E0FBC
    float get_InwardAccel();
    // public System.Boolean GetCurrentAtPoint(UnityEngine.Vector3 worldPoint, UnityEngine.Vector3 startingVelocity, System.Single dt, out UnityEngine.Vector3 currentVelocity, out UnityEngine.Vector3 velocityChange)
    // Offset: 0x27DE0C4
    bool GetCurrentAtPoint(::UnityEngine::Vector3 worldPoint, ::UnityEngine::Vector3 startingVelocity, float dt, ByRef<::UnityEngine::Vector3> currentVelocity, ByRef<::UnityEngine::Vector3> velocityChange);
    // private System.Void Update()
    // Offset: 0x27E0FC4
    void Update();
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0x27E10DC
    void OnDrawGizmosSelected();
    // private System.Void DrawGizmoCircle(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single radius)
    // Offset: 0x27E12E0
    void DrawGizmoCircle(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float radius);
    // public System.Void .ctor()
    // Offset: 0x27E1490
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaterCurrent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaLocomotion::Swimming::WaterCurrent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaterCurrent*, creationType>()));
    }
  }; // GorillaLocomotion.Swimming.WaterCurrent
  #pragma pack(pop)
  static check_size<sizeof(WaterCurrent), 96 + sizeof(::UnityEngine::Vector3)> __GorillaLocomotion_Swimming_WaterCurrentSizeCheck;
  static_assert(sizeof(WaterCurrent) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::get_Speed
// Il2CppName: get_Speed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Swimming::WaterCurrent::*)()>(&GorillaLocomotion::Swimming::WaterCurrent::get_Speed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterCurrent*), "get_Speed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::get_Accel
// Il2CppName: get_Accel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Swimming::WaterCurrent::*)()>(&GorillaLocomotion::Swimming::WaterCurrent::get_Accel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterCurrent*), "get_Accel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::get_InwardSpeed
// Il2CppName: get_InwardSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Swimming::WaterCurrent::*)()>(&GorillaLocomotion::Swimming::WaterCurrent::get_InwardSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterCurrent*), "get_InwardSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::get_InwardAccel
// Il2CppName: get_InwardAccel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Swimming::WaterCurrent::*)()>(&GorillaLocomotion::Swimming::WaterCurrent::get_InwardAccel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterCurrent*), "get_InwardAccel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::GetCurrentAtPoint
// Il2CppName: GetCurrentAtPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Swimming::WaterCurrent::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&GorillaLocomotion::Swimming::WaterCurrent::GetCurrentAtPoint)> {
  static const MethodInfo* get() {
    static auto* worldPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startingVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* currentVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* velocityChange = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterCurrent*), "GetCurrentAtPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPoint, startingVelocity, dt, currentVelocity, velocityChange});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::WaterCurrent::*)()>(&GorillaLocomotion::Swimming::WaterCurrent::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterCurrent*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::WaterCurrent::*)()>(&GorillaLocomotion::Swimming::WaterCurrent::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterCurrent*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::DrawGizmoCircle
// Il2CppName: DrawGizmoCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::WaterCurrent::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float)>(&GorillaLocomotion::Swimming::WaterCurrent::DrawGizmoCircle)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::WaterCurrent*), "DrawGizmoCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, radius});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::WaterCurrent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
