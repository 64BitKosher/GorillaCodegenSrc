// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery
#include "GorillaLocomotion/Swimming/WaterVolume_SurfaceQuery.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Plane
  struct Plane;
}
// Forward declaring namespace: GorillaLocomotion::Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: UnderwaterParticleEffects
  class UnderwaterParticleEffects;
  // Skipping declaration: CameraOverlapWaterState because it is already included!
}
// Forward declaring namespace: GorillaLocomotion
namespace GorillaLocomotion {
  // Skipping declaration: Player because it is already included!
}
// Completed forward declares
// Type namespace: GorillaLocomotion.Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: UnderwaterCameraEffect
  class UnderwaterCameraEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaLocomotion::Swimming::UnderwaterCameraEffect);
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Swimming::UnderwaterCameraEffect*, "GorillaLocomotion.Swimming", "UnderwaterCameraEffect");
// Type namespace: GorillaLocomotion.Swimming
namespace GorillaLocomotion::Swimming {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLocomotion.Swimming.UnderwaterCameraEffect
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class UnderwaterCameraEffect : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState
    struct CameraOverlapWaterState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState
    // [TokenAttribute] Offset: FFFFFFFF
    struct CameraOverlapWaterState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CameraOverlapWaterState
      constexpr CameraOverlapWaterState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState Uninitialized
      static constexpr const int Uninitialized = 0;
      // Get static field: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState Uninitialized
      static ::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState _get_Uninitialized();
      // Set static field: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState Uninitialized
      static void _set_Uninitialized(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState value);
      // static field const value: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState OutOfWater
      static constexpr const int OutOfWater = 1;
      // Get static field: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState OutOfWater
      static ::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState _get_OutOfWater();
      // Set static field: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState OutOfWater
      static void _set_OutOfWater(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState value);
      // static field const value: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState PartiallySubmerged
      static constexpr const int PartiallySubmerged = 2;
      // Get static field: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState PartiallySubmerged
      static ::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState _get_PartiallySubmerged();
      // Set static field: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState PartiallySubmerged
      static void _set_PartiallySubmerged(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState value);
      // static field const value: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState FullySubmerged
      static constexpr const int FullySubmerged = 3;
      // Get static field: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState FullySubmerged
      static ::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState _get_FullySubmerged();
      // Set static field: static public GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState FullySubmerged
      static void _set_FullySubmerged(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState
    #pragma pack(pop)
    static check_size<sizeof(UnderwaterCameraEffect::CameraOverlapWaterState), 0 + sizeof(int)> __GorillaLocomotion_Swimming_UnderwaterCameraEffect_CameraOverlapWaterStateSizeCheck;
    static_assert(sizeof(UnderwaterCameraEffect::CameraOverlapWaterState) == 0x4);
    public:
    // private UnityEngine.Camera targetCamera
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Camera* targetCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.MeshRenderer planeRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* planeRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private GorillaLocomotion.Swimming.UnderwaterParticleEffects underwaterParticleEffect
    // Size: 0x8
    // Offset: 0x30
    ::GorillaLocomotion::Swimming::UnderwaterParticleEffects* underwaterParticleEffect;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::UnderwaterParticleEffects*) == 0x8);
    // private System.Single distanceFromCamera
    // Size: 0x4
    // Offset: 0x38
    float distanceFromCamera;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean debugDraw
    // Size: 0x1
    // Offset: 0x3C
    bool debugDraw;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugDraw and: cachedAspectRatio
    char __padding4[0x3] = {};
    // private System.Single cachedAspectRatio
    // Size: 0x4
    // Offset: 0x40
    float cachedAspectRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single cachedFov
    // Size: 0x4
    // Offset: 0x44
    float cachedFov;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly UnityEngine.Vector3[] frustumPlaneCornersLocal
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Vector3> frustumPlaneCornersLocal;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector2 frustumPlaneExtents
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Vector2 frustumPlaneExtents;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private GorillaLocomotion.Player player
    // Size: 0x8
    // Offset: 0x58
    ::GorillaLocomotion::Player* player;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Player*) == 0x8);
    // private GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery waterSurface
    // Size: 0x1C
    // Offset: 0x60
    ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery waterSurface;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery) == 0x1C);
    // private System.Int32 shaderParam_GlobalCameraOverlapWaterSurfacePlane
    // Size: 0x4
    // Offset: 0x7C
    int shaderParam_GlobalCameraOverlapWaterSurfacePlane;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean hasTargetCamera
    // Size: 0x1
    // Offset: 0x80
    bool hasTargetCamera;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasTargetCamera and: cameraOverlapWaterState
    char __padding12[0x3] = {};
    // private GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState cameraOverlapWaterState
    // Size: 0x4
    // Offset: 0x84
    ::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState cameraOverlapWaterState;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState) == 0x4);
    public:
    // static field const value: static private System.Single edgeBuffer
    static constexpr const float edgeBuffer = 0.04;
    // Get static field: static private System.Single edgeBuffer
    static float _get_edgeBuffer();
    // Set static field: static private System.Single edgeBuffer
    static void _set_edgeBuffer(float value);
    // static field const value: static private System.String kShaderKeyword_GlobalCameraTouchingWater
    static constexpr const char* kShaderKeyword_GlobalCameraTouchingWater = "_GLOBAL_CAMERA_TOUCHING_WATER";
    // Get static field: static private System.String kShaderKeyword_GlobalCameraTouchingWater
    static ::StringW _get_kShaderKeyword_GlobalCameraTouchingWater();
    // Set static field: static private System.String kShaderKeyword_GlobalCameraTouchingWater
    static void _set_kShaderKeyword_GlobalCameraTouchingWater(::StringW value);
    // static field const value: static private System.String kShaderKeyword_GlobalCameraFullyUnderwater
    static constexpr const char* kShaderKeyword_GlobalCameraFullyUnderwater = "_GLOBAL_CAMERA_FULLY_UNDERWATER";
    // Get static field: static private System.String kShaderKeyword_GlobalCameraFullyUnderwater
    static ::StringW _get_kShaderKeyword_GlobalCameraFullyUnderwater();
    // Set static field: static private System.String kShaderKeyword_GlobalCameraFullyUnderwater
    static void _set_kShaderKeyword_GlobalCameraFullyUnderwater(::StringW value);
    // Get instance field reference: private UnityEngine.Camera targetCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_targetCamera();
    // Get instance field reference: private UnityEngine.MeshRenderer planeRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_planeRenderer();
    // Get instance field reference: private GorillaLocomotion.Swimming.UnderwaterParticleEffects underwaterParticleEffect
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::UnderwaterParticleEffects*& dyn_underwaterParticleEffect();
    // Get instance field reference: private System.Single distanceFromCamera
    [[deprecated("Use field access instead!")]] float& dyn_distanceFromCamera();
    // Get instance field reference: private System.Boolean debugDraw
    [[deprecated("Use field access instead!")]] bool& dyn_debugDraw();
    // Get instance field reference: private System.Single cachedAspectRatio
    [[deprecated("Use field access instead!")]] float& dyn_cachedAspectRatio();
    // Get instance field reference: private System.Single cachedFov
    [[deprecated("Use field access instead!")]] float& dyn_cachedFov();
    // Get instance field reference: private readonly UnityEngine.Vector3[] frustumPlaneCornersLocal
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_frustumPlaneCornersLocal();
    // Get instance field reference: private UnityEngine.Vector2 frustumPlaneExtents
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_frustumPlaneExtents();
    // Get instance field reference: private GorillaLocomotion.Player player
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Player*& dyn_player();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery waterSurface
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery& dyn_waterSurface();
    // Get instance field reference: private System.Int32 shaderParam_GlobalCameraOverlapWaterSurfacePlane
    [[deprecated("Use field access instead!")]] int& dyn_shaderParam_GlobalCameraOverlapWaterSurfacePlane();
    // Get instance field reference: private System.Boolean hasTargetCamera
    [[deprecated("Use field access instead!")]] bool& dyn_hasTargetCamera();
    // Get instance field reference: private GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState cameraOverlapWaterState
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState& dyn_cameraOverlapWaterState();
    // private System.Void SetOffScreenPosition()
    // Offset: 0x27DEF64
    void SetOffScreenPosition();
    // private System.Void SetFullScreenPosition()
    // Offset: 0x27DEFD8
    void SetFullScreenPosition();
    // private System.Void OnEnable()
    // Offset: 0x27DF040
    void OnEnable();
    // private System.Void Start()
    // Offset: 0x27DF1A0
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0x27DF320
    void LateUpdate();
    // private System.Void InitializeShaderProperties()
    // Offset: 0x27DF0FC
    void InitializeShaderProperties();
    // private System.Void SetCameraOverlapState(GorillaLocomotion.Swimming.UnderwaterCameraEffect/CameraOverlapWaterState state)
    // Offset: 0x27DFDA8
    void SetCameraOverlapState(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState state);
    // private System.Void CalculateFrustumPlaneBounds(System.Single fieldOfView, System.Single aspectRatio)
    // Offset: 0x27DF238
    void CalculateFrustumPlaneBounds(float fieldOfView, float aspectRatio);
    // private System.Boolean IntersectPlanes(UnityEngine.Plane p1, UnityEngine.Plane p2, out UnityEngine.Vector3 point, out UnityEngine.Vector3 direction)
    // Offset: 0x27E0BD8
    bool IntersectPlanes(::UnityEngine::Plane p1, ::UnityEngine::Plane p2, ByRef<::UnityEngine::Vector3> point, ByRef<::UnityEngine::Vector3> direction);
    // private System.Single GetFrustumCoverageDistance(UnityEngine.Vector3 localDirection)
    // Offset: 0x27E0D64
    float GetFrustumCoverageDistance(::UnityEngine::Vector3 localDirection);
    // public System.Void .ctor()
    // Offset: 0x27E0DEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnderwaterCameraEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaLocomotion::Swimming::UnderwaterCameraEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnderwaterCameraEffect*, creationType>()));
    }
  }; // GorillaLocomotion.Swimming.UnderwaterCameraEffect
  #pragma pack(pop)
  static check_size<sizeof(UnderwaterCameraEffect), 132 + sizeof(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState)> __GorillaLocomotion_Swimming_UnderwaterCameraEffectSizeCheck;
  static_assert(sizeof(UnderwaterCameraEffect) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState, "GorillaLocomotion.Swimming", "UnderwaterCameraEffect/CameraOverlapWaterState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::SetOffScreenPosition
// Il2CppName: SetOffScreenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)()>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::SetOffScreenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "SetOffScreenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::SetFullScreenPosition
// Il2CppName: SetFullScreenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)()>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::SetFullScreenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "SetFullScreenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)()>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)()>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)()>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::InitializeShaderProperties
// Il2CppName: InitializeShaderProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)()>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::InitializeShaderProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "InitializeShaderProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::SetCameraOverlapState
// Il2CppName: SetCameraOverlapState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)(::GorillaLocomotion::Swimming::UnderwaterCameraEffect::CameraOverlapWaterState)>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::SetCameraOverlapState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "UnderwaterCameraEffect/CameraOverlapWaterState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "SetCameraOverlapState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::CalculateFrustumPlaneBounds
// Il2CppName: CalculateFrustumPlaneBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)(float, float)>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::CalculateFrustumPlaneBounds)> {
  static const MethodInfo* get() {
    static auto* fieldOfView = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* aspectRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "CalculateFrustumPlaneBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fieldOfView, aspectRatio});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::IntersectPlanes
// Il2CppName: IntersectPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)(::UnityEngine::Plane, ::UnityEngine::Plane, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::IntersectPlanes)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "IntersectPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, point, direction});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::GetFrustumCoverageDistance
// Il2CppName: GetFrustumCoverageDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Swimming::UnderwaterCameraEffect::*)(::UnityEngine::Vector3)>(&GorillaLocomotion::Swimming::UnderwaterCameraEffect::GetFrustumCoverageDistance)> {
  static const MethodInfo* get() {
    static auto* localDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Swimming::UnderwaterCameraEffect*), "GetFrustumCoverageDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localDirection});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Swimming::UnderwaterCameraEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
