// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.ContactPoint
#include "UnityEngine/ContactPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GorillaLocomotion::Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterVolume
  class WaterVolume;
  // Forward declaring type: PlayerSwimmingParameters
  class PlayerSwimmingParameters;
  // Forward declaring type: WaterParameters
  class WaterParameters;
  // Forward declaring type: WaterCurrent
  class WaterCurrent;
}
// Forward declaring namespace: GorillaLocomotion
namespace GorillaLocomotion {
  // Skipping declaration: MaterialData because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: CapsuleCollider
  class CapsuleCollider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MeshCollider
  class MeshCollider;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: ForceMode
  struct ForceMode;
  // Forward declaring type: Collision
  class Collision;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GorillaLocomotion::Climbing
namespace GorillaLocomotion::Climbing {
  // Forward declaring type: GorillaVelocityTracker
  class GorillaVelocityTracker;
  // Forward declaring type: GorillaClimbable
  class GorillaClimbable;
  // Forward declaring type: GorillaHandClimber
  class GorillaHandClimber;
  // Forward declaring type: GorillaClimbableRef
  class GorillaClimbableRef;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerAudioManager
  class PlayerAudioManager;
  // Forward declaring type: GorillaSurfaceOverride
  class GorillaSurfaceOverride;
  // Forward declaring type: BasePlatform
  class BasePlatform;
  // Forward declaring type: ConnectedControllerHandler
  class ConnectedControllerHandler;
}
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: MaterialDatasSO
  class MaterialDatasSO;
}
// Forward declaring namespace: GorillaLocomotion::Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: GorillaRopeSwing
  class GorillaRopeSwing;
  // Forward declaring type: GorillaZipline
  class GorillaZipline;
}
// Completed forward declares
// Type namespace: GorillaLocomotion
namespace GorillaLocomotion {
  // Forward declaring type: Player
  class Player;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaLocomotion::Player);
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Player*, "GorillaLocomotion", "Player");
// Type namespace: GorillaLocomotion
namespace GorillaLocomotion {
  // Size: 0x78A
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLocomotion.Player
  // [TokenAttribute] Offset: FFFFFFFF
  class Player : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaLocomotion::Player::MaterialData
    struct MaterialData;
    // Nested type: ::GorillaLocomotion::Player::LiquidProperties
    struct LiquidProperties;
    // Nested type: ::GorillaLocomotion::Player::LiquidType
    struct LiquidType;
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaLocomotion.Player/MaterialData
    // [TokenAttribute] Offset: FFFFFFFF
    struct MaterialData/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String matName
      // Size: 0x8
      // Offset: 0x0
      ::StringW matName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Boolean overrideAudio
      // Size: 0x1
      // Offset: 0x8
      bool overrideAudio;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: overrideAudio and: audio
      char __padding1[0x7] = {};
      // public UnityEngine.AudioClip audio
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::AudioClip* audio;
      // Field size check
      static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
      // public System.Boolean overrideSlidePercent
      // Size: 0x1
      // Offset: 0x18
      bool overrideSlidePercent;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: overrideSlidePercent and: slidePercent
      char __padding3[0x3] = {};
      // public System.Single slidePercent
      // Size: 0x4
      // Offset: 0x1C
      float slidePercent;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: MaterialData
      constexpr MaterialData(::StringW matName_ = {}, bool overrideAudio_ = {}, ::UnityEngine::AudioClip* audio_ = {}, bool overrideSlidePercent_ = {}, float slidePercent_ = {}) noexcept : matName{matName_}, overrideAudio{overrideAudio_}, audio{audio_}, overrideSlidePercent{overrideSlidePercent_}, slidePercent{slidePercent_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String matName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_matName();
      // Get instance field reference: public System.Boolean overrideAudio
      [[deprecated("Use field access instead!")]] bool& dyn_overrideAudio();
      // Get instance field reference: public UnityEngine.AudioClip audio
      [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_audio();
      // Get instance field reference: public System.Boolean overrideSlidePercent
      [[deprecated("Use field access instead!")]] bool& dyn_overrideSlidePercent();
      // Get instance field reference: public System.Single slidePercent
      [[deprecated("Use field access instead!")]] float& dyn_slidePercent();
    }; // GorillaLocomotion.Player/MaterialData
    #pragma pack(pop)
    static check_size<sizeof(Player::MaterialData), 28 + sizeof(float)> __GorillaLocomotion_Player_MaterialDataSizeCheck;
    static_assert(sizeof(Player::MaterialData) == 0x20);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaLocomotion.Player/LiquidProperties
    // [TokenAttribute] Offset: FFFFFFFF
    struct LiquidProperties/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single resistance
      // Size: 0x4
      // Offset: 0x0
      float resistance;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single buoyancy
      // Size: 0x4
      // Offset: 0x4
      float buoyancy;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single dampingFactor
      // Size: 0x4
      // Offset: 0x8
      float dampingFactor;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single surfaceJumpFactor
      // Size: 0x4
      // Offset: 0xC
      float surfaceJumpFactor;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: LiquidProperties
      constexpr LiquidProperties(float resistance_ = {}, float buoyancy_ = {}, float dampingFactor_ = {}, float surfaceJumpFactor_ = {}) noexcept : resistance{resistance_}, buoyancy{buoyancy_}, dampingFactor{dampingFactor_}, surfaceJumpFactor{surfaceJumpFactor_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single resistance
      [[deprecated("Use field access instead!")]] float& dyn_resistance();
      // Get instance field reference: public System.Single buoyancy
      [[deprecated("Use field access instead!")]] float& dyn_buoyancy();
      // Get instance field reference: public System.Single dampingFactor
      [[deprecated("Use field access instead!")]] float& dyn_dampingFactor();
      // Get instance field reference: public System.Single surfaceJumpFactor
      [[deprecated("Use field access instead!")]] float& dyn_surfaceJumpFactor();
    }; // GorillaLocomotion.Player/LiquidProperties
    #pragma pack(pop)
    static check_size<sizeof(Player::LiquidProperties), 12 + sizeof(float)> __GorillaLocomotion_Player_LiquidPropertiesSizeCheck;
    static_assert(sizeof(Player::LiquidProperties) == 0x10);
    public:
    // public UnityEngine.SphereCollider headCollider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::SphereCollider* headCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::SphereCollider*) == 0x8);
    // public UnityEngine.CapsuleCollider bodyCollider
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::CapsuleCollider* bodyCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::CapsuleCollider*) == 0x8);
    // private System.Single bodyInitialRadius
    // Size: 0x4
    // Offset: 0x30
    float bodyInitialRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single bodyInitialHeight
    // Size: 0x4
    // Offset: 0x34
    float bodyInitialHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.RaycastHit bodyHitInfo
    // Size: 0x2C
    // Offset: 0x38
    ::UnityEngine::RaycastHit bodyHitInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private UnityEngine.RaycastHit lastHitInfoHand
    // Size: 0x2C
    // Offset: 0x64
    ::UnityEngine::RaycastHit lastHitInfoHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // public UnityEngine.Transform leftHandFollower
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Transform* leftHandFollower;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightHandFollower
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Transform* rightHandFollower;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightControllerTransform
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Transform* rightControllerTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftControllerTransform
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Transform* leftControllerTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public GorillaLocomotion.Climbing.GorillaVelocityTracker rightHandCenterVelocityTracker
    // Size: 0x8
    // Offset: 0xB0
    ::GorillaLocomotion::Climbing::GorillaVelocityTracker* rightHandCenterVelocityTracker;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaVelocityTracker*) == 0x8);
    // public GorillaLocomotion.Climbing.GorillaVelocityTracker leftHandCenterVelocityTracker
    // Size: 0x8
    // Offset: 0xB8
    ::GorillaLocomotion::Climbing::GorillaVelocityTracker* leftHandCenterVelocityTracker;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaVelocityTracker*) == 0x8);
    // public GorillaLocomotion.Climbing.GorillaVelocityTracker rightInteractPointVelocityTracker
    // Size: 0x8
    // Offset: 0xC0
    ::GorillaLocomotion::Climbing::GorillaVelocityTracker* rightInteractPointVelocityTracker;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaVelocityTracker*) == 0x8);
    // public GorillaLocomotion.Climbing.GorillaVelocityTracker leftInteractPointVelocityTracker
    // Size: 0x8
    // Offset: 0xC8
    ::GorillaLocomotion::Climbing::GorillaVelocityTracker* leftInteractPointVelocityTracker;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaVelocityTracker*) == 0x8);
    // public GorillaLocomotion.Climbing.GorillaVelocityTracker bodyVelocityTracker
    // Size: 0x8
    // Offset: 0xD0
    ::GorillaLocomotion::Climbing::GorillaVelocityTracker* bodyVelocityTracker;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaVelocityTracker*) == 0x8);
    // public PlayerAudioManager audioManager
    // Size: 0x8
    // Offset: 0xD8
    ::GlobalNamespace::PlayerAudioManager* audioManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerAudioManager*) == 0x8);
    // private UnityEngine.Vector3 lastLeftHandPosition
    // Size: 0xC
    // Offset: 0xE0
    ::UnityEngine::Vector3 lastLeftHandPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastRightHandPosition
    // Size: 0xC
    // Offset: 0xEC
    ::UnityEngine::Vector3 lastRightHandPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 lastHeadPosition
    // Size: 0xC
    // Offset: 0xF8
    ::UnityEngine::Vector3 lastHeadPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastRigidbodyPosition
    // Size: 0xC
    // Offset: 0x104
    ::UnityEngine::Vector3 lastRigidbodyPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Rigidbody playerRigidBody
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Rigidbody* playerRigidBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Camera mainCamera
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Camera* mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public System.Int32 velocityHistorySize
    // Size: 0x4
    // Offset: 0x120
    int velocityHistorySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single maxArmLength
    // Size: 0x4
    // Offset: 0x124
    float maxArmLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single unStickDistance
    // Size: 0x4
    // Offset: 0x128
    float unStickDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single velocityLimit
    // Size: 0x4
    // Offset: 0x12C
    float velocityLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slideVelocityLimit
    // Size: 0x4
    // Offset: 0x130
    float slideVelocityLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxJumpSpeed
    // Size: 0x4
    // Offset: 0x134
    float maxJumpSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single jumpMultiplier
    // Size: 0x4
    // Offset: 0x138
    float jumpMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minimumRaycastDistance
    // Size: 0x4
    // Offset: 0x13C
    float minimumRaycastDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single defaultSlideFactor
    // Size: 0x4
    // Offset: 0x140
    float defaultSlideFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slidingMinimum
    // Size: 0x4
    // Offset: 0x144
    float slidingMinimum;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single defaultPrecision
    // Size: 0x4
    // Offset: 0x148
    float defaultPrecision;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single teleportThresholdNoVel
    // Size: 0x4
    // Offset: 0x14C
    float teleportThresholdNoVel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single frictionConstant
    // Size: 0x4
    // Offset: 0x150
    float frictionConstant;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slideControl
    // Size: 0x4
    // Offset: 0x154
    float slideControl;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stickDepth
    // Size: 0x4
    // Offset: 0x158
    float stickDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: stickDepth and: velocityHistory
    char __padding36[0x4] = {};
    // private UnityEngine.Vector3[] velocityHistory
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<::UnityEngine::Vector3> velocityHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] slideAverageHistory
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<::UnityEngine::Vector3> slideAverageHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32 velocityIndex
    // Size: 0x4
    // Offset: 0x170
    int velocityIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 currentVelocity
    // Size: 0xC
    // Offset: 0x174
    ::UnityEngine::Vector3 currentVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 denormalizedVelocityAverage
    // Size: 0xC
    // Offset: 0x180
    ::UnityEngine::Vector3 denormalizedVelocityAverage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastPosition
    // Size: 0xC
    // Offset: 0x18C
    ::UnityEngine::Vector3 lastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rightHandOffset
    // Size: 0xC
    // Offset: 0x198
    ::UnityEngine::Vector3 rightHandOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 leftHandOffset
    // Size: 0xC
    // Offset: 0x1A4
    ::UnityEngine::Vector3 leftHandOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rightHandRotOffset
    // Size: 0x10
    // Offset: 0x1B0
    ::UnityEngine::Quaternion rightHandRotOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion leftHandRotOffset
    // Size: 0x10
    // Offset: 0x1C0
    ::UnityEngine::Quaternion leftHandRotOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 bodyOffset
    // Size: 0xC
    // Offset: 0x1D0
    ::UnityEngine::Vector3 bodyOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.LayerMask locomotionEnabledLayers
    // Size: 0x4
    // Offset: 0x1DC
    ::UnityEngine::LayerMask locomotionEnabledLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.LayerMask waterLayer
    // Size: 0x4
    // Offset: 0x1E0
    ::UnityEngine::LayerMask waterLayer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Boolean wasLeftHandTouching
    // Size: 0x1
    // Offset: 0x1E4
    bool wasLeftHandTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean wasRightHandTouching
    // Size: 0x1
    // Offset: 0x1E5
    bool wasRightHandTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean wasHeadTouching
    // Size: 0x1
    // Offset: 0x1E6
    bool wasHeadTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasHeadTouching and: currentMaterialIndex
    char __padding52[0x1] = {};
    // public System.Int32 currentMaterialIndex
    // Size: 0x4
    // Offset: 0x1E8
    int currentMaterialIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean leftHandSlide
    // Size: 0x1
    // Offset: 0x1EC
    bool leftHandSlide;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: leftHandSlide and: leftHandSlideNormal
    char __padding54[0x3] = {};
    // public UnityEngine.Vector3 leftHandSlideNormal
    // Size: 0xC
    // Offset: 0x1F0
    ::UnityEngine::Vector3 leftHandSlideNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean rightHandSlide
    // Size: 0x1
    // Offset: 0x1FC
    bool rightHandSlide;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rightHandSlide and: rightHandSlideNormal
    char __padding56[0x3] = {};
    // public UnityEngine.Vector3 rightHandSlideNormal
    // Size: 0xC
    // Offset: 0x200
    ::UnityEngine::Vector3 rightHandSlideNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 headSlideNormal
    // Size: 0xC
    // Offset: 0x20C
    ::UnityEngine::Vector3 headSlideNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single rightHandSlipPercentage
    // Size: 0x4
    // Offset: 0x218
    float rightHandSlipPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single leftHandSlipPercentage
    // Size: 0x4
    // Offset: 0x21C
    float leftHandSlipPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single headSlipPercentage
    // Size: 0x4
    // Offset: 0x220
    float headSlipPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean wasLeftHandSlide
    // Size: 0x1
    // Offset: 0x224
    bool wasLeftHandSlide;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean wasRightHandSlide
    // Size: 0x1
    // Offset: 0x225
    bool wasRightHandSlide;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasRightHandSlide and: rightHandHitPoint
    char __padding63[0x2] = {};
    // public UnityEngine.Vector3 rightHandHitPoint
    // Size: 0xC
    // Offset: 0x228
    ::UnityEngine::Vector3 rightHandHitPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 leftHandHitPoint
    // Size: 0xC
    // Offset: 0x234
    ::UnityEngine::Vector3 leftHandHitPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single scale
    // Size: 0x4
    // Offset: 0x240
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean debugMovement
    // Size: 0x1
    // Offset: 0x244
    bool debugMovement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableMovement
    // Size: 0x1
    // Offset: 0x245
    bool disableMovement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean inOverlay
    // Size: 0x1
    // Offset: 0x246
    bool inOverlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isUserPresent
    // Size: 0x1
    // Offset: 0x247
    bool isUserPresent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.GameObject turnParent
    // Size: 0x8
    // Offset: 0x248
    ::UnityEngine::GameObject* turnParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 leftHandMaterialTouchIndex
    // Size: 0x4
    // Offset: 0x250
    int leftHandMaterialTouchIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: leftHandMaterialTouchIndex and: leftHandSurfaceOverride
    char __padding72[0x4] = {};
    // public GorillaSurfaceOverride leftHandSurfaceOverride
    // Size: 0x8
    // Offset: 0x258
    ::GlobalNamespace::GorillaSurfaceOverride* leftHandSurfaceOverride;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSurfaceOverride*) == 0x8);
    // public System.Int32 rightHandMaterialTouchIndex
    // Size: 0x4
    // Offset: 0x260
    int rightHandMaterialTouchIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: rightHandMaterialTouchIndex and: rightHandSurfaceOverride
    char __padding74[0x4] = {};
    // public GorillaSurfaceOverride rightHandSurfaceOverride
    // Size: 0x8
    // Offset: 0x268
    ::GlobalNamespace::GorillaSurfaceOverride* rightHandSurfaceOverride;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSurfaceOverride*) == 0x8);
    // public GorillaSurfaceOverride currentOverride
    // Size: 0x8
    // Offset: 0x270
    ::GlobalNamespace::GorillaSurfaceOverride* currentOverride;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSurfaceOverride*) == 0x8);
    // public GorillaTag.MaterialDatasSO materialDatasSO
    // Size: 0x8
    // Offset: 0x278
    ::GorillaTag::MaterialDatasSO* materialDatasSO;
    // Field size check
    static_assert(sizeof(::GorillaTag::MaterialDatasSO*) == 0x8);
    // private System.Boolean leftHandColliding
    // Size: 0x1
    // Offset: 0x280
    bool leftHandColliding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean rightHandColliding
    // Size: 0x1
    // Offset: 0x281
    bool rightHandColliding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean headColliding
    // Size: 0x1
    // Offset: 0x282
    bool headColliding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: headColliding and: degreesTurnedThisFrame
    char __padding80[0x1] = {};
    // private System.Single degreesTurnedThisFrame
    // Size: 0x4
    // Offset: 0x284
    float degreesTurnedThisFrame;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 finalPosition
    // Size: 0xC
    // Offset: 0x288
    ::UnityEngine::Vector3 finalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 rigidBodyMovement
    // Size: 0xC
    // Offset: 0x294
    ::UnityEngine::Vector3 rigidBodyMovement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 leftHandPushDisplacement
    // Size: 0xC
    // Offset: 0x2A0
    ::UnityEngine::Vector3 leftHandPushDisplacement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 rightHandPushDisplacement
    // Size: 0xC
    // Offset: 0x2AC
    ::UnityEngine::Vector3 rightHandPushDisplacement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.RaycastHit hitInfo
    // Size: 0x2C
    // Offset: 0x2B8
    ::UnityEngine::RaycastHit hitInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private UnityEngine.RaycastHit iterativeHitInfo
    // Size: 0x2C
    // Offset: 0x2E4
    ::UnityEngine::RaycastHit iterativeHitInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private UnityEngine.RaycastHit collisionsInnerHit
    // Size: 0x2C
    // Offset: 0x310
    ::UnityEngine::RaycastHit collisionsInnerHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private System.Single slipPercentage
    // Size: 0x4
    // Offset: 0x33C
    float slipPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 bodyOffsetVector
    // Size: 0xC
    // Offset: 0x340
    ::UnityEngine::Vector3 bodyOffsetVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 distanceTraveled
    // Size: 0xC
    // Offset: 0x34C
    ::UnityEngine::Vector3 distanceTraveled;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 movementToProjectedAboveCollisionPlane
    // Size: 0xC
    // Offset: 0x358
    ::UnityEngine::Vector3 movementToProjectedAboveCollisionPlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: movementToProjectedAboveCollisionPlane and: meshCollider
    char __padding92[0x4] = {};
    // private UnityEngine.MeshCollider meshCollider
    // Size: 0x8
    // Offset: 0x368
    ::UnityEngine::MeshCollider* meshCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshCollider*) == 0x8);
    // private UnityEngine.Mesh collidedMesh
    // Size: 0x8
    // Offset: 0x370
    ::UnityEngine::Mesh* collidedMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private GorillaLocomotion.Player/MaterialData foundMatData
    // Size: 0x20
    // Offset: 0x378
    ::GorillaLocomotion::Player::MaterialData foundMatData;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Player::MaterialData) == 0x20);
    // private System.String findMatName
    // Size: 0x8
    // Offset: 0x398
    ::StringW findMatName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 vertex1
    // Size: 0x4
    // Offset: 0x3A0
    int vertex1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 vertex2
    // Size: 0x4
    // Offset: 0x3A4
    int vertex2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 vertex3
    // Size: 0x4
    // Offset: 0x3A8
    int vertex3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: vertex3 and: trianglesList
    char __padding99[0x4] = {};
    // private System.Collections.Generic.List`1<System.Int32> trianglesList
    // Size: 0x8
    // Offset: 0x3B0
    ::System::Collections::Generic::List_1<int>* trianglesList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Mesh,System.Int32[]> meshTrianglesDict
    // Size: 0x8
    // Offset: 0x3B8
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, ::ArrayW<int>>* meshTrianglesDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, ::ArrayW<int>>*) == 0x8);
    // private System.Int32[] sharedMeshTris
    // Size: 0x8
    // Offset: 0x3C0
    ::ArrayW<int> sharedMeshTris;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Single lastRealTime
    // Size: 0x4
    // Offset: 0x3C8
    float lastRealTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single calcDeltaTime
    // Size: 0x4
    // Offset: 0x3CC
    float calcDeltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tempRealTime
    // Size: 0x4
    // Offset: 0x3D0
    float tempRealTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 junkNormal
    // Size: 0xC
    // Offset: 0x3D4
    ::UnityEngine::Vector3 junkNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 slideAverage
    // Size: 0xC
    // Offset: 0x3E0
    ::UnityEngine::Vector3 slideAverage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 slideAverageNormal
    // Size: 0xC
    // Offset: 0x3EC
    ::UnityEngine::Vector3 slideAverageNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 tempVector3
    // Size: 0xC
    // Offset: 0x3F8
    ::UnityEngine::Vector3 tempVector3;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.RaycastHit tempHitInfo
    // Size: 0x2C
    // Offset: 0x404
    ::UnityEngine::RaycastHit tempHitInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private UnityEngine.RaycastHit junkHit
    // Size: 0x2C
    // Offset: 0x430
    ::UnityEngine::RaycastHit junkHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private UnityEngine.Vector3 firstPosition
    // Size: 0xC
    // Offset: 0x45C
    ::UnityEngine::Vector3 firstPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.RaycastHit tempIterativeHit
    // Size: 0x2C
    // Offset: 0x468
    ::UnityEngine::RaycastHit tempIterativeHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private System.Boolean collisionsReturnBool
    // Size: 0x1
    // Offset: 0x494
    bool collisionsReturnBool;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: collisionsReturnBool and: overlapRadiusFunction
    char __padding114[0x3] = {};
    // private System.Single overlapRadiusFunction
    // Size: 0x4
    // Offset: 0x498
    float overlapRadiusFunction;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxSphereSize1
    // Size: 0x4
    // Offset: 0x49C
    float maxSphereSize1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxSphereSize2
    // Size: 0x4
    // Offset: 0x4A0
    float maxSphereSize2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxSphereSize2 and: overlapColliders
    char __padding117[0x4] = {};
    // private UnityEngine.Collider[] overlapColliders
    // Size: 0x8
    // Offset: 0x4A8
    ::ArrayW<::UnityEngine::Collider*> overlapColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Int32 overlapAttempts
    // Size: 0x4
    // Offset: 0x4B0
    int overlapAttempts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 touchPoints
    // Size: 0x4
    // Offset: 0x4B4
    int touchPoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single averageSlipPercentage
    // Size: 0x4
    // Offset: 0x4B8
    float averageSlipPercentage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 surfaceDirection
    // Size: 0xC
    // Offset: 0x4BC
    ::UnityEngine::Vector3 surfaceDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single iceThreshold
    // Size: 0x4
    // Offset: 0x4C8
    float iceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single bodyMaxRadius
    // Size: 0x4
    // Offset: 0x4CC
    float bodyMaxRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bodyLerp
    // Size: 0x4
    // Offset: 0x4D0
    float bodyLerp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean areBothTouching
    // Size: 0x1
    // Offset: 0x4D4
    bool areBothTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: areBothTouching and: slideFactor
    char __padding126[0x3] = {};
    // private System.Single slideFactor
    // Size: 0x4
    // Offset: 0x4D8
    float slideFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean didAJump
    // Size: 0x1
    // Offset: 0x4DC
    bool didAJump;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: didAJump and: slideRenderer
    char __padding128[0x3] = {};
    // private UnityEngine.Renderer slideRenderer
    // Size: 0x8
    // Offset: 0x4E0
    ::UnityEngine::Renderer* slideRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.RaycastHit[] rayCastNonAllocColliders
    // Size: 0x8
    // Offset: 0x4E8
    ::ArrayW<::UnityEngine::RaycastHit> rayCastNonAllocColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.Vector3[] crazyCheckVectors
    // Size: 0x8
    // Offset: 0x4F0
    ::ArrayW<::UnityEngine::Vector3> crazyCheckVectors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.RaycastHit emptyHit
    // Size: 0x2C
    // Offset: 0x4F8
    ::UnityEngine::RaycastHit emptyHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private System.Int32 bufferCount
    // Size: 0x4
    // Offset: 0x524
    int bufferCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 lastOpenHeadPosition
    // Size: 0xC
    // Offset: 0x528
    ::UnityEngine::Vector3 lastOpenHeadPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: lastOpenHeadPosition and: tempMaterialArray
    char __padding134[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Material> tempMaterialArray
    // Size: 0x8
    // Offset: 0x538
    ::System::Collections::Generic::List_1<::UnityEngine::Material*>* tempMaterialArray;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Material*>*) == 0x8);
    // private System.Int32 leftSlipSetToMaxFrameIdx
    // Size: 0x4
    // Offset: 0x540
    int leftSlipSetToMaxFrameIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 rightSlipSetToMaxFrameIdx
    // Size: 0x4
    // Offset: 0x544
    int rightSlipSetToMaxFrameIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public GorillaLocomotion.Swimming.PlayerSwimmingParameters swimmingParams
    // Size: 0x8
    // Offset: 0x548
    ::GorillaLocomotion::Swimming::PlayerSwimmingParameters* swimmingParams;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::PlayerSwimmingParameters*) == 0x8);
    // public GorillaLocomotion.Swimming.WaterParameters waterParams
    // Size: 0x8
    // Offset: 0x550
    ::GorillaLocomotion::Swimming::WaterParameters* waterParams;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterParameters*) == 0x8);
    // public System.Collections.Generic.List`1<GorillaLocomotion.Player/LiquidProperties> liquidPropertiesList
    // Size: 0x8
    // Offset: 0x558
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Player::LiquidProperties>* liquidPropertiesList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaLocomotion::Player::LiquidProperties>*) == 0x8);
    // public System.Boolean debugDrawSwimming
    // Size: 0x1
    // Offset: 0x560
    bool debugDrawSwimming;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugDrawSwimming and: wizardStaffSlamEffects
    char __padding141[0x7] = {};
    // public UnityEngine.GameObject wizardStaffSlamEffects
    // Size: 0x8
    // Offset: 0x568
    ::UnityEngine::GameObject* wizardStaffSlamEffects;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject geodeHitEffects
    // Size: 0x8
    // Offset: 0x570
    ::UnityEngine::GameObject* geodeHitEffects;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private GorillaLocomotion.Swimming.WaterVolume leftHandWaterVolume
    // Size: 0x8
    // Offset: 0x578
    ::GorillaLocomotion::Swimming::WaterVolume* leftHandWaterVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    // private GorillaLocomotion.Swimming.WaterVolume rightHandWaterVolume
    // Size: 0x8
    // Offset: 0x580
    ::GorillaLocomotion::Swimming::WaterVolume* rightHandWaterVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    // private GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery leftHandWaterSurface
    // Size: 0x1C
    // Offset: 0x588
    ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery leftHandWaterSurface;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery) == 0x1C);
    // private GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery rightHandWaterSurface
    // Size: 0x1C
    // Offset: 0x5A4
    ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery rightHandWaterSurface;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery) == 0x1C);
    // private UnityEngine.Vector3 swimmingVelocity
    // Size: 0xC
    // Offset: 0x5C0
    ::UnityEngine::Vector3 swimmingVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery waterSurfaceForHead
    // Size: 0x1C
    // Offset: 0x5CC
    ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery waterSurfaceForHead;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery) == 0x1C);
    // private System.Boolean bodyInWater
    // Size: 0x1
    // Offset: 0x5E8
    bool bodyInWater;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean headInWater
    // Size: 0x1
    // Offset: 0x5E9
    bool headInWater;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: headInWater and: buoyancyExtension
    char __padding151[0x2] = {};
    // private System.Single buoyancyExtension
    // Size: 0x4
    // Offset: 0x5EC
    float buoyancyExtension;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastWaterSurfaceJumpTimeLeft
    // Size: 0x4
    // Offset: 0x5F0
    float lastWaterSurfaceJumpTimeLeft;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastWaterSurfaceJumpTimeRight
    // Size: 0x4
    // Offset: 0x5F4
    float lastWaterSurfaceJumpTimeRight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single waterSurfaceJumpCooldown
    // Size: 0x4
    // Offset: 0x5F8
    float waterSurfaceJumpCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single leftHandNonDiveHapticsAmount
    // Size: 0x4
    // Offset: 0x5FC
    float leftHandNonDiveHapticsAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single rightHandNonDiveHapticsAmount
    // Size: 0x4
    // Offset: 0x600
    float rightHandNonDiveHapticsAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: rightHandNonDiveHapticsAmount and: headOverlappingWaterVolumes
    char __padding157[0x4] = {};
    // private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterVolume> headOverlappingWaterVolumes
    // Size: 0x8
    // Offset: 0x608
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>* headOverlappingWaterVolumes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>*) == 0x8);
    // private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterVolume> bodyOverlappingWaterVolumes
    // Size: 0x8
    // Offset: 0x610
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>* bodyOverlappingWaterVolumes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>*) == 0x8);
    // private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterCurrent> activeWaterCurrents
    // Size: 0x8
    // Offset: 0x618
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterCurrent*>* activeWaterCurrents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterCurrent*>*) == 0x8);
    // private UnityEngine.Quaternion playerRotationOverride
    // Size: 0x10
    // Offset: 0x620
    ::UnityEngine::Quaternion playerRotationOverride;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Int32 playerRotationOverrideFrame
    // Size: 0x4
    // Offset: 0x630
    int playerRotationOverrideFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single playerRotationOverrideDecayRate
    // Size: 0x4
    // Offset: 0x634
    float playerRotationOverrideDecayRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.ContactPoint[] bodyCollisionContacts
    // Size: 0x8
    // Offset: 0x638
    ::ArrayW<::UnityEngine::ContactPoint> bodyCollisionContacts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ContactPoint>) == 0x8);
    // private System.Int32 bodyCollisionContactsCount
    // Size: 0x4
    // Offset: 0x640
    int bodyCollisionContactsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.ContactPoint bodyGroundContact
    // Size: 0x30
    // Offset: 0x644
    ::UnityEngine::ContactPoint bodyGroundContact;
    // Field size check
    static_assert(sizeof(::UnityEngine::ContactPoint) == 0x30);
    // private System.Single bodyGroundContactTime
    // Size: 0x4
    // Offset: 0x674
    float bodyGroundContactTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private BasePlatform currentPlatform
    // Size: 0x8
    // Offset: 0x678
    ::GlobalNamespace::BasePlatform* currentPlatform;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasePlatform*) == 0x8);
    // private BasePlatform lastPlatformTouched
    // Size: 0x8
    // Offset: 0x680
    ::GlobalNamespace::BasePlatform* lastPlatformTouched;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasePlatform*) == 0x8);
    // private UnityEngine.Vector3 lastFrameTouchPosLocal
    // Size: 0xC
    // Offset: 0x688
    ::UnityEngine::Vector3 lastFrameTouchPosLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastFrameTouchPosWorld
    // Size: 0xC
    // Offset: 0x694
    ::UnityEngine::Vector3 lastFrameTouchPosWorld;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean lastFrameHasValidTouchPos
    // Size: 0x1
    // Offset: 0x6A0
    bool lastFrameHasValidTouchPos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lastFrameHasValidTouchPos and: refMovement
    char __padding172[0x3] = {};
    // private UnityEngine.Vector3 refMovement
    // Size: 0xC
    // Offset: 0x6A4
    ::UnityEngine::Vector3 refMovement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 platformTouchOffset
    // Size: 0xC
    // Offset: 0x6B0
    ::UnityEngine::Vector3 platformTouchOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 debugLastRightHandPosition
    // Size: 0xC
    // Offset: 0x6BC
    ::UnityEngine::Vector3 debugLastRightHandPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 debugPlatformDeltaPosition
    // Size: 0xC
    // Offset: 0x6C8
    ::UnityEngine::Vector3 debugPlatformDeltaPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single velocityThrowClimbingMultiplier
    // Size: 0x4
    // Offset: 0x6D4
    float velocityThrowClimbingMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single climbingMaxThrowMagnitude
    // Size: 0x4
    // Offset: 0x6D8
    float climbingMaxThrowMagnitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isClimbing
    // Size: 0x1
    // Offset: 0x6DC
    bool isClimbing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isClimbing and: currentClimbable
    char __padding179[0x3] = {};
    // private GorillaLocomotion.Climbing.GorillaClimbable currentClimbable
    // Size: 0x8
    // Offset: 0x6E0
    ::GorillaLocomotion::Climbing::GorillaClimbable* currentClimbable;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaClimbable*) == 0x8);
    // private GorillaLocomotion.Climbing.GorillaHandClimber currentClimber
    // Size: 0x8
    // Offset: 0x6E8
    ::GorillaLocomotion::Climbing::GorillaHandClimber* currentClimber;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Climbing::GorillaHandClimber*) == 0x8);
    // private UnityEngine.Vector3 climbHelperTargetPos
    // Size: 0xC
    // Offset: 0x6F0
    ::UnityEngine::Vector3 climbHelperTargetPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: climbHelperTargetPos and: climbHelper
    char __padding182[0x4] = {};
    // private UnityEngine.Transform climbHelper
    // Size: 0x8
    // Offset: 0x700
    ::UnityEngine::Transform* climbHelper;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaLocomotion.Gameplay.GorillaRopeSwing currentSwing
    // Size: 0x8
    // Offset: 0x708
    ::GorillaLocomotion::Gameplay::GorillaRopeSwing* currentSwing;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Gameplay::GorillaRopeSwing*) == 0x8);
    // private GorillaLocomotion.Gameplay.GorillaZipline currentZipline
    // Size: 0x8
    // Offset: 0x710
    ::GorillaLocomotion::Gameplay::GorillaZipline* currentZipline;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Gameplay::GorillaZipline*) == 0x8);
    // private ConnectedControllerHandler controllerState
    // Size: 0x8
    // Offset: 0x718
    ::GlobalNamespace::ConnectedControllerHandler* controllerState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ConnectedControllerHandler*) == 0x8);
    // public System.Int32 sizeLayerMask
    // Size: 0x4
    // Offset: 0x720
    int sizeLayerMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean InReportMenu
    // Size: 0x1
    // Offset: 0x724
    bool InReportMenu;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InReportMenu and: halloweenLevitationStrength
    char __padding188[0x3] = {};
    // private System.Single halloweenLevitationStrength
    // Size: 0x4
    // Offset: 0x728
    float halloweenLevitationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single halloweenLevitationFullStrengthDuration
    // Size: 0x4
    // Offset: 0x72C
    float halloweenLevitationFullStrengthDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single halloweenLevitationTotalDuration
    // Size: 0x4
    // Offset: 0x730
    float halloweenLevitationTotalDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single halloweenLevitationBonusStrength
    // Size: 0x4
    // Offset: 0x734
    float halloweenLevitationBonusStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single halloweenLevitateBonusOffAtYSpeed
    // Size: 0x4
    // Offset: 0x738
    float halloweenLevitateBonusOffAtYSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single halloweenLevitateBonusFullAtYSpeed
    // Size: 0x4
    // Offset: 0x73C
    float halloweenLevitateBonusFullAtYSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastTouchedGroundTimestamp
    // Size: 0x4
    // Offset: 0x740
    float lastTouchedGroundTimestamp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean teleportToTrain
    // Size: 0x1
    // Offset: 0x744
    bool teleportToTrain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isAttachedToTrain
    // Size: 0x1
    // Offset: 0x745
    bool isAttachedToTrain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean stuckLeft
    // Size: 0x1
    // Offset: 0x746
    bool stuckLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean stuckRight
    // Size: 0x1
    // Offset: 0x747
    bool stuckRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single lastScale
    // Size: 0x4
    // Offset: 0x748
    float lastScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastScale and: handHolds
    char __padding200[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Transform> handHolds
    // Size: 0x8
    // Offset: 0x750
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* handHolds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Transform> handHoldGrabbers
    // Size: 0x8
    // Offset: 0x758
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Transform*>* handHoldGrabbers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Transform*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Vector3> handHoldPositions
    // Size: 0x8
    // Offset: 0x760
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>* handHoldPositions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Quaternion> handHoldRotations
    // Size: 0x8
    // Offset: 0x768
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Quaternion>* handHoldRotations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Quaternion>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Vector3> handHoldVelocities
    // Size: 0x8
    // Offset: 0x770
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>* handHoldVelocities;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Vector3> attachedPosition
    // Size: 0x8
    // Offset: 0x778
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>* attachedPosition;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Vector3> attachedPrevPosition
    // Size: 0x8
    // Offset: 0x780
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>* attachedPrevPosition;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>*) == 0x8);
    // private System.Boolean rightHandHolding
    // Size: 0x1
    // Offset: 0x788
    bool rightHandHolding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean leftHandHolding
    // Size: 0x1
    // Offset: 0x789
    bool leftHandHolding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private GorillaLocomotion.Player _instance
    static ::GorillaLocomotion::Player* _get__instance();
    // Set static field: static private GorillaLocomotion.Player _instance
    static void _set__instance(::GorillaLocomotion::Player* value);
    // Get static field: static public System.Boolean hasInstance
    static bool _get_hasInstance();
    // Set static field: static public System.Boolean hasInstance
    static void _set_hasInstance(bool value);
    // static field const value: static private System.Single CameraFarClipDefault
    static constexpr const float CameraFarClipDefault = 500;
    // Get static field: static private System.Single CameraFarClipDefault
    static float _get_CameraFarClipDefault();
    // Set static field: static private System.Single CameraFarClipDefault
    static void _set_CameraFarClipDefault(float value);
    // static field const value: static private System.Single CameraNearClipDefault
    static constexpr const float CameraNearClipDefault = 0.01;
    // Get static field: static private System.Single CameraNearClipDefault
    static float _get_CameraNearClipDefault();
    // Set static field: static private System.Single CameraNearClipDefault
    static void _set_CameraNearClipDefault(float value);
    // static field const value: static private System.Single CameraNearClipTiny
    static constexpr const float CameraNearClipTiny = 0.002;
    // Get static field: static private System.Single CameraNearClipTiny
    static float _get_CameraNearClipTiny();
    // Set static field: static private System.Single CameraNearClipTiny
    static void _set_CameraNearClipTiny(float value);
    // static field const value: static private System.Single climbingMaxThrowSpeed
    static constexpr const float climbingMaxThrowSpeed = 5.5;
    // Get static field: static private System.Single climbingMaxThrowSpeed
    static float _get_climbingMaxThrowSpeed();
    // Set static field: static private System.Single climbingMaxThrowSpeed
    static void _set_climbingMaxThrowSpeed(float value);
    // static field const value: static private System.Single climbHelperSmoothSnapSpeed
    static constexpr const float climbHelperSmoothSnapSpeed = 12;
    // Get static field: static private System.Single climbHelperSmoothSnapSpeed
    static float _get_climbHelperSmoothSnapSpeed();
    // Set static field: static private System.Single climbHelperSmoothSnapSpeed
    static void _set_climbHelperSmoothSnapSpeed(float value);
    // static field const value: static private System.Single ACCELERATION_HELPER_CURVE
    static constexpr const float ACCELERATION_HELPER_CURVE = 2.3;
    // Get static field: static private System.Single ACCELERATION_HELPER_CURVE
    static float _get_ACCELERATION_HELPER_CURVE();
    // Set static field: static private System.Single ACCELERATION_HELPER_CURVE
    static void _set_ACCELERATION_HELPER_CURVE(float value);
    // Get instance field reference: public UnityEngine.SphereCollider headCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& dyn_headCollider();
    // Get instance field reference: public UnityEngine.CapsuleCollider bodyCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& dyn_bodyCollider();
    // Get instance field reference: private System.Single bodyInitialRadius
    [[deprecated("Use field access instead!")]] float& dyn_bodyInitialRadius();
    // Get instance field reference: private System.Single bodyInitialHeight
    [[deprecated("Use field access instead!")]] float& dyn_bodyInitialHeight();
    // Get instance field reference: private UnityEngine.RaycastHit bodyHitInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_bodyHitInfo();
    // Get instance field reference: private UnityEngine.RaycastHit lastHitInfoHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_lastHitInfoHand();
    // Get instance field reference: public UnityEngine.Transform leftHandFollower
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHandFollower();
    // Get instance field reference: public UnityEngine.Transform rightHandFollower
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHandFollower();
    // Get instance field reference: public UnityEngine.Transform rightControllerTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightControllerTransform();
    // Get instance field reference: public UnityEngine.Transform leftControllerTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftControllerTransform();
    // Get instance field reference: public GorillaLocomotion.Climbing.GorillaVelocityTracker rightHandCenterVelocityTracker
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaVelocityTracker*& dyn_rightHandCenterVelocityTracker();
    // Get instance field reference: public GorillaLocomotion.Climbing.GorillaVelocityTracker leftHandCenterVelocityTracker
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaVelocityTracker*& dyn_leftHandCenterVelocityTracker();
    // Get instance field reference: public GorillaLocomotion.Climbing.GorillaVelocityTracker rightInteractPointVelocityTracker
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaVelocityTracker*& dyn_rightInteractPointVelocityTracker();
    // Get instance field reference: public GorillaLocomotion.Climbing.GorillaVelocityTracker leftInteractPointVelocityTracker
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaVelocityTracker*& dyn_leftInteractPointVelocityTracker();
    // Get instance field reference: public GorillaLocomotion.Climbing.GorillaVelocityTracker bodyVelocityTracker
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaVelocityTracker*& dyn_bodyVelocityTracker();
    // Get instance field reference: public PlayerAudioManager audioManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerAudioManager*& dyn_audioManager();
    // Get instance field reference: private UnityEngine.Vector3 lastLeftHandPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastLeftHandPosition();
    // Get instance field reference: private UnityEngine.Vector3 lastRightHandPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastRightHandPosition();
    // Get instance field reference: public UnityEngine.Vector3 lastHeadPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastHeadPosition();
    // Get instance field reference: private UnityEngine.Vector3 lastRigidbodyPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastRigidbodyPosition();
    // Get instance field reference: private UnityEngine.Rigidbody playerRigidBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_playerRigidBody();
    // Get instance field reference: private UnityEngine.Camera mainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_mainCamera();
    // Get instance field reference: public System.Int32 velocityHistorySize
    [[deprecated("Use field access instead!")]] int& dyn_velocityHistorySize();
    // Get instance field reference: public System.Single maxArmLength
    [[deprecated("Use field access instead!")]] float& dyn_maxArmLength();
    // Get instance field reference: public System.Single unStickDistance
    [[deprecated("Use field access instead!")]] float& dyn_unStickDistance();
    // Get instance field reference: public System.Single velocityLimit
    [[deprecated("Use field access instead!")]] float& dyn_velocityLimit();
    // Get instance field reference: public System.Single slideVelocityLimit
    [[deprecated("Use field access instead!")]] float& dyn_slideVelocityLimit();
    // Get instance field reference: public System.Single maxJumpSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxJumpSpeed();
    // Get instance field reference: public System.Single jumpMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_jumpMultiplier();
    // Get instance field reference: public System.Single minimumRaycastDistance
    [[deprecated("Use field access instead!")]] float& dyn_minimumRaycastDistance();
    // Get instance field reference: public System.Single defaultSlideFactor
    [[deprecated("Use field access instead!")]] float& dyn_defaultSlideFactor();
    // Get instance field reference: public System.Single slidingMinimum
    [[deprecated("Use field access instead!")]] float& dyn_slidingMinimum();
    // Get instance field reference: public System.Single defaultPrecision
    [[deprecated("Use field access instead!")]] float& dyn_defaultPrecision();
    // Get instance field reference: public System.Single teleportThresholdNoVel
    [[deprecated("Use field access instead!")]] float& dyn_teleportThresholdNoVel();
    // Get instance field reference: public System.Single frictionConstant
    [[deprecated("Use field access instead!")]] float& dyn_frictionConstant();
    // Get instance field reference: public System.Single slideControl
    [[deprecated("Use field access instead!")]] float& dyn_slideControl();
    // Get instance field reference: public System.Single stickDepth
    [[deprecated("Use field access instead!")]] float& dyn_stickDepth();
    // Get instance field reference: private UnityEngine.Vector3[] velocityHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_velocityHistory();
    // Get instance field reference: private UnityEngine.Vector3[] slideAverageHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_slideAverageHistory();
    // Get instance field reference: private System.Int32 velocityIndex
    [[deprecated("Use field access instead!")]] int& dyn_velocityIndex();
    // Get instance field reference: public UnityEngine.Vector3 currentVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_currentVelocity();
    // Get instance field reference: private UnityEngine.Vector3 denormalizedVelocityAverage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_denormalizedVelocityAverage();
    // Get instance field reference: private UnityEngine.Vector3 lastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPosition();
    // Get instance field reference: public UnityEngine.Vector3 rightHandOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHandOffset();
    // Get instance field reference: public UnityEngine.Vector3 leftHandOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHandOffset();
    // Get instance field reference: public UnityEngine.Quaternion rightHandRotOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rightHandRotOffset();
    // Get instance field reference: public UnityEngine.Quaternion leftHandRotOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_leftHandRotOffset();
    // Get instance field reference: public UnityEngine.Vector3 bodyOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyOffset();
    // Get instance field reference: public UnityEngine.LayerMask locomotionEnabledLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_locomotionEnabledLayers();
    // Get instance field reference: public UnityEngine.LayerMask waterLayer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_waterLayer();
    // Get instance field reference: public System.Boolean wasLeftHandTouching
    [[deprecated("Use field access instead!")]] bool& dyn_wasLeftHandTouching();
    // Get instance field reference: public System.Boolean wasRightHandTouching
    [[deprecated("Use field access instead!")]] bool& dyn_wasRightHandTouching();
    // Get instance field reference: public System.Boolean wasHeadTouching
    [[deprecated("Use field access instead!")]] bool& dyn_wasHeadTouching();
    // Get instance field reference: public System.Int32 currentMaterialIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentMaterialIndex();
    // Get instance field reference: public System.Boolean leftHandSlide
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandSlide();
    // Get instance field reference: public UnityEngine.Vector3 leftHandSlideNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHandSlideNormal();
    // Get instance field reference: public System.Boolean rightHandSlide
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandSlide();
    // Get instance field reference: public UnityEngine.Vector3 rightHandSlideNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHandSlideNormal();
    // Get instance field reference: public UnityEngine.Vector3 headSlideNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headSlideNormal();
    // Get instance field reference: public System.Single rightHandSlipPercentage
    [[deprecated("Use field access instead!")]] float& dyn_rightHandSlipPercentage();
    // Get instance field reference: public System.Single leftHandSlipPercentage
    [[deprecated("Use field access instead!")]] float& dyn_leftHandSlipPercentage();
    // Get instance field reference: public System.Single headSlipPercentage
    [[deprecated("Use field access instead!")]] float& dyn_headSlipPercentage();
    // Get instance field reference: public System.Boolean wasLeftHandSlide
    [[deprecated("Use field access instead!")]] bool& dyn_wasLeftHandSlide();
    // Get instance field reference: public System.Boolean wasRightHandSlide
    [[deprecated("Use field access instead!")]] bool& dyn_wasRightHandSlide();
    // Get instance field reference: public UnityEngine.Vector3 rightHandHitPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHandHitPoint();
    // Get instance field reference: public UnityEngine.Vector3 leftHandHitPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHandHitPoint();
    // Get instance field reference: public System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
    // Get instance field reference: public System.Boolean debugMovement
    [[deprecated("Use field access instead!")]] bool& dyn_debugMovement();
    // Get instance field reference: public System.Boolean disableMovement
    [[deprecated("Use field access instead!")]] bool& dyn_disableMovement();
    // Get instance field reference: public System.Boolean inOverlay
    [[deprecated("Use field access instead!")]] bool& dyn_inOverlay();
    // Get instance field reference: public System.Boolean isUserPresent
    [[deprecated("Use field access instead!")]] bool& dyn_isUserPresent();
    // Get instance field reference: public UnityEngine.GameObject turnParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_turnParent();
    // Get instance field reference: public System.Int32 leftHandMaterialTouchIndex
    [[deprecated("Use field access instead!")]] int& dyn_leftHandMaterialTouchIndex();
    // Get instance field reference: public GorillaSurfaceOverride leftHandSurfaceOverride
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSurfaceOverride*& dyn_leftHandSurfaceOverride();
    // Get instance field reference: public System.Int32 rightHandMaterialTouchIndex
    [[deprecated("Use field access instead!")]] int& dyn_rightHandMaterialTouchIndex();
    // Get instance field reference: public GorillaSurfaceOverride rightHandSurfaceOverride
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSurfaceOverride*& dyn_rightHandSurfaceOverride();
    // Get instance field reference: public GorillaSurfaceOverride currentOverride
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSurfaceOverride*& dyn_currentOverride();
    // Get instance field reference: public GorillaTag.MaterialDatasSO materialDatasSO
    [[deprecated("Use field access instead!")]] ::GorillaTag::MaterialDatasSO*& dyn_materialDatasSO();
    // Get instance field reference: private System.Boolean leftHandColliding
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandColliding();
    // Get instance field reference: private System.Boolean rightHandColliding
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandColliding();
    // Get instance field reference: private System.Boolean headColliding
    [[deprecated("Use field access instead!")]] bool& dyn_headColliding();
    // Get instance field reference: private System.Single degreesTurnedThisFrame
    [[deprecated("Use field access instead!")]] float& dyn_degreesTurnedThisFrame();
    // Get instance field reference: private UnityEngine.Vector3 finalPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_finalPosition();
    // Get instance field reference: private UnityEngine.Vector3 rigidBodyMovement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rigidBodyMovement();
    // Get instance field reference: private UnityEngine.Vector3 leftHandPushDisplacement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHandPushDisplacement();
    // Get instance field reference: private UnityEngine.Vector3 rightHandPushDisplacement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHandPushDisplacement();
    // Get instance field reference: private UnityEngine.RaycastHit hitInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_hitInfo();
    // Get instance field reference: private UnityEngine.RaycastHit iterativeHitInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_iterativeHitInfo();
    // Get instance field reference: private UnityEngine.RaycastHit collisionsInnerHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_collisionsInnerHit();
    // Get instance field reference: private System.Single slipPercentage
    [[deprecated("Use field access instead!")]] float& dyn_slipPercentage();
    // Get instance field reference: private UnityEngine.Vector3 bodyOffsetVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyOffsetVector();
    // Get instance field reference: private UnityEngine.Vector3 distanceTraveled
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_distanceTraveled();
    // Get instance field reference: private UnityEngine.Vector3 movementToProjectedAboveCollisionPlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_movementToProjectedAboveCollisionPlane();
    // Get instance field reference: private UnityEngine.MeshCollider meshCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshCollider*& dyn_meshCollider();
    // Get instance field reference: private UnityEngine.Mesh collidedMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_collidedMesh();
    // Get instance field reference: private GorillaLocomotion.Player/MaterialData foundMatData
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Player::MaterialData& dyn_foundMatData();
    // Get instance field reference: private System.String findMatName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_findMatName();
    // Get instance field reference: private System.Int32 vertex1
    [[deprecated("Use field access instead!")]] int& dyn_vertex1();
    // Get instance field reference: private System.Int32 vertex2
    [[deprecated("Use field access instead!")]] int& dyn_vertex2();
    // Get instance field reference: private System.Int32 vertex3
    [[deprecated("Use field access instead!")]] int& dyn_vertex3();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> trianglesList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_trianglesList();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Mesh,System.Int32[]> meshTrianglesDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Mesh*, ::ArrayW<int>>*& dyn_meshTrianglesDict();
    // Get instance field reference: private System.Int32[] sharedMeshTris
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_sharedMeshTris();
    // Get instance field reference: private System.Single lastRealTime
    [[deprecated("Use field access instead!")]] float& dyn_lastRealTime();
    // Get instance field reference: private System.Single calcDeltaTime
    [[deprecated("Use field access instead!")]] float& dyn_calcDeltaTime();
    // Get instance field reference: private System.Single tempRealTime
    [[deprecated("Use field access instead!")]] float& dyn_tempRealTime();
    // Get instance field reference: private UnityEngine.Vector3 junkNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_junkNormal();
    // Get instance field reference: private UnityEngine.Vector3 slideAverage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_slideAverage();
    // Get instance field reference: private UnityEngine.Vector3 slideAverageNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_slideAverageNormal();
    // Get instance field reference: private UnityEngine.Vector3 tempVector3
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_tempVector3();
    // Get instance field reference: private UnityEngine.RaycastHit tempHitInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_tempHitInfo();
    // Get instance field reference: private UnityEngine.RaycastHit junkHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_junkHit();
    // Get instance field reference: private UnityEngine.Vector3 firstPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_firstPosition();
    // Get instance field reference: private UnityEngine.RaycastHit tempIterativeHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_tempIterativeHit();
    // Get instance field reference: private System.Boolean collisionsReturnBool
    [[deprecated("Use field access instead!")]] bool& dyn_collisionsReturnBool();
    // Get instance field reference: private System.Single overlapRadiusFunction
    [[deprecated("Use field access instead!")]] float& dyn_overlapRadiusFunction();
    // Get instance field reference: private System.Single maxSphereSize1
    [[deprecated("Use field access instead!")]] float& dyn_maxSphereSize1();
    // Get instance field reference: private System.Single maxSphereSize2
    [[deprecated("Use field access instead!")]] float& dyn_maxSphereSize2();
    // Get instance field reference: private UnityEngine.Collider[] overlapColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_overlapColliders();
    // Get instance field reference: private System.Int32 overlapAttempts
    [[deprecated("Use field access instead!")]] int& dyn_overlapAttempts();
    // Get instance field reference: private System.Int32 touchPoints
    [[deprecated("Use field access instead!")]] int& dyn_touchPoints();
    // Get instance field reference: private System.Single averageSlipPercentage
    [[deprecated("Use field access instead!")]] float& dyn_averageSlipPercentage();
    // Get instance field reference: private UnityEngine.Vector3 surfaceDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_surfaceDirection();
    // Get instance field reference: public System.Single iceThreshold
    [[deprecated("Use field access instead!")]] float& dyn_iceThreshold();
    // Get instance field reference: private System.Single bodyMaxRadius
    [[deprecated("Use field access instead!")]] float& dyn_bodyMaxRadius();
    // Get instance field reference: public System.Single bodyLerp
    [[deprecated("Use field access instead!")]] float& dyn_bodyLerp();
    // Get instance field reference: private System.Boolean areBothTouching
    [[deprecated("Use field access instead!")]] bool& dyn_areBothTouching();
    // Get instance field reference: private System.Single slideFactor
    [[deprecated("Use field access instead!")]] float& dyn_slideFactor();
    // Get instance field reference: public System.Boolean didAJump
    [[deprecated("Use field access instead!")]] bool& dyn_didAJump();
    // Get instance field reference: private UnityEngine.Renderer slideRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_slideRenderer();
    // Get instance field reference: private UnityEngine.RaycastHit[] rayCastNonAllocColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_rayCastNonAllocColliders();
    // Get instance field reference: private UnityEngine.Vector3[] crazyCheckVectors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_crazyCheckVectors();
    // Get instance field reference: private UnityEngine.RaycastHit emptyHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_emptyHit();
    // Get instance field reference: private System.Int32 bufferCount
    [[deprecated("Use field access instead!")]] int& dyn_bufferCount();
    // Get instance field reference: private UnityEngine.Vector3 lastOpenHeadPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastOpenHeadPosition();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Material> tempMaterialArray
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Material*>*& dyn_tempMaterialArray();
    // Get instance field reference: private System.Int32 leftSlipSetToMaxFrameIdx
    [[deprecated("Use field access instead!")]] int& dyn_leftSlipSetToMaxFrameIdx();
    // Get instance field reference: private System.Int32 rightSlipSetToMaxFrameIdx
    [[deprecated("Use field access instead!")]] int& dyn_rightSlipSetToMaxFrameIdx();
    // Get instance field reference: public GorillaLocomotion.Swimming.PlayerSwimmingParameters swimmingParams
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::PlayerSwimmingParameters*& dyn_swimmingParams();
    // Get instance field reference: public GorillaLocomotion.Swimming.WaterParameters waterParams
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterParameters*& dyn_waterParams();
    // Get instance field reference: public System.Collections.Generic.List`1<GorillaLocomotion.Player/LiquidProperties> liquidPropertiesList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaLocomotion::Player::LiquidProperties>*& dyn_liquidPropertiesList();
    // Get instance field reference: public System.Boolean debugDrawSwimming
    [[deprecated("Use field access instead!")]] bool& dyn_debugDrawSwimming();
    // Get instance field reference: public UnityEngine.GameObject wizardStaffSlamEffects
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_wizardStaffSlamEffects();
    // Get instance field reference: public UnityEngine.GameObject geodeHitEffects
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_geodeHitEffects();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume leftHandWaterVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_leftHandWaterVolume();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume rightHandWaterVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_rightHandWaterVolume();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery leftHandWaterSurface
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery& dyn_leftHandWaterSurface();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery rightHandWaterSurface
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery& dyn_rightHandWaterSurface();
    // Get instance field reference: private UnityEngine.Vector3 swimmingVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_swimmingVelocity();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery waterSurfaceForHead
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery& dyn_waterSurfaceForHead();
    // Get instance field reference: private System.Boolean bodyInWater
    [[deprecated("Use field access instead!")]] bool& dyn_bodyInWater();
    // Get instance field reference: private System.Boolean headInWater
    [[deprecated("Use field access instead!")]] bool& dyn_headInWater();
    // Get instance field reference: private System.Single buoyancyExtension
    [[deprecated("Use field access instead!")]] float& dyn_buoyancyExtension();
    // Get instance field reference: private System.Single lastWaterSurfaceJumpTimeLeft
    [[deprecated("Use field access instead!")]] float& dyn_lastWaterSurfaceJumpTimeLeft();
    // Get instance field reference: private System.Single lastWaterSurfaceJumpTimeRight
    [[deprecated("Use field access instead!")]] float& dyn_lastWaterSurfaceJumpTimeRight();
    // Get instance field reference: private System.Single waterSurfaceJumpCooldown
    [[deprecated("Use field access instead!")]] float& dyn_waterSurfaceJumpCooldown();
    // Get instance field reference: private System.Single leftHandNonDiveHapticsAmount
    [[deprecated("Use field access instead!")]] float& dyn_leftHandNonDiveHapticsAmount();
    // Get instance field reference: private System.Single rightHandNonDiveHapticsAmount
    [[deprecated("Use field access instead!")]] float& dyn_rightHandNonDiveHapticsAmount();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterVolume> headOverlappingWaterVolumes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>*& dyn_headOverlappingWaterVolumes();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterVolume> bodyOverlappingWaterVolumes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>*& dyn_bodyOverlappingWaterVolumes();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterCurrent> activeWaterCurrents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterCurrent*>*& dyn_activeWaterCurrents();
    // Get instance field reference: private UnityEngine.Quaternion playerRotationOverride
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_playerRotationOverride();
    // Get instance field reference: private System.Int32 playerRotationOverrideFrame
    [[deprecated("Use field access instead!")]] int& dyn_playerRotationOverrideFrame();
    // Get instance field reference: private System.Single playerRotationOverrideDecayRate
    [[deprecated("Use field access instead!")]] float& dyn_playerRotationOverrideDecayRate();
    // Get instance field reference: private UnityEngine.ContactPoint[] bodyCollisionContacts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ContactPoint>& dyn_bodyCollisionContacts();
    // Get instance field reference: private System.Int32 bodyCollisionContactsCount
    [[deprecated("Use field access instead!")]] int& dyn_bodyCollisionContactsCount();
    // Get instance field reference: private UnityEngine.ContactPoint bodyGroundContact
    [[deprecated("Use field access instead!")]] ::UnityEngine::ContactPoint& dyn_bodyGroundContact();
    // Get instance field reference: private System.Single bodyGroundContactTime
    [[deprecated("Use field access instead!")]] float& dyn_bodyGroundContactTime();
    // Get instance field reference: private BasePlatform currentPlatform
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasePlatform*& dyn_currentPlatform();
    // Get instance field reference: private BasePlatform lastPlatformTouched
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasePlatform*& dyn_lastPlatformTouched();
    // Get instance field reference: private UnityEngine.Vector3 lastFrameTouchPosLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastFrameTouchPosLocal();
    // Get instance field reference: private UnityEngine.Vector3 lastFrameTouchPosWorld
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastFrameTouchPosWorld();
    // Get instance field reference: private System.Boolean lastFrameHasValidTouchPos
    [[deprecated("Use field access instead!")]] bool& dyn_lastFrameHasValidTouchPos();
    // Get instance field reference: private UnityEngine.Vector3 refMovement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_refMovement();
    // Get instance field reference: private UnityEngine.Vector3 platformTouchOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_platformTouchOffset();
    // Get instance field reference: private UnityEngine.Vector3 debugLastRightHandPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugLastRightHandPosition();
    // Get instance field reference: private UnityEngine.Vector3 debugPlatformDeltaPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_debugPlatformDeltaPosition();
    // Get instance field reference: private System.Single velocityThrowClimbingMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_velocityThrowClimbingMultiplier();
    // Get instance field reference: private System.Single climbingMaxThrowMagnitude
    [[deprecated("Use field access instead!")]] float& dyn_climbingMaxThrowMagnitude();
    // Get instance field reference: public System.Boolean isClimbing
    [[deprecated("Use field access instead!")]] bool& dyn_isClimbing();
    // Get instance field reference: private GorillaLocomotion.Climbing.GorillaClimbable currentClimbable
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaClimbable*& dyn_currentClimbable();
    // Get instance field reference: private GorillaLocomotion.Climbing.GorillaHandClimber currentClimber
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Climbing::GorillaHandClimber*& dyn_currentClimber();
    // Get instance field reference: private UnityEngine.Vector3 climbHelperTargetPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_climbHelperTargetPos();
    // Get instance field reference: private UnityEngine.Transform climbHelper
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_climbHelper();
    // Get instance field reference: private GorillaLocomotion.Gameplay.GorillaRopeSwing currentSwing
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Gameplay::GorillaRopeSwing*& dyn_currentSwing();
    // Get instance field reference: private GorillaLocomotion.Gameplay.GorillaZipline currentZipline
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Gameplay::GorillaZipline*& dyn_currentZipline();
    // Get instance field reference: private ConnectedControllerHandler controllerState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ConnectedControllerHandler*& dyn_controllerState();
    // Get instance field reference: public System.Int32 sizeLayerMask
    [[deprecated("Use field access instead!")]] int& dyn_sizeLayerMask();
    // Get instance field reference: public System.Boolean InReportMenu
    [[deprecated("Use field access instead!")]] bool& dyn_InReportMenu();
    // Get instance field reference: private System.Single halloweenLevitationStrength
    [[deprecated("Use field access instead!")]] float& dyn_halloweenLevitationStrength();
    // Get instance field reference: private System.Single halloweenLevitationFullStrengthDuration
    [[deprecated("Use field access instead!")]] float& dyn_halloweenLevitationFullStrengthDuration();
    // Get instance field reference: private System.Single halloweenLevitationTotalDuration
    [[deprecated("Use field access instead!")]] float& dyn_halloweenLevitationTotalDuration();
    // Get instance field reference: private System.Single halloweenLevitationBonusStrength
    [[deprecated("Use field access instead!")]] float& dyn_halloweenLevitationBonusStrength();
    // Get instance field reference: private System.Single halloweenLevitateBonusOffAtYSpeed
    [[deprecated("Use field access instead!")]] float& dyn_halloweenLevitateBonusOffAtYSpeed();
    // Get instance field reference: private System.Single halloweenLevitateBonusFullAtYSpeed
    [[deprecated("Use field access instead!")]] float& dyn_halloweenLevitateBonusFullAtYSpeed();
    // Get instance field reference: private System.Single lastTouchedGroundTimestamp
    [[deprecated("Use field access instead!")]] float& dyn_lastTouchedGroundTimestamp();
    // Get instance field reference: private System.Boolean teleportToTrain
    [[deprecated("Use field access instead!")]] bool& dyn_teleportToTrain();
    // Get instance field reference: public System.Boolean isAttachedToTrain
    [[deprecated("Use field access instead!")]] bool& dyn_isAttachedToTrain();
    // Get instance field reference: private System.Boolean stuckLeft
    [[deprecated("Use field access instead!")]] bool& dyn_stuckLeft();
    // Get instance field reference: private System.Boolean stuckRight
    [[deprecated("Use field access instead!")]] bool& dyn_stuckRight();
    // Get instance field reference: private System.Single lastScale
    [[deprecated("Use field access instead!")]] float& dyn_lastScale();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Transform> handHolds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& dyn_handHolds();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Transform> handHoldGrabbers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Transform*>*& dyn_handHoldGrabbers();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Vector3> handHoldPositions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>*& dyn_handHoldPositions();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Quaternion> handHoldRotations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Quaternion>*& dyn_handHoldRotations();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Vector3> handHoldVelocities
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>*& dyn_handHoldVelocities();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Vector3> attachedPosition
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>*& dyn_attachedPosition();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Transform,UnityEngine.Vector3> attachedPrevPosition
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>*& dyn_attachedPrevPosition();
    // Get instance field reference: private System.Boolean rightHandHolding
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandHolding();
    // Get instance field reference: private System.Boolean leftHandHolding
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandHolding();
    // static public GorillaLocomotion.Player get_Instance()
    // Offset: 0x27CF72C
    static ::GorillaLocomotion::Player* get_Instance();
    // public System.Boolean get_IsDefaultScale()
    // Offset: 0x27CF774
    bool get_IsDefaultScale();
    // public System.Boolean get_turnedThisFrame()
    // Offset: 0x27CF794
    bool get_turnedThisFrame();
    // public System.Collections.Generic.List`1<GorillaLocomotion.Player/MaterialData> get_materialData()
    // Offset: 0x27CF7A4
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Player::MaterialData>* get_materialData();
    // public System.Collections.Generic.List`1<GorillaLocomotion.Swimming.WaterVolume> get_HeadOverlappingWaterVolumes()
    // Offset: 0x27CF7C0
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>* get_HeadOverlappingWaterVolumes();
    // public System.Boolean get_InWater()
    // Offset: 0x27CF7C8
    bool get_InWater();
    // public System.Boolean get_HeadInWater()
    // Offset: 0x27CF7D0
    bool get_HeadInWater();
    // public GorillaLocomotion.Swimming.WaterVolume get_CurrentWaterVolume()
    // Offset: 0x27CF7D8
    ::GorillaLocomotion::Swimming::WaterVolume* get_CurrentWaterVolume();
    // public GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery get_WaterSurfaceForHead()
    // Offset: 0x27CF854
    ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery get_WaterSurfaceForHead();
    // public GorillaLocomotion.Swimming.WaterVolume get_LeftHandWaterVolume()
    // Offset: 0x27CF86C
    ::GorillaLocomotion::Swimming::WaterVolume* get_LeftHandWaterVolume();
    // public GorillaLocomotion.Swimming.WaterVolume get_RightHandWaterVolume()
    // Offset: 0x27CF874
    ::GorillaLocomotion::Swimming::WaterVolume* get_RightHandWaterVolume();
    // public GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery get_LeftHandWaterSurface()
    // Offset: 0x27CF87C
    ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery get_LeftHandWaterSurface();
    // public GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery get_RightHandWaterSurface()
    // Offset: 0x27CF894
    ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery get_RightHandWaterSurface();
    // public UnityEngine.Vector3 get_LastLeftHandPosition()
    // Offset: 0x27CF8AC
    ::UnityEngine::Vector3 get_LastLeftHandPosition();
    // public UnityEngine.Vector3 get_LastRightHandPosition()
    // Offset: 0x27CF8B8
    ::UnityEngine::Vector3 get_LastRightHandPosition();
    // public UnityEngine.Vector3 get_Velocity()
    // Offset: 0x27CF8C4
    ::UnityEngine::Vector3 get_Velocity();
    // public UnityEngine.Vector3 get_HeadCenterPosition()
    // Offset: 0x27CF8E0
    ::UnityEngine::Vector3 get_HeadCenterPosition();
    // public System.Boolean get_HandContactingSurface()
    // Offset: 0x27CF96C
    bool get_HandContactingSurface();
    // public System.Boolean get_BodyOnGround()
    // Offset: 0x27CF98C
    bool get_BodyOnGround();
    // public System.Void set_PlayerRotationOverride(UnityEngine.Quaternion value)
    // Offset: 0x27CF9C0
    void set_PlayerRotationOverride(::UnityEngine::Quaternion value);
    // private System.Void Awake()
    // Offset: 0x27CF9EC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x27D0254
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x27D06DC
    void OnDestroy();
    // public System.Void InitializeValues()
    // Offset: 0x27CFE78
    void InitializeValues();
    // public System.Void SetHalloweenLevitation(System.Single levitateStrength, System.Single levitateDuration, System.Single levitateBlendOutDuration, System.Single levitateBonusStrength, System.Single levitateBonusOffAtYSpeed, System.Single levitateBonusFullAtYSpeed)
    // Offset: 0x27D0894
    void SetHalloweenLevitation(float levitateStrength, float levitateDuration, float levitateBlendOutDuration, float levitateBonusStrength, float levitateBonusOffAtYSpeed, float levitateBonusFullAtYSpeed);
    // public System.Void TeleportToTrain(System.Boolean enable)
    // Offset: 0x27D08B4
    void TeleportToTrain(bool enable);
    // public System.Void AddForce(UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x27D08C0
    void AddForce(::UnityEngine::Vector3 force, ::UnityEngine::ForceMode mode);
    // public System.Void FixedUpdate()
    // Offset: 0x27D08DC
    void FixedUpdate();
    // private System.Void BodyCollider()
    // Offset: 0x27D3480
    void BodyCollider();
    // private UnityEngine.Vector3 GetCurrentHandPosition(UnityEngine.Transform handTransform, UnityEngine.Vector3 handOffset)
    // Offset: 0x27D3AA0
    ::UnityEngine::Vector3 GetCurrentHandPosition(::UnityEngine::Transform* handTransform, ::UnityEngine::Vector3 handOffset);
    // private UnityEngine.Vector3 GetLastLeftHandPosition()
    // Offset: 0x27D3D98
    ::UnityEngine::Vector3 GetLastLeftHandPosition();
    // private UnityEngine.Vector3 GetLastRightHandPosition()
    // Offset: 0x27D3DBC
    ::UnityEngine::Vector3 GetLastRightHandPosition();
    // private UnityEngine.Vector3 GetCurrentLeftHandPosition()
    // Offset: 0x27D3DE0
    ::UnityEngine::Vector3 GetCurrentLeftHandPosition();
    // private UnityEngine.Vector3 GetCurrentRightHandPosition()
    // Offset: 0x27D40D8
    ::UnityEngine::Vector3 GetCurrentRightHandPosition();
    // private UnityEngine.Vector3 PositionWithOffset(UnityEngine.Transform transformToModify, UnityEngine.Vector3 offsetVector)
    // Offset: 0x27D07F8
    ::UnityEngine::Vector3 PositionWithOffset(::UnityEngine::Transform* transformToModify, ::UnityEngine::Vector3 offsetVector);
    // private System.Void LateUpdate()
    // Offset: 0x27D43D0
    void LateUpdate();
    // private System.Void stuckHandsCheckFixedUpdate()
    // Offset: 0x27D287C
    void stuckHandsCheckFixedUpdate();
    // private System.Void stuckHandsCheckLateUpdate(ref UnityEngine.Vector3 finalLeftHandPosition, ref UnityEngine.Vector3 finalRightHandPosition)
    // Offset: 0x27D8370
    void stuckHandsCheckLateUpdate(ByRef<::UnityEngine::Vector3> finalLeftHandPosition, ByRef<::UnityEngine::Vector3> finalRightHandPosition);
    // private System.Void handleClimbing(System.Single deltaTime)
    // Offset: 0x27D2494
    void handleClimbing(float deltaTime);
    // private UnityEngine.Vector3 FirstHandIteration(UnityEngine.Transform handTransform, UnityEngine.Vector3 handOffset, UnityEngine.Vector3 lastHandPosition, System.Boolean wasHandSlide, System.Boolean wasHandTouching, System.Boolean fullSlideOverride, out UnityEngine.Vector3 pushDisplacement, ref System.Single handSlipPercentage, ref System.Boolean handSlide, ref UnityEngine.Vector3 slideNormal, ref System.Boolean handColliding, ref System.Int32 materialTouchIndex, ref GorillaSurfaceOverride touchedOverride, System.Boolean skipCollisionChecks)
    // Offset: 0x27D76D0
    ::UnityEngine::Vector3 FirstHandIteration(::UnityEngine::Transform* handTransform, ::UnityEngine::Vector3 handOffset, ::UnityEngine::Vector3 lastHandPosition, bool wasHandSlide, bool wasHandTouching, bool fullSlideOverride, ByRef<::UnityEngine::Vector3> pushDisplacement, ByRef<float> handSlipPercentage, ByRef<bool> handSlide, ByRef<::UnityEngine::Vector3> slideNormal, ByRef<bool> handColliding, ByRef<int> materialTouchIndex, ByRef<::GlobalNamespace::GorillaSurfaceOverride*> touchedOverride, bool skipCollisionChecks);
    // private UnityEngine.Vector3 FinalHandPosition(UnityEngine.Transform handTransform, UnityEngine.Vector3 handOffset, UnityEngine.Vector3 lastHandPosition, System.Boolean bothTouching, System.Boolean isHandTouching, out System.Boolean handColliding, System.Boolean isHandSlide, out System.Boolean handSlide, System.Int32 currentMaterialTouchIndex, out System.Int32 materialTouchIndex, GorillaSurfaceOverride currentSurface, out GorillaSurfaceOverride touchedOverride, System.Boolean skipCollisionChecks)
    // Offset: 0x27D7EC4
    ::UnityEngine::Vector3 FinalHandPosition(::UnityEngine::Transform* handTransform, ::UnityEngine::Vector3 handOffset, ::UnityEngine::Vector3 lastHandPosition, bool bothTouching, bool isHandTouching, ByRef<bool> handColliding, bool isHandSlide, ByRef<bool> handSlide, int currentMaterialTouchIndex, ByRef<int> materialTouchIndex, ::GlobalNamespace::GorillaSurfaceOverride* currentSurface, ByRef<::GlobalNamespace::GorillaSurfaceOverride*> touchedOverride, bool skipCollisionChecks);
    // private System.Boolean IterativeCollisionSphereCast(UnityEngine.Vector3 startPosition, System.Single sphereRadius, UnityEngine.Vector3 movementVector, out UnityEngine.Vector3 endPosition, System.Boolean singleHand, out System.Single slipPercentage, out UnityEngine.RaycastHit iterativeHitInfo, System.Boolean fullSlide)
    // Offset: 0x27D7BDC
    bool IterativeCollisionSphereCast(::UnityEngine::Vector3 startPosition, float sphereRadius, ::UnityEngine::Vector3 movementVector, ByRef<::UnityEngine::Vector3> endPosition, bool singleHand, ByRef<float> slipPercentage, ByRef<::UnityEngine::RaycastHit> iterativeHitInfo, bool fullSlide);
    // private System.Boolean CollisionsSphereCast(UnityEngine.Vector3 startPosition, System.Single sphereRadius, UnityEngine.Vector3 movementVector, out UnityEngine.Vector3 finalPosition, out UnityEngine.RaycastHit collisionsHitInfo)
    // Offset: 0x27D9394
    bool CollisionsSphereCast(::UnityEngine::Vector3 startPosition, float sphereRadius, ::UnityEngine::Vector3 movementVector, ByRef<::UnityEngine::Vector3> finalPosition, ByRef<::UnityEngine::RaycastHit> collisionsHitInfo);
    // public System.Boolean IsHandTouching(System.Boolean forLeftHand)
    // Offset: 0x27DAC30
    bool IsHandTouching(bool forLeftHand);
    // public System.Boolean IsHandSliding(System.Boolean forLeftHand)
    // Offset: 0x27DAC44
    bool IsHandSliding(bool forLeftHand);
    // public System.Single GetSlidePercentage(UnityEngine.RaycastHit raycastHit)
    // Offset: 0x27DA310
    float GetSlidePercentage(::UnityEngine::RaycastHit raycastHit);
    // public System.Void Turn(System.Single degrees)
    // Offset: 0x27D0494
    void Turn(float degrees);
    // public System.Void BeginClimbing(GorillaLocomotion.Climbing.GorillaClimbable climbable, GorillaLocomotion.Climbing.GorillaHandClimber hand, GorillaLocomotion.Climbing.GorillaClimbableRef climbableRef)
    // Offset: 0x27DAC78
    void BeginClimbing(::GorillaLocomotion::Climbing::GorillaClimbable* climbable, ::GorillaLocomotion::Climbing::GorillaHandClimber* hand, ::GorillaLocomotion::Climbing::GorillaClimbableRef* climbableRef);
    // private System.Void VerifyClimbHelper()
    // Offset: 0x27DB200
    void VerifyClimbHelper();
    // public System.Void EndClimbing(GorillaLocomotion.Climbing.GorillaHandClimber hand, System.Boolean startingNewClimb, System.Boolean doDontReclimb)
    // Offset: 0x27D8D48
    void EndClimbing(::GorillaLocomotion::Climbing::GorillaHandClimber* hand, bool startingNewClimb, bool doDontReclimb);
    // private System.Void enablePlayerGravity(System.Boolean useGravity)
    // Offset: 0x27DB334
    void enablePlayerGravity(bool useGravity);
    // private System.Void StoreVelocities()
    // Offset: 0x27D8040
    void StoreVelocities();
    // private System.Void AntiTeleportTechnology()
    // Offset: 0x27D22C8
    void AntiTeleportTechnology();
    // private System.Boolean MaxSphereSizeForNoOverlap(System.Single testRadius, UnityEngine.Vector3 checkPosition, System.Boolean ignoreOneWay, out System.Single overlapRadiusTest)
    // Offset: 0x27D3890
    bool MaxSphereSizeForNoOverlap(float testRadius, ::UnityEngine::Vector3 checkPosition, bool ignoreOneWay, ByRef<float> overlapRadiusTest);
    // private System.Boolean CrazyCheck2(System.Single sphereSize, UnityEngine.Vector3 startPosition)
    // Offset: 0x27D7B14
    bool CrazyCheck2(float sphereSize, ::UnityEngine::Vector3 startPosition);
    // private System.Int32 NonAllocRaycast(UnityEngine.Vector3 startPosition, UnityEngine.Vector3 endPosition)
    // Offset: 0x27DB3B8
    int NonAllocRaycast(::UnityEngine::Vector3 startPosition, ::UnityEngine::Vector3 endPosition);
    // private System.Void ClearColliderBuffer(ref UnityEngine.Collider[] colliders)
    // Offset: 0x27DB354
    void ClearColliderBuffer(ByRef<::ArrayW<::UnityEngine::Collider*>> colliders);
    // private System.Void ClearRaycasthitBuffer(ref UnityEngine.RaycastHit[] raycastHits)
    // Offset: 0x27DABB8
    void ClearRaycasthitBuffer(ByRef<::ArrayW<::UnityEngine::RaycastHit>> raycastHits);
    // private UnityEngine.Vector3 MovingSurfaceMovement()
    // Offset: 0x27DB58C
    ::UnityEngine::Vector3 MovingSurfaceMovement();
    // static private System.Boolean ComputeLocalHitPoint(UnityEngine.RaycastHit hit, out UnityEngine.Vector3 localHitPoint)
    // Offset: 0x27D8C0C
    static bool ComputeLocalHitPoint(::UnityEngine::RaycastHit hit, ByRef<::UnityEngine::Vector3> localHitPoint);
    // static private System.Boolean ComputeWorldHitPoint(UnityEngine.RaycastHit hit, UnityEngine.Vector3 localPoint, out UnityEngine.Vector3 worldHitPoint)
    // Offset: 0x27D758C
    static bool ComputeWorldHitPoint(::UnityEngine::RaycastHit hit, ::UnityEngine::Vector3 localPoint, ByRef<::UnityEngine::Vector3> worldHitPoint);
    // private System.Single ExtraVelMultiplier()
    // Offset: 0x27D82A4
    float ExtraVelMultiplier();
    // private System.Single ExtraVelMaxMultiplier()
    // Offset: 0x27D81D4
    float ExtraVelMaxMultiplier();
    // public System.Void SetMaximumSlipThisFrame()
    // Offset: 0x27DB59C
    void SetMaximumSlipThisFrame();
    // public System.Void SetLeftMaximumSlipThisFrame()
    // Offset: 0x27DB5C4
    void SetLeftMaximumSlipThisFrame();
    // public System.Void SetRightMaximumSlipThisFrame()
    // Offset: 0x27DB5E0
    void SetRightMaximumSlipThisFrame();
    // public System.Boolean LeftSlipOverriddenToMax()
    // Offset: 0x27D76B0
    bool LeftSlipOverriddenToMax();
    // public System.Boolean RightSlipOverriddenToMax()
    // Offset: 0x27D7AF4
    bool RightSlipOverriddenToMax();
    // public System.Void OnEnterWaterVolume(UnityEngine.Collider playerCollider, GorillaLocomotion.Swimming.WaterVolume volume)
    // Offset: 0x27DB5FC
    void OnEnterWaterVolume(::UnityEngine::Collider* playerCollider, ::GorillaLocomotion::Swimming::WaterVolume* volume);
    // public System.Void OnExitWaterVolume(UnityEngine.Collider playerCollider, GorillaLocomotion.Swimming.WaterVolume volume)
    // Offset: 0x27DB784
    void OnExitWaterVolume(::UnityEngine::Collider* playerCollider, ::GorillaLocomotion::Swimming::WaterVolume* volume);
    // private System.Boolean GetSwimmingVelocityForHand(UnityEngine.Vector3 startingHandPosition, UnityEngine.Vector3 endingHandPosition, UnityEngine.Vector3 palmForwardDirection, System.Single dt, ref GorillaLocomotion.Swimming.WaterVolume contactingWaterVolume, ref GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery waterSurface, out UnityEngine.Vector3 swimmingVelocityChange)
    // Offset: 0x27D83D0
    bool GetSwimmingVelocityForHand(::UnityEngine::Vector3 startingHandPosition, ::UnityEngine::Vector3 endingHandPosition, ::UnityEngine::Vector3 palmForwardDirection, float dt, ByRef<::GorillaLocomotion::Swimming::WaterVolume*> contactingWaterVolume, ByRef<::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery> waterSurface, ByRef<::UnityEngine::Vector3> swimmingVelocityChange);
    // private System.Boolean CheckWaterSurfaceJump(UnityEngine.Vector3 startingHandPosition, UnityEngine.Vector3 endingHandPosition, UnityEngine.Vector3 palmForwardDirection, UnityEngine.Vector3 handAvgVelocity, GorillaLocomotion.Swimming.PlayerSwimmingParameters parameters, GorillaLocomotion.Swimming.WaterVolume contactingWaterVolume, GorillaLocomotion.Swimming.WaterVolume/SurfaceQuery waterSurface, out UnityEngine.Vector3 jumpVelocity)
    // Offset: 0x27D8904
    bool CheckWaterSurfaceJump(::UnityEngine::Vector3 startingHandPosition, ::UnityEngine::Vector3 endingHandPosition, ::UnityEngine::Vector3 palmForwardDirection, ::UnityEngine::Vector3 handAvgVelocity, ::GorillaLocomotion::Swimming::PlayerSwimmingParameters* parameters, ::GorillaLocomotion::Swimming::WaterVolume* contactingWaterVolume, ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery waterSurface, ByRef<::UnityEngine::Vector3> jumpVelocity);
    // private System.Boolean TryNormalize(UnityEngine.Vector3 input, out UnityEngine.Vector3 normalized, out System.Single magnitude, System.Single eps)
    // Offset: 0x27DB864
    bool TryNormalize(::UnityEngine::Vector3 input, ByRef<::UnityEngine::Vector3> normalized, ByRef<float> magnitude, float eps);
    // private System.Boolean TryNormalizeDown(UnityEngine.Vector3 input, out UnityEngine.Vector3 normalized, out System.Single magnitude, System.Single eps)
    // Offset: 0x27DB95C
    bool TryNormalizeDown(::UnityEngine::Vector3 input, ByRef<::UnityEngine::Vector3> normalized, ByRef<float> magnitude, float eps);
    // private System.Void OnCollisionStay(UnityEngine.Collision collision)
    // Offset: 0x27DBA5C
    void OnCollisionStay(::UnityEngine::Collision* collision);
    // System.Void AddHandHold(UnityEngine.Transform handHold, UnityEngine.Transform grabber, System.Boolean rightHand, System.Boolean rotatePlayerWhenHeld, out UnityEngine.Vector3 grabbedVelocity)
    // Offset: 0x27DBBA4
    void AddHandHold(::UnityEngine::Transform* handHold, ::UnityEngine::Transform* grabber, bool rightHand, bool rotatePlayerWhenHeld, ByRef<::UnityEngine::Vector3> grabbedVelocity);
    // System.Void RemoveHandHold(UnityEngine.Transform handHold, System.Boolean rightHand)
    // Offset: 0x27DBECC
    void RemoveHandHold(::UnityEngine::Transform* handHold, bool rightHand);
    // private System.Void FixedUpdate_HandHolds(System.Single timeDelta)
    // Offset: 0x27D2EC0
    void FixedUpdate_HandHolds(float timeDelta);
    // public System.Void .ctor()
    // Offset: 0x27DC02C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Player* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaLocomotion::Player::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Player*, creationType>()));
    }
    // private System.Boolean <GetSlidePercentage>b__276_2(GorillaLocomotion.Player/MaterialData matData)
    // Offset: 0x27DC5D8
    bool $GetSlidePercentage$b__276_2(::GorillaLocomotion::Player::MaterialData matData);
    // private System.Boolean <GetSlidePercentage>b__276_3(GorillaLocomotion.Player/MaterialData matData)
    // Offset: 0x27DC5EC
    bool $GetSlidePercentage$b__276_3(::GorillaLocomotion::Player::MaterialData matData);
    // private System.Boolean <GetSlidePercentage>b__276_0(GorillaLocomotion.Player/MaterialData matData)
    // Offset: 0x27DC600
    bool $GetSlidePercentage$b__276_0(::GorillaLocomotion::Player::MaterialData matData);
    // private System.Boolean <GetSlidePercentage>b__276_1(GorillaLocomotion.Player/MaterialData matData)
    // Offset: 0x27DC614
    bool $GetSlidePercentage$b__276_1(::GorillaLocomotion::Player::MaterialData matData);
    // static System.Void <BeginClimbing>g__SnapAxis|278_0(ref System.Single val, System.Single maxDist)
    // Offset: 0x27DB314
    static void $BeginClimbing$g__SnapAxis_278_0(ByRef<float> val, float maxDist);
  }; // GorillaLocomotion.Player
  #pragma pack(pop)
  static check_size<sizeof(Player), 1929 + sizeof(bool)> __GorillaLocomotion_PlayerSizeCheck;
  static_assert(sizeof(Player) == 0x78A);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Player::LiquidProperties, "GorillaLocomotion", "Player/LiquidProperties");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaLocomotion::Player::MaterialData, "GorillaLocomotion", "Player/MaterialData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Player* (*)()>(&GorillaLocomotion::Player::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_IsDefaultScale
// Il2CppName: get_IsDefaultScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_IsDefaultScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_IsDefaultScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_turnedThisFrame
// Il2CppName: get_turnedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_turnedThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_turnedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_materialData
// Il2CppName: get_materialData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GorillaLocomotion::Player::MaterialData>* (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_materialData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_materialData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_HeadOverlappingWaterVolumes
// Il2CppName: get_HeadOverlappingWaterVolumes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GorillaLocomotion::Swimming::WaterVolume*>* (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_HeadOverlappingWaterVolumes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_HeadOverlappingWaterVolumes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_InWater
// Il2CppName: get_InWater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_InWater)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_InWater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_HeadInWater
// Il2CppName: get_HeadInWater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_HeadInWater)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_HeadInWater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_CurrentWaterVolume
// Il2CppName: get_CurrentWaterVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Swimming::WaterVolume* (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_CurrentWaterVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_CurrentWaterVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_WaterSurfaceForHead
// Il2CppName: get_WaterSurfaceForHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_WaterSurfaceForHead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_WaterSurfaceForHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_LeftHandWaterVolume
// Il2CppName: get_LeftHandWaterVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Swimming::WaterVolume* (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_LeftHandWaterVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_LeftHandWaterVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_RightHandWaterVolume
// Il2CppName: get_RightHandWaterVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Swimming::WaterVolume* (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_RightHandWaterVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_RightHandWaterVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_LeftHandWaterSurface
// Il2CppName: get_LeftHandWaterSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_LeftHandWaterSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_LeftHandWaterSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_RightHandWaterSurface
// Il2CppName: get_RightHandWaterSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_RightHandWaterSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_RightHandWaterSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_LastLeftHandPosition
// Il2CppName: get_LastLeftHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_LastLeftHandPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_LastLeftHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_LastRightHandPosition
// Il2CppName: get_LastRightHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_LastRightHandPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_LastRightHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_HeadCenterPosition
// Il2CppName: get_HeadCenterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_HeadCenterPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_HeadCenterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_HandContactingSurface
// Il2CppName: get_HandContactingSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_HandContactingSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_HandContactingSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::get_BodyOnGround
// Il2CppName: get_BodyOnGround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::get_BodyOnGround)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "get_BodyOnGround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::set_PlayerRotationOverride
// Il2CppName: set_PlayerRotationOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::UnityEngine::Quaternion)>(&GorillaLocomotion::Player::set_PlayerRotationOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "set_PlayerRotationOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::InitializeValues
// Il2CppName: InitializeValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::InitializeValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "InitializeValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::SetHalloweenLevitation
// Il2CppName: SetHalloweenLevitation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(float, float, float, float, float, float)>(&GorillaLocomotion::Player::SetHalloweenLevitation)> {
  static const MethodInfo* get() {
    static auto* levitateStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* levitateDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* levitateBlendOutDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* levitateBonusStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* levitateBonusOffAtYSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* levitateBonusFullAtYSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "SetHalloweenLevitation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levitateStrength, levitateDuration, levitateBlendOutDuration, levitateBonusStrength, levitateBonusOffAtYSpeed, levitateBonusFullAtYSpeed});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::TeleportToTrain
// Il2CppName: TeleportToTrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(bool)>(&GorillaLocomotion::Player::TeleportToTrain)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "TeleportToTrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::AddForce
// Il2CppName: AddForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&GorillaLocomotion::Player::AddForce)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "AddForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, mode});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::BodyCollider
// Il2CppName: BodyCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::BodyCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "BodyCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::GetCurrentHandPosition
// Il2CppName: GetCurrentHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&GorillaLocomotion::Player::GetCurrentHandPosition)> {
  static const MethodInfo* get() {
    static auto* handTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* handOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "GetCurrentHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handTransform, handOffset});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::GetLastLeftHandPosition
// Il2CppName: GetLastLeftHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::GetLastLeftHandPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "GetLastLeftHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::GetLastRightHandPosition
// Il2CppName: GetLastRightHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::GetLastRightHandPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "GetLastRightHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::GetCurrentLeftHandPosition
// Il2CppName: GetCurrentLeftHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::GetCurrentLeftHandPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "GetCurrentLeftHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::GetCurrentRightHandPosition
// Il2CppName: GetCurrentRightHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::GetCurrentRightHandPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "GetCurrentRightHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::PositionWithOffset
// Il2CppName: PositionWithOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&GorillaLocomotion::Player::PositionWithOffset)> {
  static const MethodInfo* get() {
    static auto* transformToModify = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* offsetVector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "PositionWithOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformToModify, offsetVector});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::stuckHandsCheckFixedUpdate
// Il2CppName: stuckHandsCheckFixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::stuckHandsCheckFixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "stuckHandsCheckFixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::stuckHandsCheckLateUpdate
// Il2CppName: stuckHandsCheckLateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&GorillaLocomotion::Player::stuckHandsCheckLateUpdate)> {
  static const MethodInfo* get() {
    static auto* finalLeftHandPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* finalRightHandPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "stuckHandsCheckLateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finalLeftHandPosition, finalRightHandPosition});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::handleClimbing
// Il2CppName: handleClimbing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(float)>(&GorillaLocomotion::Player::handleClimbing)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "handleClimbing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::FirstHandIteration
// Il2CppName: FirstHandIteration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, bool, bool, bool, ByRef<::UnityEngine::Vector3>, ByRef<float>, ByRef<bool>, ByRef<::UnityEngine::Vector3>, ByRef<bool>, ByRef<int>, ByRef<::GlobalNamespace::GorillaSurfaceOverride*>, bool)>(&GorillaLocomotion::Player::FirstHandIteration)> {
  static const MethodInfo* get() {
    static auto* handTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* handOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lastHandPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* wasHandSlide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* wasHandTouching = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fullSlideOverride = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pushDisplacement = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* handSlipPercentage = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* handSlide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* slideNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* handColliding = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* materialTouchIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* touchedOverride = &::il2cpp_utils::GetClassFromName("", "GorillaSurfaceOverride")->this_arg;
    static auto* skipCollisionChecks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "FirstHandIteration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handTransform, handOffset, lastHandPosition, wasHandSlide, wasHandTouching, fullSlideOverride, pushDisplacement, handSlipPercentage, handSlide, slideNormal, handColliding, materialTouchIndex, touchedOverride, skipCollisionChecks});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::FinalHandPosition
// Il2CppName: FinalHandPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, bool, bool, ByRef<bool>, bool, ByRef<bool>, int, ByRef<int>, ::GlobalNamespace::GorillaSurfaceOverride*, ByRef<::GlobalNamespace::GorillaSurfaceOverride*>, bool)>(&GorillaLocomotion::Player::FinalHandPosition)> {
  static const MethodInfo* get() {
    static auto* handTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* handOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lastHandPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* bothTouching = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isHandTouching = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* handColliding = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* isHandSlide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* handSlide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* currentMaterialTouchIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialTouchIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* currentSurface = &::il2cpp_utils::GetClassFromName("", "GorillaSurfaceOverride")->byval_arg;
    static auto* touchedOverride = &::il2cpp_utils::GetClassFromName("", "GorillaSurfaceOverride")->this_arg;
    static auto* skipCollisionChecks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "FinalHandPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handTransform, handOffset, lastHandPosition, bothTouching, isHandTouching, handColliding, isHandSlide, handSlide, currentMaterialTouchIndex, materialTouchIndex, currentSurface, touchedOverride, skipCollisionChecks});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::IterativeCollisionSphereCast
// Il2CppName: IterativeCollisionSphereCast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::UnityEngine::Vector3, float, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, bool, ByRef<float>, ByRef<::UnityEngine::RaycastHit>, bool)>(&GorillaLocomotion::Player::IterativeCollisionSphereCast)> {
  static const MethodInfo* get() {
    static auto* startPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* sphereRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* movementVector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* endPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* singleHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* slipPercentage = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* iterativeHitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* fullSlide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "IterativeCollisionSphereCast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPosition, sphereRadius, movementVector, endPosition, singleHand, slipPercentage, iterativeHitInfo, fullSlide});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::CollisionsSphereCast
// Il2CppName: CollisionsSphereCast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::UnityEngine::Vector3, float, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::RaycastHit>)>(&GorillaLocomotion::Player::CollisionsSphereCast)> {
  static const MethodInfo* get() {
    static auto* startPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* sphereRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* movementVector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* finalPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* collisionsHitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "CollisionsSphereCast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPosition, sphereRadius, movementVector, finalPosition, collisionsHitInfo});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::IsHandTouching
// Il2CppName: IsHandTouching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(bool)>(&GorillaLocomotion::Player::IsHandTouching)> {
  static const MethodInfo* get() {
    static auto* forLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "IsHandTouching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::IsHandSliding
// Il2CppName: IsHandSliding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(bool)>(&GorillaLocomotion::Player::IsHandSliding)> {
  static const MethodInfo* get() {
    static auto* forLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "IsHandSliding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forLeftHand});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::GetSlidePercentage
// Il2CppName: GetSlidePercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Player::*)(::UnityEngine::RaycastHit)>(&GorillaLocomotion::Player::GetSlidePercentage)> {
  static const MethodInfo* get() {
    static auto* raycastHit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "GetSlidePercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastHit});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::Turn
// Il2CppName: Turn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(float)>(&GorillaLocomotion::Player::Turn)> {
  static const MethodInfo* get() {
    static auto* degrees = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "Turn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{degrees});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::BeginClimbing
// Il2CppName: BeginClimbing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::GorillaLocomotion::Climbing::GorillaClimbable*, ::GorillaLocomotion::Climbing::GorillaHandClimber*, ::GorillaLocomotion::Climbing::GorillaClimbableRef*)>(&GorillaLocomotion::Player::BeginClimbing)> {
  static const MethodInfo* get() {
    static auto* climbable = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Climbing", "GorillaClimbable")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Climbing", "GorillaHandClimber")->byval_arg;
    static auto* climbableRef = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Climbing", "GorillaClimbableRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "BeginClimbing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{climbable, hand, climbableRef});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::VerifyClimbHelper
// Il2CppName: VerifyClimbHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::VerifyClimbHelper)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "VerifyClimbHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::EndClimbing
// Il2CppName: EndClimbing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::GorillaLocomotion::Climbing::GorillaHandClimber*, bool, bool)>(&GorillaLocomotion::Player::EndClimbing)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Climbing", "GorillaHandClimber")->byval_arg;
    static auto* startingNewClimb = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* doDontReclimb = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "EndClimbing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, startingNewClimb, doDontReclimb});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::enablePlayerGravity
// Il2CppName: enablePlayerGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(bool)>(&GorillaLocomotion::Player::enablePlayerGravity)> {
  static const MethodInfo* get() {
    static auto* useGravity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "enablePlayerGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useGravity});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::StoreVelocities
// Il2CppName: StoreVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::StoreVelocities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "StoreVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::AntiTeleportTechnology
// Il2CppName: AntiTeleportTechnology
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::AntiTeleportTechnology)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "AntiTeleportTechnology", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::MaxSphereSizeForNoOverlap
// Il2CppName: MaxSphereSizeForNoOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(float, ::UnityEngine::Vector3, bool, ByRef<float>)>(&GorillaLocomotion::Player::MaxSphereSizeForNoOverlap)> {
  static const MethodInfo* get() {
    static auto* testRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* checkPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ignoreOneWay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* overlapRadiusTest = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "MaxSphereSizeForNoOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{testRadius, checkPosition, ignoreOneWay, overlapRadiusTest});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::CrazyCheck2
// Il2CppName: CrazyCheck2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(float, ::UnityEngine::Vector3)>(&GorillaLocomotion::Player::CrazyCheck2)> {
  static const MethodInfo* get() {
    static auto* sphereSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "CrazyCheck2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sphereSize, startPosition});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::NonAllocRaycast
// Il2CppName: NonAllocRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaLocomotion::Player::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaLocomotion::Player::NonAllocRaycast)> {
  static const MethodInfo* get() {
    static auto* startPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* endPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "NonAllocRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPosition, endPosition});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::ClearColliderBuffer
// Il2CppName: ClearColliderBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(ByRef<::ArrayW<::UnityEngine::Collider*>>)>(&GorillaLocomotion::Player::ClearColliderBuffer)> {
  static const MethodInfo* get() {
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "ClearColliderBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colliders});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::ClearRaycasthitBuffer
// Il2CppName: ClearRaycasthitBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(ByRef<::ArrayW<::UnityEngine::RaycastHit>>)>(&GorillaLocomotion::Player::ClearRaycasthitBuffer)> {
  static const MethodInfo* get() {
    static auto* raycastHits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "ClearRaycasthitBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastHits});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::MovingSurfaceMovement
// Il2CppName: MovingSurfaceMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::MovingSurfaceMovement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "MovingSurfaceMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::ComputeLocalHitPoint
// Il2CppName: ComputeLocalHitPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::RaycastHit, ByRef<::UnityEngine::Vector3>)>(&GorillaLocomotion::Player::ComputeLocalHitPoint)> {
  static const MethodInfo* get() {
    static auto* hit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* localHitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "ComputeLocalHitPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hit, localHitPoint});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::ComputeWorldHitPoint
// Il2CppName: ComputeWorldHitPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::RaycastHit, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>)>(&GorillaLocomotion::Player::ComputeWorldHitPoint)> {
  static const MethodInfo* get() {
    static auto* hit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* localPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* worldHitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "ComputeWorldHitPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hit, localPoint, worldHitPoint});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::ExtraVelMultiplier
// Il2CppName: ExtraVelMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::ExtraVelMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "ExtraVelMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::ExtraVelMaxMultiplier
// Il2CppName: ExtraVelMaxMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::ExtraVelMaxMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "ExtraVelMaxMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::SetMaximumSlipThisFrame
// Il2CppName: SetMaximumSlipThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::SetMaximumSlipThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "SetMaximumSlipThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::SetLeftMaximumSlipThisFrame
// Il2CppName: SetLeftMaximumSlipThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::SetLeftMaximumSlipThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "SetLeftMaximumSlipThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::SetRightMaximumSlipThisFrame
// Il2CppName: SetRightMaximumSlipThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::SetRightMaximumSlipThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "SetRightMaximumSlipThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::LeftSlipOverriddenToMax
// Il2CppName: LeftSlipOverriddenToMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::LeftSlipOverriddenToMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "LeftSlipOverriddenToMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::RightSlipOverriddenToMax
// Il2CppName: RightSlipOverriddenToMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)()>(&GorillaLocomotion::Player::RightSlipOverriddenToMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "RightSlipOverriddenToMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::OnEnterWaterVolume
// Il2CppName: OnEnterWaterVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::UnityEngine::Collider*, ::GorillaLocomotion::Swimming::WaterVolume*)>(&GorillaLocomotion::Player::OnEnterWaterVolume)> {
  static const MethodInfo* get() {
    static auto* playerCollider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "OnEnterWaterVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerCollider, volume});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::OnExitWaterVolume
// Il2CppName: OnExitWaterVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::UnityEngine::Collider*, ::GorillaLocomotion::Swimming::WaterVolume*)>(&GorillaLocomotion::Player::OnExitWaterVolume)> {
  static const MethodInfo* get() {
    static auto* playerCollider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "OnExitWaterVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerCollider, volume});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::GetSwimmingVelocityForHand
// Il2CppName: GetSwimmingVelocityForHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ByRef<::GorillaLocomotion::Swimming::WaterVolume*>, ByRef<::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery>, ByRef<::UnityEngine::Vector3>)>(&GorillaLocomotion::Player::GetSwimmingVelocityForHand)> {
  static const MethodInfo* get() {
    static auto* startingHandPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* endingHandPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* palmForwardDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactingWaterVolume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->this_arg;
    static auto* waterSurface = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume/SurfaceQuery")->this_arg;
    static auto* swimmingVelocityChange = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "GetSwimmingVelocityForHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startingHandPosition, endingHandPosition, palmForwardDirection, dt, contactingWaterVolume, waterSurface, swimmingVelocityChange});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::CheckWaterSurfaceJump
// Il2CppName: CheckWaterSurfaceJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::GorillaLocomotion::Swimming::PlayerSwimmingParameters*, ::GorillaLocomotion::Swimming::WaterVolume*, ::GorillaLocomotion::Swimming::WaterVolume::SurfaceQuery, ByRef<::UnityEngine::Vector3>)>(&GorillaLocomotion::Player::CheckWaterSurfaceJump)> {
  static const MethodInfo* get() {
    static auto* startingHandPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* endingHandPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* palmForwardDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* handAvgVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "PlayerSwimmingParameters")->byval_arg;
    static auto* contactingWaterVolume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    static auto* waterSurface = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume/SurfaceQuery")->byval_arg;
    static auto* jumpVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "CheckWaterSurfaceJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startingHandPosition, endingHandPosition, palmForwardDirection, handAvgVelocity, parameters, contactingWaterVolume, waterSurface, jumpVelocity});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::TryNormalize
// Il2CppName: TryNormalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<float>, float)>(&GorillaLocomotion::Player::TryNormalize)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* normalized = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "TryNormalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, normalized, magnitude, eps});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::TryNormalizeDown
// Il2CppName: TryNormalizeDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<float>, float)>(&GorillaLocomotion::Player::TryNormalizeDown)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* normalized = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* eps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "TryNormalizeDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, normalized, magnitude, eps});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::OnCollisionStay
// Il2CppName: OnCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::UnityEngine::Collision*)>(&GorillaLocomotion::Player::OnCollisionStay)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "OnCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::AddHandHold
// Il2CppName: AddHandHold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::UnityEngine::Transform*, ::UnityEngine::Transform*, bool, bool, ByRef<::UnityEngine::Vector3>)>(&GorillaLocomotion::Player::AddHandHold)> {
  static const MethodInfo* get() {
    static auto* handHold = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* grabber = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* rightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* rotatePlayerWhenHeld = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* grabbedVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "AddHandHold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handHold, grabber, rightHand, rotatePlayerWhenHeld, grabbedVelocity});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::RemoveHandHold
// Il2CppName: RemoveHandHold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(::UnityEngine::Transform*, bool)>(&GorillaLocomotion::Player::RemoveHandHold)> {
  static const MethodInfo* get() {
    static auto* handHold = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* rightHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "RemoveHandHold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handHold, rightHand});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::FixedUpdate_HandHolds
// Il2CppName: FixedUpdate_HandHolds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaLocomotion::Player::*)(float)>(&GorillaLocomotion::Player::FixedUpdate_HandHolds)> {
  static const MethodInfo* get() {
    static auto* timeDelta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "FixedUpdate_HandHolds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeDelta});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaLocomotion::Player::$GetSlidePercentage$b__276_2
// Il2CppName: <GetSlidePercentage>b__276_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::GorillaLocomotion::Player::MaterialData)>(&GorillaLocomotion::Player::$GetSlidePercentage$b__276_2)> {
  static const MethodInfo* get() {
    static auto* matData = &::il2cpp_utils::GetClassFromName("GorillaLocomotion", "Player/MaterialData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "<GetSlidePercentage>b__276_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matData});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::$GetSlidePercentage$b__276_3
// Il2CppName: <GetSlidePercentage>b__276_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::GorillaLocomotion::Player::MaterialData)>(&GorillaLocomotion::Player::$GetSlidePercentage$b__276_3)> {
  static const MethodInfo* get() {
    static auto* matData = &::il2cpp_utils::GetClassFromName("GorillaLocomotion", "Player/MaterialData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "<GetSlidePercentage>b__276_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matData});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::$GetSlidePercentage$b__276_0
// Il2CppName: <GetSlidePercentage>b__276_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::GorillaLocomotion::Player::MaterialData)>(&GorillaLocomotion::Player::$GetSlidePercentage$b__276_0)> {
  static const MethodInfo* get() {
    static auto* matData = &::il2cpp_utils::GetClassFromName("GorillaLocomotion", "Player/MaterialData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "<GetSlidePercentage>b__276_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matData});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::$GetSlidePercentage$b__276_1
// Il2CppName: <GetSlidePercentage>b__276_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaLocomotion::Player::*)(::GorillaLocomotion::Player::MaterialData)>(&GorillaLocomotion::Player::$GetSlidePercentage$b__276_1)> {
  static const MethodInfo* get() {
    static auto* matData = &::il2cpp_utils::GetClassFromName("GorillaLocomotion", "Player/MaterialData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "<GetSlidePercentage>b__276_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matData});
  }
};
// Writing MetadataGetter for method: GorillaLocomotion::Player::$BeginClimbing$g__SnapAxis_278_0
// Il2CppName: <BeginClimbing>g__SnapAxis|278_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, float)>(&GorillaLocomotion::Player::$BeginClimbing$g__SnapAxis_278_0)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxDist = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaLocomotion::Player*), "<BeginClimbing>g__SnapAxis|278_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val, maxDist});
  }
};
