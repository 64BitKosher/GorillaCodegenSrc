// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRMultimodalHandsAndControllersSample
  class OVRMultimodalHandsAndControllersSample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRMultimodalHandsAndControllersSample);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRMultimodalHandsAndControllersSample*, "", "OVRMultimodalHandsAndControllersSample");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: OVRMultimodalHandsAndControllersSample
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class OVRMultimodalHandsAndControllersSample : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.UI.Button enableButton
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Button* enableButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button disableButton
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Button* disableButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // public UnityEngine.UI.Text displayText
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* displayText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UI.Button enableButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn_enableButton();
    // Get instance field reference: private UnityEngine.UI.Button disableButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn_disableButton();
    // Get instance field reference: public UnityEngine.UI.Text displayText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_displayText();
    // private System.Void Awake()
    // Offset: 0x48E14BC
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x48E14C0
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0x48E14C4
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x48E14C8
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x48E14CC
    void Update();
    // public System.Void EnableMultiModality()
    // Offset: 0x48E15B4
    void EnableMultiModality();
    // public System.Void DisableMultiModality()
    // Offset: 0x48E1634
    void DisableMultiModality();
    // public System.Void .ctor()
    // Offset: 0x48E16B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRMultimodalHandsAndControllersSample* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRMultimodalHandsAndControllersSample::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRMultimodalHandsAndControllersSample*, creationType>()));
    }
  }; // OVRMultimodalHandsAndControllersSample
  #pragma pack(pop)
  static check_size<sizeof(OVRMultimodalHandsAndControllersSample), 48 + sizeof(::UnityEngine::UI::Text*)> __GlobalNamespace_OVRMultimodalHandsAndControllersSampleSizeCheck;
  static_assert(sizeof(OVRMultimodalHandsAndControllersSample) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRMultimodalHandsAndControllersSample::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRMultimodalHandsAndControllersSample::*)()>(&GlobalNamespace::OVRMultimodalHandsAndControllersSample::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMultimodalHandsAndControllersSample*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMultimodalHandsAndControllersSample::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRMultimodalHandsAndControllersSample::*)()>(&GlobalNamespace::OVRMultimodalHandsAndControllersSample::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMultimodalHandsAndControllersSample*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMultimodalHandsAndControllersSample::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRMultimodalHandsAndControllersSample::*)()>(&GlobalNamespace::OVRMultimodalHandsAndControllersSample::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMultimodalHandsAndControllersSample*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMultimodalHandsAndControllersSample::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRMultimodalHandsAndControllersSample::*)()>(&GlobalNamespace::OVRMultimodalHandsAndControllersSample::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMultimodalHandsAndControllersSample*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMultimodalHandsAndControllersSample::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRMultimodalHandsAndControllersSample::*)()>(&GlobalNamespace::OVRMultimodalHandsAndControllersSample::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMultimodalHandsAndControllersSample*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMultimodalHandsAndControllersSample::EnableMultiModality
// Il2CppName: EnableMultiModality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRMultimodalHandsAndControllersSample::*)()>(&GlobalNamespace::OVRMultimodalHandsAndControllersSample::EnableMultiModality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMultimodalHandsAndControllersSample*), "EnableMultiModality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMultimodalHandsAndControllersSample::DisableMultiModality
// Il2CppName: DisableMultiModality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRMultimodalHandsAndControllersSample::*)()>(&GlobalNamespace::OVRMultimodalHandsAndControllersSample::DisableMultiModality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRMultimodalHandsAndControllersSample*), "DisableMultiModality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRMultimodalHandsAndControllersSample::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
