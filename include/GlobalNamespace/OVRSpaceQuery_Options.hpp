// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRSpaceQuery
#include "GlobalNamespace/OVRSpaceQuery.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRSpace/StorageLocation
#include "GlobalNamespace/OVRSpace_StorageLocation.hpp"
// Including type: OVRPlugin/SpaceQueryType
#include "GlobalNamespace/OVRPlugin_SpaceQueryType.hpp"
// Including type: OVRPlugin/SpaceQueryActionType
#include "GlobalNamespace/OVRPlugin_SpaceQueryActionType.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSpaceQuery::Options, "", "OVRSpaceQuery/Options");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRSpaceQuery/Options
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRSpaceQuery::Options/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 <MaxResults>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int MaxResults;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: MaxResults and: Timeout
    char __padding0[0x4] = {};
    // private System.Double <Timeout>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    double Timeout;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private OVRSpace/StorageLocation <Location>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::OVRSpace::StorageLocation Location;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSpace::StorageLocation) == 0x4);
    // private OVRPlugin/SpaceQueryType <QueryType>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::GlobalNamespace::OVRPlugin::SpaceQueryType QueryType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceQueryType) == 0x4);
    // private OVRPlugin/SpaceQueryActionType <ActionType>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::OVRPlugin::SpaceQueryActionType ActionType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceQueryActionType) == 0x4);
    // private OVRPlugin/SpaceComponentType _componentType
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::OVRPlugin::SpaceComponentType componentType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::SpaceComponentType) == 0x4);
    // private System.Collections.Generic.IEnumerable`1<System.Guid> _uuidFilter
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IEnumerable_1<::System::Guid>* uuidFilter;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<::System::Guid>*) == 0x8);
    public:
    // Creating value type constructor for type: Options
    constexpr Options(int MaxResults_ = {}, double Timeout_ = {}, ::GlobalNamespace::OVRSpace::StorageLocation Location_ = {}, ::GlobalNamespace::OVRPlugin::SpaceQueryType QueryType_ = {}, ::GlobalNamespace::OVRPlugin::SpaceQueryActionType ActionType_ = {}, ::GlobalNamespace::OVRPlugin::SpaceComponentType componentType_ = {}, ::System::Collections::Generic::IEnumerable_1<::System::Guid>* uuidFilter_ = {}) noexcept : MaxResults{MaxResults_}, Timeout{Timeout_}, Location{Location_}, QueryType{QueryType_}, ActionType{ActionType_}, componentType{componentType_}, uuidFilter{uuidFilter_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 MaxUuidCount
    static constexpr const int MaxUuidCount = 1024;
    // Get static field: static public System.Int32 MaxUuidCount
    static int _get_MaxUuidCount();
    // Set static field: static public System.Int32 MaxUuidCount
    static void _set_MaxUuidCount(int value);
    // Get static field: static private readonly System.Guid[] Ids
    static ::ArrayW<::System::Guid> _get_Ids();
    // Set static field: static private readonly System.Guid[] Ids
    static void _set_Ids(::ArrayW<::System::Guid> value);
    // Get static field: static private readonly OVRPlugin/SpaceComponentType[] ComponentTypes
    static ::ArrayW<::GlobalNamespace::OVRPlugin::SpaceComponentType> _get_ComponentTypes();
    // Set static field: static private readonly OVRPlugin/SpaceComponentType[] ComponentTypes
    static void _set_ComponentTypes(::ArrayW<::GlobalNamespace::OVRPlugin::SpaceComponentType> value);
    // Get instance field reference: private System.Int32 <MaxResults>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MaxResults$k__BackingField();
    // Get instance field reference: private System.Double <Timeout>k__BackingField
    [[deprecated("Use field access instead!")]] double& dyn_$Timeout$k__BackingField();
    // Get instance field reference: private OVRSpace/StorageLocation <Location>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSpace::StorageLocation& dyn_$Location$k__BackingField();
    // Get instance field reference: private OVRPlugin/SpaceQueryType <QueryType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceQueryType& dyn_$QueryType$k__BackingField();
    // Get instance field reference: private OVRPlugin/SpaceQueryActionType <ActionType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceQueryActionType& dyn_$ActionType$k__BackingField();
    // Get instance field reference: private OVRPlugin/SpaceComponentType _componentType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SpaceComponentType& dyn__componentType();
    // Get instance field reference: private System.Collections.Generic.IEnumerable`1<System.Guid> _uuidFilter
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::System::Guid>*& dyn__uuidFilter();
    // public System.Int32 get_MaxResults()
    // Offset: 0x4928B58
    int get_MaxResults();
    // public System.Void set_MaxResults(System.Int32 value)
    // Offset: 0x4928B60
    void set_MaxResults(int value);
    // public System.Double get_Timeout()
    // Offset: 0x4928B68
    double get_Timeout();
    // public System.Void set_Timeout(System.Double value)
    // Offset: 0x4928B70
    void set_Timeout(double value);
    // public OVRSpace/StorageLocation get_Location()
    // Offset: 0x4928B78
    ::GlobalNamespace::OVRSpace::StorageLocation get_Location();
    // public System.Void set_Location(OVRSpace/StorageLocation value)
    // Offset: 0x4928B80
    void set_Location(::GlobalNamespace::OVRSpace::StorageLocation value);
    // public OVRPlugin/SpaceQueryType get_QueryType()
    // Offset: 0x4928B88
    ::GlobalNamespace::OVRPlugin::SpaceQueryType get_QueryType();
    // public System.Void set_QueryType(OVRPlugin/SpaceQueryType value)
    // Offset: 0x4928B90
    void set_QueryType(::GlobalNamespace::OVRPlugin::SpaceQueryType value);
    // public OVRPlugin/SpaceQueryActionType get_ActionType()
    // Offset: 0x4928B98
    ::GlobalNamespace::OVRPlugin::SpaceQueryActionType get_ActionType();
    // public System.Void set_ActionType(OVRPlugin/SpaceQueryActionType value)
    // Offset: 0x4928BA0
    void set_ActionType(::GlobalNamespace::OVRPlugin::SpaceQueryActionType value);
    // public OVRPlugin/SpaceComponentType get_ComponentFilter()
    // Offset: 0x4928BA8
    ::GlobalNamespace::OVRPlugin::SpaceComponentType get_ComponentFilter();
    // public System.Void set_ComponentFilter(OVRPlugin/SpaceComponentType value)
    // Offset: 0x4928BB0
    void set_ComponentFilter(::GlobalNamespace::OVRPlugin::SpaceComponentType value);
    // public System.Collections.Generic.IEnumerable`1<System.Guid> get_UuidFilter()
    // Offset: 0x4928C78
    ::System::Collections::Generic::IEnumerable_1<::System::Guid>* get_UuidFilter();
    // public System.Void set_UuidFilter(System.Collections.Generic.IEnumerable`1<System.Guid> value)
    // Offset: 0x4928C80
    void set_UuidFilter(::System::Collections::Generic::IEnumerable_1<::System::Guid>* value);
    // public System.Void .ctor(OVRSpaceQuery/Options other)
    // Offset: 0x4928E64
    // ABORTED: is copy constructor.  Options(::GlobalNamespace::OVRSpaceQuery::Options other);
    // public OVRPlugin/SpaceQueryInfo ToQueryInfo()
    // Offset: 0x4928E98
    ::GlobalNamespace::OVRPlugin::SpaceQueryInfo ToQueryInfo();
    // public System.Boolean TryQuerySpaces(out System.UInt64 requestId)
    // Offset: 0x4929270
    bool TryQuerySpaces(ByRef<uint64_t> requestId);
    // static private System.Void ValidateSingleFilter(System.Collections.Generic.IEnumerable`1<System.Guid> uuidFilter, OVRPlugin/SpaceComponentType componentFilter)
    // Offset: 0x4928C20
    static void ValidateSingleFilter(::System::Collections::Generic::IEnumerable_1<::System::Guid>* uuidFilter, ::GlobalNamespace::OVRPlugin::SpaceComponentType componentFilter);
    // static private System.Void .cctor()
    // Offset: 0x49293C4
    static void _cctor();
  }; // OVRSpaceQuery/Options
  #pragma pack(pop)
  static check_size<sizeof(OVRSpaceQuery::Options), 32 + sizeof(::System::Collections::Generic::IEnumerable_1<::System::Guid>*)> __GlobalNamespace_OVRSpaceQuery_OptionsSizeCheck;
  static_assert(sizeof(OVRSpaceQuery::Options) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::get_MaxResults
// Il2CppName: get_MaxResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRSpaceQuery::Options::*)()>(&GlobalNamespace::OVRSpaceQuery::Options::get_MaxResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "get_MaxResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::set_MaxResults
// Il2CppName: set_MaxResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpaceQuery::Options::*)(int)>(&GlobalNamespace::OVRSpaceQuery::Options::set_MaxResults)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "set_MaxResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::get_Timeout
// Il2CppName: get_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::OVRSpaceQuery::Options::*)()>(&GlobalNamespace::OVRSpaceQuery::Options::get_Timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "get_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::set_Timeout
// Il2CppName: set_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpaceQuery::Options::*)(double)>(&GlobalNamespace::OVRSpaceQuery::Options::set_Timeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "set_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::get_Location
// Il2CppName: get_Location
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRSpace::StorageLocation (GlobalNamespace::OVRSpaceQuery::Options::*)()>(&GlobalNamespace::OVRSpaceQuery::Options::get_Location)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "get_Location", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::set_Location
// Il2CppName: set_Location
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpaceQuery::Options::*)(::GlobalNamespace::OVRSpace::StorageLocation)>(&GlobalNamespace::OVRSpaceQuery::Options::set_Location)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRSpace/StorageLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "set_Location", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::get_QueryType
// Il2CppName: get_QueryType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceQueryType (GlobalNamespace::OVRSpaceQuery::Options::*)()>(&GlobalNamespace::OVRSpaceQuery::Options::get_QueryType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "get_QueryType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::set_QueryType
// Il2CppName: set_QueryType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpaceQuery::Options::*)(::GlobalNamespace::OVRPlugin::SpaceQueryType)>(&GlobalNamespace::OVRSpaceQuery::Options::set_QueryType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceQueryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "set_QueryType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::get_ActionType
// Il2CppName: get_ActionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceQueryActionType (GlobalNamespace::OVRSpaceQuery::Options::*)()>(&GlobalNamespace::OVRSpaceQuery::Options::get_ActionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "get_ActionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::set_ActionType
// Il2CppName: set_ActionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpaceQuery::Options::*)(::GlobalNamespace::OVRPlugin::SpaceQueryActionType)>(&GlobalNamespace::OVRSpaceQuery::Options::set_ActionType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceQueryActionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "set_ActionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::get_ComponentFilter
// Il2CppName: get_ComponentFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRSpaceQuery::Options::*)()>(&GlobalNamespace::OVRSpaceQuery::Options::get_ComponentFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "get_ComponentFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::set_ComponentFilter
// Il2CppName: set_ComponentFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpaceQuery::Options::*)(::GlobalNamespace::OVRPlugin::SpaceComponentType)>(&GlobalNamespace::OVRSpaceQuery::Options::set_ComponentFilter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "set_ComponentFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::get_UuidFilter
// Il2CppName: get_UuidFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Guid>* (GlobalNamespace::OVRSpaceQuery::Options::*)()>(&GlobalNamespace::OVRSpaceQuery::Options::get_UuidFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "get_UuidFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::set_UuidFilter
// Il2CppName: set_UuidFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSpaceQuery::Options::*)(::System::Collections::Generic::IEnumerable_1<::System::Guid>*)>(&GlobalNamespace::OVRSpaceQuery::Options::set_UuidFilter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "set_UuidFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::Options
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::ToQueryInfo
// Il2CppName: ToQueryInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceQueryInfo (GlobalNamespace::OVRSpaceQuery::Options::*)()>(&GlobalNamespace::OVRSpaceQuery::Options::ToQueryInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "ToQueryInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::TryQuerySpaces
// Il2CppName: TryQuerySpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSpaceQuery::Options::*)(ByRef<uint64_t>)>(&GlobalNamespace::OVRSpaceQuery::Options::TryQuerySpaces)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "TryQuerySpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::ValidateSingleFilter
// Il2CppName: ValidateSingleFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IEnumerable_1<::System::Guid>*, ::GlobalNamespace::OVRPlugin::SpaceComponentType)>(&GlobalNamespace::OVRSpaceQuery::Options::ValidateSingleFilter)> {
  static const MethodInfo* get() {
    static auto* uuidFilter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    static auto* componentFilter = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SpaceComponentType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), "ValidateSingleFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uuidFilter, componentFilter});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSpaceQuery::Options::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRSpaceQuery::Options::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSpaceQuery::Options), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
