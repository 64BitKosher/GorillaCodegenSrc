// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ProcessPort
  class ProcessPort;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ProcessPort);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ProcessPort*, "", "ProcessPort");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ProcessPort
  // [TokenAttribute] Offset: FFFFFFFF
  class ProcessPort : public ::Il2CppObject {
    public:
    public:
    // private System.String <processName>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW processName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 <processId>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int processId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: processId and: portNumber
    char __padding1[0x4] = {};
    // private System.String <portNumber>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW portNumber;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <protocol>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW protocol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String <processName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$processName$k__BackingField();
    // Get instance field reference: private System.Int32 <processId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$processId$k__BackingField();
    // Get instance field reference: private System.String <portNumber>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$portNumber$k__BackingField();
    // Get instance field reference: private System.String <protocol>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$protocol$k__BackingField();
    // public System.String get_processName()
    // Offset: 0x493E340
    ::StringW get_processName();
    // public System.Void set_processName(System.String value)
    // Offset: 0x493E348
    void set_processName(::StringW value);
    // public System.Int32 get_processId()
    // Offset: 0x493E350
    int get_processId();
    // public System.Void set_processId(System.Int32 value)
    // Offset: 0x493E358
    void set_processId(int value);
    // public System.String get_portNumber()
    // Offset: 0x493E360
    ::StringW get_portNumber();
    // public System.Void set_portNumber(System.String value)
    // Offset: 0x493E368
    void set_portNumber(::StringW value);
    // public System.String get_protocol()
    // Offset: 0x493E370
    ::StringW get_protocol();
    // public System.Void set_protocol(System.String value)
    // Offset: 0x493E378
    void set_protocol(::StringW value);
    // static private System.String LookupProcess(System.Int32 pid)
    // Offset: 0x493E380
    static ::StringW LookupProcess(int pid);
    // static public System.Collections.Generic.List`1<ProcessPort> GetProcessesByPort(System.String targetPort)
    // Offset: 0x493E44C
    static ::System::Collections::Generic::List_1<::GlobalNamespace::ProcessPort*>* GetProcessesByPort(::StringW targetPort);
    // public System.Void .ctor()
    // Offset: 0x493EFB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProcessPort* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProcessPort::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProcessPort*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x493E1A8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // ProcessPort
  #pragma pack(pop)
  static check_size<sizeof(ProcessPort), 40 + sizeof(::StringW)> __GlobalNamespace_ProcessPortSizeCheck;
  static_assert(sizeof(ProcessPort) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::get_processName
// Il2CppName: get_processName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ProcessPort::*)()>(&GlobalNamespace::ProcessPort::get_processName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "get_processName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::set_processName
// Il2CppName: set_processName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProcessPort::*)(::StringW)>(&GlobalNamespace::ProcessPort::set_processName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "set_processName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::get_processId
// Il2CppName: get_processId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ProcessPort::*)()>(&GlobalNamespace::ProcessPort::get_processId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "get_processId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::set_processId
// Il2CppName: set_processId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProcessPort::*)(int)>(&GlobalNamespace::ProcessPort::set_processId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "set_processId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::get_portNumber
// Il2CppName: get_portNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ProcessPort::*)()>(&GlobalNamespace::ProcessPort::get_portNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "get_portNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::set_portNumber
// Il2CppName: set_portNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProcessPort::*)(::StringW)>(&GlobalNamespace::ProcessPort::set_portNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "set_portNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::get_protocol
// Il2CppName: get_protocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ProcessPort::*)()>(&GlobalNamespace::ProcessPort::get_protocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "get_protocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::set_protocol
// Il2CppName: set_protocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProcessPort::*)(::StringW)>(&GlobalNamespace::ProcessPort::set_protocol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "set_protocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::LookupProcess
// Il2CppName: LookupProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&GlobalNamespace::ProcessPort::LookupProcess)> {
  static const MethodInfo* get() {
    static auto* pid = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "LookupProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pid});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::GetProcessesByPort
// Il2CppName: GetProcessesByPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::ProcessPort*>* (*)(::StringW)>(&GlobalNamespace::ProcessPort::GetProcessesByPort)> {
  static const MethodInfo* get() {
    static auto* targetPort = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "GetProcessesByPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPort});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ProcessPort::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ProcessPort::*)()>(&GlobalNamespace::ProcessPort::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProcessPort*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
