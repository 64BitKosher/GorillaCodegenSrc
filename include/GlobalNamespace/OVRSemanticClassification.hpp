// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IOVRSceneComponent
#include "GlobalNamespace/IOVRSceneComponent.hpp"
// Including type: System.Char
#include "System/Char.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRSemanticClassification
  class OVRSemanticClassification;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRSemanticClassification);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRSemanticClassification*, "", "OVRSemanticClassification");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: OVRSemanticClassification
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class OVRSemanticClassification : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IOVRSceneComponent*/ {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<System.String> _labels
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::StringW>* labels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IOVRSceneComponent
    operator ::GlobalNamespace::IOVRSceneComponent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IOVRSceneComponent*>(this);
    }
    // static field const value: static public System.Char LabelSeparator
    static constexpr const ::Il2CppChar LabelSeparator = u',';
    // Get static field: static public System.Char LabelSeparator
    static ::Il2CppChar _get_LabelSeparator();
    // Set static field: static public System.Char LabelSeparator
    static void _set_LabelSeparator(::Il2CppChar value);
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.String> _labels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__labels();
    // public System.Collections.Generic.IReadOnlyList`1<System.String> get_Labels()
    // Offset: 0x4928110
    ::System::Collections::Generic::IReadOnlyList_1<::StringW>* get_Labels();
    // public System.Boolean Contains(System.String label)
    // Offset: 0x4928118
    bool Contains(::StringW label);
    // private System.Void Awake()
    // Offset: 0x492827C
    void Awake();
    // private System.Void IOVRSceneComponent.Initialize()
    // Offset: 0x492834C
    void IOVRSceneComponent_Initialize();
    // static System.String ValidateAndUpgradeLabels(System.String labels)
    // Offset: 0x492846C
    static ::StringW ValidateAndUpgradeLabels(::StringW labels);
    // public System.Void .ctor()
    // Offset: 0x4928910
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRSemanticClassification* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRSemanticClassification::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRSemanticClassification*, creationType>()));
    }
  }; // OVRSemanticClassification
  #pragma pack(pop)
  static check_size<sizeof(OVRSemanticClassification), 32 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __GlobalNamespace_OVRSemanticClassificationSizeCheck;
  static_assert(sizeof(OVRSemanticClassification) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRSemanticClassification::get_Labels
// Il2CppName: get_Labels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::StringW>* (GlobalNamespace::OVRSemanticClassification::*)()>(&GlobalNamespace::OVRSemanticClassification::get_Labels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSemanticClassification*), "get_Labels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSemanticClassification::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRSemanticClassification::*)(::StringW)>(&GlobalNamespace::OVRSemanticClassification::Contains)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSemanticClassification*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSemanticClassification::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSemanticClassification::*)()>(&GlobalNamespace::OVRSemanticClassification::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSemanticClassification*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSemanticClassification::IOVRSceneComponent_Initialize
// Il2CppName: IOVRSceneComponent.Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRSemanticClassification::*)()>(&GlobalNamespace::OVRSemanticClassification::IOVRSceneComponent_Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSemanticClassification*), "IOVRSceneComponent.Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSemanticClassification::ValidateAndUpgradeLabels
// Il2CppName: ValidateAndUpgradeLabels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&GlobalNamespace::OVRSemanticClassification::ValidateAndUpgradeLabels)> {
  static const MethodInfo* get() {
    static auto* labels = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRSemanticClassification*), "ValidateAndUpgradeLabels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{labels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRSemanticClassification::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
