// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MothershipResponse
#include "GlobalNamespace/MothershipResponse.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LoginResponse
  class LoginResponse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LoginResponse);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LoginResponse*, "", "LoginResponse");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: LoginResponse
  // [TokenAttribute] Offset: FFFFFFFF
  class LoginResponse : public ::GlobalNamespace::MothershipResponse {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x28
    char ___base_padding[0x7] = {};
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x28
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    public:
    // Creating conversion operator: operator ::System::Runtime::InteropServices::HandleRef
    constexpr operator ::System::Runtime::InteropServices::HandleRef() const noexcept {
      return swigCPtr;
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // public System.String get_MothershipPlayerId()
    // Offset: 0x2677918
    ::StringW get_MothershipPlayerId();
    // static public LoginResponse FromMothershipResponse(MothershipResponse response)
    // Offset: 0x2677A74
    static ::GlobalNamespace::LoginResponse* FromMothershipResponse(::GlobalNamespace::MothershipResponse* response);
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x26774C4
    // Implemented from: MothershipResponse
    // Base method: System.Void MothershipResponse::.ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoginResponse* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LoginResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoginResponse*, creationType>(cPtr, cMemoryOwn)));
    }
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x26775EC
    // Implemented from: MothershipResponse
    // Base method: System.Void MothershipResponse::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // LoginResponse
  #pragma pack(pop)
  static check_size<sizeof(LoginResponse), 40 + sizeof(::System::Runtime::InteropServices::HandleRef)> __GlobalNamespace_LoginResponseSizeCheck;
  static_assert(sizeof(LoginResponse) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LoginResponse::get_MothershipPlayerId
// Il2CppName: get_MothershipPlayerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LoginResponse::*)()>(&GlobalNamespace::LoginResponse::get_MothershipPlayerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LoginResponse*), "get_MothershipPlayerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LoginResponse::FromMothershipResponse
// Il2CppName: FromMothershipResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LoginResponse* (*)(::GlobalNamespace::MothershipResponse*)>(&GlobalNamespace::LoginResponse::FromMothershipResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("", "MothershipResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LoginResponse*), "FromMothershipResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LoginResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LoginResponse::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LoginResponse::*)(bool)>(&GlobalNamespace::LoginResponse::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LoginResponse*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
