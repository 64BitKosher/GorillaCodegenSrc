// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: NetPlayer
#include "GlobalNamespace/NetPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PunNetPlayer
  class PunNetPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PunNetPlayer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PunNetPlayer*, "", "PunNetPlayer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PunNetPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class PunNetPlayer : public ::GlobalNamespace::NetPlayer {
    public:
    public:
    // private Photon.Realtime.Player <playerRef>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Realtime::Player* playerRef;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    public:
    // Creating conversion operator: operator ::Photon::Realtime::Player*
    constexpr operator ::Photon::Realtime::Player*() const noexcept {
      return playerRef;
    }
    // Get instance field reference: private Photon.Realtime.Player <playerRef>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_$playerRef$k__BackingField();
    // public Photon.Realtime.Player get_playerRef()
    // Offset: 0x291B4A0
    ::Photon::Realtime::Player* get_playerRef();
    // private System.Void set_playerRef(Photon.Realtime.Player value)
    // Offset: 0x291B4A8
    void set_playerRef(::Photon::Realtime::Player* value);
    // public System.Void .ctor(Photon.Realtime.Player playerRef)
    // Offset: 0x2915A2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PunNetPlayer* New_ctor(::Photon::Realtime::Player* playerRef) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PunNetPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PunNetPlayer*, creationType>(playerRef)));
    }
    // public override System.Boolean get_IsValid()
    // Offset: 0x291B4B0
    // Implemented from: NetPlayer
    // Base method: System.Boolean NetPlayer::get_IsValid()
    bool get_IsValid();
    // public override System.Int32 get_ID()
    // Offset: 0x291B4D4
    // Implemented from: NetPlayer
    // Base method: System.Int32 NetPlayer::get_ID()
    int get_ID();
    // public override System.String get_UserId()
    // Offset: 0x291B4F0
    // Implemented from: NetPlayer
    // Base method: System.String NetPlayer::get_UserId()
    ::StringW get_UserId();
    // public override System.Boolean get_IsMaster()
    // Offset: 0x291B50C
    // Implemented from: NetPlayer
    // Base method: System.Boolean NetPlayer::get_IsMaster()
    bool get_IsMaster();
    // public override System.Boolean get_IsLocal()
    // Offset: 0x291B528
    // Implemented from: NetPlayer
    // Base method: System.Boolean NetPlayer::get_IsLocal()
    bool get_IsLocal();
    // public override System.Boolean get_IsNull()
    // Offset: 0x291B58C
    // Implemented from: NetPlayer
    // Base method: System.Boolean NetPlayer::get_IsNull()
    bool get_IsNull();
    // public override System.String get_NickName()
    // Offset: 0x291B59C
    // Implemented from: NetPlayer
    // Base method: System.String NetPlayer::get_NickName()
    ::StringW get_NickName();
    // public override System.String get_DefaultName()
    // Offset: 0x291B5B8
    // Implemented from: NetPlayer
    // Base method: System.String NetPlayer::get_DefaultName()
    ::StringW get_DefaultName();
    // public override System.Boolean get_InRoom()
    // Offset: 0x291B5D4
    // Implemented from: NetPlayer
    // Base method: System.Boolean NetPlayer::get_InRoom()
    bool get_InRoom();
    // public override System.Boolean Equals(NetPlayer myPlayer, NetPlayer other)
    // Offset: 0x291B668
    // Implemented from: NetPlayer
    // Base method: System.Boolean NetPlayer::Equals(NetPlayer myPlayer, NetPlayer other)
    bool Equals(::GlobalNamespace::NetPlayer* myPlayer, ::GlobalNamespace::NetPlayer* other);
  }; // PunNetPlayer
  #pragma pack(pop)
  static check_size<sizeof(PunNetPlayer), 16 + sizeof(::Photon::Realtime::Player*)> __GlobalNamespace_PunNetPlayerSizeCheck;
  static_assert(sizeof(PunNetPlayer) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_playerRef
// Il2CppName: get_playerRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_playerRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_playerRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::set_playerRef
// Il2CppName: set_playerRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PunNetPlayer::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::PunNetPlayer::set_playerRef)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "set_playerRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_ID
// Il2CppName: get_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_ID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_UserId
// Il2CppName: get_UserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_UserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_UserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_IsMaster
// Il2CppName: get_IsMaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_IsMaster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_IsMaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_IsLocal
// Il2CppName: get_IsLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_IsLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_IsLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_NickName
// Il2CppName: get_NickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_NickName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_NickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_DefaultName
// Il2CppName: get_DefaultName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_DefaultName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_DefaultName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::get_InRoom
// Il2CppName: get_InRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PunNetPlayer::*)()>(&GlobalNamespace::PunNetPlayer::get_InRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "get_InRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PunNetPlayer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PunNetPlayer::*)(::GlobalNamespace::NetPlayer*, ::GlobalNamespace::NetPlayer*)>(&GlobalNamespace::PunNetPlayer::Equals)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("", "NetPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PunNetPlayer*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, other});
  }
};
