// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPassthroughLayer
#include "GlobalNamespace/OVRPassthroughLayer.hpp"
// Including type: OVRPassthroughLayer/ColorLutHandler
#include "GlobalNamespace/OVRPassthroughLayer_ColorLutHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRPassthroughColorLut
  class OVRPassthroughColorLut;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*, "", "OVRPassthroughLayer/InterpolatedColorLutHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: OVRPassthroughLayer/InterpolatedColorLutHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPassthroughLayer::InterpolatedColorLutHandler : public ::GlobalNamespace::OVRPassthroughLayer::ColorLutHandler {
    public:
    // Writing base type padding for base size: 0x2D to desired offset: 0x30
    char ___base_padding[0x3] = {};
    public:
    // private UnityEngine.Texture2D _currentColorLutTargetTexture
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture2D* currentColorLutTargetTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private OVRPassthroughColorLut <LutTarget>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::OVRPassthroughColorLut* LutTarget;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPassthroughColorLut*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Texture2D _currentColorLutTargetTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn__currentColorLutTargetTexture();
    // Get instance field reference: private OVRPassthroughColorLut <LutTarget>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPassthroughColorLut*& dyn_$LutTarget$k__BackingField();
    // public OVRPassthroughColorLut get_LutTarget()
    // Offset: 0x48EC7A4
    ::GlobalNamespace::OVRPassthroughColorLut* get_LutTarget();
    // public System.Void set_LutTarget(OVRPassthroughColorLut value)
    // Offset: 0x48EC7AC
    void set_LutTarget(::GlobalNamespace::OVRPassthroughColorLut* value);
    // public System.Void Update(OVRPassthroughColorLut lutSource, OVRPassthroughColorLut lutTarget, System.Single weight)
    // Offset: 0x48EBE08
    void Update(::GlobalNamespace::OVRPassthroughColorLut* lutSource, ::GlobalNamespace::OVRPassthroughColorLut* lutTarget, float weight);
    // public override System.Void ApplyStyleSettings(ref OVRPlugin/InsightPassthroughStyle2 style)
    // Offset: 0x48EC7B4
    // Implemented from: OVRPassthroughLayer/ColorLutHandler
    // Base method: System.Void ColorLutHandler::ApplyStyleSettings(ref OVRPlugin/InsightPassthroughStyle2 style)
    void ApplyStyleSettings(ByRef<::GlobalNamespace::OVRPlugin::InsightPassthroughStyle2> style);
    // public override System.Void Update(OVRPassthroughLayer/Settings settings)
    // Offset: 0x48EC7EC
    // Implemented from: OVRPassthroughLayer/ColorLutHandler
    // Base method: System.Void ColorLutHandler::Update(OVRPassthroughLayer/Settings settings)
    void Update(::GlobalNamespace::OVRPassthroughLayer::Settings settings);
    // public override System.Void Clear()
    // Offset: 0x48EC850
    // Implemented from: OVRPassthroughLayer/ColorLutHandler
    // Base method: System.Void ColorLutHandler::Clear()
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x48EBC34
    // Implemented from: OVRPassthroughLayer/ColorLutHandler
    // Base method: System.Void ColorLutHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPassthroughLayer::InterpolatedColorLutHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPassthroughLayer::InterpolatedColorLutHandler*, creationType>()));
    }
  }; // OVRPassthroughLayer/InterpolatedColorLutHandler
  #pragma pack(pop)
  static check_size<sizeof(OVRPassthroughLayer::InterpolatedColorLutHandler), 56 + sizeof(::GlobalNamespace::OVRPassthroughColorLut*)> __GlobalNamespace_OVRPassthroughLayer_InterpolatedColorLutHandlerSizeCheck;
  static_assert(sizeof(OVRPassthroughLayer::InterpolatedColorLutHandler) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::get_LutTarget
// Il2CppName: get_LutTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPassthroughColorLut* (GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::*)()>(&GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::get_LutTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*), "get_LutTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::set_LutTarget
// Il2CppName: set_LutTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::*)(::GlobalNamespace::OVRPassthroughColorLut*)>(&GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::set_LutTarget)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*), "set_LutTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::*)(::GlobalNamespace::OVRPassthroughColorLut*, ::GlobalNamespace::OVRPassthroughColorLut*, float)>(&GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::Update)> {
  static const MethodInfo* get() {
    static auto* lutSource = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut")->byval_arg;
    static auto* lutTarget = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughColorLut")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lutSource, lutTarget, weight});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::ApplyStyleSettings
// Il2CppName: ApplyStyleSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::*)(ByRef<::GlobalNamespace::OVRPlugin::InsightPassthroughStyle2>)>(&GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::ApplyStyleSettings)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/InsightPassthroughStyle2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*), "ApplyStyleSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::*)(::GlobalNamespace::OVRPassthroughLayer::Settings)>(&GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::Update)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("", "OVRPassthroughLayer/Settings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::*)()>(&GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughLayer::InterpolatedColorLutHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
