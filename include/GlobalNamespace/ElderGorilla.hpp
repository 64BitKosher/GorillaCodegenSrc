// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ElderGorilla
  class ElderGorilla;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ElderGorilla);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ElderGorilla*, "", "ElderGorilla");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: ElderGorilla
  // [TokenAttribute] Offset: FFFFFFFF
  class ElderGorilla : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform tHMD
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* tHMD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform tLeftHand
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* tLeftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform tRightHand
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* tRightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Int32 countValidArmDists
    // Size: 0x4
    // Offset: 0x38
    int countValidArmDists;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single timeLastValidArmDist
    // Size: 0x4
    // Offset: 0x3C
    float timeLastValidArmDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean trackingHeadHeight
    // Size: 0x1
    // Offset: 0x40
    bool trackingHeadHeight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: trackingHeadHeight and: trackedHeadHeight
    char __padding5[0x3] = {};
    // private System.Single trackedHeadHeight
    // Size: 0x4
    // Offset: 0x44
    float trackedHeadHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timerTrackedHeadHeight
    // Size: 0x4
    // Offset: 0x48
    float timerTrackedHeadHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single savedHeadHeight
    // Size: 0x4
    // Offset: 0x4C
    float savedHeadHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static private System.Single MAX_HAND_DIST
    static constexpr const float MAX_HAND_DIST = 1;
    // Get static field: static private System.Single MAX_HAND_DIST
    static float _get_MAX_HAND_DIST();
    // Set static field: static private System.Single MAX_HAND_DIST
    static void _set_MAX_HAND_DIST(float value);
    // static field const value: static private System.Single COOLDOWN_HAND_DIST
    static constexpr const float COOLDOWN_HAND_DIST = 1;
    // Get static field: static private System.Single COOLDOWN_HAND_DIST
    static float _get_COOLDOWN_HAND_DIST();
    // Set static field: static private System.Single COOLDOWN_HAND_DIST
    static void _set_COOLDOWN_HAND_DIST(float value);
    // static field const value: static private System.Single VALID_HAND_DIST
    static constexpr const float VALID_HAND_DIST = 0.75;
    // Get static field: static private System.Single VALID_HAND_DIST
    static float _get_VALID_HAND_DIST();
    // Set static field: static private System.Single VALID_HAND_DIST
    static void _set_VALID_HAND_DIST(float value);
    // static field const value: static private System.Single TIME_VALID_HEAD_HEIGHT
    static constexpr const float TIME_VALID_HEAD_HEIGHT = 1;
    // Get static field: static private System.Single TIME_VALID_HEAD_HEIGHT
    static float _get_TIME_VALID_HEAD_HEIGHT();
    // Set static field: static private System.Single TIME_VALID_HEAD_HEIGHT
    static void _set_TIME_VALID_HEAD_HEIGHT(float value);
    // Get instance field reference: private UnityEngine.Transform tHMD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tHMD();
    // Get instance field reference: private UnityEngine.Transform tLeftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tLeftHand();
    // Get instance field reference: private UnityEngine.Transform tRightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tRightHand();
    // Get instance field reference: private System.Int32 countValidArmDists
    [[deprecated("Use field access instead!")]] int& dyn_countValidArmDists();
    // Get instance field reference: private System.Single timeLastValidArmDist
    [[deprecated("Use field access instead!")]] float& dyn_timeLastValidArmDist();
    // Get instance field reference: private System.Boolean trackingHeadHeight
    [[deprecated("Use field access instead!")]] bool& dyn_trackingHeadHeight();
    // Get instance field reference: private System.Single trackedHeadHeight
    [[deprecated("Use field access instead!")]] float& dyn_trackedHeadHeight();
    // Get instance field reference: private System.Single timerTrackedHeadHeight
    [[deprecated("Use field access instead!")]] float& dyn_timerTrackedHeadHeight();
    // Get instance field reference: private System.Single savedHeadHeight
    [[deprecated("Use field access instead!")]] float& dyn_savedHeadHeight();
    // private System.Void Update()
    // Offset: 0x26F2C98
    void Update();
    // private System.Void CheckHandDistance(UnityEngine.Transform hand)
    // Offset: 0x26F2E60
    void CheckHandDistance(::UnityEngine::Transform* hand);
    // private System.Void CheckHeight()
    // Offset: 0x26F2F58
    void CheckHeight();
    // private System.Void CheckMicVolume()
    // Offset: 0x26F2FDC
    void CheckMicVolume();
    // public System.Void .ctor()
    // Offset: 0x26F30BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ElderGorilla* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ElderGorilla::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ElderGorilla*, creationType>()));
    }
  }; // ElderGorilla
  #pragma pack(pop)
  static check_size<sizeof(ElderGorilla), 76 + sizeof(float)> __GlobalNamespace_ElderGorillaSizeCheck;
  static_assert(sizeof(ElderGorilla) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ElderGorilla::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ElderGorilla::*)()>(&GlobalNamespace::ElderGorilla::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ElderGorilla*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ElderGorilla::CheckHandDistance
// Il2CppName: CheckHandDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ElderGorilla::*)(::UnityEngine::Transform*)>(&GlobalNamespace::ElderGorilla::CheckHandDistance)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ElderGorilla*), "CheckHandDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ElderGorilla::CheckHeight
// Il2CppName: CheckHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ElderGorilla::*)()>(&GlobalNamespace::ElderGorilla::CheckHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ElderGorilla*), "CheckHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ElderGorilla::CheckMicVolume
// Il2CppName: CheckMicVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ElderGorilla::*)()>(&GlobalNamespace::ElderGorilla::CheckMicVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ElderGorilla*), "CheckMicVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ElderGorilla::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
