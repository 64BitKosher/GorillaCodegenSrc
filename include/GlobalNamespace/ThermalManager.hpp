// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ThermalSourceVolume
  class ThermalSourceVolume;
  // Forward declaring type: ThermalReceiver
  class ThermalReceiver;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ThermalManager
  class ThermalManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ThermalManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThermalManager*, "", "ThermalManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: ThermalManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class ThermalManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Get static field: static public readonly System.Collections.Generic.List`1<ThermalSourceVolume> sources
    static ::System::Collections::Generic::List_1<::GlobalNamespace::ThermalSourceVolume*>* _get_sources();
    // Set static field: static public readonly System.Collections.Generic.List`1<ThermalSourceVolume> sources
    static void _set_sources(::System::Collections::Generic::List_1<::GlobalNamespace::ThermalSourceVolume*>* value);
    // Get static field: static public readonly System.Collections.Generic.List`1<ThermalReceiver> receivers
    static ::System::Collections::Generic::List_1<::GlobalNamespace::ThermalReceiver*>* _get_receivers();
    // Set static field: static public readonly System.Collections.Generic.List`1<ThermalReceiver> receivers
    static void _set_receivers(::System::Collections::Generic::List_1<::GlobalNamespace::ThermalReceiver*>* value);
    // Get static field: static public ThermalManager instance
    static ::GlobalNamespace::ThermalManager* _get_instance();
    // Set static field: static public ThermalManager instance
    static void _set_instance(::GlobalNamespace::ThermalManager* value);
    // protected System.Void OnEnable()
    // Offset: 0x2896A9C
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x2896BA0
    void LateUpdate();
    // static public System.Void Register(ThermalSourceVolume source)
    // Offset: 0x2896E98
    static void Register(::GlobalNamespace::ThermalSourceVolume* source);
    // static public System.Void Unregister(ThermalSourceVolume source)
    // Offset: 0x2896F6C
    static void Unregister(::GlobalNamespace::ThermalSourceVolume* source);
    // static public System.Void Register(ThermalReceiver receiver)
    // Offset: 0x2896FEC
    static void Register(::GlobalNamespace::ThermalReceiver* receiver);
    // static public System.Void Unregister(ThermalReceiver receiver)
    // Offset: 0x28970C0
    static void Unregister(::GlobalNamespace::ThermalReceiver* receiver);
    // public System.Void .ctor()
    // Offset: 0x2897140
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThermalManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThermalManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThermalManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2897148
    static void _cctor();
  }; // ThermalManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ThermalManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThermalManager::*)()>(&GlobalNamespace::ThermalManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThermalManager::*)()>(&GlobalNamespace::ThermalManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThermalSourceVolume*)>(&GlobalNamespace::ThermalManager::Register)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("", "ThermalSourceVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThermalSourceVolume*)>(&GlobalNamespace::ThermalManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("", "ThermalSourceVolume")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThermalReceiver*)>(&GlobalNamespace::ThermalManager::Register)> {
  static const MethodInfo* get() {
    static auto* receiver = &::il2cpp_utils::GetClassFromName("", "ThermalReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{receiver});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ThermalReceiver*)>(&GlobalNamespace::ThermalManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* receiver = &::il2cpp_utils::GetClassFromName("", "ThermalReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{receiver});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThermalManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ThermalManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ThermalManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThermalManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
