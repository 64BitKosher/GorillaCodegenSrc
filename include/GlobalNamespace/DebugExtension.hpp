// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DebugExtension
  class DebugExtension;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DebugExtension);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DebugExtension*, "", "DebugExtension");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DebugExtension
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugExtension : public ::Il2CppObject {
    public:
    // static public System.Void DebugPoint(UnityEngine.Vector3 position, UnityEngine.Color color, System.Single scale, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2687174
    static void DebugPoint(::UnityEngine::Vector3 position, ::UnityEngine::Color color, float scale, float duration, bool depthTest);
    // static public System.Void DebugPoint(UnityEngine.Vector3 position, System.Single scale, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2687438
    static void DebugPoint(::UnityEngine::Vector3 position, float scale, float duration, bool depthTest);
    // static public System.Void DebugBounds(UnityEngine.Bounds bounds, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2687474
    static void DebugBounds(::UnityEngine::Bounds bounds, ::UnityEngine::Color color, float duration, bool depthTest);
    // static public System.Void DebugBounds(UnityEngine.Bounds bounds, System.Single duration, System.Boolean depthTest)
    // Offset: 0x26877D4
    static void DebugBounds(::UnityEngine::Bounds bounds, float duration, bool depthTest);
    // static public System.Void DebugLocalCube(UnityEngine.Transform transform, UnityEngine.Vector3 size, UnityEngine.Color color, UnityEngine.Vector3 center, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2687818
    static void DebugLocalCube(::UnityEngine::Transform* transform, ::UnityEngine::Vector3 size, ::UnityEngine::Color color, ::UnityEngine::Vector3 center, float duration, bool depthTest);
    // static public System.Void DebugLocalCube(UnityEngine.Transform transform, UnityEngine.Vector3 size, UnityEngine.Vector3 center, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2687C4C
    static void DebugLocalCube(::UnityEngine::Transform* transform, ::UnityEngine::Vector3 size, ::UnityEngine::Vector3 center, float duration, bool depthTest);
    // static public System.Void DebugLocalCube(UnityEngine.Matrix4x4 space, UnityEngine.Vector3 size, UnityEngine.Color color, UnityEngine.Vector3 center, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2687C8C
    static void DebugLocalCube(::UnityEngine::Matrix4x4 space, ::UnityEngine::Vector3 size, ::UnityEngine::Color color, ::UnityEngine::Vector3 center, float duration, bool depthTest);
    // static public System.Void DebugLocalCube(UnityEngine.Matrix4x4 space, UnityEngine.Vector3 size, UnityEngine.Vector3 center, System.Single duration, System.Boolean depthTest)
    // Offset: 0x268810C
    static void DebugLocalCube(::UnityEngine::Matrix4x4 space, ::UnityEngine::Vector3 size, ::UnityEngine::Vector3 center, float duration, bool depthTest);
    // static public System.Void DebugCircle(UnityEngine.Vector3 position, UnityEngine.Vector3 up, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2688160
    static void DebugCircle(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 up, ::UnityEngine::Color color, float radius, float duration, bool depthTest);
    // static public System.Void DebugCircle(UnityEngine.Vector3 position, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x26885E0
    static void DebugCircle(::UnityEngine::Vector3 position, ::UnityEngine::Color color, float radius, float duration, bool depthTest);
    // static public System.Void DebugCircle(UnityEngine.Vector3 position, UnityEngine.Vector3 up, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x26886A0
    static void DebugCircle(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 up, float radius, float duration, bool depthTest);
    // static public System.Void DebugCircle(UnityEngine.Vector3 position, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x26886CC
    static void DebugCircle(::UnityEngine::Vector3 position, float radius, float duration, bool depthTest);
    // static public System.Void DebugWireSphere(UnityEngine.Vector3 position, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2688774
    static void DebugWireSphere(::UnityEngine::Vector3 position, ::UnityEngine::Color color, float radius, float duration, bool depthTest);
    // static public System.Void DebugWireSphere(UnityEngine.Vector3 position, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2688940
    static void DebugWireSphere(::UnityEngine::Vector3 position, float radius, float duration, bool depthTest);
    // static public System.Void DebugCylinder(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x268897C
    static void DebugCylinder(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::Color color, float radius, float duration, bool depthTest);
    // static public System.Void DebugCylinder(UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2688F38
    static void DebugCylinder(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, float radius, float duration, bool depthTest);
    // static public System.Void DebugCone(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Color color, System.Single angle, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2688F64
    static void DebugCone(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, ::UnityEngine::Color color, float angle, float duration, bool depthTest);
    // static public System.Void DebugCone(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, System.Single angle, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2689AA0
    static void DebugCone(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, float angle, float duration, bool depthTest);
    // static public System.Void DebugCone(UnityEngine.Vector3 position, UnityEngine.Color color, System.Single angle, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2689ACC
    static void DebugCone(::UnityEngine::Vector3 position, ::UnityEngine::Color color, float angle, float duration, bool depthTest);
    // static public System.Void DebugCone(UnityEngine.Vector3 position, System.Single angle, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2689B8C
    static void DebugCone(::UnityEngine::Vector3 position, float angle, float duration, bool depthTest);
    // static public System.Void DebugArrow(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Color color, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2689C34
    static void DebugArrow(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, ::UnityEngine::Color color, float duration, bool depthTest);
    // static public System.Void DebugArrow(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2689D5C
    static void DebugArrow(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, float duration, bool depthTest);
    // static public System.Void DebugCapsule(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x2689D84
    static void DebugCapsule(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::Color color, float radius, float duration, bool depthTest);
    // static public System.Void DebugCapsule(UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single radius, System.Single duration, System.Boolean depthTest)
    // Offset: 0x268AB20
    static void DebugCapsule(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, float radius, float duration, bool depthTest);
    // static public System.Void DrawPoint(UnityEngine.Vector3 position, UnityEngine.Color color, System.Single scale)
    // Offset: 0x268AB4C
    static void DrawPoint(::UnityEngine::Vector3 position, ::UnityEngine::Color color, float scale);
    // static public System.Void DrawPoint(UnityEngine.Vector3 position, System.Single scale)
    // Offset: 0x268AD24
    static void DrawPoint(::UnityEngine::Vector3 position, float scale);
    // static public System.Void DrawBounds(UnityEngine.Bounds bounds, UnityEngine.Color color)
    // Offset: 0x268AD3C
    static void DrawBounds(::UnityEngine::Bounds bounds, ::UnityEngine::Color color);
    // static public System.Void DrawBounds(UnityEngine.Bounds bounds)
    // Offset: 0x268AF50
    static void DrawBounds(::UnityEngine::Bounds bounds);
    // static public System.Void DrawLocalCube(UnityEngine.Transform transform, UnityEngine.Vector3 size, UnityEngine.Color color, UnityEngine.Vector3 center)
    // Offset: 0x268AF8C
    static void DrawLocalCube(::UnityEngine::Transform* transform, ::UnityEngine::Vector3 size, ::UnityEngine::Color color, ::UnityEngine::Vector3 center);
    // static public System.Void DrawLocalCube(UnityEngine.Transform transform, UnityEngine.Vector3 size, UnityEngine.Vector3 center)
    // Offset: 0x268B30C
    static void DrawLocalCube(::UnityEngine::Transform* transform, ::UnityEngine::Vector3 size, ::UnityEngine::Vector3 center);
    // static public System.Void DrawLocalCube(UnityEngine.Matrix4x4 space, UnityEngine.Vector3 size, UnityEngine.Color color, UnityEngine.Vector3 center)
    // Offset: 0x268B344
    static void DrawLocalCube(::UnityEngine::Matrix4x4 space, ::UnityEngine::Vector3 size, ::UnityEngine::Color color, ::UnityEngine::Vector3 center);
    // static public System.Void DrawLocalCube(UnityEngine.Matrix4x4 space, UnityEngine.Vector3 size, UnityEngine.Vector3 center)
    // Offset: 0x268B6B8
    static void DrawLocalCube(::UnityEngine::Matrix4x4 space, ::UnityEngine::Vector3 size, ::UnityEngine::Vector3 center);
    // static public System.Void DrawCircle(UnityEngine.Vector3 position, UnityEngine.Vector3 up, UnityEngine.Color color, System.Single radius)
    // Offset: 0x268B704
    static void DrawCircle(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 up, ::UnityEngine::Color color, float radius);
    // static public System.Void DrawCircle(UnityEngine.Vector3 position, UnityEngine.Color color, System.Single radius)
    // Offset: 0x268BBC4
    static void DrawCircle(::UnityEngine::Vector3 position, ::UnityEngine::Color color, float radius);
    // static public System.Void DrawCircle(UnityEngine.Vector3 position, UnityEngine.Vector3 up, System.Single radius)
    // Offset: 0x268BC6C
    static void DrawCircle(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 up, float radius);
    // static public System.Void DrawCircle(UnityEngine.Vector3 position, System.Single radius)
    // Offset: 0x268BC9C
    static void DrawCircle(::UnityEngine::Vector3 position, float radius);
    // static public System.Void DrawCylinder(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single radius)
    // Offset: 0x268BD24
    static void DrawCylinder(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::Color color, float radius);
    // static public System.Void DrawCylinder(UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single radius)
    // Offset: 0x268C1D4
    static void DrawCylinder(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, float radius);
    // static public System.Void DrawCone(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Color color, System.Single angle)
    // Offset: 0x268C1F8
    static void DrawCone(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, ::UnityEngine::Color color, float angle);
    // static public System.Void DrawCone(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, System.Single angle)
    // Offset: 0x268CC88
    static void DrawCone(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, float angle);
    // static public System.Void DrawCone(UnityEngine.Vector3 position, UnityEngine.Color color, System.Single angle)
    // Offset: 0x268CCAC
    static void DrawCone(::UnityEngine::Vector3 position, ::UnityEngine::Color color, float angle);
    // static public System.Void DrawCone(UnityEngine.Vector3 position, System.Single angle)
    // Offset: 0x268CD54
    static void DrawCone(::UnityEngine::Vector3 position, float angle);
    // static public System.Void DrawArrow(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Color color)
    // Offset: 0x268CDDC
    static void DrawArrow(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, ::UnityEngine::Color color);
    // static public System.Void DrawArrow(UnityEngine.Vector3 position, UnityEngine.Vector3 direction)
    // Offset: 0x268CED4
    static void DrawArrow(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction);
    // static public System.Void DrawCapsule(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color color, System.Single radius)
    // Offset: 0x268CEF4
    static void DrawCapsule(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::Color color, float radius);
    // static public System.Void DrawCapsule(UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Single radius)
    // Offset: 0x268D9E4
    static void DrawCapsule(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, float radius);
    // static public System.String MethodsOfObject(System.Object obj, System.Boolean includeInfo)
    // Offset: 0x268DA08
    static ::StringW MethodsOfObject(::Il2CppObject* obj, bool includeInfo);
    // static public System.String MethodsOfType(System.Type type, System.Boolean includeInfo)
    // Offset: 0x268DB34
    static ::StringW MethodsOfType(::System::Type* type, bool includeInfo);
  }; // DebugExtension
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugPoint
// Il2CppName: DebugPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Color, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugPoint)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, color, scale, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugPoint
// Il2CppName: DebugPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugPoint)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, scale, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugBounds
// Il2CppName: DebugBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Bounds, ::UnityEngine::Color, float, bool)>(&GlobalNamespace::DebugExtension::DebugBounds)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, color, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugBounds
// Il2CppName: DebugBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Bounds, float, bool)>(&GlobalNamespace::DebugExtension::DebugBounds)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugLocalCube
// Il2CppName: DebugLocalCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Color, ::UnityEngine::Vector3, float, bool)>(&GlobalNamespace::DebugExtension::DebugLocalCube)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugLocalCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, size, color, center, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugLocalCube
// Il2CppName: DebugLocalCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, bool)>(&GlobalNamespace::DebugExtension::DebugLocalCube)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugLocalCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, size, center, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugLocalCube
// Il2CppName: DebugLocalCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Vector3, ::UnityEngine::Color, ::UnityEngine::Vector3, float, bool)>(&GlobalNamespace::DebugExtension::DebugLocalCube)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugLocalCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, size, color, center, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugLocalCube
// Il2CppName: DebugLocalCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, bool)>(&GlobalNamespace::DebugExtension::DebugLocalCube)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugLocalCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, size, center, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCircle
// Il2CppName: DebugCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCircle)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, up, color, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCircle
// Il2CppName: DebugCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Color, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCircle)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, color, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCircle
// Il2CppName: DebugCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCircle)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, up, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCircle
// Il2CppName: DebugCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCircle)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugWireSphere
// Il2CppName: DebugWireSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Color, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugWireSphere)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugWireSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, color, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugWireSphere
// Il2CppName: DebugWireSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugWireSphere)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugWireSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCylinder
// Il2CppName: DebugCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCylinder)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, color, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCylinder
// Il2CppName: DebugCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCylinder)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCone
// Il2CppName: DebugCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCone)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, direction, color, angle, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCone
// Il2CppName: DebugCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCone)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, direction, angle, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCone
// Il2CppName: DebugCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Color, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCone)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, color, angle, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCone
// Il2CppName: DebugCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCone)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, angle, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugArrow
// Il2CppName: DebugArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float, bool)>(&GlobalNamespace::DebugExtension::DebugArrow)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, direction, color, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugArrow
// Il2CppName: DebugArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, bool)>(&GlobalNamespace::DebugExtension::DebugArrow)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, direction, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCapsule
// Il2CppName: DebugCapsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCapsule)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCapsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, color, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DebugCapsule
// Il2CppName: DebugCapsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, bool)>(&GlobalNamespace::DebugExtension::DebugCapsule)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DebugCapsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, radius, duration, depthTest});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawPoint
// Il2CppName: DrawPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&GlobalNamespace::DebugExtension::DrawPoint)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, color, scale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawPoint
// Il2CppName: DrawPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::DebugExtension::DrawPoint)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, scale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawBounds
// Il2CppName: DrawBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Bounds, ::UnityEngine::Color)>(&GlobalNamespace::DebugExtension::DrawBounds)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawBounds
// Il2CppName: DrawBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Bounds)>(&GlobalNamespace::DebugExtension::DrawBounds)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawLocalCube
// Il2CppName: DrawLocalCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Color, ::UnityEngine::Vector3)>(&GlobalNamespace::DebugExtension::DrawLocalCube)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawLocalCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, size, color, center});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawLocalCube
// Il2CppName: DrawLocalCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::DebugExtension::DrawLocalCube)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawLocalCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, size, center});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawLocalCube
// Il2CppName: DrawLocalCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Vector3, ::UnityEngine::Color, ::UnityEngine::Vector3)>(&GlobalNamespace::DebugExtension::DrawLocalCube)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawLocalCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, size, color, center});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawLocalCube
// Il2CppName: DrawLocalCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::DebugExtension::DrawLocalCube)> {
  static const MethodInfo* get() {
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawLocalCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{space, size, center});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCircle
// Il2CppName: DrawCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&GlobalNamespace::DebugExtension::DrawCircle)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, up, color, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCircle
// Il2CppName: DrawCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&GlobalNamespace::DebugExtension::DrawCircle)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, color, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCircle
// Il2CppName: DrawCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::DebugExtension::DrawCircle)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, up, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCircle
// Il2CppName: DrawCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::DebugExtension::DrawCircle)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCylinder
// Il2CppName: DrawCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&GlobalNamespace::DebugExtension::DrawCylinder)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, color, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCylinder
// Il2CppName: DrawCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::DebugExtension::DrawCylinder)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCone
// Il2CppName: DrawCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&GlobalNamespace::DebugExtension::DrawCone)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, direction, color, angle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCone
// Il2CppName: DrawCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::DebugExtension::DrawCone)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, direction, angle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCone
// Il2CppName: DrawCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&GlobalNamespace::DebugExtension::DrawCone)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, color, angle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCone
// Il2CppName: DrawCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::DebugExtension::DrawCone)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, angle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawArrow
// Il2CppName: DrawArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color)>(&GlobalNamespace::DebugExtension::DrawArrow)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, direction, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawArrow
// Il2CppName: DrawArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::DebugExtension::DrawArrow)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, direction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCapsule
// Il2CppName: DrawCapsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, float)>(&GlobalNamespace::DebugExtension::DrawCapsule)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCapsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, color, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::DrawCapsule
// Il2CppName: DrawCapsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::DebugExtension::DrawCapsule)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "DrawCapsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, radius});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::MethodsOfObject
// Il2CppName: MethodsOfObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppObject*, bool)>(&GlobalNamespace::DebugExtension::MethodsOfObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* includeInfo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "MethodsOfObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, includeInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugExtension::MethodsOfType
// Il2CppName: MethodsOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*, bool)>(&GlobalNamespace::DebugExtension::MethodsOfType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* includeInfo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugExtension*), "MethodsOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, includeInfo});
  }
};
