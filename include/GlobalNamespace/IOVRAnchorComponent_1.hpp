// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRTask`1
#include "GlobalNamespace/OVRTask_1.hpp"
// Including type: OVRPlugin/SpaceComponentType
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRAnchor
#include "GlobalNamespace/OVRAnchor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: IOVRAnchorComponent`1<T>
  template<typename T>
  class IOVRAnchorComponent_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::IOVRAnchorComponent_1, "", "IOVRAnchorComponent`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: IOVRAnchorComponent`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IOVRAnchorComponent_1 {
    public:
    // public System.Boolean get_IsNull()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsNull() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOVRAnchorComponent_1::get_IsNull");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IOVRAnchorComponent_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsEnabled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsEnabled() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOVRAnchorComponent_1::get_IsEnabled");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IOVRAnchorComponent_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public OVRTask`1<System.Boolean> SetEnabledAsync(System.Boolean enable, System.Double timeout)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::OVRTask_1<bool> SetEnabledAsync(bool enable, double timeout) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOVRAnchorComponent_1::SetEnabledAsync");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IOVRAnchorComponent_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRTask_1<bool>, false>(this, ___internal__method, enable, timeout);
    }
    // OVRPlugin/SpaceComponentType get_Type()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::OVRPlugin::SpaceComponentType get_Type() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOVRAnchorComponent_1::get_Type");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IOVRAnchorComponent_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::GlobalNamespace::OVRPlugin::SpaceComponentType, false>(this, ___internal__method);
    }
    // System.UInt64 get_Handle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    uint64_t get_Handle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOVRAnchorComponent_1::get_Handle");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IOVRAnchorComponent_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<uint64_t, false>(this, ___internal__method);
    }
    // T FromAnchor(OVRAnchor anchor)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T FromAnchor(::GlobalNamespace::OVRAnchor anchor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IOVRAnchorComponent_1::FromAnchor");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::GlobalNamespace::IOVRAnchorComponent_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, anchor);
    }
  }; // IOVRAnchorComponent`1
  // Could not write size check! Type: IOVRAnchorComponent`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
