// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SnapshotSceneManager
#include "GlobalNamespace/SnapshotSceneManager.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: OVRAnchor
#include "GlobalNamespace/OVRAnchor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SnapshotSceneManager::SnapshotComparer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SnapshotSceneManager::SnapshotComparer*, "", "SnapshotSceneManager/SnapshotComparer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: SnapshotSceneManager/SnapshotComparer
  // [TokenAttribute] Offset: FFFFFFFF
  class SnapshotSceneManager::SnapshotComparer : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType
    struct ChangeType;
    // Nested type: ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::$CheckRoomChanges$d__9
    struct $CheckRoomChanges$d__9;
    // Nested type: ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::$Compare$d__8
    struct $Compare$d__8;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SnapshotSceneManager/SnapshotComparer/ChangeType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ChangeType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ChangeType
      constexpr ChangeType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SnapshotSceneManager/SnapshotComparer/ChangeType New
      static constexpr const int New = 0;
      // Get static field: static public SnapshotSceneManager/SnapshotComparer/ChangeType New
      static ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType _get_New();
      // Set static field: static public SnapshotSceneManager/SnapshotComparer/ChangeType New
      static void _set_New(::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType value);
      // static field const value: static public SnapshotSceneManager/SnapshotComparer/ChangeType Missing
      static constexpr const int Missing = 1;
      // Get static field: static public SnapshotSceneManager/SnapshotComparer/ChangeType Missing
      static ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType _get_Missing();
      // Set static field: static public SnapshotSceneManager/SnapshotComparer/ChangeType Missing
      static void _set_Missing(::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType value);
      // static field const value: static public SnapshotSceneManager/SnapshotComparer/ChangeType Changed
      static constexpr const int Changed = 2;
      // Get static field: static public SnapshotSceneManager/SnapshotComparer/ChangeType Changed
      static ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType _get_Changed();
      // Set static field: static public SnapshotSceneManager/SnapshotComparer/ChangeType Changed
      static void _set_Changed(::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SnapshotSceneManager/SnapshotComparer/ChangeType
    #pragma pack(pop)
    static check_size<sizeof(SnapshotSceneManager::SnapshotComparer::ChangeType), 0 + sizeof(int)> __GlobalNamespace_SnapshotSceneManager_SnapshotComparer_ChangeTypeSizeCheck;
    static_assert(sizeof(SnapshotSceneManager::SnapshotComparer::ChangeType) == 0x4);
    public:
    // private readonly SnapshotSceneManager/SceneSnapshot <BaseSnapshot>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::SnapshotSceneManager::SceneSnapshot* BaseSnapshot;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SnapshotSceneManager::SceneSnapshot*) == 0x8);
    // private readonly SnapshotSceneManager/SceneSnapshot <NewSnapshot>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SnapshotSceneManager::SceneSnapshot* NewSnapshot;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SnapshotSceneManager::SceneSnapshot*) == 0x8);
    public:
    // Get instance field reference: private readonly SnapshotSceneManager/SceneSnapshot <BaseSnapshot>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnapshotSceneManager::SceneSnapshot*& dyn_$BaseSnapshot$k__BackingField();
    // Get instance field reference: private readonly SnapshotSceneManager/SceneSnapshot <NewSnapshot>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SnapshotSceneManager::SceneSnapshot*& dyn_$NewSnapshot$k__BackingField();
    // public SnapshotSceneManager/SceneSnapshot get_BaseSnapshot()
    // Offset: 0x2944E78
    ::GlobalNamespace::SnapshotSceneManager::SceneSnapshot* get_BaseSnapshot();
    // public SnapshotSceneManager/SceneSnapshot get_NewSnapshot()
    // Offset: 0x2944E80
    ::GlobalNamespace::SnapshotSceneManager::SceneSnapshot* get_NewSnapshot();
    // public System.Void .ctor(SnapshotSceneManager/SceneSnapshot baseSnapshot, SnapshotSceneManager/SceneSnapshot newSnapshot)
    // Offset: 0x2944E88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SnapshotSceneManager::SnapshotComparer* New_ctor(::GlobalNamespace::SnapshotSceneManager::SceneSnapshot* baseSnapshot, ::GlobalNamespace::SnapshotSceneManager::SceneSnapshot* newSnapshot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SnapshotSceneManager::SnapshotComparer*, creationType>(baseSnapshot, newSnapshot)));
    }
    // public System.Threading.Tasks.Task`1<System.Collections.Generic.List`1<System.ValueTuple`2<OVRAnchor,SnapshotSceneManager/SnapshotComparer/ChangeType>>> Compare()
    // Offset: 0x2944ECC
    ::System::Threading::Tasks::Task_1<::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType>>*>* Compare();
    // private System.Threading.Tasks.Task CheckRoomChanges(System.Collections.Generic.List`1<System.ValueTuple`2<OVRAnchor,SnapshotSceneManager/SnapshotComparer/ChangeType>> changes)
    // Offset: 0x2944FCC
    ::System::Threading::Tasks::Task* CheckRoomChanges(::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType>>* changes);
  }; // SnapshotSceneManager/SnapshotComparer
  #pragma pack(pop)
  static check_size<sizeof(SnapshotSceneManager::SnapshotComparer), 24 + sizeof(::GlobalNamespace::SnapshotSceneManager::SceneSnapshot*)> __GlobalNamespace_SnapshotSceneManager_SnapshotComparerSizeCheck;
  static_assert(sizeof(SnapshotSceneManager::SnapshotComparer) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType, "", "SnapshotSceneManager/SnapshotComparer/ChangeType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SnapshotSceneManager::SnapshotComparer::get_BaseSnapshot
// Il2CppName: get_BaseSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SnapshotSceneManager::SceneSnapshot* (GlobalNamespace::SnapshotSceneManager::SnapshotComparer::*)()>(&GlobalNamespace::SnapshotSceneManager::SnapshotComparer::get_BaseSnapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnapshotSceneManager::SnapshotComparer*), "get_BaseSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnapshotSceneManager::SnapshotComparer::get_NewSnapshot
// Il2CppName: get_NewSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SnapshotSceneManager::SceneSnapshot* (GlobalNamespace::SnapshotSceneManager::SnapshotComparer::*)()>(&GlobalNamespace::SnapshotSceneManager::SnapshotComparer::get_NewSnapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnapshotSceneManager::SnapshotComparer*), "get_NewSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnapshotSceneManager::SnapshotComparer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SnapshotSceneManager::SnapshotComparer::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType>>*>* (GlobalNamespace::SnapshotSceneManager::SnapshotComparer::*)()>(&GlobalNamespace::SnapshotSceneManager::SnapshotComparer::Compare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnapshotSceneManager::SnapshotComparer*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SnapshotSceneManager::SnapshotComparer::CheckRoomChanges
// Il2CppName: CheckRoomChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::SnapshotSceneManager::SnapshotComparer::*)(::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::GlobalNamespace::SnapshotSceneManager::SnapshotComparer::ChangeType>>*)>(&GlobalNamespace::SnapshotSceneManager::SnapshotComparer::CheckRoomChanges)> {
  static const MethodInfo* get() {
    static auto* changes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ValueTuple`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor"), ::il2cpp_utils::GetClassFromName("", "SnapshotSceneManager/SnapshotComparer/ChangeType")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SnapshotSceneManager::SnapshotComparer*), "CheckRoomChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changes});
  }
};
