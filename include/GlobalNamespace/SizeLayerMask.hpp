// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SizeLayerMask
  class SizeLayerMask;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SizeLayerMask);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SizeLayerMask*, "", "SizeLayerMask");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: SizeLayerMask
  // [TokenAttribute] Offset: FFFFFFFF
  class SizeLayerMask : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean affectLayerA
    // Size: 0x1
    // Offset: 0x10
    bool affectLayerA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean affectLayerB
    // Size: 0x1
    // Offset: 0x11
    bool affectLayerB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean affectLayerC
    // Size: 0x1
    // Offset: 0x12
    bool affectLayerC;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean affectLayerD
    // Size: 0x1
    // Offset: 0x13
    bool affectLayerD;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean affectLayerA
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerA();
    // Get instance field reference: private System.Boolean affectLayerB
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerB();
    // Get instance field reference: private System.Boolean affectLayerC
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerC();
    // Get instance field reference: private System.Boolean affectLayerD
    [[deprecated("Use field access instead!")]] bool& dyn_affectLayerD();
    // public System.Int32 get_Mask()
    // Offset: 0x272BB54
    int get_Mask();
    // public System.Void .ctor()
    // Offset: 0x272BCEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SizeLayerMask* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SizeLayerMask::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SizeLayerMask*, creationType>()));
    }
  }; // SizeLayerMask
  #pragma pack(pop)
  static check_size<sizeof(SizeLayerMask), 19 + sizeof(bool)> __GlobalNamespace_SizeLayerMaskSizeCheck;
  static_assert(sizeof(SizeLayerMask) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SizeLayerMask::get_Mask
// Il2CppName: get_Mask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SizeLayerMask::*)()>(&GlobalNamespace::SizeLayerMask::get_Mask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SizeLayerMask*), "get_Mask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SizeLayerMask::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
