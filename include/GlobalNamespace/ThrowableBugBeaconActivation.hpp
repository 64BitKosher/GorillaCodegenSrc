// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ThrowableBugBeacon
  class ThrowableBugBeacon;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ThrowableBugBeaconActivation
  class ThrowableBugBeaconActivation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ThrowableBugBeaconActivation);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThrowableBugBeaconActivation*, "", "ThrowableBugBeaconActivation");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ThrowableBugBeaconActivation
  // [TokenAttribute] Offset: FFFFFFFF
  class ThrowableBugBeaconActivation : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode
    struct ActivationMode;
    // Nested type: ::GlobalNamespace::ThrowableBugBeaconActivation::$SendSignals$d__9
    class $SendSignals$d__9;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ThrowableBugBeaconActivation/ActivationMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ActivationMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ActivationMode
      constexpr ActivationMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ThrowableBugBeaconActivation/ActivationMode CALL
      static constexpr const int CALL = 0;
      // Get static field: static public ThrowableBugBeaconActivation/ActivationMode CALL
      static ::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode _get_CALL();
      // Set static field: static public ThrowableBugBeaconActivation/ActivationMode CALL
      static void _set_CALL(::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode value);
      // static field const value: static public ThrowableBugBeaconActivation/ActivationMode DISMISS
      static constexpr const int DISMISS = 1;
      // Get static field: static public ThrowableBugBeaconActivation/ActivationMode DISMISS
      static ::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode _get_DISMISS();
      // Set static field: static public ThrowableBugBeaconActivation/ActivationMode DISMISS
      static void _set_DISMISS(::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode value);
      // static field const value: static public ThrowableBugBeaconActivation/ActivationMode LOCK
      static constexpr const int LOCK = 2;
      // Get static field: static public ThrowableBugBeaconActivation/ActivationMode LOCK
      static ::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode _get_LOCK();
      // Set static field: static public ThrowableBugBeaconActivation/ActivationMode LOCK
      static void _set_LOCK(::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ThrowableBugBeaconActivation/ActivationMode
    #pragma pack(pop)
    static check_size<sizeof(ThrowableBugBeaconActivation::ActivationMode), 0 + sizeof(int)> __GlobalNamespace_ThrowableBugBeaconActivation_ActivationModeSizeCheck;
    static_assert(sizeof(ThrowableBugBeaconActivation::ActivationMode) == 0x4);
    public:
    // private System.Single minCallTime
    // Size: 0x4
    // Offset: 0x20
    float minCallTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxCallTime
    // Size: 0x4
    // Offset: 0x24
    float maxCallTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt32 signalCount
    // Size: 0x4
    // Offset: 0x28
    uint signalCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private ThrowableBugBeaconActivation/ActivationMode mode
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode) == 0x4);
    // private ThrowableBugBeacon tbb
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::ThrowableBugBeacon* tbb;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThrowableBugBeacon*) == 0x8);
    public:
    // Get instance field reference: private System.Single minCallTime
    [[deprecated("Use field access instead!")]] float& dyn_minCallTime();
    // Get instance field reference: private System.Single maxCallTime
    [[deprecated("Use field access instead!")]] float& dyn_maxCallTime();
    // Get instance field reference: private System.UInt32 signalCount
    [[deprecated("Use field access instead!")]] uint& dyn_signalCount();
    // Get instance field reference: private ThrowableBugBeaconActivation/ActivationMode mode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode& dyn_mode();
    // Get instance field reference: private ThrowableBugBeacon tbb
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThrowableBugBeacon*& dyn_tbb();
    // private System.Void Awake()
    // Offset: 0x27A51E4
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x27A523C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x27A52C8
    void OnDisable();
    // private System.Collections.IEnumerator SendSignals()
    // Offset: 0x27A525C
    ::System::Collections::IEnumerator* SendSignals();
    // public System.Void .ctor()
    // Offset: 0x27A52F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThrowableBugBeaconActivation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableBugBeaconActivation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThrowableBugBeaconActivation*, creationType>()));
    }
  }; // ThrowableBugBeaconActivation
  #pragma pack(pop)
  static check_size<sizeof(ThrowableBugBeaconActivation), 48 + sizeof(::GlobalNamespace::ThrowableBugBeacon*)> __GlobalNamespace_ThrowableBugBeaconActivationSizeCheck;
  static_assert(sizeof(ThrowableBugBeaconActivation) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThrowableBugBeaconActivation::ActivationMode, "", "ThrowableBugBeaconActivation/ActivationMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeaconActivation::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeaconActivation::*)()>(&GlobalNamespace::ThrowableBugBeaconActivation::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeaconActivation*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeaconActivation::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeaconActivation::*)()>(&GlobalNamespace::ThrowableBugBeaconActivation::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeaconActivation*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeaconActivation::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableBugBeaconActivation::*)()>(&GlobalNamespace::ThrowableBugBeaconActivation::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeaconActivation*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeaconActivation::SendSignals
// Il2CppName: SendSignals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::ThrowableBugBeaconActivation::*)()>(&GlobalNamespace::ThrowableBugBeaconActivation::SendSignals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableBugBeaconActivation*), "SendSignals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableBugBeaconActivation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
