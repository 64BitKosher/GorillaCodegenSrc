// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: OVRGLTFInputNode
#include "GlobalNamespace/OVRGLTFInputNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRGLTFAnimatinonNode
  class OVRGLTFAnimatinonNode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRRuntimeController
  class OVRRuntimeController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRRuntimeController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRRuntimeController*, "", "OVRRuntimeController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: OVRRuntimeController
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class OVRRuntimeController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRRuntimeController::$UpdateControllerModel$d__16
    class $UpdateControllerModel$d__16;
    public:
    // public OVRInput/Controller m_controller
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::Controller m_controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // Padding between fields: m_controller and: m_controllerModelShader
    char __padding0[0x4] = {};
    // public UnityEngine.Shader m_controllerModelShader
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Shader* m_controllerModelShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public System.Boolean m_supportAnimation
    // Size: 0x1
    // Offset: 0x30
    bool m_supportAnimation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_supportAnimation and: m_controllerObject
    char __padding2[0x7] = {};
    // private UnityEngine.GameObject m_controllerObject
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* m_controllerObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.String m_controllerModelPath
    // Size: 0x8
    // Offset: 0x40
    ::StringW m_controllerModelPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_modelSupported
    // Size: 0x1
    // Offset: 0x48
    bool m_modelSupported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_hasInputFocus
    // Size: 0x1
    // Offset: 0x49
    bool m_hasInputFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_hasInputFocusPrev
    // Size: 0x1
    // Offset: 0x4A
    bool m_hasInputFocusPrev;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_controllerConnectedPrev
    // Size: 0x1
    // Offset: 0x4B
    bool m_controllerConnectedPrev;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_controllerConnectedPrev and: m_animationNodes
    char __padding8[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<OVRGLTFInputNode,OVRGLTFAnimatinonNode> m_animationNodes
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, ::GlobalNamespace::OVRGLTFAnimatinonNode*>* m_animationNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, ::GlobalNamespace::OVRGLTFAnimatinonNode*>*) == 0x8);
    public:
    // Get static field: static private System.String leftControllerModelPath
    static ::StringW _get_leftControllerModelPath();
    // Set static field: static private System.String leftControllerModelPath
    static void _set_leftControllerModelPath(::StringW value);
    // Get static field: static private System.String rightControllerModelPath
    static ::StringW _get_rightControllerModelPath();
    // Set static field: static private System.String rightControllerModelPath
    static void _set_rightControllerModelPath(::StringW value);
    // Get instance field reference: public OVRInput/Controller m_controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn_m_controller();
    // Get instance field reference: public UnityEngine.Shader m_controllerModelShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_controllerModelShader();
    // Get instance field reference: public System.Boolean m_supportAnimation
    [[deprecated("Use field access instead!")]] bool& dyn_m_supportAnimation();
    // Get instance field reference: private UnityEngine.GameObject m_controllerObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_controllerObject();
    // Get instance field reference: private System.String m_controllerModelPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_controllerModelPath();
    // Get instance field reference: private System.Boolean m_modelSupported
    [[deprecated("Use field access instead!")]] bool& dyn_m_modelSupported();
    // Get instance field reference: private System.Boolean m_hasInputFocus
    [[deprecated("Use field access instead!")]] bool& dyn_m_hasInputFocus();
    // Get instance field reference: private System.Boolean m_hasInputFocusPrev
    [[deprecated("Use field access instead!")]] bool& dyn_m_hasInputFocusPrev();
    // Get instance field reference: private System.Boolean m_controllerConnectedPrev
    [[deprecated("Use field access instead!")]] bool& dyn_m_controllerConnectedPrev();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<OVRGLTFInputNode,OVRGLTFAnimatinonNode> m_animationNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, ::GlobalNamespace::OVRGLTFAnimatinonNode*>*& dyn_m_animationNodes();
    // private System.Void Start()
    // Offset: 0x4956830
    void Start();
    // private System.Void Update()
    // Offset: 0x4956B94
    void Update();
    // private System.Boolean IsModelSupported(System.String modelPath)
    // Offset: 0x49569B4
    bool IsModelSupported(::StringW modelPath);
    // private System.Boolean LoadControllerModel(System.String modelPath)
    // Offset: 0x495701C
    bool LoadControllerModel(::StringW modelPath);
    // private System.Collections.IEnumerator UpdateControllerModel()
    // Offset: 0x4956B20
    ::System::Collections::IEnumerator* UpdateControllerModel();
    // private System.Void UpdateControllerAnimation()
    // Offset: 0x4956C9C
    void UpdateControllerAnimation();
    // public System.Void InputFocusAquired()
    // Offset: 0x49572F8
    void InputFocusAquired();
    // public System.Void InputFocusLost()
    // Offset: 0x4957304
    void InputFocusLost();
    // public System.Void .ctor()
    // Offset: 0x495730C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRRuntimeController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRRuntimeController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRRuntimeController*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4957320
    static void _cctor();
  }; // OVRRuntimeController
  #pragma pack(pop)
  static check_size<sizeof(OVRRuntimeController), 80 + sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, ::GlobalNamespace::OVRGLTFAnimatinonNode*>*)> __GlobalNamespace_OVRRuntimeControllerSizeCheck;
  static_assert(sizeof(OVRRuntimeController) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRRuntimeController::*)()>(&GlobalNamespace::OVRRuntimeController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRRuntimeController::*)()>(&GlobalNamespace::OVRRuntimeController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::IsModelSupported
// Il2CppName: IsModelSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRRuntimeController::*)(::StringW)>(&GlobalNamespace::OVRRuntimeController::IsModelSupported)> {
  static const MethodInfo* get() {
    static auto* modelPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), "IsModelSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modelPath});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::LoadControllerModel
// Il2CppName: LoadControllerModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRRuntimeController::*)(::StringW)>(&GlobalNamespace::OVRRuntimeController::LoadControllerModel)> {
  static const MethodInfo* get() {
    static auto* modelPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), "LoadControllerModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modelPath});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::UpdateControllerModel
// Il2CppName: UpdateControllerModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OVRRuntimeController::*)()>(&GlobalNamespace::OVRRuntimeController::UpdateControllerModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), "UpdateControllerModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::UpdateControllerAnimation
// Il2CppName: UpdateControllerAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRRuntimeController::*)()>(&GlobalNamespace::OVRRuntimeController::UpdateControllerAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), "UpdateControllerAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::InputFocusAquired
// Il2CppName: InputFocusAquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRRuntimeController::*)()>(&GlobalNamespace::OVRRuntimeController::InputFocusAquired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), "InputFocusAquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::InputFocusLost
// Il2CppName: InputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRRuntimeController::*)()>(&GlobalNamespace::OVRRuntimeController::InputFocusLost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), "InputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRRuntimeController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRRuntimeController::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRRuntimeController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
