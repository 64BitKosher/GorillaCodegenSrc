// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VRRigJobManager
#include "GlobalNamespace/VRRigJobManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Jobs.IJobParallelForTransform
#include "UnityEngine/Jobs/IJobParallelForTransform.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Jobs
namespace UnityEngine::Jobs {
  // Forward declaring type: TransformAccess
  struct TransformAccess;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRRigJobManager::VRRigTransformJob, "", "VRRigJobManager/VRRigTransformJob");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VRRigJobManager/VRRigTransformJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct VRRigJobManager::VRRigTransformJob/*, public ::System::ValueType, public ::UnityEngine::Jobs::IJobParallelForTransform*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<VRRigJobManager/VRRigTransformInput> input
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::GlobalNamespace::VRRigJobManager::VRRigTransformInput> input;
    public:
    // Creating value type constructor for type: VRRigTransformJob
    constexpr VRRigTransformJob(::Unity::Collections::NativeArray_1<::GlobalNamespace::VRRigJobManager::VRRigTransformInput> input_ = {}) noexcept : input{input_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Jobs::IJobParallelForTransform
    operator ::UnityEngine::Jobs::IJobParallelForTransform() noexcept {
      return *reinterpret_cast<::UnityEngine::Jobs::IJobParallelForTransform*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::NativeArray_1<::GlobalNamespace::VRRigJobManager::VRRigTransformInput>
    constexpr operator ::Unity::Collections::NativeArray_1<::GlobalNamespace::VRRigJobManager::VRRigTransformInput>() const noexcept {
      return input;
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<VRRigJobManager/VRRigTransformInput> input
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::GlobalNamespace::VRRigJobManager::VRRigTransformInput>& dyn_input();
    // public System.Void Execute(System.Int32 i, UnityEngine.Jobs.TransformAccess tA)
    // Offset: 0x2745330
    void Execute(int i, ::UnityEngine::Jobs::TransformAccess tA);
  }; // VRRigJobManager/VRRigTransformJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRRigJobManager::VRRigTransformJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRRigJobManager::VRRigTransformJob::*)(int, ::UnityEngine::Jobs::TransformAccess)>(&GlobalNamespace::VRRigJobManager::VRRigTransformJob::Execute)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tA = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRRigJobManager::VRRigTransformJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, tA});
  }
};
