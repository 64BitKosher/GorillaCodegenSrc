// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaSkin
  class GorillaSkin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaSkin);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaSkin*, "", "GorillaSkin");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: GorillaSkin
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaSkin : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private UnityEngine.Material _faceMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* faceMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _chestMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* chestMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _bodyMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* bodyMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _scoreboardMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* scoreboardMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Mesh _bodyMesh
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Mesh* bodyMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material _bodyRuntime
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* bodyRuntime;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _chestRuntime
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* chestRuntime;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _faceRuntime
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* faceRuntime;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _scoreRuntime
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Material* scoreRuntime;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Material _faceMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__faceMaterial();
    // Get instance field reference: private UnityEngine.Material _chestMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__chestMaterial();
    // Get instance field reference: private UnityEngine.Material _bodyMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__bodyMaterial();
    // Get instance field reference: private UnityEngine.Material _scoreboardMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__scoreboardMaterial();
    // Get instance field reference: private UnityEngine.Mesh _bodyMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__bodyMesh();
    // Get instance field reference: private UnityEngine.Material _bodyRuntime
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__bodyRuntime();
    // Get instance field reference: private UnityEngine.Material _chestRuntime
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__chestRuntime();
    // Get instance field reference: private UnityEngine.Material _faceRuntime
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__faceRuntime();
    // Get instance field reference: private UnityEngine.Material _scoreRuntime
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__scoreRuntime();
    // public UnityEngine.Mesh get_bodyMesh()
    // Offset: 0x278A58C
    ::UnityEngine::Mesh* get_bodyMesh();
    // public UnityEngine.Material get_faceMaterial()
    // Offset: 0x278A594
    ::UnityEngine::Material* get_faceMaterial();
    // public UnityEngine.Material get_bodyMaterial()
    // Offset: 0x278A59C
    ::UnityEngine::Material* get_bodyMaterial();
    // public UnityEngine.Material get_chestMaterial()
    // Offset: 0x278A5A4
    ::UnityEngine::Material* get_chestMaterial();
    // public UnityEngine.Material get_scoreboardMaterial()
    // Offset: 0x278A5AC
    ::UnityEngine::Material* get_scoreboardMaterial();
    // static public System.Void ApplyToRig(VRRig rig, GorillaSkin skin, System.Boolean useDefaultBodySkin)
    // Offset: 0x278A5B4
    static void ApplyToRig(::GlobalNamespace::VRRig* rig, ::GlobalNamespace::GorillaSkin* skin, bool useDefaultBodySkin);
    // public System.Void .ctor()
    // Offset: 0x278A774
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaSkin* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSkin::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaSkin*, creationType>()));
    }
  }; // GorillaSkin
  #pragma pack(pop)
  static check_size<sizeof(GorillaSkin), 88 + sizeof(::UnityEngine::Material*)> __GlobalNamespace_GorillaSkinSizeCheck;
  static_assert(sizeof(GorillaSkin) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkin::get_bodyMesh
// Il2CppName: get_bodyMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (GlobalNamespace::GorillaSkin::*)()>(&GlobalNamespace::GorillaSkin::get_bodyMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkin*), "get_bodyMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkin::get_faceMaterial
// Il2CppName: get_faceMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::GorillaSkin::*)()>(&GlobalNamespace::GorillaSkin::get_faceMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkin*), "get_faceMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkin::get_bodyMaterial
// Il2CppName: get_bodyMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::GorillaSkin::*)()>(&GlobalNamespace::GorillaSkin::get_bodyMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkin*), "get_bodyMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkin::get_chestMaterial
// Il2CppName: get_chestMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::GorillaSkin::*)()>(&GlobalNamespace::GorillaSkin::get_chestMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkin*), "get_chestMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkin::get_scoreboardMaterial
// Il2CppName: get_scoreboardMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::GorillaSkin::*)()>(&GlobalNamespace::GorillaSkin::get_scoreboardMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkin*), "get_scoreboardMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkin::ApplyToRig
// Il2CppName: ApplyToRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::VRRig*, ::GlobalNamespace::GorillaSkin*, bool)>(&GlobalNamespace::GorillaSkin::ApplyToRig)> {
  static const MethodInfo* get() {
    static auto* rig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* skin = &::il2cpp_utils::GetClassFromName("", "GorillaSkin")->byval_arg;
    static auto* useDefaultBodySkin = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaSkin*), "ApplyToRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rig, skin, useDefaultBodySkin});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaSkin::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
