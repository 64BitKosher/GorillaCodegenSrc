// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Component because it is already included!
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DevInspector
  class DevInspector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DevInspector);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DevInspector*, "", "DevInspector");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: DevInspector
  // [TokenAttribute] Offset: FFFFFFFF
  class DevInspector : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject pivot
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* pivot;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.UI.Text outputInfo
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* outputInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.Component[] componentToInspect
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Component*> componentToInspect;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Component*>) == 0x8);
    // public System.Boolean isEnabled
    // Size: 0x1
    // Offset: 0x38
    bool isEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean autoFind
    // Size: 0x1
    // Offset: 0x39
    bool autoFind;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoFind and: canvas
    char __padding4[0x6] = {};
    // public UnityEngine.GameObject canvas
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* canvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 sidewaysOffset
    // Size: 0x4
    // Offset: 0x48
    int sidewaysOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.GameObject pivot
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_pivot();
    // Get instance field reference: public UnityEngine.UI.Text outputInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_outputInfo();
    // Get instance field reference: public UnityEngine.Component[] componentToInspect
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Component*>& dyn_componentToInspect();
    // Get instance field reference: public System.Boolean isEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_isEnabled();
    // Get instance field reference: public System.Boolean autoFind
    [[deprecated("Use field access instead!")]] bool& dyn_autoFind();
    // Get instance field reference: public UnityEngine.GameObject canvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_canvas();
    // Get instance field reference: public System.Int32 sidewaysOffset
    [[deprecated("Use field access instead!")]] int& dyn_sidewaysOffset();
    // private System.Void OnEnable()
    // Offset: 0x279AD34
    void OnEnable();
    // public System.Void .ctor()
    // Offset: 0x279ADA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DevInspector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DevInspector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DevInspector*, creationType>()));
    }
  }; // DevInspector
  #pragma pack(pop)
  static check_size<sizeof(DevInspector), 72 + sizeof(int)> __GlobalNamespace_DevInspectorSizeCheck;
  static_assert(sizeof(DevInspector) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DevInspector::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DevInspector::*)()>(&GlobalNamespace::DevInspector::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DevInspector*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DevInspector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
