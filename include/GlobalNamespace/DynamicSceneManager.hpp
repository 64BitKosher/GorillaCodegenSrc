// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRAnchor
#include "GlobalNamespace/OVRAnchor.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: DynamicSceneManagerHelper.SnapshotComparer/ChangeType
#include "DynamicSceneManagerHelper/SnapshotComparer.hpp"
// Including type: DynamicSceneManagerHelper.SceneSnapshot
#include "DynamicSceneManagerHelper/SceneSnapshot.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DynamicSceneManager
  class DynamicSceneManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DynamicSceneManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DynamicSceneManager*, "", "DynamicSceneManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: DynamicSceneManager
  // [TokenAttribute] Offset: FFFFFFFF
  class DynamicSceneManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::DynamicSceneManager::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::DynamicSceneManager::$$c__DisplayClass10_0
    class $$c__DisplayClass10_0;
    // Nested type: ::GlobalNamespace::DynamicSceneManager::$LoadSceneSnapshotAsync$d__8
    struct $LoadSceneSnapshotAsync$d__8;
    // Nested type: ::GlobalNamespace::DynamicSceneManager::$UpdateScene$d__7
    struct $UpdateScene$d__7;
    // Nested type: ::GlobalNamespace::DynamicSceneManager::$UpdateScenePeriodically$d__6
    class $UpdateScenePeriodically$d__6;
    // Nested type: ::GlobalNamespace::DynamicSceneManager::$UpdateUnityObjects$d__9
    struct $UpdateUnityObjects$d__9;
    public:
    // public System.Single UpdateFrequencySeconds
    // Size: 0x4
    // Offset: 0x20
    float UpdateFrequencySeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: UpdateFrequencySeconds and: snapshot
    char __padding0[0x4] = {};
    // private DynamicSceneManagerHelper.SceneSnapshot _snapshot
    // Size: 0x8
    // Offset: 0x28
    ::DynamicSceneManagerHelper::SceneSnapshot* snapshot;
    // Field size check
    static_assert(sizeof(::DynamicSceneManagerHelper::SceneSnapshot*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<OVRAnchor,UnityEngine.GameObject> _sceneGameObjects
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRAnchor, ::UnityEngine::GameObject*>* sceneGameObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRAnchor, ::UnityEngine::GameObject*>*) == 0x8);
    // private System.Threading.Tasks.Task _updateSceneTask
    // Size: 0x8
    // Offset: 0x38
    ::System::Threading::Tasks::Task* updateSceneTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task*) == 0x8);
    public:
    // Get instance field reference: public System.Single UpdateFrequencySeconds
    [[deprecated("Use field access instead!")]] float& dyn_UpdateFrequencySeconds();
    // Get instance field reference: private DynamicSceneManagerHelper.SceneSnapshot _snapshot
    [[deprecated("Use field access instead!")]] ::DynamicSceneManagerHelper::SceneSnapshot*& dyn__snapshot();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<OVRAnchor,UnityEngine.GameObject> _sceneGameObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRAnchor, ::UnityEngine::GameObject*>*& dyn__sceneGameObjects();
    // Get instance field reference: private System.Threading.Tasks.Task _updateSceneTask
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& dyn__updateSceneTask();
    // private System.Void Start()
    // Offset: 0x293ECA4
    void Start();
    // private System.Void Update()
    // Offset: 0x293ED3C
    void Update();
    // private System.Collections.IEnumerator UpdateScenePeriodically()
    // Offset: 0x293ECD0
    ::System::Collections::IEnumerator* UpdateScenePeriodically();
    // private System.Threading.Tasks.Task UpdateScene()
    // Offset: 0x293EDD4
    ::System::Threading::Tasks::Task* UpdateScene();
    // private System.Threading.Tasks.Task`1<DynamicSceneManagerHelper.SceneSnapshot> LoadSceneSnapshotAsync()
    // Offset: 0x293EEB8
    ::System::Threading::Tasks::Task_1<::DynamicSceneManagerHelper::SceneSnapshot*>* LoadSceneSnapshotAsync();
    // private System.Threading.Tasks.Task UpdateUnityObjects(System.Collections.Generic.List`1<System.ValueTuple`2<OVRAnchor,DynamicSceneManagerHelper.SnapshotComparer/ChangeType>> changes, DynamicSceneManagerHelper.SceneSnapshot newSnapshot)
    // Offset: 0x293EFA4
    ::System::Threading::Tasks::Task* UpdateUnityObjects(::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::DynamicSceneManagerHelper::SnapshotComparer::ChangeType>>* changes, ::DynamicSceneManagerHelper::SceneSnapshot* newSnapshot);
    // private System.Collections.Generic.List`1<OVRAnchor> FilterChanges(System.Collections.Generic.List`1<System.ValueTuple`2<OVRAnchor,DynamicSceneManagerHelper.SnapshotComparer/ChangeType>> changes, DynamicSceneManagerHelper.SnapshotComparer/ChangeType changeType)
    // Offset: 0x293F0BC
    ::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* FilterChanges(::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::DynamicSceneManagerHelper::SnapshotComparer::ChangeType>>* changes, ::DynamicSceneManagerHelper::SnapshotComparer::ChangeType changeType);
    // private System.Collections.Generic.List`1<System.ValueTuple`2<OVRAnchor,OVRAnchor>> FindAnchorPairs(System.Collections.Generic.List`1<OVRAnchor> allAnchors, DynamicSceneManagerHelper.SceneSnapshot newSnapshot)
    // Offset: 0x293F28C
    ::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::GlobalNamespace::OVRAnchor>>* FindAnchorPairs(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* allAnchors, ::DynamicSceneManagerHelper::SceneSnapshot* newSnapshot);
    // private System.Boolean AreAnchorsEqual(DynamicSceneManagerHelper.SceneSnapshot/Data anchor1Data, DynamicSceneManagerHelper.SceneSnapshot/Data anchor2Data)
    // Offset: 0x293FAD4
    bool AreAnchorsEqual(::DynamicSceneManagerHelper::SceneSnapshot::Data* anchor1Data, ::DynamicSceneManagerHelper::SceneSnapshot::Data* anchor2Data);
    // private OVRAnchor GetParentAnchor(OVRAnchor childAnchor, DynamicSceneManagerHelper.SceneSnapshot snapshot)
    // Offset: 0x293FBE4
    ::GlobalNamespace::OVRAnchor GetParentAnchor(::GlobalNamespace::OVRAnchor childAnchor, ::DynamicSceneManagerHelper::SceneSnapshot* snapshot);
    // public System.Void .ctor()
    // Offset: 0x293FE44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicSceneManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DynamicSceneManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicSceneManager*, creationType>()));
    }
    // private System.Boolean <UpdateScenePeriodically>b__6_0()
    // Offset: 0x293FF0C
    bool $UpdateScenePeriodically$b__6_0();
  }; // DynamicSceneManager
  #pragma pack(pop)
  static check_size<sizeof(DynamicSceneManager), 56 + sizeof(::System::Threading::Tasks::Task*)> __GlobalNamespace_DynamicSceneManagerSizeCheck;
  static_assert(sizeof(DynamicSceneManager) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DynamicSceneManager::*)()>(&GlobalNamespace::DynamicSceneManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DynamicSceneManager::*)()>(&GlobalNamespace::DynamicSceneManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::UpdateScenePeriodically
// Il2CppName: UpdateScenePeriodically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::DynamicSceneManager::*)()>(&GlobalNamespace::DynamicSceneManager::UpdateScenePeriodically)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "UpdateScenePeriodically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::UpdateScene
// Il2CppName: UpdateScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::DynamicSceneManager::*)()>(&GlobalNamespace::DynamicSceneManager::UpdateScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "UpdateScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::LoadSceneSnapshotAsync
// Il2CppName: LoadSceneSnapshotAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::DynamicSceneManagerHelper::SceneSnapshot*>* (GlobalNamespace::DynamicSceneManager::*)()>(&GlobalNamespace::DynamicSceneManager::LoadSceneSnapshotAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "LoadSceneSnapshotAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::UpdateUnityObjects
// Il2CppName: UpdateUnityObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::DynamicSceneManager::*)(::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::DynamicSceneManagerHelper::SnapshotComparer::ChangeType>>*, ::DynamicSceneManagerHelper::SceneSnapshot*)>(&GlobalNamespace::DynamicSceneManager::UpdateUnityObjects)> {
  static const MethodInfo* get() {
    static auto* changes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ValueTuple`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor"), ::il2cpp_utils::GetClassFromName("DynamicSceneManagerHelper", "SnapshotComparer/ChangeType")})})->byval_arg;
    static auto* newSnapshot = &::il2cpp_utils::GetClassFromName("DynamicSceneManagerHelper", "SceneSnapshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "UpdateUnityObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changes, newSnapshot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::FilterChanges
// Il2CppName: FilterChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>* (GlobalNamespace::DynamicSceneManager::*)(::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::DynamicSceneManagerHelper::SnapshotComparer::ChangeType>>*, ::DynamicSceneManagerHelper::SnapshotComparer::ChangeType)>(&GlobalNamespace::DynamicSceneManager::FilterChanges)> {
  static const MethodInfo* get() {
    static auto* changes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ValueTuple`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor"), ::il2cpp_utils::GetClassFromName("DynamicSceneManagerHelper", "SnapshotComparer/ChangeType")})})->byval_arg;
    static auto* changeType = &::il2cpp_utils::GetClassFromName("DynamicSceneManagerHelper", "SnapshotComparer/ChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "FilterChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changes, changeType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::FindAnchorPairs
// Il2CppName: FindAnchorPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::ValueTuple_2<::GlobalNamespace::OVRAnchor, ::GlobalNamespace::OVRAnchor>>* (GlobalNamespace::DynamicSceneManager::*)(::System::Collections::Generic::List_1<::GlobalNamespace::OVRAnchor>*, ::DynamicSceneManagerHelper::SceneSnapshot*)>(&GlobalNamespace::DynamicSceneManager::FindAnchorPairs)> {
  static const MethodInfo* get() {
    static auto* allAnchors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "OVRAnchor")})->byval_arg;
    static auto* newSnapshot = &::il2cpp_utils::GetClassFromName("DynamicSceneManagerHelper", "SceneSnapshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "FindAnchorPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allAnchors, newSnapshot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::AreAnchorsEqual
// Il2CppName: AreAnchorsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::DynamicSceneManager::*)(::DynamicSceneManagerHelper::SceneSnapshot::Data*, ::DynamicSceneManagerHelper::SceneSnapshot::Data*)>(&GlobalNamespace::DynamicSceneManager::AreAnchorsEqual)> {
  static const MethodInfo* get() {
    static auto* anchor1Data = &::il2cpp_utils::GetClassFromName("DynamicSceneManagerHelper", "SceneSnapshot/Data")->byval_arg;
    static auto* anchor2Data = &::il2cpp_utils::GetClassFromName("DynamicSceneManagerHelper", "SceneSnapshot/Data")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "AreAnchorsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor1Data, anchor2Data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::GetParentAnchor
// Il2CppName: GetParentAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRAnchor (GlobalNamespace::DynamicSceneManager::*)(::GlobalNamespace::OVRAnchor, ::DynamicSceneManagerHelper::SceneSnapshot*)>(&GlobalNamespace::DynamicSceneManager::GetParentAnchor)> {
  static const MethodInfo* get() {
    static auto* childAnchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("DynamicSceneManagerHelper", "SceneSnapshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "GetParentAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{childAnchor, snapshot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DynamicSceneManager::$UpdateScenePeriodically$b__6_0
// Il2CppName: <UpdateScenePeriodically>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::DynamicSceneManager::*)()>(&GlobalNamespace::DynamicSceneManager::$UpdateScenePeriodically$b__6_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DynamicSceneManager*), "<UpdateScenePeriodically>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
