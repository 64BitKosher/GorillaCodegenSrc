// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MothershipApiClient
#include "GlobalNamespace/MothershipApiClient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AuthRefreshRequiredDelegateWrapper
  class AuthRefreshRequiredDelegateWrapper;
  // Forward declaring type: LoginCompleteDelegateWrapper
  class LoginCompleteDelegateWrapper;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MothershipClientApiClient
  class MothershipClientApiClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MothershipClientApiClient);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MothershipClientApiClient*, "", "MothershipClientApiClient");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MothershipClientApiClient
  // [TokenAttribute] Offset: FFFFFFFF
  class MothershipClientApiClient : public ::GlobalNamespace::MothershipApiClient {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x28
    char ___base_padding[0x7] = {};
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x28
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    public:
    // Creating conversion operator: operator ::System::Runtime::InteropServices::HandleRef
    constexpr operator ::System::Runtime::InteropServices::HandleRef() const noexcept {
      return swigCPtr;
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // static System.Runtime.InteropServices.HandleRef getCPtr(MothershipClientApiClient obj)
    // Offset: 0x2676BDC
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::GlobalNamespace::MothershipClientApiClient* obj);
    // public System.Void .ctor(System.String baseUrl, System.String titleId, System.String envId, System.String deploymentId, System.Boolean enableRetryQueue)
    // Offset: 0x267ACA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MothershipClientApiClient* New_ctor(::StringW baseUrl, ::StringW titleId, ::StringW envId, ::StringW deploymentId, bool enableRetryQueue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipClientApiClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MothershipClientApiClient*, creationType>(baseUrl, titleId, envId, deploymentId, enableRetryQueue)));
    }
    // public System.Void SetAuthRefreshRequiredDelegateWrapper(AuthRefreshRequiredDelegateWrapper wrapper)
    // Offset: 0x267ADA0
    void SetAuthRefreshRequiredDelegateWrapper(::GlobalNamespace::AuthRefreshRequiredDelegateWrapper* wrapper);
    // public System.Void SetLoginCompleteDelegate(LoginCompleteDelegateWrapper wrapper)
    // Offset: 0x267AEA4
    void SetLoginCompleteDelegate(::GlobalNamespace::LoginCompleteDelegateWrapper* wrapper);
    // public System.Boolean LoginWithInsecure1(System.String username, System.String password, System.IntPtr userData)
    // Offset: 0x267AFA8
    bool LoginWithInsecure1(::StringW username, ::StringW password, ::System::IntPtr userData);
    // public System.Boolean LoginWithQuest(System.String nonce, System.String userId, System.IntPtr userData)
    // Offset: 0x267B098
    bool LoginWithQuest(::StringW nonce, ::StringW userId, ::System::IntPtr userData);
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x267AA94
    // Implemented from: MothershipApiClient
    // Base method: System.Void MothershipApiClient::.ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MothershipClientApiClient* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MothershipClientApiClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MothershipClientApiClient*, creationType>(cPtr, cMemoryOwn)));
    }
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x267AB40
    // Implemented from: MothershipApiClient
    // Base method: System.Void MothershipApiClient::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // MothershipClientApiClient
  #pragma pack(pop)
  static check_size<sizeof(MothershipClientApiClient), 40 + sizeof(::System::Runtime::InteropServices::HandleRef)> __GlobalNamespace_MothershipClientApiClientSizeCheck;
  static_assert(sizeof(MothershipClientApiClient) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MothershipClientApiClient::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::GlobalNamespace::MothershipClientApiClient*)>(&GlobalNamespace::MothershipClientApiClient::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "MothershipClientApiClient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MothershipClientApiClient*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MothershipClientApiClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MothershipClientApiClient::SetAuthRefreshRequiredDelegateWrapper
// Il2CppName: SetAuthRefreshRequiredDelegateWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MothershipClientApiClient::*)(::GlobalNamespace::AuthRefreshRequiredDelegateWrapper*)>(&GlobalNamespace::MothershipClientApiClient::SetAuthRefreshRequiredDelegateWrapper)> {
  static const MethodInfo* get() {
    static auto* wrapper = &::il2cpp_utils::GetClassFromName("", "AuthRefreshRequiredDelegateWrapper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MothershipClientApiClient*), "SetAuthRefreshRequiredDelegateWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wrapper});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MothershipClientApiClient::SetLoginCompleteDelegate
// Il2CppName: SetLoginCompleteDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MothershipClientApiClient::*)(::GlobalNamespace::LoginCompleteDelegateWrapper*)>(&GlobalNamespace::MothershipClientApiClient::SetLoginCompleteDelegate)> {
  static const MethodInfo* get() {
    static auto* wrapper = &::il2cpp_utils::GetClassFromName("", "LoginCompleteDelegateWrapper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MothershipClientApiClient*), "SetLoginCompleteDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wrapper});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MothershipClientApiClient::LoginWithInsecure1
// Il2CppName: LoginWithInsecure1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MothershipClientApiClient::*)(::StringW, ::StringW, ::System::IntPtr)>(&GlobalNamespace::MothershipClientApiClient::LoginWithInsecure1)> {
  static const MethodInfo* get() {
    static auto* username = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MothershipClientApiClient*), "LoginWithInsecure1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{username, password, userData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MothershipClientApiClient::LoginWithQuest
// Il2CppName: LoginWithQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MothershipClientApiClient::*)(::StringW, ::StringW, ::System::IntPtr)>(&GlobalNamespace::MothershipClientApiClient::LoginWithQuest)> {
  static const MethodInfo* get() {
    static auto* nonce = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MothershipClientApiClient*), "LoginWithQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonce, userId, userData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MothershipClientApiClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MothershipClientApiClient::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MothershipClientApiClient::*)(bool)>(&GlobalNamespace::MothershipClientApiClient::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MothershipClientApiClient*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
