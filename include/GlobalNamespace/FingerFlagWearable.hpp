// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.ISpawnable
#include "GorillaTag/ISpawnable.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FingerFlagWearable
  class FingerFlagWearable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FingerFlagWearable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FingerFlagWearable*, "", "FingerFlagWearable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xAD
  #pragma pack(push, 1)
  // Autogenerated type: FingerFlagWearable
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerFlagWearable : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::ISpawnable*/ {
    public:
    public:
    // public System.Boolean attachedToLeftHand
    // Size: 0x1
    // Offset: 0x20
    bool attachedToLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: attachedToLeftHand and: pinkyRingBone
    char __padding0[0x7] = {};
    // public UnityEngine.Transform pinkyRingBone
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* pinkyRingBone;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform thumbRingBone
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* thumbRingBone;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform[] clothBones
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Transform*> clothBones;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Transform[] clothRigidbodies
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Transform*> clothRigidbodies;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public System.Single extendSpeed
    // Size: 0x4
    // Offset: 0x50
    float extendSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single retractSpeed
    // Size: 0x4
    // Offset: 0x54
    float retractSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip extendAudioClip
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioClip* extendAudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip retractAudioClip
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AudioClip* retractAudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public System.Single extendVibrationDuration
    // Size: 0x4
    // Offset: 0x70
    float extendVibrationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single extendVibrationStrength
    // Size: 0x4
    // Offset: 0x74
    float extendVibrationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single retractVibrationDuration
    // Size: 0x4
    // Offset: 0x78
    float retractVibrationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single retractVibrationStrength
    // Size: 0x4
    // Offset: 0x7C
    float retractVibrationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Int32 retractExtendTimeAnimParam
    // Size: 0x4
    // Offset: 0x80
    int retractExtendTimeAnimParam;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean networkedExtended
    // Size: 0x1
    // Offset: 0x84
    bool networkedExtended;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean extended
    // Size: 0x1
    // Offset: 0x85
    bool extended;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean fullyRetracted
    // Size: 0x1
    // Offset: 0x86
    bool fullyRetracted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fullyRetracted and: retractExtendTime
    char __padding18[0x1] = {};
    // private System.Single retractExtendTime
    // Size: 0x4
    // Offset: 0x88
    float retractExtendTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: retractExtendTime and: inputDevice
    char __padding19[0x4] = {};
    // private UnityEngine.XR.InputDevice inputDevice
    // Size: 0x9
    // Offset: 0x90
    ::UnityEngine::XR::InputDevice inputDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: inputDevice and: myRig
    char __padding20[0x7] = {};
    // private VRRig myRig
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Int32 stateBitIndex
    // Size: 0x4
    // Offset: 0xA8
    int stateBitIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
    // Size: 0x1
    // Offset: 0xAC
    bool IsSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::ISpawnable
    operator ::GorillaTag::ISpawnable() noexcept {
      return *reinterpret_cast<::GorillaTag::ISpawnable*>(this);
    }
    // Get instance field reference: public System.Boolean attachedToLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_attachedToLeftHand();
    // Get instance field reference: public UnityEngine.Transform pinkyRingBone
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_pinkyRingBone();
    // Get instance field reference: public UnityEngine.Transform thumbRingBone
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_thumbRingBone();
    // Get instance field reference: public UnityEngine.Transform[] clothBones
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_clothBones();
    // Get instance field reference: public UnityEngine.Transform[] clothRigidbodies
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_clothRigidbodies();
    // Get instance field reference: public UnityEngine.Animator animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_animator();
    // Get instance field reference: public System.Single extendSpeed
    [[deprecated("Use field access instead!")]] float& dyn_extendSpeed();
    // Get instance field reference: public System.Single retractSpeed
    [[deprecated("Use field access instead!")]] float& dyn_retractSpeed();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip extendAudioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_extendAudioClip();
    // Get instance field reference: public UnityEngine.AudioClip retractAudioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_retractAudioClip();
    // Get instance field reference: public System.Single extendVibrationDuration
    [[deprecated("Use field access instead!")]] float& dyn_extendVibrationDuration();
    // Get instance field reference: public System.Single extendVibrationStrength
    [[deprecated("Use field access instead!")]] float& dyn_extendVibrationStrength();
    // Get instance field reference: public System.Single retractVibrationDuration
    [[deprecated("Use field access instead!")]] float& dyn_retractVibrationDuration();
    // Get instance field reference: public System.Single retractVibrationStrength
    [[deprecated("Use field access instead!")]] float& dyn_retractVibrationStrength();
    // Get instance field reference: private readonly System.Int32 retractExtendTimeAnimParam
    [[deprecated("Use field access instead!")]] int& dyn_retractExtendTimeAnimParam();
    // Get instance field reference: private System.Boolean networkedExtended
    [[deprecated("Use field access instead!")]] bool& dyn_networkedExtended();
    // Get instance field reference: private System.Boolean extended
    [[deprecated("Use field access instead!")]] bool& dyn_extended();
    // Get instance field reference: private System.Boolean fullyRetracted
    [[deprecated("Use field access instead!")]] bool& dyn_fullyRetracted();
    // Get instance field reference: private System.Single retractExtendTime
    [[deprecated("Use field access instead!")]] float& dyn_retractExtendTime();
    // Get instance field reference: private UnityEngine.XR.InputDevice inputDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_inputDevice();
    // Get instance field reference: private VRRig myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myRig();
    // Get instance field reference: private System.Int32 stateBitIndex
    [[deprecated("Use field access instead!")]] int& dyn_stateBitIndex();
    // Get instance field reference: private System.Boolean <GorillaTag.ISpawnable.IsSpawned>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$GorillaTag_ISpawnable_IsSpawned$k__BackingField();
    // private System.Boolean GorillaTag.ISpawnable.get_IsSpawned()
    // Offset: 0x269B844
    bool GorillaTag_ISpawnable_get_IsSpawned();
    // private System.Void GorillaTag.ISpawnable.set_IsSpawned(System.Boolean value)
    // Offset: 0x269B84C
    void GorillaTag_ISpawnable_set_IsSpawned(bool value);
    // private System.Void GorillaTag.ISpawnable.OnSpawn()
    // Offset: 0x269B858
    void GorillaTag_ISpawnable_OnSpawn();
    // private System.Void GorillaTag.ISpawnable.OnDespawn()
    // Offset: 0x269B928
    void GorillaTag_ISpawnable_OnDespawn();
    // protected System.Void OnEnable()
    // Offset: 0x269B92C
    void OnEnable();
    // private System.Void UpdateLocal()
    // Offset: 0x269BB20
    void UpdateLocal();
    // private System.Void UpdateShared()
    // Offset: 0x269BC70
    void UpdateShared();
    // private System.Void UpdateReplicated()
    // Offset: 0x269BDA4
    void UpdateReplicated();
    // public System.Boolean IsMyItem()
    // Offset: 0x269BE38
    bool IsMyItem();
    // protected System.Void LateUpdate()
    // Offset: 0x269BEC0
    void LateUpdate();
    // private System.Void UpdateAnimation()
    // Offset: 0x269BD34
    void UpdateAnimation();
    // private System.Void OnExtendStateChanged(System.Boolean playAudio)
    // Offset: 0x269B9C8
    void OnExtendStateChanged(bool playAudio);
    // public System.Void .ctor()
    // Offset: 0x269BEF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerFlagWearable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagWearable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerFlagWearable*, creationType>()));
    }
  }; // FingerFlagWearable
  #pragma pack(pop)
  static check_size<sizeof(FingerFlagWearable), 172 + sizeof(bool)> __GlobalNamespace_FingerFlagWearableSizeCheck;
  static_assert(sizeof(FingerFlagWearable) == 0xAD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_get_IsSpawned
// Il2CppName: GorillaTag.ISpawnable.get_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_get_IsSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "GorillaTag.ISpawnable.get_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_set_IsSpawned
// Il2CppName: GorillaTag.ISpawnable.set_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)(bool)>(&GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_set_IsSpawned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "GorillaTag.ISpawnable.set_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_OnSpawn
// Il2CppName: GorillaTag.ISpawnable.OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "GorillaTag.ISpawnable.OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_OnDespawn
// Il2CppName: GorillaTag.ISpawnable.OnDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::GorillaTag_ISpawnable_OnDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "GorillaTag.ISpawnable.OnDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::UpdateLocal
// Il2CppName: UpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::UpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "UpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::UpdateShared
// Il2CppName: UpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::UpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "UpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::UpdateReplicated
// Il2CppName: UpdateReplicated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::UpdateReplicated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "UpdateReplicated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::IsMyItem
// Il2CppName: IsMyItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::IsMyItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "IsMyItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::UpdateAnimation
// Il2CppName: UpdateAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)()>(&GlobalNamespace::FingerFlagWearable::UpdateAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "UpdateAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::OnExtendStateChanged
// Il2CppName: OnExtendStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagWearable::*)(bool)>(&GlobalNamespace::FingerFlagWearable::OnExtendStateChanged)> {
  static const MethodInfo* get() {
    static auto* playAudio = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagWearable*), "OnExtendStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playAudio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagWearable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
