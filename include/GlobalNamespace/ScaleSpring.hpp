// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BoingKit.Vector3Spring
#include "BoingKit/Vector3Spring.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ScaleSpring
  class ScaleSpring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ScaleSpring);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ScaleSpring*, "", "ScaleSpring");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: ScaleSpring
  // [TokenAttribute] Offset: FFFFFFFF
  class ScaleSpring : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private BoingKit.Vector3Spring m_spring
    // Size: 0x20
    // Offset: 0x20
    ::BoingKit::Vector3Spring m_spring;
    // Field size check
    static_assert(sizeof(::BoingKit::Vector3Spring) == 0x20);
    // private System.Single m_targetScale
    // Size: 0x4
    // Offset: 0x40
    float m_targetScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_lastTickTime
    // Size: 0x4
    // Offset: 0x44
    float m_lastTickTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private readonly System.Single kInterval
    static float _get_kInterval();
    // Set static field: static private readonly System.Single kInterval
    static void _set_kInterval(float value);
    // Get static field: static private readonly System.Single kSmallScale
    static float _get_kSmallScale();
    // Set static field: static private readonly System.Single kSmallScale
    static void _set_kSmallScale(float value);
    // Get static field: static private readonly System.Single kLargeScale
    static float _get_kLargeScale();
    // Set static field: static private readonly System.Single kLargeScale
    static void _set_kLargeScale(float value);
    // Get static field: static private readonly System.Single kMoveDistance
    static float _get_kMoveDistance();
    // Set static field: static private readonly System.Single kMoveDistance
    static void _set_kMoveDistance(float value);
    // Get instance field reference: private BoingKit.Vector3Spring m_spring
    [[deprecated("Use field access instead!")]] ::BoingKit::Vector3Spring& dyn_m_spring();
    // Get instance field reference: private System.Single m_targetScale
    [[deprecated("Use field access instead!")]] float& dyn_m_targetScale();
    // Get instance field reference: private System.Single m_lastTickTime
    [[deprecated("Use field access instead!")]] float& dyn_m_lastTickTime();
    // public System.Void Tick()
    // Offset: 0x26832A8
    void Tick();
    // public System.Void Start()
    // Offset: 0x26833B8
    void Start();
    // public System.Void FixedUpdate()
    // Offset: 0x268342C
    void FixedUpdate();
    // public System.Void .ctor()
    // Offset: 0x26835B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScaleSpring* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScaleSpring::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScaleSpring*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x26835B8
    static void _cctor();
  }; // ScaleSpring
  #pragma pack(pop)
  static check_size<sizeof(ScaleSpring), 68 + sizeof(float)> __GlobalNamespace_ScaleSpringSizeCheck;
  static_assert(sizeof(ScaleSpring) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ScaleSpring::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScaleSpring::*)()>(&GlobalNamespace::ScaleSpring::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScaleSpring*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScaleSpring::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScaleSpring::*)()>(&GlobalNamespace::ScaleSpring::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScaleSpring*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScaleSpring::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScaleSpring::*)()>(&GlobalNamespace::ScaleSpring::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScaleSpring*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScaleSpring::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ScaleSpring::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ScaleSpring::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScaleSpring*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
