// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AutomaticAdjustIPD
  class AutomaticAdjustIPD;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AutomaticAdjustIPD);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AutomaticAdjustIPD*, "", "AutomaticAdjustIPD");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: AutomaticAdjustIPD
  // [TokenAttribute] Offset: FFFFFFFF
  class AutomaticAdjustIPD : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.XR.InputDevice headset
    // Size: 0x9
    // Offset: 0x20
    ::UnityEngine::XR::InputDevice headset;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: headset and: currentIPD
    char __padding0[0x7] = {};
    // public System.Single currentIPD
    // Size: 0x4
    // Offset: 0x30
    float currentIPD;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 leftEyePosition
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 leftEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rightEyePosition
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 rightEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean testOverride
    // Size: 0x1
    // Offset: 0x4C
    bool testOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: testOverride and: adjustXScaleObjects
    char __padding4[0x3] = {};
    // public UnityEngine.Transform[] adjustXScaleObjects
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Transform*> adjustXScaleObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public System.Single sizeAt58mm
    // Size: 0x4
    // Offset: 0x58
    float sizeAt58mm;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sizeAt63mm
    // Size: 0x4
    // Offset: 0x5C
    float sizeAt63mm;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastIPD
    // Size: 0x4
    // Offset: 0x60
    float lastIPD;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.XR.InputDevice headset
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_headset();
    // Get instance field reference: public System.Single currentIPD
    [[deprecated("Use field access instead!")]] float& dyn_currentIPD();
    // Get instance field reference: public UnityEngine.Vector3 leftEyePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftEyePosition();
    // Get instance field reference: public UnityEngine.Vector3 rightEyePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightEyePosition();
    // Get instance field reference: public System.Boolean testOverride
    [[deprecated("Use field access instead!")]] bool& dyn_testOverride();
    // Get instance field reference: public UnityEngine.Transform[] adjustXScaleObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_adjustXScaleObjects();
    // Get instance field reference: public System.Single sizeAt58mm
    [[deprecated("Use field access instead!")]] float& dyn_sizeAt58mm();
    // Get instance field reference: public System.Single sizeAt63mm
    [[deprecated("Use field access instead!")]] float& dyn_sizeAt63mm();
    // Get instance field reference: public System.Single lastIPD
    [[deprecated("Use field access instead!")]] float& dyn_lastIPD();
    // private System.Void Update()
    // Offset: 0x26E02C8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x26E04F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AutomaticAdjustIPD* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AutomaticAdjustIPD::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AutomaticAdjustIPD*, creationType>()));
    }
  }; // AutomaticAdjustIPD
  #pragma pack(pop)
  static check_size<sizeof(AutomaticAdjustIPD), 96 + sizeof(float)> __GlobalNamespace_AutomaticAdjustIPDSizeCheck;
  static_assert(sizeof(AutomaticAdjustIPD) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AutomaticAdjustIPD::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AutomaticAdjustIPD::*)()>(&GlobalNamespace::AutomaticAdjustIPD::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AutomaticAdjustIPD*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AutomaticAdjustIPD::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
