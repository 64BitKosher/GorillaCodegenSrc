// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRTrackedKeyboard
  class OVRTrackedKeyboard;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: InputField
  class InputField;
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Toggle
  class Toggle;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRTrackedKeyboardSampleControls
  class OVRTrackedKeyboardSampleControls;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRTrackedKeyboardSampleControls);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTrackedKeyboardSampleControls*, "", "OVRTrackedKeyboardSampleControls");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: OVRTrackedKeyboardSampleControls
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRTrackedKeyboardSampleControls : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVRTrackedKeyboardSampleControls::$SetShaderCoroutine$d__19
    class $SetShaderCoroutine$d__19;
    public:
    // public OVRTrackedKeyboard trackedKeyboard
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRTrackedKeyboard* trackedKeyboard;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTrackedKeyboard*) == 0x8);
    // public UnityEngine.UI.InputField StartingFocusField
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::InputField* StartingFocusField;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::InputField*) == 0x8);
    // public UnityEngine.UI.Text NameValue
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* NameValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text ConnectedValue
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Text* ConnectedValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text StateValue
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UI::Text* StateValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text SelectKeyboardValue
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UI::Text* SelectKeyboardValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text TypeValue
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Text* TypeValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.Color GoodStateColor
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color GoodStateColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color BadStateColor
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Color BadStateColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.UI.Toggle TrackingToggle
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UI::Toggle* TrackingToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // public UnityEngine.UI.Toggle ConnectionToggle
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UI::Toggle* ConnectionToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // public UnityEngine.UI.Toggle RemoteKeyboardToggle
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::UI::Toggle* RemoteKeyboardToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // public UnityEngine.UI.Button[] ShaderButtons
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::UnityEngine::UI::Button*> ShaderButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UI::Button*>) == 0x8);
    public:
    // Get instance field reference: public OVRTrackedKeyboard trackedKeyboard
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTrackedKeyboard*& dyn_trackedKeyboard();
    // Get instance field reference: public UnityEngine.UI.InputField StartingFocusField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::InputField*& dyn_StartingFocusField();
    // Get instance field reference: public UnityEngine.UI.Text NameValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_NameValue();
    // Get instance field reference: public UnityEngine.UI.Text ConnectedValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_ConnectedValue();
    // Get instance field reference: public UnityEngine.UI.Text StateValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_StateValue();
    // Get instance field reference: public UnityEngine.UI.Text SelectKeyboardValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_SelectKeyboardValue();
    // Get instance field reference: public UnityEngine.UI.Text TypeValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_TypeValue();
    // Get instance field reference: public UnityEngine.Color GoodStateColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_GoodStateColor();
    // Get instance field reference: public UnityEngine.Color BadStateColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_BadStateColor();
    // Get instance field reference: public UnityEngine.UI.Toggle TrackingToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn_TrackingToggle();
    // Get instance field reference: public UnityEngine.UI.Toggle ConnectionToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn_ConnectionToggle();
    // Get instance field reference: public UnityEngine.UI.Toggle RemoteKeyboardToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn_RemoteKeyboardToggle();
    // Get instance field reference: public UnityEngine.UI.Button[] ShaderButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UI::Button*>& dyn_ShaderButtons();
    // private System.Void Start()
    // Offset: 0x4935958
    void Start();
    // private System.Void Update()
    // Offset: 0x4935A58
    void Update();
    // public System.Void SetPresentationOpaque()
    // Offset: 0x4935C9C
    void SetPresentationOpaque();
    // public System.Void SetPresentationMR()
    // Offset: 0x4935CB8
    void SetPresentationMR();
    // public System.Void SetUnlitShader()
    // Offset: 0x4935CD4
    void SetUnlitShader();
    // public System.Void SetDiffuseShader()
    // Offset: 0x4935DB4
    void SetDiffuseShader();
    // private System.Collections.IEnumerator SetShaderCoroutine(System.String shaderName)
    // Offset: 0x4935D2C
    ::System::Collections::IEnumerator* SetShaderCoroutine(::StringW shaderName);
    // public System.Void LaunchKeyboardSelection()
    // Offset: 0x4935E34
    void LaunchKeyboardSelection();
    // public System.Void SetTrackingEnabled(System.Boolean value)
    // Offset: 0x4935E60
    void SetTrackingEnabled(bool value);
    // public System.Void .ctor()
    // Offset: 0x4935E80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRTrackedKeyboardSampleControls* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRTrackedKeyboardSampleControls::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRTrackedKeyboardSampleControls*, creationType>()));
    }
    // private System.Boolean <SetShaderCoroutine>b__19_0()
    // Offset: 0x4935EA0
    bool $SetShaderCoroutine$b__19_0();
  }; // OVRTrackedKeyboardSampleControls
  #pragma pack(pop)
  static check_size<sizeof(OVRTrackedKeyboardSampleControls), 144 + sizeof(::ArrayW<::UnityEngine::UI::Button*>)> __GlobalNamespace_OVRTrackedKeyboardSampleControlsSizeCheck;
  static_assert(sizeof(OVRTrackedKeyboardSampleControls) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)()>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)()>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::SetPresentationOpaque
// Il2CppName: SetPresentationOpaque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)()>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::SetPresentationOpaque)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "SetPresentationOpaque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::SetPresentationMR
// Il2CppName: SetPresentationMR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)()>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::SetPresentationMR)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "SetPresentationMR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::SetUnlitShader
// Il2CppName: SetUnlitShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)()>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::SetUnlitShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "SetUnlitShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::SetDiffuseShader
// Il2CppName: SetDiffuseShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)()>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::SetDiffuseShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "SetDiffuseShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::SetShaderCoroutine
// Il2CppName: SetShaderCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)(::StringW)>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::SetShaderCoroutine)> {
  static const MethodInfo* get() {
    static auto* shaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "SetShaderCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::LaunchKeyboardSelection
// Il2CppName: LaunchKeyboardSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)()>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::LaunchKeyboardSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "LaunchKeyboardSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::SetTrackingEnabled
// Il2CppName: SetTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)(bool)>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::SetTrackingEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "SetTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRTrackedKeyboardSampleControls::$SetShaderCoroutine$b__19_0
// Il2CppName: <SetShaderCoroutine>b__19_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTrackedKeyboardSampleControls::*)()>(&GlobalNamespace::OVRTrackedKeyboardSampleControls::$SetShaderCoroutine$b__19_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTrackedKeyboardSampleControls*), "<SetShaderCoroutine>b__19_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
