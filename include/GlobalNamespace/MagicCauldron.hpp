// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MagicIngredientType
  class MagicIngredientType;
  // Forward declaring type: MagicCauldronLiquid
  class MagicCauldronLiquid;
  // Skipping declaration: CauldronState because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaLocomotion::Gameplay
namespace GorillaLocomotion::Gameplay {
  // Forward declaring type: NoncontrollableBroomstick
  class NoncontrollableBroomstick;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
  // Forward declaring type: PhotonStream
  class PhotonStream;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MagicCauldron
  class MagicCauldron;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MagicCauldron);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MagicCauldron*, "", "MagicCauldron");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x13C
  #pragma pack(push, 1)
  // Autogenerated type: MagicCauldron
  // [TokenAttribute] Offset: FFFFFFFF
  class MagicCauldron : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    // Nested type: ::GlobalNamespace::MagicCauldron::CauldronState
    struct CauldronState;
    // Nested type: ::GlobalNamespace::MagicCauldron::Recipe
    struct Recipe;
    // Nested type: ::GlobalNamespace::MagicCauldron::IngredientArgs
    class IngredientArgs;
    // Nested type: ::GlobalNamespace::MagicCauldron::IngrediantFXContext
    class IngrediantFXContext;
    // Nested type: ::GlobalNamespace::MagicCauldron::$LevitationSpellCoroutine$d__45
    class $LevitationSpellCoroutine$d__45;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MagicCauldron/CauldronState
    // [TokenAttribute] Offset: FFFFFFFF
    struct CauldronState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CauldronState
      constexpr CauldronState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MagicCauldron/CauldronState notReady
      static constexpr const int notReady = 0;
      // Get static field: static public MagicCauldron/CauldronState notReady
      static ::GlobalNamespace::MagicCauldron::CauldronState _get_notReady();
      // Set static field: static public MagicCauldron/CauldronState notReady
      static void _set_notReady(::GlobalNamespace::MagicCauldron::CauldronState value);
      // static field const value: static public MagicCauldron/CauldronState ready
      static constexpr const int ready = 1;
      // Get static field: static public MagicCauldron/CauldronState ready
      static ::GlobalNamespace::MagicCauldron::CauldronState _get_ready();
      // Set static field: static public MagicCauldron/CauldronState ready
      static void _set_ready(::GlobalNamespace::MagicCauldron::CauldronState value);
      // static field const value: static public MagicCauldron/CauldronState recipeCollecting
      static constexpr const int recipeCollecting = 2;
      // Get static field: static public MagicCauldron/CauldronState recipeCollecting
      static ::GlobalNamespace::MagicCauldron::CauldronState _get_recipeCollecting();
      // Set static field: static public MagicCauldron/CauldronState recipeCollecting
      static void _set_recipeCollecting(::GlobalNamespace::MagicCauldron::CauldronState value);
      // static field const value: static public MagicCauldron/CauldronState recipeActivated
      static constexpr const int recipeActivated = 3;
      // Get static field: static public MagicCauldron/CauldronState recipeActivated
      static ::GlobalNamespace::MagicCauldron::CauldronState _get_recipeActivated();
      // Set static field: static public MagicCauldron/CauldronState recipeActivated
      static void _set_recipeActivated(::GlobalNamespace::MagicCauldron::CauldronState value);
      // static field const value: static public MagicCauldron/CauldronState summoned
      static constexpr const int summoned = 4;
      // Get static field: static public MagicCauldron/CauldronState summoned
      static ::GlobalNamespace::MagicCauldron::CauldronState _get_summoned();
      // Set static field: static public MagicCauldron/CauldronState summoned
      static void _set_summoned(::GlobalNamespace::MagicCauldron::CauldronState value);
      // static field const value: static public MagicCauldron/CauldronState failed
      static constexpr const int failed = 5;
      // Get static field: static public MagicCauldron/CauldronState failed
      static ::GlobalNamespace::MagicCauldron::CauldronState _get_failed();
      // Set static field: static public MagicCauldron/CauldronState failed
      static void _set_failed(::GlobalNamespace::MagicCauldron::CauldronState value);
      // static field const value: static public MagicCauldron/CauldronState cooldown
      static constexpr const int cooldown = 6;
      // Get static field: static public MagicCauldron/CauldronState cooldown
      static ::GlobalNamespace::MagicCauldron::CauldronState _get_cooldown();
      // Set static field: static public MagicCauldron/CauldronState cooldown
      static void _set_cooldown(::GlobalNamespace::MagicCauldron::CauldronState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MagicCauldron/CauldronState
    #pragma pack(pop)
    static check_size<sizeof(MagicCauldron::CauldronState), 0 + sizeof(int)> __GlobalNamespace_MagicCauldron_CauldronStateSizeCheck;
    static_assert(sizeof(MagicCauldron::CauldronState) == 0x4);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: MagicCauldron/Recipe
    // [TokenAttribute] Offset: FFFFFFFF
    struct Recipe/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Collections.Generic.List`1<MagicIngredientType> recipeIngredients
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<::GlobalNamespace::MagicIngredientType*>* recipeIngredients;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::MagicIngredientType*>*) == 0x8);
      // public UnityEngine.AudioClip successAudio
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::AudioClip* successAudio;
      // Field size check
      static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
      public:
      // Creating value type constructor for type: Recipe
      constexpr Recipe(::System::Collections::Generic::List_1<::GlobalNamespace::MagicIngredientType*>* recipeIngredients_ = {}, ::UnityEngine::AudioClip* successAudio_ = {}) noexcept : recipeIngredients{recipeIngredients_}, successAudio{successAudio_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Collections.Generic.List`1<MagicIngredientType> recipeIngredients
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MagicIngredientType*>*& dyn_recipeIngredients();
      // Get instance field reference: public UnityEngine.AudioClip successAudio
      [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_successAudio();
    }; // MagicCauldron/Recipe
    #pragma pack(pop)
    static check_size<sizeof(MagicCauldron::Recipe), 8 + sizeof(::UnityEngine::AudioClip*)> __GlobalNamespace_MagicCauldron_RecipeSizeCheck;
    static_assert(sizeof(MagicCauldron::Recipe) == 0x10);
    public:
    // public System.Collections.Generic.List`1<MagicCauldron/Recipe> recipes
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GlobalNamespace::MagicCauldron::Recipe>* recipes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::MagicCauldron::Recipe>*) == 0x8);
    // public System.Single maxTimeToAddAllIngredients
    // Size: 0x4
    // Offset: 0x30
    float maxTimeToAddAllIngredients;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single summonWitchesDuration
    // Size: 0x4
    // Offset: 0x34
    float summonWitchesDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single recipeFailedDuration
    // Size: 0x4
    // Offset: 0x38
    float recipeFailedDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cooldownDuration
    // Size: 0x4
    // Offset: 0x3C
    float cooldownDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public MagicIngredientType[] allIngredients
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::MagicIngredientType*> allIngredients;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MagicIngredientType*>) == 0x8);
    // public UnityEngine.GameObject flyingWitchesContainer
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* flyingWitchesContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip ingredientAddedAudio
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioClip* ingredientAddedAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip recipeFailedAudio
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioClip* recipeFailedAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.ParticleSystem bubblesParticle
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::ParticleSystem* bubblesParticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.ParticleSystem successParticle
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::ParticleSystem* successParticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.ParticleSystem splashParticle
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::ParticleSystem* splashParticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.Color CauldronActiveColor
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Color CauldronActiveColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color CauldronFailedColor
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Color CauldronFailedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color CauldronNotReadyColor
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Color CauldronNotReadyColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private readonly System.Collections.Generic.List`1<GorillaLocomotion.Gameplay.NoncontrollableBroomstick> witchesComponent
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::GorillaLocomotion::Gameplay::NoncontrollableBroomstick*>* witchesComponent;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaLocomotion::Gameplay::NoncontrollableBroomstick*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<MagicIngredientType> currentIngredients
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::List_1<::GlobalNamespace::MagicIngredientType*>* currentIngredients;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::MagicIngredientType*>*) == 0x8);
    // private System.Single currentStateElapsedTime
    // Size: 0x4
    // Offset: 0xC0
    float currentStateElapsedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private MagicCauldron/CauldronState currentState
    // Size: 0x4
    // Offset: 0xC4
    ::GlobalNamespace::MagicCauldron::CauldronState currentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MagicCauldron::CauldronState) == 0x4);
    // private UnityEngine.Renderer rendr
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Renderer* rendr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color cauldronColor
    // Size: 0x10
    // Offset: 0xD0
    ::UnityEngine::Color cauldronColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color currentColor
    // Size: 0x10
    // Offset: 0xE0
    ::UnityEngine::Color currentColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Int32 currentRecipeIndex
    // Size: 0x4
    // Offset: 0xF0
    int currentRecipeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 ingredientIndex
    // Size: 0x4
    // Offset: 0xF4
    int ingredientIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single waitTimeToSummonWitches
    // Size: 0x4
    // Offset: 0xF8
    float waitTimeToSummonWitches;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: waitTimeToSummonWitches and: liquid
    char __padding25[0x4] = {};
    // private MagicCauldronLiquid _liquid
    // Size: 0x8
    // Offset: 0x100
    ::GlobalNamespace::MagicCauldronLiquid* liquid;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MagicCauldronLiquid*) == 0x8);
    // private MagicCauldron/IngrediantFXContext reusableFXContext
    // Size: 0x8
    // Offset: 0x108
    ::GlobalNamespace::MagicCauldron::IngrediantFXContext* reusableFXContext;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MagicCauldron::IngrediantFXContext*) == 0x8);
    // private MagicCauldron/IngredientArgs reusableIngrediantArgs
    // Size: 0x8
    // Offset: 0x110
    ::GlobalNamespace::MagicCauldron::IngredientArgs* reusableIngrediantArgs;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MagicCauldron::IngredientArgs*) == 0x8);
    // public System.Boolean testLevitationAlwaysOn
    // Size: 0x1
    // Offset: 0x118
    bool testLevitationAlwaysOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: testLevitationAlwaysOn and: levitationRadius
    char __padding29[0x3] = {};
    // public System.Single levitationRadius
    // Size: 0x4
    // Offset: 0x11C
    float levitationRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single levitationSpellDuration
    // Size: 0x4
    // Offset: 0x120
    float levitationSpellDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single levitationStrength
    // Size: 0x4
    // Offset: 0x124
    float levitationStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single levitationDuration
    // Size: 0x4
    // Offset: 0x128
    float levitationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single levitationBlendOutDuration
    // Size: 0x4
    // Offset: 0x12C
    float levitationBlendOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single levitationBonusStrength
    // Size: 0x4
    // Offset: 0x130
    float levitationBonusStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single levitationBonusOffAtYSpeed
    // Size: 0x4
    // Offset: 0x134
    float levitationBonusOffAtYSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single levitationBonusFullAtYSpeed
    // Size: 0x4
    // Offset: 0x138
    float levitationBonusFullAtYSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: public System.Collections.Generic.List`1<MagicCauldron/Recipe> recipes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MagicCauldron::Recipe>*& dyn_recipes();
    // Get instance field reference: public System.Single maxTimeToAddAllIngredients
    [[deprecated("Use field access instead!")]] float& dyn_maxTimeToAddAllIngredients();
    // Get instance field reference: public System.Single summonWitchesDuration
    [[deprecated("Use field access instead!")]] float& dyn_summonWitchesDuration();
    // Get instance field reference: public System.Single recipeFailedDuration
    [[deprecated("Use field access instead!")]] float& dyn_recipeFailedDuration();
    // Get instance field reference: public System.Single cooldownDuration
    [[deprecated("Use field access instead!")]] float& dyn_cooldownDuration();
    // Get instance field reference: public MagicIngredientType[] allIngredients
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MagicIngredientType*>& dyn_allIngredients();
    // Get instance field reference: public UnityEngine.GameObject flyingWitchesContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_flyingWitchesContainer();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip ingredientAddedAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_ingredientAddedAudio();
    // Get instance field reference: public UnityEngine.AudioClip recipeFailedAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_recipeFailedAudio();
    // Get instance field reference: public UnityEngine.ParticleSystem bubblesParticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_bubblesParticle();
    // Get instance field reference: public UnityEngine.ParticleSystem successParticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_successParticle();
    // Get instance field reference: public UnityEngine.ParticleSystem splashParticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_splashParticle();
    // Get instance field reference: public UnityEngine.Color CauldronActiveColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_CauldronActiveColor();
    // Get instance field reference: public UnityEngine.Color CauldronFailedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_CauldronFailedColor();
    // Get instance field reference: public UnityEngine.Color CauldronNotReadyColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_CauldronNotReadyColor();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<GorillaLocomotion.Gameplay.NoncontrollableBroomstick> witchesComponent
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaLocomotion::Gameplay::NoncontrollableBroomstick*>*& dyn_witchesComponent();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<MagicIngredientType> currentIngredients
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MagicIngredientType*>*& dyn_currentIngredients();
    // Get instance field reference: private System.Single currentStateElapsedTime
    [[deprecated("Use field access instead!")]] float& dyn_currentStateElapsedTime();
    // Get instance field reference: private MagicCauldron/CauldronState currentState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicCauldron::CauldronState& dyn_currentState();
    // Get instance field reference: private UnityEngine.Renderer rendr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_rendr();
    // Get instance field reference: private UnityEngine.Color cauldronColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_cauldronColor();
    // Get instance field reference: private UnityEngine.Color currentColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_currentColor();
    // Get instance field reference: private System.Int32 currentRecipeIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentRecipeIndex();
    // Get instance field reference: private System.Int32 ingredientIndex
    [[deprecated("Use field access instead!")]] int& dyn_ingredientIndex();
    // Get instance field reference: private System.Single waitTimeToSummonWitches
    [[deprecated("Use field access instead!")]] float& dyn_waitTimeToSummonWitches();
    // Get instance field reference: private MagicCauldronLiquid _liquid
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicCauldronLiquid*& dyn__liquid();
    // Get instance field reference: private MagicCauldron/IngrediantFXContext reusableFXContext
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicCauldron::IngrediantFXContext*& dyn_reusableFXContext();
    // Get instance field reference: private MagicCauldron/IngredientArgs reusableIngrediantArgs
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MagicCauldron::IngredientArgs*& dyn_reusableIngrediantArgs();
    // Get instance field reference: public System.Boolean testLevitationAlwaysOn
    [[deprecated("Use field access instead!")]] bool& dyn_testLevitationAlwaysOn();
    // Get instance field reference: public System.Single levitationRadius
    [[deprecated("Use field access instead!")]] float& dyn_levitationRadius();
    // Get instance field reference: public System.Single levitationSpellDuration
    [[deprecated("Use field access instead!")]] float& dyn_levitationSpellDuration();
    // Get instance field reference: public System.Single levitationStrength
    [[deprecated("Use field access instead!")]] float& dyn_levitationStrength();
    // Get instance field reference: public System.Single levitationDuration
    [[deprecated("Use field access instead!")]] float& dyn_levitationDuration();
    // Get instance field reference: public System.Single levitationBlendOutDuration
    [[deprecated("Use field access instead!")]] float& dyn_levitationBlendOutDuration();
    // Get instance field reference: public System.Single levitationBonusStrength
    [[deprecated("Use field access instead!")]] float& dyn_levitationBonusStrength();
    // Get instance field reference: public System.Single levitationBonusOffAtYSpeed
    [[deprecated("Use field access instead!")]] float& dyn_levitationBonusOffAtYSpeed();
    // Get instance field reference: public System.Single levitationBonusFullAtYSpeed
    [[deprecated("Use field access instead!")]] float& dyn_levitationBonusFullAtYSpeed();
    // private System.Void Awake()
    // Offset: 0x2726C08
    void Awake();
    // private System.Void Start()
    // Offset: 0x2726FCC
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0x27274F4
    void LateUpdate();
    // private System.Collections.IEnumerator LevitationSpellCoroutine()
    // Offset: 0x27275D4
    ::System::Collections::IEnumerator* LevitationSpellCoroutine();
    // private System.Void ChangeState(MagicCauldron/CauldronState state)
    // Offset: 0x2726FD4
    void ChangeState(::GlobalNamespace::MagicCauldron::CauldronState state);
    // private System.Void UpdateState()
    // Offset: 0x27274F8
    void UpdateState();
    // public System.Void OnEventStart()
    // Offset: 0x2727A28
    void OnEventStart();
    // public System.Void OnEventEnd()
    // Offset: 0x2727A30
    void OnEventEnd();
    // public System.Void OnIngredientAdd(System.Int32 _ingredientIndex, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2727A38
    void OnIngredientAdd(int _ingredientIndex, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void OnIngredientAdd(System.Int32 _ingredientIndex)
    // Offset: 0x2727BC4
    void OnIngredientAdd(int _ingredientIndex);
    // private System.Boolean CheckIngredients()
    // Offset: 0x2727864
    bool CheckIngredients();
    // private System.Void UpdateCauldronColor(UnityEngine.Color color)
    // Offset: 0x2727668
    void UpdateCauldronColor(::UnityEngine::Color color);
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x2727F78
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2728318
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x27285C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MagicCauldron* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MagicCauldron::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MagicCauldron*, creationType>()));
    }
    // public override System.Void OnDisable()
    // Offset: 0x272829C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnDisable()
    void OnDisable();
  }; // MagicCauldron
  #pragma pack(pop)
  static check_size<sizeof(MagicCauldron), 312 + sizeof(float)> __GlobalNamespace_MagicCauldronSizeCheck;
  static_assert(sizeof(MagicCauldron) == 0x13C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MagicCauldron::Recipe, "", "MagicCauldron/Recipe");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MagicCauldron::CauldronState, "", "MagicCauldron/CauldronState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::LevitationSpellCoroutine
// Il2CppName: LevitationSpellCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::LevitationSpellCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "LevitationSpellCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::ChangeState
// Il2CppName: ChangeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)(::GlobalNamespace::MagicCauldron::CauldronState)>(&GlobalNamespace::MagicCauldron::ChangeState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("", "MagicCauldron/CauldronState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "ChangeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::UpdateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::OnEventStart
// Il2CppName: OnEventStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::OnEventStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "OnEventStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::OnEventEnd
// Il2CppName: OnEventEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::OnEventEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "OnEventEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::OnIngredientAdd
// Il2CppName: OnIngredientAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)(int, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::MagicCauldron::OnIngredientAdd)> {
  static const MethodInfo* get() {
    static auto* _ingredientIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "OnIngredientAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_ingredientIndex, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::OnIngredientAdd
// Il2CppName: OnIngredientAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)(int)>(&GlobalNamespace::MagicCauldron::OnIngredientAdd)> {
  static const MethodInfo* get() {
    static auto* _ingredientIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "OnIngredientAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_ingredientIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::CheckIngredients
// Il2CppName: CheckIngredients
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::CheckIngredients)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "CheckIngredients", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::UpdateCauldronColor
// Il2CppName: UpdateCauldronColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)(::UnityEngine::Color)>(&GlobalNamespace::MagicCauldron::UpdateCauldronColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "UpdateCauldronColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)(::UnityEngine::Collider*)>(&GlobalNamespace::MagicCauldron::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::MagicCauldron::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MagicCauldron::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MagicCauldron::*)()>(&GlobalNamespace::MagicCauldron::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MagicCauldron*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
