// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject/PositionState
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Component
  class Component;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SubGrabPoint
  class SubGrabPoint;
  // Forward declaring type: TransferrableObjectGripPosition
  class TransferrableObjectGripPosition;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SlotTransformOverride
  class SlotTransformOverride;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SlotTransformOverride);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SlotTransformOverride*, "", "SlotTransformOverride");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: SlotTransformOverride
  // [TokenAttribute] Offset: FFFFFFFF
  class SlotTransformOverride : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Transform overrideTransform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* overrideTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.String overrideTransform_path
    // Size: 0x8
    // Offset: 0x18
    ::StringW overrideTransform_path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public TransferrableObject/PositionState positionState
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::TransferrableObject::PositionState positionState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TransferrableObject::PositionState) == 0x4);
    // public System.Boolean useAdvancedGrab
    // Size: 0x1
    // Offset: 0x24
    bool useAdvancedGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useAdvancedGrab and: overrideTransformMatrix
    char __padding3[0x3] = {};
    // public UnityEngine.Matrix4x4 overrideTransformMatrix
    // Size: 0x40
    // Offset: 0x28
    ::UnityEngine::Matrix4x4 overrideTransformMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Transform advancedGrabPointAnchor
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* advancedGrabPointAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform advancedGrabPointOrigin
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* advancedGrabPointOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Collections.Generic.List`1<SubGrabPoint> multiPoints
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::GlobalNamespace::SubGrabPoint*>* multiPoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::SubGrabPoint*>*) == 0x8);
    // public UnityEngine.Matrix4x4 AdvOriginLocalToParentAnchorLocal
    // Size: 0x40
    // Offset: 0x80
    ::UnityEngine::Matrix4x4 AdvOriginLocalToParentAnchorLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public UnityEngine.Matrix4x4 AdvAnchorLocalToAdvOriginLocal
    // Size: 0x40
    // Offset: 0xC0
    ::UnityEngine::Matrix4x4 AdvAnchorLocalToAdvOriginLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Get instance field reference: public UnityEngine.Transform overrideTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_overrideTransform();
    // Get instance field reference: public System.String overrideTransform_path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_overrideTransform_path();
    // Get instance field reference: public TransferrableObject/PositionState positionState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TransferrableObject::PositionState& dyn_positionState();
    // Get instance field reference: public System.Boolean useAdvancedGrab
    [[deprecated("Use field access instead!")]] bool& dyn_useAdvancedGrab();
    // Get instance field reference: public UnityEngine.Matrix4x4 overrideTransformMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_overrideTransformMatrix();
    // Get instance field reference: public UnityEngine.Transform advancedGrabPointAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_advancedGrabPointAnchor();
    // Get instance field reference: public UnityEngine.Transform advancedGrabPointOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_advancedGrabPointOrigin();
    // Get instance field reference: public System.Collections.Generic.List`1<SubGrabPoint> multiPoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SubGrabPoint*>*& dyn_multiPoints();
    // Get instance field reference: public UnityEngine.Matrix4x4 AdvOriginLocalToParentAnchorLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_AdvOriginLocalToParentAnchorLocal();
    // Get instance field reference: public UnityEngine.Matrix4x4 AdvAnchorLocalToAdvOriginLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_AdvAnchorLocalToAdvOriginLocal();
    // public System.Void Initialize(UnityEngine.Component component, UnityEngine.Transform anchor)
    // Offset: 0x26C3928
    void Initialize(::UnityEngine::Component* component, ::UnityEngine::Transform* anchor);
    // public System.Void AddLineButton()
    // Offset: 0x26C3D94
    void AddLineButton();
    // public System.Void AddSubGrabPoint(TransferrableObjectGripPosition togp)
    // Offset: 0x26C3E64
    void AddSubGrabPoint(::GlobalNamespace::TransferrableObjectGripPosition* togp);
    // public System.Void .ctor()
    // Offset: 0x26C3F68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SlotTransformOverride* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlotTransformOverride::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SlotTransformOverride*, creationType>()));
    }
  }; // SlotTransformOverride
  #pragma pack(pop)
  static check_size<sizeof(SlotTransformOverride), 192 + sizeof(::UnityEngine::Matrix4x4)> __GlobalNamespace_SlotTransformOverrideSizeCheck;
  static_assert(sizeof(SlotTransformOverride) == 0x100);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SlotTransformOverride::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlotTransformOverride::*)(::UnityEngine::Component*, ::UnityEngine::Transform*)>(&GlobalNamespace::SlotTransformOverride::Initialize)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* anchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlotTransformOverride*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlotTransformOverride::AddLineButton
// Il2CppName: AddLineButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlotTransformOverride::*)()>(&GlobalNamespace::SlotTransformOverride::AddLineButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlotTransformOverride*), "AddLineButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlotTransformOverride::AddSubGrabPoint
// Il2CppName: AddSubGrabPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlotTransformOverride::*)(::GlobalNamespace::TransferrableObjectGripPosition*)>(&GlobalNamespace::SlotTransformOverride::AddSubGrabPoint)> {
  static const MethodInfo* get() {
    static auto* togp = &::il2cpp_utils::GetClassFromName("", "TransferrableObjectGripPosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlotTransformOverride*), "AddSubGrabPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{togp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlotTransformOverride::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
