// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: IOVRAnchorComponent`1
#include "GlobalNamespace/IOVRAnchorComponent_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OVRAnchor because it is already included!
  // Skipping declaration: OVRTask`1 because it is already included!
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Forward declaring namespace: Unity::Jobs
namespace Unity::Jobs {
  // Forward declaring type: JobHandle
  struct JobHandle;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRTriangleMesh
  struct OVRTriangleMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTriangleMesh, "", "OVRTriangleMesh");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRTriangleMesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct OVRTriangleMesh/*, public ::System::ValueType, public ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRTriangleMesh>, public ::System::IEquatable_1<::GlobalNamespace::OVRTriangleMesh>*/ {
    public:
    // Nested type: ::GlobalNamespace::OVRTriangleMesh::GetMeshJob
    struct GetMeshJob;
    // Nested type: ::GlobalNamespace::OVRTriangleMesh::Triangle
    struct Triangle;
    // Nested type: ::GlobalNamespace::OVRTriangleMesh::FlipTriangleWindingJob
    struct FlipTriangleWindingJob;
    // Nested type: ::GlobalNamespace::OVRTriangleMesh::NegateXJob
    struct NegateXJob;
    public:
    // private readonly System.UInt64 <Handle>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    uint64_t Handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: OVRTriangleMesh
    constexpr OVRTriangleMesh(uint64_t Handle_ = {}) noexcept : Handle{Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRTriangleMesh>
    operator ::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRTriangleMesh>() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IOVRAnchorComponent_1<::GlobalNamespace::OVRTriangleMesh>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::OVRTriangleMesh>
    operator ::System::IEquatable_1<::GlobalNamespace::OVRTriangleMesh>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::OVRTriangleMesh>*>(this);
    }
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return Handle;
    }
    // Get static field: static public readonly OVRTriangleMesh Null
    static ::GlobalNamespace::OVRTriangleMesh _get_Null();
    // Set static field: static public readonly OVRTriangleMesh Null
    static void _set_Null(::GlobalNamespace::OVRTriangleMesh value);
    // Get instance field reference: private readonly System.UInt64 <Handle>k__BackingField
    [[deprecated("Use field access instead!")]] uint64_t& dyn_$Handle$k__BackingField();
    // private OVRPlugin/SpaceComponentType IOVRAnchorComponent<OVRTriangleMesh>.get_Type()
    // Offset: 0x48B1CCC
    ::GlobalNamespace::OVRPlugin::SpaceComponentType IOVRAnchorComponent$OVRTriangleMesh$_get_Type();
    // private System.UInt64 IOVRAnchorComponent<OVRTriangleMesh>.get_Handle()
    // Offset: 0x48B1CE4
    uint64_t IOVRAnchorComponent$OVRTriangleMesh$_get_Handle();
    // private OVRTriangleMesh IOVRAnchorComponent<OVRTriangleMesh>.FromAnchor(OVRAnchor anchor)
    // Offset: 0x48B1CEC
    ::GlobalNamespace::OVRTriangleMesh IOVRAnchorComponent$OVRTriangleMesh$_FromAnchor(::GlobalNamespace::OVRAnchor anchor);
    // public System.Boolean get_IsNull()
    // Offset: 0x48B1D00
    bool get_IsNull();
    // public System.Boolean get_IsEnabled()
    // Offset: 0x48B1D10
    bool get_IsEnabled();
    // private OVRTask`1<System.Boolean> IOVRAnchorComponent<OVRTriangleMesh>.SetEnabledAsync(System.Boolean enabled, System.Double timeout)
    // Offset: 0x48B1DBC
    ::GlobalNamespace::OVRTask_1<bool> IOVRAnchorComponent$OVRTriangleMesh$_SetEnabledAsync(bool enabled, double timeout);
    // public System.Boolean Equals(OVRTriangleMesh other)
    // Offset: 0x48B1E08
    bool Equals(::GlobalNamespace::OVRTriangleMesh other);
    // OVRPlugin/SpaceComponentType get_Type()
    // Offset: 0x48B1CD8
    ::GlobalNamespace::OVRPlugin::SpaceComponentType get_Type();
    // System.UInt64 get_Handle()
    // Offset: 0x48B1F80
    uint64_t get_Handle();
    // private System.Void .ctor(OVRAnchor anchor)
    // Offset: 0x48B1CF4
    OVRTriangleMesh(::GlobalNamespace::OVRAnchor anchor);
    // public System.Boolean TryGetCounts(out System.Int32 vertexCount, out System.Int32 triangleCount)
    // Offset: 0x48B1F88
    bool TryGetCounts(ByRef<int> vertexCount, ByRef<int> triangleCount);
    // public System.Boolean TryGetMeshRawUntransformed(Unity.Collections.NativeArray`1<UnityEngine.Vector3> positions, Unity.Collections.NativeArray`1<System.Int32> indices)
    // Offset: 0x48B1FFC
    bool TryGetMeshRawUntransformed(::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> positions, ::Unity::Collections::NativeArray_1<int> indices);
    // public System.Boolean TryGetMesh(Unity.Collections.NativeArray`1<UnityEngine.Vector3> positions, Unity.Collections.NativeArray`1<System.Int32> indices)
    // Offset: 0x48B2088
    bool TryGetMesh(::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> positions, ::Unity::Collections::NativeArray_1<int> indices);
    // public Unity.Jobs.JobHandle ScheduleGetMeshJob(Unity.Collections.NativeArray`1<UnityEngine.Vector3> positions, Unity.Collections.NativeArray`1<System.Int32> indices, Unity.Jobs.JobHandle dependencies)
    // Offset: 0x48B2174
    ::Unity::Jobs::JobHandle ScheduleGetMeshJob(::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> positions, ::Unity::Collections::NativeArray_1<int> indices, ::Unity::Jobs::JobHandle dependencies);
    // static private System.Void .cctor()
    // Offset: 0x48B22D4
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x48B1E30
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x48B1EA8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x48B1EFC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // OVRTriangleMesh
  #pragma pack(pop)
  static check_size<sizeof(OVRTriangleMesh), 0 + sizeof(uint64_t)> __GlobalNamespace_OVRTriangleMeshSizeCheck;
  static_assert(sizeof(OVRTriangleMesh) == 0x8);
  // static public System.Boolean op_Equality(OVRTriangleMesh lhs, OVRTriangleMesh rhs)
  // Offset: 0x48B1E18
  bool operator ==(const ::GlobalNamespace::OVRTriangleMesh& lhs, const ::GlobalNamespace::OVRTriangleMesh& rhs);
  // static public System.Boolean op_Inequality(OVRTriangleMesh lhs, OVRTriangleMesh rhs)
  // Offset: 0x48B1E24
  bool operator !=(const ::GlobalNamespace::OVRTriangleMesh& lhs, const ::GlobalNamespace::OVRTriangleMesh& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::IOVRAnchorComponent$OVRTriangleMesh$_get_Type
// Il2CppName: IOVRAnchorComponent<OVRTriangleMesh>.get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRTriangleMesh::*)()>(&GlobalNamespace::OVRTriangleMesh::IOVRAnchorComponent$OVRTriangleMesh$_get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "IOVRAnchorComponent<OVRTriangleMesh>.get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::IOVRAnchorComponent$OVRTriangleMesh$_get_Handle
// Il2CppName: IOVRAnchorComponent<OVRTriangleMesh>.get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRTriangleMesh::*)()>(&GlobalNamespace::OVRTriangleMesh::IOVRAnchorComponent$OVRTriangleMesh$_get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "IOVRAnchorComponent<OVRTriangleMesh>.get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::IOVRAnchorComponent$OVRTriangleMesh$_FromAnchor
// Il2CppName: IOVRAnchorComponent<OVRTriangleMesh>.FromAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTriangleMesh (GlobalNamespace::OVRTriangleMesh::*)(::GlobalNamespace::OVRAnchor)>(&GlobalNamespace::OVRTriangleMesh::IOVRAnchorComponent$OVRTriangleMesh$_FromAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("", "OVRAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "IOVRAnchorComponent<OVRTriangleMesh>.FromAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTriangleMesh::*)()>(&GlobalNamespace::OVRTriangleMesh::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTriangleMesh::*)()>(&GlobalNamespace::OVRTriangleMesh::get_IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::IOVRAnchorComponent$OVRTriangleMesh$_SetEnabledAsync
// Il2CppName: IOVRAnchorComponent<OVRTriangleMesh>.SetEnabledAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTask_1<bool> (GlobalNamespace::OVRTriangleMesh::*)(bool, double)>(&GlobalNamespace::OVRTriangleMesh::IOVRAnchorComponent$OVRTriangleMesh$_SetEnabledAsync)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "IOVRAnchorComponent<OVRTriangleMesh>.SetEnabledAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled, timeout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTriangleMesh::*)(::GlobalNamespace::OVRTriangleMesh)>(&GlobalNamespace::OVRTriangleMesh::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "OVRTriangleMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SpaceComponentType (GlobalNamespace::OVRTriangleMesh::*)()>(&GlobalNamespace::OVRTriangleMesh::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GlobalNamespace::OVRTriangleMesh::*)()>(&GlobalNamespace::OVRTriangleMesh::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::OVRTriangleMesh
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::TryGetCounts
// Il2CppName: TryGetCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTriangleMesh::*)(ByRef<int>, ByRef<int>)>(&GlobalNamespace::OVRTriangleMesh::TryGetCounts)> {
  static const MethodInfo* get() {
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* triangleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "TryGetCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexCount, triangleCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::TryGetMeshRawUntransformed
// Il2CppName: TryGetMeshRawUntransformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTriangleMesh::*)(::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>, ::Unity::Collections::NativeArray_1<int>)>(&GlobalNamespace::OVRTriangleMesh::TryGetMeshRawUntransformed)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "TryGetMeshRawUntransformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, indices});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::TryGetMesh
// Il2CppName: TryGetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTriangleMesh::*)(::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>, ::Unity::Collections::NativeArray_1<int>)>(&GlobalNamespace::OVRTriangleMesh::TryGetMesh)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "TryGetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, indices});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::ScheduleGetMeshJob
// Il2CppName: ScheduleGetMeshJob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Jobs::JobHandle (GlobalNamespace::OVRTriangleMesh::*)(::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>, ::Unity::Collections::NativeArray_1<int>, ::Unity::Jobs::JobHandle)>(&GlobalNamespace::OVRTriangleMesh::ScheduleGetMeshJob)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* indices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* dependencies = &::il2cpp_utils::GetClassFromName("Unity.Jobs", "JobHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "ScheduleGetMeshJob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, indices, dependencies});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRTriangleMesh::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRTriangleMesh::*)(::Il2CppObject*)>(&GlobalNamespace::OVRTriangleMesh::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRTriangleMesh::*)()>(&GlobalNamespace::OVRTriangleMesh::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OVRTriangleMesh::*)()>(&GlobalNamespace::OVRTriangleMesh::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
