// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRBinaryChunk
#include "GlobalNamespace/OVRBinaryChunk.hpp"
// Including type: OVRGLTFInputNode
#include "GlobalNamespace/OVRGLTFInputNode.hpp"
// Including type: OVRTextureQualityFiltering
#include "GlobalNamespace/OVRTextureQualityFiltering.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRGLTFAnimatinonNode
  class OVRGLTFAnimatinonNode;
  // Forward declaring type: OVRGLTFAnimationNodeMorphTargetHandler
  class OVRGLTFAnimationNodeMorphTargetHandler;
  // Forward declaring type: OVRGLTFScene
  struct OVRGLTFScene;
  // Forward declaring type: OVRChunkType
  struct OVRChunkType;
  // Forward declaring type: OVRMeshData
  struct OVRMeshData;
  // Forward declaring type: OVRMeshAttributes
  struct OVRMeshAttributes;
  // Forward declaring type: OVRMaterialData
  struct OVRMaterialData;
  // Forward declaring type: OVRTextureData
  struct OVRTextureData;
}
// Forward declaring namespace: OVRSimpleJSON
namespace OVRSimpleJSON {
  // Forward declaring type: JSONNode
  class JSONNode;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRGLTFLoader
  class OVRGLTFLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRGLTFLoader);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRGLTFLoader*, "", "OVRGLTFLoader");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: OVRGLTFLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRGLTFLoader : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::OVRGLTFLoader::$$c__DisplayClass30_0
    class $$c__DisplayClass30_0;
    public:
    // private OVRSimpleJSON.JSONNode m_jsonData
    // Size: 0x8
    // Offset: 0x10
    ::OVRSimpleJSON::JSONNode* m_jsonData;
    // Field size check
    static_assert(sizeof(::OVRSimpleJSON::JSONNode*) == 0x8);
    // private System.IO.Stream m_glbStream
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Stream* m_glbStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private OVRBinaryChunk m_binaryChunk
    // Size: 0x18
    // Offset: 0x20
    ::GlobalNamespace::OVRBinaryChunk m_binaryChunk;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRBinaryChunk) == 0x18);
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> m_Nodes
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* m_Nodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<OVRGLTFInputNode,OVRGLTFAnimatinonNode> m_InputAnimationNodes
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, ::GlobalNamespace::OVRGLTFAnimatinonNode*>* m_InputAnimationNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, ::GlobalNamespace::OVRGLTFAnimatinonNode*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,OVRGLTFAnimatinonNode[]> m_AnimationLookup
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<int, ::ArrayW<::GlobalNamespace::OVRGLTFAnimatinonNode*>>* m_AnimationLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::ArrayW<::GlobalNamespace::OVRGLTFAnimatinonNode*>>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,OVRGLTFAnimationNodeMorphTargetHandler> m_morphTargetHandlers
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::OVRGLTFAnimationNodeMorphTargetHandler*>* m_morphTargetHandlers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::OVRGLTFAnimationNodeMorphTargetHandler*>*) == 0x8);
    // private UnityEngine.Shader m_Shader
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Shader* m_Shader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader m_AlphaBlendShader
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Shader* m_AlphaBlendShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private OVRTextureQualityFiltering m_TextureQuality
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::OVRTextureQualityFiltering m_TextureQuality;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRTextureQualityFiltering) == 0x4);
    // private System.Single m_TextureMipmapBias
    // Size: 0x4
    // Offset: 0x6C
    float m_TextureMipmapBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Func`3<System.String,UnityEngine.Material,UnityEngine.Texture2D> textureUriHandler
    // Size: 0x8
    // Offset: 0x70
    ::System::Func_3<::StringW, ::UnityEngine::Material*, ::UnityEngine::Texture2D*>* textureUriHandler;
    // Field size check
    static_assert(sizeof(::System::Func_3<::StringW, ::UnityEngine::Material*, ::UnityEngine::Texture2D*>*) == 0x8);
    public:
    // Get static field: static public readonly UnityEngine.Vector3 GLTFToUnitySpace
    static ::UnityEngine::Vector3 _get_GLTFToUnitySpace();
    // Set static field: static public readonly UnityEngine.Vector3 GLTFToUnitySpace
    static void _set_GLTFToUnitySpace(::UnityEngine::Vector3 value);
    // Get static field: static public readonly UnityEngine.Vector3 GLTFToUnityTangent
    static ::UnityEngine::Vector3 _get_GLTFToUnityTangent();
    // Set static field: static public readonly UnityEngine.Vector3 GLTFToUnityTangent
    static void _set_GLTFToUnityTangent(::UnityEngine::Vector3 value);
    // Get static field: static public readonly UnityEngine.Vector4 GLTFToUnitySpace_Rotation
    static ::UnityEngine::Vector4 _get_GLTFToUnitySpace_Rotation();
    // Set static field: static public readonly UnityEngine.Vector4 GLTFToUnitySpace_Rotation
    static void _set_GLTFToUnitySpace_Rotation(::UnityEngine::Vector4 value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,OVRGLTFInputNode> InputNodeNameMap
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::OVRGLTFInputNode>* _get_InputNodeNameMap();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,OVRGLTFInputNode> InputNodeNameMap
    static void _set_InputNodeNameMap(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::OVRGLTFInputNode>* value);
    // Get instance field reference: private OVRSimpleJSON.JSONNode m_jsonData
    [[deprecated("Use field access instead!")]] ::OVRSimpleJSON::JSONNode*& dyn_m_jsonData();
    // Get instance field reference: private System.IO.Stream m_glbStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_m_glbStream();
    // Get instance field reference: private OVRBinaryChunk m_binaryChunk
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRBinaryChunk& dyn_m_binaryChunk();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> m_Nodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_m_Nodes();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<OVRGLTFInputNode,OVRGLTFAnimatinonNode> m_InputAnimationNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::OVRGLTFInputNode, ::GlobalNamespace::OVRGLTFAnimatinonNode*>*& dyn_m_InputAnimationNodes();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,OVRGLTFAnimatinonNode[]> m_AnimationLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::ArrayW<::GlobalNamespace::OVRGLTFAnimatinonNode*>>*& dyn_m_AnimationLookup();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,OVRGLTFAnimationNodeMorphTargetHandler> m_morphTargetHandlers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::OVRGLTFAnimationNodeMorphTargetHandler*>*& dyn_m_morphTargetHandlers();
    // Get instance field reference: private UnityEngine.Shader m_Shader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_Shader();
    // Get instance field reference: private UnityEngine.Shader m_AlphaBlendShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_m_AlphaBlendShader();
    // Get instance field reference: private OVRTextureQualityFiltering m_TextureQuality
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRTextureQualityFiltering& dyn_m_TextureQuality();
    // Get instance field reference: private System.Single m_TextureMipmapBias
    [[deprecated("Use field access instead!")]] float& dyn_m_TextureMipmapBias();
    // Get instance field reference: public System.Func`3<System.String,UnityEngine.Material,UnityEngine.Texture2D> textureUriHandler
    [[deprecated("Use field access instead!")]] ::System::Func_3<::StringW, ::UnityEngine::Material*, ::UnityEngine::Texture2D*>*& dyn_textureUriHandler();
    // public System.Void .ctor(System.String fileName)
    // Offset: 0x48BF024
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRGLTFLoader* New_ctor(::StringW fileName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGLTFLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRGLTFLoader*, creationType>(fileName)));
    }
    // public System.Void .ctor(System.Byte[] data)
    // Offset: 0x48BF064
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRGLTFLoader* New_ctor(::ArrayW<uint8_t> data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVRGLTFLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRGLTFLoader*, creationType>(data)));
    }
    // public OVRGLTFScene LoadGLB(System.Boolean supportAnimation, System.Boolean loadMips)
    // Offset: 0x48BF0F0
    ::GlobalNamespace::OVRGLTFScene LoadGLB(bool supportAnimation, bool loadMips);
    // public System.Void SetModelShader(UnityEngine.Shader shader)
    // Offset: 0x48BFF84
    void SetModelShader(::UnityEngine::Shader* shader);
    // public System.Void SetModelAlphaBlendShader(UnityEngine.Shader shader)
    // Offset: 0x48BFF8C
    void SetModelAlphaBlendShader(::UnityEngine::Shader* shader);
    // public System.Void SetTextureQualityFiltering(OVRTextureQualityFiltering loadedTexturesQuality)
    // Offset: 0x48BFF94
    void SetTextureQualityFiltering(::GlobalNamespace::OVRTextureQualityFiltering loadedTexturesQuality);
    // public System.Void SetMipMapBias(System.Single loadedTexturesMipmapBiasing)
    // Offset: 0x48BFF9C
    void SetMipMapBias(float loadedTexturesMipmapBiasing);
    // static public OVRTextureQualityFiltering DetectTextureQuality(in UnityEngine.Texture2D srcTexture)
    // Offset: 0x48BFFB8
    static ::GlobalNamespace::OVRTextureQualityFiltering DetectTextureQuality(ByRef<::UnityEngine::Texture2D*> srcTexture);
    // static public System.Void ApplyTextureQuality(OVRTextureQualityFiltering qualityLevel, ref UnityEngine.Texture2D destTexture)
    // Offset: 0x48C0078
    static void ApplyTextureQuality(::GlobalNamespace::OVRTextureQualityFiltering qualityLevel, ByRef<::UnityEngine::Texture2D*> destTexture);
    // private System.Boolean ValidateGLB(System.IO.Stream glbStream)
    // Offset: 0x48BF7E8
    bool ValidateGLB(::System::IO::Stream* glbStream);
    // private System.Byte[] ReadChunk(System.IO.Stream glbStream, OVRChunkType type)
    // Offset: 0x48BF9B4
    ::ArrayW<uint8_t> ReadChunk(::System::IO::Stream* glbStream, ::GlobalNamespace::OVRChunkType type);
    // private System.Boolean ValidateChunk(System.IO.Stream glbStream, OVRChunkType type, out System.UInt32 chunkLength)
    // Offset: 0x48BFA60
    bool ValidateChunk(::System::IO::Stream* glbStream, ::GlobalNamespace::OVRChunkType type, ByRef<uint> chunkLength);
    // private System.Int32 LoadGLTF(System.Boolean supportAnimation, System.Boolean loadMips)
    // Offset: 0x48BFB84
    int LoadGLTF(bool supportAnimation, bool loadMips);
    // private System.Void ProcessNode(OVRSimpleJSON.JSONNode node, System.Int32 nodeId, System.Boolean loadMips)
    // Offset: 0x48C01EC
    void ProcessNode(::OVRSimpleJSON::JSONNode* node, int nodeId, bool loadMips);
    // private OVRMeshData ProcessMesh(OVRSimpleJSON.JSONNode meshNode, System.Boolean loadMips)
    // Offset: 0x48C1058
    ::GlobalNamespace::OVRMeshData ProcessMesh(::OVRSimpleJSON::JSONNode* meshNode, bool loadMips);
    // static private System.Void FlipTraingleIndices(ref System.Int32[] indices)
    // Offset: 0x48C26BC
    static void FlipTraingleIndices(ByRef<::ArrayW<int>> indices);
    // private OVRMeshAttributes ReadMeshAttributes(OVRSimpleJSON.JSONNode jsonAttributes, System.Int32 totalVertexCount, System.Int32 vertexOffset)
    // Offset: 0x48C2728
    ::GlobalNamespace::OVRMeshAttributes ReadMeshAttributes(::OVRSimpleJSON::JSONNode* jsonAttributes, int totalVertexCount, int vertexOffset);
    // private System.Void ProcessSkin(OVRSimpleJSON.JSONNode skinNode, UnityEngine.SkinnedMeshRenderer renderer)
    // Offset: 0x48C19F8
    void ProcessSkin(::OVRSimpleJSON::JSONNode* skinNode, ::UnityEngine::SkinnedMeshRenderer* renderer);
    // private OVRMaterialData ProcessMaterial(System.Int32 matId)
    // Offset: 0x48C1E30
    ::GlobalNamespace::OVRMaterialData ProcessMaterial(int matId);
    // private OVRTextureData ProcessTexture(System.Int32 textureId)
    // Offset: 0x48C2188
    ::GlobalNamespace::OVRTextureData ProcessTexture(int textureId);
    // private System.Void TranscodeTexture(ref OVRTextureData textureData)
    // Offset: 0x48C35C8
    void TranscodeTexture(ByRef<::GlobalNamespace::OVRTextureData> textureData);
    // private UnityEngine.Material CreateUnityMaterial(OVRMaterialData matData, System.Boolean loadMips)
    // Offset: 0x48C3354
    ::UnityEngine::Material* CreateUnityMaterial(::GlobalNamespace::OVRMaterialData matData, bool loadMips);
    // private OVRGLTFInputNode GetInputNodeType(System.String name)
    // Offset: 0x48C367C
    ::GlobalNamespace::OVRGLTFInputNode GetInputNodeType(::StringW name);
    // private System.Void ProcessAnimations()
    // Offset: 0x48C0B40
    void ProcessAnimations();
    // static private System.Void .cctor()
    // Offset: 0x48C3818
    static void _cctor();
  }; // OVRGLTFLoader
  #pragma pack(pop)
  static check_size<sizeof(OVRGLTFLoader), 112 + sizeof(::System::Func_3<::StringW, ::UnityEngine::Material*, ::UnityEngine::Texture2D*>*)> __GlobalNamespace_OVRGLTFLoaderSizeCheck;
  static_assert(sizeof(OVRGLTFLoader) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::LoadGLB
// Il2CppName: LoadGLB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRGLTFScene (GlobalNamespace::OVRGLTFLoader::*)(bool, bool)>(&GlobalNamespace::OVRGLTFLoader::LoadGLB)> {
  static const MethodInfo* get() {
    static auto* supportAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* loadMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "LoadGLB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{supportAnimation, loadMips});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::SetModelShader
// Il2CppName: SetModelShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(::UnityEngine::Shader*)>(&GlobalNamespace::OVRGLTFLoader::SetModelShader)> {
  static const MethodInfo* get() {
    static auto* shader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "SetModelShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shader});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::SetModelAlphaBlendShader
// Il2CppName: SetModelAlphaBlendShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(::UnityEngine::Shader*)>(&GlobalNamespace::OVRGLTFLoader::SetModelAlphaBlendShader)> {
  static const MethodInfo* get() {
    static auto* shader = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "SetModelAlphaBlendShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shader});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::SetTextureQualityFiltering
// Il2CppName: SetTextureQualityFiltering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(::GlobalNamespace::OVRTextureQualityFiltering)>(&GlobalNamespace::OVRGLTFLoader::SetTextureQualityFiltering)> {
  static const MethodInfo* get() {
    static auto* loadedTexturesQuality = &::il2cpp_utils::GetClassFromName("", "OVRTextureQualityFiltering")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "SetTextureQualityFiltering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loadedTexturesQuality});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::SetMipMapBias
// Il2CppName: SetMipMapBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(float)>(&GlobalNamespace::OVRGLTFLoader::SetMipMapBias)> {
  static const MethodInfo* get() {
    static auto* loadedTexturesMipmapBiasing = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "SetMipMapBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loadedTexturesMipmapBiasing});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::DetectTextureQuality
// Il2CppName: DetectTextureQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTextureQualityFiltering (*)(ByRef<::UnityEngine::Texture2D*>)>(&GlobalNamespace::OVRGLTFLoader::DetectTextureQuality)> {
  static const MethodInfo* get() {
    static auto* srcTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "DetectTextureQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcTexture});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ApplyTextureQuality
// Il2CppName: ApplyTextureQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRTextureQualityFiltering, ByRef<::UnityEngine::Texture2D*>)>(&GlobalNamespace::OVRGLTFLoader::ApplyTextureQuality)> {
  static const MethodInfo* get() {
    static auto* qualityLevel = &::il2cpp_utils::GetClassFromName("", "OVRTextureQualityFiltering")->byval_arg;
    static auto* destTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ApplyTextureQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualityLevel, destTexture});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ValidateGLB
// Il2CppName: ValidateGLB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRGLTFLoader::*)(::System::IO::Stream*)>(&GlobalNamespace::OVRGLTFLoader::ValidateGLB)> {
  static const MethodInfo* get() {
    static auto* glbStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ValidateGLB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glbStream});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ReadChunk
// Il2CppName: ReadChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (GlobalNamespace::OVRGLTFLoader::*)(::System::IO::Stream*, ::GlobalNamespace::OVRChunkType)>(&GlobalNamespace::OVRGLTFLoader::ReadChunk)> {
  static const MethodInfo* get() {
    static auto* glbStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("", "OVRChunkType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ReadChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glbStream, type});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ValidateChunk
// Il2CppName: ValidateChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRGLTFLoader::*)(::System::IO::Stream*, ::GlobalNamespace::OVRChunkType, ByRef<uint>)>(&GlobalNamespace::OVRGLTFLoader::ValidateChunk)> {
  static const MethodInfo* get() {
    static auto* glbStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("", "OVRChunkType")->byval_arg;
    static auto* chunkLength = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ValidateChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glbStream, type, chunkLength});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::LoadGLTF
// Il2CppName: LoadGLTF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRGLTFLoader::*)(bool, bool)>(&GlobalNamespace::OVRGLTFLoader::LoadGLTF)> {
  static const MethodInfo* get() {
    static auto* supportAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* loadMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "LoadGLTF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{supportAnimation, loadMips});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessNode
// Il2CppName: ProcessNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(::OVRSimpleJSON::JSONNode*, int, bool)>(&GlobalNamespace::OVRGLTFLoader::ProcessNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* loadMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, nodeId, loadMips});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessMesh
// Il2CppName: ProcessMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRMeshData (GlobalNamespace::OVRGLTFLoader::*)(::OVRSimpleJSON::JSONNode*, bool)>(&GlobalNamespace::OVRGLTFLoader::ProcessMesh)> {
  static const MethodInfo* get() {
    static auto* meshNode = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    static auto* loadMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshNode, loadMips});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::FlipTraingleIndices
// Il2CppName: FlipTraingleIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<int>>)>(&GlobalNamespace::OVRGLTFLoader::FlipTraingleIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "FlipTraingleIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ReadMeshAttributes
// Il2CppName: ReadMeshAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRMeshAttributes (GlobalNamespace::OVRGLTFLoader::*)(::OVRSimpleJSON::JSONNode*, int, int)>(&GlobalNamespace::OVRGLTFLoader::ReadMeshAttributes)> {
  static const MethodInfo* get() {
    static auto* jsonAttributes = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    static auto* totalVertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertexOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ReadMeshAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonAttributes, totalVertexCount, vertexOffset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessSkin
// Il2CppName: ProcessSkin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(::OVRSimpleJSON::JSONNode*, ::UnityEngine::SkinnedMeshRenderer*)>(&GlobalNamespace::OVRGLTFLoader::ProcessSkin)> {
  static const MethodInfo* get() {
    static auto* skinNode = &::il2cpp_utils::GetClassFromName("OVRSimpleJSON", "JSONNode")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessSkin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skinNode, renderer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessMaterial
// Il2CppName: ProcessMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRMaterialData (GlobalNamespace::OVRGLTFLoader::*)(int)>(&GlobalNamespace::OVRGLTFLoader::ProcessMaterial)> {
  static const MethodInfo* get() {
    static auto* matId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessTexture
// Il2CppName: ProcessTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRTextureData (GlobalNamespace::OVRGLTFLoader::*)(int)>(&GlobalNamespace::OVRGLTFLoader::ProcessTexture)> {
  static const MethodInfo* get() {
    static auto* textureId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textureId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::TranscodeTexture
// Il2CppName: TranscodeTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)(ByRef<::GlobalNamespace::OVRTextureData>)>(&GlobalNamespace::OVRGLTFLoader::TranscodeTexture)> {
  static const MethodInfo* get() {
    static auto* textureData = &::il2cpp_utils::GetClassFromName("", "OVRTextureData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "TranscodeTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textureData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::CreateUnityMaterial
// Il2CppName: CreateUnityMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::OVRGLTFLoader::*)(::GlobalNamespace::OVRMaterialData, bool)>(&GlobalNamespace::OVRGLTFLoader::CreateUnityMaterial)> {
  static const MethodInfo* get() {
    static auto* matData = &::il2cpp_utils::GetClassFromName("", "OVRMaterialData")->byval_arg;
    static auto* loadMips = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "CreateUnityMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matData, loadMips});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::GetInputNodeType
// Il2CppName: GetInputNodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRGLTFInputNode (GlobalNamespace::OVRGLTFLoader::*)(::StringW)>(&GlobalNamespace::OVRGLTFLoader::GetInputNodeType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "GetInputNodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::ProcessAnimations
// Il2CppName: ProcessAnimations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRGLTFLoader::*)()>(&GlobalNamespace::OVRGLTFLoader::ProcessAnimations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), "ProcessAnimations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRGLTFLoader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRGLTFLoader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRGLTFLoader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
