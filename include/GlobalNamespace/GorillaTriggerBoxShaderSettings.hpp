// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTriggerBox
#include "GlobalNamespace/GorillaTriggerBox.hpp"
// Including type: XSceneRef
#include "GlobalNamespace/XSceneRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::Rendering
namespace GorillaTag::Rendering {
  // Forward declaring type: ZoneShaderSettings
  class ZoneShaderSettings;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaTriggerBoxShaderSettings
  class GorillaTriggerBoxShaderSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaTriggerBoxShaderSettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaTriggerBoxShaderSettings*, "", "GorillaTriggerBoxShaderSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTriggerBoxShaderSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaTriggerBoxShaderSettings : public ::GlobalNamespace::GorillaTriggerBox {
    public:
    public:
    // private XSceneRef settingsRef
    // Size: 0x11
    // Offset: 0x28
    ::GlobalNamespace::XSceneRef settingsRef;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::XSceneRef) == 0x11);
    // Padding between fields: settingsRef and: settings
    char __padding0[0x7] = {};
    // private GorillaTag.Rendering.ZoneShaderSettings settings
    // Size: 0x8
    // Offset: 0x40
    ::GorillaTag::Rendering::ZoneShaderSettings* settings;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings*) == 0x8);
    public:
    // Get instance field reference: private XSceneRef settingsRef
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::XSceneRef& dyn_settingsRef();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings settings
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings*& dyn_settings();
    // private System.Void Awake()
    // Offset: 0x26DEED0
    void Awake();
    // public override System.Void OnBoxTriggered()
    // Offset: 0x26DEF1C
    // Implemented from: GorillaTriggerBox
    // Base method: System.Void GorillaTriggerBox::OnBoxTriggered()
    void OnBoxTriggered();
    // public System.Void .ctor()
    // Offset: 0x26DEFC8
    // Implemented from: GorillaTriggerBox
    // Base method: System.Void GorillaTriggerBox::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaTriggerBoxShaderSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaTriggerBoxShaderSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaTriggerBoxShaderSettings*, creationType>()));
    }
  }; // GorillaTriggerBoxShaderSettings
  #pragma pack(pop)
  static check_size<sizeof(GorillaTriggerBoxShaderSettings), 64 + sizeof(::GorillaTag::Rendering::ZoneShaderSettings*)> __GlobalNamespace_GorillaTriggerBoxShaderSettingsSizeCheck;
  static_assert(sizeof(GorillaTriggerBoxShaderSettings) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaTriggerBoxShaderSettings::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTriggerBoxShaderSettings::*)()>(&GlobalNamespace::GorillaTriggerBoxShaderSettings::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTriggerBoxShaderSettings*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTriggerBoxShaderSettings::OnBoxTriggered
// Il2CppName: OnBoxTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTriggerBoxShaderSettings::*)()>(&GlobalNamespace::GorillaTriggerBoxShaderSettings::OnBoxTriggered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTriggerBoxShaderSettings*), "OnBoxTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTriggerBoxShaderSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
