// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GTSystem`1
#include "GlobalNamespace/GTSystem_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Tappable
  class Tappable;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TappableSystem
  class TappableSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TappableSystem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TappableSystem*, "", "TappableSystem");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: TappableSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class TappableSystem : public ::GlobalNamespace::GTSystem_1<::GlobalNamespace::Tappable*> {
    public:
    // public System.Void SendOnTapRPC(System.Int32 key, System.Single tapStrength, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x272E45C
    void SendOnTapRPC(int key, float tapStrength, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x272E5CC
    // Implemented from: GTSystem`1
    // Base method: System.Void GTSystem_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TappableSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TappableSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TappableSystem*, creationType>()));
    }
  }; // TappableSystem
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TappableSystem::SendOnTapRPC
// Il2CppName: SendOnTapRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TappableSystem::*)(int, float, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::TappableSystem::SendOnTapRPC)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tapStrength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TappableSystem*), "SendOnTapRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, tapStrength, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TappableSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
