// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: InteractionPoint
#include "GlobalNamespace/InteractionPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HoldableObject
  class HoldableObject;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CapsuleCollider
  class CapsuleCollider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HoldableHandle
  class HoldableHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HoldableHandle);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HoldableHandle*, "", "HoldableHandle");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: HoldableHandle
  // [TokenAttribute] Offset: FFFFFFFF
  class HoldableHandle : public ::GlobalNamespace::InteractionPoint {
    public:
    // Writing base type padding for base size: 0x44 to desired offset: 0x48
    char ___base_padding[0x4] = {};
    public:
    // private HoldableObject holdable
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::HoldableObject* holdable;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HoldableObject*) == 0x8);
    // private UnityEngine.CapsuleCollider handleCapsuleTrigger
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::CapsuleCollider* handleCapsuleTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::CapsuleCollider*) == 0x8);
    public:
    // Get instance field reference: private HoldableObject holdable
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HoldableObject*& dyn_holdable();
    // Get instance field reference: private UnityEngine.CapsuleCollider handleCapsuleTrigger
    [[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& dyn_handleCapsuleTrigger();
    // public UnityEngine.CapsuleCollider get_Capsule()
    // Offset: 0x26B478C
    ::UnityEngine::CapsuleCollider* get_Capsule();
    // public HoldableObject get_Holdable()
    // Offset: 0x26B4784
    // Implemented from: InteractionPoint
    // Base method: HoldableObject InteractionPoint::get_Holdable()
    ::GlobalNamespace::HoldableObject* get_Holdable();
    // public System.Void .ctor()
    // Offset: 0x26B4794
    // Implemented from: InteractionPoint
    // Base method: System.Void InteractionPoint::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HoldableHandle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HoldableHandle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HoldableHandle*, creationType>()));
    }
  }; // HoldableHandle
  #pragma pack(pop)
  static check_size<sizeof(HoldableHandle), 80 + sizeof(::UnityEngine::CapsuleCollider*)> __GlobalNamespace_HoldableHandleSizeCheck;
  static_assert(sizeof(HoldableHandle) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HoldableHandle::get_Capsule
// Il2CppName: get_Capsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::CapsuleCollider* (GlobalNamespace::HoldableHandle::*)()>(&GlobalNamespace::HoldableHandle::get_Capsule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HoldableHandle*), "get_Capsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HoldableHandle::get_Holdable
// Il2CppName: get_Holdable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::HoldableObject* (GlobalNamespace::HoldableHandle::*)()>(&GlobalNamespace::HoldableHandle::get_Holdable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HoldableHandle*), "get_Holdable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HoldableHandle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
