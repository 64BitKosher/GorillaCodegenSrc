// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaveTextureFileFormat
  struct SaveTextureFileFormat;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Color32
  struct Color32;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TextureUtils
  class TextureUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TextureUtils);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TextureUtils*, "", "TextureUtils");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: TextureUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class TextureUtils : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::TextureUtils::$$c__DisplayClass2_0
    class $$c__DisplayClass2_0;
    // static public UnityEngine.Vector4 GetTexelSize(UnityEngine.Texture tex)
    // Offset: 0x2782188
    static ::UnityEngine::Vector4 GetTexelSize(::UnityEngine::Texture* tex);
    // static public UnityEngine.Color32 CalcAverageColor(UnityEngine.Texture2D tex)
    // Offset: 0x27822B4
    static ::UnityEngine::Color32 CalcAverageColor(::UnityEngine::Texture2D* tex);
    // static public System.Void SaveToFile(UnityEngine.Texture source, System.String filePath, System.Int32 width, System.Int32 height, SaveTextureFileFormat fileFormat, System.Int32 jpgQuality, System.Boolean asynchronous, System.Action`1<System.Boolean> done)
    // Offset: 0x27823BC
    static void SaveToFile(::UnityEngine::Texture* source, ::StringW filePath, int width, int height, ::GlobalNamespace::SaveTextureFileFormat fileFormat, int jpgQuality, bool asynchronous, ::System::Action_1<bool>* done);
    // static public UnityEngine.Texture2D CreateCopy(UnityEngine.Texture2D tex)
    // Offset: 0x2782680
    static ::UnityEngine::Texture2D* CreateCopy(::UnityEngine::Texture2D* tex);
  }; // TextureUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TextureUtils::GetTexelSize
// Il2CppName: GetTexelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::UnityEngine::Texture*)>(&GlobalNamespace::TextureUtils::GetTexelSize)> {
  static const MethodInfo* get() {
    static auto* tex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextureUtils*), "GetTexelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TextureUtils::CalcAverageColor
// Il2CppName: CalcAverageColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (*)(::UnityEngine::Texture2D*)>(&GlobalNamespace::TextureUtils::CalcAverageColor)> {
  static const MethodInfo* get() {
    static auto* tex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextureUtils*), "CalcAverageColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TextureUtils::SaveToFile
// Il2CppName: SaveToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture*, ::StringW, int, int, ::GlobalNamespace::SaveTextureFileFormat, int, bool, ::System::Action_1<bool>*)>(&GlobalNamespace::TextureUtils::SaveToFile)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fileFormat = &::il2cpp_utils::GetClassFromName("", "SaveTextureFileFormat")->byval_arg;
    static auto* jpgQuality = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* asynchronous = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* done = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextureUtils*), "SaveToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, filePath, width, height, fileFormat, jpgQuality, asynchronous, done});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TextureUtils::CreateCopy
// Il2CppName: CreateCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::UnityEngine::Texture2D*)>(&GlobalNamespace::TextureUtils::CreateCopy)> {
  static const MethodInfo* get() {
    static auto* tex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TextureUtils*), "CreateCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tex});
  }
};
