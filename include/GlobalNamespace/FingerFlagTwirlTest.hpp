// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FingerFlagTwirlTest
  class FingerFlagTwirlTest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FingerFlagTwirlTest);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FingerFlagTwirlTest*, "", "FingerFlagTwirlTest");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: FingerFlagTwirlTest
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerFlagTwirlTest : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Vector3 rotAnimDurations
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 rotAnimDurations;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rotAnimAmplitudes
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 rotAnimAmplitudes;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.AnimationCurve rotXAnimCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* rotXAnimCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve rotYAnimCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* rotYAnimCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve rotZAnimCurve
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AnimationCurve* rotZAnimCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Vector3 animTimes
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 animTimes;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.Vector3 rotAnimDurations
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotAnimDurations();
    // Get instance field reference: public UnityEngine.Vector3 rotAnimAmplitudes
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotAnimAmplitudes();
    // Get instance field reference: public UnityEngine.AnimationCurve rotXAnimCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rotXAnimCurve();
    // Get instance field reference: public UnityEngine.AnimationCurve rotYAnimCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rotYAnimCurve();
    // Get instance field reference: public UnityEngine.AnimationCurve rotZAnimCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rotZAnimCurve();
    // Get instance field reference: private UnityEngine.Vector3 animTimes
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_animTimes();
    // protected System.Void FixedUpdate()
    // Offset: 0x269B668
    void FixedUpdate();
    // public System.Void .ctor()
    // Offset: 0x269B788
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerFlagTwirlTest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FingerFlagTwirlTest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerFlagTwirlTest*, creationType>()));
    }
  }; // FingerFlagTwirlTest
  #pragma pack(pop)
  static check_size<sizeof(FingerFlagTwirlTest), 80 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_FingerFlagTwirlTestSizeCheck;
  static_assert(sizeof(FingerFlagTwirlTest) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagTwirlTest::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FingerFlagTwirlTest::*)()>(&GlobalNamespace::FingerFlagTwirlTest::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FingerFlagTwirlTest*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FingerFlagTwirlTest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
