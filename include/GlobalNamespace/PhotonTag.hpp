// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Realtime.IOnEventCallback
#include "Photon/Realtime/IOnEventCallback.hpp"
// Including type: Id128
#include "GlobalNamespace/Id128.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: EventData
  class EventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PhotonTag
  class PhotonTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PhotonTag);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PhotonTag*, "", "PhotonTag");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: PhotonTag
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonTag : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Realtime::IOnEventCallback, public ::System::IEquatable_1<::GlobalNamespace::PhotonTag*>*/ {
    public:
    public:
    // private Id128 _tagId
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::GlobalNamespace::Id128 tagId;
    // private Id128 _subId
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::GlobalNamespace::Id128 subId;
    public:
    // Creating interface conversion operator: operator ::Photon::Realtime::IOnEventCallback
    operator ::Photon::Realtime::IOnEventCallback() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IOnEventCallback*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::GlobalNamespace::PhotonTag*>
    operator ::System::IEquatable_1<::GlobalNamespace::PhotonTag*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::GlobalNamespace::PhotonTag*>*>(this);
    }
    // static field const value: static public System.Byte PHOTON_TAG_CODE
    static constexpr const uint8_t PHOTON_TAG_CODE = 177u;
    // Get static field: static public System.Byte PHOTON_TAG_CODE
    static uint8_t _get_PHOTON_TAG_CODE();
    // Set static field: static public System.Byte PHOTON_TAG_CODE
    static void _set_PHOTON_TAG_CODE(uint8_t value);
    // Get instance field reference: private Id128 _tagId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Id128& dyn__tagId();
    // Get instance field reference: private Id128 _subId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Id128& dyn__subId();
    // public Id128 get_TagId()
    // Offset: 0x2764F84
    ::GlobalNamespace::Id128 get_TagId();
    // public Id128 get_SubId()
    // Offset: 0x2764F90
    ::GlobalNamespace::Id128 get_SubId();
    // private System.Void OnEnable()
    // Offset: 0x2764F9C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x2765030
    void OnDisable();
    // private System.Void Photon.Realtime.IOnEventCallback.OnEvent(ExitGames.Client.Photon.EventData ev)
    // Offset: 0x27650C4
    void Photon_Realtime_IOnEventCallback_OnEvent(::ExitGames::Client::Photon::EventData* ev);
    // private System.Void Reset()
    // Offset: 0x27650D4
    void Reset();
    // private System.Void ComputeID()
    // Offset: 0x27650D8
    void ComputeID();
    // public System.Boolean Equals(PhotonTag other)
    // Offset: 0x2765174
    bool Equals(::GlobalNamespace::PhotonTag* other);
    // public System.Void .ctor()
    // Offset: 0x276534C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PhotonTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonTag*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x27651F4
    // Implemented from: UnityEngine.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2765290
    // Implemented from: UnityEngine.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // PhotonTag
  // WARNING Not writing size check since size may be invalid!
  // static public System.Boolean op_Equality(PhotonTag x, PhotonTag y)
  // Offset: 0x2765328
  bool operator ==(::GlobalNamespace::PhotonTag* x, ::GlobalNamespace::PhotonTag& y);
  // static public System.Boolean op_Inequality(PhotonTag x, PhotonTag y)
  // Offset: 0x2765330
  bool operator !=(::GlobalNamespace::PhotonTag* x, ::GlobalNamespace::PhotonTag& y);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::get_TagId
// Il2CppName: get_TagId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Id128 (GlobalNamespace::PhotonTag::*)()>(&GlobalNamespace::PhotonTag::get_TagId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "get_TagId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::get_SubId
// Il2CppName: get_SubId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::Id128 (GlobalNamespace::PhotonTag::*)()>(&GlobalNamespace::PhotonTag::get_SubId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "get_SubId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonTag::*)()>(&GlobalNamespace::PhotonTag::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonTag::*)()>(&GlobalNamespace::PhotonTag::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::Photon_Realtime_IOnEventCallback_OnEvent
// Il2CppName: Photon.Realtime.IOnEventCallback.OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonTag::*)(::ExitGames::Client::Photon::EventData*)>(&GlobalNamespace::PhotonTag::Photon_Realtime_IOnEventCallback_OnEvent)> {
  static const MethodInfo* get() {
    static auto* ev = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "Photon.Realtime.IOnEventCallback.OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ev});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonTag::*)()>(&GlobalNamespace::PhotonTag::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::ComputeID
// Il2CppName: ComputeID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PhotonTag::*)()>(&GlobalNamespace::PhotonTag::ComputeID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "ComputeID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PhotonTag::*)(::GlobalNamespace::PhotonTag*)>(&GlobalNamespace::PhotonTag::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "PhotonTag")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PhotonTag::*)(::Il2CppObject*)>(&GlobalNamespace::PhotonTag::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::PhotonTag::*)()>(&GlobalNamespace::PhotonTag::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PhotonTag*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::PhotonTag::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
