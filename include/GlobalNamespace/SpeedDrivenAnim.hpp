// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaVelocityEstimator
  class GorillaVelocityEstimator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpeedDrivenAnim
  class SpeedDrivenAnim;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpeedDrivenAnim);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpeedDrivenAnim*, "", "SpeedDrivenAnim");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: SpeedDrivenAnim
  // [TokenAttribute] Offset: FFFFFFFF
  class SpeedDrivenAnim : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single speed0
    // Size: 0x4
    // Offset: 0x20
    float speed0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single speed1
    // Size: 0x4
    // Offset: 0x24
    float speed1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxChangePerSecond
    // Size: 0x4
    // Offset: 0x28
    float maxChangePerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxChangePerSecond and: animKey
    char __padding2[0x4] = {};
    // private System.String animKey
    // Size: 0x8
    // Offset: 0x30
    ::StringW animKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private GorillaVelocityEstimator velocityEstimator
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::GorillaVelocityEstimator* velocityEstimator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaVelocityEstimator*) == 0x8);
    // private UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private System.Int32 keyHash
    // Size: 0x4
    // Offset: 0x48
    int keyHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single currentBlend
    // Size: 0x4
    // Offset: 0x4C
    float currentBlend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single speed0
    [[deprecated("Use field access instead!")]] float& dyn_speed0();
    // Get instance field reference: private System.Single speed1
    [[deprecated("Use field access instead!")]] float& dyn_speed1();
    // Get instance field reference: private System.Single maxChangePerSecond
    [[deprecated("Use field access instead!")]] float& dyn_maxChangePerSecond();
    // Get instance field reference: private System.String animKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn_animKey();
    // Get instance field reference: private GorillaVelocityEstimator velocityEstimator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaVelocityEstimator*& dyn_velocityEstimator();
    // Get instance field reference: private UnityEngine.Animator animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_animator();
    // Get instance field reference: private System.Int32 keyHash
    [[deprecated("Use field access instead!")]] int& dyn_keyHash();
    // Get instance field reference: private System.Single currentBlend
    [[deprecated("Use field access instead!")]] float& dyn_currentBlend();
    // private System.Void Start()
    // Offset: 0x278B7E4
    void Start();
    // private System.Void Update()
    // Offset: 0x278B888
    void Update();
    // public System.Void .ctor()
    // Offset: 0x278B990
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpeedDrivenAnim* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpeedDrivenAnim::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpeedDrivenAnim*, creationType>()));
    }
  }; // SpeedDrivenAnim
  #pragma pack(pop)
  static check_size<sizeof(SpeedDrivenAnim), 76 + sizeof(float)> __GlobalNamespace_SpeedDrivenAnimSizeCheck;
  static_assert(sizeof(SpeedDrivenAnim) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpeedDrivenAnim::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpeedDrivenAnim::*)()>(&GlobalNamespace::SpeedDrivenAnim::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpeedDrivenAnim*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpeedDrivenAnim::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpeedDrivenAnim::*)()>(&GlobalNamespace::SpeedDrivenAnim::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpeedDrivenAnim*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpeedDrivenAnim::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
