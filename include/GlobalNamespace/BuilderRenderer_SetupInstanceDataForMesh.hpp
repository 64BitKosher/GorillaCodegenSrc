// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BuilderRenderer
#include "GlobalNamespace/BuilderRenderer.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Jobs.IJobParallelForTransform
#include "UnityEngine/Jobs/IJobParallelForTransform.hpp"
// Including type: Unity.Collections.NativeList`1
#include "Unity/Collections/NativeList_1.hpp"
// Including type: UnityEngine.GraphicsBuffer/IndirectDrawIndexedArgs
#include "UnityEngine/GraphicsBuffer_IndirectDrawIndexedArgs.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Jobs
namespace UnityEngine::Jobs {
  // Forward declaring type: TransformAccess
  struct TransformAccess;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BuilderRenderer::SetupInstanceDataForMesh, "", "BuilderRenderer/SetupInstanceDataForMesh");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BuilderRenderer/SetupInstanceDataForMesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct BuilderRenderer::SetupInstanceDataForMesh/*, public ::System::ValueType, public ::UnityEngine::Jobs::IJobParallelForTransform*/ {
    public:
    public:
    // public Unity.Collections.NativeList`1<System.Int32> texIndex
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeList_1<int> texIndex;
    // public Unity.Collections.NativeList`1<System.Single> tint
    // Size: 0xFFFFFFFF
    // Offset: 0x8
    ::Unity::Collections::NativeList_1<float> tint;
    // public UnityEngine.GraphicsBuffer/IndirectDrawIndexedArgs commandData
    // Size: 0x14
    // Offset: 0x10
    ::UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs commandData;
    // Field size check
    static_assert(sizeof(::UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs) == 0x14);
    // public UnityEngine.Vector3 cameraPos
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 cameraPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Unity.Collections.NativeArray`1<System.Int32> instanceTexIndex
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::Unity::Collections::NativeArray_1<int> instanceTexIndex;
    // public Unity.Collections.NativeArray`1<UnityEngine.Matrix4x4> objectToWorld
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    ::Unity::Collections::NativeArray_1<::UnityEngine::Matrix4x4> objectToWorld;
    // public Unity.Collections.NativeArray`1<System.Single> instanceTint
    // Size: 0xFFFFFFFF
    // Offset: 0x50
    ::Unity::Collections::NativeArray_1<float> instanceTint;
    // public Unity.Collections.NativeArray`1<System.Int32> lodLevel
    // Size: 0xFFFFFFFF
    // Offset: 0x60
    ::Unity::Collections::NativeArray_1<int> lodLevel;
    // public Unity.Collections.NativeArray`1<System.Int32> lodDirty
    // Size: 0xFFFFFFFF
    // Offset: 0x70
    ::Unity::Collections::NativeArray_1<int> lodDirty;
    public:
    // Creating value type constructor for type: SetupInstanceDataForMesh
    constexpr SetupInstanceDataForMesh(::Unity::Collections::NativeList_1<int> texIndex_ = {}, ::Unity::Collections::NativeList_1<float> tint_ = {}, ::UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs commandData_ = {}, ::UnityEngine::Vector3 cameraPos_ = {}, ::Unity::Collections::NativeArray_1<int> instanceTexIndex_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Matrix4x4> objectToWorld_ = {}, ::Unity::Collections::NativeArray_1<float> instanceTint_ = {}, ::Unity::Collections::NativeArray_1<int> lodLevel_ = {}, ::Unity::Collections::NativeArray_1<int> lodDirty_ = {}) noexcept : texIndex{texIndex_}, tint{tint_}, commandData{commandData_}, cameraPos{cameraPos_}, instanceTexIndex{instanceTexIndex_}, objectToWorld{objectToWorld_}, instanceTint{instanceTint_}, lodLevel{lodLevel_}, lodDirty{lodDirty_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Jobs::IJobParallelForTransform
    operator ::UnityEngine::Jobs::IJobParallelForTransform() noexcept {
      return *reinterpret_cast<::UnityEngine::Jobs::IJobParallelForTransform*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeList`1<System.Int32> texIndex
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeList_1<int>& dyn_texIndex();
    // Get instance field reference: public Unity.Collections.NativeList`1<System.Single> tint
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeList_1<float>& dyn_tint();
    // Get instance field reference: public UnityEngine.GraphicsBuffer/IndirectDrawIndexedArgs commandData
    [[deprecated("Use field access instead!")]] ::UnityEngine::GraphicsBuffer::IndirectDrawIndexedArgs& dyn_commandData();
    // Get instance field reference: public UnityEngine.Vector3 cameraPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_cameraPos();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> instanceTexIndex
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_instanceTexIndex();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Matrix4x4> objectToWorld
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Matrix4x4>& dyn_objectToWorld();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Single> instanceTint
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_instanceTint();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> lodLevel
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_lodLevel();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Int32> lodDirty
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<int>& dyn_lodDirty();
    // public System.Void Execute(System.Int32 index, UnityEngine.Jobs.TransformAccess transform)
    // Offset: 0x26EDF2C
    void Execute(int index, ::UnityEngine::Jobs::TransformAccess transform);
  }; // BuilderRenderer/SetupInstanceDataForMesh
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BuilderRenderer::SetupInstanceDataForMesh::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BuilderRenderer::SetupInstanceDataForMesh::*)(int, ::UnityEngine::Jobs::TransformAccess)>(&GlobalNamespace::BuilderRenderer::SetupInstanceDataForMesh::Execute)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine.Jobs", "TransformAccess")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BuilderRenderer::SetupInstanceDataForMesh), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, transform});
  }
};
