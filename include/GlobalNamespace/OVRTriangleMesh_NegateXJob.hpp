// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRTriangleMesh
#include "GlobalNamespace/OVRTriangleMesh.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Jobs.IJobParallelFor
#include "Unity/Jobs/IJobParallelFor.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRTriangleMesh::NegateXJob, "", "OVRTriangleMesh/NegateXJob");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRTriangleMesh/NegateXJob
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRTriangleMesh::NegateXJob/*, public ::System::ValueType, public ::Unity::Jobs::IJobParallelFor*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<UnityEngine.Vector3> Positions
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> Positions;
    public:
    // Creating value type constructor for type: NegateXJob
    constexpr NegateXJob(::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> Positions_ = {}) noexcept : Positions{Positions_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Unity::Jobs::IJobParallelFor
    operator ::Unity::Jobs::IJobParallelFor() noexcept {
      return *reinterpret_cast<::Unity::Jobs::IJobParallelFor*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>
    constexpr operator ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>() const noexcept {
      return Positions;
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Vector3> Positions
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>& dyn_Positions();
    // public System.Void Execute(System.Int32 index)
    // Offset: 0x48B23C8
    void Execute(int index);
  }; // OVRTriangleMesh/NegateXJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRTriangleMesh::NegateXJob::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVRTriangleMesh::NegateXJob::*)(int)>(&GlobalNamespace::OVRTriangleMesh::NegateXJob::Execute)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRTriangleMesh::NegateXJob), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
