// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRPassthroughColorLut/ColorLutTextureConverter
#include "GlobalNamespace/OVRPassthroughColorLut_ColorLutTextureConverter.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings, "", "OVRPassthroughColorLut/ColorLutTextureConverter/TextureSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x15
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPassthroughColorLut/ColorLutTextureConverter/TextureSettings
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Int32 <Width>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int Width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Height>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int Height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Resolution>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    int Resolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <SlicesPerRow>k__BackingField
    // Size: 0x4
    // Offset: 0xC
    int SlicesPerRow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <ChannelCount>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int ChannelCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Boolean <FlipY>k__BackingField
    // Size: 0x1
    // Offset: 0x14
    bool FlipY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: TextureSettings
    constexpr TextureSettings(int Width_ = {}, int Height_ = {}, int Resolution_ = {}, int SlicesPerRow_ = {}, int ChannelCount_ = {}, bool FlipY_ = {}) noexcept : Width{Width_}, Height{Height_}, Resolution{Resolution_}, SlicesPerRow{SlicesPerRow_}, ChannelCount{ChannelCount_}, FlipY{FlipY_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <Width>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Width$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Height>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Height$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Resolution>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Resolution$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <SlicesPerRow>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$SlicesPerRow$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <ChannelCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ChannelCount$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <FlipY>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$FlipY$k__BackingField();
    // public System.Int32 get_Width()
    // Offset: 0x4962D2C
    int get_Width();
    // public System.Int32 get_Height()
    // Offset: 0x4962D34
    int get_Height();
    // public System.Int32 get_Resolution()
    // Offset: 0x4962D3C
    int get_Resolution();
    // public System.Int32 get_SlicesPerRow()
    // Offset: 0x4962D44
    int get_SlicesPerRow();
    // public System.Int32 get_ChannelCount()
    // Offset: 0x4962D4C
    int get_ChannelCount();
    // public System.Boolean get_FlipY()
    // Offset: 0x4962D54
    bool get_FlipY();
    // public System.Void .ctor(System.Int32 width, System.Int32 height, System.Int32 resolution, System.Int32 slicesPerRow, System.Int32 channelCount, System.Boolean flipY)
    // Offset: 0x4962C74
    // ABORTED: conflicts with another method.  TextureSettings(int width, int height, int resolution, int slicesPerRow, int channelCount, bool flipY);
  }; // OVRPassthroughColorLut/ColorLutTextureConverter/TextureSettings
  #pragma pack(pop)
  static check_size<sizeof(OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings), 20 + sizeof(bool)> __GlobalNamespace_OVRPassthroughColorLut_ColorLutTextureConverter_TextureSettingsSizeCheck;
  static_assert(sizeof(OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings) == 0x15);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_Width
// Il2CppName: get_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::*)()>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings), "get_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::*)()>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_Resolution
// Il2CppName: get_Resolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::*)()>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_Resolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings), "get_Resolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_SlicesPerRow
// Il2CppName: get_SlicesPerRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::*)()>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_SlicesPerRow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings), "get_SlicesPerRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_ChannelCount
// Il2CppName: get_ChannelCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::*)()>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_ChannelCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings), "get_ChannelCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_FlipY
// Il2CppName: get_FlipY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::*)()>(&GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::get_FlipY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings), "get_FlipY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPassthroughColorLut::ColorLutTextureConverter::TextureSettings::TextureSettings
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
