// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTag.GuidedRefs.BaseGuidedRefTargetMono
#include "GorillaTag/GuidedRefs/BaseGuidedRefTargetMono.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SlingshotProjectile
  class SlingshotProjectile;
  // Forward declaring type: PaperPlaneProjectile
  class PaperPlaneProjectile;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collision
  class Collision;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SlingshotProjectileHitNotifier
  class SlingshotProjectileHitNotifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SlingshotProjectileHitNotifier);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SlingshotProjectileHitNotifier*, "", "SlingshotProjectileHitNotifier");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: SlingshotProjectileHitNotifier
  // [TokenAttribute] Offset: FFFFFFFF
  class SlingshotProjectileHitNotifier : public ::GorillaTag::GuidedRefs::BaseGuidedRefTargetMono {
    public:
    // Writing base type padding for base size: 0x31 to desired offset: 0x38
    char ___base_padding[0x7] = {};
    // Nested type: ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent
    class ProjectileHitEvent;
    // Nested type: ::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent
    class PaperPlaneProjectileHitEvent;
    // Nested type: ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent
    class ProjectileTriggerEvent;
    public:
    // private SlingshotProjectileHitNotifier/ProjectileHitEvent OnProjectileHit
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* OnProjectileHit;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*) == 0x8);
    // private SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent OnPaperPlaneHit
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent* OnPaperPlaneHit;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent*) == 0x8);
    // private SlingshotProjectileHitNotifier/ProjectileHitEvent OnProjectileCollisionStay
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* OnProjectileCollisionStay;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*) == 0x8);
    // private SlingshotProjectileHitNotifier/ProjectileTriggerEvent OnProjectileTriggerEnter
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* OnProjectileTriggerEnter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*) == 0x8);
    // private SlingshotProjectileHitNotifier/ProjectileTriggerEvent OnProjectileTriggerExit
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* OnProjectileTriggerExit;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*) == 0x8);
    public:
    // Get instance field reference: private SlingshotProjectileHitNotifier/ProjectileHitEvent OnProjectileHit
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*& dyn_OnProjectileHit();
    // Get instance field reference: private SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent OnPaperPlaneHit
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent*& dyn_OnPaperPlaneHit();
    // Get instance field reference: private SlingshotProjectileHitNotifier/ProjectileHitEvent OnProjectileCollisionStay
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*& dyn_OnProjectileCollisionStay();
    // Get instance field reference: private SlingshotProjectileHitNotifier/ProjectileTriggerEvent OnProjectileTriggerEnter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*& dyn_OnProjectileTriggerEnter();
    // Get instance field reference: private SlingshotProjectileHitNotifier/ProjectileTriggerEvent OnProjectileTriggerExit
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*& dyn_OnProjectileTriggerExit();
    // public System.Void add_OnProjectileHit(SlingshotProjectileHitNotifier/ProjectileHitEvent value)
    // Offset: 0x2971A3C
    void add_OnProjectileHit(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* value);
    // public System.Void remove_OnProjectileHit(SlingshotProjectileHitNotifier/ProjectileHitEvent value)
    // Offset: 0x2971AD8
    void remove_OnProjectileHit(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* value);
    // public System.Void add_OnPaperPlaneHit(SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent value)
    // Offset: 0x2971B74
    void add_OnPaperPlaneHit(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent* value);
    // public System.Void remove_OnPaperPlaneHit(SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent value)
    // Offset: 0x2971C10
    void remove_OnPaperPlaneHit(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent* value);
    // public System.Void add_OnProjectileCollisionStay(SlingshotProjectileHitNotifier/ProjectileHitEvent value)
    // Offset: 0x2971CAC
    void add_OnProjectileCollisionStay(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* value);
    // public System.Void remove_OnProjectileCollisionStay(SlingshotProjectileHitNotifier/ProjectileHitEvent value)
    // Offset: 0x2971D48
    void remove_OnProjectileCollisionStay(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent* value);
    // public System.Void add_OnProjectileTriggerEnter(SlingshotProjectileHitNotifier/ProjectileTriggerEvent value)
    // Offset: 0x2971DE4
    void add_OnProjectileTriggerEnter(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* value);
    // public System.Void remove_OnProjectileTriggerEnter(SlingshotProjectileHitNotifier/ProjectileTriggerEvent value)
    // Offset: 0x2971E80
    void remove_OnProjectileTriggerEnter(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* value);
    // public System.Void add_OnProjectileTriggerExit(SlingshotProjectileHitNotifier/ProjectileTriggerEvent value)
    // Offset: 0x2971F1C
    void add_OnProjectileTriggerExit(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* value);
    // public System.Void remove_OnProjectileTriggerExit(SlingshotProjectileHitNotifier/ProjectileTriggerEvent value)
    // Offset: 0x2971FB8
    void remove_OnProjectileTriggerExit(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent* value);
    // public System.Void InvokeHit(SlingshotProjectile projectile, UnityEngine.Collision collision)
    // Offset: 0x2971064
    void InvokeHit(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision);
    // public System.Void InvokeHit(PaperPlaneProjectile projectile, UnityEngine.Collider collider)
    // Offset: 0x2972054
    void InvokeHit(::GlobalNamespace::PaperPlaneProjectile* projectile, ::UnityEngine::Collider* collider);
    // public System.Void InvokeCollisionStay(SlingshotProjectile projectile, UnityEngine.Collision collision)
    // Offset: 0x29711BC
    void InvokeCollisionStay(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision);
    // public System.Void InvokeTriggerEnter(SlingshotProjectile projectile, UnityEngine.Collider collider)
    // Offset: 0x2971818
    void InvokeTriggerEnter(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider);
    // public System.Void InvokeTriggerExit(SlingshotProjectile projectile, UnityEngine.Collider collider)
    // Offset: 0x2971280
    void InvokeTriggerExit(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider);
    // private System.Void OnDestroy()
    // Offset: 0x2972070
    // Implemented from: GorillaTag.GuidedRefs.BaseGuidedRefTargetMono
    // Base method: System.Void BaseGuidedRefTargetMono::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x29720A8
    // Implemented from: GorillaTag.GuidedRefs.BaseGuidedRefTargetMono
    // Base method: System.Void BaseGuidedRefTargetMono::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SlingshotProjectileHitNotifier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlingshotProjectileHitNotifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SlingshotProjectileHitNotifier*, creationType>()));
    }
  }; // SlingshotProjectileHitNotifier
  #pragma pack(pop)
  static check_size<sizeof(SlingshotProjectileHitNotifier), 88 + sizeof(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*)> __GlobalNamespace_SlingshotProjectileHitNotifierSizeCheck;
  static_assert(sizeof(SlingshotProjectileHitNotifier) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileHit
// Il2CppName: add_OnProjectileHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileHit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/ProjectileHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "add_OnProjectileHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileHit
// Il2CppName: remove_OnProjectileHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileHit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/ProjectileHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "remove_OnProjectileHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::add_OnPaperPlaneHit
// Il2CppName: add_OnPaperPlaneHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::add_OnPaperPlaneHit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "add_OnPaperPlaneHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnPaperPlaneHit
// Il2CppName: remove_OnPaperPlaneHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::PaperPlaneProjectileHitEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnPaperPlaneHit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/PaperPlaneProjectileHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "remove_OnPaperPlaneHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileCollisionStay
// Il2CppName: add_OnProjectileCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileCollisionStay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/ProjectileHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "add_OnProjectileCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileCollisionStay
// Il2CppName: remove_OnProjectileCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileHitEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileCollisionStay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/ProjectileHitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "remove_OnProjectileCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileTriggerEnter
// Il2CppName: add_OnProjectileTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/ProjectileTriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "add_OnProjectileTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileTriggerEnter
// Il2CppName: remove_OnProjectileTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/ProjectileTriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "remove_OnProjectileTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileTriggerExit
// Il2CppName: add_OnProjectileTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::add_OnProjectileTriggerExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/ProjectileTriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "add_OnProjectileTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileTriggerExit
// Il2CppName: remove_OnProjectileTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectileHitNotifier::ProjectileTriggerEvent*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::remove_OnProjectileTriggerExit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectileHitNotifier/ProjectileTriggerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "remove_OnProjectileTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::InvokeHit
// Il2CppName: InvokeHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collision*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::InvokeHit)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "InvokeHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::InvokeHit
// Il2CppName: InvokeHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::PaperPlaneProjectile*, ::UnityEngine::Collider*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::InvokeHit)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "PaperPlaneProjectile")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "InvokeHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::InvokeCollisionStay
// Il2CppName: InvokeCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collision*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::InvokeCollisionStay)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "InvokeCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::InvokeTriggerEnter
// Il2CppName: InvokeTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collider*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::InvokeTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "InvokeTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::InvokeTriggerExit
// Il2CppName: InvokeTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collider*)>(&GlobalNamespace::SlingshotProjectileHitNotifier::InvokeTriggerExit)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "InvokeTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlingshotProjectileHitNotifier::*)()>(&GlobalNamespace::SlingshotProjectileHitNotifier::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlingshotProjectileHitNotifier*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlingshotProjectileHitNotifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
